package com.business.zee;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.commons.validator.routines.EmailValidator;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.Point;
import org.openqa.selenium.ScreenOrientation;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.testng.Reporter;
import org.testng.asserts.SoftAssert;
import com.deviceDetails.DeviceDetails;
import com.driverInstance.CommandBase;
import com.driverInstance.DriverInstance;
import com.emailReport.GmailInbox;
import com.extent.ExtentReporter;
import com.metadata.ResponseInstance;
import com.propertyfilereader.PropertyFileReader;
import com.utility.LoggingUtils;
import com.utility.Utilities;
import com.zee5.ApplicasterPages.*;
import com.zee5.PWAPages.*;

import io.appium.java_client.AppiumDriver;
import io.appium.java_client.MobileElement;
import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.AndroidElement;
import io.appium.java_client.android.AndroidTouchAction;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.touch.LongPressOptions;
import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.ElementOption;
import io.appium.java_client.touch.offset.PointOption;
import io.github.bonigarcia.wdm.WebDriverManager;
import io.restassured.RestAssured;
import io.restassured.response.Response;

public class Zee5ApplicasterBusinessLogic extends Utilities {

	public Zee5ApplicasterBusinessLogic(String Application) {
		new CommandBase(Application);
		init();
	}

	private int timeout;




	/** Retry Count */
	private int retryCount;
	ExtentReporter extent = new ExtentReporter();

	/** The Constant logger. */
//	final static Logger logger = Logger.getLogger("rootLogger");
	static LoggingUtils logger = new LoggingUtils();

	/** The Android driver. */
	public AndroidDriver<AndroidElement> androidDriver;

	/** The Android driver. */
	public IOSDriver<WebElement> iOSDriver;

	/** Array of WebPWA */
	static ArrayList<String> WebPWAMyProfile = new ArrayList<String>();
	static ArrayList<String> WebPWAWatchList = new ArrayList<String>();
	static ArrayList<String> WebPWAReminders = new ArrayList<String>();
	static ArrayList<String> WebPWASubscription = new ArrayList<String>();
	static ArrayList<String> webPWATransaction = new ArrayList<String>();
	static String webDisplayLanguage = null;
	static String appDisplayLanguage = null;
	static String webUpdatedFirstName = null;

	/** Array of App */
	static ArrayList<String> AppMyProfile = new ArrayList<String>();
	static HashSet<String> contentsInWatchList = new HashSet<String>();
	static HashSet<String> contentsInReminders = new HashSet<String>();
	static ArrayList<String> AppSubscription = new ArrayList<String>();
	static ArrayList<String> AppTransaction = new ArrayList<String>();

	static ArrayList<String> marketsettings = new ArrayList<String>();
	static ArrayList<String> Upgradesettings = new ArrayList<String>();
	static ArrayList<String> Upgradewatchlist = new ArrayList<String>();
	static ArrayList<String> marketwatchlist = new ArrayList<String>();
	static ArrayList<String> Downloadedcontent = new ArrayList<String>();
	static ArrayList<String> UpgradeDownloadedcontent = new ArrayList<String>();
	static ArrayList<String> MarketRecentSearch = new ArrayList<String>();
	static ArrayList<String> UpgradeRecentSearch = new ArrayList<String>();
	static ArrayList<String> UpgradeCWtray = new ArrayList<String>();
	static ArrayList<String> MarketCWtray = new ArrayList<String>();

	private SoftAssert softAssertion = new SoftAssert();

	public int getTimeout() {
		return timeout;
	}

	public void setTimeout(int timeout) {
		this.timeout = timeout;
	}

	public int getRetryCount() {
		return retryCount;
	}

	public void setRetryCount(int retryCount) {
		this.retryCount = retryCount;
	}

	GmailInbox gmail = new GmailInbox();

	String SVODEpisode = getParameterFromXML("SVODEpisode");

	String packDetails;

	String getRuntimeValue = "Auto";

	boolean scroll = false;

	public void init() {

		PropertyFileReader handler = new PropertyFileReader("properties/Execution.properties");
		setTimeout(Integer.parseInt(handler.getproperty("TIMEOUT")));
		setRetryCount(Integer.parseInt(handler.getproperty("RETRY_COUNT")));
//		logger.info("Loaded the following properties" + " TimeOut :" + getTimeout() + " RetryCount :" + getRetryCount());
	}

	/**
	 * Function to Relaunch the driver
	 */
	public void relaunch(boolean clearData) throws Exception {
		HeaderChildNode("Relaunch the app");
		logger.info("Relaunching the application");
		extent.extentLogger("Relaunch", "Relaunching the application");
		waitTime(10000);
		getDriver().quit();
		relaunch = clearData;
		new Zee5ApplicasterBusinessLogic("zee");
		if (userType != "Guest" & clearData == false) {
			System.out.println("Navigates to Landing Sccreen..");
		}
	}

	/**
	 * Function to quit the driver
	 */
	public void tearDown() {
		getDriver().quit();
	}

	String pUserType = getParameterFromXML("userType");
	String RegisteredEmail = getParameterFromXML("RegisteredEmail");
	String RegisteredEmailPassword = getParameterFromXML("RegisteredEmailPassword");
	String UnRegisteredMobile = getParameterFromXML("UnRegisteredMobile");
	String RegisteredMobile = getParameterFromXML("RegisteredMobile");
	String RegisteredMobilePassword = getParameterFromXML("RegisteredMobilePassword");
	String PromoCode = getParameterFromXML("PromoCode");
	String NonsubscribedUserName = getParameterFromXML("NonsubscribedUserName");
	String NonsubscribedPassword = getParameterFromXML("NonsubscribedPassword");
	String SubscribedUserName = getParameterFromXML("SubscribedUserName");
	String SubscribedPassword = getParameterFromXML("SubscribedPassword");
	String FirstName = getParameterFromXML("FirstName");
	String LastName = getParameterFromXML("LastName");

	String RSVODUser = getParameterFromXML("RSVODUser");
	String RSVODPassword = getParameterFromXML("RSVODPassword");

	String content1 = getParameterFromXML("searchcontent1");
	String content2 = getParameterFromXML("searchcontent2");
	String content3 = getParameterFromXML("searchcontent3");
	String content4 = getParameterFromXML("searchcontent4");
	String content5 = getParameterFromXML("searchcontent5");
	String content6 = getParameterFromXML("searchcontent6");
	String pVideoQuality = getParameterFromXML("VideoQuality");
	String pMovie = getParameterFromXML("MovieName");
	String RSVODContent = getParameterFromXML("RSVODContent");

	// Retrieve the Mobile Device Name
	String getOEMName = DeviceDetails.OEM;
/**
 * @author Madhav
 * @Note this method is used to handle the location pop up on the landing screen for Sugarbox 
 * @param permission
 * @param userType
 * @throws Exception
 */
	public void accessDeviceLocationPopUp(String permission, String userType) throws Exception {
		extent.HeaderChildNode("Access Device Location PopUp");
		extent.extentLogger("Time ", "Time taken to launch the App (Sec)" + DriverInstance.timeElapsed.getSeconds());
		extent.extentLogger("User Type", "UserType : " + userType);
		logger.info("UserType : " + userType);
//		System.out.println("Access Device Location PopUp");
//		Thread.sleep(10000);
//
//		if (verifyElementExist(AMDOnboardingScreen.objAllowLocationAccessPopup, "AllowPopup")) {
//			Wait(5000);
//
//			String str1 = getAttributValue("text", AMDOnboardingScreen.objFirstPermissionButton);
//			String str2 = getAttributValue("text", AMDOnboardingScreen.objSecondPermissionButton);
//
//			if (str1.contains("ALLOW")) {
//				System.out.println("ALLOW is present");
//				click(AMDOnboardingScreen.objAllow(str1), str1);
//
//			} else if (str1.contains("WHILE USING THE APP")) {
//				System.out.println("Allow is present");
//				click(AMDOnboardingScreen.objAllow(str1), str1);
//			} else if (str1.contains("Allow")) {
//				System.out.println("Allow is present");
//				click(AMDOnboardingScreen.objAllow(str1), str1);
//			} else if (str2.contains("ALLOW")) {
//				System.out.println("ALLOW is present");
//				click(AMDOnboardingScreen.objAllow(str2), str2);
//			} else if (str2.contains("Allow")) {
//				System.out.println("Allow is present");
//				click(AMDOnboardingScreen.objAllow(str2), str2);
//			}
////			AppPerformanceTestInfo("com.graymatrix.did");
////			Thread.sleep(10000);
//		} else {
//			System.out.println("Access Device Location PopUp not displayed");
//		}
	}
/**
 * @implNote this method will search the content and click on the searched content
 * @param locator
 * @param str
 * @throws Exception
 */
	public void searchAndClick(By locator, String str) throws Exception {

		for (int i = 0; i <= 3; i++) {

			if (verifyIsElementDisplayed(locator, str)) {
				verifyElementPresentAndClick(locator, str);
				break;
			} else {
				PartialSwipe("UP", 2);
			}
		}
	}

	/*
	 * =============================================================================
	 * ===== ------------------------------ Script Author: SHREE NIDHI
	 * -------------------------------
	 * 
	 * List of Functions Created - contentLanguage(String userType) -
	 * mobileRegistration(String loginThrough) - subscribeNowSceanrios() -
	 * unRegisteredEmailSubscribe() - subscribeFLowMobileNumber() -
	 * passwordScenario(String UserType) - otpScenarios() -
	 * checkScreenAfterRelaunch(String userType, String ScreenName)
	 * =============================================================================
	 * ========
	 */

	/**
	 * @implNote This method is to validate the functionality of Content Language
	 * @param userType
	 * @throws Exception
	 */
	public void contentLanguage(String userType) throws Exception {
		extent.HeaderChildNode("Content Language Screen functionality");
		extent.extentLogger("User Type", "UserType : " + userType);
		logger.info("UserType : " + userType);

		String secondaryLanguage = "Malayalam";
		verifyElementExist(AMDOnboardingScreen.objScreenTitle, "Screen header");
		verifyElementExist(AMDOnboardingScreen.objContentLanguagePageTitle, "Page title");
		verifyElementExist(AMDOnboardingScreen.objContentLanguageContainer, "Content language");
		verifyElementExist(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button in content language screen");
		// verifyElementExist(AMDOnboardingScreen.objBackBtn, "Back button in content
		// language screen");
		click(AMDOnboardingScreen.objSelectContentLang("English"), "Unselected English language");
		// click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button in content
		// language screen");

//		if (checkElementExist(AMDOnboardingScreen.objLoginLnk, "Login button")) {
//			logger.info("User is navigated to Intro screen");
//			extent.extentLoggerPass("Navigation", "User is navigated to Intro screen");
//			Back(1);
//		}
		PartialSwipe("UP", 1);
		waitTime(3000);
		click(AMDOnboardingScreen.objSelectContentLang("Kannada"), "Unselected Kannada language");
		PartialSwipe("UP", 1);
		if (checkElementExist(AMDOnboardingScreen.objSelectContentLang(secondaryLanguage),
				secondaryLanguage + " language")) {
			click(AMDOnboardingScreen.objSelectContentLang(secondaryLanguage), secondaryLanguage + " language");
			logger.info("Clicked on " + secondaryLanguage + " language");
			extent.extentLoggerPass("Content Language", "Clicked on " + secondaryLanguage + " language");
			click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button in content language screen");
		} else {
			Swipe("UP", 1);
			verifyElementExist(AMDOnboardingScreen.objSelectContentLang(secondaryLanguage),
					secondaryLanguage + " language");
			click(AMDOnboardingScreen.objSelectContentLang(secondaryLanguage), secondaryLanguage + " language");
			logger.info("Clicked on " + secondaryLanguage + " language");
			click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button in content language screen");
		}
		waitTime(2000);
		String ContentLanguagetitle = getText(AMDOnboardingScreen.objContentLanguagePageTitle);
		logger.info(ContentLanguagetitle);
		if (ContentLanguagetitle.contains("please select at least one more language")) {
			logger.info("Select atleast one language screen is displayed");
			extent.extentLoggerPass("Screen", "Select atleast one language screen is displayed");
		}
		verifyElementExist(AMDOnboardingScreen.objSelectContentLang("Hindi"), "Hindi language");
		verifyElementExist(AMDOnboardingScreen.objSelectContentLang("English"), "English language");
		verifyElementExist(AMDOnboardingScreen.objSelectContentLang("Marathi"), "Marathi language");
		verifyElementExist(AMDOnboardingScreen.objSelectContentLang("Telugu"), "Telugu language");
//		Swipe("UP", 1);
		swipeUntilFindElement(AMDOnboardingScreen.objSelectContentLang("Tamil"), "Up");
		verifyElementExist(AMDOnboardingScreen.objSelectContentLang("Kannada"), "Kannada language");
		verifyElementExist(AMDOnboardingScreen.objSelectContentLang("Tamil"), "Tamil language");
//		Swipe("UP", 1);
		swipeUntilFindElement(AMDOnboardingScreen.objSelectContentLang("Bengali"), "Up");
		verifyElementExist(AMDOnboardingScreen.objSelectContentLang("Bengali"), "Bengali language");
		verifyElementExist(AMDOnboardingScreen.objBackBtn, "Back button in content language screen");
		swipeUntilFindElement(AMDOnboardingScreen.objSelectContentLang("Kannada"), "DOWN");
		click(AMDOnboardingScreen.objSelectContentLang("Kannada"), "Kannada language");
		verifyElementPresentAndClick(AMDOnboardingScreen.objContent_ContinueBtn,
				"Continue button in content language screen");
		waitTime(2000);
		if (checkElementExist(AMDOnboardingScreen.objLoginLnk, "Login button")) {
			logger.info("User is navigated to Intro screen");
			extent.extentLoggerPass("Navigation", "User is navigated to Intro screen");
		}
	}

	/**
	 * @implNote This method is validate mobile registration from Intro screen
	 * @param loginThrough
	 * @param userType
	 * @throws Exception
	 */
	public void mobileRegistration(String loginThrough, String userType) throws Exception {
		extent.HeaderChildNode("Mobile Registration From Intro screen " + loginThrough + " button");
		if (userType.equalsIgnoreCase("Guest")) {
			navigateToRegisterScreen(loginThrough);
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "EmailField");
			type(AMDLoginScreen.objEmailIdField, UnRegisteredMobile, "Mobile");
			hideKeyboard();
			click(AMDLoginScreen.objProceedBtn, "Proceed icon");
			registerForFreeScreen("Mobile");
			waitTime(3000);
			otpScenarios();
			Back(1);
			waitTime(3000);
			hideKeyboard();
			Back(1);
			int lenText = findElement(AMDLoginScreen.objEmailIdField).getAttribute("value").length();
			for (int i = 0; i < lenText; i++) {
				getDriver().findElement(AMDLoginScreen.objEmailIdField).sendKeys(Keys.BACK_SPACE);
			}
			clearField(AMDLoginScreen.objEmailIdField, "EmailId/Phone field");
			type(AMDLoginScreen.objEmailIdField, RegisteredMobile, "Mobile number field");
			click(AMDLoginScreen.objProceedBtn, "Proceed button");
			waitTime(5000);
			type(AMDLoginScreen.objPasswordField, RegisteredMobilePassword, "Password field");
			hideKeyboard();
			click(AMDLoginScreen.objLoginBtn, "Login button");
			verifyElementExist(AMDHomePage.objHomeTab, "Home tab");
			click(AMDHomePage.objMoreMenu, "More Menu");
			swipeUntilFindElement(AMDHomePage.objLogout, "UP");
			click(AMDHomePage.objLogout, "Logout");
			click(AMDHomePage.objLogoutPopUpLogoutButton, "Logout button");
			click(AMDHomePage.objHome, "Home tab");
		} else {
			logger.info("Mobile Registration is NOT Applicable for Registered Users");
			extentLogger("Mobile Registration", "Mobile Registration is NOT Applicable for Registered Users");
		}
	}
/**
 * @implNote This method is to validate the Subscribe Now functionality
 * @param userType
 * @throws Exception
 */
	public void subscribeNowSceanrios(String userType) throws Exception {
		extent.HeaderChildNode("Subscribe Now Scenarios");

		if (userType.equals("Guest")) {
			verifyElementPresentAndClick(AMDOnboardingScreen.objSubscribeNowBtn, "Buy Plan button");
			subscribePageValidation();
			passwordScenario("Registered");
			unRegisteredEmailSubscribe();
			subscribeFLowMobileNumber();
		}
		if (userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("Relaunch functionality");

			click(AMDLoginScreen.objEmailIdField, "Email field");
			verifyElementExist(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, NonsubscribedUserName, "Email field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed button");
			waitTime(2000);
			type(AMDLoginScreen.objPasswordField, NonsubscribedPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login button");
			verifyElementExist(AMDHomePage.objHomeTab, "Home tab");
			relaunch(false);
			waitTime(2000);
			if (checkElementExist(AMDHomePage.objHomeTab, "Home tab")) {
				logger.info("When " + userType
						+ " relaunch the app Display/Content language, Intro screen and Login/Register screen is skipped");
				extent.extentLoggerPass("Relaunch", "When " + userType
						+ " relaunch the app Display/Content language, Intro screen and Login/Register screen is skipped");
			} else {
				logger.error("When " + userType
						+ " relaunch the app Display/Content language, Intro screen and Login/Register screen is not skipped");
				extent.extentLoggerFail("Relaunch", "When " + userType
						+ " relaunch the app Display/Content language, Intro screen and Login/Register screen is not skipped");
			}
		}
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("Relaunch functionality");

			click(AMDLoginScreen.objEmailIdField, "Email field");
			verifyElementExist(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SubscribedUserName, "Email field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed button");
			waitTime(2000);
			type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login button");
			verifyElementExist(AMDHomePage.objHomeTab, "Home tab");
			relaunch(false);
			waitTime(2000);
			if (checkElementExist(AMDHomePage.objHomeTab, "Home tab")) {
				logger.info("When " + userType
						+ " relaunch the app Display/Content language, Intro screen and Login/Register screen is skipped");
				extent.extentLogger("Relaunch", "When " + userType
						+ " relaunch the app Display/Content language, Intro screen and Login/Register screen is skipped");
			} else {
				logger.error("When " + userType
						+ " relaunch the app Display/Content language, Intro screen and Login/Register screen is not skipped");
				extent.extentLoggerFail("Relaunch", "When " + userType
						+ " relaunch the app Display/Content language, Intro screen and Login/Register screen is not skipped");
			}
		}
	}

	
	/**
	 * @implNote This method is to validate the functionality of Buy Plan for UnRegistered mobile number
	 * @throws Exception
	 */
	public void subscribeFLowMobileNumber() throws Exception {
		extent.HeaderChildNode("SubscribeNow Functionality for UnRegistered Mobile number");
		System.out.println("\nSubscribeNow Functionality for UnRegistered Mobile number");
		// verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe header in
		// subscription page");
		verifyElementExist(AMDSubscibeScreen.objSubscribePageBackButton, "Back button in subscribe page");
		// verifyElementExist(AMDSubscibeScreen.objAdbanner, "Carosual in subscription
		// page");
		Swipe("UP", 1);
		verifyElementExist(AMDSubscibeScreen.objHaveACodeCTA, "Have a code in subscribe page");
//		verifyElementPresent(AMDSubscibeScreen.objApply, "Apply button is subscribe page");
//		PartialSwipe("UP", 4);
//	    packDetails = getText(AMDSubscibeScreen.objRSVODselectedPackDesc);
		click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
		verifyElementExist(AMDSubscibeScreen.objAccountInfoScreen, "Account info screen");
		hideKeyboard();
		// verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe header");
		click(AMDSubscibeScreen.objEmailID, "Email id");
		type(AMDSubscibeScreen.objEmailID, UnRegisteredMobile, "Email");
		hideKeyboard();
		click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
		verifyElementExist(AMDSubscibeScreen.objVerifyOTPScreen, "OTP screen");
		type(AMDRegistrationScreen.objOTPField1, "1", "OTP box1");
		type(AMDRegistrationScreen.objOTPField2, "1", "OTP box2");

		click(AMDRegistrationScreen.objOTPField3, "OTP field 3");
		// Added a generic object to handle the numeric keyboard across various devices
//		if (verifyElementExist(AMDRegistrationScreen.objNumericKeys, "Numeric Keypad")) {
//			logger.info("Numeric keyboard is displayed in OTP screen");
//			extent.extentLogger("Numeric", "Numeric keyboard is displayed in OTP screen");
//		}
		type(AMDRegistrationScreen.objOTPField3, "1", "OTP box3");
		type(AMDRegistrationScreen.objOTPField4, "1", "OTP box4");

		hideKeyboard();
		waitTime(2000);
		if (findElement(AMDSubscibeScreen.objVerifyOTPScreenProceed).isEnabled()) {
			logger.info("Verify Button is highlighted");
			extent.extentLoggerPass("Verify", "Verify Button is highlighted");
		} else {
			logger.error("Verify Button is not highlighted");
			extent.extentLoggerFail("Verify", "Verify Button is not highlighted");
		}
		Back(1);

		extent.HeaderChildNode("Buy Plan Functionality for Registered Mobile number");
//		int lenText = findElement(AMDLoginScreen.objEmailIdField).getAttribute("value").length();
//		for (int i = 0; i < lenText; i++) {
//			getDriver().findElement(AMDLoginScreen.objEmailIdField).sendKeys(Keys.BACK_SPACE);
//		}
		click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
		// clearField(AMDLoginScreen.objEmailIdField, UnRegisteredMobile);
		click(AMDSubscibeScreen.objEmailID, "Email");
		type(AMDSubscibeScreen.objEmailID, RegisteredMobile, "Email");

		hideKeyboard();
		click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
		verifyElementExist(AMDSubscibeScreen.objEnterPassword, "Enter Password PopUp");
		verifyElementExist(AMDSubscibeScreen.objEnterPassword, "Password field");
		verifyElementPresentAndClick(AMDSubscibeScreen.objGetOTP, "Get OTP");
		verifyElementExist(AMDSubscibeScreen.objVerifyOTPScreen, "OTP screen");

		type(AMDRegistrationScreen.objOTPField1, "1", "OTP box1");
		type(AMDRegistrationScreen.objOTPField2, "1", "OTP box2");

		// Added a generic object to handle the numeric keyboard across various devices
		click(AMDRegistrationScreen.objOTPField3, "OTP field 3");
//		if (verifyElementExist(AMDRegistrationScreen.objNumericKeys, "Numeric Keypad")) {
//			logger.info("Numeric keyboard is displayed in OTP screen");
//			extent.extentLogger("Numeric", "Numeric keyboard is displayed in OTP screen");
//		}
		type(AMDRegistrationScreen.objOTPField3, "1", "OTP box3");
		type(AMDRegistrationScreen.objOTPField4, "1", "OTP box4");

		hideKeyboard();
		waitTime(2000);
		if (findElement(AMDSubscibeScreen.objVerifyOTPScreenProceed).isEnabled()) {
			logger.info("Verify Button is highlighted");
			extent.extentLoggerPass("Verify", "Verify Button is highlighted");
		} else {
			logger.info("Verify Button is not highlighted");
			extent.extentLoggerPass("Verify", "Verify Button is not highlighted");
		}
		Back(1);
		click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
		click(AMDSubscibeScreen.objEmailID, "Email");
		type(AMDSubscibeScreen.objEmailID, RegisteredMobile, "Email");
		hideKeyboard();
		click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
		passwordScenario("Registered");
		Wait(5000);
		Back(1);
	}

	/**
	 * @implNote This method will close the Interstitial Ad 
	 * @param byLocator
	 * @param iTimeOut
	 * @throws Exception
	 */
	public void closeInterstitialAd(By byLocator, int iTimeOut) throws Exception {
		try {

			if (checkcondition(byLocator)) {
				click(byLocator, "Interstitial Ad_Close button");
			}

		} catch (NoSuchElementException e) {
			System.out.println(e);
		}
	}

	/**
	 * @implNote This method is to verify the OTP Screen
	 * @throws Exception
	 */
	public void otpScenarios() throws Exception {
		System.out.println("\nOTP Screen Verification");
		verifyElementExist(AMDRegistrationScreen.objOTPScreen, "OTP screen");
		verifyElementExist(AMDRegistrationScreen.objOTPTimer, "OTP timer");

		if (getDriver().findElement(AMDLoginScreen.objResendOtpLink).isDisplayed()) {
			logger.info(getText(AMDLoginScreen.objResendOtpLink) + " link is displayed");
			extentLoggerPass("Resend button", getText(AMDLoginScreen.objResendOtpLink) + " link is displayed");
		} else {
			logger.info("Didn't get OTP? text is not displayed with Resend CTA");
			extentLoggerFail("Resend button", "Didn't get OTP? text is not displayed with Resend CTA");
		}

		String OTPTimer1 = getText(AMDRegistrationScreen.objOTPTimer);
		logger.info(OTPTimer1);
		click(AMDRegistrationScreen.objVerifyOtpButton, "Verify button");
		waitTime(10000);
		String OTPTimer2 = getText(AMDRegistrationScreen.objOTPTimer);
		logger.info(OTPTimer2);
		boolean Time = OTPTimer1.equals(OTPTimer2);
		if (Time == false) {
			logger.info("The Otp timer is in reverse order");
			extentLoggerPass("OtpTimer", "The Otp timer is in reverse order");
		} else {
			logger.info("The Otp timer is not in reverse order");
			extentLoggerPass("OtpTimer", "The Otp timer is not in reverse order");
		}
		type(AMDRegistrationScreen.objOTPField1, "1", "OTP box1");
		type(AMDRegistrationScreen.objOTPField2, "1", "OTP box2");
//		if (verifyElementExist(AMDRegistrationScreen.objNumericKeyBoard, "Alphakeyboard")) {
//			logger.info("Numeric keyboard is displayed in OTP screen");
//			extent.extentLogger("Numeric", "Numeric keyboard is displayed in OTP screen");
//		}
		type(AMDRegistrationScreen.objOTPField3, "1", "OTP box3");
		type(AMDRegistrationScreen.objOTPField4, "1", "OTP box4");
		hideKeyboard();
		waitTime(2000);
		if (findElement(AMDRegistrationScreen.objVerifyOtpButton).isEnabled()) {
			logger.info("Verify Button is highlighted");
			extent.extentLoggerPass("Verify", "Verify Button is highlighted");
		} else {
			logger.error("Verify Button is not highlighted");
			extent.extentLoggerFail("Verify", "Verify Button is not highlighted");
		}
	}
/**
 * @note this method is used for Registering the user.
 * @param user
 * @throws Exception
 */
	public void registerForFreeScreen(String user) throws Exception {
		extent.HeaderChildNode("Register for Free");
		System.out.println("\nRegister for Free");

		String pDOB = "26", pNewPassword = "123456";
		String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";

		if (user.equals("Email")) {
			type(AMDRegistrationScreen.objEmailIDTextField, newEmailId, "Email field");
			click(AMDRegistrationScreen.objProceedBtn, "Proceed button");
		} else if (user.equals("Mobile")) {
			logger.info("Mobile registration");
		}
		verifyElementExist(AMDRegistrationScreen.objScreenTitle, "Register for free title");
	//	type(AMDRegistrationScreen.objFirstNameTxtField, FirstName, "First name field");
//		hideKeyboard();
	///	click(AMDRegistrationScreen.objEmailIDHeaderTxt, "HideKeyboard");

	//	click(AMDRegistrationScreen.objLastNameTxtField, "Last Name field");
	//	type(AMDRegistrationScreen.objLastNameTxtField, LastName, "Last Name");
//		hideKeyboard();
	//	click(AMDRegistrationScreen.objEmailIDHeaderTxt, "HideKeyboard");

		click(AMDRegistrationScreen.objDOBTxtField, "Age field");
		type(AMDRegistrationScreen.objDOBTxtField, pDOB, "Age");
//		hideKeyboard();
		click(AMDRegistrationScreen.objEmailIDHeaderTxt, "HideKeyboard");

		verifyElementPresentAndClick(AMDRegistrationScreen.objGederTxtField, "Gender field");
		verifyElementPresentAndClick(AMDRegistrationScreen.objMale, "Gender male");
		click(AMDRegistrationScreen.objPasswordTxtField, "Passowrd");
		type(AMDRegistrationScreen.objPasswordTxtField, pNewPassword, "Password field");
//		hideKeyboard();
		click(AMDRegistrationScreen.objEmailIDHeaderTxt, "HideKeyboard");

		verifyElementPresentAndClick(AMDRegistrationScreen.objRegisterBtn, "Register button");
		waitTime(4000);
		if (user.equals("Email")) {
			boolean verifyHomePage = verifyElementExist(AMDHomePage.objHomeTab, "Home Screen");
			if (verifyHomePage) {
				logger.info("New User Registerd to ZEE5 App successfully");
				extent.extentLoggerPass("Registration", "New User Registerd to ZEE5 App successfully");
			} else {
				logger.error("New User failed to Register to ZEE5 App");
				extent.extentLoggerFail("Registration", "New User failed to Register to ZEE5 App");
			}
		} else if (user.equals("Mobile")) {
			logger.info("Mobile registration");
		} else {
			logger.info("Prepaid PopUp after registration");
		}
	}
/**
 * @implNote Method to check the functionality of Buy Subscription
 * @throws Exception
 */
	public void subscribeAllaccessFunctionality() throws Exception {

		click(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for free");

		click(AMDLoginScreen.objEmailIdField, "Email field");
		type(AMDLoginScreen.objEmailIdField, SubscribedUserName, "Email field");
		hideKeyboard();
		click(AMDLoginScreen.objProceedBtn, "Proceed button");
		click(AMDLoginScreen.objPasswordField, "Password field");
		type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
		hideKeyboard();
		click(AMDLoginScreen.objLoginButton, "Login button");
		waitTime(1000);
		verifyElementExist(AMDHomePage.objHomeBtn, "Home button");
		click(AMDHomePage.objMoreMenu, "More menu");
		click(AMDHomePage.objMyProfileIcon, "profile icon");

		if (checkElementExist(AMDHomePage.objEditProfile, "Edit profile")) {
			logger.info("User is logged in successfully");
			extent.extentLoggerPass("Edit", "User is logged in successfully");
		} else {
			logger.error("User is logged in successfully");
			extent.extentLoggerFail("Edit", "User is logged in successfully");
		}
		Back(1);
		verifyElementPresentAndClick(AMDHomePage.objMoreMenuOptions("Buy Subscription"), "Buy Subscription");
		verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
		Swipe("UP", 1);
		waitTime(3000);
		Swipe("UP", 1);
//	verifyElementPresentAndClick(AMDSubscibeScreen.obj365daysPack, "365 days all access pack");
		int size = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).size();
		for (int i = 0; i < size; i++) {
			boolean isDisplayed = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).isDisplayed();
			if (isDisplayed) {
				String pack = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).getText();
				extent.extentLoggerPass("Packs", "Available Pack " + i + " : " + pack);
				logger.info("Available Pack " + i + " : " + pack);
			} else {
				extent.extentLoggerFail("Packs", "No Packs are available");
				logger.info("No Packs are available");
			}
		}
		Swipe("UP", 1);
		click(AMDSubscibeScreen.objContinueBtn, "Continue button");
		if (checkElementExist(AMDHomePage.objHomeBtn, "Home tab")) {
			logger.info(
					"Subscribed user is navigated to home page after tapping on all access plan subscription continue button");
			extent.extentLoggerPass("Home",
					"Subscribed user is navigated to home page after tapping on all access plan subscription continue button");
		} else {
			logger.error(
					"Subscribed user is not navigated to home page after tapping on all access plan subscription continue button");
			extent.extentLoggerFail("Home",
					"Subscribed user is not navigated to home page after tapping on all access plan subscription continue button");
		}
	}
/**
 * @implNote this method will validate the Subscribe Screen
 * @throws Exception
 */
	public void subscribePageValidation() throws Exception {
		System.out.println("\nVerifying Subscribe Page");

		// verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe header in
		// subscription page");
		verifyElementExist(AMDSubscibeScreen.objSubscribePageBackButton, "Back button in subscribe page");
		// verifyElementExist(AMDSubscibeScreen.objAdbanner, "Carosual in subscription
		// page");
		Swipe("UP", 1);
		verifyElementExist(AMDSubscibeScreen.objHaveACodeCTA, "Have a code in subscribe page");
		click(AMDSubscibeScreen.objHaveACodeCTA, "Have a code in subscribe page");
		// verifyElementPresent(AMDSubscibeScreen.objApply, "Apply button is subscribe
		// page");
		if (verifyElementIsNotDisplayed(AMDSubscibeScreen.objApplyOnHaveACodescreen)) {
			logger.info("Apply button is not highlighted by default");
			extent.extentLoggerPass("Highlighted", "Apply button is not highlighted by default");
		} else {
			logger.error("Apply button is highlighted by default");
			extent.extentLoggerFail("Highlighted", "Apply button is highlighted by default");
		}
		click(AMDSubscibeScreen.objEnterACodeEditFiled, "Promo");
		type(AMDSubscibeScreen.objEnterACodeEditFiled, PromoCode, "Promo code");
		hideKeyboard();
		click(AMDSubscibeScreen.objApplyOnHaveACodescreen, "Apply button");
		verifyElementExist(AMDSubscibeScreen.objApplyPromoCodeappliedText, "Promo code applied text");
		if (verifyIsElementDisplayed(AMDSubscibeScreen.objApplyPromoCodeappliedText)) {
			logger.info("Discounted price is displayed after promo code is applied");
			extent.extentLoggerPass("Promo", "Discounted price is displayed after promo code is applied");
		} else {
			logger.error("Discounted price is not displayed after promo code is applied");
			extent.extentLoggerFail("Promo", "Discounted price is not displayed after promo code is applied");
		}
		click(AMDSubscibeScreen.objChangeCodebutton, "Change promo");
		click(AMDSubscibeScreen.objEnterACodeEditFiled, "Promo");
		type(AMDSubscibeScreen.objEnterACodeEditFiled, "zee5flat5000", "Promo code");
		hideKeyboard();
		click(AMDSubscibeScreen.objApplyOnHaveACodescreen, "Apply button");
		verifyElementExist(AMDSubscibeScreen.objInvalidPromoCodeText, "Invalid promo code error message");
		// Swipe("UP", 1);
		Back(1);
		verifyElementExist(AMDSubscibeScreen.objPlanName, "Available plan in Subscribe screen");
//		Swipe("DOWN", 1);
//		verifyElementExist(AMDSubscibeScreen.objPremiumTab, "Premium  pack tab");
//		verifyElementExist(AMDSubscibeScreen.objClubTab, "Club pack tab");
//		Swipe("UP", 3);
//		waitTime(3000);
//		int size = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).size();
//		for (int i = 0; i < size; i++) {
//			boolean isDisplayed = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).isDisplayed();
//			if (isDisplayed) {
//				String pack = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).getText();
//				extent.extentLoggerPass("Packs", "Available Pack " + i + " : " + pack);
//				logger.info("Available Pack " + i + " : " + pack);
//			} else {
//				extent.extentLoggerFail("Packs", "No Packs are available");
//				logger.info("No Packs are available");
//			}
//		}
////		PartialSwipe("UP", 2);
//		packDetails = getText(AMDSubscibeScreen.objRSVODselectedPackDesc);
		verifyElementPresent(AMDSubscibeScreen.objContinueBtn, "Continue button in subscribe page");
		if (getDriver().findElement(AMDSubscibeScreen.objContinueBtn).isEnabled()) {
			logger.info("Continue button is highlighted");
			extent.extentLoggerPass("Highlighted", "Continue button is highlighted");
		}
//		Swipe("DOWN", 1);
//		click(AMDSubscibeScreen.objClubTab, "Club Pack tab");
//		PartialSwipe("UP", 1);
//		waitTime(3000);
//		int size1 = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).size();
//		for (int i = 0; i < size1; i++) {
//			boolean isDisplayed = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).isDisplayed();
//			if (isDisplayed) {
//				String pack = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).getText();
//				extent.extentLoggerPass("Packs", "Available Pack " + i + " : " + pack);
//				logger.info("Available Pack " + i + " : " + pack);
//			} else {
//				extent.extentLoggerFail("Packs", "No Packs are available");
//				logger.info("No Packs are available");
//			}
//		}
//		verifyElementExist(AMDSubscibeScreen.objDescriptionText, "Premium Description in subscribe page");
//		Swipe("UP", 1);
//		if (getDriver().findElement(AMDSubscibeScreen.objContinueBtn).isEnabled()) {
//			logger.info("Continue button is highlighted");
//			extent.extentLoggerPass("Highlighted", "Continue button is highlighted");
//		}
		click(AMDSubscibeScreen.objContinueBtn, "Continue button");
		verifyElementExist(AMDSubscibeScreen.objAccountInfoScreen, "Account info screen");
		hideKeyboard();// ADDED By Kushal
		// verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe header");
		verifyElementExist(AMDSubscibeScreen.objSubscribePageBackButton, "Back button in Account info screen");
		// verifyElementExist(AMDSubscibeScreen.objSelectedPackDesc, "Selected pack
		// description in account info screen");
		verifyElementExist(AMDSubscibeScreen.objEmailID, "Email id field in Account info screen");
		Swipe("UP", 1);
		verifyElementExist(AMDSubscibeScreen.objORSeperator, "OR seperator in Account info screen");
		verifyElementExist(AMDSubscibeScreen.objFacebookIcon, "FB icon in Account info screen");
		verifyElementExist(AMDSubscibeScreen.objGoogleIcon, "Google icon in Account info screen");
		verifyElementExist(AMDSubscibeScreen.objTwitterIcon, "Twitter icon in Account info screen");
		verifyElementExist(AMDSubscibeScreen.objContinueBtn, "Continue button dehighlighted by default");
		click(AMDSubscibeScreen.objEmailID, "Email");
		type(AMDSubscibeScreen.objEmailID, RegisteredEmail, "Email field");
		hideKeyboard();
		String Email = getText(AMDSubscibeScreen.objEmailID);
		if (Email != null) {
			logger.info("User can enter email/mobile number in email id field");
			extent.extentLoggerPass("Email", "User can enter email/mobile number in email id field");
		} else {
			logger.error("User can not enter email/mobile number in email id field");
			extent.extentLoggerFail("Email", "User can not enter email/mobile number in email id field");
		}
//		verifyElementExist(AMDSubscibeScreen.objProceedBtn, "Proceed button");
		click(AMDSubscibeScreen.objContinueBtn, "Continue button");
		verifyElementExist(AMDSubscibeScreen.objEnterPassword, "Enter Password PopUp");
	}

	/**
	 * @implNote This method will verify the different password scenarios
	 * @param UserType
	 * @throws Exception
	 */
	public void passwordScenario(String UserType) throws Exception {

		System.out.println("\nPassword Scenario");
		String InvalidPwd = "USe";
		verifyElementExist(AMDSubscibeScreen.objEnterPassword, "Password field");
		click(AMDSubscibeScreen.objEnterPassword, "Password");
		type(AMDSubscibeScreen.objEnterPassword, InvalidPwd, "Password field");
		hideKeyboard();
		boolean var = verifyIsElementDisplayed(AMDSubscibeScreen.objPasswordErrorMessage);
		if (var == true) {
			logger.info("Password must be a minimum of 6 characters error message is displayed");
			extentLoggerPass("Password", "Password must be a minimum of 6 characters error message is displayed");
		}
		clearField(AMDSubscibeScreen.objEnterPassword, "Password field");
		type(AMDSubscibeScreen.objEnterPassword, "r", "Password field");
		waitTime(2000);
		hideKeyboard();
		System.out.println("DEVICE NAME : " + getOEMName);
		if (getOEMName.contains("vivo")) {
			hidePwdKeyboard();
		}
		verifyElementExist(AMDSubscibeScreen.objPasswordErrorMessage, "Error message");
		if (verifyIsElementDisplayed(AMDSubscibeScreen.objPasswordHidden)) {
			logger.info("Passowrd is not shown");
			extent.extentLoggerPass("password", "Passowrd is not shown");
		} else {
			logger.error("Passowrd is shown");
			extent.extentLoggerFail("password", "Passowrd is shown");
		}
		click(AMDSubscibeScreen.objShowIcon, "Toggle password icon");
		if (verifyIsElementDisplayed(AMDSubscibeScreen.objPasswordDisplayed)) {
			logger.info("Passowrd is shown after clicking on toggle passowrd icon");
			extent.extentLoggerPass("password", "Passowrd is shown after clicking on toggle passowrd icon");
		} else {
			logger.error("Passowrd is not shown after clicking on toggle passowrd icon");
			extent.extentLoggerFail("password", "Passowrd is not shown after clicking on toggle passowrd icon");
		}
		click(AMDSubscibeScreen.objShowIcon, "Toggle password icon");
		if (UserType == "Registered") {
			verifyElementExist(AMDSubscibeScreen.objForgotPassword, "forgot password");
			Wait(1000);
			click(AMDSubscibeScreen.objForgotPassword, "forgot password");
			verifyElementExist(AMDSubscibeScreen.objForgotPasswordPageHeader, "Forgot password page");
			waitTime(5000);
			click(AMDSubscibeScreen.objProceedBtn, "Proceed button");
			if (verifyElementIsNotDisplayed(AMDSubscibeScreen.objEnterPassword)) {
				Back(2);
			}

		}
		if (UserType == "UnRegistered") {
			logger.info("Forgot password is not displayed for unregistered user");
			verifyElementExist(AMDSubscibeScreen.objTermsandPrivacyLink, "Terms and privacy links");
		}

		verifyElementExist(AMDSubscibeScreen.objEnterPassword, "Password field");
		waitTime(5000);
		clearField(AMDSubscibeScreen.objEnterPassword, "Password field");
		click(AMDSubscibeScreen.objEnterPassword, "Password");
		waitTime(5000);
		type(AMDSubscibeScreen.objEnterPassword, RegisteredEmailPassword, "Password field");
		hideKeyboard();
		System.out.println("DEVICE NAME : " + getOEMName);
		if (getOEMName.contains("vivo")) {
			hidePwdKeyboard();
		}
		verifyElementPresentAndClick(AMDSubscibeScreen.objContinueOnSubscribePopup,
				"Continue button in password popup");
		waitTime(5000);
		verifyElementExist(AMDSubscibeScreen.objMakePaymentScreen, "Payment page");

		// verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe header in
		// Payment page");
		// verifyElementExist(AMDSubscibeScreen.objSubscribePageBackButton, "Back button
		// in Payment page");
		verifyElementExist(AMDSubscibeScreen.objAvaliablePack, "Selected Pack details");
		Back(2);
		click(AMDHomePage.objMoreMenu, "More Menu");
		Swipe("UP", 3);
		click(AMDHomePage.objLogout, "Logout");
		click(AMDHomePage.objLogoutPopUpLogoutButton, "Logout button");
		click(AMDHomePage.objHome, "Home tab");
		verifyElementPresentAndClick(AMDHomePage.objSubscribeTeaser, "Buy Plan icon");
	}

	/**
	 * @implNote this method is to check the functionality of Buy Plan for Un-Registered email id
	 * @throws Exception
	 */
	public void unRegisteredEmailSubscribe() throws Exception {
		extent.HeaderChildNode("SubscribeNow Functionality for UnRegistered email-id");
		System.out.println("\nSubscribeNow Functionality for UnRegistered email-id");
		// verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe header in
		// subscription page");
		verifyElementExist(AMDSubscibeScreen.objSubscribePageBackButton, "Back button in subscribe page");
		// verifyElementExist(AMDSubscibeScreen.objAdbanner, "Carosual in subscription
		// page");
		Swipe("UP", 1);
		verifyElementExist(AMDSubscibeScreen.objHaveACodeCTA, "Have a code in subscribe page");
		click(AMDSubscibeScreen.objHaveACodeCTA, "Have a code in subscribe page");
//		verifyElementExist(AMDSubscibeScreen.objApplyPromoCodeTextbox, "Promo code in subscribe page");
//		verifyElementPresent(AMDSubscibeScreen.objApply, "Apply button is subscribe page");
//		Swipe("UP", 3);
//		packDetails = getText(AMDSubscibeScreen.objRSVODselectedPackDesc);
		Back(1);
		click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
		verifyElementExist(AMDSubscibeScreen.objAccountInfoScreen, "Account info screen");
		hideKeyboard(); // Added by Kushal
//		verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe header");
		click(AMDSubscibeScreen.objEmailID, "Email id");
		type(AMDSubscibeScreen.objEmailID, RandomStringGenerator(5) + "@gmail.com", "Email");
		hideKeyboard();
		click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Proceed button");
		passwordScenario("UnRegistered");
	}

	/*
	 * =============================================================================
	 * ===== ------------------------------ Script Author: BINDU
	 * -------------------------------
	 * 
	 * List of Functions Created - BrowseForFreeAndMobileRegistration() -
	 * VerifyLoginPage() - SearchBox(String userType) -
	 * verifySearchLandingScreen(String userType) - verifySearchOption(String
	 * userType)
	 * =============================================================================
	 * ========
	 */
/**
 * @implNote Validating the Browse for Free button on Intro screen
 * @throws Exception
 */
	public void browseForFreeAndMobileRegistration() throws Exception {

		extent.HeaderChildNode("Validating BrowseForFree Button on the intro screen");
		waitTime(5000);
		verifyElementPresent(AMDLoginScreen.objBrowseForFreeBtn, "BrowseForFreee Button");
		waitTime(5000);
		String BrowseForFree = getText(AMDLoginScreen.objBrowseForFreeBtn);
		System.out.println(BrowseForFree);
		if (BrowseForFree.concat("English") != null) {
			logger.info("Browse For Free text is displayed in Selected Language");
			extent.extentLogger("Login/Register Screen", "Browse For Free text is displayed in Selected Language");
		} else {
			logger.info("Browse For Free text is not displayed in Selected Language");
			extent.extentLogger("Login/Register Screen", "Browse For Free text is not displayed in Selected Language");

		}

		verifyElementPresentAndClick(AMDLoginScreen.objBrowseForFreeBtn, "BrowseForFreee Button");
		waitTime(6000);
		logger.info("User navigated to Login/Register screen tapping on the Browser For Free Button");
		extent.extentLogger("Login/Register Screen",
				"User navigated to Login/Register screen tapping on the Browser For Free Button");

		extent.HeaderChildNode("Validating user navigated to OTP Verification Screen");
		verifyElementPresent(AMDLoginScreen.objEmailIdField, "Email Field");
		click(AMDLoginScreen.objEmailIdField, "Email Field");
		hideKeyboard();
		type(AMDLoginScreen.objEmailIdField, "1234567891", "Email Field");
		verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
		waitTime(4000);
		verifyElementPresentAndClick(AMDRegistrationScreen.objFirstNameTxtField, "FirstName Field");
		hideKeyboard();
		type(AMDRegistrationScreen.objFirstNameTxtField, "Zeetest", "FirstName Field");
		verifyElementPresentAndClick(AMDRegistrationScreen.objLastNameTxtField, "LastName Field");
		hideKeyboard();
		type(AMDRegistrationScreen.objLastNameTxtField, "Test", "LastName Field");

		verifyElementPresentAndClick(AMDRegistrationScreen.objDOBTxtField, "Date Of Birth Field");

		// verifyElementPresentAndClick(AMDRegistrationScreen.objDateAccept, "Date Of
		// Birth");

		verifyElementPresentAndClick(AMDRegistrationScreen.objDateSelection, "Date in calender popup");
		click(AMDRegistrationScreen.objOkButtonInCalenderPopUp, "Ok button");

//    verifyElementPresentAndClick(AMDEditProfileScreen.objGenderDropdown, "Gender Dropdown");
//    waitTime(3000);
//    verifyElementPresentAndClick(AMDRegistrationScreen.objFemale, "Female");        
//    waitTime(2000);

		verifyElementPresentAndClick(AMDRegistrationScreen.objGederTxtField, "Gender field");
		verifyElementPresentAndClick(AMDRegistrationScreen.objMale, "Gender male");

		verifyElementPresentAndClick(AMDRegistrationScreen.objPasswordTxtField, "Password Field");
		waitTime(2000);
		hideKeyboard();
		type(AMDRegistrationScreen.objPasswordTxtField, "adcbdefg", "Password Field");
		waitTime(2000);

//    verifyElementPresentAndClick(AMDRegistrationScreen.objRegister, "Register Field");
//    waitTime(6000);
//    verifyElementPresent(AMDRegistrationScreen.objVerifyOTPScreen, "OTP Verificatin Page");

		verifyElementPresentAndClick(AMDRegistrationScreen.objRegisterBtn, "Register button");
		waitTime(3000);

		logger.info("User navigated to OTP Verification Page");
		extent.extentLogger("OTP Verification Screen", "User navigated to OTP Verification screen");
		otpScenarios();
		Back(1);
		waitTime(3000);
		hideKeyboard();
		Back(1);
		int lenText = findElement(AMDLoginScreen.objEmailIdField).getAttribute("value").length();
		for (int i = 0; i < lenText; i++) {
			getDriver().findElement(AMDLoginScreen.objEmailIdField).sendKeys(Keys.BACK_SPACE);
		}
		type(AMDLoginScreen.objEmailIdField, RegisteredMobile, "Mobile number field");
		verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed button");
		type(AMDLoginScreen.objPasswordField, RegisteredMobilePassword, "Password field");
		verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login button");
		verifyElementExist(AMDHomePage.objHomeTab, "Home tab");

	}

	/**
	 * @implNote This method is to validate UI/UX of Search Landing Screen
	 * @param userType
	 * @throws Exception
	 */
	public void searchBox(String userType) throws Exception {
		extent.HeaderChildNode("validating the UI/UX of search Landing screen");
		System.out.println("\nValidating the UI/UX of search Landing screen");
		verifyElementPresent(AMDSearchScreen.objSearchIcon, "Search icon");
		click(AMDSearchScreen.objSearchIcon, "Search icon");
		waitTime(6000);

		verifyElementExist(AMDHomePage.HomeIcon, "Bottom bar Home Option");
		verifyElementExist(AMDHomePage.UpcomingIcon, "Bottom bar Upcoming Option");
		verifyElementExist(AMDHomePage.DownloadIcon, "Bottom bar Downloads Option");
		verifyElementExist(AMDHomePage.MoreMenuIcon, "Bottom bar More Option");

		WebElement elementBackBtn = findElement(AMDLoginScreen.objSearchBackBtn);
		int BackBtnleftX = elementBackBtn.getLocation().getX();
		int BAckBtnrightX = BackBtnleftX + elementBackBtn.getSize().getWidth();
		int BackBtnmiddleX1 = (BAckBtnrightX + BackBtnleftX) / 2;

		if (BackBtnmiddleX1 <= 200) {
			logger.info("Back button is displayed at top left of the screen");
			extent.extentLoggerPass("Back button", "Back button is displayed at top left of the screen");
		} else {
			logger.error("Back button is not displayed at top left of the screen");
			extent.extentLoggerFail("Back button", "Back button is not displayed at top left of the screen");
		}

		WebElement elementVoiceIcon = findElement(AMDSearchScreen.objVoiceicon);
		int VoiceIconRightX = elementVoiceIcon.getLocation().getX();
		System.out.println(VoiceIconRightX);
		Dimension sizee = getDriver().manage().window().getSize();
//		System.out.println(sizee.getWidth());
		int sizeee = sizee.getWidth() - 300;
		System.out.println(sizee.getWidth() + " X " + sizeee);

		if (VoiceIconRightX >= sizeee) {
			logger.info("Microphone search icon is displayed at top right of the Search screen");
			extent.extentLoggerPass("Microphone icon",
					"Microphone search icon is displayed at top right of the Search screen");
		} else {
			logger.error("Microphone icon is not displayed at top right of the Search screen");
			extent.extentLoggerFail("Microphone icon",
					"Microphone icon is not displayed at top right of the Search screen");
		}

		click(AMDSearchScreen.objVoiceicon, "Microphone Icon");
		// wait(2000);
		String MicrophoneAccessPopup = getDriver().findElement(AMDSearchScreen.objMicroPhone).getText();
		System.out.println(MicrophoneAccessPopup);

		if (MicrophoneAccessPopup.equalsIgnoreCase(
				"ZEE5 requires your permission to access your device's microphone to enable voice search. The voice data is not stored with ZEE5.")) {
			logger.info("Device Microphone access permission pop up is displayed");
			extent.extentLoggerPass("Voice Search Icon", "Device Microphone access permission pop up is displayed");
		} else {
			logger.error("Device Microphone access permission pop up is not displayed");
			extent.extentLoggerFail("Voice Search icon", "Device Microphone access permission pop up is not displayed");
		}

//		verifyElementExist(AMDSearchScreen.objVoiceSearchBackButton, "Back button");
//		click(AMDSearchScreen.objVoiceSearchBackButton, "Back button");
		Back(1);

		waitTime(2000);

		verifyElementExist(AMDSearchScreen.objsearchBox, "Search Box");
		logger.info("Search box is available on top section of search landing screen");
		extent.extentLoggerPass("Search box", "Search box is available on top section of search landing screen");

		String SearchBoxText = getDriver().findElement(AMDSearchScreen.objsearchBox).getText();
		logger.info(SearchBoxText);

		if (SearchBoxText.equalsIgnoreCase("Search for Movies, Shows, Channels etc.")) {
			logger.info("Water Marked Text is displayed by default in Search Box");
			extent.extentLoggerPass("Search box", "Water Marked Text is displayed by default in Search Box");
		} else {
			logger.error("Water Marked Text is not displayed by default in Search Box");
			extent.extentLoggerFail("Search Box", "Water Marked Text is not displayed by default in Search Box");
		}

		verifyElementPresentAndClick(AMDLoginScreen.objSearchBackBtn, "Back Button");
		if (verifyElementPresent(AMDHomePage.objTopNav_HomeTab, "Home Tab")) {
			logger.info("User navigated to previous screen on tapping of back button available on the search screen");
			extent.extentLoggerPass("Previous screen",
					"User navigated to previous screen on tapping of back button available on the search screen");
		} else {
			logger.error(
					"User is not navigated to previous screen on tapping of back button available on the search screen");
			extent.extentLoggerFail("Previous screen",
					"User is not navigated to previous screen on tapping of back button available on the search screen");
		}

		if (userType.equalsIgnoreCase("Guest")) {

			selectContentLang_MoreMenu("Hindi");
		}

		verifyElementPresent(AMDSearchScreen.objSearchIcon, "Search icon");
		click(AMDSearchScreen.objSearchIcon, "Search icon");

		waitTime(2000);
		if (checkElementExist(AMDSearchScreen.objTrendingSearchOverlay, "Trending Search Overlay")) {
			logger.info("Trending search overlay is displayed");
			extent.extentLoggerPass("Search screen", "Trending search overlay is displayed");
		} else {
			logger.info("Trending search overlay is not displayed");
			extent.extentLoggerFail("Search screen", "Trending search overlay is not displayed");
		}
		waitTime(2000);
		if (checkElementExist(AMDSearchScreen.objTopSearchOverlay, "Top search Overlay")) {
			logger.info("Top search overlay is displayed");
			extent.extentLoggerPass("Search screen", "Top search overlay is displayed");
		} else {
			logger.info("Top search overlay is not displayed");
			extent.extentLoggerWarning("Search screen", "Top search overlay is not displayed");
		}
		if (userType.equals("Guest")) {
			deselectContentLang_MoreMenuAndSelectDefaultLanguage("Hindi");
		}

//		click(AMDSearchScreen.objSearchEditBox, "Search box");
//		if(verifyElementExist(AMDSearchScreen.objVirtualKeyboard, "Keyboard"))
//		{
//			logger.info("Keyboard is displayed");
//			extent.extentLogger("Search screen","Keyboard is displayed");
//		}
//		else
//		{
//			logger.error("Keyboard is not displayed");
//			extent.extentLoggerFail("Search Screen", "Keyboard is not displayed");
//			
//		}
//		
//		hideKeyboard();	
		click(AMDHomePage.HomeIcon, "Bottom bar Home Option");
	}

	/**
	 * @implNote This method is to validate whether user is able to navigate to Search Landing screen
	 * @param userType
	 * @throws Exception
	 */
	public void verifySearchLandingScreen(String userType) throws Exception {
		extent.HeaderChildNode("Validating " + userType + " user navigates to Search landing screen");
		System.out.println("\nValidating " + userType + "user navigates to Search landing screen");
		waitTime(10000);
		verifyElementPresent(AMDHomePage.objTopNav_HomeTab, "Home Tab");
		boolean lastSecTab = false;

		int noOfTabs = getCount(AMDHomePage.objTitle);
		for (int i = 1; i <= 10; i++) {
			String tabName = null;
			if (i == noOfTabs) {
				if (!lastSecTab) {
					i = noOfTabs - 1;
				}
				WebElement eleTab = getDriver().findElement(By.xpath(
						"(//*[@class='android.widget.HorizontalScrollView']/child::*/child::*/child::*)[" + i + "]"));
				tabName = eleTab.getText();
				System.out.println(tabName);
				eleTab.click();

			} else {
				WebElement eleTab = getDriver().findElement(By.xpath(
						"(//*[@class='android.widget.HorizontalScrollView']/child::*/child::*/child::*)[" + i + "]"));
				tabName = eleTab.getText();
				System.out.println(tabName);
				eleTab.click();
			}

			waitTime(2000);

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLoggerPass("Search Icon", tabName + " tab is displayed and clicked on " + tabName + " tab");

			verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
			waitTime(2000);

			if (verifyElementDisplayed(AMDSearchScreen.objSearchEditBox)) {
				logger.info("User navigated to Search Landing screen");
				extent.extentLoggerPass("Search Screen", "User navigated to Search Landing screen");
			} else {
				logger.error("User not navigated to Search Landing screen");
				extent.extentLoggerFail("Search Screen", "User not navigated to Search Landing screen");
			}

			click(AMDLoginScreen.objSearchBackBtn, "Back Button");
			waitTime(2000);

			if (lastSecTab) {
				break;
			}
			if (tabName.equalsIgnoreCase("Music")) {
				lastSecTab = true;
			}
		}
		click(AMDHomePage.HomeIcon, "Bottom bar Home Option");
	}

	/**
	 * @implNote This method is to verify search icon on Landing pages
	 * @param userType
	 * @throws Exception
	 */
	public void verifySearchOption(String userType) throws Exception {
		extent.HeaderChildNode("Verify Search Icon on Landing pages as : " + userType);
		System.out.println("\nVerify Search Icon on Landing pages as " + userType);
		click(AMDHomePage.objHomeBtn, "Home");
		waitTime(10000);
		verifyElementPresent(AMDHomePage.objTopNav_HomeTab, "Home Tab");
		boolean lastSecTab = false;

		int noOfTabs = getCount(AMDHomePage.objTitle);
		System.out.println("HOME PAGE HEADERS: " + noOfTabs);
		for (int i = 1; i <= 10; i++) {

			String tabName = null;
			if (i == noOfTabs) {
				if (!lastSecTab) {
					i = noOfTabs - 1;
				}
				WebElement eleTab = getDriver().findElement(By.xpath(
						"(//*[@class='android.widget.HorizontalScrollView']/child::*/child::*/child::*)[" + i + "]"));
				tabName = eleTab.getText();
				System.out.println(tabName);
				eleTab.click();

			} else {
				WebElement eleTab = getDriver().findElement(By.xpath(
						"(//*[@class='android.widget.HorizontalScrollView']/child::*/child::*/child::*)[" + i + "]"));
				tabName = eleTab.getText();
				System.out.println(tabName);
				eleTab.click();
			}

			waitTime(2000);

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLoggerPass("Search Icon", tabName + " tab is displayed and clicked on " + tabName + " tab");

			WebElement elementSearchIcon = findElement(AMDSearchScreen.objSearchIcon);
			int SearchIconRightX = elementSearchIcon.getLocation().getX();
			System.out.println(SearchIconRightX);
			Dimension sizee = getDriver().manage().window().getSize();
//			System.out.println(sizee.getWidth());
			int sizeee = sizee.getWidth() - 300;
			System.out.println(sizee.getWidth() + " X " + sizeee);

			if (SearchIconRightX >= sizeee) {
				logger.info("Search icon is displayed at top right of the " + tabName + " tab ");
				extent.extentLoggerPass("Search icon",
						"Search icon is displayed at top right of the " + tabName + " tab ");
			} else {
				logger.error("Search icon is not displayed at top right of the " + tabName + " tab ");
				extent.extentLoggerFail("Search icon",
						"Search icon is not displayed at top right of the " + tabName + " tab ");
			}
			if (lastSecTab) {
				break;
			}
			if (tabName.equalsIgnoreCase("Music")) {
				lastSecTab = true;
			}
			waitTime(3000);

		}

//		verifyElementPresent(AMDLoginScreen.objMenu, "Menu icon");
//		click(AMDLoginScreen.objMenu, "Menu icon");
//		
//       if(verifyElementExist(AMDSearchScreen.objSearchIcon, "Search Icon"))
//       {
//        
//        logger.info("Search icon is displayed at top right of the More Screen");
//		extent.extentLogger("Search icon", "Search icon is displayed at top right of the More Screen");
//       }
//       else
//       {
//    	   logger.info("Search icon is not displayed at top right of the More Screen");
//			   extent.extentLoggerFail("Search icon", "Search icon is not displayed at top right of the More Screen");
//       }
//		
		click(AMDHomePage.objHomeBtn, "Bottom bar Home Option");
	}
	
	/**
	 * @implNote This method is to validate the Login Screen
	 * @param validPassword
	 * @throws Exception
	 */
	public void loginScreen(String validPassword) throws Exception {
		extent.HeaderChildNode("Login screen");
		verifyElementPresent(AMDLoginScreen.objPasswordField, "Password field");

		WebElement element = findElement(AMDLoginScreen.objLoginScreenTitle);
		int leftX = element.getLocation().getX();
		int rightX = leftX + element.getSize().getWidth();
		int middleX = (rightX + leftX) / 2;
		Dimension size = getDriver().manage().window().getSize();
		if (middleX == Integer.valueOf((size.width) / 2)) {
			logger.info("Login screen title is displayed at center of the screen");
			extent.extentLoggerPass("Screen Title", "Login screen title is displayed at center of the screen");
		} else {
			logger.error("Login screen title is not displayed at center of the screen");
			extent.extentLoggerFail("Screen Title", "Login screen title is not displayed at center of the screen");
		}

		WebElement elementBackBtn = findElement(AMDLoginScreen.objBackBtn);
		int BackBtnleftX = elementBackBtn.getLocation().getX();
		int BAckBtnrightX = BackBtnleftX + elementBackBtn.getSize().getWidth();
		int BackBtnmiddleX = (BAckBtnrightX + BackBtnleftX) / 2;

		if (BackBtnmiddleX <= 200) {
			logger.info("Back button is displayed at top left of the screen");
			extent.extentLoggerPass("Back button", "Back button is displayed at top left of the screen");
		} else {
			logger.error("Back button is not displayed at top left of the screen");
			extent.extentLoggerFail("Back button", "Back button is not displayed at top left of the screen");
		}

		click(AMDLoginScreen.objBackBtn, "Back button");
		verifyElementPresent(AMDLoginScreen.objLoginOrRegisterPageTitle, "Login/Register screen title");
		click(AMDLoginScreen.objProceedBtn, "Proceed button");

		String cursorAvailability = getAttributValue("focused", AMDLoginScreen.objPasswordField);
		if (cursorAvailability.equalsIgnoreCase("true")) {
			logger.info("Cursor is displayed on the Password field by default");
			extentLoggerPass("Cursor", "Cursor is displayed on the Password field by default");
		} else {
			logger.info("Cursor is not displayed on the Password field by default");
			extentLoggerFail("Cursor", "Cursor is not displayed on the Password field by default");
		}

		String showpassword = getAttributValue("checked", AMDLoginScreen.objShowPwdBtn);
		if (showpassword.equalsIgnoreCase("false")) {
			logger.info("Password field text is hidden by default");
			extentLoggerPass("Password hidden", "Password field text is hidden by default");
		} else {
			logger.info("Password field text is not hidden by default");
			extentLoggerFail("Password hidden", "Password field text is not hidden by default");
		}

		if (!(findElement(AMDLoginScreen.objLoginBtn).isEnabled())) {

			logger.info("Login CTA is displayed and is dehighlighted by default");
			extentLoggerPass("Login button", "Login CTA is displayed and is dehighlighted by default");
		} else {
			logger.info("Login CTA is displayed and is not dehighlighted by default");
			extentLoggerFail("Login button", "Login CTA is displayed and is not dehighlighted by default");
		}

		verifyElementPresentAndClick(AMDLoginScreen.objForgetPwdBtn, "Forgot password link");
		verifyElementPresent(AMDLoginScreen.objForgotPasswordScreenTitle, "Forfot Password screen");
		click(AMDLoginScreen.objBackBtn, "Back button");

		type(AMDLoginScreen.objPasswordField, validPassword, "Password field");
//		hideKeyboard();
		click(AMDLoginScreen.objShowPwdBtn, "Show password icon");

//		findElement(
//				By.xpath("//*[@resource-id='com.graymatrix.did:id/text_input_password_toggle' and @checked='true']"));

		findElement(By.xpath("//*[@id='text_input_end_icon' and @contentDescription ='Show password']"));

		logger.info("User can hide or unhide password using eye icon");
		extentLoggerPass("Password field", "User can hide or unhide password using eye icon");

		click(AMDLoginScreen.objShowPwdBtn, "Show password icon");
		hideKeyboard();
		String password = getText(AMDLoginScreen.objPasswordField);
		if (password.length() >= 6) {
			logger.info("Password field accepts minimum of six characters");
			extentLoggerPass("Password field", "Password field accepts minimum of six characters");

			if (getDriver().findElement(AMDLoginScreen.objLoginBtn).isEnabled()) {
				logger.info("Login button is highlighted when user enters a minimum of 6 characters in password field");
				extentLoggerPass("Login button",
						"the Login button is highlighted when user enters a minimum of 6 characters in password field");
			} else {
				logger.error(
						"Login button is not highlighted when user enters a minimum of 6 characters in password field");
				extentLoggerFail("Login button",
						"the Login button is not highlighted when user enters a minimum of 6 characters in password field");
			}
		} else {
			logger.info("Password field is not accepting minimum of six characters");
			extentLoggerFail("Password field", "Password field is not accepting minimum of six characters");
		}
		hideKeyboard();
		click(AMDGenericObjects.objText("OR"), "OR text");
	}

	/**
	 * @implNote This is method is to Validate the OTP Screen
	 * @param otp1
	 * @param otp2
	 * @param otp3
	 * @param otp4
	 * @throws Exception
	 */
	public void otpScreen(String otp1, String otp2, String otp3, String otp4) throws Exception {
		extent.HeaderChildNode("Otp screen Validation");
		verifyElementPresentAndClick(AMDLoginScreen.objLoginWithOTPLink, "Login with OTP Link");

		WebElement element = findElement(AMDLoginScreen.objOtpScreenTitle);
		int leftX = element.getLocation().getX();
		int rightX = leftX + element.getSize().getWidth();
		int middleX = (rightX + leftX) / 2;
		Dimension size = getDriver().manage().window().getSize();
		if (middleX == Integer.valueOf((size.width) / 2)) {
			logger.info("Verify mobile screen title is displayed at center of the screen");
			extent.extentLoggerPass("Screen Title", "Verify mobile screen title is displayed at center of the screen");
		} else {
			logger.error("Verify mobile screen title is not displayed at center of the screen");
			extent.extentLoggerFail("Screen Title",
					"Verify mobile screen title is not displayed at center of the screen");
		}

		WebElement elementBackBtn = findElement(AMDLoginScreen.objBackBtn);
		int BackBtnleftX = elementBackBtn.getLocation().getX();
		int BAckBtnrightX = BackBtnleftX + elementBackBtn.getSize().getWidth();
		int BackBtnmiddleX = (BAckBtnrightX + BackBtnleftX) / 2;

		if (BackBtnmiddleX <= 200) {
			logger.info("Back button is displayed at top left of the screen");
			extent.extentLoggerPass("Back button", "Back button is displayed at top left of the screen");
		} else {
			logger.error("Back button is not displayed at top left of the screen");
			extent.extentLoggerFail("Back button", "Back button is not displayed at top left of the screen");
		}

		String cursorAvailability = getAttributValue("focused", AMDLoginScreen.objOtpEditBox1);
		if (cursorAvailability.equalsIgnoreCase("true")) {
			logger.info("Cursor is displayed on the first otp field by default");
			extentLoggerPass("Cursor", "Cursor is displayed on the first otp field by default");
		} else {
			logger.info("Cursor is not displayed on the first otp field by default");
			extentLoggerFail("Cursor", "Cursor is not displayed on the first otp field by default");
		}
		click(AMDRegistrationScreen.objOTPField1, "First otp field");
		hideKeyboard();

		if (!(getDriver().findElement(AMDLoginScreen.objVerifyBtn).isEnabled())) {
			logger.info("Verify CTA is dehighlighted by default");
			extentLoggerPass("Verify button", "Verify CTA is dehighlighted by default");
		} else {
			logger.info("Verify CTA is not dehighlighted by default");
			extentLoggerFail("Verify button", "Verify CTA is not dehighlighted by default");
		}

		if (getDriver().findElement(AMDLoginScreen.objResendOtpLink).isDisplayed()) {
			logger.info("Didn't get OTP text is displayed with Resend CTA");
			extentLoggerPass("Resend button", "Didn't get OTP text is displayed with Resend CTA");
		} else {
			logger.info("Didn't get OTP text is not displayed with Resend CTA");
			extentLoggerFail("Resend button", "Didn't get OTP text is not displayed with Resend CTA");
		}

		if (getDriver().findElement(AMDLoginScreen.objOtp).isDisplayed()) {
			if (verifyIsElementDisplayed(AMDLoginScreen.objCountDownTimer)) {
				logger.info("OTP is sent to the registered mobile number");
				extent.extentLoggerPass("Otp", "OTP is sent to the registered mobile number");
			}

		}

		type(AMDLoginScreen.objOtpEditBox1, otp1, "first otp field");
		hideKeyboard();
		if (getDriver().findElement(AMDLoginScreen.objVerifyBtn).isEnabled() == false) {
			logger.info("Verify CTA is not highlighted");
			extentLoggerPass("Verify button", "Verify CTA is not highlighted");
		}

		type(AMDLoginScreen.objOtpEditBox2, otp2, "second otp field");
		hideKeyboard();
		if (getDriver().findElement(AMDLoginScreen.objVerifyBtn).isEnabled() == false) {
			logger.info("Verify CTA is not highlighted");
			extentLoggerPass("Verify button", "Verify CTA is not highlighted");
		}

		type(AMDLoginScreen.objOtpEditBox3, otp3, "third otp field");
		hideKeyboard();
		if (getDriver().findElement(AMDLoginScreen.objVerifyBtn).isEnabled() == false) {
			logger.info("Verify CTA is not highlighted");
			extentLoggerPass("Verify button", "Verify CTA is not highlighted");
		}

		type(AMDLoginScreen.objOtpEditBox4, otp4, "fourth otp field");
		hideKeyboard();
		if (getDriver().findElement(AMDLoginScreen.objVerifyBtn).isEnabled()) {
			logger.info("Verify CTA is highlighted");
			extentLoggerPass("Verify button", "Verify CTA is highlighted");
		} else {
			logger.info("Verify CTA is not highlighted");
			extentLoggerFail("Verify button", "Verify CTA is not highlighted");
		}

		click(AMDLoginScreen.objBackBtn, "Back button");
		verifyElementPresent(AMDLoginScreen.objLoginScreenTitle, "Login screen title");
		Back(1);
	}
/**
 * @implNote This method is to verify the Top Searches in Search Screen
 * @param usertype
 * @throws Exception
 */
	public void topSearches(String usertype) throws Exception {
		extent.HeaderChildNode("Top Searches module");

		if (usertype.equalsIgnoreCase("Guest")) {
			selectContentLang_MoreMenu("Hindi");
		}
		waitTime(5000);
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		int noOfTrays = findElements(AMDSearchScreen.objNoOftraysInSearchpage).size();
		System.out.println(noOfTrays);
		boolean TopSearchFound = false;
		for (int i = 1; i <= noOfTrays; i++) {
			String traytitle = getDriver()
					.findElement(By.xpath(
							"(//*[@resource-id='com.graymatrix.did:id/cell_top_container']/child::*)[" + i + "]"))
					.getText();
//				String traytitle = getDriver()
//						.findElement(
//								By.xpath("(//*[@resource-id='com.graymatrix.did:id/header_primary_text'])[3]"))
//						.getText();
//				System.out.println(traytitle);

			if (traytitle.equalsIgnoreCase("Top Searches")) {
				TopSearchFound = true;
				if (checkElementExist(AMDSearchScreen.objTopSearchesbelowTheTrendingSearches, "Top searches tray")) {
					logger.info("Top searches section is displayed below Trending searches carousel");
					extent.extentLoggerPass("Search Screen",
							"Top searches section is displayed below Trending searches carousel");
				}

//					checkElementExist(AMDSearchScreen.objContentCardTitleOfTopSearchesTray,
//							"Content card title of Top searches tray");

				// getText(AMDSearchScreen.objContentCardTitleOfTopSearchesTray);

//					click(AMDSearchScreen.objContentCardTitleOfTopSearchesTray, "Content card of Top searches tray");
//					waitForElementDisplayed(AMDSearchScreen.objConsumptionScreenTitle, 10);
//					
//					verifyElementPresent(AMDSearchScreen.objConsumptionScreenTitle, "Title in Consumption screen");
//					
//
//						String consumptionScreenTitle = getText(AMDSearchScreen.objConsumptionScreenTitle);
//						if(contentCardTitleofTopSearches.equalsIgnoreCase(consumptionScreenTitle))
//						{
//						    logger.info("user navigated to respective consumption/Landing screen post tapping on any Top searches carousel");	
//						    extent.extentLogger("Title", "user navigated to respective consumption/Landing screen post tapping on any Top searches carousel");
//						}
//						else
//						{
//							logger.info("user is not navigated to respective consumption/Landing screen post tapping on any Top searches carousel");	
//						    extent.extentLoggerFail("Title", "user is not navigated to respective consumption/Landing screen post tapping on any Top searches carousel");
//						}

				break;
			}
		}
		if (TopSearchFound == false) {
			logger.info("Top searches is not displayed");
			extentLoggerWarning("Top searches tray", "Top searches is not displayed");
		}
		Back(1);
	}

	/**
	 * @implNote This method is to validate the Trending seraches in Search Screen
	 * @throws Exception
	 */
	public void trendingSearches() throws Exception {
		extent.HeaderChildNode("Trending Searches module");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		waitTime(5000);
		int noOfTrays = findElements(AMDSearchScreen.objNoOftraysInSearchpage).size();
		System.out.println(noOfTrays);
		boolean TrendingSearchFound = false;
		for (int i = 1; i <= noOfTrays; i++) {
			String traytitle = getDriver()
					.findElement(By.xpath(
							"(//*[@resource-id='com.graymatrix.did:id/cell_top_container']/child::*)[" + i + "]"))
					.getText();
			if (traytitle.equalsIgnoreCase("Trending Searches")) {
				TrendingSearchFound = true;
//				    verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
//				    type(AMDSearchScreen.objSearchBar, "Milana", "Search bar");
//					
//					verifyElementPresentAndClick(AMDSearchScreen.objSearchResultFirstContent, "content");
//					verifyElementExist(AMDSearchScreen.objConsumptionScreenTitle, "Title in Consumption screen");
//					Back(2);
//					waitTime(3000);
//					verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon2, "Search icon");
//					
				checkElementExist(AMDSearchScreen.objTrendingSearchOverlay, "Trending Searches tray");
				checkElementExist(AMDSearchScreen.objContentCardTitleOfTrendingSearchesTray,
						"Content card title of Trending searches tray");

//			     String contentCardTitleofTrendingSearches =	getText(AMDSearchScreen.objContentCardTitleOfTrendingSearchesTray);
//			     logger.info(contentCardTitleofTrendingSearches);
//
//					click(AMDSearchScreen.objContentCardTitleOfTrendingSearchesTray, "Content card of Trending searches tray");
//					waitForElementDisplayed(AMDSearchScreen.objConsumptionScreenTitle, 10);
//					
//					verifyElementPresent(AMDSearchScreen.objConsumptionScreenTitle, "Title in Consumption screen");
//					
//						String consumptionScreenTitle = getText(AMDSearchScreen.objConsumptionScreenTitle);
//						if(contentCardTitleofTrendingSearches.equalsIgnoreCase(consumptionScreenTitle))
//						{
//						    logger.info("user navigated to respective consumption/Landing screen post tapping on any Trending searches carousel");	
//						    extent.extentLoggerPass("Title", "user navigated to respective consumption/Landing screen post tapping on any Trending searches carousel");
//						}
//						else
//						{
//							logger.info("user is not navigated to respective consumption/Landing screen post tapping on any Trending searches carousel");	
//						    extent.extentLoggerFail("Title", "user is not navigated to respective consumption/Landing screen post tapping on any Trending searches carousel");
//						}
//
				break;
//				
			}
		}
		if (TrendingSearchFound == false) {
			logger.error("Trending searches is not displayed");
			extentLoggerFail("Trending searches tray", "Trending searches is not displayed");
		}
		Back(1);
		if (userType.equals("Guest")) {
			deselectContentLang_MoreMenuAndSelectDefaultLanguage("Hindi");
		}
	}

	/*
	 * =============================================================================
	 * ===== ------------------------------ Script Author: VINAY
	 * ---------------------------------
	 * 
	 * List of Functions Created - IntroScreen(String userType) - -
	 * =============================================================================
	 * ========
	 */
	/**
	 * @implNote Method will validate the Intro SCreen
	 * @param userType
	 * @throws Exception
	 */
	
	public void introScreen(String userType) throws Exception {
		extent.HeaderChildNode("Validating Intro Screen");
		// Verify user is navigated to intro screen
		if (userType.equals("Guest")) {
			if (findElement(AMDOnboardingScreen.objScreenTitle).getText().equals("ZEE5")) {
				String ZEE5 = getDriver().findElement(AMDOnboardingScreen.objScreenTitle).getText();
				extent.extentLoggerPass("Verify user is navigated to Login/Registration screen",
						"User is navigated to " + ZEE5 + " Screen");
				logger.info("User is navigated to " + ZEE5 + " Screen after clicking on Browse for free");
			} else {
				extent.extentLoggerFail("Verify user is navigated to Login/Registration screen",
						"Intro screeen in not displayed");
				logger.error("Intro screeen in not displayed");
			}
			// Verify back button is displayed
			verifyElementPresent(AMDOnboardingScreen.objBackBtn, "Back button");
			// Verify user is navigated to Content language screeen post tapping back button
			click(AMDOnboardingScreen.objBackBtn, "Back button");
			String contentLang = getDriver().findElement(AMDOnboardingScreen.objScreenTitle).getText();
			if (contentLang.equals("Content Language")) {
				extent.extentLoggerPass("Verify user is navigated to Content language screen",
						"User is navigated to " + contentLang + " scree");
				logger.error("User is navigated to " + contentLang + " screen");
			} else {
				extent.extentLogger("Verify user is navigated to Content language screen",
						"Failed to navigate into content language screen");
				logger.info("Failed to navigate into content language screen");
			}

			// Covered few TC's and Updated Code by Kushal

			// ######---Code Commented Block: Below code is obsolete since the Display
			// language screen is removed from Onboarding journey
			/*
			 * 
			 * click(AMDOnboardingScreen.objBackBtn, "Back button");
			 * verifyElementPresent(AMDGenericObjects.objCheckTitle("Display Language"),
			 * "Display language screen");
			 * click(AMDOnboardingScreen.objSelectDisplayLang("Kannada"),
			 * "Kannada language"); click(AMDOnboardingScreen.objDiplay_ContinueBtn,
			 * "[Display Language] Continue Button");
			 * 
			 * String strLang = findElement(AMDOnboardingScreen.objScreenTitle).getText();
			 * if (strLang != "Content Language") {
			 * 
			 * extent.extentLoggerPass("Content language screen",
			 * "Content language is displayed in Kannada language");
			 * logger.info("Title of the screen : " + strLang +
			 * " is displayed in selected language"); } else {
			 * extent.extentLoggerFail("Content language screen",
			 * "Failed to display the content language in selected language");
			 * logger.error("Failed to display the content language in selected language");
			 * }
			 * 
			 * click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue Button");
			 * 
			 * if (findElement(AMDOnboardingScreen.objBrowseForFreeBtn).getText() !=
			 * "Browse for Free") { String strBrwsforFree =
			 * findElement(AMDOnboardingScreen.objBrowseForFreeBtn).getText();
			 * extent.extentLoggerPass("Intro screen",
			 * "Browse for free button is displayed in selected launguage: " +
			 * strBrwsforFree);
			 * logger.info("Browse for free button is displayed in selected launguage : " +
			 * strBrwsforFree); } else { extent.extentLoggerFail("Intro screen",
			 * "Browse for free button failed to displayed in selected launguage"); logger.
			 * error("Browse for free button failed to displayed in selected launguage"); }
			 * String strSubsNow =
			 * findElement(AMDOnboardingScreen.objSubscribeNowBtn).getText(); if (strSubsNow
			 * != "Subscribe Now") { extent.extentLoggerPass("Intro screen",
			 * "Subscribe Now button is displayed in selected launguage: " + strSubsNow);
			 * logger.info("Subscribe Now button is displayed in selected launguage : " +
			 * strSubsNow); } else { extent.extentLoggerFail("Intro screen",
			 * "Subscribe Now button failed to displayed in selected launguage: " +
			 * strSubsNow); logger.
			 * error("Subscribe Now button failed to displayed in selected launguage: " +
			 * strSubsNow); } String strHavePrepaidCode =
			 * findElement(AMDOnboardingScreen.objHavePrepaidBtn).getText(); if
			 * (strHavePrepaidCode != "Have a prepaid code") {
			 * extent.extentLoggerPass("Intro screen",
			 * "Have a Prepaid code CTA is displayed in selected launguage: " +
			 * strHavePrepaidCode);
			 * logger.info("Have a Prepaid code CTA is displayed in selected launguage: " +
			 * strHavePrepaidCode); } else { extent.extentLoggerFail("Intro screen",
			 * "Have a Prepaid code CTA failed to displayed in selected launguage: " +
			 * strHavePrepaidCode); logger.error(
			 * "Have a Prepaid code CTA failed to displayed in selected launguage: " +
			 * strHavePrepaidCode); } String strLoginCTA =
			 * findElement(AMDOnboardingScreen.objLoginLnk).getText(); if
			 * (strHavePrepaidCode != "Login") { extent.extentLoggerPass("Intro screen",
			 * "Login CTA is displayed in selected launguage: " + strLoginCTA);
			 * logger.info("Login CTA is displayed in selected launguage: " + strLoginCTA);
			 * } else { extent.extentLoggerFail("Intro screen",
			 * "Login CTA failed to displayed in selected launguage: " + strLoginCTA);
			 * logger.error("Login CTA failed to displayed in selected launguage: " +
			 * strLoginCTA); } Back(2); if
			 * (findElement(AMDOnboardingScreen.objSelectedDisplayLang).getText() !=
			 * "English") { click(AMDOnboardingScreen.objSelectDisplayLang("English"),
			 * "English language"); click(AMDOnboardingScreen.objDiplay_ContinueBtn,
			 * "[Display Language] Continue Button"); } //
			 * ***********************************************************
			 * 
			 * click(AMDOnboardingScreen.objContent_ContinueBtn,
			 * "[Content Language] Continue button");
			 * verifyElementExist(AMDOnboardingScreen.objBrowseForFreeBtn,
			 * "Browse for Free button");
			 * 
			 * // Verify user is navigated to Login Registration screen //
			 * click(AMDOnboardingScreen.objLoginLnk, "Login button");
			 * click(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for Free button");
			 * hideKeyboard(); // Click operation is used for the device which do not
			 * identify the keyboard click(AMDLoginScreen.objContinueWithTxt,
			 * "Or Continue with"); if
			 * (findElement(AMDOnboardingScreen.objScreenTitle).getText().equals(
			 * "Login/Register")) {
			 * extent.extentLoggerPass("Verify Navigation on clicking Login button",
			 * "User is navigated to" +
			 * findElement(AMDOnboardingScreen.objScreenTitle).getText() + " screen");
			 * logger.info("User is navigated to " +
			 * findElement(AMDOnboardingScreen.objScreenTitle).getText() + " screen"); }
			 * else { extent.extentLoggerFail("Verify Navigation on clicking Login button",
			 * "Failed to navigate into Login/Register screen post tapping Login button");
			 * logger.
			 * error("Failed to navigate into Login/Register screen post tapping Login button"
			 * ); } click(AMDOnboardingScreen.objBackBtn, "Back button");
			 * 
			 */
			// ########--- End of Commented Block due to Display Language screen removed

			click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button");
			// Verify that content feature carousel is displayed
			verifyElementExist(AMDOnboardingScreen.objFeatureCarousel, "Feature carousel rail");
			// Verify that Preminum member benifits section is displayed
			verifyElementExist(AMDOnboardingScreen.objBenefitsTextSection, "Benifits of premium member section");
			// Verify that pagination dots are displayed
			verifyElementExist(AMDOnboardingScreen.objDotsIndicator, "Pagination dots");
			// Verify Browse for free is displayed
			verifyElementExist(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for free");

			// Verify user is navigated to Login/Registration page post tapping Browse for
			// free
			click(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for free");
			if (findElement(AMDOnboardingScreen.objScreenTitle).getText().equals("Login/Register")) {
				extent.extentLoggerPass("Verify Navigation on clicking Browse for Free button", "User is navigated to "
						+ findElement(AMDOnboardingScreen.objScreenTitle).getText() + " Screen");
				logger.info("User is navigated to " + findElement(AMDOnboardingScreen.objScreenTitle).getText()
						+ " Screen");
			} else {
				extent.extentLoggerFail("Verify Navigation on clicking Browse for Free button",
						"Failed to navigate into Login/Register screen post tapping Browse for Free button");
				logger.error("Failed to navigate into Login/Register screen post tapping Browse for Free button");
			}
			click(AMDOnboardingScreen.objBackBtn, "Back button");

			// Verify that Subscribe Now button is available
			verifyElementPresentAndClick(AMDOnboardingScreen.objSubscribeNowBtn, "Subcribe Now button");

			// Verify user is navigated to Subscribe now screen
			waitTime(2000);
			if (findElement(AMDOnboardingScreen.objScreenTitle).getText().equals("Subscribe")) {
				extent.extentLoggerPass("Verify Navigation on clicking Subscribe Now button", "User is navigated to "
						+ findElement(AMDOnboardingScreen.objScreenTitle).getText() + " Screen");
				logger.info("User is navigated to " + findElement(AMDOnboardingScreen.objScreenTitle).getText()
						+ " Screen");
			} else {
				extent.extentLoggerFail("Verify Navigation on clicking Subcribe button",
						"Failed to navigate into Subscribe screen post tapping Subscribe Now button");
				logger.error("Failed to navigate into Subscribe screen post tapping Subcribe Now button");
			}
			click(AMDOnboardingScreen.objBackBtn, "Back button");

			// Verify that Have a prepaid code? is displayed
			// #######--- Commenting the below block due to Prepaid code link is removed
			// from the screen
			/*
			 * verifyElementPresentAndClick(AMDOnboardingScreen.objHavePrepaidBtn,
			 * "Have a preapaid code? button");
			 * 
			 * // Verify Prepaid code screen is displayed after tapping on Prepaid code
			 * button if
			 * (findElement(AMDOnboardingScreen.objPrepaidPopupLabel).isDisplayed()) {
			 * extent.extentLoggerPass("Verify navigation post tapping Prepaid code button",
			 * "User is navigated to " +
			 * findElement(AMDOnboardingScreen.objPrepaidPopupLabel).getText() + " Screen");
			 * logger.info("User is navigated to " +
			 * findElement(AMDOnboardingScreen.objPrepaidPopupLabel).getText() + " Screen");
			 * } else {
			 * extent.extentLoggerFail("Verify navigation post tapping Prepaid code button",
			 * "Failed to navigate into Prepaid screen post tapping Have a prepaid code button"
			 * ); logger.
			 * error("Failed to navigate into Prepaid screen post tapping Have a prepaid code button"
			 * ); }
			 */
			Back(1);
		} else {
			extent.extentLoggerPass("Intro Screen", "Intro Screen is not displayed for " + userType);
			logger.info("Intro Screen is not displayed for " + userType);
			System.out.println("Intro Screen is not displayed for Susbcribed/Non-Subscribed user");
		}
	}

/**
 * @Note This method is used for validating  Registration screen and its functionality 
 * @param firstName
 * @param secoundName
 * @throws Exception
 */
	public void validateRegister(String firstName, String secoundName) throws Exception {
		extent.HeaderChildNode("Validate Registration screen UI/UX");
		System.out.println("\nValidate Registration screen UI/UX");

		String pGender = "Male";
		String pEmailID = generateRandomString(5) + "@zee5.com";
		waitTime(3000);
//		if(checkElementExist(AMDOnboardingScreen.objBrowseForFreeBtn)) {
//			verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for Free");
//		}

		type(AMDRegistrationScreen.objEmailIDTextField, pEmailID, "Email field");
		verifyElementPresentAndClick(AMDRegistrationScreen.objProceedBtn, "Proceed button");
		verifyElementPresent(AMDRegistrationScreen.objScreenTitle, "Register for Free screen");
		HeaderChildNode("Validate fields of Register screen");
		WebElement element = findElement(AMDRegistrationScreen.objScreenTitle);
		int leftX = element.getLocation().getX();
		int rightX = leftX + element.getSize().getWidth();
		int middleX = (rightX + leftX) / 2;
		Dimension size = getDriver().manage().window().getSize();
		if (middleX == Integer.valueOf((size.width) / 2)) {
			logger.info("Register for Free Title is displayed at center of the screen");
			extent.extentLoggerPass("Screen Title", "Register for Free Title is displayed at center of the screen");
		} else {
			logger.error("Register for Free Title is not displayed at center of the screen");
			extent.extentLoggerFail("Screen Title", "Register for Free Title is not displayed at center of the screen");
		}

		WebElement elementBackBtn = findElement(AMDRegistrationScreen.objBackBtn);
		int BackBtnleftX = elementBackBtn.getLocation().getX();
		int BAckBtnrightX = BackBtnleftX + elementBackBtn.getSize().getWidth();
		int BackBtnmiddleX = (BAckBtnrightX + BackBtnleftX) / 2;

		if (BackBtnmiddleX <= 200) {
			logger.info("Back button is displayed at top left of the screen");
			extent.extentLoggerPass("Back button", "Back button is displayed at top left of the screen");
		} else {
			logger.error("Back button is not displayed at top left of the screen");
			extent.extentLoggerFail("Back button", "Back button is not displayed at top left of the screen");
		}

//		if (getAttributValue("focused", AMDRegistrationScreen.objFirstNameTxtField).equals("true")) {
//			logger.info("First Name field is focused");
//			extent.extentLoggerPass("First Name field", "First Name field is focused");
//		} else {
//			logger.error("First Name field is not focused");
//			extent.extentLoggerFail("First Name field", "First Name field is not focused");
//		}

		hideKeyboard();
		checkRegisterButton();
		verifyElementExist(AMDRegistrationScreen.objEmailIDTextField, "Email ID or Mobile number");

		if (!findElement(AMDRegistrationScreen.objEmailIDTextField).isEnabled()) {
			logger.info("Email ID or Mobile number field is grayed out");
			extent.extentLoggerPass("Email ID or Mobile number", "Email ID or Mobile number field is grayed out");
		} else {
			logger.error("Email ID or Mobile number field is not grayed out");
			extent.extentLoggerFail("Email ID or Mobile number",
					"Email ID or Mobile number field is not grayed out");
		}

		String EmailBeforeType = getText(AMDRegistrationScreen.objEmailIDTextField);
		if (pEmailID.equalsIgnoreCase(EmailBeforeType)) {
			logger.info("Email field is entered with email ID: " + EmailBeforeType);
			extent.extentLoggerPass("EmailId field",
					"Email field is entered with email ID: " + EmailBeforeType + " & cannot be edited");
			extent.extentLoggerPass("Email field", "User is not allowed to edit the Email field");
		} else {
			logger.info("Email field is not entered with email ID: " + pEmailID);
			extent.extentLoggerFail("EmailId field",
					"Email field is not entered with email ID: " + pEmailID + " & can be edited");
			extent.extentLoggerFail("Email field", "User is allowed to edit the Email field");
		}

//		verifyElementExist(AMDRegistrationScreen.objFirstNameTxtField, "First Name field");
//		verifyElementExist(AMDRegistrationScreen.objLastNameTxtField, "Last Name field");
//
//		type(AMDRegistrationScreen.objFirstNameTxtField, firstName, "First Name field");
//		click(AMDRegistrationScreen.objEmailIDHeaderTxt, "HideKeyboard");
//		checkRegisterButton();
//		click(AMDRegistrationScreen.objLastNameTxtField, "Last Name");
//		type(AMDRegistrationScreen.objLastNameTxtField, secoundName, "Last Name field");
//		hideKeyboard();
		click(AMDRegistrationScreen.objEmailIDHeaderTxt, "HideKeyboard");
		checkRegisterButton();
		click(AMDRegistrationScreen.objDOBTxtField, "Date of Birth");

		verifyElementPresentAndClick(AMDRegistrationScreen.objGederTxtField, "Gender field");
		verifyElementExist(AMDRegistrationScreen.objSelectGenderText, "Select your Gender screen");

		WebElement GenderTotleElement = findElement(AMDRegistrationScreen.objSelectGenderText);
		int GenderTotleleftX = GenderTotleElement.getLocation().getX();
		int GenderTotlerightX = GenderTotleleftX + GenderTotleElement.getSize().getWidth();
		int GenderTotlemiddleX = (GenderTotlerightX + GenderTotleleftX) / 2;
		Dimension windowSize = getDriver().manage().window().getSize();
		if (GenderTotlemiddleX == Integer.valueOf((windowSize.width) / 2)) {
			logger.info("Select your gender screen title is displayed at the center of the screen");
			extent.extentLoggerPass("Screen Title",
					"Select your gender screen title is displayed at the center of the screen");
		} else {
			logger.error("Select your gender screen title is not displayed at the center of the screen");
			extent.extentLoggerFail("Screen Title",
					"Select your gender screen title is not displayed at the center of the screen");
		}

		click(AMDRegistrationScreen.objMale, pGender);
		click(AMDRegistrationScreen.objGederTxtField, "Gender Field");
		waitTime(1000);

		// Tick mark has been removed and to validate the selected gender there is no
		// unique identifier

		/*
		 * boolean checkTickMark =
		 * verifyElementExist(AMDRegistrationScreen.objSelecteGender,
		 * "Tick mark on the selected option"); if (checkTickMark) { String
		 * selectedGender = getText(AMDRegistrationScreen.objSelectedGenderName);
		 * logger.info("Selected Gender : " + selectedGender);
		 * extent.extentLoggerPass("Select Gender",
		 * "Tick mark is present for Selected Gender : " + selectedGender); } else {
		 * logger.info("Gender is not selected"); extent.extentLoggerFail("Gender",
		 * "Gender is not selected"); }
		 */
		WebElement CloseIconElement = findElement(AMDRegistrationScreen.objXMark);
		int CloseIconupperY = CloseIconElement.getLocation().getY();
		int CloseIconlowerY = CloseIconupperY + CloseIconElement.getSize().getHeight();
		int CloseIconmiddleY = (CloseIconupperY + CloseIconlowerY) / 2;

		Dimension windowsSize = getDriver().manage().window().getSize();

		if (CloseIconmiddleY >= ((windowsSize.getHeight() / 2) + 100)) {
			logger.info("X icon appears on the bottom of the screen");
			extent.extentLoggerPass("Select Gender", "X icon appears on the bottom of the screen");
		} else {
			logger.error("X icon is not appears on the bottom of the screen");
			extent.extentLoggerFail("Select Gender", "X icon is not appears on the bottom of the screen");
		}
		verifyElementExist(AMDRegistrationScreen.objMale, pGender);
		waitTime(3000);
		click(AMDRegistrationScreen.objMale, pGender);
		waitTime(3000);
		checkRegisterButton();

		verifyElementExist(AMDRegistrationScreen.objPasswordTxtField, "Set Password");
		click(AMDRegistrationScreen.objPasswordTxtField, "Set Password");
		type(AMDRegistrationScreen.objPasswordTxtField, generateRandomString(4), "entered 5 charecter in set password");
		hideKeyboard();
		verifyElementExist(AMDRegistrationScreen.objPasswordErrorMsg,
				"Password must be a minimum of 6 characters error message");
		type(AMDRegistrationScreen.objPasswordTxtField, generateRandomString(6), "entered 6 charecter in set password");

		for (int i = 0; i < 2; i++) {
			String eyeIcon = getAttributValue("checked", AMDRegistrationScreen.objEyeIcon);
			if (eyeIcon.equals("false")) {
				logger.info("Password is hide");
				extent.extentLoggerPass("Password hide eye icon", "Password is hiden");
			} else {
				logger.info("Password is visible");
				extent.extentLoggerPass("Password hide eye icon", "Password is visible");
			}
			click(AMDRegistrationScreen.objEyeIcon, "Eye Icon");
		}
		click(AMDRegistrationScreen.objFirstNameTxtField, "First name"); // Clicking on First Name field to get device
		hideKeyboard();
		checkRegisterButton();
		verifyElementPresent(AMDRegistrationScreen.objTermsOfUseAndPrivacyPolicy, "Terms and Condition");
	}

	/**
	 * @implNote This method is to check the whether Register button is highlighted or nor
	 * @throws Exception
	 */
	public void checkRegisterButton() throws Exception {
		if (getAttributValue("clickable", AMDRegistrationScreen.objRegisterBtn).equals("false")) {
			logger.info("Register CTA is displayed and is dehighlated by default");
			extent.extentLoggerPass("Register button", "Register CTA is displayed and is dehighlated by default");
		} else {
			logger.error("Register CTA is Activated");
			extent.extentLoggerFail("Register button", "Register CTA is Activated");
		}
	}

	/**
	 * @implNote Method is to verify the Deep links
	 * @param tabName
	 */
	public void deepLinks(String tabName) {
		try {
			// getDriver().close();
			waitTime(5000);
			String cmd3 = "adb shell am start -W -a android.intent.action.VIEW -d  \"https://www.zee5.com/" + tabName
					+ "\" com.graymatrix.did";
			Process process = Runtime.getRuntime().exec(cmd3);
			new BufferedReader(new InputStreamReader(process.getInputStream()));
			waitTime(12000);
			HeaderChildNode("DeepLink verification for " + tabName);
			logger.info("Executed the deeplink for " + tabName);
			extent.extentLogger("", "Executed the deeplink for " + tabName);
		} catch (Exception e) {
			logger.error("Failed to execute the deeplink for " + tabName);
			extent.extentLoggerFail("", "Failed to execute the deeplink for " + tabName);
		}
		try {
			if (tabName.contains("Home")) {
				verifyElementExist(AMDHomePage.objHighlightedTab("Home"), "Highlighted Home tab");
				Back(1);
				click(AMDOnboardingScreen.objExitYes, "Yes CTA in Exit Popup");
			} else if (tabName.contains("signin")) {
				verifyElementExist(AMDLoginScreen.objLoginLnk, "Login/Register Screen");
				Back(1);
				Back(1);
				Back(1);
				click(AMDOnboardingScreen.objExitYes, "Yes CTA in Exit Popup");
			}
			waitTime(3000);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

/**
 * @implNote This method is to validate the Offline Screen
 * @throws Exception
 */
	public void offlineScreenValidation() throws Exception {
		extent.HeaderChildNode("Offline Screen Validation");
		System.out.println("\nOffline Screen Validation");

		waitTime(8000);
		TurnOFFWifi();
		if (getOEMName.equalsIgnoreCase("Sony")) {
			wifi_TurnOFFnON();
		}

		waitTime(2000);
		verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
		verifyElementPresentAndClick(AMDHomePage.objMoviesTab, "Movies tab");

		verifyElementExist(AMDOfflineScreen.objYouAreOffline, "You are Offline");
		verifyElementExist(AMDOfflineScreen.objTryAgain, "Try Again");
		verifyElementExist(AMDOfflineScreen.objGoToDownloads, "Go to Downloads");
		verifyElementExist(AMDHomePage.objHome, "Home");
		verifyElementExist(AMDHomePage.objUpcoming, "Upcoming");
		verifyElementExist(AMDHomePage.objDownload, "Download");
		verifyElementExist(AMDHomePage.objMoreMenu, "More Menu");

		click(AMDHomePage.objUpcoming, "Upcoming");
		verifyElementExist(AMDOfflineScreen.objYouAreOffline, "You are Offline");

//******** More menu retain the option in offline mode even when wifi/data is turned off hence commenting the below code		
		// click(AMDHomePage.objMoreMenu, "More Menu");
		// verifyElementExist(AMDOfflineScreen.objYouAreOffline, "You are Offline");

		verifyElementPresentAndClick(AMDOfflineScreen.objGoToDownloads, "Go to Downloads");

		// verifyElementPresentAndClick(AMDHomePage.objDownload, "Download");

		/*
		 * boolean getValue =
		 * verifyElementExist(By.xpath("//*[@id='empty_text']"),"Empty text" );
		 * System.out.println(getValue); if (getValue== true) {
		 * logger.error("Not Navigated to Download Section");
		 * extent.extentLoggerFail("Download Section",
		 * "Not Navigated to Download Section"); } else {
		 * logger.info("Navigated to Download Section");
		 * extent.extentLoggerPass("Download Section", "navigated to Download Section");
		 * }
		 */
		boolean getValue = verifyElementExist(By.xpath("//*[@text='Downloads']"), "DownloadScreen");
		System.out.println(getValue);
		if (getValue == false) {
			logger.error("Not Navigated to Download Section");
			extent.extentLoggerFail("Download Section", "Not Navigated to Download Section");
		} else {
			logger.info("Navigated to Download Section");
			extent.extentLoggerPass("Download Section", "navigated to Download Section");
		}

		verifyElementPresentAndClick(AMDHomePage.objHome, "Home Tab");
		verifyElementPresentAndClick(AMDHomePage.objMoviesTab, "Movies tab");
		verifyElementPresentAndClick(AMDOfflineScreen.objTryAgain, "Try Again");
		TurnONWifi();
		if (getOEMName.equalsIgnoreCase("Sony")) {
			wifi_TurnOFFnON();
		}
		waitTime(5000);
		verifyElementPresentAndClick(AMDHomePage.HomeIcon, "Home tab");
		verifyElementPresentAndClick(AMDHomePage.objUpcoming, "Upcoming tab");

		waitForElementDisplayed(AMDUpcomingPage.objContentCardInfo, 10);
		int cardInfo = findElements(AMDUpcomingPage.objContentCardInfo).size();
		if (cardInfo > 1) {
			logger.info("Appropriate page is loaded with Upcoming Page Content card info");
			extent.extentLoggerPass("Page", "Appropriate page is loaded with Upcoming Page Content card info");
		} else {
			logger.info("Upcoming Page with Content card and info is Not loaded");
			extent.extentLogger("Page", "Upcoming Page with Content card and info is Not loaded");
		}
	}
/**
 * @implNote This method is to turn the Wifi On and Off
 * @throws Exception
 */
 
	public void wifi_TurnOFFnON() throws Exception {
		Runtime.getRuntime()
				.exec("adb shell am start -a android.intent.action.MAIN -n com.android.settings/.wifi.WifiSettings");
		waitTime(2000);
//		Runtime.getRuntime().exec("adb shell input keyevent 23");
		click(AMDGenericObjects.objWifiToggle, "Wifi-Toggle button");
		waitTime(2000);
		Runtime.getRuntime().exec("adb shell monkey -p com.graymatrix.did -c android.intent.category.LAUNCHER 1");
	}

	/**
	 * @implNote This method will validate that user is able to find searched content in all tabs
	 * @param searchModuleKeyword
	 * @throws Exception
	 */
	public void searchResultsAllTabs(String searchModuleKeyword) throws Exception {
		extent.HeaderChildNode("Validating that user is able to find the searched content in all the tabs");
		waitTime(5000);
		verifyElementPresentAndClick(AMDHomePage.objHome, "Home Tab");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchModuleKeyword , "Search bar");
		// getDriver().getKeyboard().sendKeys(searchModuleKeyword);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 20);
		boolean allTabHighlighted = findElement(AMDSearchScreen.objAllTab).isSelected();
		if (allTabHighlighted == true) {
			logger.info("All Tab is highlighted by default");
			extent.extentLoggerPass("All Tab", "All Tab is highlighted by default");
		} else {
			logger.error("All Tab is not highlighted by default");
			extent.extentLoggerFail("All Tab", "All Tab is not highlighted by default");
		}
		waitTime(5000);
		swipeByElements(findElement(AMDSearchScreen.objMusicTabIndx), findElement(AMDSearchScreen.objShowsTabIndx));
		waitTime(3000);
		swipeByElements(findElement(AMDSearchScreen.objMusicTabIndx), findElement(AMDSearchScreen.objVideosTab));
		logger.info("User is able to scroll through the tabs");
		extent.extentLoggerPass("Tabs", "User is able to scroll through the tabs");
		hideKeyboard();
		waitTime(5000);
		List<WebElement> tabs = getDriver().findElements(AMDSearchScreen.objTabs);
		System.out.println(tabs.size());
		boolean Videos = false;
		for (int i = 1; i <= tabs.size(); i++) {
			String tabName = null;

			System.out.println("i : " + i);

			if (i == 5) {

				if (!Videos) {
					i = 4;
				}

				WebElement eleTab = findElement(
						By.xpath("(//*[@id='searchTypeTabLayout']//*[@class='android.widget.TextView'])[" + i + "]"));
				tabName = findElement(
						By.xpath("(//*[@id='searchTypeTabLayout']//*[@class='android.widget.TextView'])[" + i + "]"))
								.getText();

				System.out.println(tabName);
				eleTab.click();

			} else {
				WebElement eleTab = findElement(
						By.xpath("(//*[@id='searchTypeTabLayout']//*[@class='android.widget.TextView'])[" + i + "]"));
				tabName = findElement(
						By.xpath("(//*[@id='searchTypeTabLayout']//*[@class='android.widget.TextView'])[" + i + "]"))
								.getText();
				System.out.println(tabName);
				eleTab.click();
			}
			waitTime(5000);
			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLoggerPass("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");

			if (verifyIsElementDisplayed(AMDSearchScreen.objFirstSearchResult)) {
				String searchResults = findElement(AMDSearchScreen.objFirstSearchResult).getText();
				System.out.println("Search result : " + searchResults);

				if (searchResults.contains(searchModuleKeyword)) {
					logger.info("Related search results are displayed in " + tabName + " tab");
					extent.extentLoggerPass("Related search results",
							"Related search results are displayed in " + tabName + " tab");
				} else {
					logger.info("Related search results are not displayed in  " + tabName + " tab");
					extent.extentLogger("Related search results",
							"Related search results are not displayed in  " + tabName + " tab");
				}

			} else {
				logger.info("Related search results are not displayed in  " + tabName + " tab");
				extent.extentLogger("Related search results",
						"Related search results are not displayed in  " + tabName + " tab");
			}

			if (Videos) {
				break;
			}
			if (tabName.equalsIgnoreCase("Music")) {
				Videos = true;
			}
		}
		verifyElementPresentAndClick(AMDSearchScreen.objClearSearch, "Clear Search");

		if (checkElementExist(AMDSearchScreen.objMicrophoneIcon, "Microphone Icon")) {
			logger.info(
					"Microphone icon is displayed when user navigates back to Search landing screen from Search Result screen");
			extent.extentLoggerPass("Microphone icon",
					"Microphone icon is displayed when user navigates back to Search landing screen from Search Result screen");
		} else {
			logger.error(
					"Microphone icon is not displayed when user navigates back to Search landing screen from Search Result screen");
			extent.extentLoggerFail("Microphone icon",
					"Microphone icon is not displayed when user navigates back to Search landing screen from Search Result screen");
		}
	}
/**
 * @implNote This method is to validate the Search screen when No seach results are displayed
 * @param invalidSearchKeyword
 * @throws Exception
 */
	public void noSearchResults(String invalidSearchKeyword) throws Exception {
		extent.HeaderChildNode(
				"Validating the category tab is not displayed if the searched keyword don’t have results for the particular category");

		waitTime(5000);
        verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");

		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		// getDriver().getKeyboard().sendKeys(invalidSearchKeyword);
		type(AMDSearchScreen.objSearchBoxBar, invalidSearchKeyword, "Searchbar");
		hideKeyboard();
		if (checkElementExist(AMDSearchScreen.objNoSearchResults, "No Search Results message")) {
			String noResults = getText(AMDSearchScreen.objNoSearchResults);
			logger.info(noResults + " message is displayed");
			extent.extentLoggerPass("Search Results message", noResults + " message is displayed");

			logger.info("Searched keyword does not have results for the particular category");
			extent.extentLoggerPass("Search Results message",
					"Searched keyword does not have results for the particular category");
		} else {
			logger.error("Searched keyword has results for the particular category");
			extent.extentLoggerFail("Search Results message",
					"Searched keyword has results for the particular category");

		}
		click(AMDSearchScreen.objClearSearch, "Clear Search");
	}
/**
 * @implNote This method is to Swipe the screen by Element located on the screen
 * @param webElement
 * @param webElement2
 */
	public void swipeByElements(WebElement webElement, WebElement webElement2) {

		touchAction = new TouchAction<>(getDriver());

		int startX = webElement.getLocation().getX() + (webElement.getSize().getWidth() / 2);
		int startY = webElement.getLocation().getY() + (webElement.getSize().getHeight() / 2);

		int endX = webElement2.getLocation().getX() + (webElement2.getSize().getWidth() / 2);
		int endY = webElement2.getLocation().getY() + (webElement2.getSize().getHeight() / 2);
		touchAction.press(PointOption.point(startX, startY))
				.waitAction(WaitOptions.waitOptions(Duration.ofMillis(2000))).moveTo(PointOption.point(endX, endY))
				.release().perform();
	}

	/**
	 * @implNote This method is to validate the Search results screen
	 * @param partlySpeltSearchKeyword
	 * @throws Exception
	 */
	public void searchPageValidation(String partlySpeltSearchKeyword) throws Exception {
		extent.HeaderChildNode("Search Result Screen Validation");
		waitTime(7000);
		if (verifyIsElementDisplayed(AMDSearchScreen.objRecentSearch)) {
			extent.extentLoggerPass("Recent Search Overlay",
					"Recent Search Overlay is available in search results screen");
			logger.info("Recent Search Overlay is available in search results screen");
		} else {
			extent.extentLogger("Recent Search Overlay",
					"Recent Search Overlay is not available in search results screen");
			logger.info("Recent Search Overlay is not available in search results screen");
		}
		verifyElementPresentAndClick(AMDHomePage.objHome, "Home Tab");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		// getDriver().getKeyboard().sendKeys(partlySpeltSearchKeyword);
		type(AMDSearchScreen.objSearchBoxBar, partlySpeltSearchKeyword, "Search bar");
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 20);
		verifyElementExist(AMDSearchScreen.objSearchResultPage, "Search Result Screen");

//		String enteredValue = getAttributValue("value", AMDSearchScreen.objSearchBoxBar);
		System.out.println(partlySpeltSearchKeyword.length());
		waitTime(20000);
		if (partlySpeltSearchKeyword.length() >= 3) {

			System.out.println(
					getDriver().findElements(AMDSearchScreen.objRelatedSearchResult(partlySpeltSearchKeyword)).size());

			if (getDriver().findElements(AMDSearchScreen.objRelatedSearchResult(partlySpeltSearchKeyword)).size() > 0) {
				logger.info("Search result screen is displayed once user enters 3rd character in the search box.");
				extent.extentLoggerPass("Search result screen",
						"Search result screen is displayed once user enters 3rd character in the search box.");

			} else {
				logger.error(
						"Search result screen is not displayed when user enters less than 3 characters in the search box.");
				extent.extentLoggerFail("Search result screen",
						"Search result screen is not displayed when user enters less than 3 characters in the search box.");
			}
		}

		PartialSwipe("UP", 2);
		logger.info("User is able to scroll down the search results");
		extent.extentLoggerPass("Search results", "User is able to scroll down the search results");
		verifyElementPresentAndClick(AMDSearchScreen.objClearSearch, "Clear Search");
		hideKeyboard();
	}
/**
 * @implNote This method is to validate the Voice search Acess and Deny options
 * @throws Exception
 */
	public void voiceSearchDenyValidation() throws Exception {
		extent.HeaderChildNode("Voice Search Access Deny Validation");
		System.out.println("Voice Search Access Deny Validation");
		verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Icon");
		verifyElementPresentAndClick(AMDSearchScreen.objMicrophoneIcon, "Microphone icon");
		verifyElementPresentAndClick(AMDSearchScreen.objProceedBtn, "Proceed Button");
		if (verifyElementExist(AMDSearchScreen.objAudioPermissionPopUp, "Audio Permission Popup")) {
			verifyElementPresentAndClick(AMDSearchScreen.objDeny, "Deny Option");
			if (checkElementExist(AMDSearchScreen.objMicrophoneIcon, "Microphone Icon")) {
				logger.info("Search landing screen is displayed after denying audio permission");
				extent.extentLoggerPass("Search landing screen",
						"Search landing screen is displayed after denying audio permission");
			} else {
				logger.error("Search landing screen is not displayed after denying audio permission");
				extent.extentLoggerFail("Search landing screen",
						"Search landing screen is not displayed after denying audio permission");
			}

//			verifyElementPresentAndClick(AMDSearchScreen.objMicrophoneIcon, "Microphone icon");
//			verifyElementExist(AMDSearchScreen.objVoiceSearchPermission,"Microphone access permission popup");
//			verifyElementExist(AMDSearchScreen.objAudioPermissionPopUp,"Audio Permission Popup");
		}
	}
/**
 * @implNote This method is to validate the Voice search screen
 * @throws Exception
 */
	public void voiceSearchValidation() throws Exception {
		extent.HeaderChildNode("Voice Search Validation");
		System.out.println("Voice Search Validation");
		// verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Icon");

		WebElement elementMicrophoneIcon = findElement(AMDSearchScreen.objMicrophoneIcon);
		int iconRightX = elementMicrophoneIcon.getLocation().getX();
		System.out.println(iconRightX);
		Dimension sizee = getDriver().manage().window().getSize();
		System.out.println(sizee.getWidth());
		int sizeee = sizee.getWidth() - 300;
		System.out.println(sizeee);

		if (iconRightX >= sizeee) {
			logger.info("Microphone icon is displayed on right side of the search box");
			extent.extentLoggerPass("Microphone icon", "Microphone icon is displayed on right side of the search box");
		} else {
			logger.error("Microphone icon is not displayed on right side of the search box");
			extent.extentLoggerFail("Microphone icon",
					"Microphone icon is not displayed on right side of the search box");
		}
		click(AMDSearchScreen.objMicrophoneIcon, "Microphone icon");
		if (checkElementExist(AMDSearchScreen.objVoiceSearchPermission, "Microphone access permission popup")) {
			checkElementExist(AMDSearchScreen.objMicrophoneIconLogo, "Microphone icon");
			checkElementExist(AMDSearchScreen.objTermsAndConditions, "Terms of Use and Privacy Policy Message");
			checkElementExist(AMDSearchScreen.objProceedBtn, "Proceed Button");
			// checkElementExist(AMDSearchScreen.objBackBtn, "Back button");

//			WebElement elementBackBtn = findElement(AMDSearchScreen.objBackBtn);
//			int BackBtnleftX = elementBackBtn.getLocation().getX();
//			int BAckBtnrightX = BackBtnleftX + elementBackBtn.getSize().getWidth();
//			int BackBtnmiddleX = (BAckBtnrightX + BackBtnleftX) / 2;
//
//			if (BackBtnmiddleX <= 200) {
//				logger.info("Back button is displayed at top left of the screen");
//				extent.extentLoggerPass("Back button", "Back button is displayed at top left of the screen");
//			} else {
//				logger.error("Back button is not displayed at top left of the screen");
//				extent.extentLoggerFail("Back button", "Back button is not displayed at top left of the screen");
//			}
//
//			click(AMDSearchScreen.objBackBtn, "Back button");
			Back(1);

			if (verifyElementDisplayed(AMDSearchScreen.objSearchEditBox)) {
				logger.info(
						"User navigated to Search Landing screen on tapping back button in microphone access permission screen");
				extent.extentLoggerPass("Search Screen",
						"User navigated to Search Landing screen on tapping back button in microphone access permission screen");
			} else {
				logger.error(
						"User not navigated to Search Landing screen on tapping back button in microphone access permission screen");
				extent.extentLoggerFail("Search Screen",
						"User not navigated to Search Landing screen on tapping back button in microphone access permission screen");
			}

			click(AMDSearchScreen.objMicrophoneIcon, "Microphone icon");
			waitTime(2000);
			click(AMDSearchScreen.objProceedBtn, "Proceed Button");
			if (checkElementExist(AMDSearchScreen.objAudioPermissionPopUp, "Audio Permission Popup")) {
				verifyElementPresentAndClick(AMDSearchScreen.objAllow, "Allow Option");
				waitTime(7000);
				click(AMDSearchScreen.objMicrophoneIcon, "Microphone icon");
				// checkElementExist(AMDSearchScreen.objVoiceSearchScreen, "Voice Search
				// Screen");
				checkElementExist(AMDSearchScreen.objMicrophoneLogoInVoiceSearch, "Microphone icon");
				// checkElementExist(AMDSearchScreen.objSeeUrTextMsg, "See your text here
				// message");
				verifyElementPresentAndClick(AMDSearchScreen.objCloseBtn, "Close Button");
//				verifyElementPresentAndClick(AMDSearchScreen.objMicrophoneIcon, "Microphone icon");
//				verifyElementExist(AMDSearchScreen.objVoiceSearchPermission,"Microphone access permission popup");
//				verifyElementExist(AMDSearchScreen.objAudioPermissionPopUp,"Audio Permission Popup");
			}
		}
	}

	/*
	 * =============================================================================
	 * ===== ------------------------------ Script Author: KUSHAL
	 * ---------------------------------
	 * 
	 * List of Functions Created - navigateToLoginScreen_DisplaylangScreen() -
	 * navigateToIntroScreen_DisplaylangScreen() - LoginWithEmailID(String pEmailId,
	 * String pPassword) - verifyUIPresentInLoginPage() -
	 * verifyLoginScreenUIFunctionality() - VerifySkipLoginRegistrationScreen() -
	 * VerifyLoginWithEmailId(String pUserName, String pPassword) -
	 * verifyHaveAPrepaidCodePopUp() -
	 * verifyInvalidPrepaidCodePopUpAfterLogin(String pEmailID, String pPassword) -
	 * verifyInvalidPrepaidCodePopUpAfterRegistration() -
	 * verifyCongratulationPopupAppearsforValidPrepaidCode(String pCode, String
	 * pUserName, String pPassword)
	 * =============================================================================
	 * =========
	 */
/**
 * @implNote This method is to navigate to Login screen
 * @throws Exception
 */
	public void navigateToLoginScreen_DisplaylangScreen() throws Exception {
		extent.HeaderChildNode("Navigation to Login Screen");
		click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button (Content-LanguageScreen)");
		verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for Free");
	}
/**
 * @implNote This method is to navigate to Intro Screen
 * @throws Exception
 */
	public void navigateToIntroScreen_DisplaylangScreen() throws Exception {
//		click(AMDOnboardingScreen.objDiplay_ContinueBtn, "Continue button (Display-LanguageScreen)");
//		click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button (Content-LanguageScreen)");
//		verifyElementPresent(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for Free");
	}
/**
 * @Note this method is used to login to the application with Email ID
 * @param pEmailId
 * @param pPassword
 * @throws Exception
 */
	public void loginWithEmailID(String pEmailId, String pPassword) throws Exception {
		extent.HeaderChildNode("Log into ZEE5 with registered Email account");

		click(AMDHomePage.MoreMenuIcon, "More Menu");
		click(AMDLoginScreen.objProfileIcon, "Profile icon");
		verifyElementPresent(AMDLoginScreen.objEmailIdLabel, "Login/Register screen");
		type(AMDLoginScreen.objEmailIdField, pEmailId, "Email-Id/Phone");
		hideKeyboard();
		click(AMDLoginScreen.objProceedBtn, "Proceed button");
		verifyElementPresent(AMDLoginScreen.objPasswordField, "Password field");
		type(AMDLoginScreen.objPasswordField, pPassword, "Password");
		hideKeyboard();
		click(AMDLoginScreen.objLoginBtn, "Login Button");
	}
/**
 * @implNote This method is to verify the UI of Login Page
 * @throws Exception
 */
	public void verifyUIPresentInLoginPage() throws Exception {
		verifyElementPresent(AMDLoginScreen.objBackBtn, "Back button");
		verifyElementPresent(AMDLoginScreen.objLoginLnk, "Skip button");
		verifyElementPresent(AMDLoginScreen.objGoogleBtn, "Google login button");
		verifyElementPresent(AMDLoginScreen.objfbBtn, "facebook login button");
		verifyElementPresent(AMDLoginScreen.objtwitterBtn, "twitter login button");
	}
/**
 * @implNote This method is verifying the UI elements functionality present in Login Page
 * @throws Exception
 */
	public void verifyLoginScreenUIFunctionality() throws Exception {
		extent.HeaderChildNode("Veirfy UI elements present in Login Screen");
		verifyElementPresent(AMDGenericObjects.objScreenTitleName("Login"), "Login Screen");

		String pwdEncript = getAttributValue("checked", AMDLoginScreen.objShowPwdBtn);
		if (pwdEncript.contains("false")) {
			extent.extentLoggerPass("Default Show Password", "Password is Encripted");
			logger.info("Password is Encripted");
		} else {
			extent.extentLoggerFail("Default Show Password", "Password is not Encripted");
			logger.error("Password is not Encripted");
		}

		click(AMDLoginScreen.objShowPwdBtn, "Show Password");
		String checkPwdVisible = getAttributValue("checked", AMDLoginScreen.objShowPwdBtn);
		if (checkPwdVisible.contains("true")) {
			extent.extentLoggerPass("Click Show Password", "Password is Visible");
			logger.info("Password is Visible");
		} else {
			extent.extentLoggerFail("Click Show Password", "Password is not Visible");
			logger.error("Password is not Visible");
		}
		hideKeyboard();
		verifyElementPresentAndClick(AMDLoginScreen.objForgetPwdBtn, "Forgot Password CTA");
		verifyElementPresent(AMDGenericObjects.objScreenTitleName("Forgot Password"), "Forgot Password Screen");
		click(AMDLoginScreen.objBackBtn, "Back button");
	}

	/**
	 * @implNote This method to verify the Skip button in Login screen
	 * @throws Exception
	 */
	public void verifySkipLoginRegistrationScreen() throws Exception {
		extent.HeaderChildNode("Browse for Free - Skip Login/Register screen to Home page");

		String pUserType = getParameterFromXML("userType");
		if (pUserType.contains("Guest")) {
			verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for Free");
			verifyElementPresent(AMDGenericObjects.objScreenTitleName("Login/Register"), "Login/Register title");
			verifyUIPresentInLoginPage();
			verifyElementPresent(AMDLoginScreen.objEmailIdLabel, "Email ID or Mobile Number");
			type(AMDLoginScreen.objEmailIdField, "testmessage.com", "EmailId");
			verifyElementPresent(AMDLoginScreen.objErrInvalidID, getText(AMDLoginScreen.objErrInvalidID));
			clearField(AMDLoginScreen.objEmailIdField, "EmailId");
			type(AMDLoginScreen.objEmailIdField, "987654321", "Phone Number");
			verifyElementPresent(AMDLoginScreen.objErrInvalidID, getText(AMDLoginScreen.objErrInvalidID));
			clearField(AMDLoginScreen.objEmailIdField, "EmailId");
			type(AMDLoginScreen.objEmailIdField, "sample@zee5.com", "EmailId");
			hideKeyboard();
			verifyElementPresent(AMDLoginScreen.objProceedBtn, "Proceed button");
			verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Skip button");
			verifyElementPresent(AMDHomePage.objHome, "Home Page");
		} else {
			boolean landingPage = verifyIsElementDisplayed(AMDHomePage.HomeIcon);
			if (landingPage) {
				logger.info("Intro screen is skipped for " + pUserType);
				extent.extentLoggerPass("Intro Skipped", "Intro screen is skipped and User landed in Home screen");
			} else {
				logger.info("Intro screen is Not skipped for " + pUserType);
				extent.extentLoggerFail("Intro Skipped", "Intro screen is NOT skipped for " + pUserType);
			}
		}
	}

	/**
	 * @implNote This method is to validate the functionality of Have a code?
	 * @throws Exception
	 */
	public void verifyHaveAPrepaidCodePopUp() throws Exception {
		extent.HeaderChildNode("Verify Have a prepaid code PopUp UI is displayed");
		String pUserType = getParameterFromXML("userType");
		if (pUserType.contains("Guest")) {

			click(AMDOnboardingScreen.objDiplay_ContinueBtn, "Continue button (Display-LanguageScreen)");
			click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button (Content-LanguageScreen)");
			verifyElementPresentAndClick(AMDOnboardingScreen.objHavePrepaidBtn, "Have a prepaid code? CTA");
			verifyElementPresent(AMDOnboardingScreen.objPrepaidPopupLabel, "Prepaid Code PopUp Header");
			verifyElementPresent(AMDOnboardingScreen.objWhatIsPrepaidCodeBtn, "What is a Prepaid Code?");
			verifyElementPresent(AMDOnboardingScreen.objApplyBtn, "Apply button");

			String getPropertyValue = getAttributValue("enabled", AMDOnboardingScreen.objApplyBtn);
			if (getPropertyValue.equalsIgnoreCase("false")) {
				extent.extentLoggerPass("Apply button", "Apply Button is by default dehighlighted");
				logger.info("Apply Button is by default dehighlighted");
			} else {
				extent.extentLoggerFail("Apply buttont", "Apply Button fails to dehighlight by default");
				logger.error("Apply Button failed to dehighlight by default");
			}

			verifyElementPresent(AMDOnboardingScreen.objPrepaidCodeField, "Prepaid Code Field");
			if (getText(AMDOnboardingScreen.objPrepaidCodeField).equalsIgnoreCase("Prepaid Code")) {
				extent.extentLoggerPass("Prepaid Code field", "Prepaid Code text is displayed in the edit field");
				logger.info("Prepaid Code text is displayed in the edit field");
			} else {
				extent.extentLoggerFail("Prepaid Code field", "Prepaid Code text is not displayed in the edit field");
				logger.error("Prepaid Code text is not displayed in the edit field");
			}

			verifyElementPresentAndClick(AMDOnboardingScreen.objWhatIsPrepaidCodeBtn, "What is Prepaid Code? CTA");
			verifyElementPresent(AMDGenericObjects.objCheckTitle("About Prepaid Code"), "About Prepaid Code Screen");
			verifyElementPresent(AMDOnboardingScreen.objDescriptionTxt, "About Prepaid code description");
			verifyElementPresentAndClick(AMDOnboardingScreen.objBackBtn, "Back Button");
			verifyElementPresent(AMDOnboardingScreen.objPrepaidPopupLabel, "Prepaid Popup");
			verifyElementPresentAndClick(AMDOnboardingScreen.objPopUpDivider, "Popup Horizontal line");
			verifyElementPresentAndClick(AMDOnboardingScreen.objHavePrepaidBtn, "Have a prepaid code? CTA");

			click(AMDOnboardingScreen.objPrepaidCodeField, "Prepaid code field");
			Wait(1000);
			type(AMDOnboardingScreen.objPrepaidCodeField, "ZNA2020", "Prepaid Code field");
			hideKeyboard();
			String getPropertyValue2 = getAttributValue("enabled", AMDOnboardingScreen.objApplyBtn);
			if (getPropertyValue2.equalsIgnoreCase("true")) {
				extent.extentLoggerPass("Apply button", "Apply Button is highlighted");
				logger.info("Apply Button is highlighted");
			} else {
				extent.extentLoggerFail("Apply buttont", "Apply Button fails to highlight after entering code");
				logger.error("Apply Button fails to highlight after entering code");
			}

			click(AMDOnboardingScreen.objApplyBtn, "Apply button");
			verifyElementPresent(AMDOnboardingScreen.objFaceIcon, "Oops! label");
			String textMessage = getText(AMDOnboardingScreen.objSuccessDesc);
			if (textMessage.contains("You are not logged in")) {
				extent.extentLoggerPass("Invalid Code Message",
						"You are not logged in to apply prepaid code... message");
				logger.info("You are not logged in to apply prepaid code... message is displayed");
			} else {
				extent.extentLoggerFail("Invalid Code Message",
						"You are not logged in to apply prepaid code... message");
				logger.error("You are not logged in to apply prepaid code... message is not displayed");
			}
			verifyElementPresent(AMDOnboardingScreen.objRegisterBtn, "Register button");
			verifyElementPresentAndClick(AMDOnboardingScreen.objLoginBtn, "Login button");
			verifyElementPresent(AMDLoginScreen.objEmailIdField, "Login/Register screen");
			Back(1);
			click(AMDGenericObjects.objPopUpDivider, "Close PopUp");
		} else {
			waitTime(3000);
			boolean landingPage = verifyIsElementDisplayed(AMDHomePage.HomeIcon);
			if (landingPage) {
				logger.info("Intro screen is skipped for " + pUserType);
				extent.extentLoggerPass("Intro Skipped", "Intro screen is skipped and User landed in Home screen");
			} else {
				logger.info("Intro screen is Not skipped for " + pUserType);
				extent.extentLoggerFail("Intro Skipped", "Intro screen is NOT skipped for " + pUserType);
			}
		}
	}
/**
 * @implNote This method is to verify the Invalid prepaid code popup after Login successfull
 * @param pEmailID
 * @param pPassword
 * @throws Exception
 */
	public void verifyInvalidPrepaidCodePopUpAfterLogin(String pEmailID, String pPassword) throws Exception {

		extent.HeaderChildNode("Verify Invalid prepaid code PopUp UI is displayed after successful login");
		System.out.println("\nVerify Invalid prepaid code PopUp UI is displayed after successful login");
		String pUserType = getParameterFromXML("userType");
		if (pUserType.contains("Guest")) {
			click(AMDOnboardingScreen.objDiplay_ContinueBtn, "Continue button (Display-LanguageScreen)");
			click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button (Content-LanguageScreen)");
			verifyElementPresentAndClick(AMDOnboardingScreen.objHavePrepaidBtn, "Have a prepaid code? CTA");
			click(AMDOnboardingScreen.objPrepaidCodeField, "Prepaidcode Field");
			type(AMDOnboardingScreen.objPrepaidCodeField, "CODE2020", "Prepaid Code field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDOnboardingScreen.objApplyBtn, "Apply button");
			verifyElementPresentAndClick(AMDOnboardingScreen.objLoginBtn, "Login button");
			loginWithEmailID(pEmailID, pPassword);
			waitTime(5000);
			verifyElementPresent(AMDOnboardingScreen.objSuccessTitle("Oops!"), "Invalid Prepaid Code Pop up");
			String getPopUpDesc = getText(AMDOnboardingScreen.objSuccessDesc);
			if (getPopUpDesc.contains("Please Provide Valid Coupon code")) {
				extent.extentLoggerPass("Invalid Pop up", getPopUpDesc + "  message is displayed");
				logger.info(getPopUpDesc + "is displayed in PopUp screen");
			} else {
				extent.extentLoggerFail("Invalid Pop up", "Please provide valid coupon code message is not displayed");
				logger.error("Please provide valid coupon code is not displayed");
			}

			verifyElementPresentAndClick(AMDOnboardingScreen.objDoneBtn, "Done button");
			if (verifyElementPresent(AMDHomePage.objHome, "Home Screen")) {
				extent.extentLoggerPass("Login with registered user", pEmailID + " :  is logged in Successfully");
				logger.info(pEmailID + " is logged in  successfully");
			} else {
				extent.extentLoggerFail("Login with registered user", pEmailID + " failed to login");
				logger.error(pEmailID + " failed to login");
			}
		} else {
			boolean landingPage = verifyIsElementDisplayed(AMDHomePage.objHome);
			if (landingPage) {
				logger.info("Intro screen is skipped for " + pUserType);
				extent.extentLoggerPass("Intro Skipped", "Intro screen is skipped and User landed in Home screen");
			} else {
				logger.info("Intro screen is Not skipped for " + pUserType);
				extent.extentLoggerFail("Intro Skipped", "Intro screen is NOT skipped for " + pUserType);
			}
		}
	}
	
/**
 * @implNote This method is to Verify Invalid  prepaid code popup after registration
 * @throws Exception
 */
	public void verifyInvalidPrepaidCodePopUpAfterRegistration() throws Exception {

		extent.HeaderChildNode("Verify Invalid prepaid code PopUp UI is displayed after successful login");
		System.out.println("\nVerify Invalid prepaid code PopUp UI is displayed after successful login");
		String pUserType = getParameterFromXML("userType");
		if (pUserType.contains("Guest")) {
			click(AMDOnboardingScreen.objDiplay_ContinueBtn, "Continue button (Display-LanguageScreen)");
			click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button (Content-LanguageScreen)");
			verifyElementPresentAndClick(AMDOnboardingScreen.objHavePrepaidBtn, "Have a prepaid code? CTA");
			click(AMDOnboardingScreen.objPrepaidCodeField, "Prepaidcode Field");
			type(AMDOnboardingScreen.objPrepaidCodeField, "CODE2020", "Prepaid Code field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDOnboardingScreen.objApplyBtn, "Apply button");
			verifyElementPresentAndClick(AMDOnboardingScreen.objRegisterBtn, "Register button");
			Wait(1000);
			type(AMDRegistrationScreen.objEmailIDTextField, generateRandomString(6) + "@yopmail.com", "Email field");
			verifyElementPresentAndClick(AMDRegistrationScreen.objProceedBtn, "Proceed button");

			// ---Register new user
			registerForFreeScreen("Prepaid");

			verifyElementPresent(AMDOnboardingScreen.objSuccessTitle("Oops!"), "Invalid Prepaid Code Pop up");
			String getPopUpDesc = getText(AMDOnboardingScreen.objSuccessDesc);
			if (getPopUpDesc.contains("Please Provide Valid Coupon code")) {
				extent.extentLoggerPass("Invalid Pop up", getPopUpDesc + " is displayed in PopUp screen");
				logger.info(getPopUpDesc + "is displayed in PopUp screen");
			} else {
				extent.extentLoggerFail("Invalid Pop up", "Please provide valid coupon code is not displayed");
				logger.error("Please provide valid coupon code is not displayed");
			}

			verifyElementPresentAndClick(AMDOnboardingScreen.objDoneBtn, "Done button");
			if (verifyElementPresent(AMDHomePage.objHome, "Home Screen")) {
				extent.extentLoggerPass("Register New user", "User is registered to ZEE5 successfully");
				logger.info("User is registered to ZEE5 successfully");
			} else {
				extent.extentLoggerFail("Register New user", "User failed to register");
				logger.error("User failed to register");
			}
		} else {
			boolean landingPage = verifyIsElementDisplayed(AMDHomePage.HomeIcon);
			if (landingPage) {
				logger.info("Intro screen is skipped for " + pUserType);
				extent.extentLoggerPass("Intro Skipped", "Intro screen is skipped and User landed in Home screen");
			} else {
				logger.info("Intro screen is Not skipped for " + pUserType);
				extent.extentLoggerFail("Intro Skipped", "Intro screen is NOT skipped for " + pUserType);
			}
		}
	}

	// --------- Need a VALID Prepaid Code to verify Congratulations Popup screen
	// -----------
/**
 * @implNote This method is to verify Congratulation popup for valid prepaid code
 * @param pCode
 * @param pUserName
 * @param pPassword
 * @throws Exception
 */
	public void verifyCongratulationPopupAppearsforValidPrepaidCode(String pCode, String pUserName, String pPassword)
			throws Exception {
		extent.HeaderChildNode("Verify Congratulation PopUp is displayed for valid Prepaid Code");
		click(AMDOnboardingScreen.objDiplay_ContinueBtn, "Continue button (Display-LanguageScreen)");
		click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button (Content-LanguageScreen)");
		click(AMDOnboardingScreen.objHavePrepaidBtn, "Have a prepaid code? CTA");
		click(AMDOnboardingScreen.objPrepaidCodeField, "Prepaidcode Field");
		type(AMDOnboardingScreen.objPrepaidCodeField, pCode, "Valid Prepaid Code");
		hideKeyboard();
		verifyElementPresentAndClick(AMDOnboardingScreen.objApplyBtn, "Apply button");
		click(AMDOnboardingScreen.objLoginBtn, "Login button");
		loginWithEmailID(pUserName, pPassword);

		verifyElementPresent(AMDOnboardingScreen.objSuccessTitle("Congratulations!"), "Congratulations! Pop up screen");
		String getPopUpDesc = getText(AMDOnboardingScreen.objSuccessDesc);
		if (getPopUpDesc.contains("Prepaid code applied successfully")) {
			extent.extentLoggerPass("Congrats Pop up", getPopUpDesc + " - message is displayed");
			logger.info(getPopUpDesc + " is displayed in PopUp screen");
		} else {
			extent.extentLoggerFail("Congrats Pop up", "Message - Prepaid code applied successfully is not displayed");
			logger.error("Message - Prepaid code applied successfully is not displayed");
		}

		verifyElementPresentAndClick(AMDOnboardingScreen.objWatchNowBtn, "Watch Now button");

		if (verifyElementPresent(AMDHomePage.objHomeTab, "Home page")) {
			extent.extentLoggerPass("Login with EmailId", pUserName + " : is logged in successfully");
			logger.info(pUserName + " is logged in  successfully");
		} else {
			extent.extentLoggerFail("Login with EmailId", pUserName + " failed to login");
			logger.error(pUserName + " failed to login");
		}
	}

	/**
	 * Author : Sushma
	 * @implNote This method will navigate to Home screen and verify subscribe icon
	 * @throws Exception
	 */
	public void homeLandingScreen(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("Navigating to Home screen and verifing the Subscribe icon");
		System.out.println("Home Landing screen and verifing the subscribe icon");

		// Selecting HOME tab from Top Navigation
		selectTopNavigationTab(tabName);

		String activeTab = getText(AMDHomePage.objSelectedTab);
		if (activeTab.equalsIgnoreCase(tabName)) {
			logger.info(userType + " is able to navigate to " + tabName + " screen by tapping on " + tabName
					+ " tab displayed in the top navigation bar");
			extent.extentLoggerPass(tabName + " Tab", userType + " is able to navigate to " + tabName
					+ " screen by tapping on " + tabName + " tab displayed in the top navigation bar");
		} else {
			logger.error(userType + " is not able to navigate to " + tabName + " screen by tapping on " + tabName
					+ " tab displayed in the top navigation bar");
			extent.extentLoggerFail(tabName + " Tab", userType + " is not able to navigate to " + tabName
					+ " screen by tapping on " + tabName + " tab displayed in the top navigation bar");
		}
		waitTime(10000);
		// closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000);

		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			if (verifyElementDisplayed(AMDHomePage.objSubscribeTeaser)) {
				logger.info("Buy Plan icon is dislayed");
				extent.extentLoggerPass("Subscribe icon", "Buy Plan icon is dislayed");
			} else {
				logger.error("Buy Plan icon is not dislayed");
				extent.extentLoggerFail("Subscribe icon", "Buy Plan icon is NOT dislayed");
			}
		} else {
			if (verifyElementIsNotDisplayed(AMDHomePage.objSubscribeTeaser)) {
				logger.info("Buy Plan icon is NOT dislayed");
				extent.extentLoggerPass("Zee5 logo", "Buy Plan icon is NOT dislayed");
			} else {
				logger.error("Buy Plan icon is dislayed");
				extent.extentLoggerFail("Zee5 logo", "Buy Plan icon is dislayed");
			}
		}

		if (verifyElementDisplayed(AMDHomePage.objZee5Logo)) {
			logger.info("Zee5 logo is dislayed");
			extent.extentLoggerPass("Subscribe icon", "Zee5 logo is dislayed");
		} else {
			logger.error("Zee5 logo is not dislayed");
			extent.extentLoggerFail("Subscribe icon", "Zee5 logo is NOT dislayed");
		}

		String courselContentTitle = carouselValidationWithApi(userType, "homepage");
		carouselValidation(userType, tabName, courselContentTitle);
		click(AMDHomePage.objContentTitle(courselContentTitle), "Carousel content");
		if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
//			Back(1);
			click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
		}
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			if (verifyIsElementDisplayed(AMDHomePage.objWatchTrailerIconOnPlayerscreen)) {
				if (verifyIsElementDisplayed(AMDShowsScreen.objSubscribeNowlink)) {
					logger.error(
							"Content playback is not initiated for the user post tapping on premium content which is having trailer");
					extentLoggerFail("Trailer",
							"Content playback is not initiated for the user post tapping on premium content which is having trailer");
				} else {
					logger.info(
							"Content playback is initiated for the user post tapping on premium content which is having trailer");
					extentLoggerPass("Trailer",
							"Content playback is initiated for the user post tapping on premium content which is having trailer");
				}
			} else {
				if (verifyIsElementDisplayed(AMDShowsScreen.objSubscribeNowlink)) {
					logger.info(
							"Content playback is not initiated for the user post tapping on premium content which is not having trailer");
					extentLoggerPass("Trailer",
							"Content playback is not initiated for the user post tapping on premium content which is not having trailer");
				} else {
					logger.error(
							"Content playback is initiated for the user post tapping on premium content which is not having trailer");
					extentLoggerFail("Trailer",
							"Content playback is initiated for the user post tapping on premium content which is not having trailer");
				}
			}

		} else {
			logger.info("Content playback is initiated for the SubscribedUser post tapping on Premium Content");
			extentLoggerPass("Trailer",
					"Content playback is initiated for the SubscribedUser post tapping on Premium Content");
		}
		if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
//			Back(1);
			click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
		}
		Back(1);
		extent.HeaderChildNode("Verifing the availability of trays in the screen");
		findingTrayInscreen(2, AMDHomePage.objTrayTitle("Continue Watching"), AMDHomePage.objCarouselDots,
				"Continue watching tray", "MastheadCarousel", userType, tabName);
		findingTrayInscreen(10, AMDHomePage.objTrayTitle("Trending on"), AMDHomePage.objCarouselDots,
				"Trending on Zee5 tray", "MastheadCarousel", userType, tabName);
		findingTrayInscreen(25, AMDHomePage.objTrayTitle("Trending Trailers"), AMDHomePage.objCarouselDots,
				"Trending Trailers and Teasers tray", "Mastheadcarousel", userType, tabName);
		if (userType.equalsIgnoreCase("Guest")) {
			selectContentLang_MoreMenu2("English,Malayalam");
			waitTime(5000);
			closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000);
			findingTrayInscreen(25, AMDHomePage.objTrayTitle("Live Channels"), AMDHomePage.objCarouselDots,
					"Live Channels tray", "Mastheadcarousel", userType, tabName);
			findingTrayInscreen(25, AMDHomePage.objTrayTitle("Malayalam Movie Bonanza"), AMDHomePage.objCarouselDots,
					"Malayalam Movie Bonanza tray", "Mastheadcarousel", userType, tabName);
			deselectContentLang_MoreMenuAndSelectDefaultLanguage("English,Malayalam");
		}
//		verifyContinueWatchingTray(userType, tabName);
		// RemoveContentCardFromCWRail(userType);
	}
	
/**
 * @implNote This method will select the content language
 * @param planguage
 * @throws Exception
 */
	public void selectContentLang_MoreMenu2(String planguage) throws Exception {

		click(AMDHomePage.HomeIcon, "Home button");
		click(AMDHomePage.MoreMenuIcon, "More Menu");
		Swipe("UP", 1);
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings CTA");
		verifyElementPresent(AMDGenericObjects.objScreenTitleName("Settings"), "Settings Screen");
		Swipe("UP", 1);
		swipeUntilFindElement(AMDMoreMenu.objContentLang, "UP");
		verifyElementPresentAndClick(AMDMoreMenu.objContentLang, "Content language");
		verifyElementPresent(AMDGenericObjects.objScreenTitleName("Content Language"), "Content language screen");

		// ***** UnSelecting default content languages *****
		if (pUserType.contains("Guest")) {
			click(AMDOnboardingScreen.objSelectContentLang("English"), "English");
			PartialSwipe("UP", 2);
			waitTime(1000);
			click(AMDOnboardingScreen.objSelectContentLang("Kannada"), "Kannada");
			Swipe("DOWN", 1);
		}

		// ***** Selecting required language *****
		if (planguage.contains(",")) {
			Swipe("DOWN", 1);
			String[] pLanguages = planguage.split(",");
			int n = pLanguages.length;
			for (int i = 0; i < n; i++) {

				for (int j = 0; j < 5; j++) {
					if (getDriver().findElements(AMDOnboardingScreen.objSelectContentLang(pLanguages[i])).size() == 0) {
						PartialSwipe("UP", 1);
					} else {
						verifyElementPresentAndClick(AMDOnboardingScreen.objSelectContentLang(pLanguages[i]),
								pLanguages[i]);
						break;
					}
				}
			}
		} else {
			outerLoop: for (int i = 1; i <= 4; i++) {
				int totalLanguages = getCount(AMDOnboardingScreen.objContentLangBtns);
				for (int j = 1; j <= totalLanguages; j++) {
					String visibleLang = getText(AMDOnboardingScreen.objgetContentLangName(j));
					if (planguage.equalsIgnoreCase(visibleLang)) {
						verifyElementPresentAndClick(AMDOnboardingScreen.objSelectContentLang(planguage), planguage);
						break outerLoop;
					}
				}
				PartialSwipe("UP", 1);
			}
		}
		waitTime(1000);
		verifyElementPresentAndClick(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button");
		waitTime(1000);
//	click(AMDGenericObjects.objBackBtn, "Back button");
		Back(1);
		click(AMDHomePage.HomeIcon, "Home button");
	}

	/**
	 * @implNote This method is to validate carousel validation with API
	 * @param userType
	 * @param pagenameforApi
	 * @return
	 */
	public static String carouselValidationWithApi(String userType, String pagenameforApi) {
		Response respPage = ResponseInstance.getResponseForApplicasterPages(userType, pagenameforApi);
//	System.out.println(respPage);

		List<String> bucketsSize = respPage.jsonPath().getList("buckets");
		logger.info("bucketsSize: " + bucketsSize.size());
		String carouselContentTitle = null;
		main: for (int i = 0; i < bucketsSize.size(); i++) {
			String description = respPage.jsonPath().getString("buckets[" + i + "].short_description");

			if ((description.equalsIgnoreCase("Home Page Slider")) | (description.equalsIgnoreCase("Movies Banner"))) {
				List<String> carouselItems = respPage.jsonPath().getList("buckets[" + i + "].items");
				logger.info("carouselItems: " + carouselItems.size());

				for (int j = 0; j < 7; j++) {
					carouselContentTitle = respPage.jsonPath().getString("buckets[" + i + "].items[" + j + "].title");
					logger.info(carouselContentTitle);

					String CarouselContentBusinessType = respPage.jsonPath()
							.getString("buckets[" + i + "].items[" + j + "].business_type");
					logger.info(CarouselContentBusinessType);

					if (CarouselContentBusinessType.equalsIgnoreCase("premium_downloadable")) {
						break main;
					}
				}
			}
		}
		return carouselContentTitle;
	}

	/**
	 * @implNote This method will swipe the carousel card
	 * @param direction
	 * @param count
	 * @param width
	 * @param height
	 * @throws Exception
	 */
	@SuppressWarnings("rawtypes")
	public void carouselCardsSwipe(String direction, int count, String width, String height) throws Exception {
		touchAction = new TouchAction(getDriver());

		try {

			int yCordinate;
			if (verifyElementIsNotDisplayed(AMDHomePage.objAdBannerAboveCarousel)) {
				yCordinate = (int) ((Integer.valueOf(height)) * 0.4);
			} else {
				yCordinate = (int) ((Integer.valueOf(height)) * 0.5);
			}

			if (direction.equalsIgnoreCase("LEFT")) {

				for (int i = 0; i < count; i++) {

					int startx = (Integer.valueOf(width));
					startx = (int) (startx * 0.8);
					int endx = (int) (startx * 0.1);

					int starty = (Integer.valueOf(height)) + yCordinate;
					touchAction.press(PointOption.point(startx, starty))
							.waitAction(WaitOptions.waitOptions(Duration.ofMillis(100)))
							.moveTo(PointOption.point(endx, starty)).release().perform();
					logger.info("Swiping screen in " + " " + direction + " direction" + " " + (i + 1) + " times");
					extent.extentLoggerPass("SwipeLeft",
							"Swiping screen in " + " " + direction + " direction" + " " + (i + 1) + " times");

					System.out.println("\n<<< Swipe <<<");
					System.out.println("[X,Y]: [" + startx + "," + starty + "] ===> [" + endx + "," + starty + "]");
				}
			} else if (direction.equalsIgnoreCase("RIGHT")) {

				for (int j = 0; j < count; j++) {
					int startx = (int) ((Integer.valueOf(width)) * 0.1);
					int endx = (int) ((Integer.valueOf(width)) * 0.8);
					int starty = (Integer.valueOf(height)) + yCordinate;
					touchAction.press(PointOption.point(startx, starty))
							.waitAction(WaitOptions.waitOptions(Duration.ofMillis(100)))
							.moveTo(PointOption.point(endx, starty)).release().perform();

					logger.info("Swiping screen in " + " " + direction + " direction" + " " + (j + 1) + " times");
					extent.extentLoggerPass("SwipeRight",
							"Swiping screen in " + " " + direction + " direction" + " " + (j + 1) + " times");

					System.out.println("\n>>> Swipe >>>");
					System.out.println("[X,Y]: [" + startx + "," + starty + "] ===> [" + endx + "," + starty + "]");
				}
			}
		} catch (Exception e) {
			logger.error(e);
		}
	}
/**
 * @implNote This method will swipe the carousel
 * @param direction
 * @param count
 * @param width
 * @param height
 * @throws Exception
 */
	@SuppressWarnings("rawtypes")
	public void carouselSwipe(String direction, int count, String width, String height) throws Exception {
		touchAction = new TouchAction(getDriver());

		try {
			if (direction.equalsIgnoreCase("LEFT")) {

				for (int i = 0; i < count; i++) {

					int startx = (Integer.valueOf(width)) - 200;
					int endx = 100;
					int starty = (Integer.valueOf(height)) + 300;
					touchAction.press(PointOption.point(startx, starty))
							.waitAction(WaitOptions.waitOptions(Duration.ofMillis(100)))
							.moveTo(PointOption.point(endx, starty)).release().perform();
					logger.info("Swiping screen in " + " " + direction + " direction" + " " + (i + 1) + " times");
					extent.extentLogger("SwipeLeft",
							"Swiping screen in " + " " + direction + " direction" + " " + (i + 1) + " times");
				}
			} else if (direction.equalsIgnoreCase("RIGHT")) {

				for (int j = 0; j < count; j++) {
					int startx = 100;
					int endx = (Integer.valueOf(width)) - 200;
					int starty = (Integer.valueOf(height)) + 300;
					touchAction.press(PointOption.point(startx, starty))
							.waitAction(WaitOptions.waitOptions(Duration.ofMillis(100)))
							.moveTo(PointOption.point(endx, starty)).release().perform();

					logger.info("Swiping screen in " + " " + direction + " direction" + " " + (j + 1) + " times");
					extent.extentLogger("SwipeRight",
							"Swiping screen in " + " " + direction + " direction" + " " + (j + 1) + " times");
				}
			}
		} catch (Exception e) {
			logger.error(e);

		}
	}
/**
 * @implNote This method is to find the Tray in Screen
 * @param j
 * @param byLocator1
 * @param byLocator2
 * @param str1
 * @param str2
 * @param userType
 * @param tabName
 * @throws Exception
 */
	public void findingTrayInscreen(int j, By byLocator1, By byLocator2, String str1, String str2, String userType,
			String tabName) throws Exception {
		boolean tray = false;
		for (int i = 0; i < j; i++) {
			if (!((verifyIsElementDisplayed(byLocator1)))) {
				Swipe("UP", 1);
			} else {
				verifyElementExist(byLocator1, str1);
				tray = true;
				if (tabName.equalsIgnoreCase("Home")) {
					if (str1.equalsIgnoreCase("Continue watching tray")) {

//						Response respCW = ResponseInstance.getRespofCWTray(userType);
//
//						List<String> ApinoOfContentsInCW = respCW.jsonPath().getList("array");
//						logger.info("no.of contents in CW tray in Api " + ApinoOfContentsInCW.size());
//
//						ArrayList<String> listOfContentsInCW = new ArrayList<String>();
//
//						for (int k = 0; k < ApinoOfContentsInCW.size(); k++) {
//
//							String title = respCW.jsonPath().getString("[" + k + "].title");
//							listOfContentsInCW.add(title);
//						}
//
//						logger.info(listOfContentsInCW);
//
//						for (int p = 0; p < ApinoOfContentsInCW.size(); p++) {
//
//							verifyElementExist(AMDHomePage.objContentTitleOfCWTray(listOfContentsInCW.get(p)),
//									"content title");
//
//							if (verifyElementDisplayed(AMDHomePage.objLeftTimeOfFirstContentOfCWTray)) {
//								logger.info("Left watch time info on cards is available");
//								extent.extentLoggerPass("Left watch time info",
//										"Left watch time info on cards is available");
//							} else {
//								logger.error("Left watch time info on cards is not available");
//								extent.extentLoggerFail("Left watch time info",
//										"Left watch time info on cards is not available");
//							}
						if (verifyElementDisplayed(AMDHomePage.objProgressBarOfFirstContentOfCWTray(1))) {
							logger.info("Progress bar is displayed to indicate the content watched portion");
							extent.extentLoggerPass("Progress bar",
									"Progress bar is displayed to indicate the content watched portion");
						} else {
							logger.error("Progress bar is not displayed to indicate the content watched portion");
							extent.extentLoggerFail("Progress bar",
									"Progress bar is not displayed to indicate the content watched portion");
						}
//							if (p != (ApinoOfContentsInCW.size() - 1)) {
//								SwipeRail(AMDHomePage.objContentTitleOfCWTray(listOfContentsInCW.get(p + 1)));
//							}
					}
				}
				break;
			}

		}
		if (tray == false) {
			if (userType.equalsIgnoreCase("Guest")) {
				if (str1.equalsIgnoreCase("Continue watching tray")) {
					logger.info(str1 + " is not displayed for Guest user");
					extent.extentLoggerPass("Tray", str1 + " is not displayed for Guest user");
				} else {
					logger.error(str1 + " is not displayed");
					extent.extentLoggerWarning("Tray", str1 + " is not displayed");
				}
			} else {
				if (tabName.equalsIgnoreCase("Home")) {

					if (str1.equalsIgnoreCase("Continue watching tray")) {

						Response respCW = ResponseInstance.getRespofCWTray(userType);

						List<String> ApinoOfContentsInCW = respCW.jsonPath().getList("array");
						logger.info("no.of contents in CW tray in Api " + ApinoOfContentsInCW.size());

						if (ApinoOfContentsInCW.size() == 0) {

							logger.info(str1 + " is not displayed for this user");
							extent.extentLoggerPass("Tray", str1 + " is not displayed for this user");
						} else {
							logger.error(str1 + " is not displayed for this user");
							extent.extentLoggerWarning("Tray", str1 + " is not displayed for this user");
						}
					}
					logger.error(str1 + " is not displayed");
					extent.extentLoggerWarning("Tray", str1 + " is not displayed");
				} else {
					logger.error(str1 + " is not displayed");
					extent.extentLoggerWarning("Tray", str1 + " is not displayed");
				}
			}
		}
		for (int i = 0; i < j; i++) {
			if (!(verifyIsElementDisplayed(byLocator2))) {
				Swipe("DOWN", 1);
			} else {
				verifyElementExist(byLocator2, str2);
				break;
			}
		}
	}

	/**
	 * @implNote This method is to verify the Masthead and Display Ad
	 * @param tabname
	 * @throws Exception
	 */
	public void adBannerVerify(String tabname) throws Exception {
		extent.HeaderChildNode("Masthead and Display Ad verification");
		System.out.println("Masthead and Display Ad verification");
		waitTime(20000);
		closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 10000);

		getDriver().findElement(By.xpath("//*[@id='title' and @text='" + tabname + "']")).click();
		waitTime(10000);

		if (verifyElementDisplayed(AMDHomePage.objBannerAd)) {
			logger.info("Masthead and Display ads are displayed properly in " + tabname + " screen");
			extent.extentLogger("Ads", "Masthead and Display ads are displayed properly in " + tabname + " screen");
		} else {
			logger.info("Masthead and Display ads are not displayed properly in " + tabname + " screen");
			extent.extentLoggerFail("Ads",
					"Masthead and Display ads are not displayed properly in " + tabname + " screen");
		}
	}

	/**
	 * Author : Bhavana Module : Download Screen Validation
	 * @implNote This method is to validate the Download screen empty state
	 * @param userType
	 */

	public void emptystateScreenValidation(String userType) throws Exception {
		extent.HeaderChildNode("Downloads screen Empty-state validation as " + userType);
		if (userType.contentEquals("NonSubscribedUser") || userType.contentEquals("SubscribedUser")) {
			String getSelectedTabName;
			System.out.println("\nDownloads screen Empty-state validation as: " + userType);
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			waitTime(3000);
			if (verifyElementDisplayed(AMDHomePage.objDownloadBtn)) {
				extent.extentLogger("Downloads tab",
						"User is navigated to Downloads screen on tapping Downloads button present in the bottom navigation bar");
				logger.info(
						"User is navigated to Downloads screen on tapping Downloads button present in the bottom navigation bar");
			} else {
				extent.extentLoggerFail("Downloads tab", "User fails to navigate to Downloads screen");
				logger.error("User fails to navigate to Downloads screen");
			}
			Back(1);
			click(AMDHomePage.objDownloadBtn, "Downloads tab");

			if (verifyElementExist(AMDDownloadPage.objBrowseToDownloadBtn,
					"Browse to Download CTA in Empty-state screen to download")) {
				extent.extentLogger("Downloads screen",
						"User is navigated to Empty-state screen when no downloaded contents are present");
				logger.info("User is navigated to Empty-state screen when no downloaded contents are present");
			} else {
				extent.extentLoggerFail("Downloads screen",
						"User fails to navigate to Empty-state screen when no downloaded contents are present");
				logger.error("User fails to navigate to Empty-state screen when no downloaded contents are present");
			}
			waitTime(3000);
			verifyElementPresentAndClick(AMDDownloadPage.objBrowseToDownloadBtn,
					"Browse to Download CTA in Empty-state screen");
			waitTime(3000);
			getSelectedTabName = getText(AMDHomePage.objSelectedTab);
			if (getSelectedTabName.equalsIgnoreCase("Home")) {
				extent.extentLogger("Shows tab",
						"Browse to Download button is be tappable in the Empty-state screen to Download the content ");
				logger.info(
						"Browse to Download button is be tappable in the Empty-state screen to Download the contents");
			} else {
				extent.extentLoggerFail("Shows tab", "AMA2-9515 : User fails to tap the 'Browse to Download' button");
				logger.error("AMA2-9515 : User fails to tap the 'Browse to Download' button");
			}
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
		} else {
			logger.info("Empty state screen is not applicable for " + userType);
			extent.extentLogger("Downloads", "Empty state screen is not applicable for " + userType);
		}
	}
/**
 * @implNote This method is to validate the functionality of pause and continue download CTA call out
 * @param userType
 * @throws Exception
 */
	public void validationofDownloadingContent(String userType) throws Exception {
		extent.HeaderChildNode("Validating funtionality of Pause and Continue Download CTA call-Out option");
		if (userType.contentEquals("NonSubscribedUser") || userType.contentEquals("SubscribedUser")) {

			System.out.println("\nValidating funtionality of Pause and Continue Download CTA call-Out option");
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			downloadContent(content2, pVideoQuality, true);
			if (checkElementExist(AMDDownloadPage.objDownloadingText)) {
				extent.extentLoggerPass("Donwloading Content",
						"ZNA-3763: Downloading content is displayed in Downloads screen");
				logger.info("ZNA-3763: Downloading content is displayed in Donwloads screen");
			} else {
				extent.extentLoggerFail("Donwloading Content",
						"Downloading content is not displayed in Downloads screen");
				logger.error("Downloading content is not displayed in Downloads screen");
			}
			verifyElementExist(AMDDownloadPage.objDownloadingText, "'ZNA-3763 : Downloading' text");
			click(AMDDownloadPage.objDownloadingText, "Downloading text");
			verifyElementExist(AMDDownloadPage.objDownloadingCircularBar, "Downloading circular bar");
			click(AMDDownloadPage.objDownloadingCircularBar, "Downloading circular bar");
			if (checkElementExist(AMDDownloadPage.objPauseDownloadoption, "Call out with Pause option")) {
				extent.extentLoggerPass("Pause", "Pause option is displayed when user taps Downloding content");
				logger.info("Pause option is displayed when user taps Downloding content");
			} else {
				extent.extentLoggerFail("Pause", "Pause option is NOT displayed when user taps Downloding content");
				logger.error("Pause option is NOT displayed when user taps Downloding content");
			}
			// waitTime(2000);
			if (checkElementExist(AMDDownloadPage.objCancelDownloadOption, "Call out with Cancel Download option")) {
				extent.extentLoggerPass("Pause", "Cancel Download is displayed when user taps Downloding content");
				logger.info("Cancel Download is displayed when user taps Downloding content");
			} else {
				extent.extentLoggerFail("Pause", "Cancel Download is NOT displayed when user taps Downloding content");
				logger.error("Cancel Download NOT is displayed when user taps Downloding content");
			}
			click(AMDDownloadPage.objPauseDownloadoption, "Pause option");
			verifyElementExist(AMDDownloadPage.objPausedText, "'Paused' text");
			if (checkElementExist(AMDDownloadPage.objPausedBar, "Paused bar")) {
				extent.extentLoggerPass("Pause",
						"User is able to Pause the Downloading content on tapping 'Pause' option");
				logger.info("User is able to Pause the Downloading content on tapping 'Pause' option");
			} else {
				extent.extentLoggerFail("Pause",
						"User is fails to Pause the Downloading content on tapping 'Pause' option");
				logger.error("User fails to Pause the Downloading content on tapping 'Pause' option");
			}
			click(AMDDownloadPage.objPausedBar, "Paused bar");
			verifyElementPresentAndClick(AMDDownloadPage.objContinueOption, "Continue option");
			if (checkElementExist(AMDDownloadPage.objDownloadingCircularBar, "Downloading circular bar")) {
				extent.extentLoggerPass("Re-start", "User is able to re-start the Paused content");
				logger.info("User is able to re-start the Paused content");
			} else {
				extent.extentLoggerFail("Re-start", "User fails to re-start the Paused content");
				logger.error("User fails to re-start the Paused content");
			}
			int totalEpisodesList = getDriver().findElements(AMDDownloadPage.objNoOfEpisodeList).size();
			logger.info("Content Cards: " + totalEpisodesList);
		} else {
			logger.info("Validation of downloading content is not applicable for " + userType);
			extent.extentLogger("Downloads", "Validation of downloading content is not applicable for " + userType);
		}
	}

	public void DownloadContent(String str) throws Exception {
		System.out.println("\nInitiate Download : " + str);
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon2, "Search Icon");
//		verifyElementPresentAndClick(AMDDownloadPage.objSearchIcon, "Search Icon");
		waitTime(3000);
		click(AMDSearchScreen.objSearchEditBox, "Search edit");
		type(AMDSearchScreen.objSearchBoxBar, str, "Search Field");
		waitTime(3000);
		hideKeyboard();
		click(AMDSearchScreen.objSelectFirstEpisodeResult, "Searched Show");
		waitTime(5000);
		verifyElementPresentAndClick(AMDDownloadPage.objDownloadIcon, "Download button");
		verifyElementExist(AMDDownloadPage.objDownloadVideoQualityPopup, "Download video quality Pop up");
		click(AMDDownloadPage.objStartDownloadCTA, "Start Download CTA");
		waitTime(2000);
		Back(1);
		click(AMDHomePage.objDownloadBtn, "Downloads tab");
	}

	/**
	 * @implNote This method is to validate the call out options with Pause all and cancel download CTA
	 * @param userType
	 * @throws Exception
	 */
	public void pauseAllAndCancelDownload(String userType) throws Exception {
		extent.HeaderChildNode("Validating Call-Out options with Pause All and Cancel Download CTA");
		if (userType.contentEquals("NonSubscribedUser") || userType.contentEquals("SubscribedUser")) {

			System.out.println("\nValidating Call-Out options with Pause All and Cancel Download CTA");

			verifyElementPresentAndClick(AMDDownloadPage.objDownloadingCircularBar, "Downloading Icon");
			verifyElementExist(AMDDownloadPage.objCallOutwithPauseAll, "Call out with Pause and Cancel Download CTAs");
			verifyElementExist(AMDDownloadPage.objPauseAllOption, "Pause All CTA");
			verifyElementExist(AMDDownloadPage.objCancelDownloadOption, "Cancel Download CTA");
			click(AMDDownloadPage.objPauseAllOption, "Pause All CTA");
			if (checkElementExist(AMDDownloadPage.objPausedText, "'Paused' text")) {
				extent.extentLoggerPass("Pause All", "Queued contents are Paused and in Paused state");
				logger.info("Queued contents are Paused and in Paused state");
			}
			click(AMDDownloadPage.objPausedBar, "Paused icon");
			click(AMDDownloadPage.objRetryCTA, "Continue option");
			int totalEpisodesList = getDriver().findElements(AMDDownloadPage.objNoOfEpisodeList).size();
			logger.info(totalEpisodesList);
			waitTime(3000);
			click(AMDDownloadPage.objDownloadingCircularBar, "Downloading Icon");
			waitTime(5000);
			click(AMDDownloadPage.objCancelDownloadOption, "Cancel Download CTA");
			waitTime(5000);
			// Back(1);
			int totalEpisodesList2 = getDriver().findElements(AMDDownloadPage.objNoOfEpisodeList).size();
			logger.info(totalEpisodesList2);
			if (totalEpisodesList2 < totalEpisodesList) {
				extent.extentLoggerPass("Cancel Download", "Downloading content is deleted");
				logger.info("Downloading content is deleted");
			} else {
				extent.extentLoggerFail("Cancel Download",
						"Downloading content is not deleted on tapping Cancel Download CTA");
				logger.error("Downloading content is not deleted on tapping Cancel Download CTA");
			}
			Back(1);
		} else {
			logger.info("Pause All and Cancel Downlaod is not applicable for " + userType);
			extent.extentLogger("Downloads", "Pause All and Cancel Downlaod is not applicable for " + userType);
		}
	}
/**
 * @implNote This method is to validate the Downloads section page
 * @throws Exception
 */
	public void DownloadsSection() throws Exception {
		extent.HeaderChildNode("Validating Downloads Page section");
		System.out.println("\nValidating Downloads Page section");

		verifyElementExist(AMDDownloadPage.objTitleoftheShow, "Title of the show");
		System.out.println("Title of the Show is " + getText(AMDDownloadPage.objTitleoftheShow));
		logger.info("Title of the Show is " + getText(AMDDownloadPage.objTitleoftheShow));
		extent.extentLoggerPass("Title", "Title of the Show is " + getText(AMDDownloadPage.objTitleoftheShow));
		verifyElementExist(AMDDownloadPage.objNoOfEpisodes, "Number of Episodes");
		System.out.println("Number of Episodes are " + getText(AMDDownloadPage.objNoOfEpisodes));
		logger.info("Number of Episodes are " + getText(AMDDownloadPage.objNoOfEpisodes));
		extent.extentLoggerPass("Episodes", "Number of Episodes are " + getText(AMDDownloadPage.objNoOfEpisodes));
		verifyElementExist(AMDDownloadPage.objSizeOfEpiodes, "Size of Episodes");
		System.out.println("Size of Episodes is " + getText(AMDDownloadPage.objSizeOfEpiodes));
		logger.info("Size of Episodes is " + getText(AMDDownloadPage.objSizeOfEpiodes));
		extent.extentLoggerPass("Size", "Size of Episodes is " + getText(AMDDownloadPage.objSizeOfEpiodes));
		verifyElementExist(AMDDownloadPage.objRightArrowinDownloads, "Right Arrow");
		verifyElementExist(AMDDownloadPage.objThumbnailOfShows, "Thumbnail of the Show");
		waitTime(2000);
		click(AMDDownloadPage.objTitleoftheShow, "Title of the show");
		if (checkElementExist(AMDDownloadPage.objDownloadMoreCTA, "Download More CTA")) {
			extent.extentLoggerPass("Download More", "Show name is Tappable");
			logger.info("Show name is Tappable");
		} else {
			extent.extentLoggerFail("Download More", "Show name NOT is Tappable");
			logger.error("Show name is NOT Tappable");
		}
		Back(1);
		click(AMDDownloadPage.objThumbnailOfShows, "Thumbnail of the Show");
		if (checkElementExist(AMDDownloadPage.objDownloadMoreCTA, "Download More CTA")) {
			extent.extentLoggerPass("Download More", "Thumbnail is Tappable");
			logger.info("Thumbnail is Tappable");
		} else {
			extent.extentLoggerFail("Download More", "Thumbnail is NOT Tappable");
			logger.error("Thumbnail is NOT Tappable");
		}
		Back(1);
		click(AMDDownloadPage.objRightArrowinDownloads, "Right Arrow");
		if (checkElementExist(AMDDownloadPage.objDownloadMoreCTA, "Download More CTA")) {
			extent.extentLoggerPass("Download More", "Right Arrow Tappable");
			logger.info("Right Arrow is Tappable");
		} else {
			extent.extentLoggerFail("Download More", "Right Arrow Tappable");
			logger.error("Right Arrow is Tappable");
		}
	}
/**
 * @implNote This method is to validate the new episode displayed on Download screen
 * @throws Exception
 */
	public void LatestEpisode() throws Exception {
		waitTime(3000);
		extent.HeaderChildNode("Validating New Episode");
		System.out.println("Validating New Episode");
		if (checkElementExist(AMDDownloadPage.objNewEpisodeContent, "New Episode on top")) {
			extent.extentLogger("New Epiosde on top ", "New Episode on top is displayed");
			logger.info("New Episode on top is displayed");
		} else {
			extent.extentLoggerFail("New Epiosde on top ", "New Episode on top is NOT displayed");
			logger.error("New Episode on top is NOT displayed");
		}
		String titleOfNewEpisode = getText(AMDDownloadPage.objtitleofNewEpisode);
		System.out.println(titleOfNewEpisode);
		if (checkElementExist(AMDDownloadPage.objNewEpisodeTag, "'New Episode' text")) {
			extent.extentLogger("New Epiosde text", "New Episode text is displayed");
			logger.info("New Episode text is displayed");
		} else {
			extent.extentLoggerFail("New Epiosde text", "New Episode text is NOT displayed");
			logger.error("New Episode text is NOT displayed");
		}
		if (checkElementExist(AMDDownloadPage.objThumbnailOfLatestEpisode, "Thumbnail of Latest Episode")) {
			extent.extentLogger("Thumbnail of Latest Episode", "Thumbnail of Latest Episode is displayed");
			logger.info("Thumbnail of Latest Episode is displayed");
		} else {
			extent.extentLoggerFail("Thumbnail of Latest Episode", "Thumbnail of Latest Episode NOT is displayed");
			logger.error("Thumbnail of Latest Episode is NOT displayed");
		}
		verifyElementExist(AMDDownloadPage.objDownloadNowbbtn, "Download Now button");
		verifyElementExist(AMDDownloadPage.objClosebtn, "Cancel button (X)");
		waitTime(2000);
		verifyElementPresentAndClick(AMDDownloadPage.objDownloadNowbbtn, "Download Now button");
		if (checkElementExist(AMDDownloadPage.objDownloadVideoQualityPopup, "Download popup")) {
			extent.extentLogger("Download Now ", "Download Now button is functional");
			logger.info("Download Now button is functional");
		} else {
			extent.extentLoggerFail("Download Now ", "Download Now button is NOT functional");
			logger.error("Download Now button is NOT functional");
		}
		Back(1);
		click(AMDDownloadPage.objClosebtn, "Cancel button (X)");
		if ((checkElementExist(AMDDownloadPage.objNewEpisodeTag, "New Episode")) == false) {
			extent.extentLogger("Cancel button", "Cancel button is Tappable");
			logger.info("Cancel button is Tappable");
		} else {
			extent.extentLoggerFail("Cancel button", "Cancel button is NOT Tappable");
			logger.error("Cancel button is NOT Tappable");
		}
		if ((checkElementExist(AMDDownloadPage.objThumbnailOfLatestEpisode, "Latest Episode")) == false) {
			extent.extentLogger("New Episode", "Latest Epiosde is not displayed on the top");
			logger.info("Latest Epiosde is not displayed on the top");
		} else {
			extent.extentLoggerFail("New Episode", "Latest Epiosde is not displayed on the top");
			logger.error("Latest Epiosde is not displayed on the top");
		}
		waitTime(2000);
		Back(1);
		click(AMDDownloadPage.objRightArrowinDownloads, "Right Arrow");
		waitTime(2000);
		verifyElementPresentAndClick(AMDDownloadPage.objDownloadNowbbtn, "Download Now button");
		click(AMDDownloadPage.objDownloadVideoQualityPopup, "Download video quality Pop up");
		click(AMDDownloadPage.objStartDownloadCTA, "Start Download CTA");
		waitTime(2000);
		verifyElementExist(AMDDownloadPage.objDownloadingCircularBar, "Downloading Icon");
		Back(1);
		verifyElementExist(AMDDownloadPage.objDownloadingText, "Downloading text");
		click(AMDDownloadPage.objDownloadingText, "Downloading text");
		if (checkElementExist(AMDDownloadPage.objEpisodesList, "Episoed List")) {
			extent.extentLogger("Episodes list", "Episodes list is displayed");
			logger.info("Episodes list is displayed");
		} else {
			extent.extentLoggerFail("Episodes list", "Episodes list is NOT displayed");
			logger.error("Episodes list is NOT displayed");
		}
		if ((checkElementExist(AMDDownloadPage.objClosebtn, "Cross (X) icon")) == false) {
			extent.extentLogger("Close button",
					"Cross (X) icon is not displayed when New Episode download is in progress");
			logger.info("Cross (X) icon is not displayed when New Episode download is in progress");
		} else {
			extent.extentLogger("Close button", "Cross (X) icon is displayed when New Episode download is in progress");
			logger.info("Cross (X) icon is displayed when New Episode download is in progress");
		}
		if (checkElementExist(AMDDownloadPage.objtitleofNewEpisode, titleOfNewEpisode)) {
			extent.extentLogger("Episodes list", "New Episode on top of the screen is displayed");
			logger.info("New Episode on top is displayed");
		} else {
			extent.extentLoggerFail("Episodes list", "New Episode on top of the screen is NOT displayed");
			logger.error("New Episode on top is NOT displayed");
		}
	}
/**
 * @implNote This method is to validate the Downloads screen in Offline mode
 * @param userType
 * @throws Exception
 */
	public void downloadingOffline(String userType) throws Exception {
		extent.HeaderChildNode("Validation Downloads in Offline mode");
		if (userType.contentEquals("NonSubscribedUser") || userType.contentEquals("SubscribedUser")) {

			System.out.println("\nValidation Downloads in Offline mode");

			// *** Verifying download in offline Mode
			setWifiConnectionToONOFF("Off");

			if (getOEMName.equalsIgnoreCase("Sony")) {
				wifi_TurnOFFnON();
				// waitTime(2000);
			}
			waitForElementDisplayed(AMDDownloadPage.objDownloadFailedText, 2000);
			verifyElementExist(AMDDownloadPage.objDownloadFailedText, "Download Failed text");
			verifyElementExist(AMDDownloadPage.objDownloadErrorText, "Download Error text");
			click(AMDDownloadPage.objDownloadErrorText, "Download Error text");
			verifyElementExist(AMDDownloadPage.objRetryCTA, "Retry CTA Call-Out");
			verifyElementExist(AMDDownloadPage.objCancelDownloadOption, "Cancel Download CTA Call-Out");

			setWifiConnectionToONOFF("ON");
			if (getOEMName.equalsIgnoreCase("Sony")) {
				wifi_TurnOFFnON();
				waitTime(7000);
				// waitForElementDisplayed(AMDDownloadPage.objRetryCTA, 2000);
			}
			// Commenting these line as Downloads should continue after connecting to the
			// Internet
			// click(AMDDownloadPage.objRetryCTA, "Call out with Retry CTA");
			// waitTime(5000);
			if (checkElementExist(AMDDownloadPage.objDownloadingCircularBar, "Downloading circular bar")) {
				extent.extentLoggerPass("Re-start", "Downloading content resumed post reconnecting back to Network");
				logger.info("Downloading content resumed post reconnecting back to Network");
			} else {
				extent.extentLoggerFail("Re-start",
						"[Jira-Id: AMA2-9690] : Download fails to resume from paused state post reconnecting back to Network");
				logger.error(
						"[Jira-Id: AMA2-9690] : Download fails to resume from paused state post reconnecting back to Network");
			}
		} else {
			logger.info("Download offline validation is not applicable for " + userType);
			extent.extentLogger("Downloads", "Download offline validation is not applicable for " + userType);
		}
	}
/**
 * @implNote This method is to verify the Downloads for Subscribe user which is about to expire the pack in 15 or less than 15 days
 * @throws Exception
 */
		
	public void verifyDownloadsSubscribeUser() throws Exception {
		extent.HeaderChildNode("Verify the download screen");
		System.out.println("\nVerify the download screen");
		verifyElementExist(AMDHomePage.objDownloadBtn, "Downloads tab at the bottom navigation bar");
		click(AMDHomePage.objDownloadBtn, "Downloads tab");
		waitTime(2000);
		String SubscriptionExpierstext = getDriver().findElement(AMDDownloadPage.objPackExpiredText).getText();
		System.out.println(SubscriptionExpierstext);
		if (SubscriptionExpierstext.equalsIgnoreCase("Your Subscription expires in 10 days")) {
			logger.info("Your Premium subscription expires in XX days text message is displayed");
			extent.extentLogger("Download Screen",
					"Your Premium subscription expires in XX days text message is displayed");
		} else {
			logger.error("Your Premium subscription expires in XX days text message is displayed");
			extent.extentLoggerFail("Download Screen",
					"Your Premium subscription expires in XX days text message is displayed");
		}
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon2, "Search Icon");
		waitTime(3000);
		click(AMDSearchScreen.objSearchEditBox, "Search edit");
		type(AMDSearchScreen.objSearchBoxBar, "Dil Bechara - Title Track", "Search Field");
		waitTime(5000);
		hideKeyboard();
		click(AMDDownloadPage.objSearchedContent, "Searched Show");
		waitTime(3000);
		verifyElementPresentAndClick(AMDDownloadPage.objDownloadIcon, "Download button");
		waitTime(2000);
		click(AMDDownloadPage.objDownloadVideoQualityPopup, "Download video quality Pop up");
		click(AMDDownloadPage.objStartDownloadCTA, "Start Download CTA");
		waitTime(1000);
		Back(1);
		click(AMDHomePage.objDownloadBtn, "Downloads tab");
		verifyElementExist(AMDDownloadPage.objvideostab, "Videos tab in Downloads landing screen ");
		waitTime(2000);
		verifyElementExist(AMDDownloadPage.objDownloadedTickMark, "Tick Mark on the downloaded content");
		click(AMDDownloadPage.objDownloadedTickMark, "Tick Mark on the downloaded content");
		verifyElementExist(AMDDownloadPage.objDeleteDownloadOption, "Delete downloaded content");
		click(AMDDownloadPage.objDeleteDownloadOption, "Delete downloaded content");
		waitTime(4000);
		if (verifyElementExist(AMDDownloadPage.objDownloadTextIcon, "Download Icon")) {
			logger.info("Content is deleted by tapping on delete download");
			extent.extentLogger("Download Screen", "Content is deleted by tapping on delete download");
		} else {
			logger.error("Content is deleted by tapping on delete download");
			extent.extentLoggerFail("Download Screen", "Content is deleted by tapping on delete download");
		}
		verifyElementExist(AMDDownloadPage.objRemaindMeLater, "Remaind Me Later");
		click(AMDDownloadPage.objRemaindMeLater, "Remaind Me Later");
		if (checkElementExist(AMDDownloadPage.objPackExpiredText, "Premium pack expires Text")) {
			logger.info("Premium pack expires text is not displayed by tapping on Remaind Me Later");
			extent.extentLogger("Download Screen",
					"Premium pack expires text is not displayed by tapping on Remaind Me Later");
		} else {
			logger.error("Premium pack expires text is not displayed by tapping on Remaind Me Later");
			extent.extentLoggerFail("Download Screen",
					"Premium pack expires text is not displayed by tapping on Remaind Me Later");
		}

	}
/**
 * @implNote This method is to verify the Download landing screen
 * @param userType
 * @throws Exception
 */
	public void downloadScreenValidation(String userType) throws Exception {
		System.out.println("\nDownload Landing Screen Validation");
		if (userType.contentEquals("NonSubscribedUser") || userType.contentEquals("SubscribedUser")) {

			emptystateScreenValidation(userType);
			verifyDownloadsWithSingleTire(userType);
			verifyMovieContentInDownloadsScreen(userType, pMovie, pVideoQuality);
			validationofDownloadingContent(userType);

			int totalEpisodesList = getDriver().findElements(AMDDownloadPage.objNoOfEpisodeList).size();
			logger.info("Content Cards: " + totalEpisodesList);
			// --- Download check in Offline Mode
			downloadingOffline(userType);

			extent.HeaderChildNode("Verify Deleted Content from Downloads screen");
			System.out.println("\nVerify Deleted Content from Downloads screen");
			waitTime(4000);
			click(AMDDownloadPage.objDownloadingCircularBar, "Downloading circular bar");
			waitTime(5000);
			click(AMDDownloadPage.objCancelDownloadOption, "Cancel Download CTA");
			waitTime(6000);
			int totalEpisodesList2 = getDriver().findElements(AMDDownloadPage.objNoOfEpisodeList).size();
			logger.info("Content Cards: " + totalEpisodesList2);
			if (totalEpisodesList != totalEpisodesList2) {
				extent.extentLoggerPass("Cancel Download", "Downloading content is deleted");
				logger.info("Downloading content is deleted");
			} else {
				extent.extentLoggerFail("Cancel Download", "Downloading content is NOT deleted");
				logger.error("Downloading content is NOT deleted");
			}
			waitTime(2000);
			Back(1);
			String getProperty1 = getAttributValue("enabled", AMDHomePage.objDownloadBtn);
			if (getProperty1.equalsIgnoreCase("true")) {
				extent.extentLoggerPass("Downloads Tab",
						"Downloads active page without content downloading is displayed");
				logger.info("Downloads active page without content downloading is displayed");
			} else {
				extent.extentLoggerFail("Downloads tab",
						"No Downloads active page without content downloading is NOT displayed");
				logger.error("No Downloads active page without content downloading is NOT displayed");
			}

			extent.HeaderChildNode("Verify multiple downloading content in Downloads screen");
			System.out.println("\nVerify multiple downloading content in Downloads screen");
			Back(1);
			// **** Download Episode content3
			downloadContent(content3, pVideoQuality, true);
			if (checkElementExist(AMDDownloadPage.objDownloadingText)) {
				extent.extentLoggerPass("Downloading Content", "Downloading content is displayed in Downloads screen");
				logger.info("Downloading content is displayed in Donwloads screen");
			} else {
				extent.extentLoggerFail("Downloading Content",
						"Downloading content is not displayed in Downloads screen");
				logger.error("Downloading content is not displayed in Downloads screen");
			}
			Back(1);
			// **** Download Episode content4
			downloadContent(content4, "Better", true);
			if (checkElementExist(AMDDownloadPage.objDownloadingText)) {
				extent.extentLoggerPass("Donwloading Content", "Downloading content is displayed in Downloads screen");
				logger.info("Downloading content is displayed in Donwloads screen");
			} else {
				extent.extentLoggerFail("Donwloading Content",
						"Downloading content is not displayed in Downloads screen");
				logger.error("Downloading content is not displayed in Downloads screen");
			}
			if (checkElementExist(AMDDownloadPage.objShowsDownloadPage)) {
				extent.extentLoggerPass("ShowsList", "Shows list is displayed in the upfront tab");
				logger.info("Shows list is displayed in the upfront tab");
			} else {
				extent.extentLoggerFail("ShowsList", "Shows list is NOT displayed in the upfront tab");
				logger.error("Shows list is NOT displayed in the upfront tab");
			}
			waitTime(3000);
			click(AMDDownloadPage.objDownloadingText, "Downloading text");
			if (checkElementExist(AMDDownloadPage.objDownloadingCircularBar)) {
				extent.extentLoggerPass("Queued", "User is able to Download only one content at a time");
				logger.info("User is able to Download only one content at a time");
			} else {
				extent.extentLoggerFail("Queued", "User fails to Download only one content at a time");
				logger.error("User fails to Download only one content at a time");
			}
			if (checkElementExist(AMDDownloadPage.objDownloadingCircularBar, "Downloding icon")) {
				extent.extentLoggerPass("Queued", "Contents are Queued up in a line ");
				logger.info("Contents are Queued up in a line ");
			} else {
				extent.extentLoggerFail("Queued", "Contents are NOT Queued up in a line ");
				logger.error("Contents are NOT Queued up in a line ");
			}
			pauseAllAndCancelDownload(userType);
			click(AMDDownloadPage.objPausedBar, "Paused icon");
			click(AMDDownloadPage.objRetryCTA, "Continue option");
			waitTime(2000);
			Back(2);

			// **** Download Episode content5
			downloadContent(content5, pVideoQuality, true);
			waitTime(1000);
			click(AMDDownloadPage.objDownloadingText, "Downloading text");
			if (checkElementExist(AMDDownloadPage.objDownloadingCircularBar)) {
				extent.extentLoggerPass("Downloading", "Incomplete Downloads are available");
				logger.info("Incomplete Downloads are available");
			}
			click(AMDDownloadPage.objDownloadingCircularBar, "Downloading Icon");
			if (checkElementExist(AMDDownloadPage.objCallOutwithPauseAll)) {
				extent.extentLoggerPass("Downloading", "Incomplete Downloads are NOT allowed to be Play");
				logger.info("Incomplete Downloads are NOT allowed to be Play");
			} else {
				extent.extentLoggerFail("Downloading", "Incomplete Downloads are allowed to be Play");
				logger.error("Incomplete Downloads are allowed to be Play");
			}
//			switchNetworkWifiToData();
			Back(3);

			// **** Download Episode content6
			downloadContent(content6, "Best", true);
			DownloadsSection();
			LatestEpisodeOnTheTop();
			click(AMDHomePage.HomeIcon, "Home Icon");
		}
		if (userType.contentEquals("SubscribedUser")) {
			zNALogoutMethod();
			validateSubscriptionExpireBanner(userType);
		}
	}

	/**
	 * @implNote This method will initiate the download- to download the content
	 * @param contentName
	 * @param Quality
	 * @param checkAlwaysAskOption
	 * @throws Exception
	 */
	public void downloadContent(String contentName, String Quality, boolean checkAlwaysAskOption) throws Exception {
		System.out.println("\nInitiate Download : " + contentName);
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon2, "Search Icon");
		waitTime(3000);
		click(AMDSearchScreen.objSearchEditBox, "Search edit");
		type(AMDSearchScreen.objSearchBoxBar, contentName, "Search Field");
		waitTime(3000);
		hideKeyboard();
		click(AMDDownloadPage.objsearchresultFirst, "Searched Show");
		waitForElementDisplayed(AMDDownloadPage.objPauseIconOnPlayer, 2000);
		waitTime(3000);
		verifyElementPresentAndClick(AMDDownloadPage.objDownloadIcon, "Download button");
		waitTime(2000);
		downloadVideoQualityPopUp(Quality, checkAlwaysAskOption);
		waitTime(3000);
		Back(1);
		click(AMDHomePage.objDownloadBtn, "Downloads tab");
	}
/**
 * @implNote This method is to validate the Download popup video quality poup
 * @param Quality
 * @param checkAlwaysAsk
 * @throws Exception
 */
	public void downloadVideoQualityPopUp(String Quality, boolean checkAlwaysAsk) throws Exception {

		verifyElementExist(AMDDownloadPage.objDownloadVideoQualityPopup, "Download Video Quality PopUp screen");
		click(AMDDownloadPage.objDownloadQualityOptions(Quality), Quality);
		waitTime(3000);
		swipeUntilFindElement(AMDDownloadPage.objStartDownloadCTA, "UP");
		click(AMDDownloadPage.objStartDownloadCTA, "Start Download CTA");
	}

	/**
	 * @implNote This method is to switching the network from Wifi to Data network
	 * @throws Exception
	 */
	public void switchNetworkWifiToData() throws Exception {
		extent.HeaderChildNode("Validating Downloading resumes after switching network");
		System.out.println("\nValidating Downloading resumes after switching network");

		// Switching Network from Wifi -> Data
		Runtime.getRuntime().exec("adb shell svc wifi disable");
		Runtime.getRuntime().exec("adb shell svc data enable");
		if (checkElementExist(AMDDownloadPage.objDownloadingCircularBar, "Downloading Icon")) {
			extent.extentLogger("Downloading", "User is able to continue the download on shuffling wifi to data");
			logger.info("User is able to continue the download on shuffling wifi to data");
		}
		waitTime(2000);
		// Switching Network from Data -> Wifi
		Runtime.getRuntime().exec("adb shell svc data disable");
		Runtime.getRuntime().exec("adb shell svc wifi enable");
		if (checkElementExist(AMDDownloadPage.objDownloadingCircularBar, "Downloading Icon")) {
			extent.extentLogger("Downloading", "User is able to continue the download on shuffling data to wifi");
			logger.info("User is able to continue the download on shuffling wifi to data");
		}
	}
/**
 * @implNote This method is to validate the Latest episode displayed on top of Downloading screen of any episode content
 * @throws Exception
 */
	public void LatestEpisodeOnTheTop() throws Exception {
		extent.HeaderChildNode("Validating New Episode Overlay on the Top");
		System.out.println("\nValidating New Episode Overlay on the Top");

		if (checkElementExist(AMDDownloadPage.objNewEpisodeContent)) {
			extent.extentLoggerPass("New Epiosde on top ", "New Episode content card is displayed on the Top");
			logger.info("New Episode on top is displayed");
		} else {
			extent.extentLoggerWarning("New Epiosde on top ", "New Episode content card is NOT displayed on the Top");
			logger.info("New Episode on top is NOT displayed");
		}

		if (checkElementExist(AMDDownloadPage.objNewEpisodeTag)) {
			String titleOfNewEpisode = getText(AMDDownloadPage.objtitleofNewEpisode);
			extent.extentLoggerPass("New Epiosde title", "Episode title is: " + titleOfNewEpisode);
			logger.info("Episode title is: " + titleOfNewEpisode);
		} else {
			extent.extentLoggerWarning("New Epiosde title", "Episode title is NOT displayed");
			logger.error("Episode title is NOT displayed");
		}

		if (checkElementExist(AMDDownloadPage.objThumbnailOfLatestEpisode)) {
			extent.extentLoggerPass("Thumbnail of Latest Episode", "Thumbnail Image of Latest Episode is displayed");
			logger.info("Thumbnail of Latest Episode is displayed");
		} else {
			extent.extentLoggerWarning("Thumbnail of Latest Episode", "Thumbnail of Latest Episode NOT is displayed");
			logger.error("Thumbnail Image of Latest Episode is NOT displayed");
		}
		verifyElementExist(AMDDownloadPage.objDownloadNowbbtn, "Download Now CTA");
		verifyElementPresentAndClick(AMDDownloadPage.objClosebtn, "Close button (X)");
		Back(1);
		click(AMDDownloadPage.objRightArrowinDownloads, "Right Arrow");
		if (checkElementExist(AMDDownloadPage.objDownloadNowbbtn)) {
			extent.extentLoggerPass("Latest Epiosde", "Latest Epiosde is displayed on the top");
			logger.info("Latest Epiosde is not displayed on the top");
		} else {
			extent.extentLoggerWarning("Latest Epiosde", "Latest Epiosde is NOT displayed on the top");
			logger.error("Latest Epiosde is displayed on the top");
		}
		Back(1);
	}
/**
 * @implNote This method will download the movie content and validate downloading screen
 * @param userType
 * @param MovieName
 * @param Quality
 * @throws Exception
 */
	public void verifyMovieContentInDownloadsScreen(String userType, String MovieName, String Quality)
			throws Exception {
		extent.HeaderChildNode("Validating the downloading content in Movies tab");
		if (userType.contentEquals("NonSubscribedUser") || userType.contentEquals("SubscribedUser")) {

			System.out.println("\nValidating the downloading content in Movies tab");
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			downloadContent(MovieName, Quality, true);
			String getPropertyValue = getAttributValue("enabled", AMDDownloadPage.objmoviestab);
			if (getPropertyValue.equalsIgnoreCase("true")) {
				extent.extentLoggerPass("MOVIES Tab is highlighted",
						"User is taken to MOVIES tab by default, since download is in-progress..");
				logger.info("User is taken to MOVIES tab by default, since download is in-progress..");
			} else {
				extent.extentLoggerFail("MOVIES Tab",
						"User is NOT taken to MOVIES tab by default, even after initiating Movie content download");
				logger.error(
						"User is NOT taken to MOVIES tab by default, even after initiating Movie content download");
			}

			if (checkElementExist(AMDDownloadPage.objDownloadingCircularBar)) {
				String getMovieName = getText(AMDDownloadPage.objDownloadedContent);
				click(AMDDownloadPage.objDownloadedContent, getMovieName);
				click(AMDDownloadPage.objCancelDownloadOption, "Cancel CTA");
				extent.extentLoggerPass("Downloading Movie",
						getMovieName + " movie is downloading in the Downloads screen");
				logger.info(getMovieName + " movie is downloading in Downloads screen");
			} else {
				extent.extentLoggerFail("Donwloading Movie",
						"Downloading " + MovieName + " is NOT displayed in the Downloads screen");
				logger.error("Downloading " + MovieName + " is NOT displayed in Downloads screen");
			}
		} else {
			logger.info("Movie content Downloads validation is not applicable for " + userType);
			extent.extentLogger("Downloads", "Movie content Downloads validation is not applicable for " + userType);
		}
	}

	/**
	 * Author : Bhavana Module : Download Screen Validation
	 * @implNote This method is verify the UI/UX of Download landing screen
	 */
	public void downloadScreenUIUXValidation(String userType) throws Exception {
		extent.HeaderChildNode("Verify the UI/UX of Download landing screen as " + userType);
		System.out.println("\nVerify the UI/UX of Download landing screen as " + userType);
		waitTime(5000);
		verifyElementPresent(AMDHomePage.objDownloadBtn, "Downloads tab at the bottom navigation bar");
		click(AMDHomePage.objDownloadBtn, "Downloads tab");
		waitTime(3000);

		// Downloads Header text has been removed

//		if((checkElementExist(AMDDownloadPage.objDwnloadsHeader)) == true ) {
//			extent.extentLoggerPass("Downloads", "Downloads header at the top on center of the screen is displayed ");
//			logger.info("Downloads header at the top on center of the screen is displayed");
//		}else {
//			extent.extentLoggerFail("Downloads", "Downloads header at the top on center of the screen is NOT  displayed [AMA2-3460]");
//			logger.error("Downloads header at the top on center of the screen is NOT displayed [AMA2-3460]");
//		}
//		verifyElementPresent(AMDDownloadPage.objDwnloadsHeader, "Downloads header at the top on center of the screen");
		verifyElementExist(AMDDownloadPage.objshowstab, "Shows tab in Downloads landing screen");
		verifyElementExist(AMDDownloadPage.objmoviestab, "Movies tab in Downlaods landing screen");
		verifyElementExist(AMDDownloadPage.objvideostab, "Videos tab in Downloads landing screen ");
		String getPropertyValue = getAttributValue("enabled", AMDDownloadPage.objshowstab);
		if (getPropertyValue.equalsIgnoreCase("true")) {
			extent.extentLoggerPass("Shows tab", "Shows tab is by default highlighted");
			logger.info("Shows tab is by default highlighted");
		} else {
			extent.extentLoggerFail("Shows tab", "Shows tab fails to highlight by default");
			logger.error("Shows tab fails to highlight by default");
		}
		click(AMDDownloadPage.objshowstab, "Shows tab in Downloads landing screen");
		verifyElementExist(AMDDownloadPage.objBrowseToDownloadBtn, "Browse to Download CTA under Shows tab");
		click(AMDDownloadPage.objmoviestab, "Movies tab in Downlaods landing screen");
		verifyElementExist(AMDDownloadPage.objBrowseToDownloadBtn, "Browse to Download CTA under Movies tab");
		click(AMDDownloadPage.objvideostab, "Videos tab in Downloads landing screen");
		verifyElementExist(AMDDownloadPage.objBrowseToDownloadBtn, "Browse to Download CTA under Videos tab");
	}
/**
 * @implNote This method will validate the functionality of Browse to Download CTA on Downloads screen
 * @param userType
 * @throws Exception
 */
	public void BrowseToDownloadFunctionality(String userType) throws Exception {
		extent.HeaderChildNode("Verify Browse to Download CTA functionality as " + userType);
		System.out.println("\nVerify Browse to Download CTA functionality as " + userType);
		String getSelectedTabName;
		click(AMDDownloadPage.objshowstab, "Shows tab in Downloads landing screen");
		click(AMDDownloadPage.objBrowseToDownloadBtn, "Browse to Download CTA under Shows tab");
		waitTime(3000);

		getSelectedTabName = getText(AMDHomePage.objSelectedTab);
		if (getSelectedTabName.equalsIgnoreCase("TV Shows")) {
			extent.extentLoggerPass("Shows tab", "User is navigated to TV Shows landing page");
			logger.info("User is navigated to TV Shows landing page");
		} else {
			extent.extentLoggerFail("Shows tab",
					"AMA2-9515 : User fails to navigate to Shows landing page and instead displayed : "
							+ getSelectedTabName + " landing screen");
			logger.error("AMA2-9515 : User fails to navigate to Shows landing page and instead displayed : "
					+ getSelectedTabName + " landing screen");
		}
		click(AMDHomePage.objDownloadBtn, "Downloads tab");
		verifyElementPresentAndClick(AMDDownloadPage.objmoviestab, "Movies tab in Downlaods landing screen");
		verifyElementPresentAndClick(AMDDownloadPage.objBrowseToDownloadBtn, "Browse to Download CTA under Movies tab");
		waitTime(3000);
		getSelectedTabName = getText(AMDHomePage.objSelectedTab);
		if (getSelectedTabName.equalsIgnoreCase("Movies")) {
			extent.extentLoggerPass("Movies tab", "User is navigated to Movies landing page");
			logger.info("User is navigated to Movies landing page");
		} else {
			extent.extentLoggerFail("Movies tab",
					"User fails to navigate to Movies landing page and instead displayed : " + getSelectedTabName
							+ " landing screen");
			logger.error("User fails to navigate to Movies landing page and instead displayed : " + getSelectedTabName
					+ " landing screen");
		}
		click(AMDHomePage.objDownloadBtn, "Downloads tab");
		verifyElementPresentAndClick(AMDDownloadPage.objvideostab, "Videos tab in Downloads landing screen");
		verifyElementPresentAndClick(AMDDownloadPage.objBrowseToDownloadBtn, "Browse to Download CTA under Videos tab");
		waitTime(3000);
		getSelectedTabName = getText(AMDHomePage.objSelectedTab);
		if (getSelectedTabName.equalsIgnoreCase("Videos")) {
			extent.extentLoggerPass("Videos tab", "User is navigated to videos landing page");
			logger.info("User is navigated to Videos landing page");
		} else {
			extent.extentLoggerFail("Movies tab",
					"[ZNA-8426] User fails to navigate to Videos landing page and instead displayed : "
							+ getSelectedTabName + " landing screen");
			logger.error("[ZNA-8426] User fails to navigate to Videos landing page and instead displayed : "
					+ getSelectedTabName + " landing screen");
		}
	}

	/** 
	 * @implNote This method is to Logout from the application
	 * @throws Exception
	 */
	public void zNALogoutMethod() throws Exception {
		verifyElementExist(AMDHomePage.objHomeTab, "Home tab");
		verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
		waitTime(5000);
		PartialSwipe("UP", 3);
		verifyElementPresentAndClick(AMDHomePage.objLogout, "Logout");
		verifyElementPresentAndClick(AMDHomePage.objLogoutPopUpLogoutButton, "Logout button");
		verifyElementPresentAndClick(AMDHomePage.HomeIcon, "Home Icon");
	}
/**
 * @implNote This method is to validate the Downloads screen and content playback of Downloaded video
 * @param userType
 * @throws Exception
 */
	public void verifyDownloadsWithSingleTire(String userType) throws Exception {
		extent.HeaderChildNode(
				"Validating Video DownloadScreen and Content playback of downloaded Video with Single tier content");
		if (userType.contentEquals("NonSubscribedUser") || userType.contentEquals("SubscribedUser")) {

			System.out.println(
					"\nValidating Video DownloadScreen and Content playback of downloaded Video with Single tier content");

			// verifyElementPresentAndClick(AMDSearchScreen.objDownloadsOption, "Downloading
			// Icon");
			waitTime(2000);
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			downloadContent(content1, "Good", true);
			waitTime(4000);
			String DownloadedContentText = getDriver().findElement(AMDDownloadPage.objDownloadedVideoContent).getText();
			System.out.println(DownloadedContentText);
			if (DownloadedContentText.contains(content1)) {
				logger.info("Downloaded Video content is displayed in the Upfront screen of the Videos Tab");
				extent.extentLoggerPass("Download Screen",
						"Downloaded Video content is displayed in the Upfront screen of the Videos Tab");
			} else {
				logger.error("Downloaded Video content is NOT displayed in the Upfront screen of the Videos Tab");
				extent.extentLoggerFail("Download Screen",
						"Downloaded Video content is NOT displayed in the Upfront screen of the Videos Tab");
			}
			Back(1);
			waitTime(3000);
			click(AMDHomePage.objDownloadBtn, "Downloading Icon");
			String getPropertyValue = getAttributValue("enabled", AMDDownloadPage.objvideostab);
			if (getPropertyValue.equalsIgnoreCase("true")) {
				extent.extentLoggerPass("Videos tab",
						"Videos tab is by default highlighted, User is taken to VIDEOS tab by default, hence Shows and Movies tab do not have any downloaded content");
				logger.info(
						"Videos tab is by default highlighted, User is taken to VIDEOS tab by default, hence Shows and Movies tab do not have any downloaded content");
			} else {
				extent.extentLoggerFail("Videos tab",
						"Videos tab fails to highlight by default, User is NOT taken to VIDEOS tab by default, even though Shows/Movies has no downloaded content");
				logger.error(
						"Videos tab fails to highlight by default, User is NOT taken to VIDEOS tab by default, even though Shows/Movies has no downloaded content");
			}

			verifyElementPresentAndClick(AMDDownloadPage.objvideostab, "Videos tab in Downloads screen");
			waitForElementAndClickIfPresent(AMDDownloadPage.objDownloadCompleteIcon, 2000, "downloadCompleteIcon");
			verifyElementPresentAndClick(AMDDownloadPage.objPlayDownloadedContent, "Play Call-out");
			waitTime(4000);
//		verifyElementPresentAndClick(AMDDownloadPage.objDownloadedVideoContent, content1);
//		verifyElementPresentAndClick(AMDDownloadPage.objPlayDownloadedContent, "Play Call-out");
			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			}
			if (verifyElementDisplayed(AMDDownloadPage.objPauseIconOnPlayer)) {
				extent.extentLoggerPass("Video Content", "Playback Started for Video Content : " + content1);
				logger.info("Playback Started for Video Content : " + content1);
			} else {
				logger.error("Playback failed to Start for Video Content - " + content1);
				extent.extentLoggerFail("Download Screen",
						"Playback failed to Start for the Video Content - " + content1);
			}
			Back(1);

			verifyElementPresentAndClick(AMDDownloadPage.objmoviestab, "Movies tab in Downlaods landing screen");
			if (checkElementExist(AMDDownloadPage.objBrowseToDownloadBtn, "Browse to Download CTA under Movies tab")) {
				extent.extentLoggerPass("Movies tab", "Movies Tab not having any downloaded content");
				logger.info("Movies Tab not having any downloaded content");
			}

			verifyElementPresentAndClick(AMDDownloadPage.objshowstab, "Shows tab in Downloads landing screen");
			if (verifyElementExist(AMDDownloadPage.objBrowseToDownloadBtn, "Browse to Download CTA under Shows tab")) {
				extent.extentLoggerPass("Shows tab", "Shows Tab not having any downloaded content");
				logger.info("Shows Tab not having any downloaded content");
			}

		} else {
			logger.info("Downloads with single tier is not applicable for " + userType);
			extent.extentLogger("Downloads", "Downloads with single tier is not applicable for " + userType);
		}
	}
/**
 * @implNote This method is to validate the Subscription Expiry banner in Downloads screen
 * @param userType
 * @throws Exception
 */
	public void validateSubscriptionExpireBanner(String userType) throws Exception {
		extent.HeaderChildNode("Validating Subscription Expiry banner in Donwloads Screen");
		if (userType.contentEquals("SubscribedUser")) {

			System.out.println("\nValidating Subscription Expiry banner in Donwloads Screen");
			zNALogoutMethod();
			click(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDMoreMenu.objProfile, "Profile");

			String SubscribedUserWith15daysExpiryUsername = Reporter.getCurrentTestResult().getTestContext()
					.getCurrentXmlTest().getParameter("SubscribedUserWith15daysExpiryUsername");
			String SubscribedUserWith15daysExpiryPassword = Reporter.getCurrentTestResult().getTestContext()
					.getCurrentXmlTest().getParameter("SubscribedUserWith15daysExpiryPassword");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");

			loginWithEmailID(SubscribedUserWith15daysExpiryUsername, SubscribedUserWith15daysExpiryPassword);
			waitTime(3000);
			verifyElementExist(AMDHomePage.objDownloadBtn, "Downloads tab at the bottom navigation bar");
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			click(AMDDownloadPage.objmoviestab, "Movies tab");

			if (verifyIsElementDisplayed(AMDDownloadPage.objPackExpiredText)) {
				String SubscriptionExpiersText = getDriver().findElement(AMDDownloadPage.objPackExpiredText).getText();
				System.out.println(SubscriptionExpiersText);
				if (SubscriptionExpiersText.contains("Your Subscription expires in")) {
					logger.info(SubscriptionExpiersText + "  is displayed");
					extent.extentLoggerPass("Downloads Screen", SubscriptionExpiersText + " is displayed");
				} else {
					logger.error("Your Subscription expires in X-days is NOT displayed");
					extent.extentLoggerFail("Downloads Screen", "Your Subscription expires in X-days is NOT displayed");
				}
			} else {
				logger.error("Subscription is about to Expire message is NOT displayed");
				extent.extentLoggerWarning("Your Subscription expires",
						"Subscription is about to Expire message is NOT displayed");
			}

			waitTime(2000);
			verifyElementExist(AMDDownloadPage.objRemaindMeLater, "Remind Me Later");
			click(AMDDownloadPage.objRemaindMeLater, "Remind Me Later");
			if (checkElementExist(AMDDownloadPage.objIcon)) {
				logger.info("Premium pack expires message is not displayed on tapping - Remaind Me Later");
				extent.extentLoggerPass("Downloads Screen",
						"Premium pack expires text is not displayed on tapping - Remaind Me Later");
			}
			click(AMDHomePage.HomeIcon, "Home Icon");
		} else {
			logger.info("Validation of Subscription expire banner is not applicable for " + userType);
			extent.extentLogger("Downloads",
					"Validation of Subscription expire banner is not applicable for " + userType);

		}
	}

	/**
	 * @implNote This method will verify the user navigates to TV Shows Landing Screen
	 * Author : Bindu Module : Shows Screen
	 */
	public void verifyShowsScreen(String userType, String TabName) throws Exception {
		extent.HeaderChildNode("Verify user navigates to shows screen");
		System.out.println("\nVerify User navigated to Shows Screen");

		// Selecting Shows tab from Top Navigation
		verifyElementPresentAndClick(AMDHomePage.objShowsTab, "Shows Tab");
		waitTime(2000);

		String getPropertyValue = getAttributValue("enabled", AMDHomePage.objShowsTab);
		if (getPropertyValue.equalsIgnoreCase("true")) {
			logger.info(userType
					+ " is able to navigate to Shows screen by tapping on Shows tab displayed in the top navigation bar");
			extent.extentLoggerPass("Shows Tab", userType
					+ " is able to navigate to Shows screen by tapping on Shows tab displayed in the top navigation bar");
		} else {
			logger.error(userType
					+ " is not able to navigate to Shows screen by tapping on Shows tab displayed in the top navigation bar");
			extent.extentLoggerFail("Shows Tab", userType
					+ " is not able to navigate to Shows screen by tapping on Shows tab displayed in the top navigation bar");
		}

		if ((userType.equalsIgnoreCase("Guest")) | (userType.equalsIgnoreCase("NonSubscribedUser"))) {
			if (verifyElementDisplayed(AMDHomePage.objSubscribeTeaser)) {
				logger.info("Buy Plan icon is dislayed on the header of the Shows Landing Screen");
				extent.extentLoggerPass("Subscribe icon",
						"Buy Plan icon is dislayed on the header of the Shows Landing Screen");
			} else {
				logger.error("Buy Plan icon is not dislayed on the header of the Shows Landing Screen");
				extent.extentLoggerFail("Subscribe icon",
						"Buy Plan icon is not dislayed on the header of the Shows Landing Screen");
			}
		} else {

			if (verifyElementIsNotDisplayed(AMDHomePage.objSubscribeTeaser)) {
				logger.info("Buy Plan icon is not dislayed on the header of the Shows Landing Screen");
				extent.extentLoggerPass("Subscribe icon",
						"Buy Plan icon is not dislayed on the header of the Shows Landing Screen");

			} else {
				logger.error("Buy Plan icon is dislayed on the header of the Shows Landing Screen");
				extent.extentLoggerFail("Subscribe icon",
						"Buy Plan icon is dislayed on the header of the Shows Landing Screen");
			}
		}

		if (verifyElementDisplayed(AMDHomePage.objZee5Logo)) {
			logger.info("Zee5 logo is dislayed");
			extent.extentLoggerPass("Zee5 logo", "Zee5 logo is dislayed");
		} else {
			logger.error("Zee5 logo is not dislayed");
			extent.extentLoggerFail("Zee5 logo", "Zee5 logo is NOT dislayed");
		}

		carouselValidationforShowsAndNews(userType, "Shows");
		String CarouselTitle = ShowsScreenValidationwithApiData(userType);
		if (CarouselTitle == null) {
			logger.info("No premium content present in the carousel to validate Content Playback");
			extent.extentLoggerPass("Content Playback",
					"No premium content present in the carousel to validate Content Playback");
		} else {
			click(AMDHomePage.objContentTitle(CarouselTitle), "Carousel content");
			waitTime(5000);
			if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
//				Back(1);
				click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
			}
			if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
				if (verifyIsElementDisplayed(AMDHomePage.objWatchTrailerIconOnPlayerscreen)) {
					if (verifyIsElementDisplayed(AMDShowsScreen.objSubscribeNowlink)) {
						logger.error(
								"Content playback is not initiated for the user post tapping on premium content which is having trailer");
						extentLoggerFail("Trailer",
								"Content playback is not initiated for the user post tapping on premium content which is having trailer");
					} else {
						logger.info(
								"Content playback is initiated for the user post tapping on premium content which is having trailer");
						extentLoggerPass("Trailer",
								"Content playback is initiated for the user post tapping on premium content which is having trailer");
					}
				} else {
					if (verifyIsElementDisplayed(AMDShowsScreen.objSubscribeNowlink)) {
						logger.info(
								"Content playback is not initiated for the user post tapping on premium content which is not having trailer");
						extentLoggerPass("Trailer",
								"Content playback is not initiated for the user post tapping on premium content which is not having trailer");
					} else {
						logger.error(
								"Content playback is initiated for the user post tapping on premium content which is not having trailer");
						extentLoggerFail("Trailer",
								"Content playback is initiated for the user post tapping on premium content which is not having trailer");
					}
				}

			} else {
				logger.info("Content playback is initiated for the SubscribedUser post tapping on Premium Content");
				extentLoggerPass("Trailer",
						"Content playback is initiated for the SubscribedUser post tapping on Premium Content");
			}
			if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
//				Back(1);
				click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
			}
			Back(1);
		}
		extent.HeaderChildNode("verify the trays present in Shows Landing Screen");
		findingTrayInscreen(2, AMDHomePage.objTrayTitle("Continue Watching"), AMDHomePage.objCarouselDots,
				"Continue watching tray", "MastheadCarousel", userType, "Shows");
		findingTrayInscreen(20, AMDHomePage.objTrayTitle("Before"), AMDHomePage.objCarouselDots, "Before TV tray",
				"MastheadCarousel", userType, "Shows");
		findingTrayInscreen(25, AMDHomePage.objTrayTitle("Trending Shows"), AMDHomePage.objCarouselDots,
				"Trending shows tray", "MastheadCarousel", userType, "Shows");
//		verifyContinueWatchingTray(userType, TabName);
//		RemoveContentCardFromCWRail(userType);
	}
/**
 * @implNote This method is to Remove the content card from Continue watching rail
 * @param userType
 * @throws Exception
 */
	public void removeContentCardFromCWRail(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribedUser") | userType.equalsIgnoreCase("SubscribedUser")) {
			extent.HeaderChildNode("verify user can able to delete content in continue watching tray");
			// Swipe("UP",1);
			boolean ContinueWatchingTray = verifyIsElementDisplayed(AMDHomePage.objContinueWatchingTray);
			if (ContinueWatchingTray) {
				boolean CWTrayContent = verifyIsElementDisplayed(AMDHomePage.objContinueWatchingTrayContentCard);
				if (CWTrayContent) {
					String CWTrayFirstContent = getText(AMDHomePage.objCWTrayContent);
					logger.info(CWTrayFirstContent);
					verifyElementPresentAndClick(AMDHomePage.objRemoveItem,
							"Remove Icon On Continue Watching Tray Content");
					waitTime(2000);
					boolean CWTrayDeletedContent = verifyIsElementDisplayed(
							AMDHomePage.objContentTitleOfCWTray(CWTrayFirstContent));
					if (!(CWTrayDeletedContent)) {
						logger.info("Content Deleted from the Contnue Watching tray");
						extent.extentLoggerPass("Delete Content", "Content Deleted from the Contnue Watching tray");
					} else {
						logger.info("Failed to delete Content from Continue Watching tray");
						extent.extentLoggerFail("Delete Content",
								"Failed to delete Content from Continue Watching tray");
					}
				}
			} else {
				logger.info("Continue Watching tray not displayed");
				extent.extentLoggerWarning("Continue Watching Tray", "Continue Watching tray not displayed");
			}
		}
	}
/**
 * @implNote This method will verify that user navigated to collection listing screen on tapping any collection available on carousel
 * @param userType
 * @throws Exception
 */
	public void verifyCarouselCollectionListingscreen(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify user navigated to collection Listing screen post tapping on any collection available on carousel");
		System.out.println(
				"Verify user navigated to collection Listing screen post tapping on any collection available on carousel");
		if (userType.equals("Guser")) {
			selectContentLang_MoreMenu("Hindi");
			verifyElementPresentAndClick(AMDHomePage.objShowsTab, "Shows Tab");
		}
		waitTime(1000);

		click(AMDNewsPage.objCarouselCollectionContent, "Carousel content");
		verifyElementPresent(AMDNewsPage.objListingScreen, "Screen Header");
		logger.info("Listing Collection Screen is displayed post tapping on any collection available on corousel");
		extent.extentLogger("Listing Collection screen",
				"Listing Collection Screen is displayed post tapping on any collection available on corousel");
		verifyElementPresent(AMDLoginScreen.objBackBtn, "Back Button");
		click(AMDLoginScreen.objBackBtn, "Back Button");
		if (userType.equals("Guest")) {
			selectContentLang_MoreMenu("Hindi");
			verifyElementPresentAndClick(AMDHomePage.objShowsTab, "Shows Tab");
		}
	}
/**
 * @implNote This method will verify that user is navigated ot consumption screen post tapping on any where on banner section
 * @param userType
 * @throws Exception
 */
	public void verifyConsumptionScreen(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify user navigated to consumption screen post tapping on any where on the banner section");
		System.out
				.println("Verify user navigated to consumption scree post tapping on any where on the banner section");
		PartialSwipe("UP", 1);
		verifyElementPresentAndClick(AMDShowsScreen.objcontentCard, "Banner card");
		waitTime(6000);

		if (checkElementExist(AMDShowsScreen.objPlayer, "Player")) {
			logger.info("User is navigated to Consumption Screen");
			extent.extentLogger("Consumption Screen", "User is navigated to Consumption Screen");

		} else {
			logger.info("User is not navigated to Consumption Screen");
			extent.extentLoggerFail("Consumption Screen", "User is not navigated to Consumption Screen");
		}

		Back(1);
		extent.HeaderChildNode("Verify Watch Next tray is available on Shows screen");
		System.out.println("\nVerify Watch Nest Tray is available on Shows screen");
		PartialSwipe("UP", 1);

		if (checkElementExist(AMDShowsScreen.objWatchNextTray, "Watch Next Tray")) {
			logger.info("Watch Next tray is displayed in Shows landing screen");
			extent.extentLogger("Shows Screen", "Watch Next tray is displayed in Shows landing screen");
		} else {
			logger.info("Watch Next tray is not displayed in Shows landing screen");
			extent.extentLoggerFail("Shows Screen", "Watch Next tray is not displayed in Shows landing screen");
		}
	}
/**
 * @implNote The method is to validate the Before Tv tray and verifying the consumption screen on clicking any beofre TV content
 * @param userType
 * @throws Exception
 */
	public void verifyConsumptionScreenOfBeforeTVContent(String userType) throws Exception {
		extent.HeaderChildNode("Before TV tray validation");
		System.out.println("\nBefore TV tray validation");

		// Selecting SHOWS tab from Top Navigation
		verifyElementPresentAndClick(AMDHomePage.objShowsTab, "Shows Tab");
		waitTime(6000);

		for (int i = 1; i < 25; i++) {
			if (!(verifyIsElementDisplayed(AMDHomePage.objBeforeTVTray))) {
				Swipe("UP", 1);
				// break;
			} else {
				waitTime(5000);
				verifyElementPresent(AMDHomePage.objBeforeTVTray, "BeforeTV tray");
				waitTime(4000);

				if (userType.equals("SubscribedUser")) {
					click(AMDHomePage.objBeforeTVViewAllArraowIcon, "View All button of BeforeTV tray");
					waitTime(2000);
					click(AMDHomePage.objBeforeTVContent, "BeforeTV content");
					waitTime(10000);
					if (checkElementExist(AMDPlayerScreen.objPlayerScreen, "Player screen")) {
						logger.info(
								"Content playback is initiated for the subscribed user on tapping any Before Tv Content");
						extent.extentLoggerPass("Consumption Screen",
								"Content playback is initiated for the subscribed user on tapping any Before Tv Content");
					} else {
						logger.info(
								"Content playback is not initiated for the subscribed user on tapping any Before Tv Content");
						extent.extentLoggerFail("Consumption Screen",
								"Content playback is not initiated for the subscribed user on tapping any Before Tv Content");
					}
					Back(2);
				}
				break;
			}
		}
	}
/**
 * @implNote This method is to Validate the Shows screen with API Data
 * @param userType
 * @return
 * @throws Exception
 */
	@SuppressWarnings("unused")
	public String ShowsScreenValidationwithApiData(String userType) throws Exception {
		extent.HeaderChildNode("Shows Premium Content validation with API Data");
		// verifyElementPresentAndClick(AMDHomePage.objShowsTab, "Shows Tab");
		Response resp = ResponseInstance.getResponseForApplicasterPages(userType, "tvshows");
		List<String> apitotaltrays = resp.jsonPath().getList("buckets");
		System.out.println(apitotaltrays.size());
		String CarouselTitle = null;
		boolean Carousel = false;
		for (int i = 0; i < 7; i++) {

			String businessType = resp.jsonPath().getString("buckets[" + i + "].items");
			if (businessType.equalsIgnoreCase("premium_downloadable")) {
				Carousel = true;
				CarouselTitle = resp.jsonPath().getString("buckets[" + i + "].items[" + i + "].title");
				System.out.println(CarouselTitle);
				break;
			}
		}
		return CarouselTitle;
	}

	/**
	 * @implNote This method is to validate the Upcoming Screen 
	 * Author : Manasa
	 */
	public void upcomingSectionValidation(String userType) throws Exception {
		extent.HeaderChildNode("Upcoming Screen Validation");
		// waitTime(5000);
		waitForElementDisplayed(AMDHomePage.objHomeTab, 10);
		verifyElementPresentAndClick(AMDHomePage.objUpcoming, "Upcoming tab");

		WebElement element = findElement(AMDHomePage.objUpcoming);
		int leftX = element.getLocation().getX();
		int rightX = leftX + element.getSize().getWidth();
		int middleX = (rightX + leftX) / 2;
		Dimension size = getDriver().manage().window().getSize();
		if (verifyElementDisplayed(AMDHomePage.objUpcoming)) {
			logger.info("Upcoming text is displayed at the Top left corner of the screen");
			extent.extentLoggerPass("Title", "Upcoming text is displayed at Top left corner center of the screen");
		} else {
			logger.error("Upcoming text is not displayed at Top left corner of the screen");
			extent.extentLoggerFail("Title", "Upcoming text is not displayed at Top left corner of the screen");
		}

//		WebElement searchIcon = findElement(AMDHomePage.objSearchBtn);
//		int searchIconRightX = searchIcon.getLocation().getX();
//		System.out.println(searchIconRightX);
//		Dimension sizee = getDriver().manage().window().getSize();
//		System.out.println(sizee.getWidth());
//		int sizeee = sizee.getWidth() - 300;
//		System.out.println(sizeee);
//
//		if (searchIconRightX >= sizeee) {
//			logger.info("Search icon is displayed at top right of the screen");
//			extent.extentLoggerPass("Search icon", "Search icon is displayed at top right of the screen");
//		} else {
//			logger.error("Search icon is not displayed at top right of the screen");
//			extent.extentLoggerFail("Search icon", "Search icon is not displayed at top right of the screen");
//		}
		Response resp = ResponseInstance.getResponseForUpcomingPage(userType);

		String titleWithTrailer = resp.jsonPath().getString("buckets[0].items[0].original_title");
		System.out.println("API Title " + titleWithTrailer);
		Back(1);
		click(AMDHomePage.objUpcoming, "Upcoming tab");
		verifyElementPresentAndClick(AMDUpcomingPage.objContentCard, "Content Card");
		String titleConsumptionScreen = getText(AMDUpcomingPage.objContentCard1);
		System.out.println(titleConsumptionScreen);
		if (titleConsumptionScreen.contains(titleWithTrailer)) {
			logger.info("Navigated to appropriate consumption screen on tapping anywhere on any content card");
			extent.extentLoggerPass("Title",
					"Navigated to appropriate consumption screen on tapping anywhere on any content card");
			logger.info("Trailer/Teaser playback is played");
			extent.extentLoggerPass("Trailer/Teaser", "Trailer/Teaser playback is played");

		} else {
			logger.error("Not navigated to appropriate consumption screen on tapping anywhere on any content card");
			extent.extentLoggerFail("Title",
					"Not navigated to appropriate consumption screen on tapping anywhere on any content card");
			logger.error("Trailer/Teaser playback is not played");
			extent.extentLoggerFail("Trailer/Teaser", "Trailer/Teaser playback is not played");
		}
		checkElementExist(AMDUpcomingPage.objDownloadIcon, "Download icon");
		Back(1);
		verifyElementPresentAndClick(AMDUpcomingPage.objContentCard1, "Metadata");
		if (titleConsumptionScreen.contains(titleWithTrailer)) {
			logger.info("Navigated to appropriate consumption screen on tapping anywhere on the metadata");
			extent.extentLoggerPass("Title",
					"Navigated to appropriate consumption screen on tapping anywhere on the metadata");
		} else {
			logger.info("Not navigated to appropriate consumption screen on tapping anywhere on the metadata");
			extent.extentLoggerFail("Title",
					"Not navigated to appropriate consumption screen on tapping anywhere on the metadata");
		}
		Back(1);
//		verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search icon");
//		if (verifyIsElementDisplayed(AMDSearchScreen.objMicrophoneIcon)) {
//			logger.info("Search landing screen is displayed after denying audio permission");
//			extent.extentLoggerPass("Search landing screen",
//					"Search landing screen is displayed after denying audio permission");
//		} else {
//			logger.error("Search landing screen is not displayed after denying audio permission");
//			extent.extentLogger("Search landing screen",
//					"Search landing screen is not displayed after denying audio permission");
//		}
		Back(1);
	}
/**
 * @implNote This method will validate the More Menu section
 * @throws Exception
 */
	public void moreSectionValidation() throws Exception {
		extent.HeaderChildNode("More Screen Validation");
		System.out.println("\nMore Section Validation");

		waitTime(3000);
		verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More Menu tab");

		verifyElementExist(AMDMoreMenu.objProfile, "Profile icon");
		verifyElementExist(AMDMoreMenu.objBuySubscription, "Buy Subscription option");
		verifyElementExist(AMDMoreMenu.objMySubscription, "My Subscription option");
		verifyElementExist(AMDMoreMenu.objMyTransactions, "My Transactions option");
		verifyElementExist(AMDMoreMenu.objWatchlist, "Watchlist option");
		verifyElementExist(AMDMoreMenu.objHaveaPrepaidCode, "Have a prepaid code option");
		Swipe("UP", 1);
		verifyElementExist(AMDMoreMenu.objSettings, "Settings option");
		verifyElementExist(AMDMoreMenu.objInviteAFriend, "Invite a Friend option");
		verifyElementExist(AMDMoreMenu.objAboutUs, "About Us option");
		verifyElementExist(AMDMoreMenu.objHelpCentre, "Help Centre option");
		Swipe("UP", 1);
		verifyElementExist(AMDMoreMenu.objTermsOfUse, "Terms of Use");
		verifyElementExist(AMDMoreMenu.objPrivacyPolicy, "Privacy policy");
		verifyElementExist(AMDMoreMenu.objBuildVersion, "Build Version");
	}

	/**
	 * @implNote This method is to validate the functionality of Parental PIN
	 * @param userType
	 * @param searchKeyword
	 * @throws Exception
	 */
	@SuppressWarnings("deprecation")
	public void parentalPinValidation(String userType, String searchKeyword) throws Exception {
		extent.HeaderChildNode("Parental Pin Validation");
		System.out.println("\nParental Pin Validation");

		if (!(userType.equalsIgnoreCase("Guest"))) {
			click(AMDHomePage.MoreMenuIcon, "More Menu tab");
			waitTime(1000);
			PartialSwipe("UP", 1);
			click(AMDMoreMenu.objSettings, "Settings option");
			waitTime(2000);
			click(AMDSettingsScreen.objDownloadOverWifiToggle, "Wifi Off toggle");
			Back(1);
			waitTime(3000);
			Back(1);
			click(AMDHomePage.objSearchBtn, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, searchKeyword, "Search bar");
			waitTime(2000);
			hideKeyboard();
			waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);

//			click(AMDSearchScreen.objSearchResultText(searchKeyword), "Search result");
			click(AMDSearchScreen.objSearchResult(searchKeyword), "Search result");

			click(AMDUpcomingPage.objDownloadIcon, "Download icon");
			click(AMDMoreMenu.objDataSaver, "Data Saver option");
			Swipe("UP", 1);
			click(AMDMoreMenu.objStartDownload, "Start Download");

			String wifi = "";
			String cmd = "adb shell dumpsys \"wifi | grep 'Wi-Fi is'\"";
			Process p = Runtime.getRuntime().exec(cmd);
			System.out.println(cmd);
			BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
			wifi = br.readLine();
			logger.info("Wifi status :: " + wifi.toString());

			if (wifi.equalsIgnoreCase("Wi-Fi is enabled")) {
				logger.info("Content is downloading on Wifi network");
				extent.extentLoggerPass("Download", "Content is downloading on Wifi network");
			} else {
				logger.error("Content is not downloading on Wifi network");
				extent.extentLoggerFail("Download", "Content is not downloading on Wifi network");
			}
			Back(1);

			click(AMDHomePage.MoreMenuIcon, "More Menu tab");
			waitTime(1000);
			click(AMDMoreMenu.objSettings, "Settings option");
			waitTime(5000);
			Swipe("UP", 1);
			verifyElementPresentAndClick(AMDMoreMenu.objParentalControl, "Parental Control");
			verifyElementExist(AMDMoreMenu.objPasswordField, "Password field");
			String password = "";
			if (userType.equals("NonSubscribedUser")) {
				password = getParameterFromXML("SettingsNonsubscribedPassword");
			} else if (userType.equals("SubscribedUser")) {
				password = getParameterFromXML("SettingsSubscribedPassword");
			}
			click(AMDMoreMenu.objPasswordField, "Password field");
			getDriver().getKeyboard().sendKeys(password);

			hideKeyboard();
			if (getOEMName.contains("vivo")) {
				hidePwdKeyboard();
			}
			click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(2000);

			String state = getText(AMDMoreMenu.objNoRestriction);
			System.out.println(state);
			if (state.equalsIgnoreCase("No Restriction")) {
				logger.info(state + " is selected by default");
				extent.extentLoggerPass("Parental Pin", state + " is selected by default");

			} else {
				logger.error(state + " is not selected by default");
				extent.extentLoggerFail("Parental Pin", state + " is not selected by default");

			}

			click(AMDMoreMenu.objRestrictAllContent, "Restrict All Content option");
			click(AMDMoreMenu.objContinueBtn, "Continue Button");
			waitTime(2000);

			if (verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin")) {
				logger.info("Parental Pin is SET");
				extent.extentLoggerPass("Parental Pin", "Parental Pin is SET");

				verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin");
				type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin2, "2", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin3, "3", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
				hideKeyboard();
				waitTime(4000);
				click(AMDMoreMenu.objSetPinContinueBtn, "Continue Button");
				waitTime(2000);

				click(AMDMoreMenu.objParentalLockDone, "Done Button");
			} else {
				logger.info("Parental Pin Popup is NOT displayed");
				extent.extentLoggerFail("Parental Pin", "Parental Pin Popup is NOT displayed");
			}

			Back(1);
			waitTime(3000);
			Back(1);

			verifyElementPresentAndClick(AMDHomePage.objDownload, "Downloads tab");
			verifyElementPresentAndClick(AMDDownloadPage.objvideostab, "Videos tab");
			waitForElementDisplayed(AMDMoreMenu.objDownloadDoneIcon, 20);

			if (verifyElementDisplayed(AMDDownloadPage.objDownloadedContent)) {
				logger.info("Content is downloaded in Downloads screen");
				extent.extentLoggerPass("Downloaded Content", "Content is downloaded in Downloads screen");

				click(AMDDownloadPage.objDownloadedContent, "Downloaded Content");
				click(AMDDownloadPage.objPlayDownloadedContent, "Play Downloaded Content");
				waitTime(4000);
			} else {
				logger.info("Content NOT downloaded in Downloads screen");
				extent.extentLoggerFail("Downloaded Content", "Content NOT downloaded in Downloads screen");
			}

			Back(1);
			/*
			 * --- Parental pin popup is not appearing in the App for downloaded content
			 * hence commented ----
			 * 
			 * verifyElementPresentAndClick(AMDDownloadPage.objEnterPinCTA,
			 * "Enter Pin CTA");
			 * 
			 * type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
			 * hideKeyboard(); type(AMDMoreMenu.objParentalLockPin2, "2",
			 * "ParentalLockPin"); hideKeyboard(); type(AMDMoreMenu.objParentalLockPin3,
			 * "3", "ParentalLockPin"); hideKeyboard();
			 * type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
			 * hideKeyboard(); click(AMDMoreMenu.objSetPinContinueBtn, "Continue button");
			 * 
			 * --- commented above code ----
			 */
			waitTime(2000);
			Back(1);

			// ### Removing the Parental Pin for registered user
			click(AMDHomePage.MoreMenuIcon, "More Menu tab");
			PartialSwipe("UP", 1);
			click(AMDMoreMenu.objSettings, "Settings option");
			waitTime(5000);
			Swipe("UP", 1);
			verifyElementPresentAndClick(AMDMoreMenu.objParentalControl, "Parental Control");
			verifyElementExist(AMDMoreMenu.objPasswordField, "Password field");

			if (userType.equals("NonSubscribedUser")) {
				password = getParameterFromXML("SettingsNonsubscribedPassword");
			} else if (userType.equals("SubscribedUser")) {
				password = getParameterFromXML("SettingsSubscribedPassword");
			}
			click(AMDMoreMenu.objPasswordField, "Password field");
			getDriver().getKeyboard().sendKeys(password);

			hideKeyboard();
			if (getOEMName.contains("vivo")) {
				hidePwdKeyboard();
			}
			click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(2000);
			click(AMDMoreMenu.objNoRestriction, "No Restriction");
			click(AMDMoreMenu.objContinueBtn, "Continue Button");
			waitTime(2000);
			click(AMDMoreMenu.objParentalLockDone, "Done Button");
			Back(2);
		} else {
			logger.info("Parental Pin Validation is NOT applicable for " + userType);
			extent.extentLogger("Parental Pin", "Parental Pin Validation is NOT applicable for " + userType);
		}
	}

	/**
	 * Author : Vinay Module : Premium tab screen validations
	 * @implNote This method is to Validate teh Premium Tab Landing screen
	 * @param UserType
	 */

	/** ===========Premium tab screen validations=========== */

	public void premiumTabScreen(String UserType) throws Exception {

		extent.HeaderChildNode("Verifying Premium tab screen");
		selectTopNavigationTab("Premium");
		// closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000);
		String activeTab = getText(AMDHomePage.objSelectedTab);
		if (activeTab.equalsIgnoreCase("Premium")) {
			extent.extentLoggerPass("Verify user is navigated to Premium tab",
					"User is navigated to Premium tab on clicking premium tab");
			logger.info("User is navigated to Premium tab on clicking premium tab");
		} else {
			extent.extentLoggerFail("Verify user is navigated to Premium tab",
					"Failed to navigate to Premium tab on clicking premium tab");
			logger.error("Failed to navigate to Premium tab on clicking premium tab");
		}

		// Verify Subscribe icon is displayed
		// verifyElementPresent(AMDHomePage.objSubscribeIcon, "Subscribe icon in premium
		// tab");
		if (!(UserType.equalsIgnoreCase("SubscribedUser"))) {
			if (verifyElementDisplayed(AMDHomePage.objSubscribeTeaser)) {
				logger.info("Buy Plan icon is dislayed");
				extent.extentLoggerPass("Zee5 logo", "Buy Plan icon is dislayed");
			} else {
				logger.error("Buy Plan icon is not dislayed");
				extent.extentLoggerFail("Zee5 logo", "Buy Plan icon is not dislayed");
			}
		}

		if (verifyElementDisplayed(AMDHomePage.objZee5Logo)) {
			logger.info("Zee5 logo is dislayed");
			extent.extentLoggerPass("Subscribe icon", "Zee5 logo is dislayed");
		} else {
			logger.error("Zee5 logo is not dislayed");
			extent.extentLoggerFail("Subscribe icon", "Zee5 logo is NOT dislayed");
		}

		if (userType.contentEquals("SubscribedUser")) {
			if (verifyElementIsNotDisplayed(AMDHomePage.objContinueWatchingTray)) {
				logger.info("Continue watching tray is NOT displayed for Premium tab");
				extent.extentLoggerPass("Continue watching", "Continue watching tray is NOT displayed for Premium tab");
			} else {
				logger.error("Continue watching tray is displayed for Premium tab");
				extent.extentLoggerFail("Continue watching", "Continue watching tray is displayed for Premium tab");
			}
		}

		// Verify continue watching tray is not displayed for guest user
		/*
		 * if(UserType.equals("Guest")) {
		 * if(verifyElementExist(AMDHomePage.objContinueWatchingTray,
		 * "Continue Watching") == false) {
		 * extent.extentLogger("Verify continue watching tray ",
		 * "Continue Watching tray is not displayed for guest user");
		 * logger.info("Continue Watching tray is not displayed for guest user");
		 * 
		 * }else { extent.extentLoggerFail("Verify continue watching tray ",
		 * "Continue Watching tray is displayed for guest user");
		 * logger.info("Continue Watching tray is displayed for guest user"); } }
		 */
		// Verify Trending now tray is displayed
		// verifyElementPresent(AMDHomePage.objTrendingNowTray, "Trending Now tray");
		String carouselContent = getText(AMDHomePage.objCarouselTitle1);
		carouselValidation(UserType, "Premium", carouselContent);
		findingTrayInscreen(2, AMDHomePage.objTrayTitle("Trending Now"), AMDHomePage.objCarouselDots,
				"Trending Now tray", "MastheadCarousel", userType, "Premium");
	}

/**
 * @implNote This method will reset the Settings of usertype
 * @throws Exception
 */
	public void resetSettings() throws Exception {
		click(AMDHomePage.MoreMenuIcon, "More Menu");
		Swipe("UP", 1);
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings CTA");
		verifyElementPresent(AMDGenericObjects.objScreenTitleName("Settings"), "Settings Screen");
		Swipe("UP", 1);
		swipeUntilFindElement(AMDMoreMenu.objResetDefault, "UP");
		verifyElementPresentAndClick(AMDMoreMenu.objResetDefault, "Reset settings to Default");
		click(AMDMoreMenu.objYesBtnResetDefault, "Yes button");
		waitTime(1000);
		Back(1);
		click(AMDHomePage.HomeIcon, "Home button");
	}

	/**
	 * Author : Bindu Module : News Landing Page
	 * @implNote This method is to validate the News Landing Screen 
	 */

	public void verifyNewsLandingScreen(String userType) throws Exception {
		extent.HeaderChildNode("Verify user navigates to News screen");
		System.out.println("\nVerify User navigated to News Screen");

		// Navigate to required page from top navigation
		waitForElementDisplayed(AMDHomePage.objHomeTab, 2000);
		selectTopNavigationTab("News");

		getText(AMDHomePage.objSelectedTab);
		String getPropertyValue = getAttributValue("enabled", AMDHomePage.objNewsTab);
		if (getPropertyValue.equalsIgnoreCase("true")) {
			logger.info(
					"user is able to navigate to News screen by tapping on News tab displayed in the top navigation bar");
			extent.extentLoggerPass("News Tab",
					"user is able to navigate to News screen by tapping on News tab displayed in the top navigation bar");
		} else {
			logger.error(
					"user is not able to navigate to News screen by tapping on News tab displayed in the top navigation bar");
			extent.extentLoggerFail("News Tab",
					"user is not able to navigate to News screen by tapping on News tab displayed in the top navigation bar");
		}

		if ((userType.equalsIgnoreCase("Guest")) | (userType.equalsIgnoreCase("NonSubscribedUser"))) {
			if (verifyElementDisplayed(AMDHomePage.objSubscribeTeaser)) {
				logger.info("Buy Plan icon is dislayed on the header of the News Landing Screen");
				extent.extentLoggerPass("Subscribe icon",
						"Buy Plan icon is dislayed on the header of the News Landing Screen");
			} else {
				logger.error("Buy Plan icon is not dislayed on the header of the News Landing Screen");
				extent.extentLoggerFail("Subscribe icon",
						"Buy Plan icon is not dislayed on the header of the News Landing Screen");
			}
		} else {

			if (verifyElementIsNotDisplayed(AMDHomePage.objSubscribeTeaser)) {
				logger.info("Buy Plan icon is not dislayed on the header of the News Landing Screen");
				extent.extentLoggerPass("Subscribe icon",
						"Buy Plan icon is not dislayed on the header of the News Landing Screen");

			} else {
				logger.error("Buy Plan icon is dislayed on the header of the News Landing Screen");
				extent.extentLoggerFail("Subscribe icon",
						"Buy Plan icon is dislayed on the header of the News Landing Screen");
			}
		}

		if (verifyElementDisplayed(AMDHomePage.objZee5Logo)) {
			logger.info("Zee5 logo is dislayed");
			extent.extentLoggerPass("Zee5 logo", "Zee5 logo is dislayed");
		} else {
			logger.error("Zee5 logo is not dislayed");
			extent.extentLoggerFail("Zee5 logo", "Zee5 logo is NOT dislayed");
		}
		if (userType.contentEquals("SubscribedUser")) {
			if (verifyElementIsNotDisplayed(AMDHomePage.objContinueWatchingTray)) {
				logger.info("Continue watching tray is NOT displayed for News tab");
				extent.extentLoggerPass("Continue watching", "Continue watching tray is NOT displayed for News tab");
			} else {
				logger.error("Continue watching tray is displayed for News tab");
				extent.extentLoggerFail("Continue watching", "Continue watching tray is displayed for News tab");
			}
		}

		carouselValidationforShowsAndNews(userType, "News");
	}
/**
 * @implNote This method will verify the Trays present in News landing screen
 * @param userType
 * @throws Exception
 */
	public void verifyTraysInNewsScreen(String userType) throws Exception {
		extent.HeaderChildNode("Verify Trays Present in News Landing Screen");
		System.out.println("Verify Trays Present in News Landing Screen");
		waitTime(6000);
		/*if (userType.equals("Guest")) {
			selectContentLang_MoreMenu2("Hindi");
		}*/
		click(AMDHomePage.objPremiumTab, "Premium tab");
		verifyElementPresentAndClick(AMDHomePage.objNewsTab, "News Tab");

		findingTrayInscreen(25, AMDHomePage.objTrayTitle("Headlines"), AMDHomePage.objCarouselDots,
				"Today's Headlines tray", "MastheadCarousel", userType, "News");
		findingTrayInscreen(25, AMDHomePage.objTrayTitle("Entertainment News"), AMDHomePage.objCarouselDots,
				"Entertainment News tray", "MastheadCarousel", userType, "News");
		findingTrayInscreen(10, AMDHomePage.objTrayTitle("Live News"), AMDHomePage.objCarouselDots, "Live News tray",
				"MastheadCarousel", userType, "News");
		findingTrayInscreen(25, AMDHomePage.objTrayTitle("Top Stories"), AMDHomePage.objCarouselDots,
				"Top Stories tray", "MastheadCarousel", userType, "News");

		if (userType.equals("Guest")) {
			deselectContentLang_MoreMenuAndSelectDefaultLanguage("Hindi");
		}
		click(AMDHomePage.objPremiumTab, "Premium tab");
	}
/**
 * @implNote Method will verify that user is navigated to Listing collection Screen
 * @param userType
 * @throws Exception
 */
	public void verifyListingCollectionScreen(String userType) throws Exception {
		extent.HeaderChildNode("Verify user navigated to Listing collection Screen");
		System.out.println("Verify user navigated to Listing collection Screen");

		if (userType.equalsIgnoreCase("Guest")) {
			verifyElementPresentAndClick(AMDHomePage.objNewsTab, "News Tab");
			waitTime(10000);
			PartialSwipe("UP", 4);
			verifyElementPresent(AMDNewsPage.objRightArrowBtn, "Right arrow");
			click(AMDNewsPage.objRightArrowBtn, "Right arrow");
			waitTime(4000);
			String Header = getDriver().findElement(AMDNewsPage.objListingScreen).getText();
			logger.info(Header);
			if (checkElementExist(AMDNewsPage.objListingScreen, "Listing Screen Header")) {
				logger.info(Header
						+ " : User navigated to collection listing screen tapping on the arrow present on the right side of the tray"
						+ userType);
				extent.extentLoggerPass("Listing Screen", Header
						+ " : User navigated to collection listing screen tapping on the arrow present on the right side of the tray"
						+ userType);
			} else {

				logger.info("User fails to navigate to collection listing screen");
				extent.extentLoggerFail("Listing Screen", "User fails to navigate to collection listing screen");
			}
			if (!(verifyIsElementDisplayed(AMDNewsPage.objMetaData))) {
				logger.info("MetaData like Title,Year,Duration is not displayed in listing collection screen");
				extent.extentLoggerPass("Listing Collection screen",
						"MetaData like Title,Year,Duration is not displayed in listing collection screen");
			} else {
				logger.error("MetaData like Title,Year,Duration is displayed in listing collection screen");
				extent.extentLoggerFail("Listing Collection screen",
						"MetaData like Title,Year,Duration is displayed in listing collection screen");
			}
			Swipe("UP", 1);
			if (checkElementExist(AMDNewsPage.objNextContentImg, "Next Content")) {
				logger.info(
						"User can able to swipe the screen to view the next content in the Collection Listing Screen");
				extent.extentLoggerPass("Listing Collection screen",
						"User can able to swipe the screen to view the next content");
			} else {
				logger.error("No content present on the Collection Listing Screen after swiping the screen");
				extent.extentLoggerFail("Listing Collection screen",
						"No content present on the Collection Listing Screen after swiping the screen");
			}
			Swipe("DOWN", 1);
//			verifyElementPresent(AMDNewsPage.objThumbnailImg1, "Thumbnail Image");
			// waitTime(6000);
			verifyElementPresentAndClick(AMDNewsPage.objNextContentImg, "Thumbnail Image");
			waitTime(2000);
			if (verifyElementPresent(AMDHomePage.objConsumptionScreenTitle, "Consumption Screen Title")) {
				logger.info(
						"User can able to Tap on Thumbnail imagee and user navigated to consumption screen tapping on thumbnail image in listing screen");
				extent.extentLoggerPass("Consumption Screen",
						"User can able to Tap on Thumbnail imagee and user navigated to consumption screen tapping on thumbnail image in listing screen");
			} else {
				logger.error(
						"User cannot able to Tap on Thumbnail imagee and user not navigated to consumption screen tapping on thumbnail image in listing screen");
				extent.extentLoggerFail("Consumption Screen",
						"User cannot able to Tap on Thumbnail imagee and user not navigated to consumption screen tapping on thumbnail image in listing screen");
			}
			Back(1);
			verifyElementPresent(AMDNewsPage.objBackIconOnListingScreen, "Back Button");
			click(AMDNewsPage.objBackIconOnListingScreen, "Back Button");
			waitTime(2000);
			if (verifyElementPresent(AMDHomePage.objNewsTab, "News Tab")) {
				logger.info("User navigated to News Landing screen tapping on back icon available on listing screen");
				extent.extentLoggerPass("Listing Screen",
						"User navigated to News Landing screen tapping on back icon available on listing screen");
			} else {
				logger.error(
						"User not navigated to News Landing screen tapping on back icon available on listing screen");
				extent.extentLoggerFail("Listing Screen",
						"User not navigated to News Landing screen tapping on back icon available on listing screen");
			}
		} else {
			logger.info("Listing Collection Screen validation is not applicable for " + userType);
			extent.extentLoggerWarning("Listing Screen",
					"Listing Collection Screen validation is not applicable for " + userType);
		}
	}

	/**
	 * @implNote This method is to validate the Movies Landing screen
	 * Author : Sushma Module : Movies
	 */
	public void moviesLandingScreen(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("Navigating to Home screen and verifing the Subscribe icon");
		System.out.println("Movies Landing screen and checking the Subscribe icon");

		// closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000);
		waitForElementDisplayed(AMDHomePage.objMoviesTab, 2000);

		// Selecting MOVIES tab from Top Navigation
		selectTopNavigationTab(tabName);

		String activeTab = getText(AMDHomePage.objSelectedTab);
		if (activeTab.equalsIgnoreCase(tabName)) {
			logger.info(userType + " is able to navigate to " + tabName + " screen by tapping on " + tabName
					+ " tab displayed in the top navigation bar");
			extent.extentLoggerPass(tabName + " Tab", userType + " is able to navigate to " + tabName
					+ " screen by tapping on " + tabName + " tab displayed in the top navigation bar");
		} else {
			logger.error(userType + " is not able to navigate to " + tabName + " screen by tapping on " + tabName
					+ " tab displayed in the top navigation bar");
			extent.extentLoggerFail(tabName + " Tab", userType + " is not able to navigate to " + tabName
					+ " screen by tapping on " + tabName + " tab displayed in the top navigation bar");
		}
		waitTime(10000);
		// closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000);

		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			if (verifyElementDisplayed(AMDHomePage.objSubscribeTeaser)) {
				logger.info("Buy Plan icon is dislayed");
				extent.extentLoggerPass("Zee5 logo", "Buy Plan icon is dislayed");
			} else {
				logger.error("Buy Plan icon is not dislayed");
				extent.extentLoggerFail("Zee5 logo", "Buy Plan icon is not dislayed");
			}
		} else {
			if (verifyElementIsNotDisplayed(AMDHomePage.objSubscribeTeaser)) {
				logger.info("Buy Plan icon is not dislayed");
				extent.extentLoggerPass("Subscribe icon", "Buy Plan icon is not dislayed");
			} else {
				logger.error("Buy Plan icon is dislayed");
				extent.extentLoggerFail("Subscribe icon", "Buy Plan icon is dislayed");
			}
		}

		if (verifyElementDisplayed(AMDHomePage.objZee5Logo)) {
			logger.info("Zee5 logo is dislayed");
			extent.extentLoggerPass("Subscribe icon", "Zee5 logo is dislayed");
		} else {
			logger.error("Zee5 logo is not dislayed");
			extent.extentLoggerFail("Subscribe icon", "Zee5 logo is NOT dislayed");
		}

		waitTime(3000);
		String courselContentTitle = carouselValidationWithApi(userType, "movies");
		carouselValidation(userType, tabName, courselContentTitle);
		click(AMDHomePage.objContentTitle(courselContentTitle), "Carousel content");

		waitTime(5000);
		if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
//			Back(1);
			click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
		}
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			if (verifyIsElementDisplayed(AMDHomePage.objWatchTrailerIconOnPlayerscreen)) {
				if (verifyIsElementDisplayed(AMDShowsScreen.objSubscribeNowlink)) {
					logger.error(
							"Content playback is not initiated for the user post tapping on premium content which is having trailer");
					extentLoggerFail("Trailer",
							"Content playback is not initiated for the user post tapping on premium content which is having trailer");
				} else {
					logger.info(
							"Content playback is initiated for the user post tapping on premium content which is having trailer");
					extentLoggerPass("Trailer",
							"Content playback is initiated for the user post tapping on premium content which is having trailer");
				}
			} else {
				if (verifyIsElementDisplayed(AMDShowsScreen.objSubscribeNowlink)) {
					logger.info(
							"Content playback is not initiated for the user post tapping on premium content which is not having trailer");
					extentLoggerPass("Trailer",
							"Content playback is not initiated for the user post tapping on premium content which is not having trailer");
				} else {
					logger.error(
							"Content playback is initiated for the user post tapping on premium content which is not having trailer");
					extentLoggerFail("Trailer",
							"Content playback is initiated for the user post tapping on premium content which is not having trailer");
				}
			}

		} else {
			logger.info("Content playback is initiated for the SubscribedUser post tapping on Premium Content");
			extentLoggerPass("Trailer",
					"Content playback is initiated for the SubscribedUser post tapping on Premium Content");
		}
		Back(1);
		extent.HeaderChildNode("Verifing the availability of tray in the screen");
		findingTrayInscreen(2, AMDHomePage.objTrayTitle("Continue Watching"), AMDHomePage.objCarouselDots,
				"Continue watching tray", "MastheadCarousel", userType, tabName);
		findingTrayInscreen(2, AMDHomePage.objTrayTitle("Trending Movies"), AMDHomePage.objCarouselDots,
				"Trending Movies tray", "MastheadCarousel", userType, tabName);
//		verifyContinueWatchingTray(userType, tabName);
//		RemoveContentCardFromCWRail(userType);
	}
/**
 * @implNote This method will add the Title name to the Xpath
 * @param trayTitle
 * @return
 * @throws Exception
 */
	public String titleToXpath(String trayTitle) throws Exception {
		String xPath = null;
		StringBuffer Sbuffer1 = new StringBuffer();
		// System.out.println(trayTitle);
		if (trayTitle.contains("'")) {
			// System.out.println("Length of the title is: "+trayTitle.length());
			String[] S = trayTitle.split("'");
			// System.out.println("The size of the array is: "+S.length);
			// for(String x : S)
			// System.out.println(x);
			//
			Sbuffer1.append("//*[@text=concat(\"");
			Sbuffer1.append(S[0]);
			// System.out.println(Sbuffer1);
			for (int i = 1; i < S.length; i++) {
				Sbuffer1.append("\",\"'\",\"" + S[i]);
			}
			Sbuffer1.append("\")]");
			// System.out.println("The Xpath is:"+Sbuffer1.toString());
			xPath = Sbuffer1.toString();

		} else {
			Sbuffer1.append("//*[@text=\"" + trayTitle + "\"]");
			// System.out.println("The Xpath is:"+Sbuffer1.toString());
			xPath = Sbuffer1.toString();
		}
		return xPath;
	}
/**
 * @implNote Date formatting
 * @return
 */
	public static String date() {
		Date date = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
		String strDate = formatter.format(date);
		formatter = new SimpleDateFormat("yyyy-MM-dd");
		strDate = formatter.format(date);
		System.out.println(strDate);

		return strDate;
	}

	/**
	 * Author : Hitesh Module : Live TV
	 * @implNote This methid is to verify the Live Tv Landing screen
	 * @throws Exception
	 */
	public void LiveTV(String UserType, String tabName) throws Exception {
		extent.HeaderChildNode("Verifying Live TV Landing screen");
		System.out.println("\nVerifying Live TV Landing screen");
		// swipeByElements(findElement(AMDHomePage.objNewsTab),
		// findElement(AMDHomePage.objHomeTab));
		selectTopNavigationTab(tabName);
		waitTime(2000);
		if (verifyElementDisplayed(AMDLiveTVScreen.objChannelGuide)) {
			logger.info("Navigated to Live TV Screen");
			extentLoggerPass("Navigation to Live TV", "Navigated to Live TV Screen");
		} else {
			logger.info("Unable to navigated to Live TV Screen");
			extentLoggerFail("Navigation to Live TV", "Unable to navigated to Live TV Screen");
		}

		if (verifyElementDisplayed(AMDHomePage.objZee5Logo)) {
			logger.info("Zee5 logo is dislayed");
			extent.extentLoggerPass("Zee5 logo", "Zee5 logo is dislayed");
		} else {
			logger.error("Zee5 logo is not dislayed");
			extent.extentLoggerFail("Zee5 logo", "Zee5 logo is NOT dislayed");
		}

		if (userType.contentEquals("SubscribedUser")) {
			if (verifyElementIsNotDisplayed(AMDHomePage.objContinueWatchingTray)) {
				logger.info("Continue watching tray is NOT displayed for Live TV");
				extent.extentLoggerPass("Continue watching", "Continue watching tray is NOT displayed for Live Tv");
			} else {
				logger.error("Continue watching tray is displayed for Live Tv");
				extent.extentLoggerFail("Continue watching", "Continue watching tray is displayed for Live TV");
			}
		}

		if (UserType.equals("Guest")) {
			verifyElementExist(AMDLiveTVScreen.objSubscribeIcon, "Buy Plan Icon for " + UserType + " User");
		} else if (UserType.equals("NonSubscribedUser")) {
			verifyElementExist(AMDLiveTVScreen.objSubscribeIcon, "Buy Plan Icon for " + UserType + " User");
		}
//		else if (UserType.equals("SubscribedUser")) {
//			verifyElementExist(AMDLiveTVScreen.objSubscribeIcon, "Subscribe Icon for " + UserType + " User");
//		}
		verifyElementExist(AMDLiveTVScreen.objChannelGuide, "Channel Guide toggle option");
		click(AMDLiveTVScreen.objChannelGuide, "Channel Guide");
		if (findElement(AMDLiveTVScreen.objChannelGuide).isSelected()) {
			logger.info("Channel Guide is Selected");
			extentLoggerPass("Verify Toogle options", "Channel Guide is Selected");
		} else {
			logger.error("Channel Guide is not Selected");
			extentLoggerFail("Verify Toogle options", "Channel Guide is not Selected");
		}
		click(AMDLiveTVScreen.onjLiveTvToggle, "Channel Guide");
		// *[@id='cell_top_container']
		// (//*[@id='cell_center_container']//*[@class='android.widget.ImageView'])[1]
		for (int i = 0; i < findElements(AMDLiveTVScreen.objContentInLiveTV).size(); i++) {
			if (verifyElementDisplayed(AMDLiveTVScreen.objImageIcon)) {
				logger.info("Image Icon is Displayed");
				extentLoggerPass("Image icon", "Image Icon is Displayed");
			} else {
				logger.error("Image Icon is Not Displayed");
				extentLoggerFail("Image icon", "Image Icon is Not Displayed");
			}
		}

		verifyElementPresentAndClick(AMDLiveTVScreen.objFirstContent, "Live Tv content");
		waitForAdToFinishInAmd();
		click(AMDPlayerScreen.objplayer, "Player screen");
		verifyElementExist(AMDLiveTVScreen.objLiveTV, "Live Icon on Player");
		Back(1);
		int i = 0;
		for (i = 0; i < 5; i++) {
			if (verifyIsElementDisplayed(AMDLiveTVScreen.objTray("FREE Channels"), "FREE Channels tray")) {
				break;
			} else {
				Swipe("UP", 1);
			}
		}
		Swipe("DOWN", i);
		i = 0;
		for (i = 0; i < 5; i++) {
			if (verifyIsElementDisplayed(AMDLiveTVScreen.objTray("Music"), "Music tray")) {
				break;
			} else {
				Swipe("UP", 1);
			}
		}
		Swipe("DOWN", i);
		i = 0;
		for (i = 0; i < 5; i++) {
			if (verifyIsElementDisplayed(AMDLiveTVScreen.objTray("News"), "News tray")) {
				break;
			} else {
				Swipe("UP", 1);
			}
		}
		Swipe("DOWN", i);
		verifyDuplicateTrays(AMDLiveTVScreen.objTray("FREE Channels"), "FREE Channels tray");
		verifyDuplicateTrays(AMDLiveTVScreen.objTray("Music"), "Music tray");
		verifyDuplicateTrays(AMDLiveTVScreen.objTray("News"), "News tray");
	}
/**
 * @implNote This method is to verify the Channel Guide screen in Live Tv Landing screen
 * @param UserType
 * @throws Exception
 */
	public void channelGuideScreenValidation(String UserType) throws Exception {
		extent.HeaderChildNode("Verifying Channel Guide screen in Live TV Landing screen");
		System.out.println("\nVerifying Channel Guide screen in Live TV Landing screen");

		verifyElementPresentAndClick(AMDHomePage.objLiveTvTab, "Live Tv");
		verifyElementExist(AMDLiveTVScreen.objChannelGuide, "Channel Guide toggle option");
		click(AMDLiveTVScreen.objChannelGuide, "Channel Guide");
		if (findElement(AMDLiveTVScreen.objChannelGuide).isSelected()) {
			logger.info("Channel Guide is Selected");
			extentLoggerPass("Verify Toogle options", "Channel Guide is Selected");
		} else {
			logger.error("Channel Guide is not Selected");
			extentLoggerFail("Verify Toogle options", "Channel Guide is not Selected");
		}
		if (UserType.equals("Guest")) {
			verifyElementExist(AMDLiveTVScreen.objSubscribeIcon, "Buy Plan Icon for " + UserType + " User");
		} else if (UserType.equals("NonSubscribedUser")) {
			verifyElementExist(AMDLiveTVScreen.objSubscribeIcon, "Buy Plan Icon for " + UserType + " User");
		}
//		else if (UserType.equals("SubscribedUser")) {
//			verifyElementExist(AMDLiveTVScreen.objSubscribeIcon, "Subscribe Icon for " + UserType + " User");
//		}
		if (findElements(AMDLiveTVScreen.objChannelLogo).size() > 0) {
			logger.info("list of channels are displayed in Channel Guide screen");
			extentLoggerPass("Channel Guide Screen", "list of channels are displayed in Channel Guide screen");
		} else {
			logger.error("list of channels are not displayed in Channel Guide screen [AMA2-1742]");
			extentLoggerFail("Channel Guide Screen",
					"list of channels are not displayed in Channel Guide screen [AMA2-1742]");
		}
		verifyElementPresentAndClick(AMDHomePage.objMusicTab, "Music Tab");
		if (findElement(AMDHomePage.objMusicTab).isSelected()) {
			logger.info("User is able to navigate to any screen from channel guide screen");
			extentLoggerPass("Screen", "User is able to navigate to any screen from channel guide screen");
		} else {
			logger.error("User is not able to navigate to any screen from channel guide screen");
			extentLoggerFail("Screen", "User is not able to navigate to any screen from channel guide screen");
		}
	}
/**
 * @implNote This method is to verify the Duplicate Trays present on screen
 * @param tray
 * @param trayName
 */
	public void verifyDuplicateTrays(By tray, String trayName) {
		for (int i = 0; i < 4; i++) {
			if ((findElements(tray).size()) > 1) {
				logger.error("Duplicate tray :" + trayName);
				extentLoggerFail("Duplicate Tray", "Duplicate tray :" + trayName);
			} else {
				logger.info("No Duplicate tray :" + trayName);
				extentLoggerPass("Duplicate Tray", "No Duplicate tray :" + trayName);
			}
			Swipe("UP", 1);
		}
		for (int i = 0; i < 4; i++) {
			Swipe("Down", 1);
		}
	}

	/**
	 * Author : Manasa Module :
	 * @implNote This method is to verify the subscription reminder in Downloads
	 */
	public void verifySubscriptionReminderInDownloads(String userType) throws Exception {
		extent.HeaderChildNode("Verify Subscription Reminder In Downloads");
		System.out.println("\nVerify Subscription Reminder In Downloads");
		waitTime(5000);
		verifyElementPresentAndClick(AMDHomePage.objDownload, "Downloads tab");
		boolean getValue = verifyElementExist(
				By.xpath("(//*[@text='Downloads']//parent::*)[1] | (//*[@id='navigationIconView'])[4]"),
				"DownloadScreen");
		System.out.println(getValue);
		if (getValue == false) {
			logger.error("Not Navigated to Download Section");
			extent.extentLoggerFail("Download Section", "Not Navigated to Download Section");
		} else {
			logger.info("Navigated to Download Section");
			extent.extentLoggerPass("Download Section", "navigated to Download Section");
		}
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			String subscriptionExpiry = getText(AMDDownloadPage.objSubscriptionExpiry);
			logger.info("Subscription Expiry Message : " + subscriptionExpiry + " is displayed");
			extent.extentLogger("Subscription Expiry Message",
					"Subscription Expiry Message : " + subscriptionExpiry + " is displayed");
			verifyElementExist(AMDDownloadPage.objSubscriptionExpiryMessage, "Subscription Renewal Message");
			if (verifyElementExist(AMDDownloadPage.objSubscriptionExpiryMessage, "Subscription Reminder Message")) {
				verifyElementPresentAndClick(AMDDownloadPage.objRemindMeLaterCTA, "Remind Me Later CTA");
				logger.info("Subscription Reminder Message is hidden");
				extent.extentLogger("Subscription Reminder Message", "Subscription Reminder Message is hidden");
			} else {
				logger.info("Subscription Reminder Message is not hidden");
				extent.extentLogger("Subscription Reminder Message", "Subscription Reminder Message is not hidden");
			}
		}
	}

	/**
	 * Author : Vinay Module : Music Landing screen
	 * @implNote This method is to validate the Music Landing screen
	 * 
	 */
	public void musicLandingScreen(String userType) throws Exception {
		extent.HeaderChildNode("Top Navigation Music Landing screen");
		waitTime(3000);
		// Verify user is navigated to Music landing screen
		selectTopNavigationTab("Music");
		// closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000);
		// Verify user is navigated to Music tab
		String activeTab = getText(AMDHomePage.objSelectedTab);
		if (activeTab.equalsIgnoreCase("Music")) {
			extent.extentLoggerPass("Verify user is navigated to Music tab",
					"User is navigated to Music tab on clicking Music tab");
			logger.info("User is navigated to Music tab on clicking Music tab");
		} else {
			extent.extentLoggerFail("Verify user is navigated to Music tab",
					"Failed to navigate to Music tab on clicking Music tab");
			logger.error("Failed to navigate to Music tab on clicking Music tab");
		}

		if ((userType.equalsIgnoreCase("Guest"))) {
			selectContentLang_MoreMenu2("Hindi,English");
			waitTime(3000);
			selectTopNavigationTab("Music");

			if (verifyElementDisplayed(AMDHomePage.objZee5Logo)) {
				logger.info("Zee5 logo is dislayed");
				extent.extentLoggerPass("Zee5 logo", "Zee5 logo is dislayed");
			} else {
				logger.error("Zee5 logo is not dislayed");
				extent.extentLoggerFail("Zee5 logo", "Zee5 logo is NOT dislayed");
			}

			if (userType.contentEquals("SubscribedUser")) {
				if (verifyElementIsNotDisplayed(AMDHomePage.objContinueWatchingTray)) {
					logger.info("Continue watching tray is NOT displayed for Music tab");
					extent.extentLoggerPass("Continue watching",
							"Continue watching tray is NOT displayed for Music tab");
				} else {
					logger.error("Continue watching tray is displayed for Music tab");
					extent.extentLoggerFail("Continue watching", "Continue watching tray is displayed for Music tab");
				}
			}

			findParticularTray(AMDHomePage.objBrandNewMusicRail, "Brand new Music");
			if (verifyElementDisplayed(AMDHomePage.objBrandNewMusicRail)) {
				logger.info("Brand New Music rail is dislayed");
				extent.extentLoggerPass("Music landing screen", "Brand New Music rail is dislayed");
			} else {
				logger.info("Brand New Music rail is not dislayed");
				extent.extentLoggerWarning("Music landing screen", "Brand New Music rail is not dislayed");
			}
		}

		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			if (verifyElementDisplayed(AMDHomePage.objSubscribeTeaser)) {
				logger.info("Buy Plan icon is dislayed");
				extent.extentLoggerPass("Subscribe icon", "Buy Plan icon is dislayed");
			} else {
				logger.error("Buy Plan icon is not dislayed");
				extent.extentLoggerFail("Subscribe icon", "Buy Plan icon is not dislayed");
			}
		}

		String carouselContent = getText(AMDHomePage.objCarouselTitle1);
		carouselValidation(userType, "Music", carouselContent);
	}
/**
 * @implNote This method is to validate the Webseries(Zee originals) carousel with API
 * @param userType
 * @param pagenameforApi
 * @return
 */
	public static String zeeOriginalsCarouselValidationWithApi(String userType, String pagenameforApi) {
		Response respPage = ResponseInstance.getResponseForApplicasterPages(userType, pagenameforApi);
		List<String> items = respPage.jsonPath().getList("buckets[0].items");
		logger.info("bucketsSize: " + items.size());
		String carouselContentTitle = null;
		main: for (int i = 0; i < items.size(); i++) {
			carouselContentTitle = respPage.jsonPath().getString("buckets[0].items[" + i + "].title");
			logger.info(carouselContentTitle);

			String CarouselContentBusinessType = respPage.jsonPath()
					.getString("buckets[0].items[" + i + "].business_type");
			logger.info(CarouselContentBusinessType);
			if (CarouselContentBusinessType.equalsIgnoreCase("premium_downloadable")) {
				break main;
			}
		}
		return carouselContentTitle;
	}

	/**
	 * @implNote This method is to validate the Settings screen
	 * Author : Sushma Module : Settings
	 */
	public void settingsScreenValidation(String usertype) throws Exception {
		extent.HeaderChildNode("Settings screen validation");
		System.out.println("\nSettings screen validation");

		// Setting screen validation
		click(AMDHomePage.MoreMenuIcon, "More menu icon");
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings option");
		if (checkElementExist(AMDMoreMenu.objSettingsScreenTitle, "Setting screen title")) {
			logger.info("Settings screen is displayed when user taps on the Settings option from the More menu");
			extentLoggerPass("Settings",
					"Settings screen is displayed when user taps on the Settings option from the More menu");
		} else {
			logger.error("Settings screen is not displayed when user taps on the Settings option from the More menu");
			extentLoggerFail("Settings",
					"Settings screen is not displayed when user taps on the Settings option from the More menu");
		}
		verifyElementPresent(AMDMoreMenu.objVideoStreamingMenuTitle, "Video streaming menu");
		verifyElementPresent(AMDMoreMenu.objDownloadsMenuTitle, "Downloads menu");

		String pos1 = getAttributValue("bounds", AMDMoreMenu.objDownloadsMenuTitle);
		String pos2 = null;
		PartialSwipe("UP", 1);
		pos2 = getAttributValue("bounds", AMDMoreMenu.objDownloadsMenuTitle);
		if (pos1 != pos2) {
			logger.info("Settings screen is scrollable");
			extentLoggerPass("Swipe", "Settings screen is scrollable");
		} else {
			logger.error("Settings screen is not scrollable");
			extentLoggerFail("Swipe", "Settings screen is not scrollable");
		}

		Swipe("UP", 2);
		verifyElementPresent(AMDMoreMenu.objLanguageMenuTitle, "Languages menu");
		if (!(usertype.equalsIgnoreCase("Guest"))) {
			verifyElementPresent(AMDMoreMenu.objParentalControl, "Parental Control menu");
			verifyElementPresent(AMDSettingsScreen.objAuthenticateDevice, "Authenticate Device menu");
		}
		verifyElementPresent(AMDMoreMenu.objSearchHistroyLabel, "Search histroy Label");
		verifyElementPresent(AMDMoreMenu.objResetSettingsToDefault, "Reset Settings to default Label");
		Swipe("DOWN", 2);

		// Back button validation
		click(AMDMoreMenu.objBackButtonInSettingsScreen, "Back button in settings screen");
		if (verifyElementPresent(AMDMoreMenu.objSettings, "Settings option")) {
			logger.info(
					"On tapping on the Back button from settings screen, user is navigated to the screen from which More screen was launched");
			extentLoggerPass("Back button",
					"On tapping on the Back button from settings screen, user is navigated to the screen from which More screen was launched");
		} else {
			logger.error(
					"On tapping on the Back button from settings screen, user is not navigated to the screen from which More screen was launched");
			extentLoggerFail("Back button",
					"On tapping on the Back button from settings screen, user is not navigated to the screen from which More screen was launched");
		}
		click(AMDMoreMenu.objSettings, "Settings option");
	}
/**
 * @implNote This method is to validate the video streaming functionality
 * @param userType
 * @throws Exception
 */
	@SuppressWarnings("unused")
	public void videoStreamingValidation(String userType) throws Exception {
		extent.HeaderChildNode("Video Streaming validation");
		System.out.println("\nVideo Streaming validation");
		// Video streaming menus validation
		click(AMDHomePage.MoreMenuIcon, "More menu icon");
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings option");
		verifyElementPresent(AMDMoreMenu.objvideoQualityOption, "Video Quality option");
		verifyElementPresent(AMDMoreMenu.objVideoStreamOverWifiOnlyOption, "Stream over wifi only option");
		verifyElementPresent(AMDMoreMenu.objVideoAutoPlay, "Video Autoplay option");

		click(AMDMoreMenu.objVideo_Quality("Auto"), "Video quality option");

		// video quality screen validation
		verifyElementPresent(AMDMoreMenu.objVideoQualityScreenTitle, "Video quality screen title");
		verifyElementPresent(AMDSettingsScreen.objVideoQualityBest, "option Best");
		verifyElementPresent(AMDSettingsScreen.objVideoQualityBetter, "option Better");
		verifyElementPresent(AMDSettingsScreen.objVideoQualityGood, "option Good");
		verifyElementPresent(AMDSettingsScreen.objVideoQualityDatasaver, "option Datasaver");
		verifyElementPresent(AMDMoreMenu.objAutoOption, "option Auto");
		verifyElementPresent(AMDMoreMenu.objCloseButtonInVideoQualityScreen, "Close button");
		if (verifyElementDisplayed(AMDMoreMenu.objDefaultAutoOption)) {
			logger.info("Default selection in the Select Video Quality is 'Auto' option");
			extentLoggerPass("Default selected Video quality option",
					"Default selection in the Select Video Quality is 'Auto' option");
		} else {
			logger.error("Default selection in the Select Video Quality is not 'Auto' option");
			extentLoggerFail("Default selected Video quality option",
					"Default selection in the Select Video Quality is not 'Auto' option");
		}

		click(AMDMoreMenu.objCloseButtonInVideoQualityScreen, "Close button");
		if (verifyElementDisplayed(AMDMoreMenu.objvideoQualityOption)) {
			logger.info("'X' button in Select Video Quality screen is functional");
			extentLoggerPass("Close button", "'X' button in Select Video Quality screen is functional");
		} else {
			logger.error("'X' button in Select Video Quality screen is not functional");
			extentLoggerFail("Close button", "'X' button in Select Video Quality screen is not functional");
		}

		click(AMDMoreMenu.objVideo_Quality("Auto"), "Video quality option");
		click(AMDSettingsScreen.objVideoQualityBetter, "option Better");
		if (verifyElementDisplayed(AMDMoreMenu.objVideo_Quality("Better"))) {
			logger.info("Select Video Quality screen with tick mark is displayed");
			extentLoggerPass("Video quality option", "Select Video Quality screen with tick mark is displayed");
		} else {
			logger.error("Select Video Quality screen with tick mark is not displayed");
			extentLoggerFail("Video quality option", "Select Video Quality screen with tick mark is not displayed");
		}

		click(AMDMoreMenu.objVideo_Quality("Better"), "Video quality option");
		click(AMDMoreMenu.objAutoOption, "option Auto");

		// Stream over wifi only option validation
		WebElement wifitoggle = findElement(AMDMoreMenu.objVideo_WifiOnly);
		int wifitoggleX = wifitoggle.getLocation().getX();
		int wifitoggleY = wifitoggle.getLocation().getY();

		WebElement wifitext = findElement(AMDMoreMenu.objVideoStreamOverWifiOnlyOption);
		int wifitextX = wifitext.getLocation().getX();
		int wifitextY = wifitoggle.getLocation().getY();

		if (wifitextY < (wifitoggleY + 10)) {
			if (wifitoggleX > wifitextX) {
				logger.info("On/Off toggle is displayed at the right side of the Stream over WiFi only option");
				extent.extentLoggerPass("wifi On/Off toggle",
						"On/Off toggle is displayed at the right side of the Stream over WiFi only option");
			} else {
				logger.error("On/Off toggle is not displayed at the right side of the Stream over WiFi only option");
				extent.extentLoggerFail("wifi On/Off toggle",
						"On/Off toggle is not displayed at the right side of the Stream over WiFi only option");
			}
		}

		if (userType.equalsIgnoreCase("Guest")) {
			String wifitoggleStatus = getText(AMDMoreMenu.objVideo_WifiOnly);
			if (wifitoggleStatus.equalsIgnoreCase("OFF")) {
				logger.info("Default state of the 'Stream over WiFi only' option is in off state.");
				extentLoggerPass("Stream over WiFi only",
						"Default state of the 'Stream over WiFi only' option is in off state.");
			} else {
				logger.error("Default state of the 'Stream over WiFi only' option is not in off state.");
				extentLoggerFail("Stream over WiFi only",
						"Default state of the 'Stream over WiFi only' option is not in off state.");
			}
		}
		Back(1);
		waitTime(3000);
		Back(1);
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			// closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000);
		}

		verifyElementExist(AMDHomePage.objHomeTab, "Home Tab");
		waitTime(10000);
		String email = null, password = null;
		if (userType.contains("NonSubscribedUser")) {
			email = getParameterFromXML("SettingsNonsubscribedUserName");
			password = getParameterFromXML("SettingsNonsubscribedPassword");
		} else if (userType.contains("SubscribedUser")) {
			email = getParameterFromXML("SettingsSubscribedUserName");
			password = getParameterFromXML("SettingsSubscribedPassword");
		}
		String courselContentTitle = getCarouselTitleFromAPI(userType, "homepage", email, password);
//		String courselContentTitle = carouselValidationWithApi(userType, "homepage");
		System.out.println(courselContentTitle);
		if (courselContentTitle != null) {
			waitForElementAndClickIfPresent(AMDHomePage.objContentTitle(courselContentTitle), 10, "Carousel content");
//			for (int i = 0; i < 2; i++) {
//				if (verifyElementPresent(AMDHomePage.objContentTitle(courselContentTitle), "Carousel content")) {
//					break;
//				}
//
//			}
//			click(AMDHomePage.objContentTitle(courselContentTitle), "Carousel content");
		} else {
			click(AMDGenericObjects.objCarouselTitle("Shivaji Surathkal"), "Carousel content");
		}

		String wifi = "";
		String cmd = "adb shell dumpsys \"wifi | grep 'Wi-Fi is'\"";
		Process p = Runtime.getRuntime().exec(cmd);
		System.out.println(cmd);
		BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
		wifi = br.readLine();
		logger.info("Wifi status :: " + wifi.toString());

		if (wifi.equalsIgnoreCase("Wi-Fi is enabled")) {
			if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
				waitTime(3000);
				if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
					Back(1);
				}
				if (verifyElementDisplayed(AMDPlayerScreen.objPlayerScreen)) {
					logger.info("Content playback is playing on Wifi network");
					extent.extentLoggerPass("Play", "Content playback is playing on Wifi network");
				} else {
					logger.error("Content playback is not playing on Wifi network");
					extent.extentLoggerFail("Play", "Content playback is not playing on Wifi network");
				}
			} else {
				waitTime(10000);
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
//				waitForElementDisplayed(AMDHomePage.objMaximizeIcon, 10);
				if (verifyIsElementDisplayed(AMDConsumptionScreen.objShareBtn)) {
					logger.info("Content playback is playing on Wifi network");
					extent.extentLoggerPass("Play", "Content playback is playing on Wifi network");
				} else {
					logger.error("Content playback is not playing on Wifi network");
					extent.extentLoggerFail("Play", "Content playback is not playing on Wifi network");
				}
			}
		} else {
			logger.info("Content playback is not playing on Wifi network");
			extent.extentLoggerFail("Play", "Content playback is not playing on Wifi network");
		}
		waitTime(5000);
//		Back(1);
		if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		}
		verifyElementPresentAndClick(AMDPlayerScreen.objPlayerBackbutton, "Back button in player");
		BackToLandingScreen();
		//navigateBackToHomeLandingScreen();
		waitTime(2000);
		verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More menu icon");
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings option");
		click(AMDMoreMenu.objVideo_WifiOnly, "wifi toggle");
//		Back(1);
		BackToLandingScreen();
	//	navigateBackToHomeLandingScreen();
		waitTime(3000);
//		Back(1);
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			// closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000);
		}

		verifyElementExist(AMDHomePage.objHomeTab, "Home Tab");
		waitTime(10000);
		if (courselContentTitle != null) {
			for (int i = 0; i < 2; i++) {
				if (verifyElementPresent(AMDHomePage.objContentTitle(courselContentTitle), "Carousel content")) {
					break;
				}

			}
			click(AMDHomePage.objContentTitle(courselContentTitle), "Carousel content");
		} else {
			click(AMDGenericObjects.objCarouselTitle("Shivaji Surathkal"), "Carousel content");
		}

		String wifii = "";
		String cmdd = "adb shell dumpsys \"wifi | grep 'Wi-Fi is'\"";
		Process pp = Runtime.getRuntime().exec(cmdd);
		System.out.println(cmdd);
		BufferedReader brr = new BufferedReader(new InputStreamReader(pp.getInputStream()));
		wifii = brr.readLine();
		logger.info("Wifi status :: " + wifii.toString());

		if (wifii.equalsIgnoreCase("Wi-Fi is enabled")) {
			if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
				waitTime(3000);
				if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
					Back(1);
				}
				if (verifyElementDisplayed(AMDPlayerScreen.objPlayerScreen)) {
					logger.info("Content playback is playing only on Wifi network");
					extent.extentLoggerPass("Play", "Content playback is playing only on Wifi network");
				} else {
					logger.error("Content playback is not playing only on Wifi network");
					extent.extentLoggerFail("Play", "Content playback is not playing only on Wifi network");
				}
			} else {
				waitTime(10000);
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
//				waitForElementDisplayed(AMDHomePage.objMaximizeIcon, 10);
				if (verifyIsElementDisplayed(AMDConsumptionScreen.objShareBtn)) {
					logger.info("Content playback is playing only on Wifi network");
					extent.extentLoggerPass("Play", "Content playback is playing only on Wifi network");
				} else {
					logger.error("Content playback is not playing only on Wifi network");
					extent.extentLoggerFail("Play", "Content playback is not playing only on Wifi network");
				}
			}
		} else {
			logger.error("Content playback is not playing on Wifi network");
			extent.extentLoggerFail("Play", "Content playback is not playing on Wifi network");
		}
		waitTime(5000);
//		Back(1);
		if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		}
		verifyElementPresentAndClick(AMDPlayerScreen.objPlayerBackbutton, "Back button in player");
		BackToLandingScreen();
	//	navigateBackToHomeLandingScreen();
		waitTime(2000);
		verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More menu icon");
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings option");
		click(AMDMoreMenu.objVideo_WifiOnly, "wifi toggle");

		// Auto play option validation
		WebElement autoPlaytoggle = findElement(AMDMoreMenu.objVideo_Autoply);
		int autoPlaytoggleX = wifitoggle.getLocation().getX();
		int autoPlaytoggleY = wifitoggle.getLocation().getY();

		WebElement autoPlaytext = findElement(AMDMoreMenu.objVideoStreamOverWifiOnlyOption);
		int autoPlaytextX = wifitext.getLocation().getX();
		int autoPlaytextY = wifitoggle.getLocation().getY();

		if (autoPlaytextY < (autoPlaytoggleY + 10)) {
			if (autoPlaytoggleX > autoPlaytextX) {
				logger.info("On/Off toggle is displayed at the right side of the 'Auto Play' option");
				extent.extentLoggerPass("Auto Play On/Off toggle",
						"On/Off toggle is displayed at the right side of the 'Auto Play' option");
			} else {
				logger.error("On/Off toggle is not displayed at the right side of the 'Auto Play' option");
				extent.extentLoggerFail("Auto Play On/Off toggle",
						"On/Off toggle is not displayed at the right side of the 'Auto Play' option");
			}
		}
		if (userType.equalsIgnoreCase("Guest")) {
			String elementAutoPlayToggleStatus = getText(AMDMoreMenu.objVideo_Autoply);
			if (elementAutoPlayToggleStatus.equalsIgnoreCase("ON")) {
				logger.info("Default state of the 'Auto Play' option is in ON state");
				extentLoggerPass("Video Auto Play", "Default state of the 'Auto Play' option is in ON state");
			} else {
				logger.info("Default state of the 'Auto Play' option is not in ON state");
				extentLoggerFail("Video Auto Play", "Default state of the 'Auto Play' option is not in ON state");
			}
		}
	}

/**
 * @implNote Thi smethod is to get the Carousel title from API
 * @param userType
 * @param pagenameforApi
 * @param pUsername
 * @param pPassword
 * @return
 */
	public static String getCarouselTitleFromAPI(String userType, String pagenameforApi, String pUsername,
			String pPassword) {
		Response respPage = ResponseInstance.getResponseForApplicasterPagesVersion2(userType, pagenameforApi, pUsername,
				pPassword);
		List<String> bucketsSize = respPage.jsonPath().getList("buckets");
		logger.info("bucketsSize: " + bucketsSize.size());
		String carouselContentTitle = null;
		main: for (int i = 0; i < bucketsSize.size(); i++) {
			String description = respPage.jsonPath().getString("buckets[" + i + "].short_description");

			if ((description.equalsIgnoreCase("Home Page Slider")) | (description.equalsIgnoreCase("Movies Banner"))) {
				List<String> carouselItems = respPage.jsonPath().getList("buckets[" + i + "].items");
				logger.info("carouselItems: " + carouselItems.size());

				for (int j = 0; j < 7; j++) {
					carouselContentTitle = respPage.jsonPath().getString("buckets[" + i + "].items[" + j + "].title");
					logger.info(carouselContentTitle);

					String CarouselContentBusinessType = respPage.jsonPath()
							.getString("buckets[" + i + "].items[" + j + "].business_type");
					logger.info(CarouselContentBusinessType);

					if (CarouselContentBusinessType.equalsIgnoreCase("premium_downloadable")) {
						break main;
					}
				}
			}
		}
		return carouselContentTitle;
	}
/**
 * @implNote This method is to validate the Display language settings
 * @param displayLanguageSelection1
 * @param displayLanguageSelection2
 * @throws Exception
 */
	public void settings_Language(String displayLanguageSelection1, String displayLanguageSelection2) throws Exception {
		extent.HeaderChildNode("Display language settings validation");
		System.out.println("\nDisplay language settings validation");

		verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More Menu tab");
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings option");
		waitTime(1000);
		Swipe("UP", 2);
		waitTime(1000);

		// Display language option validation
		WebElement selectedDisplayLanguages = findElement(AMDMoreMenu.objDisplayLang);
		int selectedDisplayLanguagesX = selectedDisplayLanguages.getLocation().getX();
		int selectedDisplayLanguagesY = selectedDisplayLanguages.getLocation().getY();

		WebElement displayLanguagetext = findElement(AMDMoreMenu.objDisplayLanguageOption);
		int displayLanguagetextX = displayLanguagetext.getLocation().getX();
		int displayLanguagetextY = displayLanguagetext.getLocation().getY();

		if (displayLanguagetextY < (selectedDisplayLanguagesY + 10)) {
			if (selectedDisplayLanguagesX > displayLanguagetextX) {
				logger.info("Selected Display language is displayed at the right side of the option");
				extent.extentLoggerPass("Display Language",
						"Selected Display language is displayed at the right side of the option");
			} else {
				logger.error("Selected Display language is not displayed at the right side of the option");
				extent.extentLoggerFail("Display Language",
						"Selected Display language is not displayed at the right side of the option");
			}
		}

		// Display language screen functionality validation
		click(AMDMoreMenu.objDisplayLang, "Display language");
		waitTime(2000);
		// There is no unique identifier to validate selected display language
		// Tick mark has been removed

		/*
		 * verifyElementPresent(AMDLoginScreen.objSelectedDisplayLanguage,
		 * "Selected display language"); String selectedlanguage1 =
		 * getText(AMDLoginScreen.objSelectedDisplayLanguage);
		 */
//		click(AMDOnboardingScreen.objSelectDisplayLang(displayLanguageSelection2), "language");
		SelectDisplayLanguage(displayLanguageSelection2);
		// There is no unique identifier to validate selected display language
		// Tick mark has been removed,hence commented the below code
		/*
		 * WebElement selectedDisplayLanguage =
		 * findElement(AMDLoginScreen.objSelectedDisplayLanguage); int
		 * selectedDisplayLanguageX = selectedDisplayLanguage.getLocation().getX(); int
		 * selectedDisplayLanguageY = selectedDisplayLanguage.getLocation().getY();
		 * 
		 * WebElement tickMark =
		 * findElement(AMDLoginScreen.objTickmarkforSelectedDisplayLanguage); int
		 * tickMarkX = tickMark.getLocation().getX(); int tickMarkY =
		 * tickMark.getLocation().getY();
		 * 
		 * if (tickMarkY < (selectedDisplayLanguageY + 20)) { if (tickMarkX <
		 * selectedDisplayLanguageX) { logger.
		 * info("Selected Display Language screen with tick mark at the left side is displayed"
		 * ); extent.extentLoggerPass("Selected Display Language",
		 * "Selected Display Language screen with tick mark at the left side is displayed"
		 * ); } else { logger.
		 * error("Selected Display Language screen with tick mark at the left side is not displayed"
		 * ); extent.extentLoggerFail("Selected Display Language",
		 * "Selected Display Language screen with tick mark at the left side is not displayed"
		 * ); } }
		 * 
		 * String selectedlanguage2 =
		 * getText(AMDLoginScreen.objSelectedDisplayLanguage);
		 * 
		 * if (selectedlanguage1 != selectedlanguage2) {
		 * logger.info("Display Language screen is functional");
		 * extentLoggerPass("Display language screen",
		 * "Display Language screen is functional"); } else {
		 * logger.info("Display Language screen is not functional");
		 * extentLoggerFail("Display language screen",
		 * "Display Language screen is not functional"); }
		 */
		int totalSelectedLanguages = getDriver().findElements(AMDLoginScreen.objSelectedDisplayLanguage).size();
		logger.info(totalSelectedLanguages);

		if (totalSelectedLanguages == 1) {
			logger.info("User can select only one display language");
			extentLoggerPass("Select one language", "User can select only one display language");
		}

		// ****** Validation of swipe functionality in the display language screen
//		click(AMDOnboardingScreen.objSelectDisplayLang(displayLanguageSelection1), "language");
//		Unable click on display lang with above code "AMDOnboardingScreen.objSelectDisplayLang(displayLanguageSelection1)" so created a new method to click
		SelectDisplayLanguage(displayLanguageSelection1);

//		String pos1 = getAttributValue("bounds", AMDOnboardingScreen.objSelectDisplayLang(displayLanguageSelection1));
//		String pos1 = getAttributValue("bounds", AMDLoginScreen.objSelectedDisplayLanguage);
//		String pos2 = null;
//		PartialSwipe("UP", 1);
//		Swipe("DOWN", 1);
////		pos2 = getAttributValue("bounds", AMDOnboardingScreen.objSelectDisplayLang(displayLanguageSelection1));
//		pos2 = getAttributValue("bounds", AMDLoginScreen.objSelectedDisplayLanguage);
//		if (pos1 != pos2) {
//			logger.info("Display Language screen is scrollable");
//			extentLoggerPass("Swipe", "Display Language screen is scrollable");
//		} else {
//			logger.info("Display Language screen is not scrollable");
//			extentLoggerFail("Swipe", "Display Language screen is not scrollable");
//		}

		verifyElementPresent(AMDOnboardingScreen.objDiplay_ContinueBtn, "Continue CTA");
		Back(1);
		Swipe("UP", 1);

		extent.HeaderChildNode("Content language settings validation");

		// content language option validation
		WebElement selectedContentLanguages = findElement(AMDMoreMenu.objContentLang);
		int selectedContentLanguagesX = selectedContentLanguages.getLocation().getX();
		int selectedContentLanguagesY = selectedContentLanguages.getLocation().getY();

		WebElement contentLanguagetext = findElement(AMDMoreMenu.objContentLanguageOption);
		int contentLanguagetextX = contentLanguagetext.getLocation().getX();
		int contentLanguagetextY = contentLanguagetext.getLocation().getY();

		if (contentLanguagetextY < (selectedContentLanguagesY + 10)) {
			if (selectedContentLanguagesX > contentLanguagetextX) {
				logger.info("Selected Content language is displayed at the right side of the option");
				extent.extentLoggerPass("Content Language",
						"Selected Content language is displayed at the right side of the option");
			} else {
				logger.error("Selected Content language is not displayed at the right side of the option");
				extent.extentLoggerFail("Content Language",
						"Selected Content language is not displayed at the right side of the option");
			}
		}

		click(AMDMoreMenu.objContentLang, "Content language");

		verifyElementExist(AMDOnboardingScreen.objContentLanguageContainer, "Content language screen");

		String position1 = getAttributValue("bounds", AMDOnboardingScreen.objSelectContentLang("Telugu"));
		String position2 = null;
		PartialSwipe("UP", 1);
		position2 = getAttributValue("bounds", AMDOnboardingScreen.objSelectContentLang("Telugu"));
		if (position1 != position2) {
			logger.info("Content Language screen is scrollable");
			extentLoggerPass("Content language", "Content Language screen is scrollable");
		} else {
			logger.info("Content Language screen is not scrollable");
			extentLoggerFail("Content language", "Content Language screen is not scrollable");
		}
		Back(1);
	}

	/**
	 * @implNote This method is to verify the About Us screen
	 * Author : Bhavana
	 */

	public void aboutUsScreenValidation(String userType) throws Exception {
		extent.HeaderChildNode("Verifying About Us screen as " + userType);
		System.out.println("\nVerifying About Us screen as " + userType);

		// To verify if appropriate page is displayed
		if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		} else {
			if (!verifyElementDisplayed(AMDMoreMenu.objMyTransactions)) {
				BackToLandingScreen();
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
			}
		}

		Swipe("UP", 1);
		swipeUntilFindElement(AMDMoreMenu.objAboutUs, "UP");
		verifyElementPresentAndClick(AMDMoreMenu.objAboutUs, "About Us option in More menu");
		verifyElementExist(AMDMoreMenu.objAboutUsHeader, "About Us Header");
		if (checkElementExist(AMDMoreMenu.objAboutUsHeader, "About Us Header")) {
			logger.info("User is navigated to About Us screen");
			extent.extentLoggerPass("About Us", "User is navigated to About Us screen");
		} else {
			logger.error("User is unable to navigate to About Us screen");
			extent.extentLoggerFail("About Us", "User is unable to navigate to About Us screen");
		}
		verifyElementExist(AMDMoreMenu.objcloseButton, "Close button in About Us Screen");
		verifyElementExist(AMDMoreMenu.objAboutUsDescription,
				"Breif Description about the Application in About Use Screen");

		PartialSwipe("UP", 2);
		swipeUntilFindElement(AMDMoreMenu.objHyperLinkInAboutUsScreen, "UP");
		verifyElementExist(AMDMoreMenu.objHyperLinkInAboutUsScreen, "Hyper link in About Us screen");
//		String str = getElementPropertyToString("content-desc",AMDMoreMenu.objHyperLinkInAboutUsScreen,"Hyper Link");
//		System.out.println("Hyper link in About us Sceen is " + str);
		click(AMDMoreMenu.objHyperLinkInAboutUsScreen, "Hyper link");
		if (verifyIsElementDisplayed(AMDMoreMenu.objPageNotFoundMsg)) {
			logger.error(
					"[Jira-Id: ZNA-2528|AMA2-5704] - On clicking the Hyper link, user is unable to navigate to the respective page of Hyper link");
			extent.extentLoggerFail("Hyper Link",
					"[Jira-Id: AMA2-5704]- On clicking the Hyper link, User is unable to navigate to the respective page of Hyper link");
			click(AMDMoreMenu.objcloseButton, "Close button");
		} else {
			logger.info("User is navigated to the respective page of the Hyper link");
			extent.extentLoggerPass("Hyper link", "User is navigated to the respective page of the Hyper link");
		}
		Back(1);
	}
/**
 * @implNote This method is to swipe till the element found
 * @param locator
 * @param direction
 * @return
 * @throws Exception
 */
	public boolean swipeUntilFindElement(By locator, String direction) throws Exception {

		boolean checkLocator, eletFound = false;
		if (direction.equalsIgnoreCase("UP")) {
			for (int i = 1; i < 25; i++) {
				PartialSwipe("UP", 1);
				checkLocator = verifyIsElementDisplayed(locator);
				if (checkLocator) {
					eletFound = true;
					break;
				}
			}
		}

		if (direction.equalsIgnoreCase("DOWN")) {
			for (int i = 1; i < 25; i++) {
				PartialSwipe("DOWN", 1);
				checkLocator = verifyIsElementDisplayed(locator);
				if (checkLocator) {
					eletFound = true;
					break;
				}
			}
		}
		return eletFound;
	}

	/**
	 * @implNote This method will verify if quality in Downloads is set to Ask everytime by default
	 * Author : MANASA Module : Download
	 */
	public void downloadSettingsValidation() throws Exception {
		extent.HeaderChildNode("Verify if Quality in Downloads is set to Ask Everytime by default");
		System.out.println("\nDownload settings validation");
		verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings option");
		String quality = getText(AMDMoreMenu.objDownloads_Quality);
		System.out.println(quality);
		if (quality.equalsIgnoreCase("Ask each time")) {
			logger.info("Download Quality is set to " + quality + " by default");
			extent.extentLoggerPass("Download Quality", "Download Quality is set to " + quality + " by default");

		} else {
			logger.error("Download Quality is not set to Ask Each Time  by default");
			extent.extentLoggerFail("Download Quality", "Download Quality is not set to Ask Each Time  by default");
		}

		String state = getText(AMDMoreMenu.objDownloads_WifiOnly);
		System.out.println(state);
		if (pUserType.equalsIgnoreCase("Guest")) {
			if (state.equalsIgnoreCase("OFF")) {
				logger.info("Download over WiFi only option is in  " + state + " state by default");
				extent.extentLoggerPass("On/Off",
						"Download over WiFi only option is in  " + state + " state by default");

			} else {
				logger.error("Download over WiFi only option is not in OFF state by default ");
				extent.extentLoggerFail("On/Off", "Download over WiFi only option is not in OFF state by default ");
			}
		} else {
			logger.info("Download over WiFi only option is in " + state + " state for " + pUserType);
			extent.extentLoggerPass("On/Off",
					"Download over WiFi only option is in " + state + " state for " + pUserType);
		}

		WebElement onOffToggle = findElement(AMDMoreMenu.objDownloads_WifiOnly);
		int toggleRightX = onOffToggle.getLocation().getX();
		System.out.println(toggleRightX);
		Dimension sizee = getDriver().manage().window().getSize();
		System.out.println(sizee.getWidth());
		int sizeee = sizee.getWidth() - 300;

		if (toggleRightX >= sizeee) {
			logger.info("On/Off toggle is displayed at right side of the option");
			extent.extentLoggerPass("On/Off Toggle", "On/Off toggle is displayed at right side of the option");
		} else {
			logger.error("On/Off toggle is not displayed at right side of the option");
			extent.extentLoggerFail("On/Off Toggle", "On/Off toggle is not displayed at right side of the option");
		}
		verifyElementPresentAndClick(AMDMoreMenu.objDownloads_Quality, "Download Quality Settings option");
		extent.HeaderChildNode("To verify if Select Download Video Quality screen is displayed");
		if (checkElementExist(AMDSettingsScreen.objSelectVideoQualityLabel, "Select Video Download Quality")) {
			logger.info("Navigated to Select Download Video Quality screen");
			extent.extentLoggerPass("Quality", "Navigated to Select Download Video Quality screen");
		} else {
			logger.error("Not navigated to Select Download Video Quality screen");
			extent.extentLoggerFail("Quality", "Not navigated to Select Download Video Quality screen");
		}
		verifyElementExist(AMDSettingsScreen.objVideoQualityBest, "Best Quality Option");
		verifyElementExist(AMDSettingsScreen.objVideoQualityBetter, "Better Quality Option");
		verifyElementExist(AMDSettingsScreen.objVideoQualityGood, "Good Quality Option");
		verifyElementExist(AMDSettingsScreen.objVideoQualityDatasaver, "Data Saver Quality Option");
		verifyElementExist(AMDSettingsScreen.objVideoQualityAskEachTime, "Ask Each Time Option");
// Tick mark has been removed so commenting this line of code		
//		verifyElementExist(AMDSettingsScreen.objTickMark, "Tick mark");
		verifyElementPresentAndClick(AMDSettingsScreen.objXButton, "X Button");
	}
/**
 * @implNote This method will validate the Search history
 * @param userType
 * @throws Exception
 */
	public void searchHistoryValidation(String userType) throws Exception {
		extent.HeaderChildNode("Search History Validation");
		System.out.println("\nSearch History Validation");

		verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More Menu tab");
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings option");
		waitTime(3000);
		Swipe("UP", 2);
		waitTime(2000);
		WebElement clear = findElement(AMDSettingsScreen.objClearSearchHistory);
		int clearRightX = clear.getLocation().getX();
		Dimension sizee = getDriver().manage().window().getSize();
		int sizeee = sizee.getWidth() / 2;
		if (clearRightX >= sizeee) {
			logger.info("Clear option is displayed at the right side of the Search History");
			extent.extentLoggerPass("Clear", "Clear option is displayed at the right side of the Search History");
		} else {
			logger.error("Clear option is not displayed at the right side of the Search History");
			extent.extentLoggerFail("Clear", "Clear option is not displayed at the right side of the Search History");
		}
		verifyElementPresentAndClick(AMDSettingsScreen.objClearSearchHistory, "Clear Search History");
	}
/**
 * @implNote This method is to validate the Activate Device Screen
 * @param userType
 * @throws Exception
 */
	public void authenticateDeviceValidation(String userType) throws Exception {
		extent.HeaderChildNode("ActivateDevice screen validation");
		logger.info("ActivateDevice screen validation");
		if (!userType.equalsIgnoreCase("Guest")) {
			waitTime(3000);
			click(AMDMoreMenu.objActivateDevice, "Activate Device");
			waitForElementDisplayed(AMDActivateDevicePage.objActivateDeviceTitle, 40);
			if (verifyElementDisplayed(AMDActivateDevicePage.objActivateDeviceTitle)) {
				logger.info("User navigated to Activate ZEE5 on your TV screen post taping on Activate Device");
				extent.extentLoggerPass("Activate Device",
						"User navigated to Activate ZEE5 on your TV screen post taping on Activate Device");
			} else {
				logger.error("User not navigated to Activate ZEE5 on your TV screen post taping on Activate Device");
				extent.extentLoggerFail("Activate Device",
						"User not navigated to Activate ZEE5 on your TV screen post taping on Activate Device");
			}
			if (verifyElementDisplayed(AMDActivateDevicePage.objActivationDescription)) {
				logger.info("Enter the Activation Code displayed on your TV scree message is displayed");
				extent.extentLoggerPass("Activate Device screen Description",
						"Enter the Activation Code displayed on your TV scree message is displayed");
			} else {
				logger.error("Enter the Activation Code displayed on your TV scree message is not displayed");
				extent.extentLoggerFail("Activate Device screen Description",
						"Enter the Activation Code displayed on your TV scree message is not displayed");
			}
			if (verifyElementDisplayed(AMDActivateDevicePage.objActivateScreencloseButton)) {
				logger.info("Close Button is displayed on Activate Device Screen");
				extent.extentLoggerPass("Activate Device Screen Close Button",
						"Close Button is displayed on Activate Device Screen");
			} else {
				logger.error("Close Button is not displayed on Activate Device Screen");
				extent.extentLoggerFail("Activate Device Screen Close Button",
						"Close Button is not displayed on Activate Device Screen");
			}
			if (verifyElementDisplayed(AMDActivateDevicePage.objInputField1)) {
				logger.info("Input Filed is displayed");
				extent.extentLoggerPass("Activate Device Screen Input Field", "Input Filed is displayed");
			} else {
				logger.error("Input Filed is not displayed");
				extent.extentLoggerFail("Activate Device Screen Input Field", "Input Filed is not displayed");
			}
			if (verifyElementDisplayed(AMDActivateDevicePage.objActivateCTA)) {
				logger.info("Activate CTA is displayed in Activate Device Screen");
				extent.extentLoggerPass("Activate CTA", "Activate CTA is displayed in Activate Device Screen");

				if (verifyElementDisplayed(AMDActivateDevicePage.objActivateCTADisabled)) {
					logger.info("Activate CTA is displayed in disabled state by default in Activate Device Screen");
					extent.extentLoggerPass("Activate CTA Disabled state",
							"Activate CTA is displayed in disabled state by default in Activate Device Screen");
				} else {
					logger.error("Close Button is not displayed on Activate Device Screen");
					extent.extentLoggerFail("Activate CTA Disabled state",
							"Activate CTA is displayed in enabled state by default in Activate Device Screen");
				}

			} else {
				logger.error("Activate CTA is not displayed in Activate Device Screen");
				extent.extentLoggerFail("Activate CTA", "Activate CTA is not displayed in Activate Device Screen");
			}
			if (verifyElementDisplayed(AMDActivateDevicePage.objInputField1)) {
				logger.info("Input Field is displayed in Activate Device Screen");
				extent.extentLoggerPass("Input Field", "Input Field is displayed in Activate Device Screen");
				verifyElementPresentAndClick(AMDActivateDevicePage.objInputField1, "Input Field");
				waitTime(2000);
				type(AMDActivateDevicePage.objInputField1, "A", "Input Field");
				hideKeyboard();
				type(AMDActivateDevicePage.objInputField2, "3", "Input Field");
				hideKeyboard();
				type(AMDActivateDevicePage.objInputField3, "3", "Input Field");
				hideKeyboard();
				type(AMDActivateDevicePage.objInputField4, "5", "Input Field");
				hideKeyboard();
				type(AMDActivateDevicePage.objInputField5, "F", "Input Field");
				hideKeyboard();
				type(AMDActivateDevicePage.objInputField6, "T", "Input Field");
				hideKeyboard();
				waitTime(2000);

				if (verifyElementDisplayed(AMDActivateDevicePage.objActivateCTAEnabled)) {
					logger.info("Activate CTA is enabled on entering Device code");
					extent.extentLoggerPass("Activate CTA Enabled state",
							"Activate CTA is enabled on entering Device code");
				} else {
					logger.error("Activate CTA is not enabled on entering Device code");
					extent.extentLoggerFail("Activate CTA Disabled state",
							"Activate CTA is not enabled on entering Device code");
				}
				verifyElementPresentAndClick(AMDActivateDevicePage.objActivateCTAEnabled, "Activate CTA");
				if (verifyElementDisplayed(AMDActivateDevicePage.objInvalidCode)) {
					logger.info("Device with code Not Found error message is displayed");
					extent.extentLoggerPass("Invalid Device code",
							"Device with code Not Found error message is displayed");
				} else {
					logger.error("Device with code Not Found error message is not displayed");
					extent.extentLoggerFail("Invalid Device code",
							"Device with code Not Found error message is not displayed");
				}
				verifyElementPresentAndClick(AMDActivateDevicePage.objActivateScreencloseButton, "Close Button");
				waitTime(2000);
				if (verifyElementDisplayed(AMDMoreMenu.objvideoQualityOption)) {
					logger.info("User is navigated to Settings screen on tapping Close button");
					extent.extentLoggerPass("Close Button",
							"User is navigated to Settings screen on tapping Close button");
				} else {
					logger.error("User is not navigated to Settings screen on tapping Close button");
					extent.extentLoggerFail("Close Button",
							"User is not navigated to Settings screen on tapping Close button");
				}
			} else {
				logger.error("Activate CTA is not displayed in Activate Device Screen");
				extent.extentLoggerFail("Activate CTA", "Activate CTA is not displayed in Activate Device Screen");
			}

		} else {
			logger.info("Activate Device" + " Not applicable for " + userType + "user");
			extent.extentLogger("Activate Device", " Not applicable for " + userType);
		}
	}
/**
 * @implNote Method will validate the reset settings
 * @param userType
 * @throws Exception
 */
	public void resetSettingsValidation(String userType) throws Exception {
		extent.HeaderChildNode("Reset Settings Validation");
		System.out.println("\nReset Settings Validation");
		verifyElementExist(AMDSettingsScreen.objResetSettings, "Reset Setting to Default");
		verifyElementPresentAndClick(AMDSettingsScreen.objDefaultSetting, "Default Setting Link");
		verifyElementExist(AMDSettingsScreen.objResetSettingPopUp,
				"Are you sure you want to reset your settings?  popup");
		verifyElementExist(AMDSettingsScreen.objNoCTA, "No CTA");
		verifyElementExist(AMDSettingsScreen.objYesCTA, "Yes CTA");
		verifyElementPresentAndClick(AMDSettingsScreen.objNoCTA, "No CTA");
		if (verifyElementIsNotDisplayed(AMDSettingsScreen.objResetSettingPopUp)) {
			logger.info("No CTA is functional & popup disappeared");
			extentLoggerPass("ResetSettingPopUp", "No CTA is functional & popup disappeared");
		} else {
			logger.error("No CTA is not functional & popup not disappeared");
			extentLoggerFail("ResetSettingPopUp", "No CTA is not functional & popup not disappeared");
		}
		verifyElementPresentAndClick(AMDSettingsScreen.objDefaultSetting, "Default Setting Link");
		verifyElementPresentAndClick(AMDSettingsScreen.objYesCTA, "Yes CTA");
		if (verifyElementIsNotDisplayed(AMDSettingsScreen.objResetSettingPopUp)) {
			logger.info("Yes CTA is functional");
			extentLoggerPass("ResetSettingPopUp", "Yes CTA is functional");
		} else {
			logger.error("Yes CTA is not functional");
			extentLoggerFail("ResetSettingPopUp", "Yes CTA is not functional");
		}
//		verifyElementExist(AMDSettingsScreen.objLoadingAnimator, "Loading Animator");
//		verifyElementExist(AMDSettingsScreen.objUpdateSettingsMessage,
//				"Please wait while we update your settings message");

	}

	/**
	 * @implNote Method is to verify the content language screen
	 * Author : Bindu Module : Exit_PopUp
	 */
	public void verifyDisplayLanguageScreenExitPopup(String userType) throws Exception {
		extent.HeaderChildNode("Verify Content Language Screen");
		System.out.println("\nVerify Content Language Screen Exit Popup");
		if (userType.equalsIgnoreCase("Guest")) {

			relaunch(true);
			// wait(1000);
			accessDeviceLocationPopUp("Allow", userType);
			// verifyElementExist(AMDOnboardingScreen.objDiplay_ContinueBtn, "Continue
			// button (Display-LanguageScreen)");
			Back(1);
			waitTime(1000);

			extent.HeaderChildNode("Verify Exit Popup comprises of text message");
			verifyElementExist(AMDOnboardingScreen.objExitPopup, "Exit Popup is displayed");
			String Exitpopup = getDriver().findElement(AMDOnboardingScreen.objExitPopup).getText();
			System.out.println(Exitpopup);
			if (Exitpopup.equalsIgnoreCase("Are you sure you want to exit ZEE5?")) {
				logger.info("Exit popup is displayed with message Are you sure you want to exit Zee5?");
				extent.extentLoggerPass("Content Language Screen",
						"Exit popup is displayed with message Are you sure you want to exit Zee5?");
			} else {
				logger.error("Exit popup is not displayed with message Are you sure you want to exit Zee5?");
				extent.extentLoggerFail("Content Language Screen",
						"Exit popup is displayed with message Are you sure you want to exit Zee5?");
			}
			verifyElementExist(AMDOnboardingScreen.objExitYes, "Exit Popup with Yes CTA");
			verifyElementExist(AMDOnboardingScreen.objExitNo, "Exit Popup with No CTA");

			extent.HeaderChildNode("Verify Exip popup closes on tapping on NO CTA");
			click(AMDOnboardingScreen.objExitNo, "Exit Popup with No CTA");
			// waitTime(2000);
			if (!(verifyIsElementDisplayed(AMDOnboardingScreen.objExitPopup))) {
				logger.info("Exit Popup closes when user taps on No CTA");
				extent.extentLoggerPass("Content Language Screen", "Exit popup closes when user taps on No CTA");
			} else {
				logger.error("Exit Popup not closed when user taps on No CTA");
				extent.extentLoggerFail("Content Language Screen", "Exit Popup not closed when user taps on No CTA");
			}

			extent.HeaderChildNode("Verify Exit Popup closes by pulling down the Popup manually");
			Back(1);
			verifyElementPresentAndClick(AMDOnboardingScreen.objExitPopupDivider, "ExitPopup Divider");
			waitTime(2000);
			if (!(verifyIsElementDisplayed(AMDOnboardingScreen.objExitPopup))) {
				logger.info("Exit popup closes by pulling down the popup manually");
				extent.extentLoggerPass("Content Language Screen",
						"Exit popup closes by pulling down the popup manually");
			} else {
				logger.error("Exit popup not closed by pulling down the popup manually");
				extent.extentLoggerFail("Content Language Screen",
						"Exit popup not closed by pulling down the popup manually");
			}

			extent.HeaderChildNode(
					"Verify Exit Popup closes by tapping on the Horizontal line bar which appears on the popup");
			Back(1);
			verifyElementPresentAndClick(AMDOnboardingScreen.objExitPopupHorizontalLinebar,
					"Exit Popup Horizontal LineBar");
			if (!(verifyIsElementDisplayed(AMDOnboardingScreen.objExitPopup))) {
				logger.info("Exit Popup closes by tapping on the Horizontal Line Bar");
				extent.extentLoggerPass("Content Language Screen",
						"Exit Popup closes by tapping on the Horizontal Line Bar");
			} else {
				logger.error("Exit Popup not closed by tapping on the Horizontal Line Bar");
				extent.extentLoggerFail("Content Language Screen",
						"Exit Popup not closed by tapping on the Horizontal Line Bar");
			}

			extent.HeaderChildNode("Verify Exit Popup closes by tapping on the Screen");
			Back(1);
			verifyElementPresentAndClick(AMDOnboardingScreen.objExitPopupDivider, "ExitPopup Divider");
			waitTime(2000);
			if (!(verifyIsElementDisplayed(AMDOnboardingScreen.objExitPopup))) {
				logger.info("Exit Popup closes by tapping on the screen");
				extent.extentLoggerPass("Content Language Screen", "Exit Popup closes by tapping on the screen");
			} else {
				logger.error("Exit Popup not closed by tapping on the screen");
				extent.extentLoggerFail("Content Language Screen", "Exit Popup not closed by tapping on the screen");
			}

			extent.HeaderChildNode(" Verify Exit Popuop displayed on tapping device back button");
			Back(1);
			if (checkElementExist(AMDOnboardingScreen.objExitPopup, "Exit Popup is displayed")) {
				logger.error("Exit Popup appears when user taps on device back button");
				extent.extentLoggerPass("Content Language Screen",
						"Exit Popup appears when user taps on device back button");
			} else {
				logger.info("Exit Popup not appeared when user taps on device back button");
				extent.extentLoggerFail("Content Language Screen",
						"Exit Popup not appeared when user taps on device back button");

			}

			extent.HeaderChildNode("Verify Exit Popup closes when user taps on device back button");
			Back(1);
			if (!(verifyIsElementDisplayed(AMDOnboardingScreen.objExitPopup))) {
				logger.info("Exit Popup closes by tapping on the device back button");
				extent.extentLoggerPass("Content Language Screen",
						"Exit Popup closes by tapping on the device back button");
			} else {
				logger.error("Exit Popup not closed by tapping on the device back button");
				extent.extentLoggerFail("Content Language Screen",
						"Exit Popup not closed by tapping on the device back button");
			}

			extent.HeaderChildNode("Verify that user exists the app on tapping the Yes CTA in the Exit Popup");
			Back(1);
			verifyElementPresentAndClick(AMDOnboardingScreen.objExitYes, "Exit Popup with Yes CTA");
			waitTime(2000);
			if (!(verifyIsElementDisplayed(AMDOnboardingScreen.objExitPopup))) {
				logger.info("User exists from the app when user taps on Yes CTA");
				extent.extentLoggerPass("Content Language Screen",
						"User exists from the app when user taps on Yes CTA");
			} else {
				logger.error("User not exists from the app when user taps on Yes CTA");
				extent.extentLoggerFail("Content Language Screen",
						"User not exists from the app when user taps on Yes CTA");
			}
			relaunch(true);
		} else {
			logger.info("Display Language Screen validation is not applicable for " + userType);
			extent.extentLoggerPass("Content Language Screen",
					"Content Language Screen validation is not applicable for " + userType);
		}
	}
/**
 * @implNote This method is to Login into application after logout
 * @param userType
 * @throws Exception
 */
	public void loginAfterLogout(String userType) throws Exception {
		extent.HeaderChildNode("LogIn as " + userType);
		System.out.println("\nLogIn as " + userType);
		if (userType.contentEquals("NonSubscribedUser")) {
			click(AMDMoreMenu.objProfile, "Profile");
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");

			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
		}

		if (userType.contentEquals("SubscribedUser")) {
			click(AMDMoreMenu.objProfile, "Profile");

			String SubscribedUsername = getParameterFromXML("SubscribedUserName");
			String SubscribedPassword = getParameterFromXML("SubscribedPassword");

			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SubscribedUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
		}
	}

	/**
	 * @implNote This method is to validate Logout option in Offline
	 * @param userType
	 * @throws Exception
	 */
	public void logoutOfflineValidation(String userType) throws Exception {

		if (userType.contentEquals("NonSubscribedUser") || userType.contentEquals("SubscribedUser")) {
			extent.HeaderChildNode("Offline Validation of Logout option as " + userType);
			System.out.println("Offline Validation of Logout option as " + userType);
			click(AMDHomePage.objMoreMenu, "More menu");
			Swipe("UP", 2);
			click(AMDMoreMenu.objLogout, "Logout option in More menu");
			setWifiConnectionToONOFF("Off");
			// Now we are getting You aren't connected to the Internet toast message
			/*
			 * verifyElementExist(AMDMoreMenu.objNetworkerrormsg,
			 * "Internet connectivity error message");
			 * 
			 * if (checkElementExist(AMDMoreMenu.objNetworkerrormsg,
			 * "Internet connectivity error message")) { logger.info(
			 * "Internet connectivity ERROR message is displayed on clicking Logout button without Internet"
			 * ); extent.extentLoggerPass(" Logout button",
			 * "Internet connectivity ERROR message is displayed on clicking Logout button without Internet"
			 * ); } else { logger.error(
			 * "Internet connectivity ERROR message is NOT displayed on clicking Logout button without Internet"
			 * ); extent.extentLoggerFail(" Logout button",
			 * "Internet connectivity ERROR message is NOT displayed on clicking Logout button without Internet"
			 * ); }
			 */
			setWifiConnectionToONOFF("On");
			Back(1);
			click(AMDHomePage.HomeIcon, "Home Icon");
		}
	}
/**
 * @implNote This method is to validate the Listing collection screen from All landing screen
 * @param userType
 * @throws Exception
 */
	public void listingCollectionValidationFromLandingScreen(String userType) throws Exception {
		extent.HeaderChildNode("Listing Collection screen validation from All Landing Screen");
		System.out.println("\nListing Collection screen validation from All Landing Screen");

		click(AMDHomePage.objHome, "Home button");

		waitTime(5000); // To Load the landing page completely
		boolean lastTab = false, loadingIcon = false, navigationFlag = false;
		int noOfTabs = getCount(AMDHomePage.objTitle);
		String getTrayName = null, getPageTitle;

		System.out.println("\nTop Nagivation Tabs: " + noOfTabs);
		for (int i = 1; i < 10; i++) {
			String tabName = null;
			if (i == noOfTabs) {
				if (!lastTab) {
					i = noOfTabs - 1;
				}
//				WebElement eleTab = getDriver().findElement(By.xpath("(//*[@resource-id='com.graymatrix.did:id/title'])[" + i + "]"));
				WebElement eleTab = getDriver()
						.findElement(By.xpath("(//*[@id='homeTabLayout']/*/child::*)[" + i + "]"));
				eleTab.click();
				tabName = getText(AMDHomePage.objSelectedTab);
			} else {
//				WebElement eleTab = getDriver().findElement(By.xpath("(//*[@resource-id='com.graymatrix.did:id/title'])[" + i + "]"));
				WebElement eleTab = getDriver()
						.findElement(By.xpath("(//*[@id='homeTabLayout']/*/child::*)[" + i + "]"));
				eleTab.click();
				tabName = getText(AMDHomePage.objSelectedTab);
			}

			System.out.println(getText(AMDHomePage.objSelectedTab) + " Landing Screen");

			waitTime(3000);
			if (verifyIsElementDisplayed(AMDGenericObjects.objFirstTrayTitle)) {
				loadingIcon = false;
			} else if (verifyIsElementDisplayed(AMDGenericObjects.objPageLoadingIcon)) {
				loadingIcon = true;
				System.out.println("\nContinuous Loading screen displayed");
			}

			if (!loadingIcon) {
				if (userType.equalsIgnoreCase("Guest")) {
					getTrayName = getText(AMDGenericObjects.objFirstTrayTitle);
					System.out.println("Title: " + getTrayName);
					click(AMDHomePage.objViewAllBtn(getTrayName), getTrayName + " - View All button");
				} else {
					if (verifyIsElementDisplayed(AMDHomePage.objContinueWatchingTray)
							| verifyIsElementDisplayed(AMDHomePage.objBannerAd)) {
						Swipe("UP", 1);
						waitTime(2000);
					}
					PartialSwipe("UP", 1);
					waitTime(2000);
					int noOfTrays = getCount(AMDGenericObjects.objNoOfTrays);
					if (noOfTrays > 0) {
						if (tabName.contains("Live TV")) {
							getTrayName = getText(AMDGenericObjects.objFirstTrayTitle);
//							click(AMDGenericObjects.objFirstTrayTitle, getText(AMDGenericObjects.objFirstTrayTitle));
							click(AMDHomePage.objViewAllBtn(getTrayName), getTrayName + " - View All button");
						} else {
							if (tabName.contains("Music")) {
								PartialSwipe("UP", 2);
								waitTime(2000);
							}
//							getTrayName = getText(AMDGenericObjects.objTrayTitleByIndx(noOfTrays));
							getTrayName = getText(AMDGenericObjects.objFirstTrayTitle);
							click(AMDHomePage.objViewAllBtn(getTrayName), getTrayName + " - View All button");
						}

					}
				}

				getPageTitle = getText(AMDHomePage.objTitle);
				if (getTrayName.contains(getPageTitle)) {
					navigationFlag = true;
					extent.extentLoggerPass("Listing Collection", tabName + ": " + userType
							+ " is able to navigate to listing collection: " + getTrayName + " Screen");
					logger.info(
							userType + " User is able to navigate to listing collection: " + getTrayName + " Screen");
				} else {
					extent.extentLoggerFail("Listing Collection", tabName + ": " + userType
							+ " failed to navigate to listing collection: " + getTrayName + " Screen");
					logger.error(
							userType + " User failed to navigate to listing collection: " + getTrayName + " Screen");
				}

				// Navigates back to landing screen
				if (navigationFlag) {
					Back(1);
				}
			} else {
				extent.extentLoggerFail("Listing Collection", tabName + ": Failed to load the Page");
				logger.error(tabName + ": FAILED to Load the page");
			}

			// Following code is to break the loop after last tab validation in the landing
			// screen
			if (lastTab) {
				break;
			}
			if (tabName.equalsIgnoreCase("Music")) {
				lastTab = true;
			}
		}
	}
/**
 * @implNote This method will validate the Listing collection Screen from Consumption screen
 * @param userType
 * @throws Exception
 */
	@SuppressWarnings("unused")
	public void listingCollectionValidationFromConsumptionScreen(String userType) throws Exception {
		extent.HeaderChildNode("Listing Collection Screen validation from Consumption Screen");
		System.out.println("\nListing Collection Screen validation from Consumption Screen");

		click(AMDHomePage.objHome, "Home button");

		waitTime(5000); // To Load the landing page completely
		boolean lastTab = false, loadingIcon = false;
		int noOfTabs = getCount(AMDHomePage.objTitle);
		String getTrayName = null, getPageTitle;
		String width = null, height = null, bounds, getboundvalue;

		System.out.println("\nTop Nagivation Tabs: " + noOfTabs);
		for (int i = 1; i < 10; i++) {
			String tabName = null, pageNameAPI = null;
			boolean navigationFlag = false;
			if (i == noOfTabs) {
				if (!lastTab) {
					i = noOfTabs - 1;
				}
//				WebElement eleTab = getDriver().findElement(By.xpath("(//*[@resource-id='com.graymatrix.did:id/title'])[" + i + "]"));
				WebElement eleTab = getDriver()
						.findElement(By.xpath("(//*[@id='homeTabLayout']/*/child::*)[" + i + "]"));
				eleTab.click();
				tabName = getText(AMDHomePage.objSelectedTab);
			} else {
//				WebElement eleTab = getDriver().findElement(By.xpath("(//*[@resource-id='com.graymatrix.did:id/title'])[" + i + "]"));
				WebElement eleTab = getDriver()
						.findElement(By.xpath("(//*[@id='homeTabLayout']/*/child::*)[" + i + "]"));
				eleTab.click();
				tabName = getText(AMDHomePage.objSelectedTab);
			}

			System.out.println(getText(AMDHomePage.objSelectedTab) + " Landing Screen");

			waitTime(6000);
			if (verifyIsElementDisplayed(AMDGenericObjects.objFirstTrayTitle)) {
				loadingIcon = false;
				if (!tabName.equalsIgnoreCase("Live TV")) {
					width = getAttributValue("width", AMDHomePage.objCarouselConetentCard);
					bounds = getAttributValue("bounds", AMDHomePage.objCarouselConetentCard);
					getboundvalue = bounds.replaceAll(",", " ").replaceAll("]", " ");
					height = getboundvalue.split(" ")[1];
				}

			} else if (verifyIsElementDisplayed(AMDGenericObjects.objPageLoadingIcon)) {
				loadingIcon = true;
				System.out.println("\nContinuous Loading screen displayed");
			}

			switch (tabName) {
			case "Home":
				pageNameAPI = "homepage";
				break;

			case "Shows":
				pageNameAPI = "tvshows";
				break;

			case "Movies":
				pageNameAPI = "movies";
				break;

			case "Premium":
				pageNameAPI = "premiumcontents";
				break;

			case "Club":
				pageNameAPI = "5851";
				break;

			case "News":
				pageNameAPI = "5857";
				break;

			case "Kids":
				pageNameAPI = "3673";
				break;

			case "Eduauraa":
				pageNameAPI = "6184";
				break;

			case "Music":
				pageNameAPI = "2707";
				break;

			case "Live TV":
				String Url = "https://catalogapi.zee5.com/v1/channel/bygenre?sort_by_field=channel_number&sort_order=ASC&page=1&page_size=100&genres=FREE%20Channels%2CNews%2CHindi%20Entertainment%2CKids%2CMusic%2CElectro%20Dance%20Music%2CHindi%20Movies%2CEnglish%20Entertainment%2CHindi%20News%2CEnglish%20News%2CMarathi%2CTamil%2CTelugu%2CKannada%2CMalayalam%2CBengali%2CPunjabi%2CGujarati%2COdiya%2CEntertainment%2CMovie%2CLifestyle%2CDevotional%2CComedy%2CDrama%2CSports%2CInfotainment%2CMythology%2CEducation%2CTrap%2CCrime%20%26%20Mystery%2CFREE%20News%20Channels%2CSunburn%2CIndie%2CFitness%2CLive%20Event%2CMusical%2CSpiritual&languages=en,kn&translation=en&country=IN";
				break;

			case "Web Series":
				pageNameAPI = "zeeoriginals";
				break;

			default:
				break;
			}

			if (!loadingIcon) {

//				if(pageNameAPI!=null) {
//					String courselContentTitle = carouselValidationWithApi(userType, pageNameAPI);
//					System.out.println("API Card : "+courselContentTitle);
//					
//					for(int k=1;k<=7; k++) {
//						if (verifyIsElementDisplayed(AMDGenericObjects.objCarouselTitle(courselContentTitle))) {
//							click(AMDGenericObjects.objCarouselTitle(courselContentTitle), courselContentTitle);
//							break;
//						} else {
//							carouselCardsSwipe("LEFT", 1, width, height);
//						}
//					}
//				}else {
//					click(AMDHomePage.objCarouselTitle, getText(AMDHomePage.objCarouselTitle));
//				}

				if (tabName.equalsIgnoreCase("Live TV")) {
					waitTime(2000);
					waitForElementDisplayed(AMDGenericObjects.objNoOfTrays, 3000);
					click(AMDHomePage.objFirstChannelCard, "First available channel");
				} else {
					click(AMDHomePage.objCarouselTitle, getText(AMDHomePage.objCarouselTitle));
					if (userType.equalsIgnoreCase("SubscribedUser")) {
						waitForElementDisplayed(AMDGenericObjects.objFirstTrayTitle, 3000);
					}
				}

				if (userType.contains("Guest") | userType.contains("NonSubscribedUser")) {
					waitTime(5000);
					if (verifyIsElementDisplayed(AMDGenericObjects.objPopUpDivider)
							|| verifyIsElementDisplayed(AMDGenericObjects.objCheckTitle("Subscribe"))) {
						dismissInterruptionScreen();
						if (verifyElementDisplayed(AMDGenericObjects.objPopUpDivider)) {
							click(AMDGenericObjects.objPopUpDivider, "Subcription Pop Up");
							extent.extentLoggerPass("Subscription PopUp", userType
									+ "Subcription PopUp is displayed in the comsumption screen and popup is closed");
							logger.info("Subcription PopUp is displayed in the comsumption screen and popup is closed");
						} else if (verifyElementDisplayed(AMDGenericObjects.objCheckTitle("Subscribe"))) {

							extent.extentLogger("Interruption Screen", userType
									+ "Subscribe screen is displayed in the comsumption screen hence dismissing the screen");
							logger.info(
									"Subscribe screen is displayed in the comsumption screen hence dismissing the screen");
							Back(1);
							click(AMDHomePage.objCarouselTitle, getText(AMDHomePage.objCarouselTitle));
						} else {
							registerPopUpClose();
							completeProfilePopUpClose(pUserType);
							PartialSwipeInConsumptionScreen("UP", 1);
							waitForElementDisplayed(AMDGenericObjects.objFirstTrayTitle, 3000);
						}
					}
				}

				if (tabName.equalsIgnoreCase("Eduauraa")) {
					PartialSwipeInConsumptionScreen("UP", 2);
				}

				if (tabName.contains("Live TV") && (verifyIsElementDisplayed(AMDGenericObjects.objPageLoadingIcon))) {
					extent.extentLoggerPass("Listing Trays",
							"Rails are unavailable in Live TV: NEWS Consumption screen");
					logger.info("Rails are unavailable in Live TV: NEWS Consumption screen");
					navigationFlag = true;
				} else {

					if (verifyIsElementDisplayed(AMDConsumptionScreen.objContentInfo)) {
						PartialSwipeInConsumptionScreen("UP", 1);
						int noOfTrays = getCount(AMDGenericObjects.objNoOfTrays);
						if (noOfTrays > 0) {
							waitTime(1000);
							getTrayName = getText(AMDGenericObjects.objConsumptionScreenFirstRail);
							click(AMDHomePage.objViewAllBtn(getTrayName), getTrayName + " - View All button");
						} else {
							extent.extentLoggerWarning("Consumption Screen",
									"Interruption screen is displayed in the comsumption screen and No Rails available");
							logger.info(
									"Interruption PopUp is displayed in the comsumption screen and No Rails available");
						}
					} else {
						if (verifyIsElementDisplayed(AMDGenericObjects.objPopUpDivider)
								|| verifyIsElementDisplayed(AMDGenericObjects.objCheckTitle("Subscribe"))) {
							if (userType.equalsIgnoreCase("Guest")) {
								if (verifyElementDisplayed(AMDGenericObjects.objPopUpDivider)) {
									click(AMDGenericObjects.objPopUpDivider, "Subcription Pop Up");
									extent.extentLoggerPass("Subscription PopUp", userType
											+ "Subcription PopUp is displayed in the comsumption screen and popup is closed");
									logger.info(
											"Subcription PopUp is displayed in the comsumption screen and popup is closed");
								}
								PartialSwipe("UP", 1);
								getTrayName = getText(AMDGenericObjects.objConsumptionScreenFirstRail);
								click(AMDHomePage.objViewAllBtn(getTrayName), getTrayName + " - View All button");
							} else {
								waitTime(2000);
								int noOfTrays = getCount(AMDGenericObjects.objNoOfTrays);
								if (noOfTrays == 0) {
									dismissInterruptionScreen();
									waitTime(2000);
									PartialSwipeInConsumptionScreen("UP", 1);
									noOfTrays = getCount(AMDGenericObjects.objNoOfTrays);
								}
								if (noOfTrays > 0) {
									PartialSwipeInConsumptionScreen("UP", 1);
									waitTime(1000);
									getTrayName = getText(AMDGenericObjects.objConsumptionScreenFirstRail);
									click(AMDHomePage.objViewAllBtn(getTrayName), getTrayName + " - View All button");
								} else {
									extent.extentLoggerWarning("Consumption Screen",
											"Interruption screen is displayed in the comsumption screen and No Rails available");
									logger.info(
											"Interruption PopUp is displayed in the comsumption screen and No Rails available");
								}
							}
						}

					}

					getPageTitle = getText(AMDHomePage.objTitle);
					if (getTrayName.contains(getPageTitle)) {
						navigationFlag = true;
						extent.extentLoggerPass("Listing Collection", tabName + ": " + userType
								+ " is able to navigate to listing collection: " + getTrayName + " Screen");
						logger.info(tabName + ": " + userType + " User is able to navigate to listing collection: "
								+ getTrayName + " Screen");
					} else {
						extent.extentLoggerFail("Listing Collection", tabName + ": " + userType
								+ " failed to navigate to listing collection: " + getTrayName + " Screen");
						logger.error(tabName + ": " + userType + " User failed to navigate to listing collection: "
								+ getTrayName + " Screen");
					}
				}
				waitTime(2000);
				// Navigates back to landing screen
				if (navigationFlag) {
					Back(2);
					BackToLandingScreen();
				}
			} else {
				extent.extentLoggerFail("Listing Collection", tabName + ": Failed to load the Page");
				logger.error(tabName + ": FAILED to Load the page");
			}

			// Following code is to break the loop after last tab validation in the landing
			// screen
			if (lastTab) {
				break;
			}
			if (tabName.equalsIgnoreCase("Music")) {
				lastTab = true;
			}
		}
	}
/**
 * @implNote This method is to dismiss the subscription popup
 * @throws Exception
 */
	public void dismissInterruptionScreen() throws Exception {
		if (verifyElementDisplayed(AMDGenericObjects.objPopUpDivider)) {
			click(AMDGenericObjects.objPopUpDivider, "Subcription Pop Up");
			extent.extentLoggerPass("Subscription PopUp",
					userType + "Subcription PopUp is displayed in the comsumption screen and popup is closed");
			logger.info("Subcription PopUp is displayed in the comsumption screen and popup is closed");
		} else if (verifyElementDisplayed(AMDGenericObjects.objCheckTitle("Subscribe"))) {
			extent.extentLogger("Interruption Screen", userType
					+ "Subscribe screen is displayed in the comsumption screen hence navigates back to previous screen");
			logger.info(
					"Subscribe screen is displayed in the comsumption screen hence navigates back to previous screen");
			Back(1);
			click(AMDHomePage.objCarouselTitle, getText(AMDHomePage.objCarouselTitle));
		}
	}

	/**
	 * Author : Bindu
	 * @implNote This method is to verify the Exit popup
	 * @param userType
	 * @throws Exception
	 */
	public void verifyExitPopupInAnyOfTheLandingScreen(String userType) throws Exception {

		if (userType.equalsIgnoreCase("Guest")) {
			// accessDeviceLocationPopUp("Allow", userType);
			navigateToIntroScreen_DisplaylangScreen();
			navigateToHomecreenFromIntroScreen();
		}
		extent.HeaderChildNode("Validating ExitPopup in any of the Landing Screen");
		System.out.println("\nverify Landing Screen Exit Popup");
		verifyElementPresent(AMDHomePage.objHomeTab, "Home Tab");
		Back(1);
		if (checkElementExist(AMDOnboardingScreen.objExitPopup, "Exit Popup")) {
			logger.info("Exit Popup appears when user taps on device back button");
			extent.extentLoggerPass("Landing Screen", "Exit Popup appears when user taps on device back button");
		} else {
			logger.error("Exit Popup not appeared when user taps on device back button");
			extent.extentLoggerFail("Landing Screen", "Exit Popup not appeared when user taps on device back button");

		}

		extent.HeaderChildNode("Verify Exit Popup comprises of text message");
		verifyElementExist(AMDOnboardingScreen.objExitPopup, "Exit Popup is displayed");
		String Exitpopup = getDriver().findElement(AMDOnboardingScreen.objExitPopup).getText();
		System.out.println(Exitpopup);
		if (Exitpopup.equalsIgnoreCase("Are you sure you want to exit ZEE5?")) {
			logger.info("Exit popup is displayed with message Are you sure you want to exit Zee5?");
			extent.extentLoggerPass("Landing Screen",
					"Exit popup is displayed with message Are you sure you want to exit Zee5?");
		} else {
			logger.error("Exit popup is not displayed with message Are you sure you want to exit Zee5?");
			extent.extentLoggerFail("Landing Screen",
					"Exit popup is displayed with message Are you sure you want to exit Zee5?");
		}
		verifyElementExist(AMDOnboardingScreen.objExitYes, "Exit Popup with Yes CTA");
		verifyElementExist(AMDOnboardingScreen.objExitNo, "Exit Popup with No CTA");

		extent.HeaderChildNode("verify Exit Popup closes when user taps on No CTA");
		click(AMDOnboardingScreen.objExitNo, "Exit Popup with No CTA");
		// waitTime(2000);
		if (!(verifyIsElementDisplayed(AMDOnboardingScreen.objExitPopup))) {
			logger.info("Exit Popup closes when user taps on No CTA");
			extent.extentLoggerPass("Landing Screen", "Exit popup closes when user taps on No CTA");
		} else {
			logger.error("Exit Popup not closed when user taps on No CTA");
			extent.extentLoggerFail("Landing Screen", "Exit Popup not closed when user taps on No CTA");
		}

		extent.HeaderChildNode("Verify Exit Popup closes by pulling down the Popup manually");
		Back(1);
		verifyElementPresentAndClick(AMDOnboardingScreen.objExitPopupDivider, "ExitPopup Divider");
		waitTime(2000);
		if (!(verifyIsElementDisplayed(AMDOnboardingScreen.objExitPopup))) {
			logger.info("Exit popup closes by pulling down the popup manually");
			extent.extentLoggerPass("Landing Screen", "Exit popup closes by pulling down the popup manually");
		} else {
			logger.error("Exit popup not closed by pulling down the popup manually");
			extent.extentLoggerFail("Landing Screen", "Exit popup not closed by pulling down the popup manually");
		}

		extent.HeaderChildNode(
				"Verify Exit Popup closes by tapping on the Horizontal line bar which appears on the popup");
		Back(1);
		click(AMDOnboardingScreen.objExitPopupHorizontalLinebar, "Exit Popup Horizontal LineBar");
		if (!(verifyIsElementDisplayed(AMDOnboardingScreen.objExitPopup))) {
			logger.info("Exit Popup closes by tapping on the Horizontal Line Bar");
			extent.extentLoggerPass("Landing Screen", "Exit Popup closes by tapping on the Horizontal Line Bar");
		} else {
			logger.error("Exit Popup not closed by tapping on the Horizontal Line Bar");
			extent.extentLoggerFail("Landing Screen", "Exit Popup not closed by tapping on the Horizontal Line Bar");
		}

		extent.HeaderChildNode("Verify Exit Popup closes by tapping on the Screen");
		Back(1);
		verifyElementPresentAndClick(AMDOnboardingScreen.objExitPopupDivider, "ExitPopup Divider");
		waitTime(2000);
		if (!(verifyIsElementDisplayed(AMDOnboardingScreen.objExitPopup))) {
			logger.info("Exit Popup closes by tapping on the screen");
			extent.extentLoggerPass("Landing Screen", "Exit Popup closes by tapping on the screen");
		} else {
			logger.error("Exit Popup not closed by tapping on the screen");
			extent.extentLoggerFail("Landing Screen", "Exit Popup not closed by tapping on the screen");
		}

		extent.HeaderChildNode("Verify Exit Popup closes when user taps on device back button");
		Back(2);
		if (!(verifyIsElementDisplayed(AMDOnboardingScreen.objExitPopup))) {
			logger.info("Exit Popup closes by tapping on the device back button");
			extent.extentLoggerPass("Landing Screen", "Exit Popup closes by tapping on the device back button");
		} else {
			logger.error("Exit Popup not closed by tapping on the device back button");
			extent.extentLoggerFail("Landing Screen", "Exit Popup not closed by tapping on the device back button");
		}
		extent.HeaderChildNode("Verify that user exists the app on tapping the Yes CTA in the Exit Popup");
		Back(1);
		verifyElementPresentAndClick(AMDOnboardingScreen.objExitYes, "Exit Popup with Yes CTA");
		waitTime(2000);
		if (verifyElementIsNotDisplayed(AMDOnboardingScreen.objExitPopup)) {
			logger.info("User Exits from the app when user taps on Yes CTA");
			extent.extentLoggerPass("Landing Screen", "User Exits from the app when user taps on Yes CTA");
		} else {
			logger.error("User fails to exit from the app when user taps on Yes CTA");
			extent.extentLoggerFail("Landing Screen", "User fails to exit from the app when user taps on Yes CTA");
		}
	}
/**
 * @Note This method is used to check Watchlist option is present in More screen for Subscribed and Non subscribed user.
 * @throws Exception
 */
	public void verifyWatchListScreen(String userType) throws Exception {
		waitTime(3000);
		if (!(userType.equalsIgnoreCase("Guest"))) {
			// To verify if appropriate page is displayed
			if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
			} else {
				if (!verifyElementDisplayed(AMDMoreMenu.objWatchlist)) {
					BackToLandingScreen();
					verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
				}
			}

			click(AMDMoreMenu.objWatchlist, "My Watchlist");
			waitTime(3000);
			if (verifyIsElementDisplayed(AMDWatchlistPage.objTabs(1))) {
				String selectedTab = findElement(AMDWatchlistPage.objSelectedTab).getText();
				if (selectedTab.equalsIgnoreCase("Shows")) {
					logger.info("Shows tab is selected by default");
					extent.extentLoggerPass("Watchlist", "Shows tab is selected by default");
				} else if (selectedTab.length() > 4) {
					logger.info("By Default selected tab is " + selectedTab);
					extent.extentLoggerPass("Watchlist", "By Default selected tab is " + selectedTab);
				} else {
					logger.error("Shows tab is not selected as default tab");
					extent.extentLoggerFail("watchlist", "Shows tab is not selected as default tab");
				}
			}

			if (verifyIsElementDisplayed(AMDWatchlistPage.objWatchlistTitle)) {
				logger.info("User navigated to my Watchlist screen");
				extent.extentLoggerPass("watchlist", "User navigated to my Watchlist screen");
			} else {
				logger.error("User not navigated to my Watchlist screen");
				extent.extentLoggerFail("watchlist", "User not navigated to my Watchlist screen");
			}

			boolean watchlistFlag = false;
			if (verifyIsElementDisplayed(AMDWatchlistPage.objNoReminderIcon)) {
				logger.info("Watchlist screen displayed with Empty Watchlist icon");
				extent.extentLoggerPass("Watchlist", "Watchlist screen displayed with Empty Watchlist icon");
				verifyElementPresent(AMDWatchlistPage.objNoReminderIcon, "No watchlist Icon");
				verifyElementPresent(AMDWatchlistPage.objNoReminderTxt, "No watchlist Text");
			} else {
				watchlistFlag = true;
				logger.info("Watchlist has some content cards added in Watchlist");
				extent.extentLoggerPass("watchlist", "Watchlist has some content cards added in Watchlist");
			}

			click(AMDWatchlistPage.objBackBtn, "Back button");
			if (verifyIsElementDisplayed(AMDMoreMenu.objWatchlist)) {
				logger.info("User successfully navigated to previous screen");
				extent.extentLoggerPass("watchlist", "User successfully navigated to previous screen");
			} else {
				logger.info("User not navigated to previous screen");
				extent.extentLoggerFail("watchlist", "User not navigated to previous screen");
			}

			click(AMDMoreMenu.objWatchlist, "watchlist");
			if (watchlistFlag) {
				verifyElementPresentAndClick(AMDWatchlistPage.objEditBtn, "Edit button");
				verifyElementPresent(AMDWatchlistPage.objSelectAllIcon, "Select All");
				click(AMDWatchlistPage.objSelectAllIcon, "Select All");
				for (int i = 1; i <= findElements(AMDWatchlistPage.objSelectCheckBox).size(); i++) {
					if (findElement(AMDWatchlistPage.objSelectContentByIndex(i)).getAttribute("checked")
							.equals("true")) {
						logger.info(i + "st content is selected");
						extent.extentLoggerPass("watchlist", i + "st content is selected");
					} else {
						logger.error(i + "st content is not selected");
						extent.extentLoggerFail("watchlist", i + "st content is not selected");
					}
				}

				if (verifyIsElementDisplayed(AMDWatchlistPage.objDeleteAllBtn)) {
					logger.info(
							"Clicking Select All button will select all the contents in the current screen for deletion");
					extent.extentLoggerPass("Watchlist", "All Content cards selected & Delete All button is displayed");
				} else {
					logger.info("All content cards are NOT selected and Delete All button is NOT displayed");
					extent.extentLoggerWarning("Watchlist",
							"All content cards are NOT selected and Delete All button is NOT displayed");
				}

				if (verifyElementDisplayed(AMDWatchlistPage.objCloseIcon)) {
					click(AMDWatchlistPage.objCloseIcon, "Close icon");
					logger.info("Close (X) icon is displayed in Watchlist");
					extent.extentLoggerPass("Watchlist", "Close (X) icon is displayed in Watchlist");
				}

				for (int i = 1; i <= findElements(AMDWatchlistPage.objNumberOfTabs).size(); i++) {
					String tabName = findElement(AMDWatchlistPage.objTabs(i)).getText();
					if (i == 1) {
						logger.info(tabName + " is selected by default");
						extent.extentLogger("watchlist", tabName + " is selected by default");
					} else {
						click(AMDWatchlistPage.objTabs(i), i + "nd tab");
						if (findElement(AMDWatchlistPage.objTabs(i)).isSelected()) {
							logger.info(tabName + " is selected");
							extent.extentLogger("watchlist", tabName + " is selected");
						} else {
							logger.error(tabName + " is not selected");
							extent.extentLoggerFail("watchlist", tabName + " is not selected");
						}
					}
				}

				click(AMDWatchlistPage.objBackBtn, "Back button");
				click(AMDMoreMenu.objWatchlist, "WatchList");
				waitTime(1000);
				String selectedTab = getText(AMDWatchlistPage.objSelectedTabInWatchlist);
				if (selectedTab.equalsIgnoreCase("Shows")) {
					for (int i = 1; i < findElements(AMDWatchlistPage.objContentThumbnail).size(); i++) {
						String title = findElement(AMDWatchlistPage.objIterateTitle(i)).getText();
						String episode = findElement(AMDWatchlistPage.objIterateEpisode(i)).getText();

						logger.info(title + " is added to watchlist, it contains " + episode);
						extent.extentLoggerPass("watchlist", title + " is added to watchlist, it contains " + episode);
					}

					verifyElementPresentAndClick(AMDWatchlistPage.objIterateEpisode(1), "First content in shows tab");
					String duration = findElement(AMDWatchlistPage.objDurationtxt).getText();
					logger.info("Duration of episode is : " + duration);
					extent.extentLogger("watchlist", "Duration of episode is : " + duration);

					click(AMDWatchlistPage.objBackBtn, "Back button");
					if (verifyIsElementDisplayed(AMDWatchlistPage.objTitle)) {
						logger.info("User navigated to previous screen");
						extent.extentLogger("watchlist", "User navigated to previous screen");
					} else {
						logger.error("User is not navigated to previous screen");
						extent.extentLoggerFail("watchlist", "User is not navigated to previous screen");
					}

					findElements(AMDWatchlistPage.objForwardIcon).get(0).click();
					verifyElementPresentAndClick(AMDWatchlistPage.objEditBtn, "Edit button");
					if (verifyIsElementDisplayed(AMDWatchlistPage.objSelectAllIcon)) {
						logger.info("Content of the Screen is editable");
						extent.extentLogger("watchlist", "Content of the Screen is editable");
					} else {
						logger.error("Content of the Screen is not editable");
						extent.extentLoggerFail("watchlist", "Content of the Screen is not editable");
					}
					for (int i = 1; i <= findElements(AMDWatchlistPage.objSelectCheckBox).size(); i++) {
						if (findElement(AMDWatchlistPage.objSelectContentByIndex(i)).isDisplayed()) {
							logger.info("Check box is displayed for the " + i + "st content");
							extent.extentLogger("watchlist", "Check box is displayed for the " + i + "st content");
						} else {
							logger.error("Check box is not displayed for the " + i + "st content");
							extent.extentLoggerFail("watchlist",
									"Check box is not displayed for the " + i + "st content");
						}
					}
					click(AMDWatchlistPage.objCloseIcon, "close icon");
					if (verifyIsElementDisplayed(AMDWatchlistPage.objDurationtxt)) {
						String contentDuration = findElement(AMDWatchlistPage.objDurationtxt).getText();
						String contentTitle = findElement(AMDWatchlistPage.objTitleTxt).getText();
						logger.info("Content Duration : " + contentDuration + "\n Content title : " + contentTitle);
						extent.extentLogger("watchlist",
								"Content Duration : " + contentDuration + "\n Content title : " + contentTitle);
					} else {
						logger.error("Content Duration and Content title is not displayed");
						extent.extentLoggerFail("watchlist", "Content Duration and Content title is not displayed");
					}
					verifyElementPresentAndClick(AMDWatchlistPage.objTitleTxt, "First content of Shows screen");
					waitTime(3000);
					if (verifyIsElementDisplayed(AMDWatchlistPage.objPlayerScreen)) {
						logger.info("Navigated to Consumption screen");
						extent.extentLogger("watchlist", "Navigated to Consumption screen");
						waitTime(3000);
						click(AMDConsumptionScreen.objWatchlistBtn, "Watchlist icon");
					} else {
						logger.error("unable to navigated to Consumption screen");
						extent.extentLoggerFail("watchlist", "unable to navigated to Consumption screen");
					}
				} else {
					for (int i = 1; i < findElements(AMDWatchlistPage.objContentThumbnail).size(); i++) {
						String title = findElement(AMDWatchlistPage.objContentName(i)).getText();
						String duration = findElement(AMDWatchlistPage.objIterateEpisode(i)).getText();

						logger.info(title + " is displayed in watchlist tab: " + selectedTab);
						extent.extentLoggerPass("Watchlist", title + " is displayed in watchlist tab: " + selectedTab);
						logger.info("Duration of " + i + "st title is: " + duration);
						extent.extentLoggerPass("watchlist", "Duration of " + i + "st title is: " + duration);
					}
				}

			}
			Back(2);
		} else {
			logger.info("Not applicable for " + userType);
			extent.extentLogger("Watchlist", "Not applicable for " + userType);
		}
	}
/**
 * @Note This method is to validate the My reminder Screen
 * @param userType
 * @throws Exception
 */
	public void myReminders(String userType) throws Exception {
		HeaderChildNode("Validate My Reminder screen for " + userType);
		System.out.println("\nValidate My Reminder screen " + userType);

		switch (userType) {
		case "Guest":

			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
			click(AMDMoreMenu.objMyRemainders, "My Reminders");
			waitTime(2000);
			if (verifyIsElementDisplayed(AMDLoginScreen.objLoginOrRegisterPageTitle)) {
				logger.info("User navigated to login/Register screen post taping on My Reminders");
				extent.extentLoggerPass("My Reminders",
						"User navigated to login/Register screen post taping on My Reminders");
			} else {
				logger.error("User is not navigated to login/Register screen post taping on My Reminders");
				extent.extentLoggerFail("My Remainders",
						"User is not navigated to login/Register screen post taping on My Reminders");
			}
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objBackBtn, "Back button");
			if (verifyIsElementDisplayed(AMDMoreMenu.objMyRemainders)) {
				logger.info("User is navigates back to More menu");
				extent.extentLoggerPass("watchlist", "User is navigated back to More menu");
			} else {
				logger.error("User failed to navigate back to More menu");
				extent.extentLoggerFail("watchlist", "User failed to navigate back to More menu");
			}
			break;
		case "NonSubscribedUser":
			validateMyReminder();
			break;
		case "SubscribedUser":
			validateMyReminder();
			break;
		}
	}
/**
 * @Note This method is to validate My reminder screen
 * @throws Exception
 */
	public void validateMyReminder() throws Exception {

		waitTime(3000);
		// To verify if appropriate page is displayed
		if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		} else {
			if (!verifyElementDisplayed(AMDMoreMenu.objMyRemainders)) {
				BackToLandingScreen();
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
			}
		}

		click(AMDMoreMenu.objMyRemainders, "My Reminders");
		waitForElementDisplayed(AMDMyReminderPage.objReminberHeaderTitle, 30);
		if (verifyElementDisplayed(AMDMyReminderPage.objReminberHeaderTitle)) {
			logger.info("User navigated to My Reminder screen post taping on My Reminders");
			extent.extentLoggerPass("My Reminders", "User navigated to My Reminder screen post taping on My Reminders");
		} else {
			logger.error("User is not navigated to My Reminder screen post taping on My Reminders");
			extent.extentLoggerFail("My Reminders",
					"User is not navigated to My Reminder screen post taping on My Reminders");
		}

		waitTime(10000);
		if (verifyIsElementDisplayed(AMDMyReminderPage.objNoReminderIcon)) {
			logger.info("Reminder is empty");
			extent.extentLoggerPass("My Reminders",
					"Reminder screen is empty: " + getText(AMDMyReminderPage.objNoReminderTxt));
			verifyElementPresent(AMDMyReminderPage.objNoReminderIcon, "No Reminder icon");
			verifyElementPresent(AMDMyReminderPage.objNoReminderTxt, "No Reminder text");
		} else if (verifyElementDisplayed(AMDMyReminderPage.objEditBtn)) {

			verifyElementPresent(AMDMyReminderPage.objEditBtn, "Edit button");
			for (int i = 1; i < findElements(AMDMyReminderPage.objTitleOfContentTxt).size(); i++) {
				if (findElements(AMDMyReminderPage.objTitleOfContentTxt).get(i).isDisplayed()) {
					logger.info("Title of the content in reminder screen is displayed");
					extent.extentLoggerPass("My Reminders", "Title of the content in reminder screen is displayed");
				} else {
					logger.error("Title of the content in reminder screen is not displayed");
					extent.extentLoggerFail("My Reminders", "Title of the content in reminder screen is not displayed");
				}
				if (findElements(AMDMyReminderPage.objEpisodeDatetxt).get(i).isDisplayed()) {
					logger.info("Date of the content in reminder screen is displayed");
					extent.extentLoggerPass("My Reminders", "Date of the content in reminder screen is displayed");
				} else {
					logger.error("Date of the content in reminder screen is not displayed");
					extent.extentLoggerFail("My Reminders", "Date of the content in reminder screen is not displayed");
				}
			}

			click(AMDMyReminderPage.objEditBtn, "Edit button");
			verifyElementPresent(AMDMyReminderPage.objSelectAllIcon, "Select All");
			click(AMDMyReminderPage.objSelectAllIcon, "Select All");
			if (findElements(AMDMyReminderPage.objCheckBox).size() > 1) {
				findElements(AMDMyReminderPage.objCheckBox).get(0).click();
			}
			verifyElementPresent(AMDMyReminderPage.objDeleteAllIcon, "Delete Icon");
			for (int i = 1; i <= findElements(AMDMyReminderPage.objCheckBox).size(); i++) {
				if (findElements(AMDMyReminderPage.objCheckBox).get(0).getAttribute("checked").equals("true")) {
					logger.info("Check box is checked");
					extent.extentLoggerPass("My Reminders", "Check box is checked");
				} else {
					logger.info("Check box is not checked");
					extent.extentLogger("My Reminders", "Check box is not checked");
				}
				findElements(AMDMyReminderPage.objCheckBox).get(0).click();
			}
			click(AMDMyReminderPage.objCloseIcon, "Close icon");
			if (verifyElementDisplayed(AMDMyReminderPage.objEditBtn)) {
				logger.info("User navigated to edit screen");
				extent.extentLoggerPass("My Reminders", "User navigated to edit screen");
			} else {
				logger.error("User not navigated to edit screen ");
				extent.extentLoggerFail("My Reminders", "User not navigated to edit screen ");
			}
		} else {
			logger.info("Reminder screen is empty");
			extent.extentLoggerWarning("My Reminders",
					"Reminder screen is empty: " + getText(AMDMyReminderPage.objNoReminderTxt));
		}

		click(AMDGenericObjects.objBackBtn, "Back button");
	}

	/**
	 * Author : Hitesh Module : More Screen Screen : Have a prepaid code
	 * @Note This method will validate the Have a code option
	 * @throws Exception
	 */
	public void haveaprepaidcode(String userType) throws Exception {
		HeaderChildNode("Validate Have a prepaid code");
		System.out.println("\nValidate Have a prepaid code");

		// To verify if appropriate page is displayed
		if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		} else {
			if (!verifyElementDisplayed(AMDMoreMenu.objHaveaPrepaidCode)) {
				BackToLandingScreen();
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
			}
		}

		verifyElementPresentAndClick(AMDMoreMenu.objHaveaPrepaidCode, "Have a prepaid code");
		verifyElementPresent(AMDMoreMenu.objPrepaidCodePopUp, "Have a prepaid code pop up");
		Back(1);
	}

	/**
	 * Author : Hitesh Module : More Screen Screen : Have a prepaid code
	 * 
	 * @throws Exception
	 */
	public void settings(String userType) throws Exception {
		HeaderChildNode("Validate Settings screen");
		System.out.println("\nValidate Settings screen");

		// To verify if appropriate page is displayed
		if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		} else {
			if (!verifyElementDisplayed(AMDMoreMenu.objMyTransactions)) {
				BackToLandingScreen();
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
			}
		}

		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings");
		verifyElementPresent(AMDSettingsScreen.objSettingsScreenTitle, "Settings screen");
		Back(1);
	}

	/**
	 * @Note This method will validate the Help center screen
	 * Author : Bhavana Module : More screen
	 */
	public void helpCenterScreen(String userType) throws Exception {
		extent.HeaderChildNode("Validation of Help Center Screen as " + userType);
		System.out.println("\nValidation of Help Center Screen as " + userType);

		// To verify if appropriate page is displayed
		if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		} else {
			if (!verifyElementDisplayed(AMDMoreMenu.objMyTransactions)) {
				BackToLandingScreen();
				click(AMDHomePage.objMoreMenu, "More menu");
			}
		}

		Swipe("UP", 2);
		click(AMDMoreMenu.objHelpCentre, "Help Center option in More menu");
		waitTime(5000);
		verifyElementExist(AMDMoreMenu.objHelpCenterHeader, "Help Center Header");
		if (checkElementExist(AMDMoreMenu.objHelpCenterHeader, "Help Center Header")) {
			logger.info("User is navigated to Help Center screen");
			extent.extentLoggerPass("Help Center", "User is navigated to Help Center screen");
		} else {
			logger.error("User is unable to navigate to Help Center screen");
			extent.extentLoggerFail("Help Center", "User is unable to navigate to Help Center screen");
		}
		verifyElementPresentAndClick(AMDMoreMenu.objcloseButton, "Close button in Help Center Screen");
		if (checkElementExist(AMDHomePage.objMoreMenu, "More menu")) {
			logger.info("User is navigated to the Previous screen on clicking the Close button in Help Center screen");
			extent.extentLoggerPass("Help Center",
					"User is navigated to the Previous screen on clicking the Close button in Help Center screen");
		} else {
			logger.error(
					"User is unable to navigate to the Previous screen on clicking the Close button in Help Center screen");
			extent.extentLoggerFail("Help Center",
					"User is unable to navigate to the Previous screen on clicking the Close button in Help Center screen");
		}
		click(AMDMoreMenu.objHelpCentre, "Help Center option");
		waitTime(5000);
		verifyElementPresent(AMDMoreMenu.objSearchBarInHelpCenter, "Search bar to enter help queries");
		gettingStartedValidation();
		PartialSwipe("UP", 1);
		subsRentalsValidation();
		Swipe("UP", 1);
		myAccountValidation();
		Swipe("UP", 2);
		watchingZEE5Validation();
		Swipe("UP", 2);
		MyZEE5AppValidation();
		Swipe("UP", 3);
		QuickLinksValidation();
		waitTime(2000);
		click(AMDMoreMenu.objcloseButton, "Close button");
//		click(AMDHomePage.HomeIcon, "Home icon");
	}

/**
 * @note this method is used for verifying PC settings for registered users
 * @param userType
 * @throws Exception
 */
	public void parentalpin_Validation(String userType) throws Exception {
		// Verify "U" rated content
		extent.HeaderChildNode("TC_35 : Parental Control option should be displayed to Logged in users only.");
		System.out.println("TC_35 : Parental Control option should be displayed to Logged in users only.");
		navigateBackToHomeLandingScreen();
		verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
		waitTime(3000);
		click(AMDMoreMenu.objSettings, "Settings option");
		waitTime(5000);
		Swipe("UP", 1);
		if (userType.equalsIgnoreCase("Guest")) {
			if (verifyElementDisplayed(AMDMoreMenu.objParentalControl)) {
				logger.error("Parental Control option is displayed for Guest user");
				extentLoggerFail("Parent Control", " Parental Control option is displayed for Guest user");
			} else {
				logger.info("Parental Control option is not displayed for Guest user");
				extentLoggerPass("Parent Control", "Parental Control option is not displayed for Guest user");
			}
		}

		if (userType.equalsIgnoreCase("SubscribedUser") | userType.equalsIgnoreCase("NonSubscribedUser")) {
			verifyElementPresent(AMDMoreMenu.objParentalControl, "Parental control option");
			// Verify "U" rated content
			extent.HeaderChildNode(
					"TC_36 : Validate that is Parental control reflected when user login with same account in same device.");
			System.out.println(
					"TC_36 : Validate that is Parental control reflected when user login with same account in same device.");
			waitTime(5000);
			Swipe("UP", 1);
			verifyElementPresentAndClick(AMDMoreMenu.objParentalControl, "Parental Control");
			verifyElementExist(AMDMoreMenu.objPasswordField, "Password field");
			String password = "";
			if (userType.equals("NonSubscribedUser")) {
				password = getParameterFromXML("NonsubscribedPassword");
			} else if (userType.equals("SubscribedUser")) {
				password = getParameterFromXML("SubscribedPassword");
			}
			click(AMDMoreMenu.objPasswordField, "Password field");
			type(AMDMoreMenu.objPasswordField, password, "Password");
			waitTime(2000);
			hideKeyboard();
			waitTime(2000);
			click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(2000);
			// click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(2000);
			String state = getText(AMDMoreMenu.objNoRestriction);
			System.out.println(state);
			if (state.equalsIgnoreCase("No Restriction")) {
				logger.info(state + " is selected by default");
				extent.extentLoggerPass("Parental Pin", state + " is selected by default");
			} else {
				logger.error(state + " is not selected by default");
				extent.extentLoggerFail("Parental Pin", state + " is not selected by default");
			}
			click(AMDMoreMenu.objRestrictAllContent, "Restrict All Content option");
			click(AMDMoreMenu.objContinueBtn, "Continue Button");
			waitTime(2000);
			if (verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin")) {
				logger.info("Parental Pin is SET");
				extent.extentLoggerPass("Parental Pin", "Parental Pin is SET");
				verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin");
				type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin2, "2", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin3, "3", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
				hideKeyboard();
				waitTime(4000);
				click(AMDMoreMenu.objSetPinContinueBtn, "Continue Button");
				waitTime(2000);
				click(AMDMoreMenu.objParentalLockDone, "Done Button");
			} else {
				logger.info("Parental Pin Popup is NOT displayed");
				extent.extentLoggerFail("Parental Pin", "Parental Pin Popup is NOT displayed");
			}
			BackToLandingScreen();
			waitTime(5000);
			click(AMDHomePage.objSearchBtn, "Search button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, "Bhinna", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objFirstSearchResult, "Search result");
			waitTime(8000);
			boolean checkParentalPopUp = verifyElementDisplayed(AMDPlayerScreen.objParentalPinPopUp);
			boolean EnterPinOnPlayer = verifyElementDisplayed(AMDConsumptionScreen.NewEnterPINOnPlayerScreen);
			if (checkParentalPopUp) {	
			if (checkParentalPopUp) {
				logger.info("Parental Pin Popup is displayed");
				extentLoggerPass("Parental Pin Popup", "Parental Pin Popup is displayed in Landscape mode");
				Back(2);
			} else {
				logger.info("Parental Pin Popup is NOT displayed");
				extentLoggerFail("Parental Pin Popup", "Parental Pin Popup is NOT displayed in Landscape mode");
			}
			}else {
				if (EnterPinOnPlayer) {
					logger.info("Enter Parental Pin on Player screen is displayed");
					extentLoggerPass("Parental Pin Popup", "Enter Parental Pin on Player screen is displayed ");
					Back(2);
				}else {
					logger.error("Enter Parental Pin on Player screen is NOT displayed for");
					extentLoggerFail("Parental Pin Popup", "Enter Parental Pin on Player screen is NOT displayed for");
				}
			}
		}
	}
	/**
	 * 
	 * @throws Exception
	 */
	public void helpQueriesvalidation() throws Exception {
		if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		} else {
			if (!verifyElementDisplayed(AMDMoreMenu.objMyTransactions)) {
				BackToLandingScreen();
				click(AMDHomePage.objMoreMenu, "More menu");
			}
		}

		Swipe("UP", 2);
		click(AMDMoreMenu.objHelpCentre, "Help Center option in More menu");
		waitTime(15000);
		verifyElementExist(AMDMoreMenu.objHelpCenterHeader, "Help Center Header");
		//Swipe("UP", 2);
		watchingZEE5Validation();
		Swipe("UP", 2);
		MyZEE5AppValidation();
		Swipe("UP", 3);
		QuickLinksValidation();
		waitTime(2000);
		click(AMDMoreMenu.objcloseButton, "Close button");
	}
	/**
	 * @Note This method is to validate the SubsRentals section of queries present in Help center screen
	 * @throws Exception
	 */
	public void subsRentalsValidation() throws Exception {

		String Header2 = "Subscriptions & Rentals";
		String articleName1 = "Premium Subscription Plans";
		String articleName2 = "How  do I purchase a Premium subscription?";
		String articleName3 = "Renting movies on ZEEPLEX";
		String articleName4 = "Upgrading your Subscription";
		String articleName5 = "I am unable to watch Premium videos";
		swipeUntilFindElement(AMDGenericObjects.objContainText(Header2), "UP");
		System.out.println("\nValidating links under " + Header2 + " rail");

		boolean flagHeader = verifyElementPresent(AMDGenericObjects.objContainText(Header2), Header2 + " header ");
		if (flagHeader) {
			//PartialSwipe("UP", 1);
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName1), articleName1);
			waitTime(5000);
			
			verifyArticlePageNavigation(articleName1);

			swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName3), "UP");
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName2), articleName2);
			waitTime(5000);
			verifyArticlePageNavigation("How do I purchase a Premium subscription?");

			swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName4), "UP");
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName3), articleName3);
			waitTime(5000);
			verifyArticlePageNavigation(articleName3);

			swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName5), "UP");
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName4), articleName4);
			waitTime(5000);
			verifyArticlePageNavigation(articleName4);

			swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName5), "UP");
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName5), articleName5);
			waitTime(5000);
			verifyArticlePageNavigation(articleName5);
		} else {
			extent.extentLoggerFail("Header", "Header: <b>" + Header2 + "</b> is not present in the page");
			logger.error("Header: " + Header2 + " is not present in the page");
		}
	}
/**
 * @Note This method is to validate the queries of Getting started section present in Help center screen
 * @throws Exception
 */
	public void gettingStartedValidation() throws Exception {

		String Header1 = "Popular Topics";
		// String articleName1 = "F.R.I.E.N.D.S: The Reunion on ZEE5 Premium!";
		String articleName2 = "Where can I view my subscription information?";
		String articleName3 = "Registering with ZEE5";
		String articleName4 = "How do I watch ZEE5 on my television?";
		String articleName5 = "Video not playing due to DRM/protected content";

		System.out.println("\nValidating links under " + Header1 + " rail");

		verifyElementExist(AMDMoreMenu.objZee5Logo, "ZEE5 Logo");
	//	verifyElementExist(AMDGenericObjects.objText("GRIEVANCE REDRESSAL"), "GRIEVANCE REDRESSAL label");

		boolean flagHeader1 = verifyElementPresent(AMDGenericObjects.objContainText(Header1), Header1 + " header ");
		if (flagHeader1) {
//			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName1), articleName1);
//			verifyArticlePageNavigation(articleName1);

			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName2), articleName2);
			waitTime(5000);
			verifyArticlePageNavigation(articleName2);

			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName3), articleName3);
			waitTime(5000);
			verifyArticlePageNavigation(articleName3);

			//PartialSwipe("UP", 1);
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName4), articleName4);
			waitTime(5000);
			verifyArticlePageNavigation(articleName4);

			PartialSwipe("UP", 1);
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName5), articleName5);
			waitTime(5000);
			verifyArticlePageNavigation("Video not playing error due to DRM/Protected Content");
		} else {
			extent.extentLoggerFail("Header", "Header: <b>" + Header1 + "</b> is not present in the page");
			logger.error("Header: " + Header1 + " is not present in the page");
		}
	}
/**
 * @Note This method is to naviagte to the article page on clicking the option present in Help center screen
 * @param pArticleName
 * @throws Exception
 */
		public void verifyArticlePageNavigation(String pArticleName) throws Exception {
			waitTime(5000);
			if (verifyElementDisplayed(AMDMoreMenu.objArticleTitle(pArticleName))) {
				logger.info("User is navigated to Artical page: " + pArticleName);
				extent.extentLoggerPass("Article", "User is navigated to Artical page: <b>" + pArticleName + "</b>");
				verifyElementPresentAndClick(AMDMoreMenu.objBackToHome, "Back To Home");
				waitTime(5000);
			} else {
				extent.extentLoggerFail("Verify navigation", "Failed to navigate to Article page: " + pArticleName);
				logger.error("Failed to navigate to Article page: " + pArticleName);
			}
		}
/**
 * @Note This method is to validate the queries of my account validation section present in Help center screen
 * @throws Exception
 */
		public void myAccountValidation() throws Exception {

			String Header3 = "My Account";
			String articleName1 = "Managing your subscription";
			String articleName2 = "I can’t sign in to ZEE5";
			String articleName3 = "How many devices can I watch on?";
			String articleName4 = "How can I delete / log out a registered device?";
			String articleName5 = "I purchased a subscription, but it’s not working";
			String articleName6 = "Parental Control";

			swipeUntilFindElement(AMDGenericObjects.objContainText(Header3), "UP");
			System.out.println("\nValidating links under " + Header3 + " rail");

			boolean flagHeader = verifyElementPresent(AMDGenericObjects.objContainText(Header3), Header3 + " header ");
			if (flagHeader) {
			//	PartialSwipe("UP", 1);
				verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName1), articleName1);
				verifyArticlePageNavigation("Managing your Subscription");

				swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName3), "UP");
				verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName2), articleName2);
				waitTime(3000);
				if (verifyElementDisplayed(AMDMoreMenu.objArticlePageSignIntoZee5)) {
					logger.info("User is navigated to Artical page: " + articleName2);
					extent.extentLoggerPass("Article", "User is navigated to Artical page: <b>" + articleName2 + "</b>");
					verifyElementPresentAndClick(AMDMoreMenu.objBackToHome, "Back To Home");
				} else {
					extent.extentLoggerFail("Verify navigation", "Failed to navigate to Article page: " + articleName2);
					logger.error("Failed to navigate to Article page: " + articleName2);
				}

				swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName4), "UP");
				verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName3), articleName3);
				waitTime(4000);
				verifyArticlePageNavigation(articleName3);

				swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName5), "UP");
				verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName4), articleName4);
				waitTime(4000);
				verifyArticlePageNavigation(articleName4);

				swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName6), "UP");
				verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName5), articleName5);
				waitTime(4000);
				verifyArticlePageNavigation("I purchased a subscription/ZEEPLEX rental, but it’s not working");

				swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName6), "UP");
				verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName6), articleName6);
				waitTime(4000);
				verifyArticlePageNavigation(articleName6);
			} else {
				extent.extentLoggerFail("Header", "Header: <b>" + Header3 + "</b> is not present in the page");
				logger.error("Header: " + Header3 + " is not present in the page");
			}
		}
/**
 * @Note This method is to validate the queries of Quick links section present in Help center screen
 * @throws Exception
 */
		public void QuickLinksValidation() throws Exception {

			String Header6 = "Offers & Partnerships";
			String articleName1 = "ZEE5 Offers";
			String articleName2 = "ZEE5 Partnerships";
			String articleName3 = "Applying a code in ZEE5";

			swipeUntilFindElement(AMDGenericObjects.objContainText(Header6), "UP");
	                waitTime(4000);
			System.out.println("\nValidating links under " + Header6 + " rail");

			boolean flagHeader = verifyElementPresent(AMDGenericObjects.objContainText(Header6), Header6 + " header ");
			if (flagHeader) {
				PartialSwipe("UP", 1);
				verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName1), articleName1);
				waitTime(4000);
				verifyArticlePageNavigation(articleName1);

				swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName3), "UP");
	                        waitTime(4000);
				verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName2), articleName2);
				waitTime(4000);
				verifyArticlePageNavigation(articleName2);

				swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName3), "UP");
	                         waitTime(4000);
				verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName3), articleName3);
				waitTime(4000);
				verifyArticlePageNavigation("Applying a Code or Gift Card in ZEE5");

			} else {
				extent.extentLoggerFail("Header", "Header: <b>" + Header6 + "</b> is not present in the page");
				logger.error("Header: " + Header6 + " is not present in the page");
			}
		}
/**
 * @Note This method is to validate the queries of Watching ZEE5 section present in Help center screen
 * @throws Exception
 */
	public void watchingZEE5Validation() throws Exception {

		String Header4 = "Watching ZEE5";
		String articleName1 = "I need help with playing a video";
		String articleName2 = "I need help with audio";
		String articleName3 = "I need help with casting ZEE5 on my TV";
		String articleName4 = "All about downloads";
		String articleName5 = "All about subtitles";

		swipeUntilFindElement(AMDGenericObjects.objContainText(Header4), "UP");
		System.out.println("\nValidating links under " + Header4 + " rail");

		boolean flagHeader = verifyElementPresent(AMDGenericObjects.objContainText(Header4), Header4 + " header ");
		if (flagHeader) {
			//PartialSwipe("UP", 1);
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName1), articleName1);
			waitTime(4000);
			verifyArticlePageNavigation(articleName1);

			swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName3), "UP");
                        waitTime(4000);
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName2), articleName2);
			waitTime(4000);
			verifyArticlePageNavigation(articleName2);

			swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName4), "UP");
                        waitTime(4000);
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName3), articleName3);
			verifyArticlePageNavigation(articleName3);

			swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName5), "UP");
                        waitTime(4000);
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName4), articleName4);
			waitTime(4000);
			verifyArticlePageNavigation(articleName4);

			swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName5), "UP");
                        waitTime(4000);
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName5), articleName5);
			waitTime(4000);
			verifyArticlePageNavigation(articleName5);
		} else {
			extent.extentLoggerFail("Header", "Header: <b>" + Header4 + "</b> is not present in the page");
			logger.error("Header: " + Header4 + " is not present in the page");
		}
	}
/**
 * @Note This method is to validate the queries of My ZEE5 section present in Help center screen
 * @throws Exception
 */
	public void MyZEE5AppValidation() throws Exception {

		String Header5 = "My ZEE5 App";
		String articleName1 = "App Performance";
		String articleName2 = "I am unable to authenticate my TV";
		String articleName3 = "How can I enable automatic updates for the ZEE5 app?";
		String articleName4 = "What’s the latest ZEE5 App version?";
		String articleName5 = "How Can I?";

		swipeUntilFindElement(AMDGenericObjects.objContainText(Header5), "UP");
		System.out.println("\nValidating links under " + Header5 + " rail");

		boolean flagHeader = verifyElementPresent(AMDGenericObjects.objContainText(Header5), Header5 + " header ");
		if (flagHeader) {
			PartialSwipe("UP", 1);
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName1), articleName1);
			verifyArticlePageNavigation("My ZEE5 App Performance");

			swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName3), "UP");
                         waitTime(4000);
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName2), articleName2);
			waitTime(3000);
			if (verifyElementDisplayed(AMDMoreMenu.objArticlePageAuthMyTV)) {
				logger.info("User is navigated to Artical page: " + articleName2);
				extent.extentLoggerPass("Article", "User is navigated to Artical page: <b>" + articleName2 + "</b>");
				verifyElementPresentAndClick(AMDMoreMenu.objBackToHome, "Back To Home");
				waitTime(4000);
			} else {
				extent.extentLoggerFail("Verify navigation", "Failed to navigate to Article page: " + articleName2);
				logger.error("Failed to navigate to Article page: " + articleName2);
			}

			swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName4), "UP");
                        waitTime(4000);
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName3), articleName3);
			waitTime(4000);
			verifyArticlePageNavigation(articleName3);

			swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName5), "UP");
                        waitTime(4000);
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName4), articleName4);
			
			waitTime(4000);
			verifyArticlePageNavigation("What’s the latest ZEE5 App Version?");

			swipeUntilFindElement(AMDMoreMenu.objQueriesHeader(articleName5), "UP");
                        waitTime(4000);
			verifyElementPresentAndClick(AMDMoreMenu.objQueriesHeader(articleName5), articleName5);
			waitTime(4000);
			verifyArticlePageNavigation(articleName5);
		} else {
			extent.extentLoggerFail("Header", "Header: <b>" + Header5 + "</b> is not present in the page");
			logger.error("Header: " + Header5 + " is not present in the page");
		}
	}

	/**
	 * @Note This method is to validate the Listing collection screen
	 * Author : Kushal Module : listing screen
	 */

	public void listingCollectionVerification(String pUserType) throws Exception {
		extent.HeaderChildNode("Listing Collection validation as: " + pUserType);
		System.out.println("\nListing Collection validation as: " + pUserType);

		String getTrayName = null, getPageTitle;

		click(AMDHomePage.objHome, "Home button");
		waitForElementDisplayed(AMDHomePage.objCarouselTitle, 2000);

		waitTime(2000);
		if (verifyIsElementDisplayed(AMDHomePage.objContinueWatchingTray)
				| verifyIsElementDisplayed(AMDHomePage.objBannerAd)) {
			Swipe("UP", 1);
			waitTime(2000);
		}
		// Swipe Tray content cards
		SwipeRailContentCards(AMDGenericObjects.objFirstTrayTitle);

		if (pUserType.equalsIgnoreCase("Guest")) {
			getTrayName = getText(AMDGenericObjects.objFirstTrayTitle);
			click(AMDHomePage.objViewAllBtn(getTrayName), getTrayName + " - View All button");
		} else {
			if (verifyIsElementDisplayed(AMDHomePage.objContinueWatchingTray)
					| verifyIsElementDisplayed(AMDHomePage.objBannerAd)) {
				PartialSwipe("UP", 1);
				waitTime(2000);
			}
			waitTime(2000);
			int noOfTrays = getCount(AMDGenericObjects.objNoOfTrays);
			if (noOfTrays > 0) {
				// getTrayName = getText(AMDGenericObjects.objTrayTitleByIndx(noOfTrays));
				getTrayName = getText(AMDGenericObjects.objFirstTrayTitle);
				click(AMDHomePage.objViewAllBtn(getTrayName), getTrayName + " - View All button");
			}
		}

		getPageTitle = getText(AMDHomePage.objTitle);
		if (getTrayName.contains(getPageTitle)) {
			extent.extentLoggerPass("Listing Collection", "Collection screen is dislayed for: " + getPageTitle);
			logger.info("Collection screen is dislayed for: " + getPageTitle);
		} else {
			extent.extentLoggerFail("Listing Collection", "Collection screen is not dislayed");
			logger.error("Collection screen is not dislayed");
		}

		if (verifyElementDisplayed(AMDHomePage.objBackIcon)) {
			logger.info("Back button is displayed in listing Collection screen");
			extent.extentLoggerPass("Listing Collection Screen",
					"Back button is displayed in listing Collection screen");
		} else {
			logger.error("Back button is not displayed in the listing Collection screen");
			extent.extentLoggerFail("Listing Collection Screen",
					"Back button is not displayed in the listing Collection screen");
		}

		if (verifyElementDisplayed(AMDGenericObjects.objPremiumTags)) {
			logger.info("Premium tags are displayed on top-left of content cards in listing Collection screen");
			extent.extentLoggerPass("Premium Tags",
					"Premium tags are displayed on top-left of content cards in listing Collection screen");
		} else {
			logger.info("Premium tags are displayed on top-left of content cards in listing Collection screen");
			extent.extentLoggerFail("Premium Tags",
					"Premium tags are not displayed on top-left of content cards in listing Collection screen");
		}

		// To click on any content card displayed under collection screen
		findElements(AMDGenericObjects.objPremiumTags).get(0).click();
		waitTime(2000);
		if (verifyIsElementDisplayed(AMDGenericObjects.objPopUpDivider)) {
			click(AMDGenericObjects.objPopUpDivider, "Subcription Pop Up");
			extent.extentLoggerPass("Subscription PopUp",
					"Subcription PopUp is displayed in the comsumption screen and popup is closed");
			logger.info("Subcription PopUp is displayed in the comsumption screen and popup is closed");
		}

		if (verifyElementDisplayed(AMDConsumptionScreen.objWatchlistBtn)) {
			extent.extentLoggerPass("Consumption Screen",
					"Consumption screen appeared on selecting content card from listing collection");
			logger.info("Consumption screen appeared on selecting content card from listing collection");
		} else {
			logger.error("Consumption screen failed to appear on selecting content card from listing collection");
			extent.extentLoggerFail("Consumption Screen",
					"Consumption screen failed to appear on selecting content card from listing collection");
		}
		Back(1);
		getPageTitle = getText(AMDHomePage.objTitle);
		if (getTrayName.contains(getPageTitle)) {
			extent.extentLoggerPass("Listing Collection",
					"Collection listing screen is dislayed on navigating back from Consumption screen");
			logger.info("Collection listing screen is dislayed on navigating back from Consumption screen");
		} else {
			extent.extentLoggerFail("Listing Collection",
					"Collection listing screen failed to display on navigating back from Consumption screen");
			logger.error("Collection listing screen failed to display on navigating back from Consumption screen");
		}
		Back(1);
	}

	/**
	 * @Note This method is to validate the Invite a friend option in More menu
	 * Author : Yashaswini Module : More screen Screen : Invite a friend
	 */
	public void invite_a_Friend(String userType) throws Exception {
		extent.HeaderChildNode("Validation of Invite a Friend Screen as " + userType);
		System.out.println("\nValidation of Invite a Friend Screen as " + userType);

		// To verify if appropriate page is displayed
		if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		} else {
			if (!verifyElementDisplayed(AMDMoreMenu.objMyTransactions)) {
				BackToLandingScreen();
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
			}
		}

		waitTime(2000);
		Swipe("UP", 1);
		swipeUntilFindElement(AMDMoreMenu.objInviteAFriend, "InviteAFriend");
		verifyElementPresentAndClick(AMDMoreMenu.objInviteAFriend, "Invite a Friend in More menu");
		waitTime(2000);

		if (checkElementExist(AMDMoreMenu.objshareOptions, "Share option panel")) {
			logger.info("User is navigated share options screen");
			extent.extentLogger("Share through options screen", "User is navigated to share options screen");
		} else {
			logger.info("User unable to navigate share options screen");
			extent.extentLogger("Share through options screen", "User is not navigated to share options screen");
		}

		int shareOptions = getDriver().findElements(AMDMoreMenu.objShareOptions).size();
		if (shareOptions == 0) {
			extent.extentLoggerFail("Verify share options", "Share Options are not available");
			logger.info("Share Options are not available");
		} else {
			for (int i = 1; i <= shareOptions; i++) {
				String shareOptionName = getText(AMDMoreMenu.objShareOptions(i));
				logger.info("Share Option : " + shareOptionName + " is available to share");
				extent.extentLoggerPass("Social site displayed",
						"Share Option : " + shareOptionName + " is available to share");
			}
		}
		Back(1);
	}

	/**
	 * @Note  This method is to verify the My Transactions screen
	 * Author : Bindu Module : More Screen Screen : My Transactions
	 */
	public void verifyMyTransactions(String userType) throws Exception {

		extent.HeaderChildNode("Verify My transactions Screen");
		System.out.println("\nVerify My transactions Screen");

		if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			// Logout the existing user to login with another account
			zNALogoutMethod();

			String NonsubscribedUserWithInactivePackUserName = getParameterFromXML(
					"NonsubscribedUserWithInActivePackUsername");
			String NonsubscribedUserWithInActivePackPassword = getParameterFromXML(
					"NonsubscribedUserWithInActivePackPassword");

			click(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDMoreMenu.objProfile, "Profile");
			waitTime(2000);
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");

			loginWithEmailID(NonsubscribedUserWithInactivePackUserName, NonsubscribedUserWithInActivePackPassword);
		}

		waitTime(2000);
		// To verify if appropriate page is displayed
		if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		} else {
			if (!verifyElementDisplayed(AMDMoreMenu.objMyTransactions)) {
				BackToLandingScreen();
				verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More Menu");
			}
		}

		waitTime(3000);
		if (verifyIsElementDisplayed(AMDMoreMenu.objMyTransactions)) {
			logger.info("My Transactions option is availabel on More button");
			extent.extentLoggerPass("MoreMenu Screen", "My Transactions option is availabel on More button");

		} else {
			logger.info("My Transactions option is not availabel on More button");
			extent.extentLoggerFail("MoreMenu Screen", "My Transactions option is not availabel on More button");
		}
		click(AMDMoreMenu.objMyTransactions, "My TransactionsOption");
		waitTime(2000);

		if (verifyIsElementDisplayed(AMDMoreMenu.objMyTransactionsHeader)) {

			logger.info("User navigated to My Transactions Page on tapping My Transactions");
			extent.extentLoggerPass("MyTransactions Screen",
					"User navigated to My Transactions Page on tapping My Transactions");
		} else {
			logger.info("User not navigated to My Transactions Page on tapping My Transactions");
			extent.extentLoggerFail("MyTransactions Screen",
					"User not navigated to My Transactions Page on tapping My Transactions");
		}
		myTransactionsWithDetails();

		extent.HeaderChildNode("Verify Date of Transaction for every transaction done by the user");
		String TransactionDate = getDriver().findElement(AMDMoreMenu.objTransactionDate1).getText();
		logger.info(TransactionDate);
		if (checkElementExist(AMDMoreMenu.objTransactionDate1, "Transaction date")) {
			logger.info(
					TransactionDate + " : Date of Transaction is shown for the transactions done by the " + userType);
			extent.extentLoggerPass("MyTransactions Screen",
					TransactionDate + " :Date of Transaction is shown for the transactions done by the " + userType);
		} else {

			logger.info(TransactionDate + " : Date of Transaction is not shown for the transactions done by the "
					+ userType);
			extent.extentLoggerFail("MyTransactions Screen", TransactionDate
					+ " :Date of Transaction is not shown for the transactions done by the " + userType);
		}

		extent.HeaderChildNode("Verify My Transactions pack details");
		String TransactionPackName = getDriver().findElement(AMDMoreMenu.objTransactionPackName1).getText();
		logger.info(TransactionPackName);
		if (checkElementExist(AMDMoreMenu.objTransactionPackName1, "Transaction Pack name")) {
			logger.info(TransactionPackName + " : Transaction pack name is displayed for the " + userType);
			extent.extentLoggerPass("MyTransactions Screen",
					TransactionPackName + " : Transaction pack name is displayed for the " + userType);
		} else {

			logger.info(TransactionPackName + " : Transaction pack name is not displayed for the " + userType);
			extent.extentLoggerFail("MyTransactions Screen",
					TransactionPackName + " : Transaction pack name is not displayed for the " + userType);
		}

		String TransactionPackduration = getDriver().findElement(AMDMoreMenu.objTransactionPackDuration1).getText();
		logger.info(TransactionPackduration);
		if (checkElementExist(AMDMoreMenu.objTransactionPackDuration1, "Transaction Pack duration")) {
			logger.info(TransactionPackduration + " : Transaction pack duration is displayed for the " + userType);
			extent.extentLoggerPass("MyTransactions Screen",
					TransactionPackduration + " : Transaction pack duration is displayed for the " + userType);
		} else {

			logger.info(TransactionPackduration + " : Transaction pack duration is not displayed for the " + userType);
			extent.extentLoggerFail("MyTransactions Screen",
					TransactionPackduration + " : Transaction pack duration is not displayed for the " + userType);
		}

		String TransactionPackRental = getDriver().findElement(AMDMoreMenu.objTransactionPackRental1).getText();
		logger.info(TransactionPackRental);
		if (checkElementExist(AMDMoreMenu.objTransactionPackRental1, "Transaction PackRental")) {
			logger.info(TransactionPackRental + " : Transaction pack rental is displayed for the " + userType);
			extent.extentLoggerPass("MyTransactions Screen",
					TransactionPackRental + " : Transaction pack rental is displayed for the " + userType);
		} else {

			logger.info(TransactionPackRental + " : Transaction pack rental is not displayed for the " + userType);
			extent.extentLoggerFail("MyTransactions Screen",
					TransactionPackRental + " : Transaction pack rental is not displayed for the " + userType);
		}

		extent.HeaderChildNode("Verify Payment mode mentioned for the Transaction done by the user");
		String TransactionPackPaymentMode = getDriver().findElement(AMDMoreMenu.objTransactionPackPaymentMode1)
				.getText();
		logger.info(TransactionPackPaymentMode);
		if (checkElementExist(AMDMoreMenu.objTransactionPackPaymentMode1, "Transaction Pack PaymentMode")) {
			logger.info(
					TransactionPackPaymentMode + " : Transaction pack payment mode is displayed for the " + userType);
			extent.extentLoggerPass("MyTransactions Screen",
					TransactionPackPaymentMode + " : Transaction pack payment mode is displayed for the " + userType);
		} else {

			logger.info(TransactionPackPaymentMode + " : Transaction pack payment mode is not displayed for the "
					+ userType);
			extent.extentLoggerFail("MyTransactions Screen", TransactionPackPaymentMode
					+ " : Transaction pack payment mode is not displayed for the " + userType);
		}

		String TransactionPackCountryDetails = getDriver().findElement(AMDMoreMenu.objTransactionPackCountry1)
				.getText();
		logger.info(TransactionPackCountryDetails);
		if (checkElementExist(AMDMoreMenu.objTransactionPackCountry1, "Transaction Pack Country Details")) {
			logger.info(TransactionPackCountryDetails + " : Transaction pack Country details is displayed for the "
					+ userType);
			extent.extentLoggerPass("MyTransactions Screen", TransactionPackCountryDetails
					+ " : Transaction pack Country details is displayed for the " + userType);
		} else {

			logger.info(TransactionPackCountryDetails + " : Transaction pack Country details is not displayed for the "
					+ userType);
			extent.extentLoggerFail("MyTransactions Screen", TransactionPackCountryDetails
					+ " : Transaction pack Country details is not displayed for the " + userType);
		}

		String TransactionPackAutoRenewal = getDriver().findElement(AMDMoreMenu.objTransactionPackAutoRenewal1)
				.getText();
		logger.info(TransactionPackAutoRenewal);
		if (checkElementExist(AMDMoreMenu.objTransactionPackAutoRenewal1, "Transaction Pack Auto-renewal status")) {
			logger.info(TransactionPackAutoRenewal + " : Transaction pack Auto-renewal details is displayed for the "
					+ userType);
			extent.extentLoggerPass("MyTransactions Screen", TransactionPackAutoRenewal
					+ " : Transaction pack Auto-renewal details is displayed for the " + userType);
		} else {

			logger.info(TransactionPackAutoRenewal
					+ " : Transaction pack Auto-renewal details is not displayed for the " + userType);
			extent.extentLoggerFail("MyTransactions Screen", TransactionPackAutoRenewal
					+ " : Transaction pack Auto-renewal details is not displayed for the " + userType);
		}

		extent.HeaderChildNode("Verify status of Transaction is Shown according to the duration of the pack");
		String TransactionPackStatus = getDriver().findElement(AMDMoreMenu.objTransactionPackStatus1).getText();
		logger.info(TransactionPackStatus);
		if (checkElementExist(AMDMoreMenu.objTransactionPackStatus1, "Transaction Pack Status")) {
			logger.info(TransactionPackStatus + " : Transaction pack Status details is displayed for the " + userType);
			extent.extentLoggerPass("MyTransactions Screen",
					TransactionPackStatus + " : Transaction pack Status details is displayed for the " + userType);
		} else {

			logger.info(
					TransactionPackStatus + " : Transaction pack Status details is not displayed for the " + userType);
			extent.extentLoggerFail("MyTransactions Screen",
					TransactionPackStatus + " : Transaction pack Status details is not displayed for the " + userType);
		}

		extent.HeaderChildNode("Verify download Invoice CTA below My transactions");
		if (checkElementExist(AMDMoreMenu.objDownloadInvoice1, "Download invoice")) {
			logger.info("Download invoice CTA is displayed under My Transactions Screen");
			extent.extentLoggerPass("MyTransactions Screen",
					"Download invoice CTA is displayed under My Transactions Screen");
		} else {
			logger.info("Download invoice CTA is not displayed under My Transactions Screen");
			extent.extentLoggerFail("MyTransactions Screen",
					"Download invoice CTA is not displayed under My Transactions Screen");
		}
		click(AMDMoreMenu.objDownloadInvoice1, "Download invoice");
		Back(2);
		BackToLandingScreen();
		verifyElementPresentAndClick(AMDSearchScreen.objHomeOption, "Bottom bar Home Option");

		zNALogoutMethod();
		if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			validateMyTransactionScreenWithSubscribeNowCTA();
			zNALogoutMethod();
		}
		validateDiscountPack(userType);
	}
/**
 * @Note This method is to verify the My Transactions with all the details present on My Transaction screen
 * @throws Exception
 */
	public void myTransactionsWithDetails() throws Exception {
		extent.HeaderChildNode("Verify My Transactions with details");
		for (int i = 0; i < findElements(AMDMoreMenu.objTransactionDate).size(); i++) {
			if (findElements(AMDMoreMenu.objTransactionDate).get(i).isDisplayed()) {
				logger.info("Date of transaction in My Transaction page is displayed");
				extent.extentLoggerPass("My Transactions", "Date of transaction in My Transaction page is displayed");
			} else {
				logger.error("Date of transaction in My Transaction page is displayed");
				extent.extentLoggerFail("My Transactions", "Date of transaction in My Transaction page is displayed");
			}
		}
		for (int j = 0; j < findElements(AMDMoreMenu.objTransactionPackName).size(); j++) {
			if (findElements(AMDMoreMenu.objTransactionPackName).get(j).isDisplayed()) {
				logger.info("Transaction pack name in My Transaction page is displayed");
				extent.extentLoggerPass("My Transactions", "Transaction pack name in My Transaction page is displayed");
			} else {
				logger.error("Transaction pack name in My Transaction page is displayed");
				extent.extentLoggerFail("My Transactions", "Transaction pack name in My Transaction page is displayed");
			}
		}
		for (int k = 0; k < findElements(AMDMoreMenu.objTransactionPackDuration).size(); k++) {
			if (findElements(AMDMoreMenu.objTransactionPackDuration).get(k).isDisplayed()) {
				logger.info("Transaction pack duration in My Transaction page is displayed");
				extent.extentLoggerPass("My Transactions",
						"Transaction pack duration in My Transaction page is displayed");
			} else {
				logger.error("Transaction pack duration in My Transaction page is displayed");
				extent.extentLoggerFail("My Transactions",
						"Transaction pack duration in My Transaction page is displayed");
			}
		}
		Swipe("UP", 1);

		for (int l = 0; l < findElements(AMDMoreMenu.objTransactionPackRental).size(); l++) {
			if (findElements(AMDMoreMenu.objTransactionPackRental).get(l).isDisplayed()) {
				logger.info("Transaction pack rental details in My Transaction page is displayed");
				extent.extentLoggerPass("My Transactions",
						"Transaction pack rental details in My Transaction page is displayed");
			} else {
				logger.error("Transaction pack rental details in My Transaction page is displayed");
				extent.extentLoggerFail("My Transaction",
						"Transaction pack rental details in My Transaction page is displayed");
			}
		}
		for (int m = 0; m < findElements(AMDMoreMenu.objTransactionPackPaymentMode).size(); m++) {
			if (findElements(AMDMoreMenu.objTransactionPackPaymentMode).get(m).isDisplayed()) {
				logger.info("Transaction pack payment mode details in My Transaction page is displayed");
				extent.extentLoggerPass("My Transactions",
						"Transaction pack payment mode details in My Transaction page is displayed");
			} else {
				logger.error("Transaction pack payment mode details in My Transaction page is displayed");
				extent.extentLoggerFail("My Transactions",
						"Transaction pack payment mode details in My Transaction page is displayed");
			}
		}

		for (int n = 0; n < findElements(AMDMoreMenu.objTransactionPackCountry).size(); n++) {
			if (findElements(AMDMoreMenu.objTransactionPackCountry).get(n).isDisplayed()) {
				logger.info("Transaction pack Country details in My Transaction page is displayed");
				extent.extentLoggerPass("My Transactions",
						"Transaction pack Country details in My Transaction page is displayed");
			} else {
				logger.error("Transaction pack Country details in My Transaction page is displayed");
				extent.extentLoggerFail("My Transactions",
						"Transaction pack Country details in My Transaction page is displayed");
			}
		}
		for (int o = 0; o < findElements(AMDMoreMenu.objTransactionPackAutoRenewal).size(); o++) {
			if (findElements(AMDMoreMenu.objTransactionPackAutoRenewal).get(o).isDisplayed()) {
				logger.info("Transaction pack auto renewal details in My Transaction page is displayed");
				extent.extentLoggerPass("My Transactions",
						"Transaction pack auto renewal details in My Transaction page is displayed");
			} else {
				logger.error("Transaction pack auto renewal details in My Transaction page is displayed");
				extent.extentLoggerFail("My Transactions",
						"Transaction pack auto renewal details in My Transaction page is displayed");
			}
		}
		for (int p = 0; p < findElements(AMDMoreMenu.objTransactionPackStatus).size(); p++) {
			if (findElements(AMDMoreMenu.objTransactionPackStatus).get(p).isDisplayed()) {
				logger.info("Transaction pack status in My Transaction page is displayed");
				extent.extentLoggerPass("My Transactions",
						"Transaction pack status in My Transaction page is displayed");
			} else {
				logger.error("Transaction pack status in My Transaction page is displayed");
				extent.extentLoggerFail("My Transactions",
						"Transaction pack status in My Transaction page is displayed");
			}
		}
		for (int q = 0; q < findElements(AMDMoreMenu.objDownloadInvoice).size(); q++) {
			if (findElements(AMDMoreMenu.objDownloadInvoice).get(q).isDisplayed()) {
				logger.info("Download Invoice CTA My in Transaction page is displayed");
				extent.extentLoggerPass("My Transactions", "Download Invoice CTA in My Transaction page is displayed");
			} else {
				logger.error("Download Invoice CTA in My Transaction page is displayed");
				extent.extentLoggerFail("My Transactions", "Download Invoice CTA My in Transaction page is displayed");
			}
		}
		Swipe("DOWN", 1);
	}
/**
 * @Note This method is to verify Buy Plan(Subscribe Now) CTA in My Transactions screen
 * @throws Exception
 */
	public void validateMyTransactionScreenWithSubscribeNowCTA() throws Exception {
		extent.HeaderChildNode("Verify Subscribe Now CTA in My Transactions Screen");
		System.out.println("\nVerify Subscribe Now CTA in My Transactions Screen");

		String NonsubscribedUserWithNoTransactionUsername = getParameterFromXML(
				"NonsubscribedUserWithNoTransactionUsername");
		String NonsubscribedUserWithNoTransactionPassword = getParameterFromXML(
				"NonsubscribedUserWithNoTransactionPassword");

		click(AMDHomePage.objMoreMenu, "More Menu");
		click(AMDMoreMenu.objProfile, "Profile");
		waitTime(2000);
		verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
		loginWithEmailID(NonsubscribedUserWithNoTransactionUsername, NonsubscribedUserWithNoTransactionPassword);
		waitTime(8000);
		click(AMDHomePage.MoreMenuIcon, "More Menu");
		waitTime(2000);
		click(AMDMoreMenu.objMyTransactions, "My TransactionsOption");
		waitTime(2000);

		if (verifyElementExist(AMDMoreMenu.objSubNowCTA, "Buy Plan CTA")) {
			logger.info(
					"Buy Plan CTA is displayed under My Transactions Screen for No transaction done by the registered user: "
							+ NonsubscribedUserWithNoTransactionUsername);
			extent.extentLoggerPass("MyTransactions Screen",
					"Buy Plan CTA is displayed under My Transactions Screen for No transaction done by the registered user: "
							+ NonsubscribedUserWithNoTransactionUsername);
			click(AMDGenericObjects.objBackBtn, "Back Button");
		} else {
			logger.error("Buy Plan CTA is not displayed under My Transactions Screen for " + pUserType);
			extent.extentLoggerFail("MyTransactions Screen",
					"Buy Plan CTA is not displayed under My Transactions Screen for " + pUserType);
		}
	}
/**
 * @Note This method will verify Discount rentals shown for the purchased pack
 * @param userType
 * @throws Exception
 */
	public void validateDiscountPack(String userType) throws Exception {
		extent.HeaderChildNode("Verify Discount rentals shown for the purchased pack");
		System.out.println("\nVerify Discount rentals shown for the purchased pack");
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			click(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDMoreMenu.objProfile, "Profile");
			waitTime(2000);

			String PackwithDiscountAmountUsername = getParameterFromXML("PackWithDiscountUsername");
			String PackwithDiscountAmountPassword = getParameterFromXML("PackWithDiscountPassword");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");

			loginWithEmailID(PackwithDiscountAmountUsername, PackwithDiscountAmountPassword);

			verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More Menu");
			waitTime(2000);
			verifyElementPresentAndClick(AMDMoreMenu.objMyTransactions, "My TransactionsOption");
			waitTime(2000);

			String TransactionPackRental = getDriver().findElement(AMDMoreMenu.objTransactionPackRental1).getText();
			logger.info(TransactionPackRental);
			if (checkElementExist(AMDMoreMenu.objTransactionPackRental1, "Transaction PackRental")) {
				logger.info(TransactionPackRental + " : Discount Transaction pack rental is displayed for the user ");
				extent.extentLoggerPass("MyTransactions Screen",
						TransactionPackRental + " : Discount Transaction pack rental is displayed for the user ");
			} else {

				logger.error(
						TransactionPackRental + " : Discount Transaction pack rental is not displayed for the user ");
				extent.extentLoggerFail("MyTransactions Screen",
						TransactionPackRental + " : Discount Transaction pack rental is not displayed for the user ");
			}
			Back(1);
		} else {
			logger.info("Discount rental pack details is not applicable for the " + userType);
			extent.extentLoggerPass("MyTransactions Screen",
					"Discount rental pack details is not applicable for the " + userType);
		}

		relaunch(false);
		accessDeviceLocationPopUp("Allow", userType);
		navigateToIntroScreen_DisplaylangScreen();
		zeeApplicasterLogin(userType);
	}
/**
 * @Note This method will validate My Transactions screen with Active pack
 * @throws Exception
 */
	public void validateMyTransactionWithInActivePack() throws Exception {
		extent.HeaderChildNode("Validating My Transactions Screen with Active Pack");
		click(AMDHomePage.objMoreMenu, "More Menu");
		click(AMDMoreMenu.objProfile, "Profile");
		waitTime(2000);

		String NonsubscribedUserWithInactivePackUserName = Reporter.getCurrentTestResult().getTestContext()
				.getCurrentXmlTest().getParameter("NonsubscribedUserWithInActivePackUsername");
		String NonsubscribedUserWithInActivePackPassword = Reporter.getCurrentTestResult().getTestContext()
				.getCurrentXmlTest().getParameter("NonsubscribedUserWithInActivePackPassword");
		verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");

		loginWithEmailID(NonsubscribedUserWithInactivePackUserName, NonsubscribedUserWithInActivePackPassword);
	}
/**
 * @Note This method is to navigate to Home screen
 * @throws Exception
 */
	public void navigateToHomecreenFromIntroScreen() throws Exception {
		System.out.println("\nNavigation to Home Screen");

		if (pUserType.equals("Guest")) {
			verifyElementPresent(AMDHomePage.objHomeTab, "Home landing screen");
		} else {
			logger.info(pUserType + " is already in the Home screen");
			extent.extentLoggerPass("Home Screen", pUserType + " is already in the Home screen");
		}
	}

	/**
	 * @Note This method is to validate the download over wifi only ON state
	 * Author : Manasa Module : Settings
	 */

	public void downloadOverWiFiOnlyONValidation(String userType, String searchKeyword1) throws Exception {
		extent.HeaderChildNode("Download over WiFi only ON state Validation");
		System.out.println("\nDownload over WiFi only ON state Validation");
		if (!(userType.equalsIgnoreCase("Guest"))) {

			verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More Menu tab");
			verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings option");
			waitTime(2000);
			verifyElementPresentAndClick(AMDSettingsScreen.objDownloadOverWifiToggle, "Wifi On toggle");
			Back(1);
			waitTime(2000);
			Back(1);
			click(AMDSearchScreen.objSearchIcon, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, searchKeyword1, "Search bar");
			waitTime(2000);
			hideKeyboard();
			// closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000);
			waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);

			click(AMDMoreMenu.objSearchResult(searchKeyword1), "Search result");

			verifyElementPresentAndClick(AMDMoreMenu.objDownloadIcon, "Download icon");
			verifyElementPresentAndClick(AMDMoreMenu.objDataSaver, "Data Saver option");
			Swipe("UP", 1);
			verifyElementPresentAndClick(AMDMoreMenu.objStartDownload, "Start Download");

			String wifi = "";
			String cmd = "adb shell dumpsys \"wifi | grep 'Wi-Fi is'\"";
			Process p = Runtime.getRuntime().exec(cmd);
			System.out.println(cmd);
			BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
			wifi = br.readLine();
			logger.info("Wifi status :: " + wifi.toString());

			if (wifi.equalsIgnoreCase("Wi-Fi is enabled")) {
				logger.info("Content is downloading on Wifi network");
				extent.extentLoggerPass("Download", "Content is downloading on Wifi network");
			} else {
				logger.error("Content is not downloading on Wifi network");
				extent.extentLoggerFail("Download", "Content is not downloading on Wifi network");
			}
			Back(1);
		} else {
			logger.info("This Validation is NOT Applicable for " + userType);
			extent.extentLogger("Download", "This Validation is NOT Applicable for " + userType);
		}
	}

	/**
	 * @Note This method is to validate the Player controls in Potrait Mode
	 * Author : Sushma Module : Player
	 */
	public void playerPotrait(String searchKeyword, String usertype) throws Exception {
		extent.HeaderChildNode("Potrait mode validation : Player controls Auto Hiding");
		System.out.println("\nPotrait mode validation");
		click(AMDSearchScreen.objSearchIcon, "Search icon");
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword, "Search bar");
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
		click(AMDSearchScreen.objSearchResultContainsText(searchKeyword), "Search result");
		waitTime(5000);
		if (!(usertype.equalsIgnoreCase("SubscribedUser"))) {
			waitForAdToFinishInAmd();
		}
		if (userType.equals("Guest"))
			registerPopUpClose();
		waitTime(8000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		waitTime(1000);
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		scrubVideoToBegining(AMDPlayerScreen.objProgressBar);
		waitTime(4000);
		click(AMDPlayerScreen.objPlay, "Play icon");
		waitTime(7000);
		logger.info("Waited for some time");
		extent.extentLogger("", "Waited for some time");
		if (verifyIsElementDisplayed(AMDPlayerScreen.objFullscreenIcon)) {
			logger.error("Player controls are not auto hidden after keeping the player ideal for few secs");
			extentLoggerFail("", "Player controls are not auto hide after keeping the player ideal for few secs");
		} else {
			logger.info("Player controls are auto hidden after keeping the player ideal for few secs");
			extentLogger("", "Player controls are auto hidden after keeping the player ideal for few secs");
		}
		extent.HeaderChildNode("Potrait icons validation");
		waitTime(3000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPause, "Pause icon");
		verifyElementPresent(AMDPlayerScreen.objPlay, "Play icon");
		//Next and previous icons are removed
/*		verifyElementPresent(AMDPlayerScreen.objNextIcon, "Next icon");
    	click(AMDPlayerScreen.objNextIcon, "Next icon");
		if (!(usertype.equalsIgnoreCase("SubscribedUser"))) {
			waitForAdToFinishInAmd();
		}
		if (userType.equals("Guest"))
			registerPopUpClose();
		waitTime(7000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPause, "Pause icon");
		verifyElementPresent(AMDPlayerScreen.objPreviousIcon, "Previous icon");
		verifyElementPresentAndClick(AMDPlayerScreen.objFullscreenIcon, "Full screen icon");
		waitTime(5000);
		GetAndVerifyOrientation("Landscape");
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		verifyElementPresentAndClick(AMDPlayerScreen.objFullscreenIcon, "Minimize icon");
		*/
		waitTime(5000);
		extent.HeaderChildNode("Elapsed and Total Duration");
		//click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPlay, "Play icon");
		// -----------verifying Elapsed timer--------//
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		String time1 = getText(AMDPlayerScreen.objTimer);
		logger.info("Elapsed time displayed : " + time1);
		extentLogger("", "Elapsed time displayed : " + time1);
		int elapsedTime = timeToSec(time1);
		//tapPlayerToGetControls("portrait");
		String time2 = getText(AMDPlayerScreen.objTotalDuration);
		String[] Time2 = time2.split("-");
		System.out.println(Time2[1]);
		String[] Time = Time2[1].split(" ");
		System.out.println(Time[1]);
		logger.info("Total time displayed : " + Time[1]);
		extentLogger("", "Total time displayed : " + Time[1]);
		int totalTime = timeToSec(Time[1]);
		if (elapsedTime < totalTime) {
			logger.info("Elapsed time is lesser than Total time, expected behavior");
			extentLoggerPass("", "Elapsed time is lesser than Total time, expected behavior");
		} else {
			logger.info("Elapsed time is not lesser than Total time");
			extentLoggerFail("", "Elapsed time is not lesser than Total time");
		}
		waitTime(5000);
		//click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		WebElement elementElapsedBtn = findElement(AMDPlayerScreen.objTimer);
		int etimeBtnleftX = elementElapsedBtn.getLocation().getX();
		int etimeBtnrightX = etimeBtnleftX + elementElapsedBtn.getSize().getWidth();
		int etimemiddleX = (etimeBtnrightX + etimeBtnleftX) / 2;
		Dimension sizee = getDriver().manage().window().getSize();
		int screenmid = sizee.getWidth() / 2;
		if (etimemiddleX < screenmid) {
			logger.info("Elapsed timer is displayed on left corner as expected");
			extent.extentLoggerPass("Elapsed time", "Elapsed timer is displayed on left corner as expected");
		} else {
			logger.error("Elapsed timer is not displayed on left corner");
			extent.extentLoggerFail("Elapsed timer", "Elapsed timer is not displayed on left corner");
		}

		// -----------verifying Total Content Duration---------//
		//click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		WebElement elementTotDur = findElement(AMDPlayerScreen.objTotalDuration);
		int eleTotDurRightX = elementTotDur.getLocation().getX();
		int sizeee = sizee.getWidth() - 500;
		if (eleTotDurRightX >= sizeee) {
			logger.info("Content duration is displayed on right corner as expected");
			extent.extentLoggerPass("Content duration", "Content duration is displayed on right corner as expected");
		} else {
			logger.error("Content duration is not displayed on right corner");
			extent.extentLoggerFail("Content duration", "Content duration is not displayed on right corner");
		}
		extent.HeaderChildNode("Chromecast icon presence");
		waitTime(4000);
		//click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		if (findElement(AMDPlayerScreen.objChromeCastIcon).isEnabled() == false) {
			logger.info("Chrome cast icon is displayed in disabled state");
			extent.extentLoggerPass("Chrome cast", "Chrome cast icon is displayed in disabled state");
		} else {
			logger.error("Chrome cast icon is not displayed in disabled state");
			extent.extentLoggerFail("Chrome cast", "Chrome cast icon is not displayed in disabled state");
		}
		click(AMDPlayerScreen.objPlay, "Play icon");
		waitTime(3000);
		verifyPlaybackAfterLockAndUnlock();
		waitTime(5000);
		verifyPlaybackAfterMinimzeAndMaximizeAppFromBackground();
	//	ForwardAndRewindThePlayerByDoubleTapping(1);
		seekVideoFunctionality(AMDPlayerScreen.objProgressBar, usertype);
		verifyPlaybackAfterNetworkInterruption();
		Back(1);
	}

/**
 * @Note This method is to validate the Seek video functionality																									
 * @param byLocator
 * @param usertype
 * @throws Exception
 */
	public void seekVideoFunctionality(By byLocator, String usertype) throws Exception {
		extent.HeaderChildNode("Seek Functionality");
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		String beforeSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time before seeking : " + timeToSec(beforeSeek));
		extent.extentLogger("Seek", "Current time before seeking in seconds: " + timeToSec(beforeSeek));
		waitTime(7000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		WebElement element = getDriver().findElement(byLocator);
		Dimension size = element.getSize();
		int x = (int) (size.width);
		SwipeAnElement(element, x - 100, 0);
		logger.info("Scrolled the seek bar");
		extent.extentLogger("Seek", "Scrolled the seek bar");
		waitTime(10000);
		if (!(usertype.equalsIgnoreCase("SubscribedUser"))) {
			waitForAdToFinishInAmd();
		}
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		String afterSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time after seeking in seconds : " + timeToSec(afterSeek));
		extent.extentLogger("Seek", "Current time after seeking in seconds : " + timeToSec(afterSeek));
		if (timeToSec(afterSeek) > timeToSec(beforeSeek)) {
			logger.info("Seek bar is functional");
			extent.extentLoggerPass("Seek", "Seek bar is functional");
		} else {
			logger.error("Seek bar is not functional");
			extent.extentLoggerFail("Seek", "Seek bar is not functional");
		}
	}

	public void verifyPlaybackAfterNetworkInterruption() throws Exception {
		extent.HeaderChildNode("Validation of content playback after Network Interruption");
		System.out.println("\nValidation of content playback after Network Interruption");
		waitTime(5000);
		tapPlayerToGetControls("portrait");
		String time1 = getText(AMDPlayerScreen.objTimer);
		int startTime = timeToSec(time1);
		System.out.println(startTime);
		logger.info("Time captured before network interruption : " + startTime);
		extentLogger("Time", "Time captured before network interruption : " + startTime);
		TurnOFFWifi();
		waitTime(15000);
		verifyElementPresent(AMDPlayerScreen.objRetryBtn, "Retry CTA");
		TurnONWifi();
		waitTime(5000);
		click(AMDPlayerScreen.objRetryBtn, "Retry CTA");
		tapPlayerToGetControls("portrait");
		String time2 = getText(AMDPlayerScreen.objTimer);
		int elapsedTime = timeToSec(time2);
		logger.info("Time captured after network is connected : " + elapsedTime);
		extentLogger("Time", "Time captured after network is connected : " + elapsedTime);
		if (elapsedTime > startTime) {
			logger.info("Content playback is resumed after network is connected");
			extentLoggerPass("Elapsed time", "Content playback is resumed after network is connected");
		} else {
			logger.info("Content playback is not resumed after network is connected");
			extentLoggerFail("Elapsed time", "Content playback is not resumed after network is connected");
		}
	}
/**
 * @Note This method is to validate the Subscription link displayed on Player screen
 * @throws Exception
 */
	public void movieWithoutTrailer() throws Exception {
		extent.HeaderChildNode("InLineSubscription link");
		waitTime(2000);
		clearField(AMDSearchScreen.objSearchEditBox, "Search Box");
		waitTime(2000);
		type(AMDSearchScreen.objSearchBoxBar, "Chemistry of Kariyappa", "Search bar");
		hideKeyboard();
		// closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000);
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
		verifyElementPresentAndClick(AMDSearchScreen.objFirstContentInSearchResult, "Search result");
		waitTime(3000);
		verifyElementExist(AMDPlayerScreen.objPremiumTextOnPlayer, "Subscription required text");
		verifyElementPresentAndClick(AMDPlayerScreen.objSubscribeNowLinkOnPlayer, "Buy Plan Link");
		if (checkElementExist(AMDPlayerScreen.objGetPremiumPopUp, "Subscribe screen")) {
			logger.info("User is navigated to Subscribe screen post tapping on Buy Plan Link");
			extentLogger("GetPremium popUp", "User is navigated to Subscribe screen post tapping on Buy Plan Now Link");
		} else {
			logger.info("User is not navigated to Subscribe screen  post tapping on Buy Plan Link");
			extentLoggerFail("GetPremium popUp",
					"User is not navigated to Subscribe screen post tapping on Buy Plan Link");
		}
		Back(1);
		verifyElementExist(AMDPlayerScreen.objLoginTextOnPlayer, "Login required text");
		verifyElementPresentAndClick(AMDPlayerScreen.objLoginLinkOnPlayer, "Login link");
		if (checkElementExist(AMDLoginScreen.objLoginOrRegisterPageTitle, "Login/Register screen")) {
			logger.info("User is navigated to Login/Register screen post tapping on Login link");
			extentLogger("Login/Register screen",
					"User is navigated to Login/Register screen post tapping on Login link");
		} else {
			logger.info("User is navigated to Login/Register screen post tapping on Login link");
			extentLoggerFail("Login/Register screen",
					"User is navigated to Login/Register screen post tapping on Login link");
		}
		Back(1);
		waitTime(2000);
		Back(1);
	}
/**
 * @Note This method will seek the video till last
 * @param byLocator1
 * @throws Exception
 */
	public void seekVideoTillLast(By byLocator1) throws Exception {

		String beforeSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time before seeking : " + timeToSec(beforeSeek));
		extent.extentLogger("Seek", "Current time before seeking in seconds: " + timeToSec(beforeSeek));

		WebElement element = getDriver().findElement(byLocator1);
		Dimension size = element.getSize();
		int startx = (int) (size.width);
		int startX = startx + 180;
		System.out.println(startX);
		SwipeAnElement(element, startX, 0);

		waitTime(2000);
		String afterSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time after seeking in seconds : " + timeToSec(afterSeek));
		extent.extentLogger("Seek", "Current time after seeking in seconds : " + timeToSec(afterSeek));

		String totalDur = findElement(AMDPlayerScreen.objTotalDuration).getText();
		if (timeToSec(afterSeek) > (timeToSec(totalDur) - 120)) {
			logger.info("Seeked the video till last");
			extentLoggerPass("Seeking the video till last", "Seeked the video till last");
			logger.info("Seek bar is functional");
			extent.extentLogger("Seek", "Seek bar is functional");
		} else {
			logger.info("Not seeked the video till last");
			extentLoggerFail("Seeking the video till last", "Not seeked the video till last");
			logger.info("Seek bar is not functional");
			extent.extentLoggerFail("Seek", "Seek bar is not functional");
		}
	}
/**
 * @Note Method is to forward and rewind the player by double tapping on player screen
 * @param n
 * @throws Exception
 */
	@SuppressWarnings("rawtypes")
	public void forwardAndRewindThePlayerByDoubleTapping(int n) throws Exception {
		extent.HeaderChildNode("Verification of Forward and Rewind of a playback");
		System.out.println("\nVerification of Forward and Rewind of a playback");
		int playerX = Integer.valueOf(getAttributValue("x", AMDPlayerScreen.objPlayerScreen));
		System.out.println(playerX);
		int playerY = Integer.valueOf(getAttributValue("y", AMDPlayerScreen.objPlayerScreen));
		System.out.println(playerY);
		int playerWidth = Integer.valueOf(getAttributValue("width", AMDPlayerScreen.objPlayerScreen));
		System.out.println(playerWidth);
		int playerHeight = Integer.valueOf(getAttributValue("height", AMDPlayerScreen.objPlayerScreen));
		System.out.println(playerHeight);
		int xValueRewind = playerX + playerWidth / 5;
		System.out.println(xValueRewind);
		int yValueRewind = playerY + playerHeight / 3;
		System.out.println(yValueRewind);
		int xValueForward = (int) (playerX + (playerWidth * (0.75)));
		System.out.println(xValueForward);
		int yValueForward = yValueRewind;
		System.out.println(yValueForward);
		tapPlayerToGetControls("portrait");
		String timeBeforeForward = getText(AMDPlayerScreen.objTimer);
		int timebeforeforward = timeToSec(timeBeforeForward);
		logger.info("Time captured before forward: " + timeBeforeForward);
		extentLogger("Forward", "Time captured before forward: " + timeBeforeForward);
		waitTime(3000);
		touchAction = new TouchAction(getDriver());
		for (int i = 0; i < n; i++) {
			touchAction.press(PointOption.point(xValueForward, yValueForward)).release().perform()
					.press(PointOption.point(xValueForward, yValueForward)).release().perform();
		}
		tapPlayerToGetControls("portrait");
		String timeAfterForward = getText(AMDPlayerScreen.objTimer);
		int timeafterforward = timeToSec(timeAfterForward);
		logger.info("Time captured after forward: " + timeAfterForward);
		extentLogger("Forward", "Time captured after forward: " + timeAfterForward);
		if (timeafterforward >= timebeforeforward + 10) {
			logger.info("User is able to fast forward the playback on double tapping " + n
					+ " time in the player screen for " + ((n) * 10) + "secs");
			extentLoggerPass("Forward the playback", "User is able to fast forward the playback on double tapping " + n
					+ " time in the player screen for " + ((n) * 10) + "secs");
		} else {
			logger.error("User is NOT able to fast forward the playback on double tapping " + n
					+ " time in the player screen for " + ((n) * 10) + "secs");
			extentLoggerFail("Forward the playback", "User is NOT able to fast forward the playback on double tapping "
					+ n + " time in the player screen for " + ((n) * 10) + "secs");
		}
		waitTime(2000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		String timeBeforeRewind = getText(AMDPlayerScreen.objTimer);
		int timebeforerewind = timeToSec(timeBeforeRewind);
		logger.info("Time captured before rewind: " + timeBeforeRewind);
		extentLogger("Rewind", "Time captured before rewind: " + timeBeforeRewind);
		for (int i = 0; i < n; i++) {
			touchAction.press(PointOption.point(xValueRewind, yValueRewind)).release().perform()
					.press(PointOption.point(xValueRewind, yValueRewind)).release().perform();
		}
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		String timeAfterRewind = getText(AMDPlayerScreen.objTimer);
		int timeafterrewind = timeToSec(timeAfterRewind);
		logger.info("Time captured after rewind: " + timeAfterRewind);
		extentLogger("Forward", "Time captured after rewind: " + timeAfterRewind);
		if (timeafterrewind <= timebeforerewind + 4) {
			logger.info("User is able to fast rewind the playback on double tapping " + n
					+ " time in the player screen for " + (n * 10) + "secs");
			extentLoggerPass("Rewind the playback", "User is able to fast rewind the playback on double tapping " + n
					+ " time in the player screen for " + (n * 10) + "secs");
		} else {
			logger.error("User is NOT able to fast rewind the playback on double tapping " + n
					+ " time in the player screen for " + (n * 10) + "secs");
			extentLoggerFail("Rewind the playback", "User is NOT able to fast rewind the playback on double tapping "
					+ n + " time in the player screen for " + (n * 10) + "secs");
		}
	}
/**
 * @Note Method is to validate the Skip Intro CTA
 * @param searchKeyword3
 * @throws Exception
 */
	public void skipIntroValidation(String searchKeyword3) throws Exception {
		extent.HeaderChildNode("Validation of Skip Intro CTA");
		waitTime(5000);
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword3 + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);

		verifyElementPresentAndClick(AMDMoreMenu.objSearchResult(searchKeyword3), "Search result");
		waitTime(5000);

		click(AMDPlayerScreen.objPlayerScreen, "Player screen");

		verifyElementPresentAndClick(AMDPlayerScreen.objPauseIcon, "Pause icon");
		waitTime(2000);
		verifyElementPresentAndClick(AMDPlayerScreen.objFullscreenIcon, "Maximize Icon");

		String time1 = getText(AMDPlayerScreen.objTimer);
		int startTime = timeToSec(time1);

		logger.info("Time before clicking on Skip Intro CTA : " + startTime);
		extentLogger("Time", "Time before clicking on Skip Intro CTA : " + startTime);

		verifyElementPresentAndClick(AMDPlayerScreen.objSkipIntro, "Skip Intro CTA");
		waitTime(2000);
		verifyElementPresentAndClick(AMDPlayerScreen.objPlayIcon, "Play icon");

		String time2 = getText(AMDPlayerScreen.objTimer);
		int elapsedTime = timeToSec(time2);

		logger.info("Time after clicking on Skip Intro CTA : " + elapsedTime);
		extentLogger("Time", "Time after clicking on Skip Intro CTA : " + elapsedTime);

		if (elapsedTime > startTime) {
			logger.info("Introduction playback of the content is skipped");
			extentLogger("Elapsed time", "Introduction playback of the content is skipped");
		} else {
			logger.info("Introduction playback of the content is not skipped");
			extentLoggerFail("Elapsed time", "Introduction playback of the content is not skipped");
		}

	}

	/**
	 * @Note Method is to validate the Watch credits CTA and upnext card displayed on player screen
	 * Author : Sushma
	 */

	public void validationOfWatchCreditsAndUpNextCard(String searchKeyword, String usertype) throws Exception {
		extent.HeaderChildNode("Validation of Watch Credits CTA and UpNext Card");
		System.out.println("\nValidation of Watch Credits CTA and UpNext Card");

		click(AMDSearchScreen.objSearchIcon, "Search icon");
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);

		click(AMDMoreMenu.objSearchResult(searchKeyword), "Search result");
		verifyElementExist(AMDPlayerScreen.objPlayer, "Player screen");
		waitTime(7000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		Swipe("UP", 1);
		String firstTitleInUpnextTray = null;
		if (verifyElementDisplayed(AMDPlayerScreen.objFirstContentCardTitleInUpnextTray)) {
			firstTitleInUpnextTray = getText(AMDPlayerScreen.objFirstContentCardTitleInUpnextTray);
		}
		waitTime(2000);
		seekVideoTillLast(AMDPlayerScreen.objProgressBar);
		click(AMDPlayerScreen.objPlayIcon, "Play icon");
		verifyElementPresent(AMDPlayerScreen.objWatchCreditsCTA, "Watch Credits CTA");

		if (usertype.equalsIgnoreCase("Guest")) {
			verifyElementPresent(AMDPlayerScreen.objUpNextCard, "Upnext card");

			if (verifyIsElementDisplayed(AMDPlayerScreen.objCountDownTimerInUpNextCard)) {
				String timerOnUpnextcard = getText(AMDPlayerScreen.objCountDownTimerInUpNextCard);
				logger.info("Timer on Upnext card: " + timerOnUpnextcard);
				extentLogger("Timer on Upnext card", "Timer on Upnext card: " + timerOnUpnextcard);
				waitTime(5000);
				if (verifyIsElementDisplayed(AMDPlayerScreen.objCountDownTimerInUpNextCard)) {
					logger.info("Timer on Upnext card is not exceeded");
					extentLogger("Timer on Upnext card", "Timer on Upnext card is not exceeded");
				} else {
					logger.info("Timer on Upnext card is exceeded");
					extentLogger("Timer on Upnext card", "Timer on Upnext card is exceeded");
				}
			}

			verifyElementExist(AMDPlayerScreen.objPlayer, "Player screen");
			Swipe("DOWN", 1);
			verifyElementDisplayed(AMDPlayerScreen.objcontentTitleInconsumptionPage);
			String title = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);

			if (firstTitleInUpnextTray.equalsIgnoreCase(title)) {
				logger.info("User is jumped to the next content when timer exceeds");
				extentLoggerPass("Upnext card", "User is jumped to the next content when timer exceeds");
			} else {
				logger.info("User is not jumped to the next content when timer exceeds");
				extentLoggerFail("Upnext card", "User is not jumped to the next content when timer exceeds");
			}
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			verifyElementPresentAndClick(AMDPlayerScreen.objBackButton, "Back button");
			if (verifyIsElementDisplayed(AMDMoreMenu.objSearchResult(searchKeyword))) {
				logger.info("User is navigated back to the previous screen from where the content is accessed");
				extentLoggerPass("back button",
						"User is navigated back to the previous screen from where the content is accessed");
			} else {
				logger.error("User is navigated back to the previous screen from where the content is accessed");
				extentLoggerFail("back button",
						"User is navigated back to the previous screen from where the content is accessed");
			}

			click(AMDMoreMenu.objSearchResult(searchKeyword), "Search result");
			verifyElementExist(AMDPlayerScreen.objPlayer, "Player screen");
			waitTime(7000);
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			click(AMDPlayerScreen.objPauseIcon, "Pause icon");
			waitTime(2000);
			seekVideoTillLast(AMDPlayerScreen.objProgressBar);
			click(AMDPlayerScreen.objPlayIcon, "Play icon");
			JSClick(AMDPlayerScreen.objUpNextCard, "Upnext card");
			verifyElementExist(AMDPlayerScreen.objPlayer, "Player screen");
			Swipe("DOWN", 1);
			verifyElementDisplayed(AMDPlayerScreen.objcontentTitleInconsumptionPage);
			title = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);

			if (firstTitleInUpnextTray.equalsIgnoreCase(title)) {
				logger.info("User is navigated to the next content post tapping on Upnext card");
				extentLoggerPass("Upnext card", "User is navigated to the next content post tapping on Upnext card");
			} else {
				logger.info("User is not navigated to the next content post tapping on Upnext card");
				extentLoggerFail("Upnext card",
						"User is not navigated to the next content post tapping on Upnext card");
			}
		}
		Back(1);
	}

	/**
	 * @Note This will validate the Replay icon on Player screen
	 * Author : Sushma Module : Player
	 */

	public void validationOfReplayIconOnPlayer(String searchKeyword) throws Exception {
		extent.HeaderChildNode("Validation of Replay icon on Player");
		System.out.println("\nValidation of Replay icon on Player");
		searchKeyword = "Rekkeyaa Duet";
		click(AMDHomePage.MoreMenuIcon, "More menu icon");
		click(AMDMoreMenu.objSettings, "Settings option");

		String elementAutoPlayToggleStatus = getText(AMDMoreMenu.objVideo_Autoply);
		logger.info("Auto play setting is currently : " + elementAutoPlayToggleStatus);
		extent.extentLogger("", "Auto play setting is currently : " + elementAutoPlayToggleStatus);
		if (elementAutoPlayToggleStatus.equalsIgnoreCase("ON")) {
			click(AMDMoreMenu.objVideo_Autoply, "Auto play");
			logger.info("Clicked on Autoplay to turn it OFF");
			extent.extentLogger("", "Clicked on Autoplay to turn it OFF");
		}
		Back(1);
		waitTime(3000);
		Back(1);
		waitTime(3000);
		click(AMDSearchScreen.objSearchIcon, "Search icon");
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword + "\n", "Search bar");
		hideKeyboard();
		// closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000);
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
		click(AMDSearchScreen.objSearchResultContainsText(searchKeyword), "Search result");
		waitTime(10000);
		if (userType.equals("Guest"))
			registerPopUpClose();
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			waitForAdToFinishInAmd();
		}
		if (userType.equals("Guest"))
			registerPopUpClose();
		String contentTitle1 = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);
		waitTime(7000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		WebElement element = getDriver().findElement(AMDPlayerScreen.objProgressBar);
		Dimension size = element.getSize();
		int startx = (int) (size.width);
		int startX = startx + 180;
		System.out.println(startX);
		SwipeAnElement(element, startX, 0);
		logger.info("Seeked to the end");
		extent.extentLogger("", "Seeked to the end");
		waitTime(5000);
//		tapPlayerToGetControls("portrait");
//		click(AMDPlayerScreen.objPlayIcon, "Play icon");
		verifyElementExist(AMDPlayerScreen.objReplayIconOnPlayer, "Replay icon");
		// screencapture();
		click(AMDPlayerScreen.objReplayIconOnPlayer, "Replay icon");
		waitTime(3000);
		if (verifyIsElementDisplayed(AMDPlayerScreen.objGetPremiumPopUp, "Subscribe screen")) {
			Back(1);
		}

		Swipe("DOWN", 1);
		String contentTitle2 = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);
		if (contentTitle1.equalsIgnoreCase(contentTitle2)) {
			logger.info("same content playback is started again by tapping on Replay icon");
			extentLoggerPass("Replay icon", "same content playback is started again by tapping on Replay icon");
		} else {
			logger.info("same content playback is not started again by tapping on Replay icon");
			extentLoggerFail("Replay icon", "same content playback is not started again by tapping on Replay icon");
		}
		Back(1);
		click(AMDHomePage.MoreMenuIcon, "More menu icon");
		click(AMDMoreMenu.objSettings, "Settings option");
		elementAutoPlayToggleStatus = getText(AMDMoreMenu.objVideo_Autoply);
		click(AMDMoreMenu.objVideo_Autoply, "Auto play");
		Back(1);
		waitTime(3000);
		Back(1);
	}

	/** 
	 * @Note This method is to validate the Player screen in Full screen mode
	 * Author : Manasa Module : Player
	 */
	public void playerValidationInFullScreenMode(String userType, String searchKeyword11, String searchKeyword4)
			throws Exception {
		extent.HeaderChildNode("Player screen Validation in Fullscreen Mode");
		System.out.println("\nPlayer screen Validation in Fullscreen Mode");
		waitTime(3000);
		click(AMDHomePage.objMoreMenu, "More Menu");
		waitTime(1000);
		click(AMDMoreMenu.objSettings, "Settings option");
		String getPropertyvalue = getAttributValue("text", AMDMoreMenu.objVideo_Autoply);
		if (getPropertyvalue.equalsIgnoreCase("ON")) {
			click(AMDMoreMenu.objVideo_Autoply, "Autoplay TrunOff");
			logger.info("AutoPlay Option is Turned OFF");
			extentLoggerPass("Autoplay Option", "AutoPlay Option is Turned OFF");
		} else {
			logger.info("AutoPlay Option was already Turned OFF");
			extentLoggerPass("Autoplay Option", "AutoPlay Option was already Turned OFF");
		}
		Back(2);
		click(AMDSearchScreen.objSearchIcon, "Search icon");
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword11 + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);

		click(AMDSearchScreen.objSearchResultFirstContent, "Search result");
		waitTime(4000);
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			waitTime(5000);
			registerPopUpClose();
			completeProfilePopUpClose(userType);
			LoadingInProgress();
			adPlay();
			registerPopUpClose();
			completeProfilePopUpClose(userType);
		}
		if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		}
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		
//		scrubVideoToBegining(AMDPlayerScreen.objProgressBar);
//		waitTime(2000);
//		click(AMDPlayerScreen.objPlay, "Play icon");
//		click(AMDPlayerScreen.objPauseIcon, "Pause icon");

		if (verifyElementExist(AMDPlayerScreen.objPlayer, "Player screen")) {
			verifyElementPresentAndClick(AMDPlayerScreen.objFullscreenIcon, "Maximize Icon");
			waitTime(2000);
			GetAndVerifyOrientation("Landscape");
//			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
//				click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
//			}
			click(AMDPlayerScreen.objPlayIcon, "Play icon");
			// Hard wait to check if player controls disappear
			waitTime(7000);
			if (verifyIsElementDisplayed(AMDPlayerScreen.objNextIcon)) {
				logger.info("Player controls does not auto hide after keeping the player idle for few sec's");
				extentLoggerFail("Player controls Auto hide",
						"Player controls does not auto hide after keeping the player idle for few sec's");
			} else {
				logger.info("Player controls auto hide after keeping the player idle for few sec's");
				extentLoggerPass("Player controls Auto hide",
						"Player controls auto hide after keeping the player idle for few sec's");
			}

//			ForwardAndRewindThePlayerByDoubleTapping(1);
//			waitTime(5000);
//			ForwardAndRewindThePlayerByDoubleTapping(2);

			extent.HeaderChildNode("Player screen controls Validation in Fullscreen Mode");
			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
				click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
			}
			click(AMDPlayerScreen.objPauseIcon, "Pause icon");
			verifyElementPresent(AMDPlayerScreen.objProgressBar, "Progress/Seek Bar");
		//	verifyElementPresent(AMDPlayerScreen.objNextIcon, "Next Icon");
			verifyElementPresent(AMDPlayerScreen.objChromeCastIcon, "Chromecast Icon");

			if (findElement(AMDPlayerScreen.objChromeCastIcon).isEnabled() == false) {
				logger.info("Chrome cast icon is displayed in disable state");
				extent.extentLoggerPass("Chrome cast", "Chrome cast icon is displayed in disable state");
			} else {
				logger.error("Chrome cast icon is not displayed in disable state");
				extent.extentLoggerFail("Chrome cast", "Chrome cast icon is not displayed in disable state");
			}

			verifyElementPresent(AMDPlayerScreen.objTitleOnPlayer, "Content Title on player");

			WebElement elementElapsedBtn = findElement(AMDPlayerScreen.objTimer);
			int etimeBtnleftX = elementElapsedBtn.getLocation().getX();
			int etimeBtnrightX = etimeBtnleftX + elementElapsedBtn.getSize().getWidth();
			int etimemiddleX = (etimeBtnrightX + etimeBtnleftX) / 2;

			if (etimemiddleX <= 200) {
				logger.info("Elapsed timer is displayed on left corner ");
				extent.extentLoggerPass("Elapsed time", "Elapsed timer is displayed on left corner ");
			} else {
				logger.error("Elapsed timer is not displayed on left corner ");
				extent.extentLoggerFail("Elapsed timer", "Elapsed timer is not displayed on left corner ");
			}

			WebElement elementTotDur = findElement(AMDPlayerScreen.objTotalDuration);
			int eleTotDurRightX = elementTotDur.getLocation().getX();
			Dimension sizee = getDriver().manage().window().getSize();
			int sizeee = sizee.getWidth() - 500;
			if (eleTotDurRightX >= sizeee) {
				logger.info("Content duration is displayed on right corner");
				extent.extentLoggerPass("Content duration", "Content duration is displayed on right corner");
			} else {
				logger.error("Content duration is not displayed  on right corner");
				extent.extentLoggerFail("Content duration", "Content duration is not displayed  on right corner");
			}

			verifyElementPresentAndClick(AMDPlayerScreen.objQuality, "Player Quality option");
			String quality = getText(AMDPlayerScreen.DefaultQualityOption);
			if (quality.contains("Auto")) {
				logger.info("Video Quality is set to " + quality + " by default");
				extent.extentLoggerPass("Video Quality", "Video Quality is set to " + quality + " by default");

			} else {
				logger.error(" AMA2-11935 : Video Quality is not set to Auto by default");
				extent.extentLoggerFail(" AMA2-11935 : Video Quality", "Video Quality is not set to Auto by default");
			}

			//click(AMDPlayerScreen.objQuality, "Quality");

			List<WebElement> qualityOptions = findElements(AMDPlayerScreen.objQualityOptions);
			System.out.println(qualityOptions.size());
			for (int i = 0; i < qualityOptions.size(); i++) {
				String options = getText(AMDPlayerScreen.objQualityOptions(i + 1));
				logger.info("Quality option : " + options);
				extent.extentLoggerPass("Video Quality", "Quality option : " + options);
			}
			//Back(1);
			click(AMDPlayerScreen.objCloseIcon,"Close icon");
//			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
//				click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
//			}
		//	click(AMDPlayerScreen.objThreeDotsOnPlayer, "Player option with 3 dots");
			if (verifyElementExist(AMDPlayerScreen.objAddToWatchlist, "Add to Watchlist option")) {
				click(AMDPlayerScreen.objAddToWatchlist, "Add to Watchlist option");
				if (userType.equalsIgnoreCase("Guest")) {
					if (verifyElementExist(AMDOnboardingScreen.objScreenTitle, "Login/Register Page")) {
						logger.info("Navigated to Login/Registration screen");
						extent.extentLoggerPass("Login page", "Navigated to Login/Registration screen");
						waitTime(2000);
						click(AMDLoginScreen.objLoginLnk, "Skip link");
						// Back(1);
					} else {
						logger.error("Not Navigated to Login/Registration screen");
						extent.extentLoggerFail("Login page", "Not navigated to Login/Registration screen");
						Back(1);
					}
				}
			} else {
				Back(1);
			}
			waitTime(5000);
			
			
//			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
//				click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
//			}
//			click(AMDPlayerScreen.objThreeDotsOnPlayer, "Player option with 3 dots");
			
			
			verifyElementPresentAndClick(AMDPlayerScreen.objPlaybackRate, "Playback Rate option");

		List<WebElement> playbackRate = findElements(AMDPlayerScreen.objVideoQualityOptions );

			for (int i = 0; i < playbackRate.size(); i++) {
				String options = getText(AMDPlayerScreen.objQualityOptions(i + 1));
				logger.info("Playback Rate option : " + options);
				extent.extentLoggerPass("Playback Rate", "Playback Rate option : " + options);
			}
			String rate = getText(AMDPlayerScreen.objPlaybackRateSelected);
			System.out.println(rate);
			if (rate.equalsIgnoreCase("1.0")) {
				logger.info("Playback rate is set to " + rate + " by default");
				extent.extentLoggerPass("Playback Rate", "Playback rate is set to " + rate + " by default");
			} else {
				logger.error("Playback rate is not set to 1.0 by default");
				extent.extentLoggerFail("Playback rate", "Playback rate is not set to 1.0 by default");
			}

			//Back(1);
			click(AMDPlayerScreen.objCloseIcon,"Close icon");
			
			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
				click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
				waitTime(2000);
				click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
			} else {
				click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
			}
			verifyPlaybackAfterMinimzeAndMaximizeAppFromBackground();
			waitTime(5000);
			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
				click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
				waitTime(2000);
				click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
			} else {
				click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
			}
			verifyPlaybackAfterLockAndUnlock();
			waitTime(5000);
			// click(AMDPlayerScreen.objPlayerScreen, "Player Frame");
			// verifyPlaybackAfterNetworkInterruption();
			// waitTime(5000);

			extent.HeaderChildNode("Share option Validation in Fullscreen Mode");
			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
				click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
			}
			click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
			click(AMDPlayerScreen.objShareIconOnPlayer, "Share Icon");
			verifyElementPresent(AMDPlayerScreen.objSharePopUp, "Share Pop Up/Share Overlay");
			checkElementExist(AMDPlayerScreen.objCopyToClipboard, "Copy to clipboard");

			boolean facebookIcon = verifyElementDisplayed(AMDPlayerScreen.objFacebook);
			if (facebookIcon) {
				click(AMDPlayerScreen.objFacebook, "Facebook Icon");
				logger.info("Selected Facebook icon from Share screen");
				extent.extentLoggerPass("Facebook Icon", "Selected Facebook icon from Share screen");

				waitTime(5000);
				boolean fbLoginPage = verifyElementDisplayed(AMDPlayerScreen.objfbLoginPage);
				if (fbLoginPage) {
					logger.error("Facebook account is not logged into this device");
					extent.extentLoggerWarning("Facebook Account", "Facebook account is not logged into this device");
					Back(1);
				} else {
					boolean fbPost = verifyElementDisplayed(AMDPlayerScreen.objFacebookPost);
					if (fbPost) {
						click(AMDPlayerScreen.objFacebookPost, "Post Icon");
						logger.info("Selected Post icon from Facebook page");
						extent.extentLoggerPass("Post Icon", "Selected Post icon from Facebook page");
					} else {
						logger.error("Post Icon is not displayed");
						extent.extentLoggerWarning("Post Icon", "Post Icon is not displayed");
						Back(2);
					}
				}
			} else {
				logger.error("Facebook icon is NOT available in the Share screen");
				extent.extentLoggerWarning("Facebook Icon", "Facebook icon is NOT available to Share");
			}

			waitTime(5000);
			click(AMDPlayerScreen.objPlayerScreen, "Player Frame");
			click(AMDPlayerScreen.objShareIconOnPlayer, "Share Icon");

			boolean twitter = verifyIsElementDisplayed(AMDPlayerScreen.objTwitter);
			if (twitter) {
				click(AMDPlayerScreen.objTwitter, "Twitter Icon");
				logger.info("Selected twitter icon from Share screen");
				extent.extentLoggerPass("Twitter Icon", "Selected twitter icon from Share screen");

				waitTime(5000);
				boolean twitterPage = verifyIsElementDisplayed(AMDPlayerScreen.objTweetButton);
				if (twitterPage) {
					click(AMDPlayerScreen.objTweetButton, "Tweet button");
					logger.info("Selected twitter button to post from twitter page");
					extent.extentLoggerPass("Twitter button", "Selected twitter button to post from twitter page");
					Back(2);
				} else {
					logger.info("Twitter account is NOT logged into this device");
					extent.extentLoggerWarning("Twitter button", "Twitter account is NOT logged into this device");
					Back(1);
				}

			} else {
				logger.info("Twitter icon is NOT available in the Share screen");
				extent.extentLoggerWarning("Twitter icon", "Twitter icon is NOT available in the Share screen");
				Back(1);
			}
			navigateBackToHomeLandingScreen();

			extent.HeaderChildNode("Replay functionality Validation in Fullscreen Mode");
			click(AMDSearchScreen.objSearchIcon, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, searchKeyword4 + "\n", "Search bar");
			waitTime(2000);
			hideKeyboard();
			waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
			click(AMDSearchScreen.objSearchResultFirstContent, "Search result");
			waitTime(4000);
			click(AMDPlayerScreen.objPlayerScreen, "Player Frame");
			click(AMDPlayerScreen.objPauseIcon, "Pause icon");
			verifyElementPresentAndClick(AMDPlayerScreen.objFullscreenIcon, "Maximize Icon");
			waitTime(2000);
			//GetAndVerifyOrientation("Landscape");
			//click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
			String title = getText(AMDPlayerScreen.objTitleOnPlayer);
			seekVideoTillLast(AMDPlayerScreen.objProgressBar);
			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
				click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
			}
			click(AMDPlayerScreen.objPlayIcon, "Play icon");
			if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
				verifyElementExist(AMDConsumptionScreen.objGetPremiumOnPlayer,
						"Buy Plan CTA on player at the end of the non premium trailer content playback");
			} else {
				if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
					click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
				}
				waitForElementDisplayed(AMDPlayerScreen.objReplayIconOnPlayer, 10);
				verifyElementPresentAndClick(AMDPlayerScreen.objReplayIconOnPlayer, "Replay Icon");
				waitTime(8000);
				click(AMDPlayerScreen.objPlayerScreen, "Player Frame");
				if (verifyIsElementDisplayed(AMDPlayerScreen.objTitleInLandscape(title))) {
					logger.info("Same content playback started again post tapping on Replay icon");
					extent.extentLoggerPass("Replay",
							"Same content playback started again post tapping on Replay icon");
				} else {
					logger.error("Same content playback did not start post tapping on Replay icon");
					extent.extentLoggerFail("Replay",
							"Same content playback did not start post tapping on Replay icon");
				}
			}
		}
		Back(3);
		click(AMDHomePage.objMoreMenu, "More Menu");
		waitTime(1000);
		click(AMDMoreMenu.objSettings, "Settings option");
		waitTime(2000);
		click(AMDMoreMenu.objVideo_Autoply, "Autoplay");
		Back(2);
	}

/**
 * @Note This method is to validate the watch credits CTA
 * @param searchKeyword9
 * @param userType
 * @throws Exception
 */
	public void watchCreditsValidationInLandscapeMode(String searchKeyword9, String userType) throws Exception {
		extent.HeaderChildNode("Validation of Watch Credits CTA");
		System.out.println("\nValidation of Watch Credits CTA");
		waitTime(5000);
		click(AMDHomePage.HomeIcon, "Home button");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword9 + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);

		verifyElementPresentAndClick(AMDMoreMenu.objSearchResult(searchKeyword9), "Search result");
		if (!userType.contains("SubscribedUser")) {
			registerPopUpClose();
			completeProfilePopUpClose(userType);
			LoadingInProgress();
			adPlay();
			waitTime(5000);
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		}
		waitTime(1000);
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		waitTime(2000);
		click(AMDPlayerScreen.objFullscreenIcon, "Maximize Icon");
		String title = getText(AMDPlayerScreen.objContentTitle);
		if (title != null) {
			logger.info("Title of the Content displayed in landscape mode: " + title);
			extentLoggerPass("Title", "Title of the Content displayed in landscape mode: " + title);

			seekVideoTillLast(AMDPlayerScreen.objProgressBar);
		} else {
			logger.info("Title of the Content is NOT displayed in landscape mode");
			extentLoggerFail("Title", "Title of the Content is NOT displayed in landscape mode");
		}
//		click(AMDPlayerScreen.objPlayIcon, "Play icon");
		verifyElementPresent(AMDPlayerScreen.objWatchCreditsCTA, "Watch Credits CTA");
		verifyElementPresent(AMDPlayerScreen.objUpNextCard, "Upnext card");
//		String timerOnUpnextcard = getText(AMDPlayerScreen.objCountDownTimerInUpNextCard);
//		logger.info("Timer on Upnext card: "+timerOnUpnextcard);
//		extentLogger("Timer on Upnext card", "Timer on Upnext card: "+timerOnUpnextcard);
		waitTime(5000);
		waitTime(15000);
		LoadingInProgress();
		verifyElementExist(AMDPlayerScreen.objPlayer, "Player screen");
		String title1 = getText(AMDPlayerScreen.objContentTitle);
		logger.info("Title of the Upnext Content : " + title1);
		extentLogger("Title", "Title of the Upnext Content : " + title1);
		if (!(title.equals(title1))) {
			logger.info("Content autoplayed/jumped to the next content when timer exceeds");
			extentLoggerPass("Upnext card", "Content autoplayed/jumped to the next content when timer exceeds");
		} else {
			logger.info("Content did not autoplay/jump to the next content when timer exceeds");
			extentLoggerFail("Upnext card", "Content did not autoplay/jump to the next content when timer exceeds");
		}
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
	}
/**
 * @Note This method is to check if Ad is playing or not
 * @throws Exception
 */
	public void adPlay() throws Exception {
//		waitTime(2000);
		if (verifyIsElementDisplayed(AMDPlayerScreen.objAd)) {
			logger.info("Ad is playing");
			extentLogger("Ad", "Ad is playing");
			verifyElementNotPresent(AMDPlayerScreen.objAd, 180);
			logger.info("Ad is completed");
			extentLogger("Ad", "Ad is completed");
		} else {
			logger.info("Ad is not played");
			extentLogger("Ad", "Ad is not played");
		}
	}
/**
 * @Note Method is to validate the functionality of Parental PIN in landscape mode
 * @param userType
 * @param searchKeyword1
 * @throws Exception
 */
	@SuppressWarnings("deprecation")
	public void parentalPinValidationInLandscapeMode(String userType, String searchKeyword1) throws Exception {
		extent.HeaderChildNode("Parental Pin Validation In Landscape Mode");
		if (!(userType.equalsIgnoreCase("Guest"))) {

			boolean popUpFlag = false;
			click(AMDHomePage.MoreMenuIcon, "More Menu tab");
			waitTime(1000);
			PartialSwipe("UP", 1);
			click(AMDMoreMenu.objSettings, "Settings option");
			waitTime(1000);
			swipeUntilFindElement(AMDMoreMenu.objParentalControl, "UP");
			click(AMDMoreMenu.objParentalControl, "Parental Control");

			String password = "";
			if (userType.equals("NonSubscribedUser")) {
				password = getParameterFromXML("USMNonsubscribedPassword");
			} else if (userType.equals("SubscribedUser")) {
				password = getParameterFromXML("SettingsSubscribedPassword");
			}
			click(AMDMoreMenu.objPasswordField, "Password field");
			getDriver().getKeyboard().sendKeys(password);

			hideKeyboard();
			if (getOEMName.contains("vivo")) {
				hidePwdKeyboard();
			}
			click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(2000);
			click(AMDMoreMenu.objRestrictAllContent, "Restrict All Content option");
			click(AMDMoreMenu.objContinueBtn, "Continue Button");
			waitTime(4000);

			verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin");
			if (verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin")) {
				popUpFlag = true;
				logger.info("Setting Parental Pin for " + pUserType);
				extentLoggerPass("Setting Parental Pin", "Setting Parental Pin for " + pUserType);

				type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin2, "2", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin3, "3", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
				hideKeyboard();
				waitTime(4000);
				click(AMDMoreMenu.objSetPinContinueBtn, "Continue Button");
				waitTime(2000);

				click(AMDMoreMenu.objParentalLockDone, "Done Button");
				Back(1);
				waitTime(3000);
				Back(1);
			} else {
				logger.info("Parental Pin Popup not displayed");
				extentLoggerFail("Parental Pin", "Parental Pin Popup not displayed");
			}

			waitTime(5000);
			click(AMDSearchScreen.objSearchIcon, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, searchKeyword1 + "\n", "Search bar");
			waitTime(2000);
			hideKeyboard();
			waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);

			click(AMDMoreMenu.objSearchResult(searchKeyword1), "Search result");
			waitTime(5000);
			switchtoLandscapeMode();
			waitTime(5000);
			if (popUpFlag) {
				boolean checkParentalPopUp = verifyElementPresent(AMDPlayerScreen.objParentalPinPopUp,
						"Parental Pin Popup");
				if (checkParentalPopUp) {
					logger.info("Parental Pin Popup is displayed");
					extentLoggerPass("Parental Pin Popup", "Parental Pin Popup is displayed in Landscape mode");
					Back(2);
				} else {
					logger.info("Parental Pin Popup is NOT displayed");
					extentLoggerFail("Parental Pin Popup", "Parental Pin Popup is NOT displayed in Landscape mode");
				}
			} else {
				logger.info("Parental Pin failed to set hence Popup is NOT displayed");
				extentLoggerFail("Parental Pin Popup",
						"Parental Pin failed to set hence Popup is NOT displayed in Landscape mode");
			}

			switchtoPortraitMode();
			Back(1);
			BackToLandingScreen();
			click(AMDHomePage.MoreMenuIcon, "More Menu tab");
			waitTime(1000);
			PartialSwipe("UP", 1);
			click(AMDMoreMenu.objSettings, "Settings option");
			waitTime(2000);
			swipeUntilFindElement(AMDMoreMenu.objParentalControl, "UP");
			verifyElementPresentAndClick(AMDMoreMenu.objParentalControl, "Parental Control");
			verifyElementExist(AMDMoreMenu.objPasswordField, "Password field");

			if (userType.equals("NonSubscribedUser")) {
				password = getParameterFromXML("USMNonsubscribedPassword");
			} else if (userType.equals("SubscribedUser")) {
				password = getParameterFromXML("SettingsSubscribedPassword");
			}
			click(AMDMoreMenu.objPasswordField, "Password field");
			getDriver().getKeyboard().sendKeys(password);

			hideKeyboard();
			if (getOEMName.contains("vivo")) {
				hidePwdKeyboard();
			}
			click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(2000);
			click(AMDMoreMenu.objNoRestriction, "No Restriction");
			click(AMDMoreMenu.objContinueBtn, "Continue Button");
			waitTime(2000);
			click(AMDMoreMenu.objParentalLockDone, "Done Button");
			Back(1);
		} else {
			extent.extentLoggerPass("Parental Pin Validation",
					"Parental Pin Validation is NOT applicable for - " + userType);
			logger.info("Parental Pin Validation is NOT applicable for " + userType);
		}

	}
/**
 * Note Method will verify the Player loader that is loading on player screen
 * @throws Exception
 */
	public void LoadingInProgress() throws Exception {
		if (verifyIsElementDisplayed(AMDPlayerScreen.objPlayerLoader)) {
			logger.info("Loading in progress");
			extentLogger("Loader", "Loading in progress");
			verifyElementNotPresent(AMDPlayerScreen.objPlayerLoader, 20);
		}
	}

	/**
	 * Seek by element
	 * @Note Method will the seek the video
	 * @param byLocator
	 */
	public void seekVideo(By byLocator, String usertype) throws Exception {
		// click(AMDPlayerScreen.objPlayerScreen, "Player Frame");
		String beforeSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time before seeking : " + timeToSec(beforeSeek));
		extent.extentLogger("Seek", "Current time before seeking in seconds: " + timeToSec(beforeSeek));
		WebElement element = getDriver().findElement(byLocator);
		Dimension size = element.getSize();
		int startx = (int) (size.width);
		// click(AMDPlayerScreen.objPlayerScreen, "Player Frame");
		SwipeAnElement(element, startx, 0);
		logger.info("Scrolling the seek bar");
		extent.extentLogger("Seek", "Scrolling the seek bar");
		if (!(usertype.equalsIgnoreCase("SubscribedUser"))) {
			waitForAdToFinishInAmd();
			// click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		}
		waitTime(2000);
		String afterSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time after seeking in seconds : " + timeToSec(afterSeek));
		extent.extentLogger("Seek", "Current time after seeking in seconds : " + timeToSec(afterSeek));
		if (timeToSec(afterSeek) > timeToSec(beforeSeek)) {
			logger.info("Seek bar is functional");
			extent.extentLoggerPass("Seek", "Seek bar is functional");
		} else {
			logger.info("Seek bar is not functional");
			extent.extentLoggerFail("Seek", "Seek bar is not functional");
		}
	}
/**
 * @Note Method will swipe an elements
 * @param element
 * @param posx
 * @param posy
 */
	public void swipeAnElement(WebElement element, int posx, int posy) {
		AndroidTouchAction touch = new AndroidTouchAction(getDriver());
		touch.longPress(LongPressOptions.longPressOptions().withElement(ElementOption.element(element)))
				.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000))).moveTo(PointOption.point(posx, posy))
				.release().perform();
	}

	/**
	 * @Note Method will convert the time into seconds
	 * @param s
	 * @return
	 */
	public static int timeToSec(String s) {
		String[] t = s.split(":");
		int num = 0;
		// System.out.println(t.length);
		if (t.length == 2) {
			num = Integer.parseInt(t[0]) * 60 + Integer.parseInt(t[1]); // minutes since 00:00
		}
		if (t.length == 3) {
			num = ((Integer.parseInt(t[0]) * 60) * 60) + Integer.parseInt(t[1]) * 60 + Integer.parseInt(t[2]);
		}
		return num;
	}

	/**
	 * @Note Video Player or Live Player Ad verify 
	 * @param playerType
	 * @throws Exception
	 */
	public void waitForPlayerAdToComplete(String playerType) throws Exception {
		boolean adWasDisplayed = false;
		boolean playerDisplayed = false;
		int confirmCount = 0;
		waitTime(5000);
		main: for (int trial = 0; trial < 120; trial++) {
			try {
				findElement(PWAPlayerPage.objAd);
				adWasDisplayed = true;
				if (trial == 5) {
					logger.info("Ad play in progress");
					extent.extentLogger("AdPlayInProgress", "Ad play in progress");
					try {
						getWebDriver().findElement(PWAPlayerPage.objAd);
					} catch (Exception e) {
					}
				}
				if (Math.floorMod(trial, 15) == 0)
					System.out.println("Ad play in progress");
				Thread.sleep(1000);

//				//SkipAD
//				if(verifyElementExist(PWAPlayerPage.objSkipAd, "SkipAd")){
//					Thread.sleep(5000);
//					click(PWAPlayerPage.objSkipAd, "SkipButton");					
//				}
//				else
//				{
//					System.out.println("No Skip Button Displayed");
//				}

			} catch (Exception e) {
				try {
					if (playerType.equals("Live Player")) {
						findElement(PWAPlayerPage.objLivePlayerLiveTag);
					} else if (playerType.equals("Video Player")) {
						findElement(PWAPlayerPage.objPlayerSeekBar);
					}
					playerDisplayed = true;
					confirmCount++;
					if (confirmCount == 1) {
						if (adWasDisplayed == false) {
							logger.info("Ad did not play");
							extent.extentLogger("AdDidNotPlay", "Ad did not play");
						} else {
							logger.info("Ad play complete");
							extent.extentLogger("AdPlayComplete", "Ad play complete");
						}
						break main;
					}
				} catch (Exception e1) {
				}
			}
		}
		if (playerDisplayed == false && adWasDisplayed == false) {
			logger.error("Ad did not play");
			extent.extentLogger("Ad", "Ad did not play");
		}
	}

	/**
	 * @note Get the Mobile Orientation
	 */
	public void GetAndVerifyOrientation(String Orientation) {
		ScreenOrientation orientation = getDriver().getOrientation();
		String ScreenOrientation = orientation.toString();
		System.out.println(ScreenOrientation);
		if (Orientation.equalsIgnoreCase(ScreenOrientation)) {
			logger.info("The screen Orientation is " + ScreenOrientation);
			extent.extentLogger("Screen Orientation", "The screen Orientation is " + ScreenOrientation);
		} else {
			logger.error("The screen Orientation is not " + ScreenOrientation);
			extent.extentLoggerFail("Screen Orientation", "The screen Orientation is not " + ScreenOrientation);
		}
	}

	/**
	 * Author : Vinay Module
	 * @Note Method is to validate the Account Details
	 */
	public void accountDetails(String userType) throws Exception {
		if (userType.equals("Guest")) {
			accountDetailsGuestUser(userType);
		} else {
			accountDetailsLoggedInUser(userType);
		}
	}
/**
 * @Note Method will validate the More screen for Guest user
 * @param userType
 * @throws Exception
 */
	public void moreScreenGuestUserValidations(String userType) throws Exception {
		/*
		 * Account Details section
		 */
		extent.HeaderChildNode("Account Details Validation for User type : " + userType);
		// Click on More button
		click(AMDHomePage.MoreMenuIcon, "More icon");
		// Verify Login/Register for better experience is displayed in Profile screen
		verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
		// Verify user is navigated to Login/Register screen post tapping Login/Register
		// link
		click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
		String header = getText(AMDGenericObjects.objgetScreenTitle);
		if (header.equals("Login/Register")) {
			extent.extentLogger("Verify navigation", "User is navigated to " + header
					+ " screen post tapping Login/Register link from more menu screen ");
			logger.info("User is navigated to " + header
					+ " screen post tapping Login/Register link from more menu screen");
		} else {
			extent.extentLoggerFail("Verify navigation",
					"User is not navigated to Login/Register screen post tapping Login/Register link from more menu screen ");
			logger.info(
					"User is not navigated to Login/Register screen post tapping Login/Register link from more menu screen");
		}

		// Verify user is navigated back to previous screen on clicking back button
		// click back button
		click(AMDGenericObjects.objBackBtn, "Back button");
		if (checkElementExist(AMDMoreMenu.objProfile, "Profile icon")) {
			extent.extentLogger("Verify navigation",
					"User is navigate back to the previous screen post tapping back button from Login/Register screen");
			logger.info(
					"User is navigate back to the previous screen post tapping back button from Login/Register screen");
		} else {
			extent.extentLoggerFail("Verify navigation",
					"User is not navigated back to the previous screen post tapping back button from Login/Register screen");
			logger.info(
					"User is not navigated back to the previous screen post tapping back button from Login/Register screen");
		}

		buySubscription(userType);

		/*
		 * My Subscription section
		 */
		extent.HeaderChildNode("My Subscription screen validations for user type : " + userType);
		// Verify User is navigated to Login/Register screen post tapping My
		// Subscription
		extent.HeaderChildNode("My Subscription screen");
		verifyElementPresentAndClick(AMDMoreMenu.objMySubscription, "My Subscription");
		if (header.equals("Login/Register")) {
			extent.extentLogger("Verify navigation",
					"User is navigated to " + header + " screen post tapping My Subscription from more menu screen ");
			logger.info(
					"User is navigated to " + header + " screen post tapping My Subscription from more menu screen");
		} else {
			extent.extentLoggerFail("Verify navigation",
					"User is not navigated to Login/Register screen post tapping My Subscription from more menu screen ");
			logger.info(
					"User is not navigated to Login/Register screen post tapping My Subscription from more menu screen");
		}

		// Verify user is navigated back to More menu screen on clicking back button
		// click back button
		verifyElementPresentAndClick(AMDGenericObjects.objBackBtn, "Back button");
		if (checkElementExist(AMDMoreMenu.objProfile, "Profile icon")) {
			extent.extentLogger("Verify navigation",
					"User is navigate back to the More menu screen post tapping back button from Login/Register screen");
			logger.info(
					"User is navigate back to the More menu screen post tapping back button from Login/Register screen");
		} else {
			extent.extentLoggerFail("Verify navigation",
					"User is not navigated back to the More menu screen post tapping back button from Login/Register screen");
			logger.info(
					"User is not navigated back to the More menu screen post tapping back button from Login/Register screen");
		}

		/*
		 * My Transactions section
		 */
		extent.HeaderChildNode("My Transactions screen validations for user type : " + userType);
		// Verify User is navigated to Login/Register screen post tapping My
		// Transactions
		extent.HeaderChildNode("My Transactions screen");
		verifyElementPresentAndClick(AMDMoreMenu.objMyTransactions, "My Transactions");
		if (header.equals("Login/Register")) {
			extent.extentLogger("Verify navigation",
					"User is navigated to " + header + " screen post tapping My Transactions from more menu screen ");
			logger.info(
					"User is navigated to " + header + " screen post tapping My Transactions from more menu screen");
		} else {
			extent.extentLoggerFail("Verify navigation",
					"User is not navigated to Login/Register screen post tapping My Transactions from more menu screen ");
			logger.info(
					"User is not navigated to Login/Register screen post tapping My Transactions from more menu screen");
		}

		// Verify user is navigated back to More menu screen on clicking back button
		// click back button
		verifyElementPresentAndClick(AMDGenericObjects.objBackBtn, "Back button");
		if (checkElementExist(AMDMoreMenu.objProfile, "Profile icon")) {
			extent.extentLogger("Verify navigation",
					"User is navigate back to the More menu screen post tapping back button from Login/Register screen");
			logger.info(
					"User is navigate back to the More menu screen post tapping back button from Login/Register screen");
		} else {
			extent.extentLoggerFail("Verify navigation",
					"User is not navigated back to the More menu screen post tapping back button from Login/Register screen");
			logger.info(
					"User is not navigated back to the More menu screen post tapping back button from Login/Register screen");
		}

	}

	/**
	 * @Note Buy scubcription screen validation
	 * Buy subscription section
	 */
	public void buySubscription(String userType) throws Exception {
		extent.HeaderChildNode("Buy Subscription screen validations for user type :" + userType);
		System.out.println("\nBuy Subscription screen validations for user type :" + userType);

		// To verify if appropriate page is displayed
		if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		} else {
			if (!verifyElementDisplayed(AMDMoreMenu.objBuySubscription)) {
				BackToLandingScreen();
				click(AMDHomePage.objMoreMenu, "More Menu");
			}
		}

		// Verify User is navigated to subscribe screen post tapping Buy Subscription
		verifyElementPresentAndClick(AMDMoreMenu.objBuySubscription, "Buy Subscription");
		// String screenTitle = getText(AMDGenericObjects.objgetScreenTitle);
		if (verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe screen")) {
			extent.extentLoggerPass("Verify Navigation",
					"User is navigated to Subscribe screen post tapping Buy subscription from more menu");
			logger.info("User is navigated to Subscribe screen post tapping Buy subscription from more menu");
		} else {
			extent.extentLoggerFail("Verify Navigation",
					"User is not navigated to Subscribe screen post tapping Buy subscription from more menu");
			logger.info("User is not navigated to Subscribe screen post tapping Buy subscription from more menu");
		}
		// Verify the back button functionality

		verifyElementPresentAndClick(AMDSubscibeScreen.objSubscribePageBackButton, "Back button");
		Swipe("Down", 1);
		swipeUntilFindElement(AMDMoreMenu.objProfile, "DOWN");
		if (verifyElementExist(AMDMoreMenu.objProfile, "Profile icon")) {
			extent.extentLoggerPass("Verify navigation",
					"User is navigate back to More menu screen post tapping back button from Subscribe screen");
			logger.info("User is navigate back to More menu screen post tapping back button from Subscribe screen");
		} else {
			extent.extentLoggerFail("Verify navigation",
					"User is not navigated back to the More menu screen post tapping back button from Subscribe screen");
			logger.info(
					"User is not navigated back to the More menu screen post tapping back button from Subscribe screen");
		}
	}

	/**
	 * @Note Validating Change Password screen
	 */
	public void ChangePasswordScreen() throws Exception {
		// Verify Change password screen
		extent.HeaderChildNode("Change Password Screen validations");
		System.out.println("\nChange Password Screen validations");
		// click(AMDMoreMenu.objLoginRegisterText,"Profile");
		verifyElementPresentAndClick(AMDMyProfileScreen.objChangePassword, "Change Password");
		// Verify the header
		String header = getText(AMDGenericObjects.objgetScreenTitle);
		if (header.equals("Change Password")) {
			extent.extentLoggerPass("Verify Header", "The header of the screen is : " + header);
			logger.info("The header of the screen is : " + header);
		} else {
			extent.extentLoggerFail("Verify Header", "Change Password header is not displayed");
			logger.info("Change Password header is not displayed");
		}
		// verify back button is displayed
		verifyElementPresent(AMDGenericObjects.objBackBtn, "Back button");
		// Verify Current, New and Confirm fields are displayed
		verifyElementPresent(AMDChangePasswordScreen.objCurrentPwdField, "Current Password field");
		verifyElementPresent(AMDChangePasswordScreen.objNewPwdField, "New Password field");
		verifyElementPresent(AMDChangePasswordScreen.objConfirmPwdField, "Confirm Password field");
		// Verify user can enter password in all the text fields Old Password field
		verifySpecialCharactersInString(AMDChangePasswordScreen.objCurrentPwdField, "1234%23abcd", "Current Password");
		// New Password field
		verifySpecialCharactersInString(AMDChangePasswordScreen.objNewPwdField, "&*&1234abcd", "New Password");
		// Confirm password field
		verifySpecialCharactersInString(AMDChangePasswordScreen.objConfirmPwdField, "1234@343%slv", "Confirm Password");
		Back(1);
	}

	/**
	 * My Profile screen validations
	 */
	public void myProfileScreen(String userType) throws Exception {
		System.out.println("\nMy Profile Screen validations");
		extent.HeaderChildNode("My Profile Screen validations");
		// Verify that profile detail screen is displayed post tapping Profile
		// click on profile
		swipeUntilFindElement(AMDMoreMenu.objLoginRegisterText, "DOWN");
		click(AMDMoreMenu.objLoginRegisterText, "Profile");
		// Verify user is navigated to My Profile screen
		String headerTitle = getText(AMDGenericObjects.objgetScreenTitle);
		if (headerTitle.equals("My Profile")) {
			extent.extentLoggerPass("Verify Navigation",
					"User is navigated to " + headerTitle + " post tapping profile form more menu");
			logger.info("User is navigated to " + headerTitle + " post tapping profile form more menu");
		} else {
			extent.extentLoggerFail("Verify Navigation",
					"User is not navigated to My Profile screen post tapping profile form more menu");
			logger.info("User is not navigated to My Profile screen post tapping profile form more menu");
		}
		// Verify user profile information
		// Verify user name is displayed
		if (verifyElementDisplayed(AMDMyProfileScreen.objUserName)) {
			String profileName = getText(AMDMyProfileScreen.objUserName);
			extent.extentLoggerPass("Verify Profile Name is displayed",
					"Profile Name :" + profileName + " is displayed for the logged in user");
			logger.info("Profile Name :" + profileName + " is displayed for the logged in user");
		} else {
			extent.extentLoggerFail("Verify Profile Name is displayed",
					"Profile Name is not displayed for logged in user");
			logger.info("Profile Name is not displayed for logged in user");
		}
		// Verify user ID is displayed
		if (verifyElementDisplayed(AMDMyProfileScreen.objUserID)) {
			String userID = getText(AMDMyProfileScreen.objUserID);
			extent.extentLoggerPass("Verify User ID is displayed",
					"User ID :" + userID + " is displayed for the logged in user");
			logger.info("User ID :" + userID + " is displayed for the logged in user");
		} else {
			extent.extentLoggerFail("Verify User ID is displayed", "User ID is not displayed for logged in user");
			logger.info("User ID is not displayed for logged in user");
		}
		// Verify Edit CTA button
		if (verifyElementDisplayed(AMDMyProfileScreen.objEditProfileButton)) {
			extent.extentLoggerPass("Verify Edit CTA", "Edit CTA is displayed in My Profile screen");
			logger.info("Edit CTA is displayed in My Profile screen");
		} else {
			extent.extentLoggerFail("Verify Edit CTA", "Edit CTA is not displayed in My Profile screen");
			logger.info("Edit CTA is  not displayed in My Profile screen");
		}
		// Verify user is navigated to Edit profile screen post tapping Edit CTA button
		// Click on Edit CTA
		click(AMDMyProfileScreen.objEditProfileButton, "Edit CTA button");
		// Verify user is navigated to Edit profile screen
		String headerName = getText(AMDGenericObjects.objgetScreenTitle);
		if (headerName.equals("Edit Profile")) {
			extent.extentLoggerPass("Verify User navigation", "User is navigated to " + headerName + " screen");
			logger.info("User is navigated to " + headerName + " screen");
			click(AMDGenericObjects.objBackBtn, "Back Button");
		} else {
			extent.extentLoggerFail("Verify User navigation", "User is not navigated screen");
			logger.info("User is not navigated to Edit Profile screen");
		}
	}

	/**
	 * @Note Validating Mobile registartion screen and OTP screen
	 * @throws Exception
	 */
	public void mobileAndOTPScreenValidations() throws Exception {
		extent.HeaderChildNode("Mobile Screen and OTP validataions");
		System.out.println("\nMobile Screen and OTP validataions");
		// Verify user can see the Country code drop down Click on edit

		verifyElementPresentAndClick(AMDMyProfileScreen.objEditProfileButton, "Edit CTA");
		verifyElementPresent(AMDEditProfileScreen.objMobileNOCountry, "Country drop down");
		// Verify different country code are displayed
		click(AMDEditProfileScreen.objMobileNOCountry, "Country drop down");
		int size = findElements(By.xpath("//*[@id='selector_content']")).size();
		for (int i = 1; i <= size; i++) {
			if (verifyIsElementDisplayed(AMDEditProfileScreen.objDifferentCountries(i))) {
				extent.extentLoggerPass("Verify Country codes",
						"Country code : " + getText(AMDEditProfileScreen.objDifferentCountries(i)) + " is displayed");
				logger.info(
						"Country code :" + getText(AMDEditProfileScreen.objDifferentCountries(i)) + " is displayed");
			} else {
				extent.extentLoggerFail("Verify Country code", "Country code is not displayed in drop down menu");
				logger.info("Country code is not displayed in drop down menu");
			}

		}
		click(AMDEditProfileScreen.objClosedropDownBtn, "Close button");
		hideKeyboard();
		// Verify user can edit the Mobile number field
		String OldNUmber = getText(AMDEditProfileScreen.objMobNumberField);
		click(AMDEditProfileScreen.objMobileNumberField, "Mobile number field");
		clearField(AMDEditProfileScreen.objMobileNumberField, "Mobile number field");
		type(AMDEditProfileScreen.objMobileNumberField, "9975625825", "Mobile Number Field");
		hideKeyboard();
		String NewNumber = getText(AMDEditProfileScreen.objMobileNumberField);
		if (OldNUmber.length() < 3) {
			extent.extentLoggerPass("Verify Mobile Number", "Mobile number is not available for this User");
			logger.info("Mobile number is not available for this User");
		} else {
			if (!OldNUmber.equals(NewNumber)) {
				extent.extentLoggerPass("Verify Mobile Number field", "User can edit Mobile number field");
				extent.extentLoggerPass("Verify Mobile Number field",
						"Old Mobile number is : " + OldNUmber + " is updated to new number :" + NewNumber);
				logger.info("Old Mobile number is : " + OldNUmber + " is updated to new number :" + NewNumber);
			} else {
				extentLoggerFail("Verify Mobile Number field", "User cannot edit the mobile number field");
				logger.info("User cannot edit the mobile number field");
			}
		}

		// Set Text

		clearField(AMDEditProfileScreen.objFirstNameField, "FirstName");
		verifyElementPresentAndClick(AMDEditProfileScreen.objFirstNameField, "FirstName");
		type(AMDEditProfileScreen.objFirstNameField, generateRandomChars("Zeename", 5), "First Name");
		hideKeyboard();
		// Verify Save Changes is highlighted
		boolean otpFlag = false;
		String saveChanges = getElementPropertyToString("enabled", AMDEditProfileScreen.objSaveChanges,
				"Save Changes CTA");
		if (saveChanges.equals("true")) {
			extent.extentLoggerPass("Verify Save Changes CTA", "Save Changes CTA is Highlighted");
			logger.info("Save Changes CTA is Highlighted");
			click(AMDEditProfileScreen.objSaveChanges, "Save Changes CTA");
			otpFlag = true;
		} else {
			extent.extentLoggerFail("Verify Save Changes CTA", "Save Changes CTA is not Highlighted");
			logger.info("Save Changes CTA is not Highlighted");
			otpFlag = false;
		}

		// Verify user is navigated to Verify Mobile screen
		String header = getText(AMDGenericObjects.objgetScreenTitle);
		if (header.equalsIgnoreCase("Verify Mobile")) {
			extent.extentLoggerPass("Verify user navigation", "User is navigated to " + header);
			logger.info("User is navigated to " + header);
		} else {
			extent.extentLoggerFail("Verify Mobile screen", "User failed to navigate to Verify Mobile screen");
			logger.error("User failed to navigate to Verify Mobile");
		}

		// Verify the OTP Validations
		if (otpFlag) {
			if (verifyElementExist(AMDRegistrationScreen.objOTPTimer, "OTP timer")) {
				logger.info("The OTP timer is present in Verify mobile screen");
				extentLoggerPass("OtpTimer", "The OTP timer is present in Verify mobile screen");

				String OTPTimer = getText(AMDRegistrationScreen.objOTPTimer);
				logger.info(OTPTimer);

				hideKeyboard();
				click(AMDRegistrationScreen.objVerifyOtpButton, "Verify button");
				waitTime(10000);
				String OTPTimer2 = getText(AMDRegistrationScreen.objOTPTimer);
				logger.info(OTPTimer2);
				boolean Time = OTPTimer.equals(OTPTimer2);
				if (Time == false) {
					logger.info("OTP timer is running & displayed in Verify mobile screen");
					extentLoggerPass("OtpTimer", "OTP timer is running & displayed in Verify mobile screen");
				} else {
					logger.info("OTP timer is NOT running in Verify mobile screen");
					extentLoggerFail("OtpTimer", "OTP timer is NOT running in Verify mobile screen");
				}
				type(AMDRegistrationScreen.objOTPField1, "1", "OTP box1");
				type(AMDRegistrationScreen.objOTPField2, "1", "OTP box2");
				type(AMDRegistrationScreen.objOTPField3, "1", "OTP box3");
				type(AMDRegistrationScreen.objOTPField4, "1", "OTP box4");
				hideKeyboard();
				waitTime(2000);
				if (findElement(AMDRegistrationScreen.objVerifyOtpButton).isEnabled() == true) {
					logger.info("Verify Button is highlighted");
					extent.extentLoggerPass("Verify", "Verify Button is highlighted");
				} else {
					logger.error("Verify Button failed to highlight");
					extent.extentLoggerFail("Verify Button", "Verify Button failed to highlight");
				}
				// Navigate back
				Back(1);

			} else {
				logger.error("Verify Mobile screen with OTP timer is Not displayed");
				extentLoggerFail("OtpTimer", "Verify Mobile screen with OTP timer is Not displayed");
			}
		} else {
			verifyElementPresentAndClick(AMDGenericObjects.objBackBtn, "Back Button");
		}
	}
/**
 * @Note Verifying the special characters present in String
 * @param by
 * @param pwd
 * @param field
 */
	public void verifySpecialCharactersInString(By by, String pwd, String field) {
		getDriver().findElement(by).sendKeys(pwd);
		String text = getDriver().findElement(by).getText();
		Pattern p = Pattern.compile("[^a-z0-9 ]", Pattern.CASE_INSENSITIVE);
		Matcher passWord = p.matcher(text);
		boolean b = passWord.find();
		if (b) {
			System.out.println("There is a special character in my string");
			extent.extentLoggerPass("Verify password field",
					"User can enter Numbers, Special characters and Characters into " + field + " field");
			logger.info("User can enter Numbers, Special characters and Characters into " + field + " Passworrd field");
		} else {
			extent.extentLoggerFail("Verify password field",
					"User cannot enter Numbers, Special characters and Characters into " + field + " field");
			logger.info("User cannot enter Numbers, Special characters and Characters into" + field + " field");
		}
	}

	/**
	 * Edit Profile screen validations
	 */
	public void EditProfileScreen(String userType) throws Exception {
		extent.HeaderChildNode("Edit Profile screen validations for user type :" + userType);
		System.out.println("\nEdit Profile screen validations for user type :" + userType);

		verifyElementPresentAndClick(AMDMyProfileScreen.objEditProfileButton, "Edit CTA");
		// Verify header
		verifyElementPresent(AMDEditProfileScreen.objEditProfileTitle, "Edit Profile header");
		// Text field First name
		verifyElementPresent(AMDEditProfileScreen.objFirstNameField, "First Name text field");
		// Text field Last name
		verifyElementPresent(AMDEditProfileScreen.objLastNameField, "Last Name text field");
		// Email text field
		verifyElementPresent(AMDEditProfileScreen.objEmailIDField, "Email text field");
		// Mobile number text field
		verifyElementPresent(AMDEditProfileScreen.objMobileNoField, "Mobile number text field");
		hideKeyboard();
		// Date of Birth field
		verifyElementPresent(AMDEditProfileScreen.objDOBTxtField, " DOB text field");
		// Gender field
		verifyElementPresent(AMDEditProfileScreen.objGenderDropdown, "Gender field");
		// Verify Save changes button
		verifyElementPresent(AMDEditProfileScreen.objSaveChanges, "Save Changes button");
		// Verify Save changes button is disabled
		String disabled = getElementPropertyToString("enabled", AMDEditProfileScreen.objSaveChanges, "Save Changes");
		if (disabled.equals("false")) {
			extent.extentLoggerPass("Verify Save Changes is disabled", "Save Changes CTA is disabled");
			logger.info("Save Changes CTA is disabled");
		} else {
			extent.extentLoggerFail("Verify Save Changes is disabled", "Save Changes CTA is enabled");
			logger.info("Save Changes CTA is enabled");
		}
		// Verify First name is displayed
		String firstName = getText(AMDEditProfileScreen.objFirstNameField);
		if (!firstName.equalsIgnoreCase("null")) {
			extent.extentLoggerPass("Verify First name is displayed",
					"First name :" + firstName + " is displayed in the First name text field");
			logger.info("First name :" + firstName + " is displayed in the First name text field");
		} else {
			extent.extentLoggerFail("Verify First name is displayed",
					"First name is not displayed in the First name text field");
			logger.info("First name is not displayed in the First name text field");
		}
		// Verify Last name is displayed for the registered user
		String lastName = getText(AMDEditProfileScreen.objLastNameField);
		if (!lastName.equalsIgnoreCase("null")) {
			extent.extentLoggerPass("Verify Last name is displayed",
					"Last name :" + lastName + " is displayed in the First name text field");
			logger.info("Last name :" + lastName + " is displayed in the Last name text field");
		} else {
			extent.extentLoggerFail("Verify Last name is displayed",
					"Last name is not displayed in the Last name text field");
			logger.info("Last name is not displayed in the Last name text field");
		}

		// Verify the back button functionality
		verifyElementPresentAndClick(AMDGenericObjects.objBackBtn, "Back button");
		String headerTitle = getText(AMDGenericObjects.objgetScreenTitle);
		if (headerTitle.equals("My Profile")) {
			extent.extentLoggerPass("Verify Navigation",
					"User is navigated to " + headerTitle + " post tapping back button from Edit Profile screen");
			logger.info("User is navigated to " + headerTitle + " post tapping back button from Edit Profile screen");
			click(AMDGenericObjects.objBackBtn, "Back button");
		} else {
			extent.extentLoggerFail("Verify Navigation",
					"User is not navigated to My Profile screen post tapping back button from Edit Profile screen");
			logger.info("User is not navigated to My Profile post tapping back button from Edit Profile screen");
		}
	}

	/**
	 * Social Login Validations from Edit Profile Screen
	 */
	public void socialLoginValidationsForEditProfileScreen(String userType) throws Exception {
		extent.HeaderChildNode("Social Login Validations for Edit Profile screen");
		System.out.println("\nSocial Login Validations for Edit Profile screen");
		Swipe("UP", 2);
		swipeUntilFindElement(AMDHomePage.objLogout, "UP");
		verifyElementPresentAndClick(AMDHomePage.objLogout, "Logout");
		verifyElementPresentAndClick(AMDHomePage.objLogoutPopUpLogoutButton, "Logout button");
		Swipe("DOWN", 1);
		swipeUntilFindElement(AMDMoreMenu.objLoginRegisterText, "DOWN");
		click(AMDMoreMenu.objLoginRegisterText, "Login/Register link");
		loginMethod("SocialLogin");
		click(AMDMoreMenu.objMoreMenuIcon, "More tab screen");
		click(AMDMoreMenu.objLoginRegisterText, "Profile");
		click(AMDMyProfileScreen.objEditProfileButton, "Edit profile");

		// Social Login validations

		verifyFieldsAreEditable(AMDEditProfileScreen.objFirstNameField, "First Name", "NewFirstName");
		verifyFieldsAreEditable(AMDEditProfileScreen.objLastNameField, "Last Name", "NewLastName");
		hideKeyboard();
		// Verify Email field is in proper format
		String getEmailID = getText(AMDEditProfileScreen.objEmailIDFieldInEditScreen);
		String getPhNumber = getText(AMDEditProfileScreen.objMobNumberField);
		if (getEmailID.length() > 1) {
			boolean isEmailValid = emailValidator(getEmailID);
			System.out.println(isEmailValid);
			if (isEmailValid) {
				extent.extentLoggerPass("Verify EmailID", "Email ID: " + getEmailID + " displayed is Valid format");
				logger.info("Email ID: " + getEmailID + " is in valid format");
			} else {
				extent.extentLoggerFail("Verify EmailID", "Email ID: " + getEmailID + " displayed is Invalid format");
				logger.info("Email ID: " + getEmailID + " is Invalid format");
			}
		} else if (getPhNumber.length() > 1) {
			extent.extentLoggerPass("Veridy EmailID", "Email ID field is empty for this User");
			logger.info("Email ID field is empty for this User");
			if (getPhNumber.matches("\\d*")) {
				extent.extentLoggerPass("Verify PhoneNumber",
						"Phone Number: " + getPhNumber + " displayed is Valid Numeric format");
				logger.info("Phone Number: " + getPhNumber + " displayed is Valid Numeric format");
			} else {
				extent.extentLoggerFail("Verify PhoneNumber",
						"Phone Number: " + getPhNumber + " displayed is Invalid format");
				logger.info("Phone Number: " + getPhNumber + " displayed is Invalid format");
			}
		} else {
			extent.extentLoggerFail("EmailId/PhNumber", "Email ID Or Phone Number is NOT displayed for this user");
			logger.info("Email ID Or Phone Number is NOT displayed for this user");
		}

		verifyFieldsAreEditable(AMDEditProfileScreen.objEmailFieldForEmailLogin, "Email ID", "newemail@zee5.com");
		hideKeyboard();
		// Verify DOB field is editable

		String OldDate = getText(AMDEditProfileScreen.objDOBTxtField);
		// Verify the given DOB is displayed in DD/MM/YYYY format
		/*
		 * //boolean dateFormat = isValidDateFormat("DD/MM/YYYY",
		 * OldDate,Locale.ENGLISH); if(dateFormat) {
		 * extent.extentLogger("Verify DOB field"
		 * ,"The DOB field is displayed in DD/MM/YYYY format");
		 * logger.info("The DOB field is displayed in DD/MM/YYYY format"); }else {
		 * extent.extentLoggerFail("Verify DOB format"
		 * ,"The DOB field is not displayed in DD/MM/YYYY format");
		 * logger.info("The DOB field is not displayed in DD/MM/YYYY format"); }
		 */
		click(AMDEditProfileScreen.objDOBTxtField, "DOB field");
		// Verify the calendar is displayed on clicking calendar option
		verifyElementPresent(AMDEditProfileScreen.objCalenderPopUp, "Calendar option");

		// Select New date
		type(AMDEditProfileScreen.objYearField, "1950", "Year field");
		click(AMDEditProfileScreen.objOkBtnCalender, "OK button");
		String newDate = getText(AMDEditProfileScreen.objDOBTxtField);
		if (!OldDate.equals(newDate)) {
			extent.extentLoggerPass("Verify DOB field", "DOB field can be editable");
			extent.extentLoggerPass("DOB", "The DOB : " + OldDate + " is updated to new DOB : " + newDate);
			logger.info("DOB field can be editable");
			logger.info("The DOB : " + OldDate + " is updated to new DOB : " + newDate);
		} else {
			extent.extentLoggerFail("Verify DOB field", "DOB field can not be editable");
			logger.info("DOB field can not be editable");
		}
		// Verify the Gender field is editable
		String oldGender = getText(AMDEditProfileScreen.objGederTxtField);
		click(AMDEditProfileScreen.objGederTxtField, "Gender field");
		if (oldGender.equals("Male")) {
			click(AMDEditProfileScreen.objFemale, "Female gender option");
		} else {
			click(AMDEditProfileScreen.objMale, "Male gender option");
		}
		String NewGender = getText(AMDEditProfileScreen.objGederTxtField);
		if (!oldGender.equals(NewGender)) {
			extent.extentLoggerPass("Verify Gender field", "Gender field can be editable");
			extent.extentLoggerPass("Gender", "The gender : " + oldGender + " is updated to new gender : " + NewGender);
			logger.info("Gender field can be editable");
			logger.info("The gender : " + oldGender + " is updated to new gender : " + NewGender);
		} else {
			extent.extentLoggerFail("Verify Gender field", "Gender field can not be editable");
			logger.info("Gender field can not be editable");
		}
		Back(1);
	}
/**
 * Note This method is to Login into the application
 * @param loginMethod
 * @throws Exception
 */
	public void loginMethod(String loginMethod) throws Exception {
		System.out.println("\nLogin through " + loginMethod);
		switch (loginMethod) {
		case "Email":
			extent.HeaderChildNode("Login through Email ID");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, "zee5latest@gmail.com", "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, "User@123", "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;
		case "Mobile":
			extent.HeaderChildNode("Login through registered Mobile number");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, "9880710182", "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, "User@123", "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;

		case "SocialLogin": // extent.HeaderChildNode("Social Media login - Google account login");
			verifyElementPresentAndClick(AMDLoginScreen.objGoogleBtn, "Gmail icon");
			boolean isAccount = verifyIsElementDisplayed(AMDLoginScreen.objGmailAccount);
			if (isAccount) {
				if (verifyElementDisplayed(AMDLoginScreen.objFirstGmailAccount)) {
					click(AMDLoginScreen.objFirstGmailAccount, "Gmail Account");
					waitTime(5000);
				}
			} else if (verifyElementPresent(AMDLoginScreen.objGmailSignIn, "Gmail Sign In")) {
				verifyElementPresentAndClick(AMDLoginScreen.objGmailEmailField, "Email Field");
				type(AMDLoginScreen.objGmailEmailField, "zeetest55@gmail.com", "Email Field");
				verifyElementPresentAndClick(AMDLoginScreen.objGmailNextBtn, "Next Button");
				verifyElementPresentAndClick(AMDLoginScreen.objGmailPasswordField, "Password Field");
				type(AMDLoginScreen.objGmailPasswordField, "zeetest123", "Password Field");
				verifyElementPresentAndClick(AMDLoginScreen.objGmailNextBtn, "Next Button");

				if (verifyIsElementDisplayed(AMDLoginScreen.objGmailAddPhoneNumber)) {
					verifyElementPresentAndClick(AMDLoginScreen.objSkipBtn, "Skip Button");
				}
				if (verifyIsElementDisplayed(AMDLoginScreen.objAgreeBtn)) {
					click(AMDLoginScreen.objAgreeBtn, "Agree Button");
				}
				if (verifyIsElementDisplayed(AMDLoginScreen.objAcceptBtn)) {
					click(AMDLoginScreen.objAcceptBtn, "Accept Button");
				}
			}
			if (verifyIsElementDisplayed(AMDHomePage.objHome)) {
				logger.info("User logged in successfully using Google account");
				extent.extentLoggerPass("Login", "User logged in successfully using Google account");
			}
			break;
		}
	}
/**
 * @Note Method will verify if the fields are editable or not
 * @param by
 * @param fieldType
 * @param text
 */
	public void verifyFieldsAreEditable(By by, String fieldType, String text) {
		String oldText = getDriver().findElement(by).getText();
		getDriver().findElement(by).click();
		getDriver().findElement(by).clear();
		getDriver().findElement(by).sendKeys(text);
		String newText = getDriver().findElement(by).getText();
		if (oldText.equals(newText)) {
			extent.extentLoggerFail("Verify Fields are editable", fieldType + " field is NOT editable");
			logger.info(fieldType + " field is NOT editable");
		} else {
			extent.extentLoggerPass("Verify Fields are editable", fieldType + " field is editable");
			extent.extentLoggerPass("Verify the fields",
					"The old text is : " + oldText + " updated to New text : " + newText);
			logger.info("The old text is : " + oldText + " updated to New text : " + newText);
			logger.info(fieldType + " field is editable");
		}
	}
/**
 * Validating the email
 * @param email
 * @return
 */
	public static boolean emailValidator(String email) {

		// Get an EmailValidator
		EmailValidator validator = EmailValidator.getInstance();
		// Validate specified String containing an email address
		if (!validator.isValid(email)) {
			return false;
		} else {
			return true;
		}
	}
/**
 * @Note Method will verify the My subscription screen
 * @param userType
 * @throws Exception
 */
	public void verifyMySubscription(String userType) throws Exception {
		extent.HeaderChildNode("Verify My Subscription Screen");
		System.out.println("\nVerify My Subscription Screen");

		// To verify if appropriate page is displayed
		if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		} else {
			if (!verifyElementDisplayed(AMDMoreMenu.objMySubscription)) {
				BackToLandingScreen();
				click(AMDHomePage.objMoreMenu, "More Menu");
			}
		}

		if (verifyIsElementDisplayed(AMDMoreMenu.objMySubscription)) {
			logger.info("My subscription option is available on More menu screen");
			extent.extentLoggerPass("Mysubscription Screen", "My subscription option is available on More menu screen");
		} else {
			logger.info("My subscription option is not available on More menu screen");
			extent.extentLoggerFail("Mysubscription Screen",
					"My subscription option is not available on More menu screen");
		}

		verifyElementPresentAndClick(AMDMoreMenu.objMySubscription, "My Subscription");
		waitTime(2000);
		if (verifyIsElementDisplayed(AMDMoreMenu.objMySubscriptionsHeader)) {
			logger.info("User navigated to My Subscriptions Page on tapping My Subscriptions");
			extent.extentLoggerPass("MySubscriptions Screen",
					"User navigated to My Subscriptions Page on tapping My Subscriptions");
		} else {
			logger.info("User navigated to My Subscriptions Page on tapping My Subscriptions");
			extent.extentLoggerFail("MySubscriptions Screen",
					"User navigated to My Subscriptions Page on tapping My Subscriptions");
		}

		if (verifyIsElementDisplayed(AMDMoreMenu.objsubscriptionPackStatus)) {
			String SubscriptionPackStatus = getDriver().findElement(AMDMoreMenu.objsubscriptionPackStatus).getText();
			logger.info(
					SubscriptionPackStatus + " : My Subscription pack Status details is displayed for the " + userType);
			extent.extentLoggerPass("MySubscription Screen",
					SubscriptionPackStatus + " : My Subscription pack Status details is displayed for the " + userType);
		} else {

			logger.info(" SubscriptionPackStatus details is not displayed for the " + userType);
			extent.extentLoggerFail("MySubscription Screen",
					"SubscriptionPackStatus details is not displayed for the " + userType);
		}

		verifyElementPresentAndClick(AMDLoginScreen.objBackBtn, "Back Button");
		if (checkElementExist(AMDMoreMenu.objMySubscription, "My Subscription")) {
			logger.info("User navigated to prevoius screen on tapping back icon present in My Subscriptions screen");
			extent.extentLoggerPass("MySubscriptions Screen",
					"User navigated to prevoius screen on tapping back icon present in My Subscriptions screen");
		} else {
			logger.info("User navigated to prevoius screen on tapping back icon present in My Subscriptions screen");
			extent.extentLoggerFail("MySubscriptions Screen",
					"User navigated to prevoius screen on tapping back icon present in My Subscriptions screen");
		}

		extent.HeaderChildNode("verify My Subscription pack details");
		verifyElementPresentAndClick(AMDMoreMenu.objMySubscription, "My Subscription");
		String SubscriptionPackPrice = getDriver().findElement(AMDMoreMenu.objSubscriptionPackPrice).getText();

		if (checkElementExist(AMDMoreMenu.objSubscriptionPackPrice, "My subscription Pack Price")) {
			logger.info(SubscriptionPackPrice + " : My Subscription pack price is displayed for the " + userType);
			extent.extentLoggerPass("MySubscription Screen",
					SubscriptionPackPrice + " : My Subscription pack price is displayed for the " + userType);
		} else {

			logger.info(SubscriptionPackPrice + " : My Subscription pack price is displayed for the " + userType);
			extent.extentLoggerFail("MySubscription Screen",
					SubscriptionPackPrice + " : My Subscription pack price is displayed for the " + userType);
		}

		String SubscriptionPackDuration = getDriver().findElement(AMDMoreMenu.objSubscriptionPackDuration).getText();

		if (checkElementExist(AMDMoreMenu.objSubscriptionPackDuration, "My subscription Pack Duration")) {
			logger.info(SubscriptionPackDuration + " : My Subscription pack duration is displayed for the " + userType);
			extent.extentLoggerPass("MySubscription Screen",
					SubscriptionPackDuration + " : My Subscription pack duration is displayed for the " + userType);
		} else {

			logger.info(SubscriptionPackDuration + " : My Subscription pack duration is displayed for the " + userType);
			extent.extentLoggerFail("MySubscription Screen",
					SubscriptionPackDuration + " : My Subscription pack duration is displayed for the " + userType);
		}

		Swipe("Up", 1);

		String SubscriptionPackExpiryDate = getDriver().findElement(AMDMoreMenu.objSubscriptionPackExpiryDate)
				.getText();

		if (checkElementExist(AMDMoreMenu.objSubscriptionPackExpiryDate, "My subscription Pack Expiry Date")) {
			logger.info(SubscriptionPackExpiryDate + " : My Subscription pack expiry date is displayed for the "
					+ userType);
			extent.extentLoggerPass("MySubscription Screen",
					SubscriptionPackExpiryDate + " : My Subscription pack expiry date is displayed for the" + userType);
		} else {

			logger.info(SubscriptionPackExpiryDate + " : My Subscription pack expiry date is displayed for the "
					+ userType);
			extent.extentLoggerFail("MySubscription Screen", SubscriptionPackExpiryDate
					+ " : My Subscription pack expiry date is displayed for the " + userType);
		}

		Swipe("DOWN", 1);

		String SubscriptionPackCountryDetails = getDriver().findElement(AMDMoreMenu.objSubscriptionPackCountry)
				.getText();

		if (checkElementExist(AMDMoreMenu.objSubscriptionPackCountry, "My subscription Pack Country")) {
			logger.info(SubscriptionPackCountryDetails + " : My Subscription pack Country details is displayed for the "
					+ userType);
			extent.extentLoggerPass("MySubscription Screen", SubscriptionPackCountryDetails
					+ " : My Subscription pack Country details is displayed for the " + userType);
		} else {

			logger.info(SubscriptionPackCountryDetails + " : My Subscription pack Country details is displayed for the "
					+ userType);
			extent.extentLoggerFail("MySubscription Screen", SubscriptionPackCountryDetails
					+ " : My Subscription pack Country details is displayed for the " + userType);
		}

		String SubscriptionPackPaymentMode = getDriver().findElement(AMDMoreMenu.objSubscriptionPackPaymentMode)
				.getText();

		if (checkElementExist(AMDMoreMenu.objSubscriptionPackPaymentMode, "My subscription Pack Payment Mode")) {
			logger.info(SubscriptionPackPaymentMode + " : My Subscription pack payment mode is displayed for the "
					+ userType);
			extent.extentLoggerPass("MySubscription Screen", SubscriptionPackPaymentMode
					+ " : My Subscription pack payment mode is displayed for the " + userType);
		} else {

			logger.info(SubscriptionPackPaymentMode + " : My Subscription pack payment mode is displayed for the "
					+ userType);
			extent.extentLoggerFail("MySubscription Screen", SubscriptionPackPaymentMode
					+ " : My Subscription pack payment mode is displayed for the " + userType);
		}

		String SubscriptionPackOfferings = getDriver().findElement(AMDMoreMenu.objSubscriptionPackOfferings).getText();

		if (checkElementExist(AMDMoreMenu.objSubscriptionPackOfferings, "My subscription pack Offerings")) {
			logger.info(
					SubscriptionPackOfferings + " : My Subscription pack offerings is displayed for the " + userType);
			extent.extentLoggerPass("MySubscription Screen",
					SubscriptionPackOfferings + " : My Subscription pack offerings is displayed for the " + userType);
		} else {

			logger.info(
					SubscriptionPackOfferings + " : My Subscription pack offerings is displayed for the" + userType);
			extent.extentLoggerFail("MySubscription Screen",
					SubscriptionPackOfferings + " : My Subscription pack offerings is displayed for the" + userType);
		}
		Back(2);
		verifySubscribeToMultipleAccessPacks(userType);
	}
/**
 * @Note Verifying the Subscription to Multiple acess packs
 * @param userType
 * @throws Exception
 */
	@SuppressWarnings("unused")
	public void verifySubscribeToMultipleAccessPacks(String userType) throws Exception {}

	/**
	 * My Subscription screen validations
	 */
	public void MySubscriptionValidations(String userType) throws Exception {
		extent.HeaderChildNode("My Subscriptions screen validations for user type :" + userType);
		System.out.println("\nMy Subscriptions screen validations for user type :" + userType);

		// To verify if appropriate page is displayed
		if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		} else {
			if (!verifyElementDisplayed(AMDMoreMenu.objMySubscription)) {
				BackToLandingScreen();
				click(AMDHomePage.objMoreMenu, "More Menu");
			}
		}

		// Verify User is navigated to Login/Register screen post tapping My
		// Subscription
		verifyElementPresentAndClick(AMDMoreMenu.objMySubscription, "My Subscription");
//		String screenTitle = getText(AMDGenericObjects.objgetScreenTitle);
//		if (screenTitle.equalsIgnoreCase("Subscribe")) {
//			extent.extentLoggerPass("Verify navigation",
//					"User is navigated to Subscribe screen post tapping My Subscription from More menu screen ");
//			logger.info(
//					"User is navigated to Subscribe screen post tapping My Subscription from More menu screen");
//		} else {
//			extent.extentLoggerFail("Verify navigation",
//					"User is not navigated to My Subscriptions screen post tapping My Subscription from More menu screen ");
//			logger.info(
//					"User is not navigated to My Subscriptions screen post tapping My Subscription from More menu screen");
//		}

		// Verify Subscribe now and No Active subscription is displayed
		if (verifyIsElementDisplayed(AMDMoreMenu.objNoActivePlans)) {
			String NoactivePlans = getText(AMDMoreMenu.objNoActivePlans);
			extent.extentLoggerPass("Verify No active Subscription",
					NoactivePlans + " message is displayed in My Subscription screen");
			logger.info(NoactivePlans + " message is displayed in My Subscription screen");
		} else {
			extent.extentLoggerFail("Verify No active Subscription",
					"No Active Subscription message is NOT displayed in My Subscription screen");
			logger.info("No Active Subscription message is NOT displayed in My Subscription screen");
		}
		if (verifyIsElementDisplayed(AMDMoreMenu.objSubscribeNowCTA)) {
			extent.extentLoggerPass("Subscribe Now", "Buy Plan CTA is displayed in My Subscriptions screen");
			logger.info("Buy Plan CTA is displayed in My Subscriptions screen");

			// Verify User is navigated to subscribe screen post tapping Subscribe Now CTA
			verifyElementPresentAndClick(AMDMoreMenu.objSubscribeNowCTA, "Buy Plan CTA");
			waitTime(1000);
			// String screenTitle = getText(AMDGenericObjects.objgetScreenTitle);
			if (verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe screen")) {
				extent.extentLoggerPass("Buy Plan CTA Navigation",
						"User is navigated to Subscribe screen post tapping Buy Plan CTA from My Subscriptions screen");
				logger.info(
						"User is navigated to Subscribe screen post tapping Buy Plan CTA from My Subscriptions screen");
				// verifyElementPresentAndClick(AMDSubscibeScreen.objSubscribePageBackButton,
				// "Back button");
			} else {
				extent.extentLoggerFail("Subscribe Now CTA Navigation",
						"User failed to navigate to Subscribe screen post tapping Buy Plan CTA from My Subscriptions screen");
				logger.info(
						"User is not navigated to Subscribe screen post tapping Buy Plan CTA from My Subscriptions screen");
			}
			waitTime(3000);
			verifyElementPresentAndClick(AMDSubscibeScreen.objSubscribePageBackButton, "Back button");
		} else {
			extent.extentLoggerFail("Subscribe Now", "Buy Plan CTA is not displayed in My Subscriptions screen");
			logger.info("Buy Plan CTA is not displayed in My Subscriptions screen");
		}

		waitTime(2000);
		Swipe("DOWN", 2);
		// Verify user is navigated back to More menu screen on clicking back button
		if (checkElementExist(AMDMoreMenu.objMySubscription, "My Subscription")) {
			extent.extentLoggerPass("Back Button Navigation",
					"User is able to navigate back to More menu screen post tapping back button from My Subscriptions screen");
			logger.info(
					"User is able to navigate back to More menu screen post tapping back button from My Subscriptions screen");
			Back(1);
		} else {
			extent.extentLoggerFail("Back Button Navigation",
					"User failed to navigate back to More menu screen post tapping back button from My Subscriptions screen");
			logger.info(
					"User failed to navigate back to More menu screen post tapping back button from My Subscriptions screen");
		}
	}

	/**
	 * Author : Manasa
	 * Login Functionality
	 */
	public void zeeApplicasterLoginForSettings(String LoginMethod) throws Exception {
		extent.HeaderChildNode("Login Functionality");
		String UserType = getParameterFromXML("userType");
		if (UserType.equals("Guest")) {
			extent.extentLogger("userType", "UserType : Guest");
		}
//		verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Login link");
//		waitTime(3000);

		switch (LoginMethod) {
		case "Guest":
			extent.HeaderChildNode("Guest User");
			extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");
			waitTime(1000);
			hideKeyboard();
			// verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Skip link");
			waitTime(3000);
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as NonSubscribed User for Settings");
			String SUsername = getParameterFromXML("SettingsNonsubscribedUserName");
			String SPassword = getParameterFromXML("SettingsNonsubscribedPassword");
			// verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse
			// for Free");
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			// Verify user is navigated to Login/Register screen post tapping Login/Register
			// link
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, SPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User for Settings");
			String SettingsSubscribedUsername = getParameterFromXML("SettingsSubscribedUserName");
			String SettingsSubscribedPassword = getParameterFromXML("SettingsSubscribedPassword");
			// verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse
			// for Free");
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			// Verify user is navigated to Login/Register screen post tapping Login/Register
			// link
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SettingsSubscribedUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, SettingsSubscribedPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;
		}
	}

	/**
	 * Author : Manasa
	 * Verifying the Playback after minimize and maximize app from background
	 */
	public void verifyPlaybackAfterMinimzeAndMaximizeAppFromBackground() throws Exception {
		extent.HeaderChildNode("Validation of content playback after minimize and maximize app from background");
		System.out.println("\nValidation of content playback after minimize and maximize app from background");
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		String time1 = getText(AMDPlayerScreen.objTimer);
		int startTime = timeToSec(time1);
		logger.info("Time before minimizing app from background : " + startTime);
		extentLogger("Time", "Time before minimizing app from background : " + startTime);
		getDriver().runAppInBackground(Duration.ofSeconds(10));
		logger.info("App is put to background");
		extentLogger("Time", "App is put to background");
		waitTime(2000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		//tapPlayerToGetControls("portrait");
		String time2 = getText(AMDPlayerScreen.objTimer);
		int elapsedTime = timeToSec(time2);
		logger.info("Time after maximizing app from background : " + elapsedTime);
		extentLogger("Time", "Time after maximizing app from background : " + elapsedTime);
		if (elapsedTime > startTime) {
			logger.info("Content playback is resumed after maximizing the app from background");
			extentLoggerPass("Elapsed time", "Content playback is resumed on maximizing the app from background");
		} else {
			logger.error("Content playback is not resumed after maximizing the app from background");
			extentLoggerFail("Time", "Content playback is resumed on maximizing the app from background");
		}
	}
/**
 * Validating the content playback after Lock and unlocking the device screen
 * @throws Exception
 */
	public void verifyPlaybackAfterLockAndUnlock() throws Exception {
		extent.HeaderChildNode("Validation of content playback after lock and unlocking the device screen");
		System.out.println("\nValidation of content playback after lock and unlocking the device screen");
		waitTime(10000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		String time1 = getText(AMDPlayerScreen.objTimer);
		int startTime = timeToSec(time1);
		System.out.println(startTime);
		logger.info("Time before locking the device screen : " + startTime);
		extentLogger("Time", "Time before locking the device screen : " + startTime);
		adbKeyevents(26);
		waitTime(7000);
		adbKeyevents(26);
		waitTime(3000);
		Swipe("Up", 1);
		waitTime(8000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			waitForAdToFinishInAmd();
		}
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		// click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		String time2 = getText(AMDPlayerScreen.objTimer);
		int elapsedTime = timeToSec(time2);
		System.out.println(elapsedTime);

		logger.info("Time after unlocking the device screen : " + elapsedTime);
		extentLogger("Time", "Time after unlocking the device screen : " + elapsedTime);

		if (elapsedTime > startTime) {
			logger.info("Content playback is resumed after unlocking the device screen");
			extentLoggerPass("Elapsed time", "Content playback is resumed after unlocking the device screen");
		} else {
			logger.error("Content playback is not resumed after unlocking the device screen");
			extentLoggerFail("Elapsed time", "Content playback is not resumed after unlocking the device screen");
		}
	}

	/**
	 * @param keyevent pass the android key event value to perform specific action
	 * @Note Method is to perform the keyevent
	 */
	public void adbKeyevents(int keyevent) {
		try {
			String cmd = "adb shell input keyevent" + " " + keyevent;
			Runtime.getRuntime().exec(cmd);
			logger.info("Performed the Keyevent" + keyevent);
			extent.extentLogger("adbKeyevent", "Performed the Keyevent" + keyevent);
		} catch (Exception e) {
			logger.error(e);
		}
	}

	/**
	 * @Note verifying the Premium content with trailer and validating the subtitles during playback
	 * @param userType
	 * @param searchKeyword
	 * @throws Exception
	 */
	public void premiumContentwithTrailer(String userType, String searchKeyword) throws Exception {
		extent.HeaderChildNode("Select Subtitle during trailer playback");
		System.out.println("\nSelect Subtitle during trailer playback");
		// click(AMDSearchScreen.objSearchIcon, "Search icon");
		// click(AMDSearchScreen.objSearchEditBox, "Search Box");
		click(AMDSearchScreen.objSearchBoxBar, "Search Box");
		clearField(AMDSearchScreen.objSearchBoxBar, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword + "\n", "Search bar");
		hideKeyboard();
		click(AMDSearchScreen.objSearchResultContainsText(searchKeyword), "Search result");
//		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
//			waitForAdToFinishInAmd();
//		}
		if (userType.equals("Guest"))
			registerPopUpClose();
		waitTime(7000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		waitTime(1000);
		if (checkElementExist(AMDPlayerScreen.objPlayerScreen, "Player screen")) {
			waitTime(5000);
			if (verifyElementExist(AMDPlayerScreen.objSubtitleOptionInPotraitMode, "Subtitle option")) {
				String defaultValue = getText(AMDPlayerScreen.objSubtitleValueInPotraitMode);
				if (defaultValue.equalsIgnoreCase("Off")) {
					logger.info("By default Subtitle is in Off state");
					extentLogger("Subtitles", "By default Subtitle is in Off state");
					click(AMDPlayerScreen.objSubtitleValueInPotraitMode, "Subtitle option");
					click(AMDPlayerScreen.objEnglishSubtitle, "English subtitle");
					String Value = getText(AMDPlayerScreen.objSubtitleValueInPotraitMode);
					if (Value.equalsIgnoreCase("en")) {
						logger.info("English subtitle is selected");
						extentLoggerPass("Subtitles", "English subtitle is selected");
					} else {
						logger.error("English subtitle is not selected");
						extentLoggerFail("Subtitles", "English subtitle is not selected");
					}
				}
			}
			if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
				extent.HeaderChildNode(
						"verifing Subscribe screen at the end of the non premium trailer content playback");
				System.out
						.println("\nverifing Subscribe screen at the end of the non premium trailer content playback");
				waitTime(5000);
				tapPlayerToGetControls("portrait");
				WebElement element = getDriver().findElement(AMDPlayerScreen.objProgressBar);
				Dimension size = element.getSize();
				int startx = (int) (size.width);
				int startX = startx + 180;
				System.out.println(startX);
				SwipeAnElement(element, startX, 0);
				logger.info("Seeked to the end");
				extent.extentLogger("", "Seeked to the end");
				verifyElementExist(AMDConsumptionScreen.objGetPremiumOnPlayer,
						"Buy Plan CTA on the player screen at the end of the non premium trailer content playback");
				if (userType.equalsIgnoreCase("Guest")) {
					Swipe("UP", 1);
					verifyElementExist(AMDPlayerScreen.objLoginCTA, "Login CTA");
				}
				waitTime(2000);
				// Back(1);
			}
			waitTime(6000);
			Back(1);
		} else {
			logger.info("Player screen is not displayed");
			extentLoggerFail("Player screen", "Player screen is not displayed");
		}
		// To Navigate back to from Consumption screen
		if (verifyIsElementDisplayed(AMDConsumptionScreen.objShareBtn)) {
			Back(1);
		}
	}
/**
 * @Note tapping on player screen to get the player controls
 * @param mode
 * @throws Exception
 */
	public void tapPlayerToGetControls(String mode) throws Exception {
		boolean controlsDisplayed = false;
		AndroidTouchAction touch = new AndroidTouchAction(getDriver());
		int requiredX = 0, requiredY = 0;
		if (mode.equalsIgnoreCase("landscape")) {
			// not tested for landscape
			Dimension deviceSize = getDriver().manage().window().getSize();
			int deviceWidth = deviceSize.getWidth();
			int deviceHeight = deviceSize.getHeight();
			requiredX = deviceWidth / 2;
			requiredY = deviceHeight / 8;

		} else {
			WebElement player = findElement(AMDPlayerScreen.objPlayerScreen);
			int playerWidth = player.getSize().getWidth();
			int playerHeight = player.getSize().getHeight();
			int playerX = player.getLocation().getX();
			int playerY = player.getLocation().getY();
			requiredX = playerX + playerWidth / 10;
			requiredY = playerY + playerHeight / 2;

		}
		try {
			if (findElement(AMDPlayerScreen.objNextIcon).isDisplayed()) {
				controlsDisplayed = true;
			}
		} catch (Exception e) {
		}
		if (controlsDisplayed == false) {
			touch.press(PointOption.point(requiredX, requiredY)).release().perform();
		} else {
			touch.press(PointOption.point(requiredX, requiredY)).release().perform();
			waitTime(2000);
			touch.press(PointOption.point(requiredX, requiredY)).release().perform();
		}
		logger.info("Tapped player to display controls");
		extent.extentLogger("", "Tapped player to display controls");
	}
/**
 * Validating the premium content without trailer
 * @param userType
 * @param searchKeyword
 * @throws Exception
 */
	public void premiumContentWithoutTrailer(String userType, String searchKeyword) throws Exception {
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			System.out.println("\nPremium content without Trailer");
			extent.HeaderChildNode("Verifing Premium content without Trailer");
			waitTime(2000);
			click(AMDSearchScreen.objSearchBoxBar, "Search Box");
			clearField(AMDSearchScreen.objSearchBoxBar, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, searchKeyword + "\n", "Search bar");
			hideKeyboard();
			// closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000);
			waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
			click(AMDSearchScreen.objSearchResultContainsText(searchKeyword), "Search result");
			waitTime(3000);
			if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				verifyElementExist(AMDConsumptionScreen.objGetPremiumOnPlayer, "Buy Plan CTA to Subscribe on player");
				String buttonText = getText(AMDConsumptionScreen.objGetPremiumOnPlayer);
				if (buttonText.equals("Buy Plan")) {
					logger.info("CTA text is \"Buy Plan \" as expected");
					extent.extentLoggerPass("", "CTA text is \"Buy Plan \" as expected");
				} else {
					logger.error("CTA text is \"" + buttonText + "\" instead of \"Buy Plan \"");
					extent.extentLoggerFail("", "CTA text is \"" + buttonText + "\" instead of \"Buy Plan \"");
				}
			} else if (userType.equalsIgnoreCase("Guest")) {
				checkElementExist(AMDPlayerScreen.objPremiumTextOnPlayer, "Subscription required text");
				String premiumText = getText(AMDPlayerScreen.objPremiumTextOnPlayer);
				if (premiumText.contains("To watch this")) {
					logger.info("Premium text is " + premiumText + " as expected");
					extent.extentLoggerPass("", "Premium text is " + premiumText + " as expected");
				} else {
					logger.error("Premium text is not displayed");
					extent.extentLoggerFail("", "Premium text is not displayed");
				}
				checkElementExist(AMDConsumptionScreen.objGetPremiumOnPlayer, "Buy Plan CTA to Subscribe on player");
				String buttonText = getText(AMDConsumptionScreen.objGetPremiumOnPlayer);
				if (buttonText.equals("Buy Plan")) {
					logger.info("CTA text is \"Buy Plan\" as expected");
					extent.extentLoggerPass("", "CTA text is \"Buy Plan\" as expected");
				} else {
					logger.error("CTA text is \"" + buttonText + "\" instead of \"Buy Plan\"");
					extent.extentLoggerFail("", "CTA text is \"" + buttonText + "\" instead of \"Buy Plan\"");
				}
				click(AMDConsumptionScreen.objGetPremiumOnPlayer, "Buy Plan CTA");
				verifyElementPresent(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe Screen");
				Back(1);
				if (!checkElementExist(AMDPlayerScreen.objLoginTextOnPlayer, "Login link")) {
					logger.error("Login link is not displayed on player when content has no trailer");
					extentLoggerFail("", "Login link is not displayed on player when content has no trailer");
				}
				if (!checkElementExist(AMDPlayerScreen.objLoginCTA, "Login CTA")) {
					logger.error("Login CTA is not displayed on player when content has no trailer");
					extentLoggerFail("", "Login CTA is not displayed on player when content has no trailer");
				} else {
					click(AMDPlayerScreen.objLoginCTA, "Login CTA");
					if (checkElementExist(AMDLoginScreen.objLoginOrRegisterPageTitle, "Login/Register screen")) {
						logger.info("User is navigated to Login/Register screen post tapping on Login link");
						extentLoggerPass("Login/Register screen",
								"User is navigated to Login/Register screen post tapping on Login link");
					} else {
						logger.info("User is not navigated to Login/Register screen post tapping on Login link");
						extentLoggerFail("Login/Register screen",
								"User is not navigated to Login/Register screen post tapping on Login link");
					}
					Back(1);
				}
			}
			waitTime(5000);
			Back(1);
		}
		// To Navigate back to from Consumption screen
		if (verifyIsElementDisplayed(AMDConsumptionScreen.objShareBtn)) {
			Back(1);
		}
	}
/**
 * @Note Verifying the Premium content without tariler in Landscape mode
 * @param userType
 * @param searchKeyword5
 * @throws Exception
 */
	public void premiumContentWithoutTrailerInLandscapeMode(String userType, String searchKeyword5) throws Exception {
		extent.HeaderChildNode("Verifying Premium content without Trailer in Landscape mode");
		System.out.println("\nVerifying Premium content without Trailer in Landscape mode");
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, searchKeyword5 + "\n", "Search bar");
			waitTime(2000);
			hideKeyboard();
			waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);

			click(AMDMoreMenu.objSearchResult(searchKeyword5), "Search result");
			waitTime(2000);
			verifyElementPresent(AMDConsumptionScreen.objGetpremiumBelowThePlayer, "Buy Plan CTA below the player");
			switchtoLandscapeMode();
			waitTime(3000);

			if (verifyElementPresent(AMDConsumptionScreen.objGetPremiumOnPlayer, "Buy Plan CTA")) {
				logger.info(getText(AMDConsumptionScreen.objGetPremiumOnPlayer)
						+ " is displayed on the playerin Landscape Mode");
				extentLoggerPass("GetPremium popUp", getText(AMDPlayerScreen.objPremiumTextOnPlayer)
						+ " is displayed on the playerin Landscape Mode");
			} else {
				logger.error("Subscription required text is not displayed on the player");
				extentLoggerFail("GetPremium popUp", "Subscription required text is not displayed on the player");
			}

			verifyElementPresentAndClick(AMDConsumptionScreen.objGetPremiumOnPlayer, "Buy Plan CTA below the player");
			if (verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "subscribe screen")) {
				logger.info("User is navigated to Subscribe screen post tapping on Buy Plan Link");
				extentLoggerPass("GetPremium popUp",
						"User is navigated to Subscribe screen post tapping on Buy Plan Link");
			} else {
				logger.error("User is not navigated to Subscribe screen post tapping on Buy Plan Link");
				extentLoggerFail("GetPremium popUp",
						"User is not navigated to Subscribe screen post tapping on Buy Plan Link");
			}
			Back(1);

			// -----> The below code is commented due to the Login CTA is not available on
			// the player [AMA2-6266]
			/*
			 * if (userType.equals("Guest")) {
			 * verifyElementExist(AMDPlayerScreen.objLoginTextOnPlayer,
			 * "Login required text");
			 * verifyElementPresentAndClick(AMDPlayerScreen.objLoginLinkOnPlayer,
			 * "Login link"); if
			 * (verifyElementExist(AMDLoginScreen.objLoginOrRegisterPageTitle,
			 * "Login/Register screen")) { logger.
			 * info("User is navigated to Login/Register screen post tapping on Login link"
			 * ); extentLoggerPass("Login/Register screen",
			 * "User is navigated to Login/Register screen post tapping on Login link"); }
			 * else { logger.
			 * error("User is navigated to Login/Register screen post tapping on Login link"
			 * ); extentLoggerFail("Login/Register screen",
			 * "User is navigated to Login/Register screen post tapping on Login link"); }
			 * click(AMDLoginScreen.objLoginLnk, "Skip link"); }
			 */
			// switchtoPortraitMode();
			waitTime(2000);
			Back(2);
		} else {
			extent.extentLoggerPass("Premium Content without Trailer",
					"Premium Content without Trailer in Landscape mode is NOT applicable for - " + userType);
			logger.info("Premium Content without Trailer in Landscape mode is NOT applicable for - " + userType);
		}
	}
/**
 * @Note validating the subtitle option and Playback rate optionin Landscape mode
 * @param searchKeyword4
 * @param userType
 * @throws Exception
 */
	public void subtitleAndPlaybackRateValidation(String searchKeyword4, String userType) throws Exception {
		extent.HeaderChildNode("Validation of Subtitle option and Playback Rate in Landscape");
		System.out.println("\nValidation of Subtitle option and Playback Rate in Landscape");
		waitTime(5000);
		click(AMDSearchScreen.objSearchIcon, "Search icon");
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword4 + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);

		click(AMDMoreMenu.objSearchResult(searchKeyword4), "Search result");
		waitTime(5000);
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			waitTime(5000);
			registerPopUpClose();
			completeProfilePopUpClose(userType);
			LoadingInProgress();
			adPlay();
			registerPopUpClose();
			completeProfilePopUpClose(userType);

		}
		if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		}
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
//		waitTime(2000);
//		scrubVideoToBegining(AMDPlayerScreen.objProgressBar);
//		waitTime(2000);
//		click(AMDPlayerScreen.objPlay, "Play icon");
//		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		click(AMDPlayerScreen.objFullscreenIcon, "Maximize Icon");
		waitTime(6000);
//		click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
//		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		
		//verifyElementPresent(AMDPlayerScreen.objNextIcon, "Next icon");
		//click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
		//click(AMDPlayerScreen.objThreeDotsOnPlayer, "Three dots option");
		
		verifyElementPresentAndClick(AMDPlayerScreen.objSubtitleOption, "Subtitle option");
		String defaultSelected = getText(AMDPlayerScreen.objSubtitleDefaultSelected);
		if (defaultSelected.contains("Off")) {
			logger.info("Subtitle is set to " + defaultSelected + " by default");
			extent.extentLoggerPass("Subtitle", "Subtitle is set to " + defaultSelected + " by default");

		} else {
			logger.error("Subtitle is not set to off by default");
			extent.extentLoggerFail("Subtitle", "Subtitle is not set to off by default");
		}

		verifyElementPresentAndClick(AMDPlayerScreen.objEnglishSubtitle, "English subtitle language");
		waitTime(2000);
		click(AMDPlayerScreen.objCloseIcon, "Close icon");

		extent.HeaderChildNode("Playback Rate Validation");
		// click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		// click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
		waitTime(3000);
		click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
		String time1 = getText(AMDPlayerScreen.objTimer);
		int startTime = timeToSec(time1);

		logger.info("Time captured before increasing the Playback rate : " + startTime + " sec");
		extentLoggerPass("Time", "Time captured before increasing the Playback rate : " + startTime + " sec");

		// -----> The following wait methods will is used to capture the elapsed Time
		// after waiting for 10Sec playback
		// waitTime(5000);
		// click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
		// click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		//click(AMDPlayerScreen.objThreeDotsOnPlayer, "Three dots option");
		//verifyElementPresentAndClick(AMDPlayerScreen.objSubtitleOption, "Subtitle option");
		click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPlaybackRate, "Playback Rate option");
		waitTime(2000);

		//SwipeInLandscapeMode("UP", 1);
		click(AMDPlayerScreen.objPlaybackRate2, "Playback Rate 2.0X option");
		waitTime(5000);
		click(AMDPlayerScreen.objCloseIcon, "Close icon");
		waitTime(6000);
		click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
		int playbackTimeinSec = startTime + 10;

		// click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
		// click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		String time2 = getText(AMDPlayerScreen.objTimer);
		int elapsedTime = timeToSec(time2);

		logger.info("Time captured after increasing the Playback rate : " + elapsedTime + " sec");
		extentLogger("Time", "Time captured after increasing the Playback rate : " + elapsedTime + " sec");

		if (elapsedTime != playbackTimeinSec) {
			logger.info("Content playback Rate is fast forwarded based on the speed set");
			extentLoggerPass("Elapsed time", "Content playback Rate is fast forwarded based on the speed set");
		} else {
			logger.info("Content playback Rate is NOT fast forwarded based on the speed set");
			extentLoggerFail("Elapsed time", "Content playback Rate is NOT fast forwarded based on the speed set");
		}
		// click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");

		// #######--- Below code cannot be executed due to the identifier missing for
		// scrubbing the progress bar
		/*
		 * seekVideoTillLast(AMDPlayerScreen.objProgressBar); if
		 * (!(userType.equalsIgnoreCase("SubscribedUser"))) {
		 * waitForElementDisplayed(AMDPlayerScreen.objGetPremiumPopUp, 30);
		 * verifyElementPresent(AMDPlayerScreen.objGetPremiumPopUp,
		 * "Get Premium popup along with Login CTA at the end of the non premium trailer content playback"
		 * ); Back(1); }
		 */
		Back(3);
	}

	/**
	 * Author : Sushma
	 * @Note Validation of Skip Intro CTA
	 * @param searchKeyword
	 * @throws Exception
	 */
	public void skipIntroValidationInPotraitMode(String searchKeyword, String usertype) throws Exception {
		extent.HeaderChildNode("Validation of Skip Intro CTA");
		System.out.println("\nValidation of Skip Intro CTA");
		waitTime(5000);
		click(AMDSearchScreen.objSearchBoxBar, "Search Box");
		clearField(AMDSearchScreen.objSearchBoxBar, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);

		click(AMDSearchScreen.objSearchResultContainsText(searchKeyword), "Search result");
		waitTime(5000);
		if (!(usertype.equalsIgnoreCase("SubscribedUser"))) {
			waitForAdToFinishInAmd();
		}
		registerPopUpClose();
		completeProfilePopUpClose(usertype);
		waitTime(6000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		waitTime(1000);
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		scrubVideoToBegining(AMDPlayerScreen.objProgressBar);
		waitTime(2000);
		click(AMDPlayerScreen.objPlay, "Play icon");
		waitTime(1000);
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		String time1 = getText(AMDPlayerScreen.objTimer);
		int startTime = timeToSec(time1);
		logger.info("Time before clicking on Skip Intro CTA : " + startTime);
		extentLogger("Time", "Time before clicking on Skip Intro CTA : " + startTime);
		click(AMDPlayerScreen.objPlayIcon, "Play icon");
		boolean var = verifyIsElementDisplayed(AMDPlayerScreen.objSkipIntro, "Skip Intro CTA");
		if (var == true) {
			waitTime(2000);
			click(AMDPlayerScreen.objSkipIntro, "Skip Intro CTA");
			waitTime(7000);
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			click(AMDPlayerScreen.objPauseIcon, "Pause icon");

			String time2 = getText(AMDPlayerScreen.objTimer);
			int elapsedTime = timeToSec(time2);

			logger.info("Time after clicking on Skip Intro CTA : " + elapsedTime + " sec");
			extentLogger("Time", "Time after clicking on Skip Intro CTA : " + elapsedTime + " sec");

			if (elapsedTime > startTime + 50) {
				logger.info("Introduction playback of the content is skipped");
				extentLoggerPass("Elapsed time", "Introduction playback of the content is skipped");
			} else {
				logger.error("Introduction playback of the content is not skipped");
				extentLoggerFail("Elapsed time", "Introduction playback of the content is not skipped");
			}
		} else {
			logger.info("Introduction playback of the content is already skipped");
			extentLogger("Elapsed time", "Introduction playback of the content is already skipped");
		}
		Back(1);
	}
/**
 * @Note Method to close the Complete profile popup
 * @param userType
 * @throws Exception
 */
	public void completeProfilePopUpClose(String userType) throws Exception {

		if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			waitTime(5000);
			if (verifyIsElementDisplayed(AMDPlayerScreen.objCompleteProfilePopUp)) {
				logger.info("Complete Profile Pop Up is displayed");
				extent.extentLogger("Complete Profile Pop Up", "Complete Profile Pop Up is displayed");
				Back(1);
			}
		}
	}

	/**
	 * Author : Manasa
	 * @Note Validating the Skip Intro CTA in landscape mode
	 * @param searchKeyword3
	 * @throws Exception
	 */

	public void skipIntroValidationInLandscapeMode(String searchKeyword3, String userType) throws Exception {
		extent.HeaderChildNode("Validation of Skip Intro CTA In Landscape Mode");
		System.out.println("Validation of Skip Intro CTA In Landscape Mode");
		waitTime(5000);
		click(AMDSearchScreen.objSearchIcon, "Search icon");
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword3 + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);

		click(AMDMoreMenu.objSearchResult(searchKeyword3), "Search result");
		waitTime(2000);
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			waitTime(5000);
			registerPopUpClose();
			completeProfilePopUpClose(userType);
			LoadingInProgress();
			adPlay();
		}
		if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		}
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		scrubVideoToBegining(AMDPlayerScreen.objProgressBar);
		waitTime(2000);
		click(AMDPlayerScreen.objPlay, "Play icon");
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		click(AMDPlayerScreen.objFullscreenIcon, "Maximize Icon");
		click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
		String time1 = getText(AMDPlayerScreen.objTimer);
		int startTime = timeToSec(time1);

		logger.info("Time before clicking on Skip Intro CTA : " + startTime + " sec");
		extentLogger("Time", "Time before clicking on Skip Intro CTA : " + startTime + " sec");

		boolean var = verifyIsElementDisplayed(AMDPlayerScreen.objSkipIntro, "Skip Intro CTA");
		if (var == true) {
			click(AMDPlayerScreen.objSkipIntro, "Skip Intro CTA");
			waitTime(3000);
			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
				click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
			}
			click(AMDPlayerScreen.objPlayIcon, "Play icon");

			String time2 = getText(AMDPlayerScreen.objTimer);
			int elapsedTime = timeToSec(time2);

			logger.info("Time after clicking on Skip Intro CTA : " + elapsedTime + " sec");
			extentLogger("Time", "Time after clicking on Skip Intro CTA : " + elapsedTime + " sec");

			if (elapsedTime > startTime) {
				logger.info("Introduction playback of the content is skipped");
				extentLoggerPass("Elapsed time", "Introduction playback of the content is skipped in Landscape");
			} else {
				logger.error("Introduction playback of the content is not skipped");
				extentLoggerFail("Elapsed time", "Introduction playback of the content is not skipped in Landscape");
			}
		} else {
			logger.info("Introduction playback of the content is already skipped in Landscape");
			extentLogger("Elapsed time", "Introduction playback of the content is already skipped in Landscape");
		}

		Back(1);
		waitTime(5000);

		if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		}
		verifyElementPresentAndClick(AMDPlayerScreen.objBackButton, "Back button");

		if (verifyIsElementDisplayed(AMDMoreMenu.objSearchResult(searchKeyword3))) {
			logger.info(
					"User is navigated back to the previous screen from where the content is accessed post tapping on Back button in Player screen");
			extentLoggerPass("Back button",
					"User is navigated back to the previous screen from where the content is accessed post tapping on Back button in Player screen");
		} else {
			logger.error(
					"User is not navigated back to the previous screen from where the content is accessed post tapping on Back button in Player screen");
			extentLoggerFail("Back button",
					"User is not navigated back to the previous screen from where the content is accessed post tapping on Back button in Player screen");
		}
		Back(1);
	}

	/**
	 * Author : Vinay Module : More screen Screen : My Subscription
	 * @Note Validating the My Subscription screen
	 */

	public void mySubscription(String userType) throws Exception {

		if (userType.equals("Guest")) {
			MySubscriptionGuestUser(userType);
		} else if (userType.equals("SubscribedUser")) {
			verifyMySubscription(userType);
		} else if (userType.equals("NonSubscribedUser")) {
			MySubscriptionValidations(userType);
		}
	}

	/**
	 * Author : Vinay Module : More screen
	 * @Note Validating the My Transactions screen
	 * @param userType
	 * @throws Exception
	 */
	public void myTransactions(String userType) throws Exception {
		if (userType.equals("Guest")) {
			MyTransactionsGuestUser(userType);
		} else if (userType.equals("NonSubscribedUser") | userType.equals("SubscribedUser")) {
			verifyMyTransactions(userType);
		}
	}

	/**
	 * Author : Sushma
	 * @Note Validating the functionality of Next Icon
	 * @param keyword
	 * @param userType
	 * @throws Exception
	 */
	public void NextIconAndReplayIcon(String keyword, String userType) throws Exception {
		extent.HeaderChildNode("Validation of NextIcon");
		waitTime(3000);
		// Back(1);
		verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More menu icon");
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings option");

		String elementAutoPlayToggleStatus = getText(AMDMoreMenu.objVideo_Autoply);
		if (elementAutoPlayToggleStatus.equalsIgnoreCase("ON")) {
			click(AMDMoreMenu.objVideo_Autoply, "Auto play");
		}
		Back(1);
		waitTime(3000);
		Back(1);
		waitTime(3000);

		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, keyword + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);

		verifyElementPresentAndClick(AMDSearchScreen.objFirstContentInSearchResult, "Search result");
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			registerPopUpClose();
			waitTime(5000);
		}

		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			if (verifyIsElementDisplayed(AMDPlayerScreen.objAd)) {
				System.out.println("ifff");
				verifyElementNotPresent(AMDPlayerScreen.objAd, 180);
			} else {
				System.out.println("elsee");
			}
		}

		waitForElementDisplayed(AMDPlayerScreen.objPlayer, 10);
		waitTime(5000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		String contentTitle1 = getText(AMDPlayerScreen.objContentTitle);
		verifyElementPresent(AMDPlayerScreen.objNextIcon, "Next icon");
		seekVideoTillLast(AMDPlayerScreen.objProgressBar);
		click(AMDPlayerScreen.objPlayIcon, "Play icon");

		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			verifyElementExist(AMDPlayerScreen.objGetPremiumPopUp, "Get Premium popup");
			Back(1);
		}

		waitTime(2000);
		verifyElementPresentAndClick(AMDPlayerScreen.objReplayIconOnPlayer, "Replay icon");
		waitTime(3000);
		String contentTitle2 = getText(AMDPlayerScreen.objContentTitle);
		if (contentTitle1.equalsIgnoreCase(contentTitle2)) {
			logger.info("same content playback is started again by tapping on Replay icon");
			extentLoggerPass("Replay icon", "same content playback is started again by tapping on Replay icon");
		} else {
			logger.info("same content playback is not started again by tapping on Replay icon");
			extentLoggerFail("Replay icon", "same content playback is not started again by tapping on Replay icon");
		}
	}
/**
 * Method will close the Register popup 
 * @throws Exception
 */
	public void registerPopUpClose() throws Exception {
		waitTime(6000);
		if (verifyIsElementDisplayed(AMDPlayerScreen.objRegisterPopUp1)) {
			logger.info("Register Pop Up is displayed");
			waitTime(8000);
			extent.extentLogger("Register Pop Up", "Register Pop Up is displayed");
			click(AMDGenericObjects.objPopUpDivider, "Register Popup");
//			Back(1);
		}
	}
/**
 * @Note Validting the UpNext rail in landscape mode
 * @param searchKeyword8
 * @throws Exception
 */
	public void upnextRailValidationInLandscapeMode(String searchKeyword8) throws Exception {
		extent.HeaderChildNode("Validation of Upnext Rail in Landscape Mode");
		System.out.println("\nValidation of Upnext Rail in Landscape Mode");
		waitTime(5000);

		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword8 + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);

		click(AMDMoreMenu.objSearchResult(searchKeyword8), "Search result");

		if (!pUserType.contains("SubscribedUser")) {
			waitTime(5000);
			LoadingInProgress();
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		}
		waitTime(1000);
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		click(AMDPlayerScreen.objFullscreenIcon, "Maximize Icon");
		waitTime(2000);
		swipeByElements(findElement(AMDPlayerScreen.objUpnextContentCard), findElement(AMDPlayerScreen.objPlayIcon));
		waitTime(3000);

		verifyElementPresent(AMDPlayerScreen.objUpnextRail, "Upnext Rail below Progress Bar");

		String upnextCardTitle = getText(AMDPlayerScreen.objUpnextContentCardTitle);
		logger.info("Upnext Card Title : " + upnextCardTitle);
		extent.extentLogger("Upnext", "Upnext Card Title : " + upnextCardTitle);

		verifyElementPresentAndClick(AMDPlayerScreen.objUpnextContentCard, "Upnext Content card");

		String contentTitle = getText(AMDPlayerScreen.objContentTitle);
		logger.info("Upnext Card Title : " + contentTitle);
		extent.extentLogger("Upnext", "Upnext Card Title : " + contentTitle);

		if (contentTitle.contains(upnextCardTitle)) {
			logger.info("Jumped to next content post tapping on Upnext Card");
			extent.extentLoggerPass("Upnext", "Jumped to next content post tapping on Upnext Card");
		} else {
			logger.error("Did not jump to next content post tapping on Upnext Card");
			extent.extentLoggerFail("Upnext", "Did not jump to next content post tapping on Upnext Card");
		}
		Back(2);
	}

	/**
	 * Author : Hitesh Module : BeforeTV
	 * @Note Method is to validate the Before Tray
	 * @throws Exception
	 */
	public void validateBeforeTV(String userType) throws Exception {
		System.out.println("Validating BeforeTv Tray");
		HeaderChildNode("Validating BeforeTv Tray");
		if (ResponseInstance.BeforeTV(userType, "Home")) {
			waitTime(5000);
			waitForElementDisplayed(AMDGenericObjects.objNoOfTrays, 150);
			findTray(AMDHomePage.objBeforeTVTray);
			click(AMDHomePage.objBeforeTVViewAllArraowIcon, "View All icon");
			waitTime(2000);
			if (verifyIsElementDisplayed(AMDHomePage.objViewAllScreen)) {
				logger.info("View All screen is displayed");
				extent.extentLoggerPass("ViewAll", "View All screen is displayed");
				Back(1);
//				findTray(AMDHomePage.objBeforeTVTray);
				click(AMDHomePage.objFirstContentOfBeforeTvTray, "First content");
				waitTime(2000);
				if (verifyIsElementDisplayed(AMDConsumptionScreen.objconfirmationPopUp)) {
					click(AMDConsumptionScreen.objOkBtn, "Ok button in add this device to yoour list pop up");
				}
//				verifyElementExist(AMDConsumptionScreen.objDownloadbtn, "Download icon");
				registerPopUpClose();
				if (verifyElementExist(AMDConsumptionScreen.objDownloadbtn, "Download icon")) {
					logger.info("Download CTA is displayed in Consumption screen");
					extent.extentLoggerPass("Download CTA", "Download CTA is displayed in Consumption screen");
				} else {
					logger.info("Download CTA is NOT displayed in Consumption screen");
					extent.extentLoggerFail("Download CTA", "Download CTA is NOT displayed in Consumption screen");
				}
				if (!userType.equals("SubscribedUser")) {
					if (verifyElementExist(AMDConsumptionScreen.objGetPremiumCTA, "Buy Plan CTA")) {
						logger.info("Buy Plan CTA is displayed in Consumption screen");
						extent.extentLoggerPass("Get Premium CTA", "Buy Plan CTA is displayed in Consumption screen");

						click(AMDConsumptionScreen.objGetPremiumCTA, "Buy Plan CTA");
						verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe Screen");
						waitTime(2000);
						if (userType.equals("Guest")) {
							Back(1);
							waitTime(3000);
							waitForElementDisplayed(AMDConsumptionScreen.objLoginCTA, 10);
							verifyElementPresentAndClick(AMDConsumptionScreen.objLoginCTA, "Login CTA");
							waitTime(2000);
							if (verifyIsElementDisplayed(AMDLoginScreen.objLoginOrRegisterPageTitle, "LoginPage")) {
								logger.info("Navigate to login/register screen");
								extent.extentLoggerPass("Login Screen", "Navigate to login/register screen");
							} else {
								logger.error("Not Navigate to login/register screen");
								extent.extentLoggerFail("Login screen", "Not Navigate to login/register screen");
							}
						}
					} else {
						logger.info("Buy Plan CTA is NOT displayed in Consumption screen");
						extent.extentLoggerFail("Get Premium CTA",
								"Buy Plan CTA is NOT displayed in Consumption screen");
					}
				}
			} else {
				logger.error("View All screen is not displayed");
				extent.extentLoggerFail("ViewAll", "View All screen is not displayed");
			}
		}
	}
/**
 * @Note method to find the tray 
 * @param byLocator
 */
	public void findTray(By byLocator) {
		for (int i = 0; i < 10; i++) {
			if (!(verifyIsElementDisplayed(byLocator))) {
				Swipe("UP", 1);
			} else {
				PartialSwipe("UP", 1);
				logger.info("Before Tv tray is located");
				extent.extentLoggerPass("Tray", "Before Tv tray is located");
				break;
			}
		}
	}
/**
 * @Note Method to verify if Ad is playingor not or completed
 */
	public void waitForAdToFinishInAmd() {
		waitTime(20000);
		if (verifyIsElementDisplayed(AMDPlayerScreen.objAd2)) {
			logger.info("Ad is playing");
			extentLogger("Ad", "Ad is playing");
			verifyElementNotPresent(AMDPlayerScreen.objAd2, 200);
			logger.info("Ad is completed");
			extentLogger("Ad", "Ad is completed");
		} else {
			logger.info("Ad is not played");
			extentLogger("Ad", "Ad is not played");
		}
	}

	/**
	 * Author : Bindu Module : club pack
	 * @Note Validating the clubpack upgragde functionality
	 */
	public void ClubPackValidation(String userType, String searchcontent, String SearchVODContent4) throws Exception {
		extent.HeaderChildNode("Club Pack Upgrade validation");
		System.out.println("\nClub Pack Upgrade validation");

		if (userType.equals("SubscribedUser")) {
			verifyElementExist(AMDClubPack.objupgradeIcon, "Upgrade button on left side of header section");
			verifyElementExist(AMDClubPack.objCrownIcon, "Upgrade button with Crown Icon");
			click(AMDClubPack.objupgradeIcon, "Upgrade Icon");
			waitTime(4000);
			if (verifyIsElementDisplayed(AMDClubPack.objBuySubscriptionScreen)) {
				logger.info("User is navigated to Buy scubscription screen");
				extent.extentLoggerPass("Buy Scubscription screen", "User is navigated to Buy subscription screen");
			} else {
				logger.error("User fails to navigate to Buy subscription screen");
				extent.extentLoggerFail("Buy Scubscription screen",
						"User fails to navigate to Buy subscription screen");
			}
			Back(1);
			waitTime(2000);
			if (verifyIsElementDisplayed(AMDClubPack.objUpgradeCTAOnCarousel)) {
				click(AMDClubPack.objUpgradeCTAOnCarousel, "Upgrade CTA on carousel Banner");
			} else {
				waitForElementDisplayed(AMDClubPack.objUpgradeCTAOnCarousel, 3);
				click(AMDClubPack.objUpgradeCTAOnCarousel, "Upgrade CTA on carousel Banner");
			}
			waitTime(3000);
			if (verifyIsElementDisplayed(AMDClubPack.objBuySubscriptionScreen)) {
				logger.info("User is navigated to Buy scubscription screen on tapping Upgrade CTA on carousel banner");
				extent.extentLoggerPass("Buy Scubscription screen",
						"User is navigated to Buy scubscription screen on tapping Upgrade CTA on carousel banner");
			} else {
				logger.error(
						"User fails to navigate to Buy subscription screen on tapping Upgrade CTA on carousel banner");
				extent.extentLoggerFail("Buy Scubscription screen",
						"User fails to navigate to Buy subscription screen on tapping Upgrade CTA on carousel banner");
			}
			Back(1);
			verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
			waitTime(2000);
			verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBar, searchcontent, "Search bar");
			waitTime(2000);
			click(AMDSearchScreen.objFirstContentInSearchResult, "Searched result");
			waitTime(5000);
			verifyElementExist(AMDClubPack.objUpgradeCTABelowPlayer, "Upgrade CTA below the player");
			if (verifyIsElementDisplayed(AMDClubPack.objYouneedpremiumtextonPlayer)) {
				String text = getText(AMDClubPack.objYouneedpremiumtextonPlayer);
				System.out.println(text);
				logger.info(text + " is displayed on player with Upgrade CTA");
				extent.extentLoggerPass("Consumption screen", text + " is displayed on player with Upgrade CTA");
			} else {
				logger.error(getText(AMDClubPack.objYouneedpremiumtextonPlayer)
						+ " is NOT displayed on player with Upgrade CTA");
				extent.extentLoggerFail("Consumption screen", getText(AMDClubPack.objYouneedpremiumtextonPlayer)
						+ " is NOT displayed on player with Upgrade CTA");
			}
			click(AMDClubPack.objUpgradeCTABelowPlayer, "Upgrade CTA below the player");
			validateUIOfUpgradePopup();
			Back(2);
			click(AMDHomePage.HomeIcon, "Home Icon");
			upgradepopupForPremiumcontentWithTrailer(SearchVODContent4);
		} else {
			logger.info("Club Upgrade is not applicable for " + userType);
			extent.extentLogger("Club Upgrade", "Club Upgrade is not applicable for " + userType);
		}
	}
/**
 * method to Login with Club user
 * @throws Exception
 */
	public void loginWithClubUser() throws Exception {
		waitTime(2000);
		verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
		click(AMDMoreMenu.objProfileHeader, "profile header");
		String Username = getParameterFromXML("ClubUserName");
		String Password = getParameterFromXML("ClubPassword");
		verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
		type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
		verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
		verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
		type(AMDLoginScreen.objPasswordField, Password, "Password field");
		hideKeyboard();
		verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
		waitTime(3000);
		verifyElementPresentAndClick(AMDHomePage.objHome, "Home tab");
	}
/**
 * Validating the UI of Upgrade popup
 * @throws Exception
 */
	public void validateUIOfUpgradePopup() throws Exception {
		extent.HeaderChildNode("Validating Upgrade popup");
		System.out.println("Validating Upgrade popup ");
		if (verifyIsElementDisplayed(AMDClubPack.objUpgradepopuptitle)) {
			String title = getText(AMDClubPack.objUpgradepopuptitle);
			logger.info("Title : " + title + " is displayed");
			extent.extentLoggerPass("Upgrade popup", "Title : " + title + " is displayed");
		} else {
			logger.error("Title : " + getText(AMDClubPack.objUpgradepopuptitle) + " is NOT displayed");
			extent.extentLoggerFail("Upgrade pop up",
					"Title : " + getText(AMDClubPack.objUpgradepopuptitle) + " is NOT displayed");
		}
		String Plan1 = getText(AMDClubPack.objplan1);
		System.out.println(Plan1);
		logger.info("Plan 1 " + Plan1 + " is displayed");
		extent.extentLogger("Upgrade popup", "Plan 1 " + Plan1 + " is displayed");

		String Plan2 = getText(AMDClubPack.objplan2);
		System.out.println(Plan2);
		logger.info("Plan 2 " + Plan2 + " is displayed");
		extent.extentLogger("Upgrade popup", "Plan 2 " + Plan2 + " is displayed");

		if (findElement(AMDClubPack.objplan2).isEnabled()) {
			logger.info(Plan2 + " is highlighted by default");
			extent.extentLoggerPass("Upgrade popup", Plan2 + " is highlighted by default");
		} else {
			logger.error(Plan2 + " is NOT highlighted by default");
			extent.extentLoggerFail("Upgrade popup", Plan2 + " is NOT highlighted by default");
		}

		verifyElementExist(AMDClubPack.objProceedbutton, "Proceed button");
		Swipe("UP", 2);
		verifyElementExist(AMDClubPack.objPremiumPlanDescinUpgradepopup, "Premium pack note");
		verifyElementExist(AMDClubPack.objClubpackDescinupgradepopup, "Club pack note");
		swipeUntilFindElement(AMDClubPack.objTermsofuseinUpgradepopup, "UP");
		verifyElementExist(AMDClubPack.objTermsofuseinUpgradepopup, "Terms of Use");
		verifyElementExist(AMDClubPack.objprivacypolicyinUpgradePopup, "Privacy Policy");
	}
/**
 * Validation of Club pack scenarios
 * @param userType
 * @param SearchVODContent
 * @param ClubContent
 * @throws Exception
 */
	public void clubPack(String userType, String SearchVODContent, String ClubContent) throws Exception {
		if (userType.equals("Guest") | userType.equals("NonSubscribedUser")) {
			verifyClubPack(userType, SearchVODContent);
			verifyClubIconOnAllSeaerchScreenTabs(ClubContent, SearchVODContent);
			verifyAllAccessAndClubPacks();
		} else if (userType.equals("SubscribedUser")) {
			verifyClubPackAccountInfoScreen(userType);
		}
	}
/**
 * @Note Verifying the all access packs and club packs
 * @throws Exception
 */
	public void verifyAllAccessAndClubPacks() throws Exception {
		extent.HeaderChildNode("verify Two kinds of packs offered for the user");
		System.out.println("\nVerify Two kinds of packs offreed for the user");
		verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More Menu");
		waitTime(2000);
		verifyElementPresentAndClick(AMDMoreMenu.objBuySubscription, "Buy Subscription option");
		waitTime(6000);
		Swipe("UP", 1);
		if (verifyElementPresent(AMDClubPage.objPremiumTab, "Premium tab")) {
			extent.extentLoggerPass("verify Premium Tab", "Premium Tab is displayed under Buy Subscription Screen");
			logger.info("Premium Tab is displayed under Buy Subscription Screen");
		} else {
			extent.extentLoggerFail("verify Premium Tab", "Premium Tab is not displayed under Buy Subscription Screen");
			logger.info("Premium Tab is not displayed under Buy Subscription Screen");
		}

		if (verifyIsElementDisplayed(AMDClubPage.objAllAccessPack)) {
			String PremiumPlan = getText(AMDClubPage.objAllAccessPack);
			logger.info(PremiumPlan + " : Premium Plan is displayed in Premium Tab");
			extent.extentLoggerPass("Premium Plan", PremiumPlan + " : Premium Plan is displayed in Premium Tab");
		} else {
			logger.info("Premium Plan is not displayed in Premium Tab");
			extent.extentLoggerFail("Premium Plan", "Premium Plan is not displayed in Premium Tab");
		}

		click(AMDClubPage.objClubTab, "Club tab");
		if (verifyElementPresent(AMDClubPage.objClubTab, "Club tab")) {
			extent.extentLoggerPass("verify Club Tab", "Club Tab is displayed under Buy Subscription Screen");
			logger.info("Club Tab is displayed under Buy Subscription Screen");
		} else {
			extent.extentLoggerFail("verify club Tab", "Club Tab is not displayed under Buy Subscription Screen");
			logger.info("Club Tab is not displayed under Buy Subscription Screen");
		}

		if (verifyIsElementDisplayed(AMDClubPage.objClubPack)) {
			String ClubPack = getText(AMDClubPage.objClubPack);
			logger.info(ClubPack + " : Club Plan is displayed in Club Tab");
			extent.extentLoggerPass("Club Plan", ClubPack + " : Club Plan is displayed in Club Tab");
		} else {
			extent.extentLoggerFail("Club Plan", "ClubPlan is not displayed in Club Tab");
			logger.info("ClubPlan is not displayed in Club Tab");
		}
		Back(1);
		verifyElementPresentAndClick(AMDSearchScreen.objHomeOption, "Bottom bar home option");
	}
/**
 * @Note Verifying club iconcontent card
 * @param userType
 * @param SearchVODContent
 * @throws Exception
 */
	public void verifyClubPack(String userType, String SearchVODContent) throws Exception {
		extent.HeaderChildNode("Verify club icon Content Card");
		System.out.println("\nVerify club icon Content Card");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		waitTime(2000);
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, SearchVODContent + "\n", "Search bar");
		hideKeyboard();
		waitTime(2000);

		boolean SearchedContent = verifyIsElementDisplayed(AMDGenericObjects.objSearchcontentTitle("Ammana Mane"));
		if (SearchedContent) {
			String Content = getText(AMDGenericObjects.objSearchcontentTitle("Ammana Mane"));
			logger.info(Content);
			boolean clubIcon = verifyIsElementDisplayed(AMDClubPage.objClubIcon);
			if (clubIcon) {
				extent.extentLoggerPass("Club Icon", "Club icon is displayed on club VOD Content card");
				logger.info("Club icon is displayed on club VOD Content card");
			} else {
				extent.extentLoggerFail("Club Icon", "Club icon is not displayed on club VOD Content card");
				logger.info("Club icon is not displayed on club VOD Content card");
			}
		}
		click(AMDClubPage.objClubIcon, "Club Content");
		waitTime(2000);
		if (userType.equalsIgnoreCase("Guest")) {

			verifyElementPresentAndClick(AMDNewsPage.objDownlaodOption, "download Option");
			String Loginscreenheader = getText(AMDGenericObjects.objgetScreenTitle);
			if (Loginscreenheader.equals("Login/Register")) {
				extent.extentLoggerPass("Download Option",
						userType + " user is navigated to " + Loginscreenheader + " screen on tapping download option");
				logger.info(
						userType + " user is navigated to " + Loginscreenheader + " screen on tapping Download Option");
			} else {
				extent.extentLoggerFail("Download Option",
						"Failed to navigate into respective screen after clicking Download Option");
				logger.info("Failed to navigate into respective screen after clicking Download Option");
			}
			waitTime(4000);
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objBackBtn, "Back Button");

			swipeUntilFindElement(AMDNewsPage.objWatchlistIcon, "DOWN");
			Back(1);
			click(AMDClubPage.objClubIcon, "Club Content");
			waitTime(2000);
			verifyElementPresentAndClick(AMDNewsPage.objWatchlistIcon, "WatchList Option");

			String header = getText(AMDGenericObjects.objgetScreenTitle);
			if (header.equals("Login/Register")) {
				extent.extentLoggerPass("Watchlist",
						userType + " user is navigated to " + header + " screen on tapping Watchlist option");
				logger.info(userType + " user is navigated to " + header + " screen on tapping Watchlist option");
			} else {
				extent.extentLoggerFail("Watchlist",
						"Failed to navigate into respective screen after clicking Watchlist");
				logger.info("Failed to navigate into respective screen after clicking Watchlist");
			}
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			verifyElementPresentAndClick(AMDNewsPage.objDownlaodOption, "download Option");
			waitTime(5000);
			boolean DownloadVideoQualityPopup = verifyIsElementDisplayed(AMDClubPage.objDownloadVideoQualityPopup);
			if (DownloadVideoQualityPopup) {
				String DownloadQualityPopup = getText(AMDClubPage.objDownloadVideoQualityPopup);
				logger.info(userType + " user is navigated to " + DownloadQualityPopup
						+ " screen on tapping Download Option");
				extent.extentLoggerPass("Download Option", userType + " user is navigated to " + DownloadQualityPopup
						+ " screen on tapping download option");
			} else {
				extent.extentLoggerFail("Download Option",
						"Failed to navigate into respective screen after clicking Download Option");
				logger.info("Failed to navigate into respective screen after clicking Download Option");
			}
		}
		Back(3);
	}
/**
 * @Note Verifying the club icon on All search screen tabs
 * @param ClubContent
 * @param SearchVODContent
 * @throws Exception
 */
	public void verifyClubIconOnAllSeaerchScreenTabs(String ClubContent, String SearchVODContent) throws Exception {
		extent.HeaderChildNode("verify Club Icon on all search screen tabs");
		System.out.println("\nVerify Club Icon on all search screen tabs");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		waitTime(2000);
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, ClubContent + "\n", "Search bar");
		hideKeyboard();
		waitTime(10000);

		boolean AllTab = verifyIsElementDisplayed(AMDSearchScreen.objAllTab);
		if (AllTab) {
			boolean SearchResults = verifyIsElementDisplayed(AMDSearchScreen.objSearchedClubContent);
			if (SearchResults) {
				String SearchedContent = getText(AMDSearchScreen.objSearchedClubContent);

				boolean clubIcon = verifyIsElementDisplayed(AMDClubPage.objClubIcon);
				if (clubIcon) {
					extent.extentLoggerPass("Club Icon",
							"Club icon is displayed in All Tab for the Searched content : " + SearchedContent + " ");
					logger.info("Club icon is displayed in All Tab for the Searched content : " + SearchedContent + "");
				} else {
					extent.extentLoggerFail("Club Icon",
							"Club icon is not displayed in All Tab for the Searched content");
					logger.info("Club icon is not displayed in All Tab for the Searched content");
				}
			}
		}
		boolean EpisodesTab = verifyIsElementDisplayed(AMDSearchScreen.objEpsiodesTab);
		if (EpisodesTab) {
			click(AMDSearchScreen.objEpsiodesTab, "Episodes Tab");
			boolean SearchResults = verifyIsElementDisplayed(AMDSearchScreen.objSearchedClubContent);
			if (SearchResults) {
				String SearchedContent = getText(AMDSearchScreen.objSearchedClubContent);

				boolean clubIcon = verifyIsElementDisplayed(AMDClubPage.objClubIcon);
				if (clubIcon) {
					extent.extentLoggerPass("Club Icon",
							"Club icon is displayed in Episodes Tab for the Searched content : " + SearchedContent
									+ " ");
					logger.info("Club icon is displayed in Episodes Tab for the Searched content : " + SearchedContent
							+ " ");
				} else {
					extent.extentLoggerFail("Club Icon",
							"Club icon is not displayed in Episodes Tab for the Searched content");
					logger.info("Club icon is not displayed in Episodes Tab for the Searched content");
				}

			}
		}

		boolean showsTab = verifyIsElementDisplayed(AMDSearchScreen.objSearchShowsTab);
		if (showsTab) {
			click(AMDSearchScreen.objSearchShowsTab, "Shows Tab");
			boolean SearchResults = verifyIsElementDisplayed(AMDSearchScreen.objSearchedClubContent);
			if (SearchResults) {
				String SearchedContent = getText(AMDSearchScreen.objSearchedClubContent);

				boolean clubIcon = verifyIsElementDisplayed(AMDClubPage.objClubIcon);
				if (clubIcon) {
					extent.extentLoggerPass("Club Icon",
							"Club icon is displayed in Shows Tab for the Searched content : " + SearchedContent + " ");
					logger.info(
							"Club icon is displayed in Shows Tab for the Searched content : " + SearchedContent + " ");
				} else {
					extent.extentLoggerFail("Club Icon",
							"Club icon is not displayed in Shows Tab for the Searched content");
					logger.info("Club icon is not displayed in Shows Tab for the Searched content");
				}
			}
		}
		verifyElementPresentAndClick(AMDSearchScreen.objClearSearch, "Clear Search Field");
		type(AMDSearchScreen.objSearchBoxBar, SearchVODContent + "\n", "Search bar");
		hideKeyboard();
		boolean MoviesTab = verifyIsElementDisplayed(AMDSearchScreen.objSearchMoviesTab);
		if (MoviesTab) {
			click(AMDSearchScreen.objSearchMoviesTab, "Movies Tab");
			boolean SearchResults = verifyIsElementDisplayed(AMDSearchScreen.objSearchedClubContent);
			if (SearchResults) {
				String SearchedContent = getText(AMDSearchScreen.objSearchedClubContent);

				boolean clubIcon = verifyIsElementDisplayed(AMDClubPage.objClubIcon);
				if (clubIcon) {
					extent.extentLoggerPass("Club Icon",
							"Club icon is displayed in Movies Tab for the Searched content : " + SearchedContent + " ");
					logger.info(
							"Club icon is displayed in Movies Tab for the Searched content : " + SearchedContent + " ");
				} else {
					extent.extentLoggerFail("Club Icon",
							"Club icon is not displayed in Movies Tab for the Searched content");
					logger.info("Club icon is not displayed in Movies Tab for the Searched content");
				}
			}
		}
		verifyElementPresentAndClick(AMDSearchScreen.objClearSearch, "Clear Search Field");
	}
/**
 * @Note Verifying the Two different kinds of packs
 * @throws Exception
 */
	public void verifyTwokindsOfPacks() throws Exception {
		extent.HeaderChildNode("verify Two kinds of packs offered for the user");
		System.out.println("\nVerify Two kinds of packs offreed for the user");
		verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More Menu");
		waitTime(2000);
		verifyElementPresentAndClick(AMDMoreMenu.objBuySubscription, "Buy Subscription option");
		waitTime(6000);
		Swipe("UP", 1);
		if (verifyElementPresent(AMDClubPage.objPremiumTab, "Premium tab")) {
			extent.extentLoggerPass("verify Premium Tab", "Premium Tab is displayed under Buy Subscription Screen");
			logger.info("Premium Tab is displayed under Buy Subscription Screen");
		} else {
			extent.extentLoggerFail("verify Premium Tab", "Premium Tab is not displayed under Buy Subscription Screen");
			logger.info("Premium Tab is not displayed under Buy Subscription Screen");
		}

		if (verifyIsElementDisplayed(AMDClubPage.objAllAccessPack)) {
			String PremiumPlan = getText(AMDClubPage.objAllAccessPack);
			logger.info(PremiumPlan + " : Premium Plan is displayed in Premium Tab");
			extent.extentLoggerPass("Premium Plan", PremiumPlan + " : Premium Plan is displayed in Premium Tab");
		} else {
			logger.info("Premium Plan is not displayed in Premium Tab");
			extent.extentLoggerFail("Premium Plan", "Premium Plan is not displayed in Premium Tab");
		}

		click(AMDClubPage.objClubTab, "Club tab");
		if (verifyElementPresent(AMDClubPage.objClubTab, "Club tab")) {
			extent.extentLoggerPass("verify Club Tab", "Club Tab is displayed under Buy Subscription Screen");
			logger.info("Club Tab is displayed under Buy Subscription Screen");
		} else {
			extent.extentLoggerFail("verify club Tab", "Club Tab is not displayed under Buy Subscription Screen");
			logger.info("Club Tab is not displayed under Buy Subscription Screen");
		}

		if (verifyIsElementDisplayed(AMDClubPage.objClubPack)) {
			String ClubPack = getText(AMDClubPage.objClubPack);
			logger.info(ClubPack + " : Club Plan is displayed in Club Tab");
			extent.extentLoggerPass("Club Plan", ClubPack + " : Club Plan is displayed in Club Tab");
		} else {
			extent.extentLoggerFail("Club Plan", "ClubPlan is not displayed in Club Tab");
			logger.info("ClubPlan is not displayed in Club Tab");
		}
		Back(1);
	}
/**
 * @Note Verifying the account info screen for Club pack
 * @param userType
 * @throws Exception
 */
	public void verifyClubPackAccountInfoScreen(String userType) throws Exception {
		extent.HeaderChildNode("verify Account Info screen for Club Pack");
		System.out.println("\nVerify Account Info screen for Club Pack");

		click(AMDMoreMenu.objMoreMenuIcon, "More tab screen");
		// ###### Kushal #####
		int getWaiverAmt = GetWaiverAmountForClubPackUpdgrade();

		verifyElementPresentAndClick(AMDMoreMenu.objBuySubscription, "Buy Subscription");
		waitTime(3000);
		swipeUntilFindElement(AMDClubPage.objContinueButton, "UP");
		verifyElementPresentAndClick(AMDClubPage.objContinueButton, "Continue Button");

		waitTime(5000);
		Swipe("DOWN", 1);
		String[] getPlanPrice = getText(AMDSubscibeScreen.objPlanPrice).replace("INR ", "").trim().split("\\.");
		String getTotalPayable = getText(AMDSubscibeScreen.objTotalPayable).replace("INR ", "").trim();

		int newPlanPrice = Integer.parseInt(getPlanPrice[0]);
		int TotalPayableAmount = (newPlanPrice - getWaiverAmt);
		int PayableAmountUI = Integer.parseInt(getTotalPayable);

		if (PayableAmountUI == TotalPayableAmount) {
			logger.info("Calculated Total Payable amount and displayed amount in UI is correct with Waiver of INR "
					+ getWaiverAmt);
			extent.extentLoggerPass("Total Payable Amount",
					"Calculated Total Payable amount and displayed amount in UI is correct with Waiver of INR "
							+ getWaiverAmt);
		} else {
			logger.error("Calculated Total Payable amount " + TotalPayableAmount + " and displayed amount "
					+ PayableAmountUI + "in UI is incorrect with Waiver of INR " + getWaiverAmt);
			extent.extentLoggerFail("Total Payable Amount",
					"Calculated Total Payable amount " + TotalPayableAmount + " and displayed amount " + PayableAmountUI
							+ "in UI is incorrect with Waiver of INR " + getWaiverAmt);
		}

		waitTime(2000);
		Swipe("DOWN", 2);
		verifyElementPresent(AMDLoginScreen.objBackBtn, "Back Button in Account Info Screen");
		verifyElementPresent(AMDClubPage.objSelectedPackSection, "Selected pack Section in Account Info Screen");
		PartialSwipe("UP", 1);
		verifyElementPresent(AMDClubPage.objAccountInfoSection, "Account Info Section in Account Info Screen");
		PartialSwipe("UP", 1);
		verifyElementPresent(AMDClubPage.objPaymentOptionsSection, "Payment Option Section in Account Info Screen");
		// PartialSwipe("UP",1);
		verifyElementPresent(AMDClubPage.objAccountInfoScreenContinueButton, "Continue Button in Account Info Screen");

		extent.HeaderChildNode("verify Selected Pack section Info for Club Pack");
		System.out.println("\nVerify Selected Pack section Info for Club Pack");
		// swipeUntilFindElement(AMDClubPage.objSelectedPackName, "DOWN");
		Swipe("DOWN", 2);
		if (verifyElementDisplayed(AMDClubPage.objSelectedPackName)) {
			String SelectedPackName = getText(AMDClubPage.objSelectedPackName);
			extent.extentLoggerPass("Verify Selected Pack Name",
					"Selected Pack Name \"" + SelectedPackName + "\" : is displayed in Account Info");
			logger.info("Selected Pack Name \"" + SelectedPackName + "\" : is displayed in Account Info");
		} else {
			extent.extentLoggerFail("Verify Selected Pack Name",
					"Selected Pack name is not displayed in Account Info screen");
			logger.info("Selected Pack name is not displayed in Account Info screen");
		}

		if (verifyElementDisplayed(AMDClubPage.objSelectedPackName)) {
			String SelectedPackValidity = getText(AMDClubPage.objSelectedPackValidity);
			extent.extentLoggerPass("Verify Selected Pack validity",
					"Selected Pack validity \"" + SelectedPackValidity + "\" : is displayed in Account Info");
			logger.info("Selected Pack validity \"" + SelectedPackValidity + "\" : is displayed in Account Info");
		} else {
			extent.extentLoggerFail("Verify Selected Pack validity",
					"Selected Pack validity is not displayed in Account Info screen");
			logger.info("Selected Pack validity is not displayed in Account Info screen");
		}

		if (verifyElementDisplayed(AMDClubPage.objPlanPriceINR)) {
			String SelectedPlanPriceINR = getText(AMDClubPage.objPlanPriceINR);
			extent.extentLoggerPass("Verify Selected Pack Price INR",
					"Selected Plan Price INR \"" + SelectedPlanPriceINR + "\" : is displayed in Account Info");
			logger.info("Selected Pack Price INR \"" + SelectedPlanPriceINR + "\" : is displayed in Account Info");
		} else {
			extent.extentLoggerFail("Verify Selected Pack Price INR",
					"Selected Plan Price INR is not displayed in Account Info screen");
			logger.info("Selected Plan Price INR is not displayed in Account Info screen");
		}

		if (verifyElementDisplayed(AMDClubPage.objDiscountPlanINR)) {
			String DiscountPlanINR = getText(AMDClubPage.objDiscountPlanINR);
			extent.extentLoggerPass("Verify Discount INR",
					"Discount INR \"" + DiscountPlanINR + "\" : is displayed in Account Info");
			logger.info("Discount INR \"" + DiscountPlanINR + "\" : is displayed in Account Info");
		} else {
			extent.extentLoggerFail("Verify Discount INR", "Discount INR is not displayed in Account Info screen");
			logger.info("Discount INR is not displayed in Account Info screen");
		}

		if (verifyElementDisplayed(AMDClubPage.objRoundOffValue)) {
			String RoundOffValue = getText(AMDClubPage.objRoundOffValue);
			extent.extentLoggerPass("Verify Round Off",
					"Round Off \"" + RoundOffValue + "\" : is displayed in Account Info");
			logger.info("Round Off \"" + RoundOffValue + "\" : is displayed in Account Info");
		} else {
			extent.extentLoggerFail("Verify Round Off", "Discount INR is not displayed in Account Info screen");
			logger.info("Round Off is not displayed in Account Info screen");
		}

		if (verifyElementDisplayed(AMDClubPage.objRevisedBillingSection)) {
			String RevisiedBillingCycleInfo = getText(AMDClubPage.objRevisedBillingSection);
			extent.extentLoggerPass("Verify Revisied Billing Cycle Info",
					"Revisied Billing Cycle Info \"" + RevisiedBillingCycleInfo + "\" : is displayed in Account Info");
			logger.info(
					"Revisied Billing Cycle Info \"" + RevisiedBillingCycleInfo + "\" : is displayed in Account Info");
		} else {
			extent.extentLoggerFail("Verify Revisied Billing Cycle Info",
					"Revisied Billing Cycle Info is not displayed in Account Info screen");
			logger.info("Revisied Billing Cycle Info is not displayed in Account Info screen");
		}

		if (verifyElementDisplayed(AMDClubPage.objPostDiscountInINR)) {
			String PostDiscountInINR = getText(AMDClubPage.objPostDiscountInINR);
			extent.extentLoggerPass("Verify Post Discount In INR",
					"Post Discount In INR \"" + PostDiscountInINR + "\" : is displayed in Account Info");
			logger.info("Post Discount In INR \"" + PostDiscountInINR + "\" : is displayed in Account Info");
		} else {
			extent.extentLoggerFail("Verify Post Discount In INR",
					"Post Discount INR is not displayed in Account Info screen");
			logger.info("Post Discount INR is not displayed in Account Info screen");
		}

		if (verifyElementDisplayed(AMDClubPage.objEmailIdSection)) {
			String EmailID = getText(AMDClubPage.objEmailIdSection);
			extent.extentLoggerPass("Verify EmailID", "Email ID \"" + EmailID + "\" : is displayed in Account Info");
			logger.info("Email ID \"" + EmailID + "\" : is displayed in Account Info");
		} else {
			extent.extentLoggerFail("Verify EmailID", "Post Discount INR is not displayed in Account Info screen");
			logger.info("Email ID is not displayed in Account Info screen");
		}
		verifyPaymentOptions(userType);
	}
/**
 * @Note verifying the Payment options
 * @param userType
 * @throws Exception
 */
	public void verifyPaymentOptions(String userType) throws Exception {
		extent.HeaderChildNode(
				"verify continue button highlighted on selecting any payment option in Account Info Screen");
		System.out.println(
				"\nVerify continue button highlighted on selecting any payment option in Account Info Screene");
		swipeUntilFindElement(AMDClubPage.objSelectPaymentOption, "UP");
		verifyElementPresentAndClick(AMDClubPage.objSelectPaymentOption, "Payment option");
		swipeUntilFindElement(AMDClubPage.objAccountInfoScreenContinueButton, "UP");
		boolean ContinueButton = verifyIsElementDisplayed(AMDClubPage.objAccountInfoScreenContinueButton);
		if (ContinueButton) {
			waitTime(2000);
			if (getAttributValue("clickable", AMDClubPage.objAccountInfoScreenContinueButton).equals("true")) {
				logger.info("Continue button is highlighted on selecting Payment Option");
				extent.extentLoggerPass("Continue button",
						"Continue button is highlighted on selecting Payment Option");
			} else {
				logger.info("Continue button is not highlighted on selecting Payment Option");
				extent.extentLoggerFail("Continue button",
						"Continue button is not highlighted on selecting Payment Option");
			}
			Back(1);
			waitTime(2000);
			Back(2);
			verifyElementPresentAndClick(AMDSearchScreen.objHomeOption, "Bottom bar home option");
		}
	}
/**
 * Login functionality
 * @throws Exception
 */
	public void zeeApplicasterLoginForOnboarding() throws Exception {
		extent.HeaderChildNode("Login Type Functionality");
		String pUserType = getParameterFromXML("userType");

		extent.extentLogger("Login Type", "Login Type : " + pUserType);

		switch (pUserType) {
		case "Guest":
			extent.HeaderChildNode("Guest User");
			extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");
			waitTime(1000);
			break;

		case "NonSubscribedUser":
			navigateToIntroScreen_DisplaylangScreen();
			extent.HeaderChildNode("Login as NonSubscribed User");

			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			// Verify user is navigated to Login/Register screen post tapping Login/Register
			// link
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;

		case "SubscribedUser":
			navigateToIntroScreen_DisplaylangScreen();
			extent.HeaderChildNode("Login as Subscribed User");

			String SubscribedUsername = getParameterFromXML("SubscribedUserName");
			String SubscribedPassword = getParameterFromXML("SubscribedPassword");
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			// Verify user is navigated to Login/Register screen post tapping Login/Register

			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SubscribedUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;
		}
	}
/**
 * Verifying that user is naviagted to consumption screen post tapping any News contents
 * @param userType
 * @throws Exception
 */
	public void verifyNonSVODConsumptionScreen(String userType) throws Exception {
		extent.HeaderChildNode("verify user navigated to Consumption Screen post tapping on any News Content");
		System.out.println("\nVerify user navigated to Consumption Screen post tapping on any News Content");
		selectTopNavigationTab("News");
		waitTime(6000);

		findTrayInScreen(AMDNewsPage.KannadaNewsTray);
		click(AMDNewsPage.KannadaNewsTray, "Kannada News Tray");
		waitTime(2000);

		String Cardtitle = getText(AMDNewsPage.objMetadataofthecard);
		logger.info(Cardtitle);
		click(AMDNewsPage.objMetadataofthecard, "News Card");
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		waitForElementDisplayed(AMDPlayerScreen.objPause, 20);
		click(AMDPlayerScreen.objPause, "Pause icon");

		String ConsumptionScreenTitle = getText(AMDNewsPage.objContentTitle);
		logger.info(ConsumptionScreenTitle);
		if (Cardtitle.equalsIgnoreCase(ConsumptionScreenTitle)) {
			logger.info("User navigated to correct consumption screen tapping on News Content card");
			extent.extentLoggerPass("Consumption Screen",
					"User navigated to correct consumption screen tapping on News Content card");
		} else {
			logger.info("User not navigated to correct consumption screen tapping on News Content card");
			extent.extentLoggerFail("Consumption Screen",
					"User not navigated to correct consumption screen tapping on News Content card");
		}

		waitTime(2000);
		extent.HeaderChildNode(
				"Verify Mandatory Registraion popup Should not be displayed when user play any news content");
		System.out.println(
				"\nVerify Mandatory Registraion popup Should not be displayed when user play any news content");

		boolean MandatoryRegisprationPopup = (!(verifyIsElementDisplayed(AMDNewsPage.objRegisterPopup)));
		if (MandatoryRegisprationPopup) {
			logger.info("Mandatory Registration popup is not displyed when user play any news content");
			extent.extentLoggerPass("Consumption Screen",
					"Mandatory Registration popup is not displyed when user play any news content");
		} else {

			logger.info("Mandatory Registration popup is displyed when user play any news content");
			extent.extentLoggerFail("Consumption Screen",
					"Mandatory Registration popup is displyed when user play any news content");
		}
		verifyMetaDataOfConsumptionScreen();
		verifyShareOption();

		extent.HeaderChildNode("Verify that channel description on tapping Expand Button");
		System.out.println("\nVerify that channel description on tapping Expand Button");
		boolean desc = verifyIsElementDisplayed(AMDConsumptionScreen.objExpandDesc);
		if (desc) {
			extent.extentLoggerPass("Expand Description", "Expand button to expand  description is displayed");
			click(AMDConsumptionScreen.objExpandDesc, "Expand Description button");
			String description = getText(AMDConsumptionScreen.objContentDesc);
			extent.extentLoggerPass("Description", "The content description is :\n" + description);
			logger.info("The content description is :\n" + description);
			click(AMDConsumptionScreen.objExpandDesc, "Expand Description button");
		} else {
			extent.extentLoggerFail("Expand button", "Expand button is not displayed");
			logger.info("Expand button is not displayed");
		}

		extent.HeaderChildNode("Download CTA Should not be displayed for the News/LiveTV Content");
		System.out.println("\nDownload CTA Should not be displayed for the News/LiveTV Content");
		boolean DownloadIcon = (!verifyIsElementDisplayed(AMDNewsPage.objDownlaodOption));
		if (DownloadIcon) {
			logger.info("Download CTA is unavailable for News Content");
			extent.extentLoggerPass("Download CTA", "Download CTA is unavailable for News Content");
		} else {
			logger.info("Download CTA is displayed for News Content type");
			extent.extentLoggerFail("Download CTA", "Download CTA is displayed for News Content type");
		}

		extent.HeaderChildNode(
				"Verify the functionality of Watchlist Option displayed below the News Consumption Screen");
		System.out
				.println("\nVerify the functionality of Watchlist Option displayed below the News Consumption Screen");
		verifyElementPresent(AMDNewsPage.objWatchlistIcon, "WatchList CTA");
		String contentTitle = findElement(AMDNewsPage.objContentTitle).getText();
		if (verifyIsElementDisplayed(AMDGenericObjects.objAddToWatchlistCTA)) {
			click(AMDGenericObjects.objAddToWatchlistCTA, "Add to WatchList");
		} else {
			logger.info("Program is already added to the watchlist for News Content");
		}

		if (userType.equalsIgnoreCase("Guest")) {
			String header = getText(AMDGenericObjects.objgetScreenTitle);
			if (header.equals("Login/Register")) {
				extent.extentLoggerPass("Watchlist",
						userType + " user is navigated to " + header + " screen on tapping Watchlist option");
				logger.info(userType + " user is navigated to " + header + " screen on tapping Watchlist option");
			} else {
				extent.extentLoggerFail("Watchlist",
						"Failed to navigate into respective screen after clicking Watchlist");
				logger.info("Failed to navigate into respective screen after clicking Watchlist");
			}
			waitTime(4000);
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objBackBtn, "Back Button");
		} else {
			Back(1);
			verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More Menu");
			click(AMDMoreMenu.objWatchlist, "My Watchlist");
			waitTime(2000);
			verifyElementPresentAndClick(AMDDownloadPage.objvideostab, "Videos tab in Watchlist Screen");

			String WatchlistScreenTitle = null;
			ArrayList<String> listOfContentNames = new ArrayList<String>();
			int sizeList = getCount(AMDNewsPage.objWatchlistContentTitle);
			if (sizeList > 1) {
				for (int i = 1; i <= sizeList; i++) {
					listOfContentNames.add(getText(AMDNewsPage.objWatchListContentList(i)));
				}
				WatchlistScreenTitle = listOfContentNames.toString();
			} else if (sizeList == 1) {
				WatchlistScreenTitle = getText(AMDNewsPage.objWatchlistContentTitle);
			} else {
				logger.info("No items to display in the Watchlist screen");
				extent.extentLoggerWarning("My Watchlist", "No items to display in the Watchlist screen");
			}

			logger.info("Watchlist Content: " + WatchlistScreenTitle);
			logger.info("Content title: " + contentTitle);
			if (WatchlistScreenTitle.contains(contentTitle)) {
				logger.info("Content Added to Watchlist is displayed under Watchlist screen");
				extent.extentLoggerPass("Add to Watchlist",
						"Content Added to Watchlist is displayed under Watchlist screen");
			} else {
				logger.info("Content Added to Watchlist is Not displayed under Watchlist screen");
				extent.extentLoggerFail("Add to Watchlist",
						"Content Added to Watchlist is Not displayed under Watchlist screen");
			}

			Back(2);
			selectTopNavigationTab("News");
			waitTime(6000);

			findTrayInScreen(AMDNewsPage.KannadaNewsTray);
			click(AMDNewsPage.KannadaNewsTray, "Kannada News Tray");
			waitTime(2000);

			click(AMDNewsPage.objMetadataofthecard, "News Card");
			waitTime(4000);
			click(AMDNewsPage.objWatchlistIcon, "WatchList Icon");
			Back(1);
			verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More Menu");
			click(AMDMoreMenu.objWatchlist, "My Watchlist");
			waitTime(2000);
			verifyElementPresentAndClick(AMDDownloadPage.objvideostab, "Videos tab in Watchlist Screen");

			ArrayList<String> listOfContents = new ArrayList<String>();
			sizeList = getCount(AMDNewsPage.objWatchlistContentTitle);
			WatchlistScreenTitle = "";
			if (sizeList > 1) {
				for (int i = 1; i <= sizeList; i++) {
					listOfContents.add(getText(AMDNewsPage.objWatchListContentList(i)));
				}
				System.out.println(listOfContentNames);
				WatchlistScreenTitle = listOfContents.toString();
			} else if (sizeList == 1) {
				WatchlistScreenTitle = getText(AMDNewsPage.objWatchlistContentTitle);
			} else {
				logger.info("No content listed in the Watchlist screen");
				extent.extentLogger("My Watchlist", "No content listed in the Watchlist screen");
			}

			if (!(WatchlistScreenTitle.contains(contentTitle))) {
				extent.extentLoggerPass("Removed From Watchlist", "Content is removed from the Watchlist Screen");
				logger.info("Content is removed from the Watchlist Screen");
			} else {
				extent.extentLoggerFail("Removed From Watchlist", "Content is not removed from the Watchlist Screen");
				logger.info("Content is not removed from the Watchlist Screen");
			}
			Back(1);
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Bottom bar home option");
		}
		waitTime(2000);
		verifyRailsSwipe(userType);
	}
/**
 * Finding the Tray in a screen
 * @param byLocator
 */
	public void findTrayInScreen(By byLocator) {
		for (int i = 0; i < 25; i++) {
			if (!(verifyIsElementDisplayed(byLocator))) {
				Swipe("UP", 1);
			} else {
				PartialSwipe("UP", 1);
				logger.info("Tray is located");
				extent.extentLoggerPass("Tray", "Tray is located");
				break;
			}
		}
	}
/**
 * Verifying the options available in New Consumption screen that is meta data validation
 * @throws Exception
 */
	public void verifyMetaDataOfConsumptionScreen() throws Exception {
		extent.HeaderChildNode("Verify the options available in the news consumption screen");
		System.out.println("\nVerify the options available in the news consumption screen");

		boolean Description = (verifyIsElementDisplayed(AMDNewsPage.objNewsConsumptionSrnDescription));
		if (Description) {
			String NewsDescription = getText(AMDNewsPage.objNewsConsumptionSrnDescription);
			logger.info(
					NewsDescription + " : Short Description of the News Content is displayed in Consumption Screen");
			extent.extentLoggerPass("Short Description",
					NewsDescription + " : Short Description of the News Content is displayed in Consumption Screen");
		} else {
			logger.info("Short Description is not displayed in News Consumption Screen");
			extent.extentLoggerFail("Short Description",
					"Short Description is not displayed in News Consumption Screen");
		}

		boolean NewsChannel = (verifyIsElementDisplayed(AMDNewsPage.objChannelName));
		if (NewsChannel) {
			String ChannelName = getText(AMDNewsPage.objChannelName);
			logger.info(ChannelName + " : Channel name is displayed in News Consumption Screen");
			extent.extentLoggerPass("Channel Name",
					ChannelName + " : Channel name is displayed in News Consumption Screen");
		} else {
			logger.info("Channel name is not displayed in News Consumption Screen");
			extent.extentLoggerFail("Channel Name", "Channel name is not displayed in News Consumption Screen");
		}

		boolean Genere = (verifyIsElementDisplayed(AMDNewsPage.objChannelName));
		if (Genere) {
			String ContentGenere = getText(AMDNewsPage.objChannelName);
			logger.info(ContentGenere + " : Genere type is displayed in News Consumption Screen");
			extent.extentLoggerPass("Genere Type",
					ContentGenere + " : Genere type is displayed in News Consumption Screen");
		} else {
			logger.info("Genere type is not displayed in News Consumption Screen");
			extent.extentLoggerFail("Genere Type", "Genere type is not displayed in News Consumption Screen");
		}
		// click();
		boolean Duration = (verifyIsElementDisplayed(AMDNewsPage.objContentDuration));
		if (Duration) {
			String ContentDuration = getText(AMDNewsPage.objContentDuration);
			logger.info(ContentDuration + " : Content Duration is displayed in News Consumption Screen");
			extent.extentLoggerPass("Content Duration",
					ContentDuration + " :Content Duration is displayed in News Consumption Screen");
		} else {
			logger.info("Content Duration is not displayed in News Consumption Screen");
			extent.extentLoggerFail("Content Duration", "Content Duration is not displayed in News Consumption Screen");
		}

		boolean Date = (verifyIsElementDisplayed(AMDNewsPage.objBroadcastedDate));
		if (Date) {
			String BroadcastedDate = getText(AMDNewsPage.objBroadcastedDate);
			logger.info(BroadcastedDate + " : Broadcasted Date is displayed in News Consumption Screen");
			extent.extentLoggerPass("Broadcasted Date",
					BroadcastedDate + " :Broadcasted Date is displayed in News Consumption Screen");
		} else {
			logger.info("Broadcasted Date is not displayed in News Consumption Screen");
			extent.extentLoggerFail("Broadcasted Date", "Content Duration is not displayed in News Consumption Screen");
		}

		boolean shareCTA = verifyIsElementDisplayed(AMDConsumptionScreen.objShareBtn);
		if (shareCTA) {
			extent.extentLoggerPass("Share CTA", "Share CTA is displayed in News Consumption Screen");
			logger.info("Share CTA is displayed in News Consumption Screen");
		} else {
			extent.extentLoggerFail("Share CTA", "Share CTA is not displayed in News Consumption Screen");
			logger.info("Share CTA is not displayed in News Consumption Screen");
		}
		boolean watchListCTA = verifyIsElementDisplayed(AMDConsumptionScreen.objWatchlistBtn);
		if (watchListCTA) {
			extent.extentLoggerPass("Watchlist", "Watchlist CTA is displayed in News Consumption Screen");
			logger.info("Watchlist CTA is displayed in News Consumption Screen");
		} else {
			extent.extentLoggerPass("Watchlist", "Watchlist CTA is not displayed in News Consumption Screen");
			logger.info("Watchlist CTA is not displayed in News Consumption Screen");
		}

	}
/**
 * Verifying the Channel names
 * @throws Exception
 */
	public void verifyChannelNames() throws Exception {
		extent.HeaderChildNode("Verify Appropriate Content Title");
		List<WebElement> ThumbnailCard = getDriver().findElements(By.xpath("//*[@id='item_primary_text']"));
		logger.info(ThumbnailCard.size());
		for (int i = 1; i <= ThumbnailCard.size() - 2; i++) {

			WebElement cardname = getDriver().findElement(By.xpath("(//*[@id='item_primary_text'])[" + i + "]"));
			String tabName = cardname.getText();
			logger.info(tabName);
			cardname.click();
			waitTime(10000);
			String ConsumptionScreenTitle = getText(AMDNewsPage.objConsumptionScreenTitle);
			logger.info(ConsumptionScreenTitle);
			if (tabName.equalsIgnoreCase(ConsumptionScreenTitle)) {
				logger.info("Appropriate Channel name is displayed below the Content Thumbnail Card");
				extent.extentLoggerPass("Channel Name",
						"Appropriate Channel name is displayed below the Content Thumbnail Card");

			} else {
				logger.info("Appropriate Channel name is not displayed below the Content Thumbnail Card");
				extent.extentLoggerFail("Channel Name",
						"Appropriate Channel name is not displayed below the Content Thumbnail Card");
			}
			Back(1);

		}
		Back(1);

	}
/**
 * verifying the options available in live Tv consumption screen
 * @throws Exception
 */
	public void verifySimilarChannels() throws Exception {
		extent.HeaderChildNode("Verify the options available in the live tv consumption screen");
		selectTopNavigationTab("Live TV");
		waitTime(30000);

		String LiveChannelName = getText(AMDNewsPage.objLiveChannelName);
		logger.info(LiveChannelName);

		click(AMDNewsPage.objLiveChannelName, "Live Channel");
		waitTime(20000);
		String ConsumptionScreenMetaData = getText(AMDNewsPage.objConsumptionScrnMetaDataOfLiveTv);
		if (LiveChannelName.equalsIgnoreCase(ConsumptionScreenMetaData)) {
			logger.info("Appropriate playback will be initiated for the clicked content");
			extent.extentLoggerPass("Consumption Screen",
					"Appropriate playback will be initiated for the clicked content");
		} else {
			logger.info("Appropriate playback is not initiated for the clicked content");
			extent.extentLoggerFail("Consumption Screen",
					"Appropriate playback is not initiated for the clicked content");
		}

		boolean shareCTA = verifyIsElementDisplayed(AMDConsumptionScreen.objShareBtn);
		if (shareCTA) {
			extent.extentLoggerPass("Share CTA", "Share CTA is displayed in Live TV Consumption Screen");
			logger.info("Share CTA is displayed in News Consumption Screen");
		} else {
			extent.extentLoggerFail("Share CTA", "Share CTA is not displayed in Live TV Consumption Screen");
			logger.info("Share CTA is not displayed in Live TV Consumption Screen");
		}

//		boolean Description = (verifyIsElementDisplayed(AMDNewsPage.objNewsConsumptionSrnDescription));
//		if (Description) {
//			String LiveNewsDescription = getText(AMDNewsPage.objNewsConsumptionSrnDescription);
//			logger.info(LiveNewsDescription
//					+ " : Short Description of the Live TV Content is displayed in Consumption Screen");
//			extent.extentLoggerPass("Short Description", LiveNewsDescription
//					+ " : Short Description of the Live TV Content is displayed in Consumption Screen");
//		} else {
//			logger.info("Short Description is not displayed in Live TV Consumption Screen");
//			extent.extentLoggerFail("Short Description",
//					"Short Description is not displayed in Live TV Consumption Screen");
//		}
//
//		boolean NewsChannel = (verifyIsElementDisplayed(AMDNewsPage.objChannelName));
//		if (NewsChannel) {
//			String ChannelName = getText(AMDNewsPage.objChannelName);
//			logger.info(ChannelName + " : Channel name is displayed in Live TV Consumption Screen");
//			extent.extentLoggerPass("Channel Name",
//					ChannelName + " : Channel name is displayed in Live TV Consumption Screen");
//		} else {
//			logger.info("Channel name is not displayed in Live TV Consumption Screen");
//			extent.extentLoggerFail("Channel Name", "Channel name is not displayed in Live TV Consumption Screen");
//		}

		boolean WatchlistIcon = (!(verifyIsElementDisplayed(AMDNewsPage.objWatchlistIcon)));
		if (WatchlistIcon) {
			logger.info("Watchlist option is not displayed for Live TV Consumption Screen ");
			extent.extentLoggerPass("Consumption Screen",
					"Watchlist option is not displayed for Live TV Consumption Screen ");
		} else {

			logger.info("Watchlist option is displayed for Live TV Consumption Screen ");
			extent.extentLoggerFail("Consumption Screen",
					"Watchlist option is displayed for Live TV Consumption Screen ");
		}

		extent.HeaderChildNode("Download Icon Should not display for the LiveTV Content");
		boolean DownloadIcon = (!verifyIsElementDisplayed(AMDNewsPage.objDownlaodOption));
		if (DownloadIcon) {
			logger.info("Download Icon is not displayed for any Live TV Content");
			extent.extentLoggerPass("Consumption Screen", "Download Icon is not displayed for any Live TV Content");
		} else {

			logger.info("Download Icon is displayed for any Live TV Content");
			extent.extentLoggerFail("Consumption Screen", "Download Icon is displayed for any Live TV Content");
		}

		extent.HeaderChildNode(
				"Verify similar Channels rail is displayed and navigate to Listing screen on tapping rail title");
		Swipe("UP", 1);
		boolean SimilarChannelsRail = verifyIsElementDisplayed(AMDGenericObjects.objCarouselTitle("Similar Channels"));
		if (SimilarChannelsRail) {

			logger.info("Similar Channels rail is displayed below the player in LiveTV Consumption Screen");
			extent.extentLoggerPass("Consumption Screen",
					"Similar Channels rail is displayed below the player in LiveTV Consumption Screen");
		} else {

			logger.info("Similar Channels rail is not displayed below the player in LiveTV Consumption Screen");
			extent.extentLoggerFail("Consumption Screen",
					"Similar Channels rail is not displayed below the player in LiveTV Consumption Screen");
		}

		if (SimilarChannelsRail) {
			click(AMDNewsPage.objSimilarChannelsTray, "Similar Channels Rail");
			String Channelheader = getText(AMDNewsPage.objSimilarChannelsHeader);
			if (Channelheader.equals("Similar Channels")) {

				extent.extentLoggerPass("Verify Navigation", "User is navigated to " + Channelheader
						+ " screen post tapping on the rail name displayed below the consumption screen");
				logger.info("User is navigated to " + Channelheader
						+ " screen post tapping on the rail name displayed below the consumption screen");
			} else {
				extent.extentLoggerFail("Verify navigation",
						"User is not navigated to listing screen post tapping rail name displayed below the consumption screen ");
				logger.info(
						"User is not navigated to listing screen post tapping rail name displayed below the consumption screen ");
			}
		}
		Back(1);
		verifyChannelNames();
	}
/**
 * Method to validate the rails and swiping it
 * @param userType
 * @throws Exception
 */
	public void verifyRailsSwipe(String userType) throws Exception {

		if (userType.equals("NonSubscribedUser") | userType.equals("SubscribedUser")) {
			selectTopNavigationTab("News");
			waitTime(6000);
			findTrayInScreen(AMDNewsPage.KannadaNewsTray);
			click(AMDNewsPage.KannadaNewsTray, "Kannada News Tray");
			waitTime(2000);
			click(AMDNewsPage.objMetadataofthecard, "News Card");
			waitTime(8000);
		}

		// Swipe rail content cards left/right to access any related content
		extent.HeaderChildNode("Verify User can swipe left/right to access related content cards from the rail");
		System.out.println("\nVerify User can swipe left/right to access related content cards from the rail");
		PartialSwipe("UP", 1);
		String firstContentName = getText(AMDGenericObjects.objContentNameInTray(1));
		logger.info(firstContentName);
		SwipeRailContentCards(AMDNewsPage.objSwipeTray);
		String secondContentName = getText(AMDGenericObjects.objContentNameInTray(3));
		logger.info(secondContentName);
		if (!firstContentName.equals(secondContentName)) {
			extent.extentLoggerPass("Swipe",
					"User can Swipe the content cards to access related contents from the rail");
			logger.info("User can Swipe the content cards to access related contents from the rail");
		} else {
			extent.extentLoggerFail("Swipe",
					"User cannot Swipe the content cards to access related contents from the rail");
			logger.info("User cannot Swipe the content cards to access related contents from the rail");
		}
		Back(1);
		verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Bottom bar Home option");
	}
/**
 * verifying the Share options and its functioonality
 * @throws Exception
 */
	public void verifyShareOption() throws Exception {
		extent.HeaderChildNode("Verify the functionality of share option displayed below the player");
		verifyElementPresentAndClick(AMDConsumptionScreen.objShareBtn, "Share button in consumption screen");
		waitTime(3000);
		PartialSwipeInConsumptionScreen("Up", 1);
		verifyElementPresentAndClick(AMDNewsPage.objShareGmail, "GMail Share option");
		waitForElementDisplayed(AMDNewsPage.objSharedLink, 20);
		hideKeyboard();
		waitTime(2000);

		String SharedLink = getText(AMDNewsPage.objSharedLink);
		logger.info(SharedLink);
		if (SharedLink.contains("www.zee5.com")) {
			logger.info("User is able to share content link across available sharing options");
			extent.extentLoggerPass("Share Content Link",
					"User is able to share content link across available sharing options");
		} else {
			logger.info("User is unable to share content link across available sharing options");
			extent.extentLoggerFail("Share Content Link",
					"User is unable to share content link across available sharing options");
		}

		while (true) {
			Back(1);
			if (verifyIsElementDisplayed(AMDConsumptionScreen.objContentName)) {
				break;
			}
		}
	}

	/**
	 * Author : Vinay Module : Consumption Screen
	 * Verifying the SVOD contents on consumption screen
	 */

	public void sVODConsumptionScreen(String userType, String tabName, String contentName) throws Exception {

		extent.HeaderChildNode("Verifying SVOD contents on Consumption screen for \"" + tabName
				+ "\" content and Content Name: " + contentName);
		System.out.println("\nVerifying SVOD contents on Consumption screen for \"" + tabName
				+ "\" content and Content Name: " + contentName);
		waitTime(5000);
		BackToLandingScreen();
		if (tabName.equals("Episode")) {
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				// ---Get the content name from TV Show tab
				contentName = SVODConsumptionScreenForEpisode(userType);
				System.out.println("\nContentName: " + contentName);
				if (!verifyIsElementDisplayed(AMDPlayerScreen.objPause)) {
					click(AMDPlayerScreen.objPlayerScreen, "Player screen");
					click(AMDPlayerScreen.objPause, "Pause icon");
				} else {
					click(AMDPlayerScreen.objPause, "Pause icon");
				}
			} else {
				verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search button");
				verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
				type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search bar");
				hideKeyboard();
				click(AMDSearchScreen.objFirstResult, "Search result");
			}
		} else {
			verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search button");
			verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search bar");
			hideKeyboard();
			waitTime(2000);
			click(AMDSearchScreen.objFirstSearchResult(contentName), "Search result");
		}

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (tabName.equalsIgnoreCase("Music")) {
				waitForAdToFinishInAmd();
				if (verifyIsElementDisplayed(AMDGenericObjects.objPopUpDivider)) {
					click(AMDGenericObjects.objPopUpDivider, "PopUp Divider");
				}
			}
			if (tabName.equals("Episode") || tabName.equals("Movies")) {
				if (verifyIsElementDisplayed(AMDPlayerScreen.objAd2)) {
					waitForAdToFinishInAmd();
				}
				if (verifyIsElementDisplayed(AMDGenericObjects.objPopUpDivider)) {
					click(AMDGenericObjects.objPopUpDivider, "PopUp Divider");
				}
				click(AMDPlayerScreen.objPause, "Pause button");
			}
		} else {
			if (verifyIsElementDisplayed(AMDPlayerScreen.objPause)) {
				click(AMDPlayerScreen.objPause, "Pause button");
			} else {
				click(AMDPlayerScreen.objPlayerScreen, "Pause button");
				click(AMDPlayerScreen.objPause, "Pause button");
			}
		}

		boolean isContentNameDisplayed = verifyIsElementDisplayed(AMDConsumptionScreen.objContentName);
		if (isContentNameDisplayed) {
			String contentNameInConsumptionScreen = getText(AMDConsumptionScreen.objContentName);
			String contentInfoInConsumptionScreen = getText(AMDConsumptionScreen.objContentInfo);
			extent.extentLoggerPass("Verify Consumption name", "Content name is available in consumption screen");
			logger.info("Content name is available in consumption screen");
			if (tabName.equals("Shows")) {
				extent.extentLogger("Verify navigation",
						"User is playing SVOD content \"" + contentName + "\" for tab \"" + tabName + "\"");
				logger.info("User is playing SVOD content \"" + contentName + "\" for tab \"" + tabName + "\"");
				if (contentNameInConsumptionScreen.contains(contentName)
						|| contentInfoInConsumptionScreen.contains(contentName)) {
					extent.extentLoggerPass("Verify Content Name",
							"User is navigated to respective consumption screen for SVOD content '" + contentName
									+ "' for tab " + tabName);
					logger.info("User is navigated to respective consumption screen for  SVOD content '" + contentName
							+ "' for tab " + tabName);
				} else {
					extent.extentLoggerFail("Verify content name",
							"Failed to navigate into respective consumtption screen for SVOD content '" + contentName
									+ "' for tab " + tabName);
					logger.info("Failed to navigate into respective consumtption screen for  SVOD content '"
							+ contentName + "' for tab " + tabName);
				}
			} else if (tabName.equals("Movies")) {
				extent.extentLogger("Verify navigation",
						"User is playing SVOD content \"" + contentName + "\" for tab \"" + tabName + "\"");
				logger.info("User is playing SVOD content \"" + contentName + "\" for tab \"" + tabName + "\"");
				if (contentNameInConsumptionScreen.contains(contentName)
						|| contentInfoInConsumptionScreen.contains(contentName)) {
					extent.extentLoggerPass("Verify Content name",
							"User is navigated to respective consumption screen for SVOD content '" + contentName
									+ "' for tab " + tabName);
					logger.info("User is navigated to respective consumption screen for SVOD content " + contentName
							+ " for tab " + tabName);
				} else {
					extent.extentLoggerFail("Verify content name",
							"Failed to navigate to respective consumtption screen for SVOD content '" + contentName
									+ "' for tab " + tabName);
					logger.info("Failed to navigate to respective consumtption screen for  SVOD content '" + contentName
							+ "' for tab " + tabName);
				}

			} else if (tabName.equals("Music")) {
				extent.extentLogger("Verify navigation",
						"User is playing SVOD content \"" + contentName + "\" for tab \"" + tabName + "\"");
				logger.info("User is playing SVOD content \"" + contentName + "\" for tab \"" + tabName + "\"");
				if (contentNameInConsumptionScreen.contains(contentName)
						|| contentInfoInConsumptionScreen.contains(contentName)) {
					extent.extentLoggerPass("Verify Content name",
							"User is navigated to respective consumption screen for SVOD content " + contentName
									+ " for tab " + tabName);
					logger.info("User is navigated to respective consumption screen for SVOD content " + contentName
							+ " for tab " + tabName);
				} else {
					extent.extentLoggerFail("Verify content name",
							"Failed to navigate to respective consumption screen for SVOD content '" + contentName
									+ "' for tab " + tabName);
					logger.info("Failed to navigate to respective consumption screen for SVOD content '" + contentName
							+ "' for tab " + tabName);
				}
			} else if (tabName.equals("Episode")) {
				extent.extentLogger("Verify navigation",
						"User is playing SVOD content \"" + contentName + "\" for tab \"" + tabName + "\"");
				logger.info("User is playing SVOD content \"" + contentName + "\" for tab \"" + tabName + "\"");
				if (userType.equals("SubscribedUser")) {
					if (contentNameInConsumptionScreen.contains(contentName)
							|| contentInfoInConsumptionScreen.contains(contentName)) {
						extent.extentLoggerPass("Verify Content name",
								"User is navigated to respective consumption screen for  SVOD content '" + contentName
										+ "' for tab " + tabName);
						logger.info("User is navigated to respective consumption screen for  SVOD content "
								+ contentName + " for tab " + tabName);
					} else {
						extent.extentLoggerFail("Verify content name",
								"Failed to navigate into respective consumtption screen for  SVOD content '"
										+ contentName + "' for tab " + tabName);
						logger.info("Failed to navigate into respective consumtption screen for  SVOD content '"
								+ contentName + "' for tab " + tabName);
					}
				} else {
					if (contentNameInConsumptionScreen.contains(contentName)
							|| contentInfoInConsumptionScreen.contains(contentName)) {
						extent.extentLoggerPass("Verify Content name",
								"User is navigated to respective consumption screen for SVOD content '" + contentName
										+ "' for tab " + tabName);
						logger.info("User is navigated to respective consumption screen for  SVOD content "
								+ contentName + " for tab " + tabName);
					} else {
						extent.extentLoggerFail("Verify content name",
								"Failed to navigate into respective consumtption screen for  SVOD content '"
										+ contentName + "' for tab " + tabName);
						logger.info("Failed to navigate into respective consumtption screen for  SVOD content '"
								+ contentName + "' for tab " + tabName);
					}

				}
			}
		}

		// ***** Verifying the Consumption screen for all options ****
		MetadataInfo(tabName, contentName, userType);
		verifyCTAsInConsumptionScreen(userType, tabName, contentName);
		ShareValidationConsumptionScreen(tabName, userType);
		WatchList(userType, tabName, contentName);
		DownloadFunctionality(userType, tabName, contentName);
		watchTrailer(userType, tabName, contentName);
		audioLanguage(userType, contentName, tabName);
		subTitles(userType, contentName, tabName);
		validateConfiguredRails(userType, tabName);
		availableTraysInTabs(tabName, userType);

		// ***** Back to Landing screen *******
		BackToLandingScreen();
		click(AMDHomePage.objHomeBtn, "Home icon");
		waitTime(3000);
	}
/**
 * @Note Method to verify the meta data present in consumption screen
 * @param tabName
 * @param contentName
 * @param userType
 * @throws Exception
 */
	public void MetadataInfo(String tabName, String contentName, String userType) throws Exception {
		extent.HeaderChildNode("Verifying Metadata in consumption screen for \"" + tabName + "\" content");
		System.out.println("\nVerifying Metadata in consumption screen for \"" + tabName + "\" content");

		verifyElementExist(AMDConsumptionScreen.objContentInfo, "Content Info");

		waitTime(4000);
		String value = findElement(AMDConsumptionScreen.objContentInfo).getText();
		String[] arrSplit = value.split(" . ");
		for (int i = 0; i < arrSplit.length; i++) {
			System.out.println("Value at " + i + ": " + arrSplit[i]);
		}

		switch (tabName.toUpperCase()) {

		case "SHOWS":
			// content name
			String ContentName = arrSplit[1];
			if (ContentName.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Name",
						"Content Name \"" + ContentName.trim() + "\" is displayed in consumption screen");
				logger.info("Content Name \"" + ContentName.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Content name is not displayed in consumption screen");
				logger.info("Content name is not displayed in consumption screen");
			}

			// content Type
			String ContentType = arrSplit[0];
			if (ContentType.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Name",
						"Content Type \"" + ContentType.trim() + "\" is displayed in consumption screen");
				logger.info("Content Type \"" + ContentType.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Content Type is not displayed in consumption screen");
				logger.info("Content Type is not displayed in consumption screen");
			}

			// Release year
			String Releaseyear = arrSplit[4];
			if (Releaseyear.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Name",
						"Release Year \"" + Releaseyear.trim() + "\" is displayed in consumption screen");
				logger.info("Release Year \"" + Releaseyear.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Release Year is not displayed in consumption screen");
				logger.info("Release Year is not displayed in consumption screen");
			}

			// Genre
			String Genre = arrSplit[6];
			if (Genre.isEmpty() == false) {
				extent.extentLoggerPass("Verify Genre",
						"Genre \"" + Genre.trim() + "\" is displayed in consumption screen");
				logger.info("Genre \"" + Genre.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Genre is not displayed in consumption screen");
				logger.info("Genre is not displayed in consumption screen");
			}
			break;

		case "EPISODE":
			// content name
			String eContentName = arrSplit[1];
			if (eContentName.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Name",
						"Content Name \"" + eContentName.trim() + "\" is displayed in consumption screen");
				logger.info("Content Name \"" + eContentName.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Content name is not displayed in consumption screen");
				logger.info("Content name is not displayed in consumption screen");
			}

			// content Type
			String eContentType = arrSplit[0];
			if (eContentType.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Name",
						"Content Type \"" + eContentType.trim() + "\" is displayed in consumption screen");
				logger.info("Content Type \"" + eContentType.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Content Type is not displayed in consumption screen");
				logger.info("Content Type is not displayed in consumption screen");
			}

			// Release year
			String eReleaseyear = arrSplit[3];
			if (eReleaseyear.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Name",
						"Release Year \"" + eReleaseyear.trim() + "\" is displayed in consumption screen");
				logger.info("Release Year \"" + eReleaseyear.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Release Year is not displayed in consumption screen");
				logger.info("Release Year is not displayed in consumption screen");
			}

			// Genre
			String eGenre = arrSplit[5];
			if (eGenre.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Name",
						"Genre \"" + eGenre.trim() + "\" is displayed in consumption screen");
				logger.info("Genre \"" + eGenre.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Genre is not displayed in consumption screen");
				logger.info("Genre is not displayed in consumption screen");
			}
			break;

		case "MOVIES":
			// content name
			String mContentName = getText(AMDConsumptionScreen.objContentName);
			if (mContentName.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Name",
						"Content Name \"" + mContentName.trim() + "\" is displayed in consumption screen");
				logger.info("Content Name \"" + mContentName.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Content name is not displayed in consumption screen");
				logger.info("Content name is not displayed in consumption screen");
			}

			// content Type
			String mContentType = arrSplit[0];
			if (mContentType.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Type",
						"Content Type \"" + mContentType.trim() + "\" is displayed in consumption screen");
				logger.info("Content Type \"" + mContentType.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Content Type is not displayed in consumption screen");
				logger.info("Content Type is not displayed in consumption screen");
			}

			// Release year
			String mReleaseyear = arrSplit[1];
			if (mReleaseyear.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Name",
						"Release Year \"" + mReleaseyear.trim() + "\" is displayed in consumption screen");
				logger.info("Release Year \"" + mReleaseyear.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Release Year is not displayed in consumption screen");
				logger.info("Release Year is not displayed in consumption screen");
			}

			// Genre
			String mGenre = arrSplit[3];
			if (mGenre.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Name",
						"Genre \"" + mGenre.trim() + "\" is displayed in consumption screen");
				logger.info("Genre \"" + mGenre.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Genre is not displayed in consumption screen");
				logger.info("Genre is not displayed in consumption screen");
			}

			break;

		case "MUSIC":
			// content name
			String vContentName = getText(AMDConsumptionScreen.objContentName);
			if (vContentName.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Name",
						"Content Name \"" + vContentName.trim() + "\" is displayed in consumption screen");
				logger.info("Content Name \"" + vContentName.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Content name is not displayed in consumption screen");
				logger.info("Content name is not displayed in consumption screen");
			}

			// content Type
			String vContentType = arrSplit[0];
			if (vContentType.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Name",
						"Content Type \"" + vContentType.trim() + "\" is displayed in consumption screen");
				logger.info("Content Type \"" + vContentType.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Content Type is not displayed in consumption screen");
				logger.info("Content Type is not displayed in consumption screen");
			}

			// Release year
			String vReleaseyear = arrSplit[1];
			if (vReleaseyear.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Name",
						"Release Year \"" + vReleaseyear.trim() + "\" is displayed in consumption screen");
				logger.info("Release Year \"" + vReleaseyear.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Release Year is not displayed in consumption screen");
				logger.info("Release Year is not displayed in consumption screen");
			}

			// Genre
			String vGenre = arrSplit[3];
			if (vGenre.isEmpty() == false) {
				extent.extentLoggerPass("Verify Content Name",
						"Genre \"" + vGenre.trim() + "\" is displayed in consumption screen");
				logger.info("Genre \"" + vGenre.trim() + "\" is displayed in consumption screen");
			} else {
				extent.extentLogger("Verify content name", "Genre is not displayed in consumption screen");
				logger.info("Genre is not displayed in consumption screen");
			}

			break;

		default:
			logger.info(tabName + " - Invalid argument passed!!!");
			extent.extentLoggerWarning("Invalid Argument", tabName + " - Invalid argument passed!!!");
			break;
		}

		if (verifyIsElementDisplayed(AMDGenericObjects.objPopUpDivider)) {
			click(AMDGenericObjects.objPopUpDivider, "PopUp Divider");
		}

		if (!verifyIsElementDisplayed(AMDPlayerScreen.objPause)) {
			verifyElementPresentAndClick(AMDPlayerScreen.objPlayerScreen, "Player Screen");
		}
		click(AMDPlayerScreen.objPause, "Pause");
		scrubVideoToBegining(AMDPlayerScreen.objProgressBar);

		int xCordinate = Integer.parseInt(getAttributValue("x", AMDPlayerScreen.objTimer));
		int yCordinate = Integer.parseInt(getAttributValue("y", AMDPlayerScreen.objTimer));
		xCordinate = xCordinate + 30;
		System.out.println(xCordinate + " X " + yCordinate);
		TapOnCordinates(xCordinate, yCordinate);

		// Verify Total Duration
		boolean isTotalDuration = verifyIsElementDisplayed(AMDConsumptionScreen.objDuratation);
		if (isTotalDuration) {
			String Duration = getText(AMDConsumptionScreen.objDuratation);
			extent.extentLoggerPass("Verify Total duration", "Total duration of the content is : \"" + Duration + "\"");
			logger.info("Total duration of the content is : \"" + Duration + "\"");
		} else {
			extent.extentLogger("Verify Total duration",
					"Total duration is not displayed of the content '" + contentName + "'");
			logger.info("Total duration is not displayed of the content '" + contentName + "'");

		}

		// Verify Audio Language
		boolean isAudio = verifyIsElementDisplayed(AMDConsumptionScreen.objAudioLanguage);
		if (isAudio) {
			extent.extentLoggerPass("Verify Audio Language", "Audio Language option is displayed");
			logger.info("Audio Language option is displayed");
		} else {
			extent.extentLoggerFail("Verify Audio Language",
					"Audio Language option is not displayed for the content '" + contentName + "'");
			logger.info("Audio Language option is not displayed for the content '" + contentName + "'");

		}

		// Verify Subtitle
		boolean isSubtitle = verifyIsElementDisplayed(AMDConsumptionScreen.objSubtitle);
		if (isSubtitle) {
			extent.extentLoggerPass("Verify Subtitle", "Subtitle option is displayed");
			logger.info("Subtitle option is displayed");
		} else {
			extent.extentLoggerFail("Verify Subtitle",
					"Subtitle option is not displayed for the content '" + contentName + "'");
			logger.info("Subtitle option is not displayed for the content '" + contentName + "'");

		}
		// Verify Description
		boolean isDescription = verifyIsElementDisplayed(AMDConsumptionScreen.objContentDesc);
		if (isDescription) {
			extent.extentLoggerPass("Verify Description", "Content Description is displayed");
			logger.info("Content Description is displayed");

			boolean desc = verifyIsElementDisplayed(AMDConsumptionScreen.objExpandDesc);
			if (desc) {
				extent.extentLoggerPass("Expand Description", "Expand button to expand  description is displayed");
				click(AMDConsumptionScreen.objExpandDesc, "Expand Description button");
				String description = getText(AMDConsumptionScreen.objContentDesc);
				extent.extentLoggerPass("Description", "The content description is :\n" + description);
				logger.info("The content description is :\n" + description);
				click(AMDConsumptionScreen.objExpandDesc, "Description button");

			} else {
				extent.extentLoggerFail("Expand button", "Expand button is not displayed");
				logger.info("Expand button is not displayed");
			}
		} else {
			extent.extentLoggerFail("Verify Description", "Content Description  is not displayed");
			logger.info("Content Description  is not displayed");

		}
	}
/**
 * Verifying the CTAs present in Consumption screen
 * @param userType
 * @param tabName
 * @param contentName
 * @throws Exception
 */
	public void verifyCTAsInConsumptionScreen(String userType, String tabName, String contentName) throws Exception {

		HeaderChildNode("Verify the availability of CTA's in Consumption screen for \"" + tabName + "\" content");
		System.out.println("\nVerify the availability of CTA's in Consumption screen for \"" + tabName + "\" content");

		boolean shareCTA = verifyIsElementDisplayed(AMDConsumptionScreen.objShareBtn);
		if (shareCTA) {
			extent.extentLoggerPass("Share CTA", "Share CTA is available for the content : " + contentName);
			logger.info("Share CTA is available for the content : " + contentName);
		} else {
			extent.extentLogger("Share CTA",
					"Share CTA is not available for the content '" + contentName + "' for user : " + userType);
			logger.info("Share CTA is not available for the content '" + contentName + "' for user type : " + userType);
		}
		boolean watchListCTA = verifyIsElementDisplayed(AMDConsumptionScreen.objWatchlistBtn);
		if (watchListCTA) {
			extent.extentLoggerPass("Watchlist", "Watchlist CTA is available for the content : " + contentName);
			logger.info("Watchlist CTA is available for the content : " + contentName);
		} else {
			extent.extentLogger("Watchlist CTA",
					"Watchlist CTA is not available for the content '" + contentName + "' for user : " + userType);
			logger.info(
					"Watchlist CTA is not available for the content '" + contentName + "' for user type : " + userType);
		}
		boolean castCTA = verifyIsElementDisplayed(AMDConsumptionScreen.objCastBtn);
		if (castCTA) {
			extent.extentLoggerPass("Cast CTA", "Cast CTA is available for the content : " + contentName);
			logger.info("Cast CTA is available for the content : " + contentName);
		} else {
			extent.extentLogger("Cast CTA",
					"Cast CTA is not available for the content '" + contentName + "' for user : " + userType);
			logger.info("Cast CTA is not available for the content '" + contentName + "' for user type : " + userType);
		}
		boolean downloadCTA = verifyIsElementDisplayed(AMDConsumptionScreen.objDownloadBtn);
		if (downloadCTA) {
			extent.extentLoggerPass("Download CTA", "Download CTA is available for the content : " + contentName);
			logger.info("Download CTA is available for the content : " + contentName);
		} else {
			extent.extentLogger("Download CTA",
					"Download CTA is not available for the content '" + contentName + "' for user : " + userType);
			logger.info(
					"Download CTA is not available for the content '" + contentName + "' for user type : " + userType);
		}
		boolean watchTrailerCTA = verifyIsElementDisplayed(AMDConsumptionScreen.objWatchTrialer);
		if (watchTrailerCTA) {
			extent.extentLoggerPass("Watch Trailer CTA",
					"Watch Trailer CTA is available for the content : " + contentName);
			logger.info("Watch Trailer CTA is available for the content : " + contentName);
		} else {
			extent.extentLogger("Watch Trailer CTA",
					"Watch Trailer CTA is not available for the content '" + contentName + "' for user : " + userType);
			logger.info("Watch Trailer CTA is not available for the content '" + contentName + "' for user type : "
					+ userType);
		}

		if (verifyIsElementDisplayed(AMDGenericObjects.objPopUpDivider)) {
			click(AMDGenericObjects.objPopUpDivider, "Close interruption");
		}

	}

//Verify Metadata in Consumption screen for SVOD contents
	/**
	 * verifying the meta data in consumtption screen for SVOD contents
	 * @param tabName
	 * @param contentName
	 * @param userType
	 * @throws Exception
	 */
	public void MetadataSVODContentConsumptionScreen(String tabName, String contentName, String userType)
			throws Exception {
		extent.HeaderChildNode("Verifying Metadata in consumption screen for the tab : \"" + tabName + "\"");
		// Verify Content name
		boolean isContenName = verifyIsElementDisplayed(AMDConsumptionScreen.objContentName);
		if (isContenName) {
			String contentName1 = getText(AMDConsumptionScreen.objContentName);
			extent.extentLoggerPass("Verify Content Name",
					"Content Name \"" + contentName1 + "\" is displayed in consumption screen");
			logger.info("Content Name \"" + contentName1 + "\" is displayed in consumption screen");
		} else {
			extent.extentLogger("Verify content name", "Content name is not displayed in consumption screen");
			logger.info("Content name is not displayed in consumption screen");
		}

		if (tabName.equals("Shows") | tabName.equals("Episode")) {
			// Verify No of Episodes
			boolean isGenre = verifyIsElementDisplayed(AMDConsumptionScreen.objMainGenre);
			if (isGenre) {
				String NoOfEpisode = getText(AMDConsumptionScreen.objMainGenre);
				extent.extentLoggerPass("Verify No of episodes",
						"Number of available episodes for the content '" + contentName + "' is : " + NoOfEpisode);
				logger.info("Number of available episodes for the content '" + contentName + "' is : " + NoOfEpisode);
			} else {
				extent.extentLogger("Verify No of episodes",
						"Number of available episodes are not displayed for the content '" + contentName + "'");
				logger.info("Number of available episodes are not displayed for the content '" + contentName + "'");
			}

		} else if (tabName.equals("Movies")) {

			// Verify content type for Movie
			boolean isMovieType = verifyIsElementDisplayed(AMDConsumptionScreen.objMainGenre);
			if (isMovieType) {
				String type = getText(AMDConsumptionScreen.objMainGenre);
				extent.extentLoggerPass("Verify Type of the Movie content",
						"The type of the Movie content is : \"" + type + "\"");
				logger.info("The type of the Movie content is : \"" + type + "\"");
			} else {
				extent.extentLoggerFail("Verify Type of the Movie content",
						"Type of the Movie content is not available for the content '" + contentName + "'");
				logger.info("Type of the Movie content is not available for the content '" + contentName + "'");
			}

		} else if (tabName.equals("Music")) {
			// Verify content type for Music content
			boolean isMusicType = verifyIsElementDisplayed(AMDConsumptionScreen.objMainGenre);
			if (isMusicType) {
				String type = getText(AMDConsumptionScreen.objMainGenre);
				extent.extentLoggerPass("Verify Type of the Music content",
						"The type of the Music content is  :\"" + type + "\"");
				logger.info("The type of the Music content is  :\"" + type + "\"");
			} else {
				extent.extentLoggerFail("Verify Type of the Music content",
						"Type of the Music content is not available for the content '" + contentName + "'");
				logger.info("Type of the Music content is not available for the content '" + contentName + "'");
			}
		}

		// Verify Release Year
		boolean isYearDisplayed = verifyIsElementDisplayed(AMDConsumptionScreen.objReleasYear);
		if (isYearDisplayed) {
			String ReleaseYear = getText(AMDConsumptionScreen.objReleasYear);
			extent.extentLoggerPass("Verify Release year", "Release year for the content is :\"" + ReleaseYear + "\"");
			logger.info("Release year for the content is :\"" + ReleaseYear + "\"");
		} else {
			extent.extentLogger("Verify Release year",
					"Release year is not displayed for the content '" + contentName + "'");
			logger.info("Release year is not displayed for the content '" + contentName + "'");

		}

		// Verify Genre
		boolean isGenre = verifyIsElementDisplayed(AMDConsumptionScreen.objGenre);
		if (isGenre) {
			String genre = getText(AMDConsumptionScreen.objGenre);
			extent.extentLoggerPass("Verify Genre", "Genre for the content is : \"" + genre + "\"");
			logger.info("Genre for the content is : \"" + genre + "\"");
		} else {
			extent.extentLogger("Verify Genre", "Genre is not displayed for the content '" + contentName + "'");
			logger.info("Genre is not displayed for the content '" + contentName + "'");

		}

		// Verify Total Duration
		boolean isTotalDuration = verifyIsElementDisplayed(AMDConsumptionScreen.objDuratation);
		if (isTotalDuration) {
			String Duration = getText(AMDConsumptionScreen.objDuratation);
			extent.extentLoggerPass("Verify Total duration",
					"Total duration for the content is : \"" + Duration + "\"");
			logger.info("Total duration for the content is : \"" + Duration + "\"");
		} else {
			extent.extentLogger("Verify Total duration",
					"Total duration is not displayed for the content '" + contentName + "'");
			logger.info("Total duration is not displayed for the content '" + contentName + "'");

		}

		// Verify Audio Language
		boolean isAudio = verifyIsElementDisplayed(AMDConsumptionScreen.objAudioLanguage);
		if (isAudio) {
			extent.extentLoggerPass("Verify Audio Language", "Audio Language option is displayed");
			logger.info("Audio Language option is displayed");
		} else {
			extent.extentLoggerFail("Verify Audio Language",
					"Audio Language option is not displayed for the content '" + contentName + "'");
			logger.info("Audio Language option is not displayed for the content '" + contentName + "'");

		}

		// Verify Subtitle
		boolean isSubtitle = verifyIsElementDisplayed(AMDConsumptionScreen.objSubtitle);
		if (isSubtitle) {
			extent.extentLoggerPass("Verify Subtitle", "Subtitle option is displayed");
			logger.info("Subtitle option is displayed");
		} else {
			extent.extentLoggerFail("Verify Subtitle",
					"Subtitle option is not displayed for the content '" + contentName + "'");
			logger.info("Subtitle option is not displayed for the content '" + contentName + "'");

		}
		// Verify Description
		boolean isDescription = verifyIsElementDisplayed(AMDConsumptionScreen.objContentDesc);
		if (isDescription) {
			extent.extentLoggerPass("Verify Description", "Content Description is displayed");
			logger.info("Content Description is displayed");

			boolean desc = verifyIsElementDisplayed(AMDConsumptionScreen.objExpandDesc);
			if (desc) {
				extent.extentLoggerPass("Expand Description", "Expand button to expand  description is displayed");
				click(AMDConsumptionScreen.objExpandDesc, "Expand Description button");
				String description = getText(AMDConsumptionScreen.objContentDesc);
				extent.extentLoggerPass("Description", "The content description is :\n" + description);
				logger.info("The content description is :\n" + description);
				click(AMDConsumptionScreen.objExpandDesc, "Description button");

			} else {
				extent.extentLoggerFail("Expand button", "Expand button is not displayed");
				logger.info("Expand button is not displayed");
			}
		} else {
			extent.extentLoggerFail("Verify Description", "Content Description  is not displayed");
			logger.info("Content Description  is not displayed");

		}

	}
/**
 * Validating the functionality of Share on consumption screen
 * @param tabName
 * @param userType
 * @throws Exception
 */
	public void ShareValidationConsumptionScreen(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("Verify Share CTA functionality");
		System.out.println("\nVerify Share CTA functionality");

		click(AMDConsumptionScreen.objShareBtn, "Share button");
		boolean isShareOption = verifyIsElementDisplayed(AMDMoreMenu.objshareOptions);
		if (isShareOption) {
			logger.info("User is navigated share options screen");
			extent.extentLoggerPass("Share through options screen", "User is navigated to share options screen");
			int shareOptions = getDriver().findElements(AMDMoreMenu.objShareOptions).size();
			if (shareOptions == 0) {
				extent.extentLoggerFail("Verify share options", "Share Options are not available");
				logger.info("Share Options are not available");
			} else {
				for (int i = 2; i <= shareOptions; i++) {
					String shareOptionName = getText(AMDMoreMenu.objShareOptions(i));
					logger.info("Share Option : \"" + shareOptionName + "\" is available to share");
					extent.extentLoggerPass("Share Option ",
							"Share Option : \"" + shareOptionName + "\" is available to share");
				}
			}
		} else {
			logger.info("Share Options are not displayed after clicking on Share CTA");
			extent.extentLoggerFail("Share through options screen",
					"Share Options are not displayed after clicking on Share CTA");
		}
		Back(1);
	}
/**
 * Verifying the functionality of watch List
 * @param userType
 * @param tabName
 * @param contentName
 * @throws Exception
 */
	public void WatchList(String userType, String tabName, String contentName) throws Exception {
		extent.HeaderChildNode("Verify Watchlist CTA Functionality");
		System.out.println("\nVerify Watchlist CTA Functionality");

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (tabName.equals("Episode") || tabName.equals("Movies") || tabName.equals("Music")) {
				if (verifyIsElementDisplayed(AMDPlayerScreen.objPause)) {
					click(AMDPlayerScreen.objPause, "Pause button");
				}
			}
		}

		switch (userType.toUpperCase()) {
		case "GUEST":

			verifyElementPresentAndClick(AMDConsumptionScreen.objWatchlistBtn, "Watchlist button");
			waitTime(3000);
			String header = getText(AMDGenericObjects.objgetScreenTitle);
			if (header.equals("Login/Register")) {
				extent.extentLoggerPass("Watchlist",
						userType + " user is navigated to " + header + " screen after tapping Watchlist CTA");
				logger.info(userType + " user is navigated to " + header + " screen after tapping Watchlist CTA");
				click(AMDGenericObjects.objBackBtn, "Back button");
				waitTime(3000);
			} else {
				extent.extentLoggerFail("Watchlist",
						"Failed to navigate into respective screen after clicking Watchlist");
				logger.info("Failed to navigate into respective screen after clicking Watchlist");
			}
			waitTime(3000);
			break;

		case "NONSUBSCRIBEDUSER":

			if (!verifyIsElementDisplayed(AMDPlayerScreen.objPause)) {
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
				click(AMDPlayerScreen.objPause, "Pause icon");
			} else {
				click(AMDPlayerScreen.objPause, "Pause icon");
			}

			// Check if the content is already added tio watchlist
			if (verifyIsElementDisplayed(AMDGenericObjects.objAddToWatchlistCTA)) {
				verifyElementPresentAndClick(AMDGenericObjects.objAddToWatchlistCTA, "AddToWatchlist button");
				waitTime(3000);
			} else if (verifyIsElementDisplayed(AMDGenericObjects.objAdded_WatchlistCTA)) {
				extent.extentLogger("Watchlist", "Content is already added to Watchlist");
				logger.info("Content is already added to Watchlist");
			} else {
				extent.extentLoggerFail("Watchlist", "Watchlist button is not displayed");
				logger.info("Watchlist button is not displayed");
			}
			Back(1);
			watchListScreen(contentName, tabName);
			waitTime(3000);
			break;

		case "SUBSCRIBEDUSER":
			verifyElementPresentAndClick(AMDConsumptionScreen.objWatchlistBtn, "Watchlist button");
			waitTime(3000);
			Back(1);
			watchListScreen(contentName, tabName);
			waitTime(3000);
			break;

		}
	}
/**
 * Verifying the watch list screen
 * @param contentName
 * @param tabName
 * @throws Exception
 */
	public void watchListScreen(String contentName, String tabName) throws Exception {

		verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
		verifyElementPresentAndClick(AMDMoreMenu.objWatchlist, "Watch list in More menu");

		if (tabName.equalsIgnoreCase("Movies")) {
			click(AMDWatchlistPage.objMoviesTab, "Movies tab");
		} else if (tabName.equalsIgnoreCase("Music") || tabName.equalsIgnoreCase("News")) {
			click(AMDWatchlistPage.objVideosTab, "Videos tab");
		} else {
			click(AMDWatchlistPage.objShowsTab, "Shows tab");
		}

		if (tabName.equalsIgnoreCase("Episode")) {

			boolean isContentPresent = false;
			ArrayList<String> showNamesInWatchList = new ArrayList<>();
			ArrayList<String> contentNamesInWatchList = new ArrayList<>();
			int showSize = getDriver().findElements(AMDWatchlistPage.objContentNames).size();
			for (int i = 1; i <= showSize; i++) {
				String showName = getText(AMDWatchlistPage.objContentName(i));
				showNamesInWatchList.add(showName);

				click(AMDWatchlistPage.objContentName(i), showName);
				int itemSize = getDriver().findElements(AMDWatchlistPage.objContentNames).size();
				for (int j = 1; j <= itemSize; j++) {
					String getContentName = getText(AMDWatchlistPage.objContentName(j));
					contentNamesInWatchList.add(getContentName);
				}
				Back(1);

				if (contentNamesInWatchList.contains(contentName) || showNamesInWatchList.contains(contentName)) {
					isContentPresent = true;
					break;
				}

			}
			waitTime(3000);

			if (isContentPresent) {
				extent.extentLoggerPass("Verify Watchlist", "The added content is displayed under Watchlist screen");
				logger.info("The added content is displayed under Watchlist screen");
			} else {
				extent.extentLoggerFail("Verify Watchlist",
						"The added content is not displayed under Watchlist screen");
				logger.info("The added content is not displayed under Watchlist screen");
			}
		} else {
			// Verify added contents are displayed
			ArrayList<String> contentsInWatchList = new ArrayList<>();
			int size = getDriver().findElements(AMDWatchlistPage.objContentNames).size();
			for (int i = 1; i <= size; i++) {
				String titleName = getText(AMDWatchlistPage.objContentName(i));
				contentsInWatchList.add(titleName);
			}
			waitTime(5000);
			boolean isContentPresent = contentsInWatchList.contains(contentName);
			if (isContentPresent) {
				extent.extentLoggerPass("Verify Watchlist", "The added content is displayed in Watchlist screen");
				logger.info("The added content is displayed in Watchlist screen");
			} else {
				extent.extentLoggerFail("Verify Watchlist", "The added content is not displayed in Watchlist screen");
				logger.info("The added content is not displayed in Watchlist screen");
			}
		}

		boolean isNoContents = verifyIsElementDisplayed(AMDWatchlistPage.objNoContentsMessage);
		if (!isNoContents) {
			click(AMDWatchlistPage.objEditBtn, "Edit button");
			click(AMDWatchlistPage.objSelectAllIcon, "Select all icon");
			click(AMDWatchlistPage.objDeleteAllBtn, "Delete All icon");
			isNoContents = verifyIsElementDisplayed(AMDWatchlistPage.objNoContentsMessage);
			if (isNoContents) {
				extent.extentLoggerPass("Remove Content from watchlist", "Content is removed from the watchlist");
				logger.info("Content is removed from the watchlist");
			} else {
				extent.extentLoggerFail("Remove Content from watchlist", "Content is not removed from the watchlist");
				logger.info("Content is not removed from the watchlist");
			}
		} else {
			extent.extentLogger("Remove Content from watchlist", "There is no content to remove from Watchlist screen");
			logger.info("There is no content to remove from Watchlist screen");
		}
		Back(2);
		verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search button");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search bar");
		hideKeyboard();
		if (tabName.equals("Music")) {
			click(AMDSearchScreen.objFirstSearchResult(contentName), "Search result");
		} else {
			click(AMDSearchScreen.objFirstResult, "Search result");
		}
	}
/**
 * @Note Verifying teh funsctionality of Download CTA
 * @param userType
 * @param tabName
 * @param contentName
 * @throws Exception
 */
	public void DownloadFunctionality(String userType, String tabName, String contentName) throws Exception {
		extent.HeaderChildNode("Verify Download CTA Functionality");
		System.out.println("\nVerify Download CTA Functionality");

		if (userType.equals("Guest")) {
			boolean isDwnld = verifyIsElementDisplayed(AMDConsumptionScreen.objDownloadBtn);
			if (isDwnld) {
				click(AMDConsumptionScreen.objDownloadBtn, "Download button");
				String header = getText(AMDGenericObjects.objgetScreenTitle);
				if (header.equals("Login/Register")) {
					extent.extentLoggerPass("Download", userType + " user is navigated to " + header
							+ " screen post tapping Download CTA form consumption screen");
					logger.info(userType + " user is navigated to " + header
							+ " screen post tapping Download CTA form consumption screen");
					waitTime(3000);
					click(AMDGenericObjects.objBackBtn, "Back button");

					if (userType.equals("Guest") | userType.equals("NonSubscribedUser")) {
						if (tabName.equals("Episode") | tabName.equals("Movies")) {
							click(AMDPlayerScreen.objPauseIcon, "Pause icon");
						}
					}
				} else {
					extent.extentLoggerFail("Download",
							"Failed to navigate into respective screen after clicking Download CTA");
					logger.info("Failed to navigate into respective screen after clicking download CTA");
				}
			} else {
				extent.extentLogger("Download CTA", "Download CTA is not available");
				logger.info("Download CTA is not available");
			}

		} else if (userType.equals("SubscribedUser")) {

			boolean isDwnld = verifyIsElementDisplayed(AMDConsumptionScreen.objDownloadBtn);
			if (isDwnld) {
				click(AMDConsumptionScreen.objDownloadBtn, "Download button");
				waitTime(5000);
				boolean popUp = verifyIsElementDisplayed(AMDDownloadPage.objDownloadVideoQualityPopup);
				if (popUp) {
					String popUptitle = getText(AMDDownloadPage.objDownloadVideoQualityPopup);
					extent.extentLoggerPass("Verify header", popUptitle + " is displayed");
					logger.info(popUptitle + " pop up is displayed");

					if (tabName.equals("Shows") || tabName.equals("Episode") || tabName.equals("Movies")
							|| tabName.equals("Music")) {
						PartialSwipe("UP", 1);
						waitTime(2000);
						click(AMDConsumptionScreen.objStartDowloadBtn, "Start Download button");
						waitTime(3000);
						boolean isDownloading = verifyIsElementDisplayed(AMDDownloadPage.objDownloadingCircularBar);
						boolean isDownloaded = verifyIsElementDisplayed(AMDDownloadPage.objDownloadedIcon);
						if (isDownloading) {
							extent.extentLoggerPass("Downloading Icon",
									"Downloading Icon is displayed in the Consumption Screen after initiating download");
							logger.info(
									"Downloading Icon is displayed in the Consumption Screen after initiating download");
						} else if (isDownloaded) {
							extent.extentLoggerPass("Downloaded Icon",
									"Download Completed Icon is displayed in the Consumption Screen after initiating download");
							logger.info(
									"Download Completed Icon is displayed in the Consumption Screen after initiating download");
						} else {
							extent.extentLoggerFail("Downloading Icon",
									"Downloading Icon is Not displayed in the Consumption Screen even after initiating download");
							logger.info(
									"Downloading Icon is Not displayed in the Consumption Screen even after initiating download");
						}

						// ***** Pause/Cancel/GotoDownload option is not displayed for downloading
						// content in consumption screen hence commenting the below validations
						/*
						 * boolean isPauseDwld =
						 * verifyIsElementDisplayed(AMDConsumptionScreen.objPauseDownload); if
						 * (isPauseDwld) { extent.extentLoggerPass("Pause download",
						 * "Pause Download call-out option is available");
						 * logger.info("Pause Download call-out option is available"); } else {
						 * extent.extentLoggerFail("Pause download",
						 * "Pause Download call-out option is not available");
						 * logger.info("Pause Download call-out option is not available"); } boolean
						 * isCancelDwld =
						 * verifyIsElementDisplayed(AMDConsumptionScreen.objPauseDownload); if
						 * (isCancelDwld) { extent.extentLoggerPass("Cancel download",
						 * "Cancel Download call-out option is available");
						 * logger.info("Cancel Download call-out option is available"); } else {
						 * extent.extentLoggerFail("Cancel download",
						 * "Cancel Download call-out option is not available");
						 * logger.info("Cancel Download call-out option is not available"); } boolean
						 * isGoToDwld = verifyIsElementDisplayed(AMDConsumptionScreen.objPauseDownload);
						 * if (isGoToDwld) { extent.extentLoggerPass("Go to downloads",
						 * "Go to Download call-out option is available");
						 * logger.info("Go to Download call-out option is available"); } else {
						 * extent.extentLoggerFail("Go to download",
						 * "Go to Download call-out option is not available");
						 * logger.info("Go to Download call-out option is not available"); }
						 * 
						 * if (tabName.equals("Shows") | tabName.equals("Episode")) {
						 * click(AMDConsumptionScreen.objCancelDownload, "Cancel Download call-out"); }
						 * else if (tabName.equals("Movies")) { waitTime(2000);
						 * click(AMDConsumptionScreen.objGotoDownloads, "Go to Download call-out");
						 * 
						 * String isSelected = getElementPropertyToString("selected",
						 * AMDDownloadPage.objmoviestab, "Movies tab"); System.out.println(isSelected);
						 * if (isSelected.equals("true")) {
						 * extent.extentLoggerPass("Go to Download call-out", "User is navigated to '" +
						 * getText(AMDDownloadPage.objmoviestab) + "'in download screen from tab " +
						 * tabName); logger.info("User is navigated to '" +
						 * getText(AMDDownloadPage.objmoviestab) + "'in download screen from tab " +
						 * tabName); } else { extent.extentLoggerFail("Go to Download call-out",
						 * "Failed to navigate to respective download screen after click on Goto download call-out from tab "
						 * + tabName); logger.info(
						 * "Failed to navigate to respective download screen after click on Goto download call-out from tab "
						 * + tabName); }
						 * 
						 * click(AMDDownloadPage.objDownloadProgressIcon, "Download status");
						 * click(AMDDownloadPage.objCancelDownloadOption, "Cancel download");
						 * 
						 * 
						 * Back(1); click(AMDHomePage.objHomeBtn, "Home tab"); waitTime(3000);
						 * verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search button");
						 * verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
						 * type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search bar");
						 * hideKeyboard(); if (tabName.equals("Music")) {
						 * click(AMDSearchScreen.objSecondSearchResult(contentName), "Search result"); }
						 * else if (tabName.equals("Episode")) { click(AMDSearchScreen.objEpisodeSearch,
						 * "Search result"); } else {
						 * click(AMDSearchScreen.objFirstSearchResult(contentName), "Search result"); }
						 * waitTime(2000); }
						 */

						Back(2);
						waitTime(1000);
						click(AMDHomePage.objHomeBottomBtn, "Home tab");
						waitTime(3000);
						verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search button");
						verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
						type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search bar");
						hideKeyboard();
						waitTime(2000);
						click(AMDSearchScreen.objFirstResult, "Search result");
						waitTime(6000);
						click(AMDPlayerScreen.objPlayerScreen, "Player screen");
						click(AMDPlayerScreen.objPauseIcon, "Pause");
					}
				} else {
					extent.extentLoggerFail("Verify header", "Download PopUp is not displayed");
					logger.info("Download PopUp is not displayed");
				}
			}
		} else if (userType.equals("NonSubscribedUser")) {
			boolean isDwnld = verifyIsElementDisplayed(AMDConsumptionScreen.objDownloadBtn);
			if (isDwnld) {
				click(AMDConsumptionScreen.objDownloadBtn, "Download button");
				waitTime(3000);
				boolean popUp = verifyIsElementDisplayed(AMDConsumptionScreen.objPopUp);
				if (popUp) {
					String popUptitle = getText(AMDConsumptionScreen.objPopUp);
					extent.extentLoggerPass("Verify header", popUptitle + " is displayed");
					logger.info(popUptitle + " pop up is displayed");
					Back(1);
					if (userType.equals("Guest") | userType.equals("NonSubscribedUser")) {
						if (tabName.equals("Episode") | tabName.equals("Movies")) {
							click(AMDPlayerScreen.objPlayerScreen, "Player screen");
							click(AMDPlayerScreen.objPauseIcon, "Pause icon");
							scrubVideoToBegining(AMDPlayerScreen.objProgressBar);
						}
					}

				} else {
					extent.extentLoggerFail("Verify header", "PopUp title is not displayed");
					logger.info("PopUp title is not displayed");
				}
			} else {
				extent.extentLogger("Download CTA", "Download CTA is not available");
				logger.info("Download CTA is not available");
			}

		}
	}
/**
 * Validating the functionality of watch trailer
 * @param userType
 * @param tabName
 * @param contentName
 * @throws Exception
 */
	public void watchTrailer(String userType, String tabName, String contentName) throws Exception {
		HeaderChildNode("Verify Watch Trailer Functionality");
		System.out.println("\nVerify Watch Trailer Functionality");

		if (tabName.equalsIgnoreCase("Music")) {
			extent.extentLoggerPass("Watch Trailer", "Watch Trailer CTA is not available for Music/Videos");
			logger.info("Watch Trailer CTA is not available for Music/Videos");
			if (verifyIsElementDisplayed(AMDPlayerScreen.objPause)) {
				click(AMDPlayerScreen.objPause, "Pause");
				scrubVideoToBegining(AMDPlayerScreen.objProgressBar);
			}
		} else {
			waitForElementDisplayed(AMDConsumptionScreen.objWatchTrialer, 15);
		}

		// Verify watch trailer
		boolean isWatchTrailer = verifyIsElementDisplayed(AMDConsumptionScreen.objWatchTrialer);
		if (isWatchTrailer) {
			click(AMDConsumptionScreen.objWatchTrialer, "Watch Trialer");
			waitTime(2000);
			if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
				if (verifyIsElementDisplayed(AMDPlayerScreen.objAd2)) {
					waitForAdToFinishInAmd();
				} else if (!verifyIsElementDisplayed(AMDPlayerScreen.objPause)) {
					click(AMDPlayerScreen.objPlayerScreen, "Player screen");
					click(AMDPlayerScreen.objPause, "Pause icon");
					scrubVideoToBegining(AMDPlayerScreen.objProgressBar);
				} else {
					click(AMDPlayerScreen.objPause, "Pause icon");
				}

			} else {
				waitTime(2000);
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
				click(AMDPlayerScreen.objPause, "Pause icon");
				scrubVideoToBegining(AMDPlayerScreen.objProgressBar);
			}

			String contentTitle = getText(AMDConsumptionScreen.objContentName);
			String contentInfo = getText(AMDConsumptionScreen.objContentInfo);
			if (contentTitle.contains("Trailer") | contentInfo.contains("Trailer")) {
				extent.extentLoggerPass("Watch Trailer",
						"User is navigated to Trailer consumption screen from the tab " + tabName);
				logger.info("User is navigated to Trailer consumption screen from the tab " + tabName);
			} else {
				extent.extentLoggerFail("Watch Trailer", "Failed to navigated to Trailer consumption screen");
				logger.info("Failed to navigated to Trailer consumption screen");
			}

			// Verify download CTA is not available in Trialer consumption screen
			boolean isDownload = verifyIsElementDisplayed(AMDConsumptionScreen.objDownloadBtn);
			if (isDownload) {
				extent.extentLoggerPass("Download",
						"Download option is displayed in Trailer/Promo consumption screen for content : '" + contentName
								+ "'");
				logger.info("Download option is displayed in Trailer/Promo consumption screen for content : '"
						+ contentName + "'");
			} else {
				extent.extentLoggerFail("Download",
						"Download option is not available in Trailer/Promo consumption screen for content : '"
								+ contentName + "'");
				logger.info("Download option is not available in Trailer/Promo consumption screen for content : '"
						+ contentName + "'");
			}

			if (userType.equals("Guest") | userType.equals("NonSubscribedUser")) {
				if (tabName.equals("Episode") | tabName.equals("Movies")) {
					click(AMDPlayerScreen.objPlayerScreen, "Player screen");
					scrubVideoToBegining(AMDPlayerScreen.objProgressBar);
					click(AMDPlayerScreen.objPauseIcon, "Pause icon");
				}
			}

		} else {
			extent.extentLogger("Watch Trailer", "Watch Trailer CTA is not available");
			logger.info("Watch Trailer CTA is not available");
		}
	}
/**
 * verifying teh Audio language functionality of the content
 * @param userType
 * @param contentName
 * @param tabName
 * @throws Exception
 */
	public void audioLanguage(String userType, String contentName, String tabName) throws Exception {
		extent.HeaderChildNode("Verify Audio Language functionality for \"" + tabName + "\" content");
		System.out.println("\nVerify Audio Language functionalityfor \"" + tabName + "\" content");
		waitTime(2000);

		if (tabName.equalsIgnoreCase("Music") && verifyIsElementDisplayed(AMDPlayerScreen.objPlay)) {
			click(AMDPlayerScreen.objPlay, "Play button");
		}

		boolean isCurrentLang = verifyIsElementDisplayed(AMDConsumptionScreen.objCurrentAudioLanguage);
		if (isCurrentLang) {
			extent.extentLogger("Tab name", "Verifying audio language for the content :" + contentName);
			logger.info("Verifying audio language for the content :" + contentName);
			extent.extentLoggerPass("Default Audio Language", "By default the selected audio language is : "
					+ getText(AMDConsumptionScreen.objCurrentAudioLanguage));
			logger.info("By default the selected audio language is : "
					+ getText(AMDConsumptionScreen.objCurrentAudioLanguage));

			// Verify the Audio language
			click(AMDConsumptionScreen.objCurrentAudioLanguage, "Audio Language");
			waitTime(1000);
			boolean isPopUp = verifyIsElementDisplayed(AMDConsumptionScreen.objAudioLanguagepopup);
			if (isPopUp) {
				extent.extentLoggerPass("Verify Audio Language", "Audio Language Pop up is displayed");
				int size = getDriver().findElements(AMDConsumptionScreen.objSubtitleAndAudioLangItems).size();
				if (size == 0) {
					extent.extentLogger("Verify the audio languages",
							"There is no Audio languages availabel for the content : " + contentName);
					logger.info("There is no Audio languages availabel for the content : " + contentName);
				} else {
					for (int i = 1; i <= size; i++) {
						String AudioLanguageName = getText(AMDConsumptionScreen.objSubtitleAndAudioLangItems(i));
						extent.extentLogger("Verify Audio language", "Audio Language :" + AudioLanguageName);
						logger.info("Audio Language :" + AudioLanguageName);
					}
					Back(1);
					waitTime(500); // ---Wait to close the popup
					boolean playBtn = verifyIsElementDisplayed(AMDPlayerScreen.objPlay);
//					boolean pauseIcon = verifyIsElementDisplayed(AMDPlayerScreen.objPause);
					if (!playBtn) {
						extent.extentLoggerPass("Verify Playback",
								"Playback is Auto played after closing the Audio Language Popup");
						logger.info("Playback is Auto played after closing the Audio Language Popup");

						if (verifyIsElementDisplayed(AMDPlayerScreen.objPause)) {
							click(AMDPlayerScreen.objPause, "Pause");
							scrubVideoToBegining(AMDPlayerScreen.objProgressBar);
						}
					} else {
						extent.extentLoggerFail("Verify Playback",
								"Failed to Resume the playback after closing Audio Language Popup");
						logger.info("Failed to Resume the playback after closing Audio Language Popup");
					}
				}
			} else {
				extent.extentLoggerFail("Audio language", "The Audio language Pop up is not displayed");
				logger.info("The Audio language Pop up is not displayed");
			}

		} else {
			extent.extentLogger("Audio Language",
					"No default audio language is available for the content :" + contentName);
			logger.info("No default audio language is available for the content :" + contentName);
		}
	}
/**
 * @Note Method will scrub the video content to the Begining of the video
 * @param byLocator1
 * @throws Exception
 */
	public void scrubVideoToBegining(By byLocator1) throws Exception {

		WebElement element = getDriver().findElement(byLocator1);
		Dimension size = element.getSize();
		int startx = (int) (size.width);
		int startX = startx + 100;
		System.out.println(startX);
		SwipeAnElement(element, 0, startX);
		waitTime(2000);
	}
/**
 * Method will verify the Subtitles and its functionality
 * @param userType
 * @param contentName
 * @param tabName
 * @throws Exception
 */
	public void subTitles(String userType, String contentName, String tabName) throws Exception {
		extent.HeaderChildNode("Verify Subtitles functionality for \"" + tabName + "\" content");
		System.out.println("\nVerify Subtitles functionality for \"" + tabName + "\" content");

		if (tabName.equals("Music")) {
			boolean isCurrentLang = verifyIsElementDisplayed(AMDConsumptionScreen.objCurrentSubTitle);
			if (isCurrentLang) {
				extent.extentLoggerFail("Music tab", "Subtitle is available for the Music content");
				logger.info("Subtitle is available for the Music content");
			} else {
				extent.extentLoggerPass("Music tab", "Subtitle is not available for Music tab");
				logger.info("Subtitle is not available for Music tab");
			}
		} else {
			boolean isCurrentSub = verifyIsElementDisplayed(AMDConsumptionScreen.objCurrentSubTitle);
			if (isCurrentSub) {
				String defaultSubtitle = getText(AMDConsumptionScreen.objCurrentSubTitle);
				if (defaultSubtitle.equalsIgnoreCase("Off")) {
					extent.extentLogger("Tab name", "Verifying Subtitle option  for the content : " + contentName);
					extent.extentLoggerPass("Default Subtitle ",
							"By default the selected Subtitle  is : " + defaultSubtitle);
					logger.info("By default the selected Subtitle  is : " + defaultSubtitle);
				} else {
					extent.extentLoggerFail("Verify default subtitle", "By default Subtitle is not displayed as 'Off'");
					logger.info("By default Subtitle is not displayed as 'Off'");
				}
				// Verify Subtitle
				click(AMDConsumptionScreen.objCurrentSubTitle, "Subtitle");
				waitTime(1000);
				boolean isPopUp = verifyIsElementDisplayed(AMDConsumptionScreen.objAudioLanguagepopup);
				if (isPopUp) {
					extent.extentLoggerPass("Verify Sutitle PopUp", "Subtitles Pop up is displayed");
					int size = getDriver().findElements(AMDConsumptionScreen.objSubtitleAndAudioLangItems).size();
					if (size == 0) {
						extent.extentLogger("Verify the Subtiles",
								"There is no Subtitles available for the content : " + contentName);
						logger.info("There is no Subtitles availabel for the content : " + contentName);
					} else {
						for (int i = 1; i <= size; i++) {
							String SubtitleName = getText(AMDConsumptionScreen.objSubtitleAndAudioLangItems(i));
							extent.extentLogger("Verify Subtitle ", "Subtitle :" + SubtitleName);
							logger.info("Subtitle :" + SubtitleName);
						}
						Back(1);
						waitTime(500); // Wait to close popup
						boolean playBtn = verifyIsElementDisplayed(AMDPlayerScreen.objPlay);
//						boolean pauseIcon = verifyIsElementDisplayed(AMDPlayerScreen.objPause);
						if (!playBtn) {
							extent.extentLoggerPass("Verify Playback",
									"Playback is Auto played after closing the Subtitle Popup");
							logger.info("Playback is Auto played after closing the Subtitle Popup");

							if (verifyIsElementDisplayed(AMDPlayerScreen.objPause)) {
								click(AMDPlayerScreen.objPause, "Pause button");
								scrubVideoToBegining(AMDPlayerScreen.objProgressBar);
							}

						} else {
							extent.extentLoggerFail("Verify Playback",
									"Failed to Resume the playback after closing Subtitle Popup");
							logger.info("Failed to Resume the playback after closing Subtitle Popup");
						}
					}
				} else {
					extent.extentLoggerFail("Subtitle", "The Subtitle Pop up is not displayed");
					logger.info("The Subtitle Pop up is not displayed");
				}
			} else {
				extent.extentLogger("Default subtitle ", "Subtitle is not available for the content :" + contentName);
				logger.info("Subtitle is not available for the content :" + contentName);
			}
		}
	}
/**
 * @Note Verifying the configured trays 
 * @param userType
 * @param tabName
 * @throws Exception
 */
	public void validateConfiguredRails(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("Verify Configured trays for \"" + tabName + "\" content");
		System.out.println("\nVerify Configured trays for \"" + tabName + "\" content");

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (tabName.equals("Episode") || tabName.equals("Movies")) {
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
				click(AMDPlayerScreen.objPauseIcon, "Pause");
				scrubVideoToBegining(AMDPlayerScreen.objProgressBar);
			}
		}

		if (tabName.equals("Shows") || tabName.equals("Episode")) {

			boolean upnextRail = verifyIsElementDisplayed(AMDGenericObjects.objCarouselTitle("Up Next"));
			if (upnextRail) {
				PartialSwipeInConsumptionScreen("UP", 1);
				waitTime(3000);
				int size = getDriver().findElements(AMDGenericObjects.objContentNameInTray).size();
				ArrayList<String> contentName = new ArrayList<>();
				for (int i = 1; i <= size; i++) {
					contentName.add(getText(AMDGenericObjects.objContentNameInTray(i)));
				}
				for (int j = 0; j < contentName.size(); j++) {
					extent.extentLoggerPass("Content name",
							"The content Name at index " + (j + 1) + " is " + contentName.get(j));
					logger.info("The content Name at index " + (j + 1) + " is " + contentName.get(j));
				}

				String firstContentName = getText(AMDGenericObjects.objContentNameInTray(1));
				SwipeRailContentCards(AMDGenericObjects.objCarouselTitle("Up Next"));
				String secondContentName = getText(AMDGenericObjects.objContentNameInTray(3));
				if (!firstContentName.equals(secondContentName)) {
					extent.extentLoggerPass("Swipe", "User can Swipe the content cards from 'Up Next Rail'");
					logger.info("User can Swipe the content cards from 'Up Next Rail'");
				} else {
					extent.extentLoggerFail("Swipe", "User can not Swipe the content cards from 'Up Next Rail'");
					logger.info("User can not Swipe the content cards from 'Up Next Rail'");
				}
				extent.extentLoggerPass("Verify tray",
						"Upnext Rail is displayed in consumption screen for the tab :" + tabName);
				logger.info("Upnext Rail is displayed in consumption screen for the tab :" + tabName);

				// ****** Verify the navigation
//			 waitTime(3000);
//			 waitForElementDisplayed(AMDConsumptionScreen.objArrow, 10000); 
//			 verifyElementPresentAndClick(AMDGenericObjects.objViewAllBtn("Up Next"),"Right Arrow in Upnext tray");

//			 String header =  getText(AMDGenericObjects.objCheckTitle("Up Next"));
//			 if(header.equalsIgnoreCase("Up Next")) {
//				 extent.extentLoggerPass("Collection screen", 
//						 "User is navigated to Upnext collection screen by tapping Arrow mark from Upnext Rail");
//				 logger.info("User is navigated to Upnext collection screen by tapping Arrow mark from Upnext Rail");
//			 }else {
//				 extent.extentLogger("Collection screen", 
//						 "Failed to navigated to Upnext collection screen by tapping Arrow mark from Upnext Rail");
//				 logger.info("Failed to navigated to Upnext collection screen by tapping Arrow mark from Upnext Rail");
//			 }

			}
		}

		if (tabName.equals("Movies")) {

			String railName = "Related Videos";
			PartialSwipeInConsumptionScreen("UP", 1);
			waitTime(2000);

			boolean relatedMovies = verifyIsElementDisplayed(AMDGenericObjects.objCarouselTitle(railName));
			if (relatedMovies) {
				extent.extentLoggerPass("Verify tray",
						railName + " rail is displayed in the consumption screen for the " + tabName + " content");
				logger.info(railName + " rail is displayed in the consumption screen for the " + tabName + " content");

				// ****** Verify the navigation
				waitTime(3000);
				verifyElementPresentAndClick(AMDConsumptionScreen.objRightArrow(railName), "Right Arrow-" + railName);
				String header = getText(AMDGenericObjects.objCheckTitle(railName));
				if (header.equalsIgnoreCase(railName)) {
					extent.extentLoggerPass("Collection screen", "User is navigated to the " + railName
							+ " collection screen by tapping Arrow mark from " + railName);
					logger.info("User is navigated to " + railName + " collection screen by tapping Arrow mark from "
							+ railName);
					click(AMDConsumptionScreen.objBackFrmCollectionscreen, "Back button");
				} else {
					extent.extentLoggerFail("Collection screen",
							"Failed to navigated to collection screen by tapping Arrow mark from rail: " + railName);
					logger.info(
							"Failed to navigated to collection screen by tapping Arrow mark from rail: " + railName);
				}

			}
		}

		if (tabName.equals("Music")) {

			String railName = "Recommended Songs";
			waitTime(2000);
			PartialSwipeInConsumptionScreen("UP", 4);
			waitTime(2000);

			boolean recommendedRail = verifyIsElementDisplayed(AMDGenericObjects.objCarouselTitle(railName));
			if (recommendedRail) {
				extent.extentLoggerPass("Verify tray",
						railName + " Rail is displayed in consumption screen for Music content");
				logger.info(railName + " Rail is displayed in consumption screen for Music content");

				// ****** Verify the navigation
				waitTime(3000);
				verifyElementPresentAndClick(AMDConsumptionScreen.objRightArrow(railName), "Right Arrow-" + railName);
				String header = getText(AMDGenericObjects.objCheckTitle(railName));
				if (header.equalsIgnoreCase(railName)) {
					extent.extentLoggerPass("Collection screen", "User is navigated to the " + railName
							+ " collection screen by tapping Arrow mark from " + railName);
					logger.info("User is navigated to " + railName + " collection screen by tapping Arrow mark from "
							+ railName);
					click(AMDConsumptionScreen.objBackFrmCollectionscreen, "Back button");
					waitTime(1000);
					PartialSwipeInConsumptionScreen("DOWN", 4);
				} else {
					extent.extentLoggerFail("Collection screen",
							"Failed to navigated to collection screen by tapping Arrow mark from " + railName
									+ " Rail");
					logger.info("Failed to navigated to collection screen by tapping Arrow mark from " + railName
							+ " Rail");
				}
			} else {
				extent.extentLogger("Recommended Rail", "Recommended Rail is not available for Music content");
				logger.info("Recommended Rail is not available for Music content");
			}
		}
	}

	/**
	 * Author : Bhavana Module : Club package
	 * validation of Club pack features
	 */

	public void clubPackFeaturesValidation(String userType, String searchcontent) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			System.out.println("Validating Subscribe CTA present on player for club content without trailer");
			verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
			waitTime(2000);
			verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBar, searchcontent, "Search bar");
			waitTime(2000);
			click(AMDSearchScreen.objFirstContentInSearchResult, "Searched result");
			waitTime(5000);
			verifyElementExist(AMDClubPack.objSubscribeinfoOnPlayer, "Subscribe info on the player for Club content");
			if (verifyIsElementDisplayed(AMDClubPack.objSubscribeinfoOnPlayer)) {
				String text = getText(AMDClubPack.objSubscribeinfoOnPlayer);
				System.out.println(text);
				logger.info(text + " is displayed on player for club content");
				extent.extentLoggerPass("Consumption screen", text + " is displayed on player for club content");
			} else {
				logger.error(
						getText(AMDClubPack.objSubscribeinfoOnPlayer) + " is NOT displayed on player for club content");
				extent.extentLoggerFail("Consumption screen",
						getText(AMDClubPack.objSubscribeinfoOnPlayer) + " is NOT displayed on player for club content");
			}
			verifyElementExist(AMDClubPack.objSubscribetoClubCTAOnPlayer,
					"Subscribe to Club CTA on player for club content");
			verifyElementExist(AMDClubPack.objLoginCTAOnPlayer, "Login CTA on player for club content");
			verifyElementExist(AMDClubPack.objGetClubCTABelowPlayer, "Get Club CTA below the player");
			if (verifyIsElementDisplayed(AMDClubPack.objSubscribetoClubCTAOnPlayer)) {
				click(AMDClubPack.objSubscribetoClubCTAOnPlayer, "Subscribe to Club CTA on player for club content");
			}
			waitTime(3000);
			verifyElementExist(AMDClubPack.objSubscribePopup, "Subscribe popup");
			verifyElementExist(AMDClubPack.objPlanlistonSubscribePopup, "Pack list");
			verifyElementExist(AMDClubPack.objClubPackPlan, "Club Pack plan");
			verifyElementExist(AMDClubPack.objClubIconforClubPlan, "Only Club Icon for Club pack plan");
			verifyElementExist(AMDClubPack.objPremiumIconInSubscribePopup, "Premium Icon for All Acess plan");
			verifyElementExist(AMDClubPack.objClubIconInSubscribePopup, "Club Icon for All Acess plan");

			String Plan1 = getText(AMDClubPack.objPack1InSubscribePopup);
			System.out.println(Plan1);
			logger.info("Plan 1 " + Plan1 + " is displayed");
			extent.extentLogger("Subscribe to Club popup", "Plan 1 " + Plan1 + " is displayed");

			String Plan2 = getText(AMDClubPack.objPack2InSubscribePopup);
			System.out.println(Plan2);
			logger.info("Plan 2 " + Plan2 + " is displayed");
			extent.extentLogger("Subscribe to Club popup", "Plan 2 " + Plan2 + " is displayed");

			String Plan3 = getText(AMDClubPack.objPack3InSubscribePopup);
			System.out.println(Plan3);
			logger.info("Plan 3 " + Plan3 + " is displayed");
			extent.extentLogger("Subscribe to Club popup", "Plan 3 " + Plan3 + " is displayed");

			String Plan4 = getText(AMDClubPack.objPack4InSubscribePopup);
			System.out.println(Plan4);
			logger.info("Plan 4 " + Plan4 + " is displayed");
			extent.extentLogger("Subscribe to Club popup", "Plan 4 " + Plan4 + " is displayed");

			String Plan5 = getText(AMDClubPack.objPack5InSubscribePopup);
			System.out.println(Plan5);
			logger.info("Plan 5 " + Plan5 + " is displayed");
			extent.extentLogger("Subscribe to Club popup", "Plan 5 " + Plan5 + " is displayed");

			if (verifyIsElementDisplayed(AMDClubPack.objProceedButtonInSubscribePopup)) {
				click(AMDClubPack.objProceedButtonInSubscribePopup, "Proceed Button in Subcribe popup");
			}
			waitTime(4000);
			if (verifyIsElementDisplayed(AMDClubPack.objAcountInfoInSubscribePage)) {
				logger.info("User is navigated to Acount info screen on selecting club plan");
				extent.extentLoggerPass("Subscribe popup",
						"User is navigated to Acount info screen on selecting club plan");
			} else {
				logger.error("User is unable to navigate to Acount info screen on selecting club plan");
				extent.extentLoggerFail("Subscribe popup",
						"User is unable to navigate to Acount info screen on selecting club plan");
			}
			Back(1);
			click(AMDClubPack.objLoginCTAOnPlayer, "Login CTA on player for club content");
			waitTime(4000);
			if (verifyIsElementDisplayed(AMDClubPack.objLoginScreen)) {
				String Username = getParameterFromXML("ClubUserName");
				String Password = getParameterFromXML("ClubPassword");
				verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
				type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
				verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
				verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
				type(AMDLoginScreen.objPasswordField, Password, "Password field");
				hideKeyboard();
				verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
				waitTime(5000);
			}
			if (verifyIsElementDisplayed(AMDPlayerScreen.objPlayerScreen)) {
				logger.info("User is navigated back to consumption screen on successfull login");
				extent.extentLoggerPass("Consumption screen",
						"User is navigated back to consumption screen on successfull login");
			} else {
				logger.error("User fails to navigate back to consumption screen on successfull login");
				extent.extentLoggerFail("Consumption screen",
						"User fails to navigate back to consumption screen on successfull login");
			}
			Back(1);
			click(AMDHomePage.HomeIcon, "Home Icon");
			zNALogoutMethod();
			waitTime(4000);
			validateSubscribepopupForPremiumContent("Prema Baraha");
		}
	}
/**
 * Validating the subscribe popup for Premium content
 * @param searchcontent
 * @throws Exception
 */
	public void validateSubscribepopupForPremiumContent(String searchcontent) throws Exception {
		System.out.println("Validating Subscribe popup for Premium content");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		waitTime(2000);
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBar, searchcontent, "Search bar");
		waitTime(2000);
		click(AMDSearchScreen.objFirstContentInSearchResult(searchcontent), "Searched result");
		waitTime(5000);
		click(AMDClubPack.objSubscribetoPremiumCTAOnPlayer, "Subscribe to Premium CTA");
		verifyElementExist(AMDClubPack.objSubscribePopup, "Subscribe popup");
		Swipe("UP", 1);
		String Plan1 = getText(AMDClubPack.objPack1InSubscribePopup);
		System.out.println(Plan1);
		logger.info("Plan 1 " + Plan1 + " is displayed");
		extent.extentLogger("Subscribe to Premium popup", "Plan 1 " + Plan1 + " is displayed");

		String Plan2 = getText(AMDClubPack.objPack2InSubscribePopup);
		System.out.println(Plan2);
		logger.info("Plan 2 " + Plan2 + " is displayed");
		extent.extentLogger("Subscribe to Premium popup", "Plan 2 " + Plan2 + " is displayed");

		Swipe("UP", 1);

		String Plan3 = getText(AMDClubPack.objPack3InSubscribePopup);
		System.out.println(Plan3);
		logger.info("Plan 3 " + Plan3 + " is displayed");
		extent.extentLogger("Subscribe to Premium popup", "Plan 3 " + Plan3 + " is displayed");

//		String Plan4 = getText(AMDClubPack.objPack4InSubscribePopup);
//		System.out.println(Plan4);
//		logger.info("Plan 4 " + Plan4 + " is displayed");
//		extent.extentLogger("Subscribe to Premium popup", "Plan 4 " + Plan4 + " is displayed");
		Back(2);
		click(AMDHomePage.HomeIcon, "Home Icon");
	}

	/**
	 * Author : Kushal
	 * Login Functionality
	 */

	public void zeeApplicasterLoginForClubPack(String LoginMethod) throws Exception {
		extent.HeaderChildNode("Login Functionality");
		String UserType = getParameterFromXML("userType");
		if (UserType.equals("Guest")) {
			extent.extentLogger("userType", "UserType : Guest");
		}
//		verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Login link");
//		waitTime(3000);

		switch (LoginMethod) {
		case "Guest":
			extent.HeaderChildNode("Guest User");
			extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");
			waitTime(1000);
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Skip link");
			waitTime(3000);
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as Non-Subscribed User for Settings");
			String SUsername = getParameterFromXML("NonsubscribedUserName");
			String SPassword = getParameterFromXML("NonsubscribedPassword");
			verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for Free");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, SPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User for Settings");
			String ClubUsername = getParameterFromXML("ClubUserName");
			String ClubPassword = getParameterFromXML("ClubPassword");
			verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for Free");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, ClubUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, ClubPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;
		}
	}

	/**
	 * Author : Bhavana
	 * @Note Validating Subscribe CTA and Login CTA displayed on player screen for Club content
	 * @param userType
	 * @param searchcontent
	 * @throws Exception
	 */
	public void validateSubscribeAndLoginCTAForClubContent(String userType, String searchcontent) throws Exception {
		if ((userType.equals("Guest")) | (userType.equals("NonSubscribedUser"))) {
			System.out.println("Validating Subscribe CTA present on player for club content without trailer");
			HeaderChildNode("Validating Subscribe CTA present on player for club content without trailer");
			verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
			waitTime(2000);
			verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBar, searchcontent, "Search bar");
			waitTime(2000);
			click(AMDSearchScreen.objFirstContentInSearchResult(searchcontent), "Searched result");
			waitTime(5000);
			verifyElementExist(AMDClubPack.objSubscribeinfoOnPlayer, "Subscribe info on the player for Club content");
			boolean objSubinfo = verifyIsElementDisplayed(AMDClubPack.objSubscribeinfoOnPlayer);
			if (objSubinfo) {
				String text = getText(AMDClubPack.objSubscribeinfoOnPlayer);
				System.out.println(text);
				logger.info(text + " is displayed on player for club content");
				extent.extentLoggerPass("Consumption screen", text + " is displayed on player for club content");
			} else {
				logger.error(
						getText(AMDClubPack.objSubscribeinfoOnPlayer) + " is NOT displayed on player for club content");
				extent.extentLoggerFail("Consumption screen",
						getText(AMDClubPack.objSubscribeinfoOnPlayer) + " is NOT displayed on player for club content");
			}
			verifyElementExist(AMDClubPack.objSubscribetoClubCTAOnPlayer,
					"Subscribe to Club CTA on player for club content");
//			if (userType.equals("Guest")) {
//				verifyElementExist(AMDClubPack.objLoginCTAOnPlayer, "Login CTA on player for club content");
//			}
			verifyElementExist(AMDClubPack.objGetClubCTABelowPlayer, "Get Club CTA below the player");
			boolean objsubToClub = verifyIsElementDisplayed(AMDClubPack.objSubscribetoClubCTAOnPlayer);
			if (objsubToClub) {
				click(AMDClubPack.objSubscribetoClubCTAOnPlayer, "Subscribe to Club CTA on player for club content");
			}
			waitTime(3000);
			verifyElementExist(AMDClubPack.objSubscribePopup, "Subscribe popup");
			Swipe("UP", 1);
			verifyElementExist(AMDClubPack.objPlanlistonSubscribePopup, "Pack list");
			click(AMDClubPack.objClubPlanTab, "Club tab");
			verifyElementExist(AMDClubPack.objClubPackPlan, "Club Pack plan");
			click(AMDClubPack.objPremiumTab, "Premium tab");

			// Club icon and premium icon on plan list has been removed

			// verifyElementExist(AMDClubPack.objClubIconforClubPlan, "Only Club Icon for
			// Club pack plan");
			// verifyElementExist(AMDClubPack.objPremiumIconInSubscribePopup, "Premium Icon
			// for All Acess plan");
			// verifyElementExist(AMDClubPack.objClubIconInSubscribePopup, "Club Icon for
			// All Acess plan");
			// if (getAttributValue("clickable",
			// AMDClubPack.objPremiumIconInSubscribePopup).equals("false")) {
//				logger.info("Premium Icon is not clickable on Get premium popup");
//				extent.extentLoggerPass("Popup", "Premium Icon is not clickable on Get premium popup");
//			} else {
//				logger.error("Premium Icon is clickable on Get premium popup");
//				extent.extentLoggerFail("popup", "Premium Icon is clickable on Get premium popup");
//			}
//			if (getAttributValue("clickable", AMDClubPack.objClubIconInSubscribePopup).equals("false")) {
//				logger.info("Club Icon is not clickable on Get premium popup");
//				extent.extentLoggerPass("Popup", "Club Icon is not clickable on Get premium popup");
//			} else {
//				logger.error("Club Icon is clickable on Get premium popup");
//				extent.extentLoggerFail("popup", "Club Icon is clickable on Get premium popup");
//			}

			String Plan1 = getText(AMDClubPack.objPack1InSubscribePopup);
			System.out.println(Plan1);
			logger.info("Plan 1 " + Plan1 + " is displayed");
			extent.extentLogger("Subscribe to Club popup", "Plan 1 " + Plan1 + " is displayed");

			String Plan2 = getText(AMDClubPack.objPack2InSubscribePopup);
			System.out.println(Plan2);
			logger.info("Plan 2 " + Plan2 + " is displayed");
			extent.extentLogger("Subscribe to Club popup", "Plan 2 " + Plan2 + " is displayed");

			Swipe("UP", 1);

			String Plan3 = getText(AMDClubPack.objPack3InSubscribePopup);
			System.out.println(Plan3);
			logger.info("Plan 3 " + Plan3 + " is displayed");
			extent.extentLogger("Subscribe to Club popup", "Plan 3 " + Plan3 + " is displayed");

			// Plan 4 and 5 has been removed

//			String Plan4 = getText(AMDClubPack.objPack4InSubscribePopup);
//			System.out.println(Plan4);
//			logger.info("Plan 4 " + Plan4 + " is displayed");
//			extent.extentLogger("Subscribe to Club popup", "Plan 4 " + Plan4 + " is displayed");
//
//			String Plan5 = getText(AMDClubPack.objPack5InSubscribePopup);
//			System.out.println(Plan5);
//			logger.info("Plan 5 " + Plan5 + " is displayed");
//			extent.extentLogger("Subscribe to Club popup", "Plan 5 " + Plan5 + " is displayed");

			// swipeUntilFindElement(AMDGenericObjects.objText("Terms of Use"), "Up");
			Swipe("UP", 1);
			boolean objproceed = verifyIsElementDisplayed(AMDClubPack.objContinueCTAInSubscribePopup);
			if (objproceed) {
				click(AMDClubPack.objContinueCTAInSubscribePopup, "Continue Button in Subcribe popup");
			}
			waitTime(4000);
			if (userType.equals("Guest")) {
				boolean objAccountinfo = verifyIsElementDisplayed(AMDClubPack.objAcountInfoInSubscribePage);
				if (objAccountinfo) {
					logger.info("User is navigated to Account info screen on selecting club plan");
					extent.extentLoggerPass("Subscribe popup",
							"User is navigated to Account info screen on selecting club plan");
				} else {
					logger.error("User is unable to navigate to Account info screen on selecting club plan");
					extent.extentLoggerFail("Subscribe popup",
							"User is unable to navigate to Account info screen on selecting club plan");
				}
			}
			if (userType.equals("NonSubscribedUser")) {
				Swipe("DOWN", 1);
				waitTime(1000);
				boolean objpayment = verifyIsElementDisplayed(AMDClubPack.objpaymentScreenInSubscribepopup);
				if (objpayment) {
					logger.info("User is navigated to Payment options screen on selecting club plan");
					extent.extentLoggerPass("Subscribe popup",
							"User is navigated to Payment options screen on selecting club plan");
				} else {
					logger.error("User is unable to navigate to Payment options screen on selecting club plan");
					extent.extentLoggerFail("Subscribe popup",
							"User is unable to navigate to Payment options screen on selecting club plan");
				}
			}
			Back(5);

			// Login CTA has been removed

//			if (userType.equals("Guest")) {
//				HeaderChildNode("Validating Login CTA present on player for club content");
//				click(AMDClubPack.objLoginCTAOnPlayer, "Login CTA on player for club content");
//				waitTime(4000);
//				boolean objlogin = verifyIsElementDisplayed(AMDClubPack.objLoginScreen);
//				if (objlogin) {
//					String Username = getParameterFromXML("ClubUserName");
//					String Password = getParameterFromXML("ClubPassword");
//					verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
//					type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
//					verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
//					verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
//					type(AMDLoginScreen.objPasswordField, Password, "Password field");
//					hideKeyboard();
//					verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
//					waitTime(12000);
//				}
//				boolean objPlayer = verifyIsElementDisplayed(AMDPlayerScreen.objPlayerScreen);
//				if (objPlayer) {
//					logger.info("User is navigated back to consumption screen on successfull login");
//					extent.extentLoggerPass("Consumption screen",
//							"User is navigated back to consumption screen on successfull login");
//				} else {
//					logger.error("User fails to navigate back to consumption screen on successfull login");
//					extent.extentLoggerFail("Consumption screen",
//							"User fails to navigate back to consumption screen on successfull login");
//				}
//				Back(1);
//				click(AMDHomePage.HomeIcon, "Home Icon");
//				zNALogoutMethod();
//				waitTime(4000);
//			} else {
//				logger.info("Login CTA for club content is not applicable for " + userType);
//				extent.extentLogger("Login CTA", "Login CTA for club content is not applicable for " + userType);
//				Back(1);
//			}
			// click(AMDHomePage.HomeIcon, "Home Icon");
			validateSubscribepopupForPremiumContent("Prema Baraha");
		} else {
			logger.info("Validation of Subscribe and Login CTA for club content is not applicable for " + userType);
			extent.extentLogger("Subscribe CTA",
					"Validation of Subscribe and Login CTA for club content is not applicable for " + userType);
		}
	}
/**
 * Validating teh upgrade poup for premium content which is having the trailer
 * @param searchContent
 * @throws Exception
 */
	public void upgradepopupForPremiumcontentWithTrailer(String searchContent) throws Exception {
		extent.HeaderChildNode("Validating Upgrade popup for Premium content having Trailer");
		System.out.println("Validating Upgrade popup for Premium content having Trailer");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		waitTime(2000);
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBar, searchContent, "Search bar");
		waitTime(2000);
		click(AMDSearchScreen.objFirstContentInSearchResult, "Searched result");
		waitTime(2000);
//		scrubVideoToLast(AMDPlayerScreen.objProgressBar);
		scrubProgressBarTillEnd(AMDPlayerScreen.objProgressBar);
		boolean objupgradePopup = verifyIsElementDisplayed(AMDClubPack.objUpgradepopuptitle);
		if (objupgradePopup) {
			logger.info("Upgarde popup is displayed at the end of trailer for Premium content ");
			extent.extentLoggerPass("Consumption screen",
					"Upgarde popup is displayed at the end of trailer for Premium content");
		} else {
			logger.error("Upgarde popup is NOT displayed at the end of trailer for Premium content");
			extent.extentLoggerFail("Consumption screen",
					"Upgarde popup is NOT displayed at the end of trailer for Premium content");
		}
		Back(2);
		click(AMDHomePage.HomeIcon, "Home Icon");
	}
/**
 * @Note Validating the subscribe pop up for club content having the trailer
 * @param userType
 * @param searchContent
 * @throws Exception
 */
	public void subscribepopupForClubcontentWithTrailer(String userType, String searchContent) throws Exception {
		extent.HeaderChildNode("Validating subscribe popup for Club content having Trailer");
		System.out.println("Validating subscribe popup for Club content having Trailer");

		if (userType.equalsIgnoreCase("Guest") | userType.equalsIgnoreCase("NonSubscribedUser")) {
			verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
			waitTime(2000);
			verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBar, searchContent, "Search bar");
			waitTime(2000);
			click(AMDSearchScreen.objFirstContentInSearchResult(searchContent), "Searched result");
			waitTime(5000);
//			scrubVideoToLast(AMDPlayerScreen.objProgressBar);
			scrubProgressBarTillEnd(AMDPlayerScreen.objProgressBar);
			boolean objSubscribePopup = verifyIsElementDisplayed(AMDClubPack.objSubscribePopup);
			if (objSubscribePopup) {
				logger.info("Subscribe popup is displayed at the end of trailer for Club content ");
				extent.extentLoggerPass("Consumption screen",
						"Subscribe popup is displayed at the end of trailer for Club content");
			} else {
				logger.error("Subscribe popup is NOT displayed at the end of trailer for Club content");
				extent.extentLoggerFail("Consumption screen",
						"Subscribe popup is NOT displayed at the end of trailer for Club content");
			}
			Back(2);
			click(AMDHomePage.HomeIcon, "Home Icon");
		} else {
			logger.info("Validtation of Subscribe popup for club content is not applicable for " + userType);
			extent.extentLogger("Subscribe CTA",
					"Validation of Subscribe popup for club content is not applicable for " + userType);
		}
	}
/**
 * @Note method will scrub the video to the Last
 * @param byLocator1
 * @throws Exception
 */
	public void scrubVideoToLast(By byLocator1) throws Exception {
		String beforeSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time before seeking : " + timeToSec(beforeSeek));
		extent.extentLogger("Seek", "Current time before seeking in seconds: " + timeToSec(beforeSeek));

		WebElement element = getDriver().findElement(byLocator1);
		Dimension size = element.getSize();
		int startx = (int) (size.width);
		int startX = startx + 180;
		System.out.println(startX);
		SwipeAnElement(element, startX, 0);
		waitTime(2000);

	}
/**
 * Validating the club icon on Content tray and contnet listing screen
 * @param userType
 * @throws Exception
 */
	public void validateClubIconOnContentCards(String userType) throws Exception {
		extent.HeaderChildNode("Validating Club icon on Content tray and Content listing screen");
		System.out.println("Validating Club icon on Content tray and Content listing screen");

		if (userType.equals("Guest") | userType.equals("NonSubscribedUser")) {
			waitTime(3000);
			selectTopNavigationTab("ZEE5 Originals");
			waitTime(5000);
			swipeUntilFindElement(AMDClubPack.objBestOfZee5OriginalsTray, "UP");
			boolean result = verifyIsElementDisplayed(AMDClubPack.objClubIconOnFirstCardOfTray);
			if (result) {
				logger.info("Club icon is displayed on club content card");
				extent.extentLoggerPass("Landing page", "Club icon is displayed on club content card");
			} else {
				logger.error("Club icon is NOT displayed on club content card");
				extent.extentLoggerFail("Landing screen", "Club icon is NOT displayed on club content card");
			}
			waitTime(3000);
			click(AMDClubPack.objViewAllForBestOfZee5OriginalsTray, "Best of ZEE5 Originals in Kannada tray");
			waitTime(3000);
			boolean result2 = verifyIsElementDisplayed(AMDClubPack.objclubIconInContentListingScreen);
			if (result2) {
				logger.info("Club icon is displayed in content listing screen");
				extent.extentLoggerPass("Landing page", "Club icon is displayed in content listing screen");
			} else {
				logger.error("Club icon is NOT displayed in content listing screen");
				extent.extentLoggerFail("Landing screen", "Club icon is NOT displayed in content listing screen");
			}
			Back(1);
			click(AMDHomePage.HomeIcon, "Home Icon");
		} else {
			logger.info("Validating Club icon on Landing screen is not applicable for " + userType);
			extent.extentLoggerPass("Landing page",
					"Validating Club icon on Landing screen is not applicable for " + userType);
		}
	}
/**
 * validating the club icon for reco rails
 * @param userType
 * @throws Exception
 */
	public void validateClubIconForRecoTray(String userType) throws Exception {
		extent.HeaderChildNode("Validating Club Icon for Reco rails/tray");
		System.out.println("Validating Club Icon for Reco rails/tray");

		if (userType.equals("Guest") | userType.equals("NonSubscribedUser")) {
			waitTime(6000);
			swipeUntilFindElement(AMDClubPack.objRecoMovieTray, "UP");
			waitTime(3000);
			boolean reco = verifyIsElementDisplayed(AMDClubPack.objClubicononRecoTrays);
			if (reco) {
				logger.info("Club icon is displayed on club content card under Reco Tray");
				extent.extentLoggerPass("Landing page", "Club icon is displayed on club content card under Reco Tray");
			} else {
				logger.error("Club icon is NOT displayed on club content card under Reco Tray");
				extent.extentLoggerFail("Landing screen",
						"Club icon is NOT displayed on club content card under Reco Tray");
			}
		} else {
			logger.info("Validating Club icon for Reco tray is not applicable for " + userType);
			extent.extentLoggerPass("Landing page",
					"Validating Club icon for Reco tray is not applicable for " + userType);
		}
		click(AMDHomePage.HomeIcon, "Home Icon");
	}
/**
 * @Note Method to Login for WEB PWA platform
 * @param LoginMethod
 * @throws Exception
 */
	public void ZeeWEBPWALogin(String LoginMethod) throws Exception {
		String userType = getParameterFromXML("userType");
		switch (userType) {
		case "Guest":
			extent.HeaderChildNode("Guest User");
			extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");
			dismissDisplayContentLanguagePopUp();
			waitTime(3000);
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as NonSubscribed User");
			String Username = getParameterFromXML("USMNonsubscribedUserName");
			String Password = getParameterFromXML("USMNonsubscribedPassword");
			// click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply
			// button");
			// waitForElementAndClickIfPresent(PWAHomePage.objNotNow, 30, "Notification
			// popup");
			waitTime(3000);
			click(PWALoginPage.objNotificationPopUp, "Notification PopUp");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresent(AMDUserSessionManagement.objLoginPageHeader, "Login page");
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, Username, "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, Password, "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User");
			String SubscribedUsername = getParameterFromXML("SubscribedUserName");
			String SubscribedPassword = getParameterFromXML("SubscribedPassword");
			// click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply
			// button");
			// waitForElementAndClickIfPresent(PWAHomePage.objNotNow, 30, "Notification
			// popup");
			waitTime(3000);
			click(PWALoginPage.objNotificationPopUp, "Notification PopUp");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresent(AMDUserSessionManagement.objLoginPageHeader, "Login page");
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, SubscribedUsername, "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, SubscribedPassword, "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			break;
		}
	}
/**
 * @Note method to dismiss the Display and content language pop ups
 * @throws Exception
 */
	public void dismissDisplayContentLanguagePopUp() throws Exception {
		extent.HeaderChildNode("Dismiss Display and Content Language Pop Ups");
		waitForElementAndClickIfPresent(PWAHomePage.objContinueDisplayContentLangPopup, 90,
				"Continue on Display Language Pop Up");
		Thread.sleep(5000);
		waitForElementAndClickIfPresent(PWAHomePage.objContinueDisplayContentLangPopup, 10,
				"Continue on Content Language Pop Up");
	}
/**
 * @Note Adding the content to the Watchlist in web
 * @throws Exception
 */
	public void webAddContentToWatchlist() throws Exception {
		extent.HeaderChildNode("Adding Content to Watchlist");
		JSClick(AMDUserSessionManagement.objMoviesTab, "Movies tab");
		waitTime(10000);
		partialScrollDown();
		Actions actions = new Actions(getWebDriver());
		WebElement contentcard = getWebDriver()
				.findElement(By.xpath("(//div[@class='slick-list']//div[@class='content'])[1]"));
		actions.moveToElement(contentcard).perform();
		JSClick(PWAPremiumPage.objContentCardWatchlistBtn, "WatchList icon on content card");
	}
/**
 * Validating the My profile screen in web
 * @param usertype
 * @throws Exception
 */
	@SuppressWarnings("unused")
	public void webMyProfile(String usertype) throws Exception {
		extent.HeaderChildNode("My Profile in Web");
		waitTime(10000);
		click(PWALandingPages.objWebProfileIcon, "Profile Icon");
		waitTime(5000);
		click(PWAHamburgerMenuPage.objProfileIconInProfilePage, "profile icon in My profile dropdown");
		Actions actions = new Actions(getWebDriver());
		WebElement contentcard = getWebDriver().findElement(PWAHomePage.objZeeLogo);
		actions.moveToElement(contentcard).perform();

		waitTime(5000);
		if (usertype.equalsIgnoreCase("NonSubscribedUser")) {
			waitForElementDisplayed(AMDUserSessionManagement.objSubscriptionBannerInMyProfileSection, 60);
			verifyElementPresent(AMDUserSessionManagement.objSubscriptionBannerInMyProfileSection,
					"Subscription banner under My profile section");
		} else {
			boolean var = verifyElementExist(AMDUserSessionManagement.objMyPlanProfile, "Premium Pack");
		}

		click(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		boolean name = verifyElementExist(PWAHamburgerMenuPage.objEditProfileFirstName, "Name field");
		if (name == true) {
			String WebFirstName = getAttributValue("value", PWAHamburgerMenuPage.objEditProfileFirstName);
			WebPWAMyProfile.add(WebFirstName);
		}
		boolean gender = verifyElementExist(AMDUserSessionManagement.objGenderValue, "Gender field");
		if (gender == true) {
			String WebGender = getText(AMDUserSessionManagement.objGenderValue);
			WebPWAMyProfile.add(WebGender);
		}

		verifyElementExist(PWAHamburgerMenuPage.objEditProfileDOB, "Date of birth field");
		String Day = getText(AMDUserSessionManagement.objDateOfBirthValue("Day"));
		int lenOfDate = Day.length();
		if (lenOfDate == 1) {
			Day = "0" + Day;
		}
		String Month = getText(AMDUserSessionManagement.objDateOfBirthValue("Month"));
		int monthNum = convertMonthToNumber(Month);
		System.out.println(monthNum);
		String monthNumber = Integer.toString(monthNum);
		int lenOfMonth = monthNumber.length();
		System.out.println(lenOfMonth);
		if (lenOfMonth == 1) {
			monthNumber = "0" + monthNumber;
		}
		String year = getText(AMDUserSessionManagement.objDateOfBirthValue("Year"));
		String WebConvertedDOB = Day + "/" + monthNumber + "/" + year;
		WebPWAMyProfile.add(WebConvertedDOB);
		logger.info(WebPWAMyProfile);
	}
/**
 * Note Converting month to integer number
 * @param month
 * @return
 */
	public int convertMonthToNumber(String month) {

		ArrayList<String> list = new ArrayList<String>();
		list.add("MONTH");
		list.add("JAN");
		list.add("FEB");
		list.add("MAR");
		list.add("APR");
		list.add("MAY");
		list.add("JUN");
		list.add("JUL");
		list.add("AUG");
		list.add("SEP");
		list.add("OCT");
		list.add("NOV");
		list.add("DEC");

		int number = list.indexOf(month);
		return number;
	}

	/**
	 * @Note Validating the My watch list screen in Web
	 * @throws Exception
	 */
	public void webWatchList() throws Exception {
		extent.HeaderChildNode("My watchList in Web");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Watchlist"), "My watchlist");
		waitTime(10000);
		if (verifyIsElementDisplayed(AMDUserSessionManagement.objMoviesTabInMyWatchlist, "Movies tab")) {
			click(AMDUserSessionManagement.objMoviesTabInMyWatchlist, "Movies tab");
			int contentsInMoviesTab = getWebDriver().findElements(AMDUserSessionManagement.objcontentsInAllTheTabs)
					.size();
			System.out.println(contentsInMoviesTab);
			if (contentsInMoviesTab >= 0) {
				for (int i = 1; i <= contentsInMoviesTab; i++) {
					String contentTitle = getWebDriver()
							.findElement(By.xpath("(//h3[@class='cardTitle overflowEllipsis ']/child::a)[" + i + "]"))
							.getText();
					WebPWAWatchList.add(contentTitle);
				}
			} else {
				logger.info("No contents in Movies tab");
				extentLogger("Videos tab", "No contents in Movies tab");
			}
		}

		if (verifyIsElementDisplayed(AMDUserSessionManagement.objVideosTabInMyWatchlist, "Videos tab")) {
			click(AMDUserSessionManagement.objVideosTabInMyWatchlist, "Videos tab");
			int contentsInVideosTab = getWebDriver().findElements(AMDUserSessionManagement.objcontentsInAllTheTabs)
					.size();
			System.out.println(contentsInVideosTab);
			if (contentsInVideosTab >= 0) {

				for (int i = 1; i <= contentsInVideosTab; i++) {
					String contentTitle = getWebDriver()
							.findElement(By.xpath("(//h3[@class='cardTitle overflowEllipsis ']/child::a)[" + i + "]"))
							.getText();
					WebPWAWatchList.add(contentTitle);
				}
			} else {
				logger.info("No contents in Vidoes tab");
				extentLogger("Videos tab", "No contents in videos tab");
			}
		}
		logger.info(WebPWAWatchList);
	}
/**
 * validating the My reminders screen in web
 */
	public void webReminders() {
		extent.HeaderChildNode("My Reminders in Web");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Reminders"), "My reminders");
		waitTime(4000);
		int contentsInRemindersScreen = getWebDriver().findElements(AMDUserSessionManagement.objcontentsInAllTheTabs)
				.size();
		System.out.println(contentsInRemindersScreen);
		if (contentsInRemindersScreen > 0) {

			for (int i = 1; i <= contentsInRemindersScreen; i++) {
				String contentTitle = getWebDriver()
						.findElement(By.xpath("(//h3[@class='cardTitle overflowEllipsis ']/child::a)[" + i + "]"))
						.getText();
				WebPWAReminders.add(contentTitle);
			}
			logger.info("contents in Reminders page: " + WebPWAReminders);
		} else {
			logger.info("No contents in My Remainders page");
			extentLogger("Reminders", "No contents in My Remainders page");
		}
	}
/**
 * @note validating the My scubscription screen in web
 * @param usertype
 * @throws Exception
 */
	public void webSubscription(String usertype) throws Exception {
		extent.HeaderChildNode("My Subscription in Web");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");

		if (usertype.equalsIgnoreCase("NonSubscribedUser")) {
			verifyElementPresent(AMDUserSessionManagement.objNoActiveSubscriptionText, "No Active Subscription");
			scrollByWEB();
			verifyElementPresent(AMDUserSessionManagement.objSubscriptionBannerInMyProfileSection, "Buy Plan CTA");
			JSClick(AMDUserSessionManagement.objSubscriptionBannerInMyProfileSection, "Buy Plan CTA");
		} else {
			verifyElementExist(AMDUserSessionManagement.objPremiumPackInMySubscriptionScreen, "Premium Pack");
			String Price = getText(AMDUserSessionManagement.objPemiumPackPriceInMySubscriptionScreen);
			String packPrice = "INR " + Price;
			WebPWASubscription.add(packPrice);
			// String packvalidity =
			// getText(AMDUserSessionManagement.objPremiumPackDuration);
//		WebPWASubscription.add(packvalidity);
			String dateOfPurchase = getText(AMDUserSessionManagement.objPremiumPackdateOfPurchase);
			WebPWASubscription.add(dateOfPurchase);
			String status = getText(AMDUserSessionManagement.objPackdetailsAtMySubscriptionpage("Status"));
			WebPWASubscription.add(status);
			String packCountry = getText(AMDUserSessionManagement.objPackdetailsAtMySubscriptionpage("Pack Country"));
			WebPWASubscription.add(packCountry);
			String paymentMode = getText(AMDUserSessionManagement.objPackdetailsAtMySubscriptionpage("Payment Mode"));
			WebPWASubscription.add(paymentMode);
			String autoRenewal = getText(AMDUserSessionManagement.objPackdetailsAtMySubscriptionpage("Auto Renewal"));
			WebPWASubscription.add(autoRenewal);
//		String dateOfExpire = getText(AMDUserSessionManagement.objPackExpieryDate);
//		WebPWASubscription.add(dateOfExpire);
			click(AMDUserSessionManagement.objBrowseAllPacksBtn, "Browse All Packs");
			logger.info(WebPWASubscription);
		}

		verifyElementExist(PWASubscriptionPages.objZEE5SubscriptionPage, "Subscription page");
		waitTime(2000);
		Back(1);
	}
/**
 * @Note validating the My transcations in web
 * @throws Exception
 */
	public void webTransaction() throws Exception {
		extent.HeaderChildNode("My Transaction in Web");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Transactions"), "My Transactions");
		waitTime(4000);
		boolean empty = verifyElementDisplayed(AMDUserSessionManagement.objNoTransactionsText);
		if (empty == true) {
			logger.info("No Transactions for this user");
			extentLogger("My Transactions", "No Transactions for this user");
		} else if (getText(AMDUserSessionManagement.objPackDetails("Status")).equalsIgnoreCase("EXPIRED")) {
			logger.info("Transaction Pack is expired for this user");
			extentLogger("My Transactions", "Transaction Pack is expired for this user");

			String packName = getText(AMDUserSessionManagement.objTransactionPackName);
			webPWATransaction.add(packName);
			String packCountry = getText(AMDUserSessionManagement.objPackDetails("Pack Country"));
			webPWATransaction.add(packCountry);
			String packDuration = getText(AMDUserSessionManagement.objPackDetails("Duration"));
			webPWATransaction.add(packDuration);
//			String paymentMode = getText(AMDUserSessionManagement.objPackDetails("Payment Mode"));
//			webPWATransaction.add(paymentMode);
			String autoRenewal = getText(AMDUserSessionManagement.objPackDetails("Auto Renewal"));
			webPWATransaction.add(autoRenewal);
		} else {
			logger.info("Transaction Pack is Active for this user");
			extentLogger("My Transactions", "Transaction Pack is Active for this user");
			String packName = getText(AMDUserSessionManagement.objTransactionPackName);
			webPWATransaction.add(packName);
			String Price = getText(AMDUserSessionManagement.objTransactionPackPrice);
			String packPrice = "INR " + Price;
			webPWATransaction.add(packPrice);
			String packCountry = getText(AMDUserSessionManagement.objPackDetails("Pack Country"));
			webPWATransaction.add(packCountry);
			String packDuration = getText(AMDUserSessionManagement.objPackDetails("Duration"));
			webPWATransaction.add(packDuration);
//			String paymentMode = getText(AMDUserSessionManagement.objPackDetails("Payment Mode"));
//			webPWATransaction.add(paymentMode);
			String autoRenewal = getText(AMDUserSessionManagement.objPackDetails("Auto Renewal"));
			webPWATransaction.add(autoRenewal);
			verifyElementExist(AMDUserSessionManagement.objDownloadInvoiceBtn, "Download Invoice button");
		}
		logger.info(webPWATransaction);
	}
/**
 * verifying teh display language in web
 * @throws Exception
 */
	public void webDisplayLanguage() throws Exception {
		extent.HeaderChildNode("Display Language in Web");
		click(PWAHomePage.objZeeLogo, "zee logo");
		click(PWAHamburgerMenuPage.objLanguageBtnWEB, "language button");
		waitTime(3000);
		checkElementExist(PWAHamburgerMenuPage.objDisplayLang, "Display Language header");
		webDisplayLanguage = getText(AMDUserSessionManagement.objselectedDisplayLanguage);
		logger.info(webDisplayLanguage);
		extentLogger("Display Language", webDisplayLanguage + " is selected as display language");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objLanguageBtnWEB, "language button");
	}
/**
 * Verifying the functionality of Parental control in web
 * @param usertype
 * @throws Exception
 */
	public void webParentalControl(String usertype) throws Exception {
		if (usertype.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Parental control in Web");

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "ParentalControl");
			checkElementDisplayed(PWALoginPage.objPasswordField, "password field");
			String password = getParameterFromXML("USMNonsubscribedPassword");
			type(PWALoginPage.objPasswordField, password, "Password field");
			click(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
			waitTime(2000);
			checkElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page");
			checkElementDisplayed(PWAHamburgerMenuPage.objNoRestrictionSelected, "No restricted option selected");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objRestrictAll, "Restrict all option");
			verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1, "Set Lock Field");
			type(PWAHamburgerMenuPage.objParentalLockPin1, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin2, "2", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin3, "3", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin4, "4", "ParentalLockPin");
			waitTime(4000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Set Parental lock button");
			waitTime(2000);
		}

	}
/**
 * Login functionality
 * @param LoginMethod
 * @throws Exception
 */
	public void zeeApplicasterLoginForUSM(String LoginMethod) throws Exception {
		extent.HeaderChildNode("Login Functionality");
		String UserType = getParameterFromXML("userType");
		if (UserType.equals("Guest")) {
			extent.extentLogger("userType", "UserType : Guest");
		}
//		verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Login link");
//		waitTime(3000);

		switch (LoginMethod) {
		case "Guest":
			extent.HeaderChildNode("Guest User");
			extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");
			waitTime(1000);
			hideKeyboard();
			// verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Skip link");
			waitTime(3000);
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as NonSubscribed User for User Session Management");
			String SUsername = getParameterFromXML("USMNonsubscribedUserName");
			String SPassword = getParameterFromXML("USMNonsubscribedPassword");
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			// Verify user is navigated to Login/Register screen post tapping Login/Register
			// link
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");

			// verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse
			// for Free");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, SPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User for User Session Management");
			String SubscribedUsername = getParameterFromXML("SubscribedUserName");
			String SubscribedPassword = getParameterFromXML("SubscribedPassword");
			// verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse
			// for Free");
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			// Verify user is navigated to Login/Register screen post tapping Login/Register
			// link
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SubscribedUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;
		}
	}
/**
 * Validating the My profile screen in App
 * @param userType
 * @throws Exception
 */
	public void appMyProfile(String userType) throws Exception {
		extent.HeaderChildNode("My Profile in App");
		click(AMDMoreMenu.objMoreMenuIcon, "More tab screen");
		click(AMDMoreMenu.objUserName, "User name");
		waitTime(3000);
		if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			boolean subscription = verifyIsElementDisplayed(AMDProfileScreen.objSubscriptionBanner);
			if (subscription == true) {
				logger.info("Subscription Banner is displayed");
				extentLoggerPass("Subscription Banner", "Subscription Banner is displayed");
			} else if (verifyIsElementDisplayed(AMDProfileScreen.objInactivePackStatusUnderMyProfileSection)) {
				logger.info("Inactive Subscription Pack is displayed");
				extentLoggerWarning("Subscription pack", "Inactive Subscription Pack is displayed");
			}
		} else if (userType.equalsIgnoreCase("SubscribedUser")) {
			verifyElementExist(AMDProfileScreen.objactivePackStatusUnderMyProfileSection, "Active Subscription pack");
		}

		click(AMDMyProfileScreen.objEditProfileButton, "Edit CTA button");
		String AppFirstName = getText(AMDEditProfileScreen.objFirstNameField);
		AppMyProfile.add(AppFirstName);
		String AppGender = getText(AMDEditProfileScreen.objGederTxtField);
		AppMyProfile.add(AppGender);
		String AppDOB = getText(AMDEditProfileScreen.objDOBTxtField);
		AppMyProfile.add(AppDOB);

		logger.info(WebPWAMyProfile);
		logger.info(AppMyProfile);

		for (int i = 0; i < WebPWAMyProfile.size(); i++) {
			if (WebPWAMyProfile.get(i).equalsIgnoreCase(AppMyProfile.get(i))) {
				logger.info("Web Value: " + WebPWAMyProfile.get(i) + " is same as App value: " + AppMyProfile.get(i));
				extentLoggerPass("Profile details",
						"Web Value: " + WebPWAMyProfile.get(i) + " is same as App value: " + AppMyProfile.get(i));
			} else {
				logger.info(
						"Web Value: " + WebPWAMyProfile.get(i) + " is not same as App value: " + AppMyProfile.get(i));
				extentLoggerFail("Profile details",
						"Web Value: " + WebPWAMyProfile.get(i) + " is not same as App value: " + AppMyProfile.get(i));
			}
		}

		Back(1);
		waitTime(3000);
		Back(1);

	}
/**
 * verifying the My watch list screen in App
 * @throws Exception
 */
	public void appWatchlist() throws Exception {
		extent.HeaderChildNode("My watchlist in App");
		click(AMDMoreMenu.objWatchlist, "Watchlist option");
		click(AMDUserSessionManagement.objMoviesTabUnderWatchList, "Movies Tab");
		boolean contentsInMoviesTab = verifyIsElementDisplayed(AMDUserSessionManagement.objcontentTitleInWatchList);
		if (contentsInMoviesTab == true) {
			for (int i = 0; i < 3; i++) {
				int totalContents = getDriver().findElements(AMDUserSessionManagement.objcontentTitleInWatchList)
						.size();
				for (int j = 1; j <= totalContents; j++) {
					String content = getDriver()
							.findElement(By.xpath(
									"(//*[@resource-id='com.graymatrix.did:id/txt_reminder_item_title'])[" + j + "]"))
							.getText();
					contentsInWatchList.add(content);
				}
				Swipe("UP", 1);
			}
		} else {
			verifyIsElementDisplayed(AMDUserSessionManagement.objNoContentInWatchlist, "Nothing to watch text");
		}

		click(AMDUserSessionManagement.objVideosTabUnderWatchList, "Videos Tab");
		boolean contnetsInVideosTab = verifyIsElementDisplayed(AMDUserSessionManagement.objcontentTitleInWatchList);
		if (contnetsInVideosTab == true) {
			for (int i = 0; i < 3; i++) {
				int totalContents = getDriver().findElements(AMDUserSessionManagement.objcontentTitleInWatchList)
						.size();
				for (int j = 1; j <= totalContents; j++) {
					String content = getDriver()
							.findElement(By.xpath(
									"(//*[@resource-id='com.graymatrix.did:id/txt_reminder_item_title'])[" + j + "]"))
							.getText();
					contentsInWatchList.add(content);
				}
				Swipe("UP", 1);
			}

		} else {
			verifyIsElementDisplayed(AMDUserSessionManagement.objNoContentInWatchlist, "Nothing to watch text");
		}
		logger.info(WebPWAWatchList);
		List<String> contentsInWatchListScreen = new ArrayList<String>(contentsInWatchList);
		logger.info(contentsInWatchListScreen);
		boolean value = true;

		for (int i = 0; i < WebPWAWatchList.size(); i++) {
			if (contentsInWatchListScreen.contains(WebPWAWatchList.get(0))) {
				continue;
			} else {
				value = false;
				logger.info("Web Value is not same as App value");
				extentLoggerFail("Watchlist", "Web Value is not same as App value");
				break;
			}
		}
		if (value == true) {
			logger.info("Web Value is same as App value");
			extentLoggerPass("Watchlist", "Web Value is same as App value");
		}
		Back(1);
	}
/**
 * @note Validate My Reminders screenin APp
 * @throws Exception
 */
	public void appMyReminders() throws Exception {
		extent.HeaderChildNode("My Reminders in App");
		click(AMDMoreMenu.objMyRemainders, "My Reminders option");
		waitTime(10000);
		boolean reminders = verifyIsElementDisplayed(AMDUserSessionManagement.objcontentTitleInReminders);
		if (reminders == true) {
			for (int i = 0; i < 3; i++) {
				int totalContents = getDriver()
						.findElements(
								By.xpath("//*[@resource-id='com.graymatrix.did:id/cell_center_container']/child::*"))
						.size();
				totalContents = totalContents / 2;
				for (int j = 1; j <= totalContents + 1; j++) {
					System.out.println("j= " + j);
					String content = getDriver().findElement(By.xpath(
							"(//*[@resource-id='com.graymatrix.did:id/cell_center_container']/child::*)[" + j + "]"))
							.getText();
					System.out.println(content);
					contentsInReminders.add(content);
					j = j + 1;
				}
				Swipe("UP", 1);
			}
			logger.info(WebPWAReminders);
			List<String> contentsInReminderScreen = new ArrayList<String>(contentsInReminders);
			System.out.println(contentsInReminderScreen);
			for (int i = 0; i < WebPWAReminders.size(); i++) {

				if (WebPWAReminders.get(i).equalsIgnoreCase(contentsInReminderScreen.get(i))) {
					logger.info("Web Value: " + WebPWAReminders.get(i) + " is same as App value: "
							+ contentsInReminderScreen.get(i));
					extentLoggerPass("Reminders details", "Web Value: " + WebPWAReminders.get(i)
							+ " is same as App value: " + contentsInReminderScreen.get(i));
				} else {
					logger.info("Web Value: " + WebPWAReminders.get(i) + " is not same as App value: "
							+ contentsInReminderScreen.get(i));
					extentLoggerFail("Reminders details", "Web Value: " + WebPWAReminders.get(i)
							+ " is not same as App value: " + contentsInReminderScreen.get(i));
				}
			}
		} else {
			verifyIsElementDisplayed(AMDUserSessionManagement.objNothingToReminder, "Nothing to remind you text");
		}

		Back(1);
	}
/**
 * @Note validating My subscription in app
 * @param usertype
 * @throws Exception
 */
	public void appSubscription(String usertype) throws Exception {
		extent.HeaderChildNode("My Subscription in App");
		click(AMDMoreMenu.objMySubscription, "My Subscription option");
		if (usertype.equalsIgnoreCase("NonSubscribedUser")) {
			verifyElementPresent(AMDMoreMenu.objNoActivePlans, "No Active Subscription");
			verifyElementPresent(AMDMoreMenu.objSubscribeNowCTA, "Subscribe now CTA");
			click(AMDMoreMenu.objSubscribeNowCTA, "Subscribe now CTA");
		} else {
			waitTime(3000);
			verifyIsElementDisplayed(AMDUserSessionManagement.objSubscriptionPackName, "Premium Pack");
			String packPrice = getText(AMDMoreMenu.objSubscriptionPackPrice);
			AppSubscription.add(packPrice);
//		String packvalidity = getText(AMDMoreMenu.objSubscriptionPackDuration);
//		AppSubscription.add(packvalidity);
			String DOP = getText(AMDUserSessionManagement.objPurchaseDate);
			String dateOfPurchase = DOP.replace(":", " :");
			AppSubscription.add(dateOfPurchase);
			String status = getText(AMDMoreMenu.objsubscriptionPackStatus);
			AppSubscription.add(status);
			String packCountry = getText(AMDMoreMenu.objSubscriptionPackCountry);
			AppSubscription.add(packCountry);
			String paymentMode = getText(AMDMoreMenu.objSubscriptionPackPaymentMode);
			AppSubscription.add(paymentMode);
			String autoRenewal = getText(AMDUserSessionManagement.objAutoRenewalvalue);
			AppSubscription.add(autoRenewal);
//		String dateOfExpire = getText(AMDMoreMenu.objSubscriptionPackExpiryDate);
//		AppSubscription.add(dateOfExpire);
			click(AMDMoreMenu.objBrowseAllPacks, "Browse All Packs");
			logger.info(AppSubscription);
			logger.info(WebPWASubscription);
			for (int i = 0; i < WebPWASubscription.size(); i++) {
				if (WebPWASubscription.get(i).equalsIgnoreCase(AppSubscription.get(i))) {
					logger.info("Web Value: " + WebPWASubscription.get(i) + " is same as App value: "
							+ AppSubscription.get(i));
					extentLoggerPass("Subscription details", "Web Value: " + WebPWASubscription.get(i)
							+ " is same as App value: " + AppSubscription.get(i));
				} else {
					logger.info("Web Value: " + WebPWASubscription.get(i) + " is not same as App value: "
							+ AppSubscription.get(i));
					extentLoggerFail("Subscription details", "Web Value: " + WebPWASubscription.get(i)
							+ " is not same as App value: " + AppSubscription.get(i));
				}
			}
		}

		verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscription page");
		waitTime(2000);
		Back(1);
		waitTime(2000);
		Back(1);
	}
/**
 * @Note Validating the My Transaction in App
 * @param usertype
 * @throws Exception
 */
	public void appTransaction(String usertype) throws Exception {
		extent.HeaderChildNode("My Transaction in App");
		click(AMDMoreMenu.objMoreMenuIcon, "More tab screen");
		click(AMDMoreMenu.objMyTransactions, "My Transactions");
		boolean emptyScreen = checkElementExist(AMDUserSessionManagement.objNoTransaction, "No Transactions text");
		if (emptyScreen == true) {
			logger.info("No Transactions for this user");
			extentLogger("My Transactions", "No Transactions for this user");
		} else if (getText(AMDMoreMenu.objTransactionPackStatus).equalsIgnoreCase("Inactive")) {
			logger.info("Transaction Pack is expired for this user");
			extentLogger("My Transactions", "Transaction Pack is expired for this user");

			String packName = getText(AMDMoreMenu.objTransactionPackName);
			AppTransaction.add(packName);
			String packCountry = getText(AMDMoreMenu.objTransactionPackCountry);
			AppTransaction.add(packCountry);
			String packDuration = getText(AMDMoreMenu.objTransactionPackDuration);
			AppTransaction.add(packDuration);
//			String paymentMode = getText(AMDMoreMenu.objTransactionPackPaymentMode);
//			AppTransaction.add(paymentMode);
			String autoRenewal = getText(AMDMoreMenu.objTransactionPackAutoRenewal);
			AppTransaction.add(autoRenewal);
		} else {
			logger.info("Transaction Pack is Active for this user");
			extentLogger("My Transactions", "Transaction Pack is Active for this user");
			String packName = getText(AMDMoreMenu.objTransactionPackName);
			AppTransaction.add(packName);
			String packPrice = getText(AMDUserSessionManagement.objTransPackPrice);
			AppTransaction.add(packPrice);
			String packCountry = getText(AMDMoreMenu.objTransactionPackCountry);
			AppTransaction.add(packCountry);
			String packDuration = getText(AMDMoreMenu.objTransactionPackDuration);
			AppTransaction.add(packDuration);
//			String paymentMode = getText(AMDMoreMenu.objTransactionPackPaymentMode);
//			AppTransaction.add(paymentMode);
			String autoRenewal = getText(AMDMoreMenu.objTransactionPackAutoRenewal);
			AppTransaction.add(autoRenewal);
			Swipe("UP", 1);
			verifyElementExist(AMDMoreMenu.objDownloadInvoice, "Download Invoice button");
		}
		logger.info(AppTransaction);
		logger.info(webPWATransaction);
		for (int i = 0; i < webPWATransaction.size(); i++) {
			if (webPWATransaction.get(i).contains(AppTransaction.get(i))) {
				logger.info(
						"Web Value: " + webPWATransaction.get(i) + " is same as App value: " + AppTransaction.get(i));
				extentLoggerPass("Transaction details",
						"Web Value: " + webPWATransaction.get(i) + " is same as App value: " + AppTransaction.get(i));
			} else {
				logger.info("[AMA2-16515] : Web Value: " + webPWATransaction.get(i) + " is not same as App value: "
						+ AppTransaction.get(i));
				extentLoggerFail("Transaction details", "Web Value: " + webPWATransaction.get(i)
						+ " is not same as App value: " + AppTransaction.get(i));
			}
		}
		Back(1);
	}
/**
 * Validating the display language in app
 * @throws Exception
 */
	public void appDisplayLanguage() throws Exception {
		extent.HeaderChildNode("Display Language in App");

		click(AMDMoreMenu.objSettings, "Settings option");
		waitTime(3000);
		Swipe("UP", 1);
		verifyIsElementDisplayed(AMDMoreMenu.objDisplayLang, "Display language");
		appDisplayLanguage = getText(AMDMoreMenu.objDisplayLang);

		logger.info(appDisplayLanguage + " is selected as display language");
		extentLogger("Display Language", appDisplayLanguage + " is selected as display language");

		logger.info(webDisplayLanguage + " is selected as display language");
		extentLogger("Display Language", webDisplayLanguage + " is selected as display language");

		if (webDisplayLanguage.equalsIgnoreCase(appDisplayLanguage)) {
			logger.info("Web Value: " + webDisplayLanguage + " is same as App value: " + appDisplayLanguage);
			extentLoggerPass("Display language details",
					"Web Value: " + webDisplayLanguage + " is same as App value: " + appDisplayLanguage);
		} else {
			logger.info("Web Value: " + webDisplayLanguage + " is not same as App value: " + appDisplayLanguage);
			extentLoggerFail("Display language details",
					"Web Value: " + webDisplayLanguage + " is not same as App value: " + appDisplayLanguage);
		}
	}
/**
 * Validating the Parenntal control in app
 * @param usertype
 * @throws Exception
 */
	@SuppressWarnings("deprecation")
	public void appParentalControl(String usertype) throws Exception {
		if (usertype.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Parental control in App");

			click(AMDMoreMenu.objParentalControl, "Parental control option");
			verifyElementExist(AMDMoreMenu.objPasswordField, "Password field");
			String password = getParameterFromXML("USMNonsubscribedPassword");
			click(AMDMoreMenu.objPasswordField, "Password field");
			getDriver().getKeyboard().sendKeys(password);
			hideKeyboard();
			if (getOEMName.contains("vivo")) {
				hidePwdKeyboard();
			}
			click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(2000);
			boolean parentalControl = checkElementDisplayed(
					AMDUserSessionManagement.objSelectedRestrictAllContentOption, "Restrict All Content");
			if (parentalControl == true) {
				logger.info("Parental control set in any one platform is reflected across all platforms");
				extent.extentLoggerPass("Parental Control",
						"Parental control set in any one platform is reflected across all platforms");
			} else {
				logger.info("Parental control set in any one platform is not reflected across all platforms");
				extent.extentLoggerFail("Parental Control",
						"Parental control set in any one platform is not reflected across all platforms");
			}

			click(AMDMoreMenu.objNoRestriction, "No restriction option");
			click(AMDMoreMenu.objContinueBtn, "Continue Button");
			waitTime(2000);
			click(AMDMoreMenu.objParentalLockDone, "Done Button");

		}

	}
/**
 * @Note Verifying the Update profile details in web
 * @throws Exception
 */
	public void webUpdateProfileDetails() throws Exception {
		extent.HeaderChildNode("Updation of My profile in Web");

		click(PWALandingPages.objWebProfileIcon, "Profile Icon");
		waitTime(5000);
		click(PWAHamburgerMenuPage.objProfileIconInProfilePage, "profile icon in My profile dropdown");
		Actions actions = new Actions(getWebDriver());
		WebElement contentcard = getWebDriver().findElement(PWAHomePage.objZeeLogo);
		actions.moveToElement(contentcard).perform();
		verifyElementPresent(AMDUserSessionManagement.objSubscriptionBannerInMyProfileSection,
				"Subscription banner under My profile section");
		click(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");

		boolean var = verifyElementDisplayed(PWAHamburgerMenuPage.objEditProfileFirstName);
		if (var == true) {
			click(PWAHamburgerMenuPage.objEditProfileFirstName, "First name field");
			int lenText = findElement(PWAHamburgerMenuPage.objEditProfileFirstName).getAttribute("value").length();
			for (int i = 0; i < lenText; i++) {
				getWebDriver().findElement(PWAHamburgerMenuPage.objEditProfileFirstName).sendKeys(Keys.BACK_SPACE);
			}
			waitTime(5000);
			type(PWAHamburgerMenuPage.objEditProfileFirstName, "yopp", "First name field");
			waitTime(3000);
			scrollByWEB();
			click(PWAHamburgerMenuPage.objEditProfileSavechangesBtn, "Save changes button");
			waitTime(3000);
			webUpdatedFirstName = getAttributValue("value", PWAHamburgerMenuPage.objEditProfileFirstName);
			logger.info("First name is updated as " + webUpdatedFirstName);
		}

	}
/**
 * Removing the contents in My watchlist screen in web
 * @throws Exception
 */
	@SuppressWarnings("unused")
	public void webRemoveWatchList() throws Exception {
		extent.HeaderChildNode("Removal of contents in My watchList screen in Web");
		waitTime(3000);
		click(PWALandingPages.objWebProfileIcon, "Profile Icon");
		waitTime(30000);
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Watchlist"), "My watchlist");
		waitTime(5000);
		boolean EmptyWatchlist = checkElementExist(AMDUserSessionManagement.objMoviesTabInMyWatchlist);
		if (EmptyWatchlist == false) {
			logger.info("no contents are there to remove in My Watchlist screen");
			extentLogger("My Watchlist", "no contents are there to remove in My Watchlist screen");
		} else {
			click(AMDUserSessionManagement.objMoviesTabInMyWatchlist, "Movies tab");
			boolean removeAllBtn = verifyElementDisplayed(PWAHamburgerMenuPage.objRemoveAllBtn);
			if (removeAllBtn == true) {
				click(PWAHamburgerMenuPage.objRemoveAllBtn, "Remove All button");
				boolean webEmptyWatchlist = checkElementExist(AMDUserSessionManagement.objEmptyWatchListMessage);
				logger.info("no contents are there in Movies tab");
				extentLogger("My Watchlist", "no contents are there in Movies tab");
			} else {
				logger.info("no contents are there to remove in Movies tab");
				extentLogger("My Watchlist", "no contents are there to remove in Movies tab");
			}
			boolean videos = checkElementExist(AMDUserSessionManagement.objVideosTabInMyWatchlist);
			if (videos == true) {
				click(AMDUserSessionManagement.objVideosTabInMyWatchlist, "Videos tab");
				boolean removeAllBtnn = verifyElementDisplayed(PWAHamburgerMenuPage.objRemoveAllBtn);
				if (removeAllBtnn == true) {
					click(PWAHamburgerMenuPage.objRemoveAllBtn, "Remove All button");
					boolean webEmptyWatchlist = checkElementExist(AMDUserSessionManagement.objEmptyWatchListMessage);
					logger.info("no contents are there in Videos tab");
					extentLogger("My Watchlist", "no contents are there in Videos tab");
				} else {
					logger.info("no contents are there to remove in Videos tab");
					extentLogger("My Watchlist", "no contents are there to remove in Videos tab");
				}
			}

		}
	}
/**
 * Removing the contents in My reminders screen in web
 * @throws Exception
 */
	@SuppressWarnings("unused")
	public void webRemoveReminders() throws Exception {
		extent.HeaderChildNode("Removal of contents in My reminders screen in Web");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Reminders"), "My Reminders");
		waitTime(4000);
		boolean removeAllBtn = verifyElementDisplayed(PWAHamburgerMenuPage.objRemoveAllBtn);
		if (removeAllBtn == true) {
			click(PWAHamburgerMenuPage.objRemoveAllBtn, "Remove All button");
			boolean webEmptyReminders = checkElementExist(AMDUserSessionManagement.objEmptyRemindersmessage);
		} else {
			logger.info("no contents are there to remove in My reminders screen");
			extentLogger("My Reminders", "no contents are there to remove in My reminders screen");
		}
	}
/**
 * @Note Validation of Updated profile details
 * @throws Exception
 */
	public void appUpdatedFirstName() throws Exception {
		extent.HeaderChildNode("Valdation of Updated Profile");

		click(AMDMoreMenu.objMoreMenuIcon, "More tab screen");
		click(AMDMoreMenu.objUserName, "User name");
		click(AMDMyProfileScreen.objEditProfileButton, "Edit CTA button");
		String AppUpdatedFirstName = getText(AMDEditProfileScreen.objFirstNameField);
		logger.info(AppUpdatedFirstName);

		if (webUpdatedFirstName.equalsIgnoreCase(AppUpdatedFirstName)) {
			logger.info("the profile details updated in PWA/Web is reflected in android");
			extentLoggerPass("Updated details", "the profile details updated in PWA/Web is reflected in android");
		} else {
			logger.info("the profile details updated in PWA/Web is not reflected in android");
			extentLoggerFail("Updated details", "the profile details updated in PWA/Web is not reflected in android");
		}

		Back(1);
		waitTime(3000);
		Back(1);
	}
/**
 * validation of Updated watchlist
 * @throws Exception
 */
	public void appRemoveWatlist() throws Exception {
		extent.HeaderChildNode("Validation of Updated Watchlist");
		click(AMDMoreMenu.objMoreMenuIcon, "More tab screen");
		click(AMDMoreMenu.objWatchlist, "Watchlist option");
		click(AMDUserSessionManagement.objMoviesTabUnderWatchList, "Movies Tab");
		boolean noMoviesContent = checkElementExist(AMDUserSessionManagement.objNoContentInWatchlist,
				"Nothing to watch text");
		if (noMoviesContent == true) {
			logger.info(
					"contents removed from Movies Tab in watchlist screen in any one of the platform is reflected in other platforms too");
			extentLoggerPass("Movies",
					"contents removed from Movies Tab in watchlist screen in any one of the platform is reflected in other platforms too");
		} else {
			logger.info(
					"contents removed from Movies Tab in watchlist screen in any one of the platform is not reflected in other platforms too");
			extentLoggerFail("Movies",
					"contents removed from Movies Tab in watchlist screen in any one of the platform is not reflected in other platforms too");
		}

		click(AMDUserSessionManagement.objVideosTabUnderWatchList, "Videos Tab");
		boolean noVideoContent = checkElementExist(AMDUserSessionManagement.objNoContentInWatchlist,
				"Nothing to watch text");
		if (noVideoContent == true) {
			logger.info(
					"contents removed from videos Tab in watchlist screen in any one of the platform is reflected in other platforms too");
			extentLoggerPass("Videos",
					"contents removed from videos Tab in watchlist screen in any one of the platform is reflected in other platforms too");
		} else {
			logger.info(
					"contents removed from videos Tab in watchlist screen in any one of the platform is not reflected in other platforms too");
			extentLoggerFail("Videos",
					"contents removed from videos Tab in watchlist screen in any one of the platform is not reflected in other platforms too");
		}
		Back(1);
	}
/**
 * validation of Updated Reminders 
 * @throws Exception
 */
	public void appRemoveReminder() throws Exception {
		extent.HeaderChildNode("validation of Updated Reminders");

		click(AMDMoreMenu.objMyRemainders, "My Reminders option");
		boolean noReminders = checkElementExist(AMDUserSessionManagement.objNothingToReminder,
				"Nothing to remind u text");
		if (noReminders == true) {
			logger.info(
					"contents removed from My Remainders screen in any one of the platform is reflected in other platform too");
			extentLoggerPass("Reminders",
					"contents removed from My Remainders screen in any one of the platform is reflected in other platform too");
		} else {
			logger.info(
					"contents removed from My Remainders screen in any one of the platform is not reflected in other platform too");
			extentLoggerFail("Reminders",
					"contents removed from My Remainders screen in any one of the platform is not reflected in other platform too");
		}
	}

	/**
	 * Author : Kushal
	 * getting the waiver amount for club pack upgrade
	 */
	public int GetWaiverAmountForClubPackUpdgrade() throws Exception {

		click(AMDMoreMenu.objProfile, "My Profile");
		waitTime(5000);

		String activePack = getText(AMDMyProfileScreen.objPlanPrice).replace("INR ", "").trim();
		String activePackValidity = getText(AMDMyProfileScreen.objPlanDuration).replace("For", "").replace(" days", "")
				.trim();

		click(AMDMyProfileScreen.objDetailsCTA, "Details");
		waitTime(2000);

		String SubscribedDate = getText(AMDMySubscriptionPage.objDateOfPurchase).replace("Date of Purchase: ", "")
				.trim();
		System.out.println(SubscribedDate);

		int nPackPrice = Integer.parseInt(activePack);
		int nPackValidity = Integer.parseInt(activePackValidity);

		SimpleDateFormat formatter = new SimpleDateFormat("dd MMM yyyy");
		Date DateOfPurchase = formatter.parse(SubscribedDate);
		Date currentDate = new Date();

		long difference = currentDate.getTime() - DateOfPurchase.getTime();
		float NoOfDaysUsed = difference / (1000 * 60 * 60 * 24);

		// Formula to calculate the WAIVER Amount
		int perDayPrice = nPackPrice / nPackValidity;
		int WaiverAmount = (int) (nPackPrice - NoOfDaysUsed) * perDayPrice;

		logger.info("My Active Pack: " + nPackPrice);
		logger.info("My Pack Validity: " + nPackValidity);
		logger.info("Date of Purchase: " + DateOfPurchase);
		logger.info("Number of Days pack used: " + NoOfDaysUsed);
		logger.info("Waiver Amount: " + WaiverAmount);

		logger.info("For an Active pack of INR " + nPackPrice + " with validity of " + nPackValidity
				+ " days; the calculated Waiver Amount is " + WaiverAmount);
		extent.extentLoggerPass("Waiver Amount for Active Pack", "For an Active pack of INR " + nPackPrice
				+ " with validity of " + nPackValidity + " days; the calculated Waiver Amount is " + WaiverAmount);

		Back(2);
		return WaiverAmount;
	}
/**
 * @Note Verifying the available trays in consumption screen
 * @param tabName
 * @param userType
 * @throws Exception
 */
	public void availableTraysInTabs(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("Verify the available Trays in Consumption screen for \"" + tabName + "\" content");
		System.out.println("\nVerify the available Trays in Consumption screen for \"" + tabName + "\" content");

		if (verifyIsElementDisplayed(AMDPlayerScreen.objPause)) {
			click(AMDPlayerScreen.objPause, "Pause");
		}

		ArrayList<String> TrayName = new ArrayList<>();
		int count = 0;
		int VisibleTraySize = getDriver().findElements(AMDGenericObjects.objTrayTitle).size();
		System.out.println(VisibleTraySize);
		for (int i = 1; i <= VisibleTraySize; i++) {
			TrayName.add(getText(AMDGenericObjects.objTrayTitleByIndex(i)));
			PartialSwipeInConsumptionScreen("UP", 1);
			waitTime(2000);
			VisibleTraySize = getDriver().findElements(AMDGenericObjects.objTrayTitle).size();
			System.out.println(TrayName);
			for (int j = 1; j <= VisibleTraySize; j++) {
				TrayName.add(getText(AMDGenericObjects.objTrayTitleByIndex(j)));
			}
			count++;
			if (count == 5) {
				System.out.println(count);
				break;
			}
		}

		Set<String> set = new HashSet<>(TrayName);
		TrayName.clear();
		TrayName.addAll(set);
		extent.extentLogger("Verify TrayNames", "Available Trays in consumption screen for tab : " + tabName + "\n");
		for (int i = 0; i < TrayName.size(); i++) {
			extent.extentLoggerPass("Verify TrayNames", TrayName.get(i) + "\n");
			logger.info(TrayName.get(i));
		}
	}

	/**
	 * Author : Bhavana
	 * @Note Validating the clubicon for Episode contents
	 */
	public void validateClubIconForEpisodes(String userType) throws Exception {
		extent.HeaderChildNode("Validating Club Icon for Episodes");
		System.out.println("Validating Club Icon for Episodes");

		if (userType.equals("Guest") | userType.equals("NonSubscribedUser")) {
			waitTime(6000);
			click(AMDHomePage.objShowsTab, "Shows tab");
			waitTime(10000);
			swipeUntilFindElement(AMDClubPack.objBeforeZeeKannadaTray, "UP");
			verifyElementExist(AMDClubPack.objClubIconOnFirstCardOfTray, "Club Icon on Episodes tray");
			waitTime(2000);
			click(AMDClubPack.objBeforeZeeKannadaTray, "Before Zee Kannada tray");
			waitTime(2000);
			boolean result = verifyIsElementDisplayed(AMDClubPack.objclubIconInContentListingScreen);
			if (result) {
				logger.info("Club icon is displayed on club content card displayed on Episodes listing screeen");
				extent.extentLoggerPass("Landing page",
						"Club icon is displayed on club content card displayed on Episodes listing screeen");
			} else {
				logger.error("Club icon is NOT displayed on club content card displayed on Episodes listing screeen");
				extent.extentLoggerFail("Landing screen",
						"Club icon is NOT displayed on club content card displayed on Episodes listing screeen");
			}
			Back(1);
			click(AMDHomePage.HomeIcon, "Home Icon");
		} else {
			logger.info("Validating Club icon for Episodes is not applicable for " + userType);
			extent.extentLoggerPass("Landing page",
					"Validating Club icon for Episodes is not applicable for " + userType);
		}
	}
/**
 * validating the club icon for Movies
 * @param userType
 * @throws Exception
 */
	public void validateClubIconForMovies(String userType) throws Exception {
		extent.HeaderChildNode("Validating Club Icon for Movies");
		System.out.println("Validating Club Icon for Movies");

		if (userType.equals("Guest") | userType.equals("NonSubscribedUser")) {
			waitTime(6000);
			click(AMDHomePage.objMoviesTab, "Movies tab");
			waitTime(10000);
			swipeUntilFindElement(AMDClubPack.objKannadaFamilyDrama, "UP");
			waitTime(2000);
			click(AMDClubPack.objKannadaFamilyDrama, "Kannada Family Dramas tray");
			waitTime(3000);
			boolean result = verifyIsElementDisplayed(AMDClubPack.objclubIconInContentListingScreen);
			if (result) {
				logger.info("Club icon is displayed on club content card displayed on Movies listing screeen");
				extent.extentLoggerPass("Landing page",
						"Club icon is displayed on club content card displayed on Movies listing screeen");
			} else {
				logger.error("Club icon is NOT displayed on club content card displayed on Movies listing screeen");
				extent.extentLoggerFail("Landing screen",
						"Club icon is NOT displayed on club content card displayed on Movies listing screeen");
			}
			Back(1);
			click(AMDHomePage.HomeIcon, "Home Icon");
		} else {
			logger.info("Validating Club icon for Movies is not applicable for " + userType);
			extent.extentLoggerPass("Landing page",
					"Validating Club icon for Movies is not applicable for " + userType);
		}
	}
/**
 * @note Scrub the progress bar till to end on player screen
 * @param byLocator1
 * @throws Exception
 */
	public void scrubProgressBarTillEnd(By byLocator1) throws Exception {
		String beforeSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time before seeking : " + timeToSec(beforeSeek));
		extent.extentLogger("Seek", "Current time before seeking in seconds: " + timeToSec(beforeSeek));
		if (verifyElementIsNotDisplayed(AMDPlayerScreen.objPauseIcon)) {
			click(AMDPlayerScreen.objPlayerScreen, "player screen");
		}
		click(AMDPlayerScreen.objPauseIcon, "Pause");
		WebElement element = getDriver().findElement(byLocator1);
		String xDuration = getAttributValue("x", AMDPlayerScreen.objTotalDuration);
		int endX = Integer.parseInt(xDuration) - 30;
		SwipeAnElement(element, endX, 0);
		String afterSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time after seeking : " + timeToSec(afterSeek));
		extent.extentLogger("Seek", "Current time after seeking in seconds: " + timeToSec(afterSeek));
		waitTime(5000);
		click(AMDPlayerScreen.objPlayIcon, "Play");
		waitTime(6000);
	}
/**
 * Scrub th eprogress bar till to end 
 * @param byLocator1
 * @throws Exception
 */
	public void scrubProgressBarTillEnd2(By byLocator1) throws Exception {
		String beforeSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time before seeking : " + timeToSec(beforeSeek));
		extent.extentLogger("Seek", "Current time before seeking in seconds: " + timeToSec(beforeSeek));
//		if(verifyElementIsNotDisplayed(AMDPlayerScreen.objPauseIcon)) {
//			click(AMDPlayerScreen.objPlayerScreen, "player screen");
//		}
//		click(AMDPlayerScreen.objPauseIcon, "Pause");
		WebElement element = getDriver().findElement(byLocator1);
		String xDuration = getAttributValue("x", AMDPlayerScreen.objTotalDuration);
		int endX = Integer.parseInt(xDuration) - 70;
		SwipeAnElement(element, endX, 0);
		String afterSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time after seeking : " + timeToSec(afterSeek));
		extent.extentLogger("Seek", "Current time after seeking in seconds: " + timeToSec(afterSeek));
		waitTime(5000);
		click(AMDPlayerScreen.objPlayIcon, "Play");
		waitTime(6000);
	}

	/**
	 * Author : Manasa
	 * @Note validating teh functionalities of Next and Previous iocns in landscape mode
	 */
	public void nextAndPreviousIconValidation(String searchKeyword8) throws Exception {
		extent.HeaderChildNode("Validation of Next and Prevoius icons in Landscape Mode");
		System.out.println("\n Validation of Next and Prevoius icons in Landscape Mode");
		waitTime(5000);
		click(AMDSearchScreen.objSearchIcon, "Search icon");
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword8 + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
		click(AMDMoreMenu.objSearchResult(searchKeyword8), "Search result");
		if (!(pUserType.equalsIgnoreCase("SubscribedUser"))) {
			waitForAdToFinishInAmd();
			registerPopUpClose();
			completeProfilePopUpClose(pUserType);
		}
		waitForElementDisplayed(AMDPlayerScreen.objPlayer, 10);
		waitTime(5000);
		if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		}
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		click(AMDPlayerScreen.objFullscreenIcon, "Maximize Icon");
		waitTime(4000);
		click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		verifyElementPresentAndClick(AMDPlayerScreen.objNextIcon, "Next Icon in Landscape");
		waitTime(7000);
		if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
			click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
		}
		verifyElementPresent(AMDPlayerScreen.objPreviousIcon, "Previous Icon in Landscape");
		Back(3);
		BackToLandingScreen();
	}

	/**
	 * Author : Kushal
	 * @Note Login functionality
	 */
	public void ZEE5AppLogin(String pUserType) throws Exception {

		if (!pUserType.equals("Guest")) {
			// verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Login link");
			verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for Free");
			waitTime(3000);
		}

		switch (pUserType) {
		case "Guest":
			extent.HeaderChildNode(
					"Validating the Navigation to Login or Register Screen Tapping on the Login link available in Intro Screen");

//			verifyElementPresent(AMDLoginScreen.objLoginLnk, "Login Link");
//			click(AMDLoginScreen.objLoginLnk, "Login Link");
//			if (verifyIsElementDisplayed(AMDLoginScreen.objLoginPage)) {
//				logger.info(
//						"User navigated to Login/Register Screen Tapping on the Login link present on the Intro Screen");
//				extent.extentLoggerPass("Login/Register Screen",
//						"User is navigated to Login/register Screen Tapping on the Login link present on the Intro Screen");
//			} else {
//				logger.error(
//						"User is not navigated to Login/Register Screen Tapping on the Login link present on the Intro Screen");
//				extent.extentLoggerFail("Login/Register Screen",
//						"User is not navigated to Login/register Screen Tapping on the Login link present on the Intro Screen");
//			}
			waitTime(1000);
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Skip link");
			waitTime(5000);
			if (verifyElementPresent(AMDLoginScreen.objHomeTab, "Home Tab")) {
				logger.info("User navigated to Home Tab by clicking on the Skip button");
				extent.extentLoggerPass("Home Tab", "User navigated to Home Tab by clicking on the Skip button");
			} else {
				logger.error("User not navigated to Home Tab by clicking on the Skip button");
				extent.extentLoggerFail("Home Tab", "User not navigated to Home Tab by clicking on the Skip button");
			}
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as NonSubscribed User");

			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");

			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(5000);
			if (verifyIsElementDisplayed(AMDHomePage.HomeIcon)) {
				logger.info(Username + " logged into to ZEE5 App Successfully");
				extent.extentLoggerPass("Registered User", Username + " logged into to ZEE5 App Successfully");
			}
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User");

			String SubscribedUsername = getParameterFromXML("SubscribedUserName");
			String SubscribedPassword = getParameterFromXML("SubscribedPassword");

			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SubscribedUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(5000);
			if (verifyIsElementDisplayed(AMDHomePage.HomeIcon)) {
				logger.info(SubscribedUsername + " logged into to ZEE5 App Successfully");
				extent.extentLoggerPass("Registered User",
						SubscribedUsername + " logged into to ZEE5 App Successfully");
			}
			break;
		}
	}
/**
 * Logger info for Guest user type
 * @param featureName
 */
	public void loggerForNonGuestUserTypes(String featureName) {
		extent.HeaderChildNode(featureName);
		logger.info(featureName + " is NOT applicable for " + pUserType);
		extent.extentLoggerPass(featureName, featureName + " is NOT applicable for " + pUserType);
	}

	/**
	 * Author : Sushma
	 * @Note Verifying the continue watching tray
	 */
	public void verifyContinueWatchingTray(String userType, String TabName) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribedUser") | userType.equalsIgnoreCase("SubscribedUser")) {
			extent.HeaderChildNode("verify Continue Watching tray");
			waitForElementDisplayed(AMDHomePage.objContinueWatchingTray, 30);
			boolean ContinueWatchingTray = verifyIsElementDisplayed(AMDHomePage.objContinueWatchingTray);
			if (ContinueWatchingTray) {
				// Swipe("UP", 1);
				String CWTrayFirstContentTitle = getText(AMDHomePage.objCWTrayContent);
				logger.info(CWTrayFirstContentTitle);
				int leftTimeOnCWTrayContent = timeToSec(getText(AMDHomePage.objLeftTimeOfFirstContentOfCWTray));
				click(AMDHomePage.objContinueWatchingTrayContentCard, "CWTRay Content");
				waitTime(2000);
				if (userType.equals("NonSubscribedUser")) {
					waitForAdToFinishInAmd();
					completeProfilePopUpClose(userType);
				}
				waitForElementDisplayed(AMDPlayerScreen.objPlayer, 15);
				waitTime(6000);
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
				click(AMDPlayerScreen.objPauseIcon, "Pause icon");
				int elapsedTime = timeToSec(getText(AMDPlayerScreen.objTimer));
				int totalTime = timeToSec(getText(AMDPlayerScreen.objTotalDuration));
				int remainingTime = totalTime - elapsedTime;

				if (leftTimeOnCWTrayContent < (remainingTime + 10)) {
					logger.info("Content playback is started from the last view point");
					extent.extentLoggerPass("Continue watching Tray",
							"Content playback is started from the last view point");
				} else {
					logger.error("Content playback is not started from the last view point");
					extent.extentLoggerFail("Continue watching Tray",
							"Content playback is not started from the last view point");
				}

				if (elapsedTime < totalTime) {
					logger.info(
							"Continue watching tray includes only those movies/shows which have not reached the start time of end credit.");
					extent.extentLoggerPass("Continue watching Tray",
							"Continue watching tray includes only those movies/shows which have not reached the start time of end credit.");
				} else {
					logger.error(
							"Continue watching tray includes not only those movies/shows which have not reached the start time of end credit.");
					extent.extentLoggerFail("Continue watching Tray",
							"Continue watching tray includes not only those movies/shows which have not reached the start time of end credit.");
				}
				Back(1);
			} else {
				logger.info("Continue watching tray not displayed in " + TabName + " Screen");
				extent.extentLoggerWarning("Continue watching Tray",
						"Continue watching tray not displayed in " + TabName + " Screen");
			}
		}
	}

	/**
	 * Author : Bhavana
	 * @note Validation of Settings for Video streaming and Auto play
	 */
	public void settingsVideoStreamingAndAutoPlay(String userType, String searchKeyword1) throws Exception {
		extent.HeaderChildNode("Validation of Settings for Video Streaming and Autoplay as " + userType);
		System.out.println("\n Validation of Settings for Video Streaming and Autoplay as " + userType);
		waitTime(5000);
		click(AMDHomePage.objMoreMenu, "More menu");
		waitTime(2000);
		click(AMDMoreMenu.objSettings, "Setting button");
		verifyElementExist(AMDSettingsScreen.objVideoQualityDefaultvalue, "Video Quality option in Settings");
		boolean defaultvalue = verifyIsElementDisplayed(AMDSettingsScreen.objVideoQualityDefaultvalue);
		String value = findElement(AMDSettingsScreen.objVideoQualityDefaultvalue).getText();
		System.out.println(value);
		if (defaultvalue) {
			logger.info("Default video quality in Select video quality settings is displayed : " + value);
			extent.extentLoggerPass("Settings",
					"Default video quality in Select video quality settings is displayed : " + value);
		} else {
			logger.error("Default video quality is NOT displayed");
			extent.extentLogger("Settings", "Default video quality is NOT displayed");
		}
		Back(2);
		waitTime(5000);
		click(AMDHomePage.objSearchBtn, "Search icon");
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword1 + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
		click(AMDMoreMenu.objSearchResult(searchKeyword1), "Search result");
		waitTime(5000);
		if (!userType.contains("SubscribedUser")) {
			waitTime(4000);
			registerPopUpClose();
			completeProfilePopUpClose(userType);
//			LoadingInProgress();
			waitForAdToFinishInAmd();
			registerPopUpClose();
			waitTime(2000);
		}
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		click(AMDPlayerScreen.objFullscreenIcon, "Maximize Icon");
		waitTime(3000);
		AndroidTouchAction touch = new AndroidTouchAction(getDriver());
		touch.press(PointOption.point(150, 300)).waitAction(WaitOptions.waitOptions(Duration.ofMillis(2000))).release()
				.perform();
//		waitTime(5000);
//		click(AMDHomePage.objPlayerScreen, "Player Screen");
		click(AMDPlayerScreen.objThreeDotsOnPlayer, "Three dots option");
		String value2 = findElement(AMDSettingsScreen.objQualityOptionOnPlayer).getText();
		verifyElementExist(AMDSettingsScreen.objQualityOptionOnPlayer, "Video quality on player settings " + value2);
		if (value2.contains(value)) {
			logger.info(
					"Default video quality on player settings is as per the selection in Select video quality settings : "
							+ value2);
			extent.extentLoggerPass("Settings",
					"Default video quality on player settings is as per the selection in Select video quality settings : "
							+ value2);
		} else {
			logger.error(
					"Default video quality on player settings is NOT as per the selection in Select video quality settings : "
							+ value2);
			extent.extentLoggerFail("Settings",
					"Default video quality on player settings is NOT as per the selection in Select video quality settings : "
							+ value2);
		}
		click(AMDSettingsScreen.objQualityOptionOnPlayer, "Video Quality");
		String videoOption = findElement(AMDSettingsScreen.objoptionsInVideoQuality).getText();
		System.out.println(videoOption);
		click(AMDSettingsScreen.objoptionsInVideoQuality, "Option " + videoOption);
		waitTime(3000);
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		click(AMDPlayerScreen.objThreeDotsOnPlayer, "Three dots option");
		String DefaultOption = findElement(AMDSettingsScreen.objQualityOptionOnPlayer).getText();
		System.out.println(DefaultOption);
		if (DefaultOption.contains(videoOption)) {
			logger.info("Video Quality is Functional in the player");
			extent.extentLoggerPass("Settings", "Video Quality is Functional in the player");
		} else {
			logger.error("Video Quality is NOT Functional in the player");
			extent.extentLoggerFail("Settings", "Video Quality is NOT Functional in the player");
		}
		Back(3);
		click(AMDHomePage.objMoreMenu, "More menu");
		waitTime(3000);
		click(AMDMoreMenu.objSettings, "Settings button");
		String value3 = findElement(AMDSettingsScreen.objVideoQualityDefaultvalue).getText();
		if (DefaultOption.contains(value3) == false) {
			logger.info(
					"Settings changed from the player does not change the video settings set in the 'Select Video Quality' Settings screen.");
			extent.extentLoggerPass("Settings",
					"Settings changed from the player does not change the video settings set in the 'Select Video Quality' Settings screen");
		} else {
			logger.error(
					"settings changed from the player changes the video settings set in the 'Select Video Quality' Settings screen.");
			extent.extentLoggerFail("Settings",
					"settings changed from the player changes the video settings set in the 'Select Video Quality' Settings screen");
		}
		verifyElementExist(AMDSettingsScreen.objAutoPlayToggleSwitch, "Autoplay Toggle Switch");
		String value4 = findElement(AMDSettingsScreen.objAutoPlayToggleON).getText();
		System.out.println(value4);
		boolean autoPlayON = findElement(AMDSettingsScreen.objAutoPlayToggleON).isDisplayed();
		if (autoPlayON) {
			logger.info("Autoplay toggle switch is " + value4);
			extent.extentLogger("Settings", "Autoplay toggle switch is " + value4);
		} else {
			click(AMDSettingsScreen.objAutoPlayToggleSwitch, "Autoplay Toggle Switch");
			logger.info("Autoplay toggle switch is " + value4);
			extent.extentLogger("Settings", "Autoplay toggle switch is " + value4);
		}
		Back(2);
		waitTime(5000);
		click(AMDHomePage.objSearchBtn, "Search icon");
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword1 + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
		click(AMDMoreMenu.objSearchResult(searchKeyword1), "Search result");
		waitTime(8000);
		if (!userType.contains("SubscribedUser")) {
			waitTime(3000);
			registerPopUpClose();
			completeProfilePopUpClose(userType);
			LoadingInProgress();
			waitForAdToFinishInAmd();

		}
		// scrubVideoToLast(AMDPlayerScreen.objProgressBar);
		waitTime(5000);
		scrubProgressBarTillEnd(AMDPlayerScreen.objProgressBar);
		waitTime(2000);
		verifyElementExist(AMDPlayerScreen.objcontentTitleInconsumptionPage, "Next content");
		waitTime(5000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		waitTime(5000);
		boolean player = verifyIsElementDisplayed(AMDPlayerScreen.objPlayerScreen);
		if (player) {
			logger.info("When Autoplay switch is " + value4 + " User is automatically moved to the next content");
			extent.extentLoggerPass("Settings",
					"When Autoplay switch is " + value4 + " User is automatically moved to the next content");
		} else {
			logger.error("When Autoplay switch is " + value4 + " User is unable to move to the next content");
			extent.extentLoggerFail("Settings",
					"When Autoplay switch is " + value4 + " User is unable to move to the next content");
		}
		Back(2);
		click(AMDHomePage.objMoreMenu, "More menu");
		click(AMDMoreMenu.objSettings, "Settings button");
		click(AMDSettingsScreen.objAutoPlayToggleSwitch, "Autoplay switch");
		boolean autoPlayOFF = findElement(AMDSettingsScreen.objAutoPlayToggleOFF).isDisplayed();
		String value5 = findElement(AMDSettingsScreen.objAutoPlayToggleOFF).getText();
		if (autoPlayOFF) {
			logger.info("Autoplay toggle switch is " + value5);
			extent.extentLogger("Settings", "Autoplay toggle switch is " + value5);
		}
		Back(2);
		waitTime(4000);
		click(AMDHomePage.objSearchBtn, "Search icon");
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword1 + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
		click(AMDMoreMenu.objSearchResult(searchKeyword1), "Search result");
		waitTime(5000);
		if (!userType.contains("SubscribedUser")) {
			waitTime(8000);
			registerPopUpClose();
			completeProfilePopUpClose(userType);
			LoadingInProgress();
			waitForAdToFinishInAmd();

		}

//		scrubVideoToLast(AMDPlayerScreen.objProgressBar);
		waitTime(5000);
//		scrubProgressBarTillEnd(AMDPlayerScreen.objProgressBar);
		waitTime(2000);
		verifyElementExist(AMDPlayerScreen.objReplayIconOnPlayer, "Replay Icon");
		boolean replay = findElement(AMDPlayerScreen.objReplayIconOnPlayer).isDisplayed();
		if (replay) {
			logger.info("When Autoplay switch is " + value5 + " User can not automatically move to the next content");
			extent.extentLoggerPass("Settings",
					"When Autoplay switch is " + value5 + " User can not automatically move to the next content");
		} else {
			logger.error("When Autoplay switch is " + value5 + "User can automatically move to the next content");
			extent.extentLoggerFail("Settings",
					"When Autoplay switch is " + value5 + " User can automatically move to the next content");
		}
		Back(3);
	}

	/**
	 * Author : Kushal
	 * @Note Login functionality
	 */
	public void ZeeApplicasterLoginForKidsSection(String LoginMethod) throws Exception {
		extent.HeaderChildNode("Login Functionality");
		String UserType = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().getParameter("userType");
		if (UserType.equals("Guest")) {
			extent.extentLogger("userType", "UserType : Guest");
		}
//		verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Login link");
//		waitTime(3000);

		switch (LoginMethod) {
		case "Guest":
			extent.HeaderChildNode("Guest User");
			extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");
			waitTime(1000);
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Skip link");
			waitTime(3000);
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as NonSubscribed User for Settings");
			String pUsername = getParameterFromXML("NonSubsUserKids");
			String pPassword = getParameterFromXML("NonSubsPwdKids");
			verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for Free");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, pUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, pPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User for Settings");

			String pClubPackUser = getParameterFromXML("SubsUserClubPack");
			String pClubPackPwd = getParameterFromXML("SubsPwdClubPack");
			verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for Free");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, pClubPackUser, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, pClubPackPwd, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;
		}
	}

	/**
	 * Author : Vinay
	 * @Note Verifying the Mandatory register poup screen on consumption screen
	 */
	public void mandatoryPopUpScenarios(String userType) throws Exception {

		switch (userType.toLowerCase()) {
		case "subscribeduser":
			extent.HeaderChildNode("Verifying Mandatory Registration PopUp screen on Consumption screen");
			System.out.println("\nVerifying Mandatory Registration PopUp screen on Consumption screen");

			extent.extentLoggerPass("Mandatory PopUp Screen",
					"Mandatory Registration PopUp Screen is Not Applicable for " + userType);
			logger.info("Mandatory Registration PopUp Screen is Not Applicable for " + userType);
			break;

		case "nonsubscribeduser":
			extent.HeaderChildNode("Verifying Complete Profile PopUp screen on Consumption screen");
			System.out.println("\nVerifying Complete Profile PopUp screen on Consumption screen");

//--------- Commenting the below code since the content is played from TV Shows tab ------
//			verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search button");
//			verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
//			type(AMDSearchScreen.objSearchBoxBar, SVODEpisode, "Search bar");
//			hideKeyboard();
//			click(AMDSearchScreen.objFirstResult, "Search result");
			waitTime(2000);
			selectTopNavigationTab("TV Shows");
			waitTime(2000);
			click(AMDGenericObjects.objFirstCardFromTray, "First Content Card");

			extent.extentLogger("", "Playing Content - 1");
			System.out.println("Playing Content - 1");
			waitTime(3000);
			waitForAdToFinishInAmd();
			waitTime(4000);

			boolean isCompleteRegPopUp = verifyIsElementDisplayed(AMDConsumptionScreen.objCompleteProfilePopup);
			if (isCompleteRegPopUp) {
				extent.extentLoggerPass("Complete Profile Pop Up",
						"Complete Profile Pop Up is displayed in Consumption screen");
				logger.info("Complete Profile Pop Up is displayed in Consumption screen");

				verifyElementPresent(AMDConsumptionScreen.objMobNumField, "Mob Number Field");
				verifyElementPresent(AMDConsumptionScreen.objSendOTPBtn, "Send OTP Button");
				if (verifyElementDisplayed(AMDConsumptionScreen.objProfilePopupTextMsg)) {
					String getMsg = getText(AMDConsumptionScreen.objProfilePopupTextMsg);
					extent.extentLoggerPass("PopUp Text",
							"\"" + getMsg + "\"  is displayed on the Complete Profile Popup");
					logger.info(getMsg + "is displayed in the Complete Profile Popup");
				}

				verifyElementPresentAndClick(AMDGenericObjects.objPopUpDivider, "Popup Divider");
				waitTime(1000);
//				click(AMDPlayerScreen.objPlayerScreen, "Player");
				click(AMDPlayerScreen.objPause, "Pause icon");

				for (int i = 1; i <= 5; i++) {
					extent.extentLogger("Content Playing", "Playing Content - " + (i + 1));
					logger.info("Playing Content - " + i);
					waitTime(5000);
					if (i == 5) {
						PartialSwipeInConsumptionScreen("Up", 1);
						click(AMDConsumptionScreen.objFirstUpNextContent, "Next content");
						waitTime(4000);
						isCompleteRegPopUp = verifyIsElementDisplayed(AMDConsumptionScreen.objCompleteProfilePopup);
						if (isCompleteRegPopUp) {
							extent.extentLoggerPass("Complete Profile Pop Up",
									"Complete Profile Pop Up is displayed after playing 5-Free contents");
							logger.info("Complete Profile Pop Up is displayed after playing 5-Free contents");

							verifyElementPresent(AMDConsumptionScreen.objMobNumField, "Mob Number Field");
							verifyElementPresent(AMDConsumptionScreen.objSendOTPBtn, "Send OTP Button");
							if (verifyElementDisplayed(AMDConsumptionScreen.objProfilePopupTextMsg)) {
								String getMsg = getText(AMDConsumptionScreen.objProfilePopupTextMsg);
								extent.extentLoggerPass("PopUp Text",
										"\"" + getMsg + "\"  is displayed on the Complete Profile Popup");
								logger.info(getMsg + "is displayed in the Complete Profile Popup");
							}
							verifyElementPresentAndClick(AMDGenericObjects.objPopUpDivider, "Popup Divider");
							waitTime(1000);
							boolean isCompletePorfileOnPlayer = verifyIsElementDisplayed(
									AMDConsumptionScreen.objRegisterBtnOnPlayer);
							if (isCompletePorfileOnPlayer) {
								String btnName = getText(AMDConsumptionScreen.objRegisterBtnOnPlayer);
								String errTxt = getText(AMDConsumptionScreen.objErrTextOnPlayer);
								extent.extentLoggerPass("Complete Profile",
										btnName.toUpperCase() + " is displayed on the Player screen");
								logger.info("Complete Profile button is displayed on the Player screen");

								extent.extentLoggerPass("Error Text",
										"\"" + errTxt + "\"  is displayed on the Player screen");
								logger.info("\"" + errTxt + "\" is displayed on the Player screen");

								Back(1);
							} else {
								extent.extentLoggerFail("Complete Profile",
										"Complete Profile button is not displayed on the Player screen and Playback is initiated");
								logger.info(
										"Complete Profile button is not displayed on the Player screen and Playback is initiated");
							}
						} else {
							extent.extentLoggerFail("Complete Profile Pop Up",
									"Complete Profile Pop Up is NOT displayed after playing 5-free contents");
							logger.info("Complete Profile Pop Up is NOT displayed after playing 5-free contents");
						}
					} else {
						PartialSwipeInConsumptionScreen("Up", 1);
						click(AMDConsumptionScreen.objFirstUpNextContent, "Play Next content");
						waitForAdToFinishInAmd();
						if (!verifyIsElementDisplayed(AMDPlayerScreen.objPause)) {
							click(AMDPlayerScreen.objPlayerScreen, "Player screen");
						}
//						waitForElementDisplayed(AMDPlayerScreen.objPause, 20);
						click(AMDPlayerScreen.objPause, "Pause icon");
					}
				}
			} else {
				extent.extentLoggerFail("Complete Profile Pop Up",
						"Complete Profile Pop Up is NOT displayed on playing content");
				logger.error("Complete Profile Pop Up is NOT displayed on playing content");
			}

			break;

		case "guest":

			extent.HeaderChildNode("Verifying Mandatory Registration PopUp screen on Consumption screen");
			System.out.println("\nVerifying Mandatory Registration PopUp screen on Consumption screen");
			waitTime(4000);

			verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search button");
			verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, SVODEpisode, "Search bar");
			hideKeyboard();
			click(AMDSearchScreen.objFirstResult, "Search result");

			extent.extentLogger("", "Playing Content - 1");
			System.out.println("Playing Content - 1");
			waitTime(5000);
			waitForAdToFinishInAmd();

			boolean isRegisterPopUp = verifyIsElementDisplayed(AMDConsumptionScreen.objRegisterPopUp);
			if (isRegisterPopUp) {
				extent.extentLoggerPass("First Register Pop Up after ad",
						"Register Pop up is displayed after ad completed for first free content");
				logger.info("Register Pop up is displayed after ad completed for  first free content");
				Back(1);
			} else {
				extent.extentLoggerFail("First Register pop up after ad",
						"Register Pop up is not displayed after ad completing for playing first free content");
				logger.info("Register Pop up is not displayed after ad completing for playing first free content");
			}

			click(AMDPlayerScreen.objPause, "Pause icon");
			scrubVideo(AMDPlayerScreen.objProgressBar);

			for (int i = 1; i <= 5; i++) {

				extent.extentLogger("Content Playing", "Playing Content - " + (i + 1));
				logger.info("Playing Content - " + i);
				waitTime(5000);
				if (i == 5) {
					PartialSwipeInConsumptionScreen("Up", 1);
					click(AMDConsumptionScreen.objFirstUpNextContent, "Next content");
					waitTime(4000);
					boolean isRegisterPopUpFor5Content = verifyIsElementDisplayed(
							AMDConsumptionScreen.objRegisterPopUp);
					if (isRegisterPopUpFor5Content) {
						extent.extentLoggerPass("Mandatory Register pop up after ad",
								"Mandatory Register Pop up is displayed after playing 5-SVOD contents");
						logger.info("Mandatory Register Pop up is displayed after playing 5-SVOD contents");

						click(AMDConsumptionScreen.objLoginBtnOnPopup, "Login button on Register pop up");
						String header = getText(AMDGenericObjects.objgetScreenTitle);
						if (header.equals("Login/Register")) {
							extent.extentLoggerPass("Login screen",
									"User is navigated to Login/Register screen post tapping Login button from Register pop up");
							logger.info(
									"User is navigated to Login/Register screen post tapping Login button from Register pop up");
						} else {
							extent.extentLoggerFail("Login screen",
									"Failed to Navigate into Login/Register screen post tapping login from Register pop up");
							logger.info(
									"Failed to Navigate into Login/Register screen post tapping login from Register pop up");
						}
						hideKeyboard();
						Back(2);
						boolean isRegisterOnPlayerScreen = verifyIsElementDisplayed(
								AMDConsumptionScreen.objRegisterBtnOnPlayer);
						if (userType.equals("Guest")) {
							if (isRegisterOnPlayerScreen) {
								extent.extentLoggerPass("Register link",
										"Register button is displayed on the Player screen");
								logger.info("Register button is displayed on the Player screen");

								extent.extentLoggerPass("Error Text",
										"\"" + getText(AMDConsumptionScreen.objErrTextOnPlayer)
												+ "\"  is displayed on the Player screen");
								logger.info(getText(AMDConsumptionScreen.objErrTextOnPlayer)
										+ "is displayed on the Player screen");
							} else {
								extent.extentLoggerFail("Register pop up",
										"Register button is not displayed on the Player screen and Playback is initiated");
								logger.info(
										"Register button is not displayed on the Player screen and Playback is initiated");
							}
						} else {
							if (isRegisterOnPlayerScreen) {
								extent.extentLoggerPass("Complete Profile",
										"Complete Profile button is displayed on Player screen");
								logger.info("Complete Profile button is displayed on Player screen");
							} else {
								extent.extentLoggerFail("Complete Profile pop up",
										"Complete Profile button is not displayed on Player screen and Playback is initiated");
								logger.info(
										"Complete Profile button is not displayed on Player screen and Playback is initiated");
							}
						}

					} else {
						extent.extentLoggerFail("Mandatory Register Pop Up",
								"Mandatory Register Pop up is not displayed after playing 5-free contents");
						logger.info("Mandatory Register Pop up is not displayed after playing 5-free contents");
					}
				} else {

					PartialSwipeInConsumptionScreen("Up", 1);
					click(AMDConsumptionScreen.objFirstUpNextContent, "Play Next content");
					waitForAdToFinishInAmd();
					if (!verifyIsElementDisplayed(AMDPlayerScreen.objPause)) {
						click(AMDPlayerScreen.objPlayerScreen, "Player screen");
					}
//					waitForElementDisplayed(AMDPlayerScreen.objPause, 20);
					click(AMDPlayerScreen.objPause, "Pause icon");
				}
			}
			break;

		default:
			extent.HeaderChildNode("Verifying Mandatory Registration PopUp screen on Consumption screen");
			System.out.println("\nVerifying Mandatory Registration PopUp screen on Consumption screen");
			System.out.println("\n***** Invalid UserType Passed *****");
			extent.extentLoggerFail("Complete Profile Pop Up", "***** Invalid UserType Passed *****");
			logger.error("***** Invalid UserType Passed *****");
			break;
		}
	}
/**
 * Method to scrub the video
 * @param byLocator1
 * @throws Exception
 */
	public void scrubVideo(By byLocator1) throws Exception {

		WebElement element = getDriver().findElement(byLocator1);
		Dimension size = element.getSize();
		int startx = (int) (size.width);
		int startX = startx + 100;
		System.out.println(startX);
		SwipeAnElement(element, startX, 0);
		waitTime(2000);

	}
/**
 * Validating the SVOD consumption screen
 * @param userType
 * @return
 * @throws Exception
 */
	public String SVODConsumptionScreenForEpisode(String userType) throws Exception {
		String episodeName = "";

		click(AMDHomePage.objShowsTab, "Shows tab");
		waitTime(2000);
		swipeUntilFindElement(AMDGenericObjects.objTrayTitle("Before"), "Up");
		String beforeTVtrayName = findElement(AMDGenericObjects.objTrayTitle("Before")).getText();
		click(AMDGenericObjects.objViewAllBtn(beforeTVtrayName), "View All_Before TV Show");
		episodeName = getText(AMDConsumptionScreen.objBeforeTVContentName);
		click(AMDConsumptionScreen.objBeforeTVContentName, "BeforeTV content");

		return episodeName;

	}
/**
 * method to capturing the abd logs
 * @param fileName
 * @param pFilter
 * @throws IOException
 */
	@SuppressWarnings("unused")
	public void captureADBLogs(String fileName, String pFilter) throws IOException {

		String dir = System.getProperty("user.dir");
		String platform = getDriver().getPlatformName();
//		String newADBfile = dir + "\\ADBLogs\\" +platform + "\\" +fileName + ".txt";
		String newADBfile = "D:\\ADBLogs\\" + platform + "\\" + fileName + ".txt";

		System.out.println(newADBfile);

		File file = new File(newADBfile);
		if (!file.isDirectory()) {
			file.mkdirs();
		}

		if (file.exists()) {
			file.delete();
			waitTime(5000);
		}
		file.createNewFile();
		try {
			System.out.println("\nStarted capturing AdB logs...");

			Runtime process = Runtime.getRuntime();
			if (pFilter.length() > 1) {
//				process.exec("cmd /c adb logcat -s \"W GoogleTagManager\" >" + newADBfile);
				process.exec("cmd /c adb logcat -s " + pFilter + " >" + newADBfile);
			} else {
				process.exec("cmd /c adb logcat >" + newADBfile);
			}

		} catch (Throwable t) {
			t.printStackTrace();
		}
	}
/**
 * Method to kill the adb server
 */
	public void stopADBLogcat() {
		try {
			Runtime process = Runtime.getRuntime();
			process.exec("adb.exe kill-server");
			System.out.println("ADB Logs captured\n");

		} catch (Throwable t) {
			t.printStackTrace();
		}
	}
/**
 * Method will scrub the progress bar to middle
 * @param byLocator1
 * @throws Exception
 */
	public void scrubProgressBarToMid(By byLocator1) throws Exception {
		String beforeSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time before seeking : " + timeToSec(beforeSeek));
		extent.extentLogger("Seek", "Current time before seeking in seconds: " + timeToSec(beforeSeek));
		click(AMDPlayerScreen.objPauseIcon, "Pause");
		WebElement element = getDriver().findElement(byLocator1);
		String xDuration = getAttributValue("x", AMDPlayerScreen.objTotalDuration);
		int endX = Integer.parseInt(xDuration) - 60;
		SwipeAnElement(element, endX, 0);
		String afterSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time after seeking : " + timeToSec(afterSeek));
		extent.extentLogger("Seek", "Current time after seeking in seconds: " + timeToSec(afterSeek));
		click(AMDPlayerScreen.objPlayIcon, "Play");
		waitTime(6000);
	}
/**
 * Method to scrub the progress bar to the middle
 * @param byLocator1
 * @throws Exception
 */
	public void scrubProgressBarToMidDFP(By byLocator1) throws Exception {
		String beforeSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time before seeking : " + timeToSec(beforeSeek));
		extent.extentLogger("Seek", "Current time before seeking in seconds: " + timeToSec(beforeSeek));
		click(AMDPlayerScreen.objPauseIcon, "Pause");
		WebElement element = getDriver().findElement(byLocator1);
		String xDuration = getAttributValue("x", AMDPlayerScreen.objTotalDuration);
		int endX = Integer.parseInt(xDuration) - 60;
		SwipeAnElement(element, endX, 0);
		waitTime(6000);
	}
/**
 * Method will scrib the progress bar to the end
 * @param byLocator1
 * @throws Exception
 */
	public void scrubProgressBarTillEndDFP(By byLocator1) throws Exception {
		String beforeSeek = findElement(AMDPlayerScreen.objTimer).getText();
		logger.info("Current time before seeking : " + timeToSec(beforeSeek));
		extent.extentLogger("Seek", "Current time before seeking in seconds: " + timeToSec(beforeSeek));
		click(AMDPlayerScreen.objPauseIcon, "Pause");
		WebElement element = getDriver().findElement(byLocator1);
		String xDuration = getAttributValue("x", AMDPlayerScreen.objTotalDuration);
		int endX = Integer.parseInt(xDuration) - 30;
		SwipeAnElement(element, endX, 0);
		waitTime(6000);
	}
/**
 * validating the subscription for HLS
 * @param userType
 * @throws Exception
 */
	public void subscriptionValidationForHLS(String userType) throws Exception {
		extent.HeaderChildNode("Verify Join Now/Subscribe Now CTA in Intro screen");
		verifyElementPresent(AMDOnboardingScreen.objSubscribeNowBtn, "Subscribe now CTA");
	//	zeeApplicasterLogin(userType);
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			extent.HeaderChildNode("Verify Get Premium/Subscribe CTA in Header");
			verifyElementPresent(AMDHomePage.objSubscribeTeaser, "Subscribe CTA");

			extent.HeaderChildNode("Verify Get Premium CTA on carousel");
			waitTime(2000);
			verifyElementPresent(AMDHomePage.objGetPremiumCTAOnCarousel, "Get Premium CTA on carousel");

			click(AMDHomePage.objSubscribeTeaser, "Subscribe CTA");
			waitTime(5000);
			String prepaidcode = "Z56MSK93rJGDyi";
			click(AMDSubscibeScreen.objApplyPromoCodeTextbox, "Prepaid code");
			type(AMDSubscibeScreen.objApplyPromoCodeTextbox, prepaidcode, "Prepaid code");
			hideKeyboard();
			click(AMDSubscibeScreen.objApply, "Apply button");
			if (userType.equals("Guest")) {
				boolean objAccountinfo = verifyIsElementDisplayed(AMDSubscibeScreen.objAccountInfoText1);
				if (objAccountinfo) {
					logger.info(
							"User is navigated to Account info screen on tapping apply button after entering prepaid code");
					extent.extentLoggerPass("Account info",
							"User is navigated to Account info screen on tapping apply button after entering prepaid code");
				} else {
					logger.error("User is unable to navigate to Account info screen");
					extent.extentLoggerFail("Account info", "User is unable to navigate to Account info screen");
				}

				click(AMDSubscibeScreen.objEmailID, "Email field");
				type(AMDSubscibeScreen.objEmailID, "zee5latest@gmail.com", "Email field");
				hideKeyboard();
				click(AMDSubscibeScreen.objProceedBtn, "Proceed button");
				click(AMDSubscibeScreen.objPasswordTextField, "Password field");
				type(AMDSubscibeScreen.objPasswordTextField, "User@123", "Password field");
				hideKeyboard();
				click(AMDSubscibeScreen.objProceedPWDScreen, "Proceed button");
				waitTime(5000);
				verifyElementPresent(AMDSubscibeScreen.objInvalidPrepaidCodePopUp, "Invalid Prepaid code pop up");
				verifyElementPresentAndClick(AMDSubscibeScreen.objDoneBtn, "Done Button");
				waitTime(5000);

				Back(1);
				waitTime(2000);
				click(AMDHomePage.objMoreMenu, "More Menu");
				Swipe("UP", 2);
				click(AMDHomePage.objLogout, "Logout");
				click(AMDHomePage.objLogoutPopUpLogoutButton, "Logout button");
				waitTime(2000);
				Back(1);
				waitTime(5000);
				click(AMDHomePage.objSubscribeTeaser, "Subscribe CTA");
			}

			waitTime(5000);
			Swipe("UP", 2);
			PartialSwipe("UP", 2);
			Swipe("DOWN", 1);

			String defaultSelectedPack = getText(AMDSubscibeScreen.objDefaultSelectedPack);
			logger.info("Default Selected Pack : " + defaultSelectedPack);
			extentLoggerPass("Default Selected Pack", "Default Selected Pack : " + defaultSelectedPack);

			verifyElementPresent(AMDSubscibeScreen.objPremiumTab, "Premium pack tab");
			verifyElementPresent(AMDSubscibeScreen.objClubTab, "Club pack tab");
			Swipe("UP", 1);
			int size = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).size();
			for (int i = 0; i < size; i++) {
				boolean isDisplayed = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).isDisplayed();
				if (isDisplayed) {
					String pack = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).getText();
					extent.extentLoggerPass("", "Pack Title " + i + " : " + pack);
					logger.info("Pack Title " + i + " : " + pack);

					String packDescription = getDriver().findElements(AMDSubscibeScreen.objPackDescription).get(i)
							.getText();
					extent.extentLoggerPass("", "Pack Description " + i + " : " + packDescription);
					logger.info("Pack Description " + i + " : " + packDescription);

				} else {
					extent.extentLoggerFail("Packs", "No Packs are available");
					logger.info("No Packs are available");
				}
			}

			Back(1);
			waitTime(5000);
			click(AMDHomePage.objSearchBtn, "Search button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, "Londonalli Lambodara", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objContentNameInPlayer("Londonalli Lambodara"), "Search result");
			waitTime(5000);
			verifyIsElementDisplayed(AMDSearchScreen.objContentNameInPlayer("Londonalli Lambodara"));
			waitTime(3000);
			click(AMDSubscibeScreen.objGetPremiumBtn, "Get Premium Button");
			verifyElementPresent(AMDHomePage.objGetPremiumPopUP, "Get Premium PopUp");

			click(AMDSubscibeScreen.objHaveAPromocode, "Prepaid code");
			type(AMDSubscibeScreen.objHaveAPromocode, prepaidcode, "Prepaid code");
			hideKeyboard();
			click(AMDSubscibeScreen.objApplyBtn, "Apply button");

			if (userType.equals("Guest")) {
				boolean objAccountinfo = verifyIsElementDisplayed(AMDSubscibeScreen.objAccountInfoText1);
				if (objAccountinfo) {
					logger.info(
							"User is navigated to Account info screen on tapping apply button after entering prepaid code");
					extent.extentLoggerPass("Account info",
							"User is navigated to Account info screen on tapping apply button after entering prepaid code");
				} else {
					logger.error("User is unable to navigate to Account info screen");
					extent.extentLoggerFail("Account info", "User is unable to navigate to Account info screen");
				}

				click(AMDSubscibeScreen.objEmailID, "Email field");
				type(AMDSubscibeScreen.objEmailID, "zee5latest@gmail.com", "Email field");
				hideKeyboard();
				click(AMDSubscibeScreen.objProceedBtn, "Proceed button");
				click(AMDSubscibeScreen.objPasswordTextField, "Password field");
				type(AMDSubscibeScreen.objPasswordTextField, "User@123", "Password field");
				hideKeyboard();
				click(AMDSubscibeScreen.objProceedPWDScreen, "Proceed button");
				waitTime(5000);
				verifyElementPresent(AMDSubscibeScreen.objInvalidPrepaidCodePopUp, "Invalid Prepaid code pop up");
				verifyElementPresentAndClick(AMDSubscibeScreen.objDoneBtn, "Done Button");
			}

		}

	}
/**
 * @Note This method is used to validate Home landing screen
 * @param userType
 * @throws Exception
 */
	public void home_LandingScreen(String userType) throws Exception {
		extent.HeaderChildNode("Validation of Home Landing screen");

		verifyElementPresent(AMDHomePage.objCarouselConetentCard, "Carousel unit");

		if (userType.equalsIgnoreCase("Guest")) {
			verifyElementExist(AMDHomePage.objGetPremiumCTAOnCarousel, "Buy Plan CTA");
		}

		waitTime(3000);

		String width = getAttributValue("width", AMDHomePage.objCarouselConetentCard);
		String bounds = getAttributValue("bounds", AMDHomePage.objCarouselConetentCard);
		String b = bounds.replaceAll(",", " ").replaceAll("]", " ");
		String height = b.split(" ")[1];

		carouselCardsSwipe("LEFT", 1, width, height);
		String courselContentTitle = getText(AMDHomePage.objCarouselTitle1);
		System.out.println(courselContentTitle);
		waitForElementAndClickIfPresent(AMDHomePage.objContentTitle(courselContentTitle), 25, "Carousel content");
		if (verifyIsElementDisplayed(AMDHomePage.objListingScreen)) {
			logger.info("Listing screen is displayed on tapping carousal banner");
			extentLogger("Listing screen", "Listing screen is displayed on tapping carousal banner");
		} else {
			waitTime(5000);
			if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
				Back(1);
				// click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
			}
			verifyElementPresent(AMDHomePage.objConsumptionScreenTitle, "Consumption screen");
			String consumptionScreenTitle = getText(AMDConsumptionScreen.objContentInfo);
			String title = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);
			if ((consumptionScreenTitle.contains(courselContentTitle)) | (title.contains(courselContentTitle))) {
				logger.info("Respective content screen on tap of any carousel banner is displayed");
				extent.extentLoggerPass("Consumption screen",
						"Respective content screen on tap of any carousel banner is displayed");
			} else {
				logger.error("Respective content screen on tap of any carousel banner is not displayed");
				extent.extentLoggerFail("Consumption screen",
						"Respective content screen on tap of any carousel banner is not displayed");
			}

			if (userType.equalsIgnoreCase("Guest")) {
				waitTime(5000);
				boolean flag = verifyIsElementDisplayed(AMDHomePage.objLoginButtonOnPlayerscreen);
				if (flag == true) {
					logger.info(
							"user is navigated to consumption screen with Login button on player post tapping any premium content from the banner section");
					extentLoggerPass("Login button",
							"user is navigated to consumption screen with Login button on player post tapping any premium content from the banner section");
				} else {
					logger.info(
							"user is navigated to consumption screen with Trailer on player post tapping any premium content from the banner section");
					extentLogger("Login button",
							"user is navigated to consumption screen with Trailer on player post tapping any premium content from the banner section");
				}
			}
		}
		Back(1);
		navigateBackToHomeLandingScreen();
	}
/**
 * @Note This method is used to validate Search module
 * @param userType
 * @param keyword
 * @throws Exception
 */
	public void TextSearchAndVoiceSearch(String userType, String keyword) throws Exception {
		verifySearchOption(userType);

		extent.HeaderChildNode("Verify Recent search Overlay");
		click(AMDSearchScreen.objSearchIcon, "Search icon");
		waitTime(10000);
		boolean var = verifyIsElementDisplayed(AMDSearchScreen.objRecentsearchOverlay);
		if (var == true) {
			logger.info("Recent search Overlay is displayed");
			extentLoggerPass("Recent searches", "Recent search Overlay is displayed");
		} else {
			logger.info("Recent search Overlay is not displayed for this user");
			extentLogger("Recent searches", "Recent search Overlay is not displayed for this user");
		}

		extent.HeaderChildNode("Verify Search results");

		waitTime(5000);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, keyword, "Search box");
		waitTime(5000);
		click(AMDSearchScreen.objSearchkeypad, "Search icon in keypad");
		hideKeyboard();
		waitTime(6000);
		//click(AMDSearchScreen.objtemp,"Search result");
		//click(AMDSearchScreen.objContentNameInPlayer(contentWithoutTrailer), "Search result");

		String searchResults = findElement(AMDSearchScreen.objTextofSearchresult(keyword)).getText();
		System.out.println("Search result : " + searchResults);

		if (searchResults.contains(keyword)) {
			logger.info("Proper search results are displayed");
			extent.extentLoggerPass("Proper search results", "Proper search results are displayed");
		} else {
			logger.error("Proper search results are not displayed");
			extent.extentLoggerFail("Proper search results", "Proper search results are not displayed");
		}

	//	String searchResultTitle = getText(AMDSearchScreen.objSearchResultFirstContent);
		click(AMDSearchScreen.objContentNameInPlayer(keyword), "Search result");
		if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
			Back(1);
			// click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
		}
		waitTime(300);
		verifyElementPresent(AMDHomePage.objConsumptionScreenTitle, "Consumption screen");
		String consumptionScreenTitle = getText(AMDConsumptionScreen.objContentInfo);
		String title = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);
		if ((consumptionScreenTitle.contains(searchResults)) | (title.contains(searchResults))) {
			logger.info("User taken to respective consumption screen on tapping any search result.");
			extent.extentLoggerPass("Consumption screen",
					"User taken to respective consumption screen on tapping any search result.");
		} else {
			logger.error("User not taken to respective consumption screen on tapping any search result.");
			extent.extentLoggerFail("Consumption screen",
					"User not taken to respective consumption screen on tapping any search result.");
		}
		BackToLandingScreen();
	}
/**
 * @Note This method is used to validate Before TV episode and consumption screen.
 * @param userType
 * @param keyword1
 * @param keyword2
 * @throws Exception
 */
	public void playBack(String userType, String keyword1, String keyword2) throws Exception {
		extent.HeaderChildNode("Verify Playback Page");

		click(AMDHomePage.objShowsTab, "Shows Tab");
		waitTime(5000);
//		closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000); // INTERSTITIAL AD - HANDLED HERE
		Swipe("UP", 3);
		waitTime(5000);
		boolean beforTV = verifyIsElementDisplayed(AMDHomePage.objBeforeTVTray);
		if (beforTV) {
			waitTime(5000);
			String beforeTVtrayName = findElement(AMDHomePage.objBeforeTVTray).getText();
			click(AMDGenericObjects.objViewAllBtn(beforeTVtrayName), "View All_Before TV Show");
			waitTime(4000);
			click(AMDHomePage.objBeforeTVContent, "BeforeTV content");
			if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
				waitForAdToFinishInAmd();
				// click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			}
			if (userType.equalsIgnoreCase("Guest")) {
				registerPopUpClose();
			}
			completeProfilePopUpClose(userType);
			waitTime(5000);
			if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
				Back(1);
				// click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
			}
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			boolean flag = verifyIsElementDisplayed(AMDPlayerScreen.objPlayer);
			if (flag == true) {
				logger.info("the playback of free TV Show episode is displayed");
				extentLoggerPass("PlayBack", "the playback of free TV Show episode is displayed");
			} else {
				logger.info("the playback of free TV Show episode is not displayed");
				extentLoggerFail("PlayBack", "the playback of free TV Show episode is not displayed");
			}
			Back(1);
			navigateBackToHomeLandingScreen();
		} else {
			logger.info("Before Tv Tray is not displayed");
			extentLoggerWarning("Before Tv", "Before Tv Tray is not displayed");
		}

		waitTime(15000);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, keyword2, "Search box");
		waitTime(5000);
		click(AMDSearchScreen.objSearchkeypad, "Search icon in keypad");
		hideKeyboard();
		waitTime(6000);
		//click(AMDSearchScreen.objtemp,"Search result");
		click(AMDSearchScreen.objContentNameInPlayer(keyword2), "Search result");
		waitTime(5000);
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			verifyElementPresent(AMDPlayerScreen.objSubscribeButtonBelowThePlayer, "GetPremium Banner");
		}

		verifyElementPresent(AMDConsumptionScreen.objShareBtn, "Share CTA");
		verifyElementPresent(AMDConsumptionScreen.objWatchlistBtn, "Watchlist CTA");
		verifyElementPresent(AMDConsumptionScreen.objDownloadBtn, "Download CTA");
	}
/**
 * verifying the Buy plan button on Landing screen
 * @param userType
 * @param contentWithoutTrailer
 * @throws Exception
 */
	@SuppressWarnings("deprecation")
	public void subscriptionValidationForHLS(String userType, String contentWithoutTrailer) throws Exception {
		extent.HeaderChildNode("Verify Buy Plan button on Landing screen");
		//zeeApplicasterLogin(userType);
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			extent.HeaderChildNode("Verify Get Premium/Subscribe CTA in Header");
			verifyElementPresent(AMDHomePage.objSubscribeTeaser, "Buy plan CTA on landing screen");

			extent.HeaderChildNode("Verify Buy Plan CTA on carousel");
			waitTime(2000);
			verifyElementPresent(AMDHomePage.objGetPremiumCTAOnCarousel, "Buy Plan CTA on carousel");

			click(AMDHomePage.objSubscribeTeaser, "Buy Plan CTA on landing screen");
			waitTime(5000);
			String prepaidcode = "zee5scb";
			Swipe("UP", 1);
			click(AMDSubscibeScreen.objHaveACodeCTA, "Have a code");
			waitTime(2000);
			getDriver().getKeyboard().sendKeys(prepaidcode);
			// type(AMDSubscibeScreen.objApplyPromoCodeTextbox, prepaidcode, "Prepaid
			// code");
			hideKeyboard();
			click(AMDSubscibeScreen.objApplyOnHaveACodescreen, "Apply button");
			// Have a code flow has been changed
			/*
			 * if (userType.equals("Guest")) { boolean objAccountinfo =
			 * verifyIsElementDisplayed(AMDSubscibeScreen.objAccountInfoText1); if
			 * (objAccountinfo) { logger.info(
			 * "User is navigated to Account info screen on tapping apply button after entering prepaid code"
			 * ); extent.extentLoggerPass("Account info",
			 * "User is navigated to Account info screen on tapping apply button after entering prepaid code"
			 * ); } else {
			 * logger.error("User is unable to navigate to Account info screen");
			 * extent.extentLoggerFail("Account info",
			 * "User is unable to navigate to Account info screen"); }
			 * 
			 * click(AMDSubscibeScreen.objEmailID, "Email field");
			 * type(AMDSubscibeScreen.objEmailID, "zee5latest@gmail.com", "Email field");
			 * hideKeyboard(); click(AMDSubscibeScreen.objProceedBtn, "Proceed button");
			 * click(AMDSubscibeScreen.objPasswordTextField, "Password field"); //
			 * type(AMDSubscibeScreen.objPasswordTextField, "User@123"+"\n", "Password //
			 * field"); getDriver().getKeyboard().sendKeys("User@123" + "\n");
			 * 
			 * hideKeyboard(); click(AMDSubscibeScreen.objProceedPWDScreen,
			 * "Proceed button");
			 */
			if (verifyIsElementDisplayed(AMDSubscibeScreen.objApplyPromoCodeappliedText)) {
				logger.info("Discounted price is displayed after promo code is applied");
				extent.extentLoggerPass("Promo", "Discounted price is displayed after promo code is applied");
			} else {
				logger.error("Discounted price is not displayed after promo code is applied");
				extent.extentLoggerFail("Promo", "Discounted price is not displayed after promo code is applied");
			}

			// verifyElementPresent(AMDSubscibeScreen.objInvalidPrepaidCodePopUp, "Invalid
			// Prepaid code pop up");
			// verifyElementPresentAndClick(AMDSubscibeScreen.objDoneBtn, "Done Button");
			// waitTime(5000);

			Back(1);
			waitTime(2000);

			// Subscribe screen feature has been changed
			/*
			 * waitTime(5000); Swipe("UP", 2); PartialSwipe("UP", 2); Swipe("DOWN", 1);
			 * 
			 * String defaultSelectedPack =
			 * getText(AMDSubscibeScreen.objDefaultSelectedPack);
			 * logger.info("Default Selected Pack : " + defaultSelectedPack);
			 * extentLoggerPass("Default Selected Pack", "Default Selected Pack : " +
			 * defaultSelectedPack);
			 * 
			 * verifyElementPresent(AMDSubscibeScreen.objPremiumTab, "Premium pack tab");
			 * //verifyElementPresent(AMDSubscibeScreen.objClubTab, "Club pack tab");
			 * Swipe("UP", 1); int size =
			 * getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).size(); for (int i
			 * = 0; i < size; i++) { boolean isDisplayed =
			 * getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).isDisplayed(
			 * ); if (isDisplayed) { String pack =
			 * getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).getText();
			 * extent.extentLoggerPass("", "Pack Title " + i + " : " + pack);
			 * logger.info("Pack Title " + i + " : " + pack);
			 * 
			 * String packDescription =
			 * getDriver().findElements(AMDSubscibeScreen.objPackDescription).get(i)
			 * .getText(); extent.extentLoggerPass("", "Pack Description " + i + " : " +
			 * packDescription); logger.info("Pack Description " + i + " : " +
			 * packDescription);
			 * 
			 * } else { extent.extentLoggerFail("Packs", "No Packs are available");
			 * logger.info("No Packs are available"); } }
			 * 
			 * Back(1);
			 */
			waitTime(5000);
			click(AMDHomePage.objSearchBtn, "Search button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, contentWithoutTrailer, "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objContentNameInPlayer(contentWithoutTrailer), "Search result");
			waitTime(5000);
			verifyIsElementDisplayed(AMDConsumptionScreen.objContentName);
			waitTime(3000);
			click(AMDPlayerScreen.objSubscribeButtonBelowThePlayer, "Buy Plan CTA below the player");
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe screen");
			Swipe("UP", 1);
			click(AMDSubscibeScreen.objHaveACodeCTA, "Prepaid code");
			waitTime(2000);
			String prepaidcode1 = "Z56MSK93rJGDyi";
			getDriver().getKeyboard().sendKeys(prepaidcode1);
			hideKeyboard();
			click(AMDSubscibeScreen.objApplyOnHaveACodescreen, "Apply button");
			// Have a code flow has been changed
			/*
			 * if (userType.equals("Guest")) { boolean objAccountinfo =
			 * verifyIsElementDisplayed(AMDSubscibeScreen.objAccountInfoText1); if
			 * (objAccountinfo) { logger.info(
			 * "User is navigated to Account info screen on tapping apply button after entering prepaid code"
			 * ); extent.extentLoggerPass("Account info",
			 * "User is navigated to Account info screen on tapping apply button after entering prepaid code"
			 * ); } else {
			 * logger.error("User is unable to navigate to Account info screen");
			 * extent.extentLoggerFail("Account info",
			 * "User is unable to navigate to Account info screen"); }
			 * 
			 * click(AMDSubscibeScreen.objEmailID, "Email field");
			 * type(AMDSubscibeScreen.objEmailID, "zee5latest@gmail.com", "Email field");
			 * hideKeyboard(); click(AMDSubscibeScreen.objProceedBtn, "Proceed button");
			 * click(AMDSubscibeScreen.objPasswordTextField, "Password field");
			 * type(AMDSubscibeScreen.objPasswordTextField, "User@123", "Password field");
			 * hideKeyboard(); click(AMDSubscibeScreen.objProceedPWDScreen,
			 * "Proceed button"); waitTime(5000);
			 * verifyElementPresent(AMDSubscibeScreen.objInvalidPrepaidCodePopUp,
			 * "Invalid Prepaid code pop up");
			 * verifyElementPresentAndClick(AMDSubscibeScreen.objDoneBtn, "Done Button");
			 */
			verifyElementExist(AMDSubscibeScreen.objInvalidPromoCodeText, "Invalid promo code error message");
			BackToLandingScreen();
		}

		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("Subscribed user with All Access pack validations");
			click(AMDHomePage.objMoreMenu, "More menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");

			if (verifyIsElementDisplayed(AMDHomePage.objEditProfile)) {
				logger.info("User is logged in successfully");
				extent.extentLoggerPass("Edit", "User is logged in successfully");
			} else {
				logger.error("User is not logged in successfully");
				extent.extentLoggerFail("Edit", "User is not logged in successfully");
			}
			Back(1);
			click(AMDHomePage.objHomeBtn, "Home tab");
			waitTime(4000);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuBtn, "More Menu");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuOptions("My Subscription"), "My Subscription");
			verifyElementExist(AMDHomePage.objPackAmount, "Purchased pack details");
			verifyElementExist(AMDHomePage.objCancelRenewal, "Cancel Renewal option");
			verifyElementPresentAndClick(AMDHomePage.objBrowseAllPack, "Browse all packs button");
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
			Back(1);
			waitTime(2000);
			Back(1);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuOptions("Buy Plan"), "Buy Plan");
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe header in subscription page");
			verifyElementExist(AMDSubscibeScreen.objSubscribePageBackButton, "Back button in subscribe page");
			verifyElementExist(AMDSubscibeScreen.objPlanName, "Available plan in subscribe page");
			verifyElementExist(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button in subscribe page");
			if (getDriver().findElement(AMDSubscibeScreen.objContinueOnSubscribePopup).isEnabled()) {
				logger.info("Continue button is highlighted");
				extent.extentLoggerPass("Highlighted", "Continue button is highlighted");
			}
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
			if (checkElementExist(AMDHomePage.objHomeBtn, "Home tab")) {
				logger.info(
						"Subscribed user with all access pack is navigated to home page after tapping on buy subscription continue button");
				extent.extentLoggerPass("Home",
						"Subscribed user with all access pack is navigated to home page after tapping on buy subscription continue button");
			} else {
				logger.error(
						"Subscribed user with all access pack is not navigated to home page after tapping on buy subscription continue button");
				extent.extentLoggerFail("Home",
						"Subscribed user with all access pack is not navigated to home page after tapping on buy subscription continue button");
				Back(1);
			}
		}
		if (userType.equals("Guest")) {
			navigateBackToHomeLandingScreen();
		} else {
			navigateBackToHomeLandingScreen();
		}
	}
/**
 * @ModifiedBy Madhav
 * @param userType
 * @param RegisteredEmail
 * @throws Exception
 */
	public void introScreenAndLoginScreenValidation(String userType, String RegisteredEmail) throws Exception {
		extent.HeaderChildNode("Login/Register screen verification");
		System.out.println("\nLogin/Register screen verification");

		if (userType.equalsIgnoreCase("Guest")) {
			waitTime(3000);
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			if (findElement(AMDOnboardingScreen.objScreenTitle).getText().equals("Login/Register")) {
				extent.extentLoggerPass("Verify Navigation on clicking Login button",
						"User is navigated to" + findElement(AMDOnboardingScreen.objScreenTitle).getText() + " screen");
				logger.info("User is navigated to " + findElement(AMDOnboardingScreen.objScreenTitle).getText()
						+ " screen");
			} else {
				extent.extentLoggerFail("Verify Navigation on clicking Login button",
						"Failed to navigate into Login/Register screen post tapping Login button");
				logger.error("Failed to navigate into Login/Register screen post tapping Login button");
			}
			click(AMDOnboardingScreen.objBackBtn, "Back button");
			waitTime(2000);
			Back(1);
			verifyElementExist(AMDHomePage.objHomeBtn, "Landing screen");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
			verifyElementPresentAndClick(AMDMoreMenu.objGuestUserAccount, "Login/Register button");
			waitTime(3000);
			if (findElement(AMDOnboardingScreen.objScreenTitle).getText().equals("Login/Register")) {
				extent.extentLoggerPass("Login Page",
						"User is navigated to" + findElement(AMDOnboardingScreen.objScreenTitle).getText() + " screen");
				logger.info("User is navigated to " + findElement(AMDOnboardingScreen.objScreenTitle).getText()
						+ " screen");
			} else {
				extent.extentLoggerFail("Login Page", "Failed to navigate into Login/Register screen");
				logger.error("Failed to navigate into Login/Register screen");
			}

			type(AMDLoginScreen.objEmailIdField, RegisteredEmail, "Email Id or Mobile Number field");
			hideKeyboard();
			click(AMDLoginScreen.objProceedBtn, "Proceed button");
			if (findElement(AMDOnboardingScreen.objScreenTitle).getText().equals("Login")) {
				extent.extentLoggerPass("Login Page",
						"User is navigated to" + findElement(AMDOnboardingScreen.objScreenTitle).getText() + " screen");
				logger.info("User is navigated to " + findElement(AMDOnboardingScreen.objScreenTitle).getText()
						+ " screen");
			} else {
				extent.extentLoggerFail("Login Page", "Failed to navigate into Login/Register screen");
				logger.error("Failed to navigate into Login/Register screen");
			}

			verifyElementExist(AMDLoginScreen.objPasswordField, "Password field");
			waitTime(4000);
			Back(1);
			click(AMDLoginScreen.objBackBtn, "Back button");
			waitTime(4000);
			clearField(AMDLoginScreen.objEmailIdField, "Email Id");
			waitTime(3000);
			verifyElementPresentAndClick(AMDLoginScreen.objfbBtn, "Facebook icon");
			waitTime(5000);
			if (checkElementExist(AMDHomePage.objHome, "Home Tab")) {
				logger.info("User logged in successfully");
				extent.extentLoggerPass("Login", "User logged in successfully");
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
				waitTime(4000);
				Swipe("UP", 1);

				verifyElementPresentAndClick(AMDMoreMenu.objLogout, "Logout");
				verifyElementPresentAndClick(AMDMoreMenu.objLogoutBtn, "Logout Button");
				waitTime(5000);
				Swipe("Down", 2);
				verifyElementPresentAndClick(AMDMoreMenu.objProfile, "Login/Register");
				BackToLandingScreen();
			} else {
				logger.info("Pre conditions not met, Social Account is not logged In");
				extentLoggerWarning("Facebook", "Pre conditions not met, Social Account is not logged In");

				if (checkElementExist(AMDLoginScreen.objFBEmail, "Email Id field")) {
					logger.info("Facebook login screen is displayed");
					extentLoggerPass("Facebook login page", "Facebook login screen is displayed");
				} else {
					logger.info("Facebook login screen is not displayed");
					extentLogger("Facebook login page", "Facebook login screen is not displayed");
				}
				BackToLandingScreen();
			}
		} else {
			logger.info("Not applicable for " + userType);
			extentLoggerPass("Login", "Not applicable for " + userType);
		}
	}
/**
 * Method to navigate to different screen from home screen
 * @param tabName
 * @throws Exception
 */
	public void screenNavigation(String tabName) throws Exception {
		extent.HeaderChildNode("Navigating to different screen from Home screen");
		System.out.println("\nNavigating to different screen from Home screen");

		waitTime(8000);
		waitForElementDisplayed(AMDHomePage.objHomeBtn, 5000);
		// Selecting HOME tab from Top Navigation
		verifyElementPresent(AMDHomePage.objHomeBtn, "Home Screen");
		// Navigating to different tab from Top Navigation
		selectTopNavigationTab_Timer(tabName);
	}
/**
 * method to validate the Screen navigation performance
 * @param pTabname
 * @throws Exception
 */
	public void selectTopNavigationTab_Timer(String pTabname) throws Exception {
		extent.HeaderChildNode("Screen Navigation Performance");
		System.out.println("\n>>> Selecting " + pTabname + " from Top navigation tabs");

//		String appPackageName = getParameterFromXML("appPackageName");
		String appPackageName = "com.graymatrix.did";

		// Threshold Values declaration
		int threshold_TimeTaken = 16;
		int threshold_NativeMemory = 40;
		int threshold_TotalMemory = 250;
		int threshold_CPU = 75;
		int threshold_GPUMem = 18;
		int threshold_GPURendered = 2300;
		int threshold_Network = 50;
		Duration timeElapsed = null;

		// Initiated Variable declaration
		int nativeMemory = 0, totalMemory = 0, nCpuUSage = 0, nGPURendered = 0;
		float nGPUMemory = 0;
		int nNetTraffic = 0;
		String batteryInfo = null;
		boolean timeFlag = true, memFlag = true, totalmemFlag = true, cpuFlag = true, gpuMemFlag = true,
				gpuRenFlag = true, trafficFlag = true;

		verifyElementPresentAndClick(AMDHomePage.objHome, "Home button");
		verifyElementPresent(AMDHomePage.objFirstRailDisplay, "First Rail");

		Instant startTime = Instant.now();
		logger.info("Start time: " + startTime);

		boolean flag = false;
		int noOfTabs = getCount(AMDHomePage.objTitle);
		System.out.println("\nTop Navigation Tabs: " + noOfTabs);
		for (int k = 1; k <= noOfTabs; k++) {
			if (verifyIsElementDisplayed(AMDGenericObjects.objPageTitle(pTabname))) {
				click(AMDGenericObjects.objPageTitle(pTabname), pTabname);
				verifyElementPresent(AMDHomePage.objFirstRailDisplay, "First Rail");

				Instant endTime = Instant.now();
				logger.info("End time: " + endTime);
				// AppPerformanceTestInfo(appPackageName);

				// #### App Performance Memory Usage Info
				ArrayList<String> getMmoryInfo = Memory_UsagePerformanceV2();
				nativeMemory = Integer.parseInt(getMmoryInfo.get(0).trim());
				totalMemory = Integer.parseInt(getMmoryInfo.get(1).trim());

				// #### App Performance CPU Usage Info
				String getCPUInfo = cpu_UsagePerformanceV2();
				nCpuUSage = Integer.parseInt(getCPUInfo);

				// #### App Performance GPU Usage Info
				ArrayList<String> getGPUInfo = GPU_UsagePerformanceV2();
				// nGPUMemory = Float.parseFloat(getGPUInfo.get(0).replace(" MB", "").trim());
				String[] parseString = getGPUInfo.get(0).split("MB");
				nGPUMemory = Float.parseFloat(parseString[0].trim());
				nGPURendered = Integer.parseInt(getGPUInfo.get(1).replace("Total frames rendered: ", "").trim());

				// #### App Performance Network Traffic Usage Info
				nNetTraffic = getApp_NetworkTrafficUsageV2(appPackageName);

				// #### App Performance Battery Info
				batteryInfo = BatteryStats_PerformanceV2();

				timeElapsed = Duration.between(startTime, endTime);
				logger.info("Time taken to navigate from Home to " + pTabname + " screen (sec): "
						+ timeElapsed.getSeconds());

				if (timeElapsed.getSeconds() < threshold_TimeTaken) {
					logger.info("Time taken to navigate from Home to " + pTabname + " screen (sec): "
							+ timeElapsed.getSeconds());
					extent.extentLoggerPass("Timer", "<b>Time taken to navigate from Home to " + pTabname
							+ " screen (sec): </b>: " + timeElapsed.getSeconds());
				} else {
					timeFlag = false;
					logger.info("Time taken to navigate from Home to " + pTabname + " screen (sec): "
							+ timeElapsed.getSeconds());
					extent.extentLoggerFail("Timer", "<b>Time taken to navigate from Home to " + pTabname
							+ " screen (sec): </b>: " + timeElapsed.getSeconds());
				}
				softAssertion.assertEquals(timeFlag, true);
				flag = true;
				break;
			} else {
				List<WebElement> element = getDriver().findElements(By.xpath("//*[@id='homeTabLayout']/*/child::*"));
				element.get(noOfTabs - 1).click();
				waitTime(1000);
			}
		}

		if (flag) {

			if (nativeMemory < threshold_NativeMemory) {
				logger.info("App Memory Info - Native Heap : " + nativeMemory + " MB");
				extent.extentLoggerPass("Memory Info",
						"<b>App Memory Info - Native Heap :</b> " + nativeMemory + " MB");
			} else {
				memFlag = false;
				logger.error("App Memory Info - Native Heap : " + nativeMemory + " MB");
				extent.extentLoggerFail("Memory Info",
						"<b>App Memory Info - Native Heap :</b> " + nativeMemory + " MB");
			}
			softAssertion.assertEquals(memFlag, true);

			if (totalMemory < threshold_TotalMemory) {
				logger.info("App Memory Info - Total : " + totalMemory + " MB");
				extent.extentLoggerPass("Memory Info", "<b>App Memory Info - Total :</b> " + totalMemory + " MB");
			} else {
				totalmemFlag = false;
				logger.error("App Memory Info - Total : " + totalMemory + " MB");
				extent.extentLoggerFail("Memory Info", "<b>App Memory Info - Total :</b> " + totalMemory + " MB");
			}
			softAssertion.assertEquals(totalmemFlag, true);

			if (nCpuUSage < threshold_CPU) {
				logger.info("App CPU  Usage status : " + nCpuUSage + "%");
				extent.extentLoggerPass("CPU Info", "<b>App CPU Usage status : </b> " + nCpuUSage + "%");
			} else {
				cpuFlag = false;
				logger.error("App Memory Info - Total : " + nCpuUSage + "%");
				extent.extentLoggerFail("CPU Info", "<b>App CPU Usage status : </b> " + nCpuUSage + "%");
			}
			softAssertion.assertEquals(cpuFlag, true);

			if (nGPUMemory < threshold_GPUMem) {
				logger.info("\nTotal GPU Memory Usage of Current session : " + nGPUMemory + " MB");
				extent.extentLoggerPass("GPU Info",
						"<b>Total GPU Memory Usage of Current session :</b> " + nGPUMemory + " MB");
			} else {
				gpuMemFlag = false;
				logger.error("\nTotal GPU Memory Usage of Current session exceeded : " + nGPUMemory + " MB");
				extent.extentLoggerFail("GPU Info",
						"<b>Total GPU Memory Usage of Current session exceeded:</b> " + nGPUMemory + " MB");
			}
			softAssertion.assertEquals(gpuMemFlag, true);

			if (nGPURendered < threshold_GPURendered) {
				logger.info("\nGPU Current session - Total frames rendered: " + nGPURendered);
				extent.extentLoggerPass("GPU Info",
						"<b>GPU Current session - Total frames rendered: </b> " + nGPURendered);
			} else {
				gpuRenFlag = false;
				logger.error("\nGPU Current session - Total frames rendered: " + nGPURendered);
				extent.extentLoggerFail("GPU Info",
						"<b>GPU Current session - Total frames rendered: </b> " + nGPURendered);
			}
			softAssertion.assertEquals(gpuRenFlag, true);

			if (nNetTraffic < threshold_Network) {
				logger.info("\nThe current App traffic usage is : " + (int) nNetTraffic + " Mb");
				extent.extentLoggerPass("Traffic Usage",
						"<b>The Current App traffic usage is : </b> " + (int) nNetTraffic + " Mb");
			} else {
				trafficFlag = false;
				logger.error("\nThe current App traffic usage is : " + (int) nNetTraffic + " Mb");
				extent.extentLoggerFail("Traffic Usage",
						"<b>The Current App traffic usage is : </b> " + (int) nNetTraffic + " Mb");
			}

			performaceDetails.add("Navigation to " + pTabname + "," + timeElapsed.getSeconds() + "," + nativeMemory
					+ " MB" + "," + totalMemory + " MB" + "," + nCpuUSage + "%" + "," + nGPUMemory + " MB" + ","
					+ nGPURendered + "," + nNetTraffic + " MB");

			String timeTaken = Long.toString(timeElapsed.getSeconds());
			String strNativeMemory = Integer.toString(nativeMemory);
			String strTotalMemory = Integer.toString(totalMemory);
			String strCPU = Integer.toString(nCpuUSage);
			String strGPU = Float.toString(nGPUMemory);
			String strGPURendered = Integer.toString(nGPURendered);
			String strTraffic = Integer.toString(nNetTraffic);

			performaceMatrics.put("Time Taken", timeTaken + " Sec");
			performaceMatrics.put("Memory Native Heap", strNativeMemory + " MB");
			performaceMatrics.put("Total Memory", strTotalMemory + " MB");
			performaceMatrics.put("CPU", strCPU + "%");
			performaceMatrics.put("GPU", strGPU + " MB");
			performaceMatrics.put("Total Frames Rendered", strGPURendered);
			performaceMatrics.put("Current Traffic Usage", strTraffic + " MB");

			System.out.println(
					"\n---------------------------------------------- Screen Navigation ----------------------------------------------");
			System.out.println(performaceMatrics);
			System.out.println(
					"-------------------------------------------------------------------------------------------------------------------");

			softAssertion.assertEquals(trafficFlag, true);
			softAssertion.assertAll();

			if (batteryInfo.contains("drain")) {
				logger.info("\nApp Battery Info - " + batteryInfo);
				extent.extentLoggerPass("Timer", "<b>App Battery Info - </b>" + batteryInfo);
			} else {
				logger.error("\nApp Battery Info - " + batteryInfo);
				extent.extentLoggerFail("Timer", "<b>App Battery Info - </b>" + batteryInfo);
			}
		}
	}
/**
 * validation of deeplinks
 * @param pDeeplink
 */
	public void deepLink_Validation(String pDeeplink) {
		extent.HeaderChildNode("DeepLink to Playback " + pDeeplink + " screen");
		System.out.println("\n>>> DeepLink to Playback " + pDeeplink + " screen");

//		String appPackageName = getParameterFromXML("appPackageName");
		String appPackageName = "com.graymatrix.did";

		// Threshold Values declaration
		int threshold_TimeTaken = 9;
		int threshold_NativeMemory = 29;
		int threshold_TotalMemory = 230;
		int threshold_CPU = 100;
		int threshold_GPUMem = 13;
		int threshold_GPURendered = 2500;
		int threshold_Network = 144;
		Duration timeElapsed = null;

		// Initiated Variable declaration
		boolean flag = false;
		boolean timeFlag = true, memFlag = true, totalmemFlag = true, cpuFlag = true, gpuMemFlag = true,
				gpuRenFlag = true, trafficFlag = true;
		int nativeMemory = 0, totalMemory = 0, nCpuUSage = 0, nGPURendered = 0;
		float nGPUMemory = 0;
		int nNetTraffic = 0;
		String batteryInfo = null;

		try {
			getDriver().close();
			waitTime(5000);
			String command = null;
			Instant startTime = Instant.now();
			logger.info("Start time: " + startTime);
			extent.extentLogger("Start Time", "Start time: " + startTime);
			if (pDeeplink.equalsIgnoreCase("Consumption")) {
				command = "adb shell am start -W -a android.intent.action.VIEW -d  \"https://www.zee5.com/movies/details/rog/0-0-46027\"";
			} else if (pDeeplink.equalsIgnoreCase("LiveTV")) {
				command = "adb shell am start -W -a android.intent.action.VIEW -d  \"https://www.zee5.com/channels/details/republic-tv/0-9-channel_1422341819\"";
			} else if (pDeeplink.equalsIgnoreCase("SubscriptionScreen")) {
				command = "adb shell am start -W -a android.intent.action.VIEW -d  \"https://www.zee5.com/myaccount/subscription\"";

			}

			Process process = Runtime.getRuntime().exec(command);
			new BufferedReader(new InputStreamReader(process.getInputStream()));

			if (pDeeplink.equalsIgnoreCase("Consumption")) {
				waitForElementDisplayed(AMDHomePage.objPopUpToOpenZeeApp, 30);
				if (verifyIsElementDisplayed(AMDHomePage.objPopUpToOpenZeeApp)) {
					click(AMDHomePage.objJustOnceOption, "Just once option");
				}
				if (verifyElementExist(AMDHomePage.objPlayerScreen, "Player Screen")) {

					verifyElementPresent(AMDHomePage.objFirstRailDisplay, "FirstRail");

					Instant endTime = Instant.now();
					logger.info("End time: " + endTime);

					logger.info("Consumption Screen is displayed for the deeplink");
					extent.extentLoggerPass("Consumption", "Consumption Screen is displayed for the deeplink");
					Back(1);

					// #### App Performance Usage Info
					// AppPerformanceTestInfo(appPackageName);

					// #### App Performance MEMORY Usage Info
					ArrayList<String> getMmoryInfo = Memory_UsagePerformanceV2();
					nativeMemory = Integer.parseInt(getMmoryInfo.get(0).trim());
					totalMemory = Integer.parseInt(getMmoryInfo.get(1).trim());

					// #### App Performance CPU Usage Info
					String getCPUInfo = cpu_UsagePerformanceV2();
					nCpuUSage = Integer.parseInt(getCPUInfo);

					// #### App Performance GPU Usage Info
					ArrayList<String> getGPUInfo = GPU_UsagePerformanceV2();
					nGPUMemory = Float.parseFloat(getGPUInfo.get(0).replace(" MB", "").trim());
					nGPURendered = Integer.parseInt(getGPUInfo.get(1).replace("Total frames rendered: ", "").trim());

					// #### App Performance Network Traffic Usage Info
					nNetTraffic = getApp_NetworkTrafficUsageV2(appPackageName);

					// #### App Performance Battery Info
					batteryInfo = BatteryStats_PerformanceV2();

					timeElapsed = Duration.between(startTime, endTime);
					logger.info("Time taken to play through deeplink (sec): " + timeElapsed.getSeconds());
					extent.extentLogger("Timer",
							"<b>Time taken to play through deeplink (sec):</b> " + timeElapsed.getSeconds());

					if (timeElapsed.getSeconds() < threshold_TimeTaken) {
						logger.info(
								"Time taken to consumption screen through deeplink (Sec): " + timeElapsed.getSeconds());
						extent.extentLoggerPass("Timer",
								"<b>Time taken to consumption screen through deeplink (Sec)</b>: "
										+ timeElapsed.getSeconds());
					} else {
						timeFlag = false;
						logger.info(
								"Time taken to consumption screen through deeplink (Sec): " + timeElapsed.getSeconds());
						extent.extentLoggerFail("Timer",
								"<b>Time taken to consumption screen through deeplink (Sec)</b>: "
										+ timeElapsed.getSeconds());
					}
					softAssertion.assertEquals(timeFlag, true);
					flag = true;
				} else {
					logger.info("Consumption Screen is not displayed for the deeplink");
					extent.extentLoggerFail("Consumption screen",
							"Consumption Screen is not displayed for the deeplink");
				}

			} else if (pDeeplink.equalsIgnoreCase("LiveTV")) {
				waitForElementDisplayed(AMDHomePage.objPopUpToOpenZeeApp, 30);
				if (verifyIsElementDisplayed(AMDHomePage.objPopUpToOpenZeeApp)) {
					click(AMDHomePage.objJustOnceOption, "Just once option");
				}
				if (verifyElementExist(AMDHomePage.objPlayerScreen, "Player Screen")) {

					verifyElementPresent(AMDHomePage.objFirstRailDisplay, "FirstRail");

					Instant endTime = Instant.now();
					logger.info("End time: " + endTime);

					logger.info("Live TV is played for the deeplink");
					extent.extentLoggerPass("Live TV", "Live TV is played for the deeplink");
					Back(1);

					// #### App Performance Usage Info
					// AppPerformanceTestInfo(appPackageName);

					// #### App Performance MEMORY Usage Info
					ArrayList<String> getMmoryInfo = Memory_UsagePerformanceV2();
					nativeMemory = Integer.parseInt(getMmoryInfo.get(0).trim());
					totalMemory = Integer.parseInt(getMmoryInfo.get(1).trim());

					// #### App Performance CPU Usage Info
					String getCPUInfo = cpu_UsagePerformanceV2();
					nCpuUSage = Integer.parseInt(getCPUInfo);

					// #### App Performance GPU Usage Info
					ArrayList<String> getGPUInfo = GPU_UsagePerformanceV2();
					nGPUMemory = Float.parseFloat(getGPUInfo.get(0).replace(" MB", "").trim());
					nGPURendered = Integer.parseInt(getGPUInfo.get(1).replace("Total frames rendered: ", "").trim());

					// #### App Performance Network Traffic Usage Info
					nNetTraffic = getApp_NetworkTrafficUsageV2(appPackageName);

					timeElapsed = Duration.between(startTime, endTime);
					logger.info("Time taken to play through deeplink (sec): " + timeElapsed.getSeconds());

					if (timeElapsed.getSeconds() < threshold_TimeTaken) {
						logger.info(
								"Time taken to consumption screen through deeplink (Sec): " + timeElapsed.getSeconds());
						extent.extentLoggerPass("Timer",
								"<b>Time taken to consumption screen through deeplink (Sec)</b>: "
										+ timeElapsed.getSeconds());
					} else {
						timeFlag = false;
						logger.info(
								"Time taken to consumption screen through deeplink (Sec): " + timeElapsed.getSeconds());
						extent.extentLoggerFail("Timer",
								"<b>Time taken to consumption screen through deeplink (Sec)</b>: "
										+ timeElapsed.getSeconds());
					}
					softAssertion.assertEquals(timeFlag, true);
					flag = true;
				} else {
					logger.info("Live TV is not played for the deeplink");
					extent.extentLoggerFail("Live TV", "Live TV is not played for the deeplink");
				}
			} else if (pDeeplink.equalsIgnoreCase("SubscriptionScreen")) {

				threshold_TimeTaken = 8;
				threshold_NativeMemory = 35;
				threshold_TotalMemory = 300;
				threshold_CPU = 125;
				threshold_GPUMem = 10;
				threshold_GPURendered = 2500;
				threshold_Network = 325;
				waitForElementDisplayed(AMDSubscibeScreen.objSubsciptionScreen, 30);
				if (verifyElementExist(AMDSubscibeScreen.objSubsciptionScreen, "Player Screen")) {

					verifyElementPresent(AMDSubscibeScreen.objNewSubscribePopup, "Subs popup");

					Instant endTime = Instant.now();
					logger.info("End time: " + endTime);

					logger.info("Subscription screen via deeplink");
					extent.extentLoggerPass("Subscription screen", "Subscription screen via deeplink");
					Back(1);

					// #### App Performance Usage Info
					// AppPerformanceTestInfo(appPackageName);

					// #### App Performance MEMORY Usage Info
					ArrayList<String> getMmoryInfo = Memory_UsagePerformanceV2();
					nativeMemory = Integer.parseInt(getMmoryInfo.get(0).trim());
					totalMemory = Integer.parseInt(getMmoryInfo.get(1).trim());

					// #### App Performance CPU Usage Info
					String getCPUInfo = cpu_UsagePerformanceV2();
					nCpuUSage = Integer.parseInt(getCPUInfo);

					// #### App Performance GPU Usage Info
					ArrayList<String> getGPUInfo = GPU_UsagePerformanceV2();
					nGPUMemory = Float.parseFloat(getGPUInfo.get(0).replace(" MB", "").trim());
					nGPURendered = Integer.parseInt(getGPUInfo.get(1).replace("Total frames rendered: ", "").trim());

					// #### App Performance Network Traffic Usage Info
					nNetTraffic = getApp_NetworkTrafficUsageV2(appPackageName);

					timeElapsed = Duration.between(startTime, endTime);
					logger.info("Time taken to subscription screen via deeplink (sec): " + timeElapsed.getSeconds());

					if (timeElapsed.getSeconds() < threshold_TimeTaken) {
						logger.info(
								"Time taken to subscription screen via deeplink (Sec): " + timeElapsed.getSeconds());
						extent.extentLoggerPass("Timer",
								"<b>Time taken to subscription screen via  deeplink (Sec)</b>: "
										+ timeElapsed.getSeconds());
					} else {
						timeFlag = false;
						logger.info(
								"Time taken to subscription screen via  deeplink (Sec): " + timeElapsed.getSeconds());
						extent.extentLoggerFail("Timer",
								"<b>Time taken to subscription screen via  deeplink (Sec)</b>: "
										+ timeElapsed.getSeconds());
					}
					softAssertion.assertEquals(timeFlag, true);
					flag = true;
				} else {
					logger.info("Subscription screen is not displayed via deeplink");
					extent.extentLoggerFail("Subscription screen", "Subscription screen is not displayed via deeplink");
				}
			}
			waitTime(3000);
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (flag) {

			if (nativeMemory < threshold_NativeMemory) {
				logger.info("App Memory Info - Native Heap : " + nativeMemory + " MB");
				extent.extentLoggerPass("Memory Info",
						"<b>App Memory Info - Native Heap :</b> " + nativeMemory + " MB");
			} else {
				memFlag = false;
				logger.error("App Memory Info - Native Heap : " + nativeMemory + " MB");
				extent.extentLoggerFail("Memory Info",
						"<b>App Memory Info - Native Heap :</b> " + nativeMemory + " MB");
			}
			softAssertion.assertEquals(memFlag, true);

			if (totalMemory < threshold_TotalMemory) {
				logger.info("App Memory Info - Total : " + totalMemory + " MB");
				extent.extentLoggerPass("Memory Info", "<b>App Memory Info - Total :</b> " + totalMemory + " MB");
			} else {
				totalmemFlag = false;
				logger.error("App Memory Info - Total : " + totalMemory + " MB");
				extent.extentLoggerFail("Memory Info", "<b>App Memory Info - Total :</b> " + totalMemory + " MB");
			}
			softAssertion.assertEquals(totalmemFlag, true);

			if (nCpuUSage < threshold_CPU) {
				logger.info("App CPU  Usage status : " + nCpuUSage + "%");
				extent.extentLoggerPass("CPU Info", "<b>App CPU Usage status : </b> " + nCpuUSage + "%");
			} else {
				cpuFlag = false;
				logger.error("App Memory Info - Total : " + nCpuUSage + "%");
				extent.extentLoggerFail("CPU Info", "<b>App CPU Usage status : </b> " + nCpuUSage + "%");
			}
			softAssertion.assertEquals(cpuFlag, true);

			if (nGPUMemory < threshold_GPUMem) {
				logger.info("\nTotal GPU Memory Usage of Current session : " + nGPUMemory + " MB");
				extent.extentLoggerPass("GPU Info",
						"<b>Total GPU Memory Usage of Current session :</b> " + nGPUMemory + " MB");
			} else {
				gpuMemFlag = false;
				logger.error("\nTotal GPU Memory Usage of Current session exceeded : " + nGPUMemory + " MB");
				extent.extentLoggerFail("GPU Info",
						"<b>Total GPU Memory Usage of Current session exceeded:</b> " + nGPUMemory + " MB");
			}
			softAssertion.assertEquals(gpuMemFlag, true);

			if (nGPURendered < threshold_GPURendered) {
				logger.info("\nGPU Current session - Total frames rendered: " + nGPURendered);
				extent.extentLoggerPass("GPU Info",
						"<b>GPU Current session - Total frames rendered: </b> " + nGPURendered);
			} else {
				gpuRenFlag = false;
				logger.error("\nGPU Current session - Total frames rendered: " + nGPURendered);
				extent.extentLoggerFail("GPU Info",
						"<b>GPU Current session - Total frames rendered: </b> " + nGPURendered);
			}
			softAssertion.assertEquals(gpuRenFlag, true);

			if (nNetTraffic < threshold_Network) {
				logger.info("\nThe current App traffic usage is : " + (int) nNetTraffic + " Mb");
				extent.extentLoggerPass("Traffic Usage",
						"<b>The Current App traffic usage is : </b> " + (int) nNetTraffic + " Mb");
			} else {
				trafficFlag = false;
				logger.error("\nThe current App traffic usage is : " + (int) nNetTraffic + " Mb");
				extent.extentLoggerFail("Traffic Usage",
						"<b>The Current App traffic usage is : </b> " + (int) nNetTraffic + " Mb");
			}
			performaceDetails.add("DeepLink to " + pDeeplink + " screen" + "," + timeElapsed.getSeconds() + ","
					+ nativeMemory + " MB," + totalMemory + " MB," + nCpuUSage + "%," + nGPUMemory + " MB,"
					+ nGPURendered + "," + nNetTraffic + " MB");

			String timeTaken = Long.toString(timeElapsed.getSeconds());
			String strNativeMemory = Integer.toString(nativeMemory);
			String strTotalMemory = Integer.toString(totalMemory);
			String strCPU = Integer.toString(nCpuUSage);
			String strGPU = Float.toString(nGPUMemory);
			String strGPURendered = Integer.toString(nGPURendered);
			String strTraffic = Integer.toString(nNetTraffic);

			performaceMatrics.put("Time Taken", timeTaken + " Sec");
			performaceMatrics.put("Memory Native Heap", strNativeMemory + " MB");
			performaceMatrics.put("Total Memory", strTotalMemory + " MB");
			performaceMatrics.put("CPU", strCPU + "%");
			performaceMatrics.put("GPU", strGPU + " MB");
			performaceMatrics.put("Total Frames Rendered", strGPURendered);
			performaceMatrics.put("Current Traffic Usage", strTraffic + " MB");

			System.out.println(
					"\n---------------------------------------------- Deeplink to consumption screen ----------------------------------------------");
			System.out.println(performaceMatrics);
			System.out.println(
					"-------------------------------------------------------------------------------------------------------------------");

			if (batteryInfo.contains("drain")) {
				logger.info("\nApp Battery Info - " + batteryInfo);
				extent.extentLoggerPass("Timer", "<b>App Battery Info - </b>" + batteryInfo);
			} else {
				logger.error("\nApp Battery Info - " + batteryInfo);
				extent.extentLoggerFail("Timer", "<b>App Battery Info - </b>" + batteryInfo);
			}

			softAssertion.assertEquals(trafficFlag, true);
			softAssertion.assertAll();
		}
	}
/**
 * Login Functionality
 * @param LoginMethod
 * @throws Exception
 */
	public void zeeApplicasterLogin_Timer(String LoginMethod) throws Exception {
		extent.HeaderChildNode("Login Functionality");

		String UserType = getParameterFromXML("userType");
		if (UserType.equals("Guest")) {
			extent.extentLogger("userType", "UserType : Guest");
		}

		switch (LoginMethod) {
		case "Guest":
			extent.HeaderChildNode("Guest User");
			extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");
			waitTime(1000);
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Skip link");
			waitTime(3000);
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as NonSubscribed User");

			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");

			verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for Free");

			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			// waitTime(3000);
			Date date = new Date();
			long StartTime = date.getTime();
			logger.info("App Start time : " + StartTime);

			Instant startT = Instant.now();
			waitForElementDisplayed(AMDHomePage.objHome, 20);
			Instant endT = Instant.now();

			date = new Date();
			long EndTime = date.getTime();
			logger.info("App End time : " + EndTime);

			Duration timeElapsed = Duration.between(startT, endT);
			logger.info("Time taken to login with registered user (millisec): " + timeElapsed.toMillis());
			extent.extentLogger("Timer",
					"Time taken to login with registered user (millisec): " + timeElapsed.toMillis());
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User");

			String SubscribedUsername = getParameterFromXML("SubscribedUserName");
			String SubscribedPassword = getParameterFromXML("SubscribedPassword");

			verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse for Free");

			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SubscribedUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
//		waitTime(3000);
			Date date1 = new Date();
			long StartTime1 = date1.getTime();
			logger.info("App Start time : " + StartTime1);

			Instant startT1 = Instant.now();
			waitForElementDisplayed(AMDHomePage.objHome, 20);
			Instant endT1 = Instant.now();

			date = new Date();
			long EndTime1 = date.getTime();
			logger.info("App End time : " + EndTime1);

			Duration timeElapsed1 = Duration.between(startT1, endT1);
			logger.info("Time taken to login with registered user (millisec): " + timeElapsed1.toMillis());
			extent.extentLogger("Timer",
					"Time taken to login with registered user (millisec): " + timeElapsed1.toMillis());
			break;

		}
	}
/**
 * Validation of Search result screen
 * @param pContent
 * @throws Exception
 */
	public void searchforContent(String pContent) throws Exception {
		extent.HeaderChildNode("Search Result Screen Validation");

		verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");

		type(AMDSearchScreen.objSearchBoxBar, pContent + "\n", "Search bar");
		Instant startTime = Instant.now();
		logger.info("Start time: " + startTime);

		waitForElementDisplayed(AMDSearchScreen.objAllTab, 20);
		verifyElementExist(AMDSearchScreen.objSearchResultFirstContent, "Search Result Screen");
		hideKeyboard();
		verifyElementPresentAndClick(AMDSearchScreen.objSearchResultFirstContent, "Select First Result");

		waitForElementDisplayed(AMDHomePage.objPlayerScreen, 30);
		if (verifyElementExist(AMDPlayerScreen.objShareIcon, "Player Screen")
				| verifyIsElementDisplayed(AMDPlayerScreen.objAd)) {
			Instant endTime = Instant.now();
			logger.info("End time: " + endTime);

			logger.info("Playback Screen is started for VOD Content");
			extent.extentLoggerPass("Playback", "Playback Screen is started for VOD Content");

			Duration timeElapsed = Duration.between(startTime, endTime);
			logger.info("Time taken to playback VOD (millisec): " + timeElapsed.toMillis());
			extent.extentLogger("Timer", "Time taken to playback VOD (millisec): " + timeElapsed.toMillis());
		} else {
			logger.info("Playback failed to start on selecting the VOD content");
			extent.extentLoggerFail("Playback Screen", "Playback failed to start on selecting the VOD content");
		}
	}
/**
 * Method is to navigate to Home Landing screen
 * @throws Exception
 */
	public void navigateToHomeLandingScreen() throws Exception {
		accessDeviceLocationPopUp("Allow", userType);
		navigateToIntroScreen_DisplaylangScreen();
		zeeApplicasterLoginForSettings(userType);
	}

	/**
	 * This method is used to navigate to Home landing screen
	 * @ModifiedBy Madhav
	 * @throws Exception
	 */
	public void navigateBackToHomeLandingScreen() throws Exception {
		boolean flag;
		for (int i = 1; i < 10; i++) {
			flag = verifyElementDisplayed(AMDHomePage.objBottomBarSelectedHomeTab);
			System.out.println(flag);
			if (flag) {
				click(AMDHomePage.objBottomBarSelectedHomeTab, "Home tab in bottom navigation bar");
				break;
			} else {
				Back(1);
				waitTime(2000);
				if (verifyElementDisplayed(AMDOnboardingScreen.objExitNo)) {
					click(AMDOnboardingScreen.objExitNo, "Dismiss");
				}
			}
		}
	}
/**
 * @Note Method to Select the dispplay language
 * @param Language
 * @throws Exception
 */
	public void SelectDisplayLanguage(String Language) throws Exception {

		if (Language.equalsIgnoreCase("Hindi")) {
			click(AMDOnboardingScreen.objSelectDisplayLanguage(1), Language);
		} else if (Language.equalsIgnoreCase("English")) {
			click(AMDOnboardingScreen.objSelectDisplayLanguage(2), Language);
		} else if (Language.equalsIgnoreCase("Marathi")) {
			click(AMDOnboardingScreen.objSelectDisplayLanguage(3), Language);
		} else if (Language.equalsIgnoreCase("Telugu")) {
			click(AMDOnboardingScreen.objSelectDisplayLanguage(4), Language);
		} else if (Language.equalsIgnoreCase("Kannada")) {
			click(AMDOnboardingScreen.objSelectDisplayLanguage(5), Language);
		} else if (Language.equalsIgnoreCase("Tamil")) {
			click(AMDOnboardingScreen.objSelectDisplayLanguage(6), Language);
		} else if (Language.equalsIgnoreCase("Malayalam")) {
			click(AMDOnboardingScreen.objSelectDisplayLanguage(3), Language);
		} else if (Language.equalsIgnoreCase("Bengali")) {
			click(AMDOnboardingScreen.objSelectDisplayLanguage(4), Language);
		} else if (Language.equalsIgnoreCase("Gujarati")) {
			click(AMDOnboardingScreen.objSelectDisplayLanguage(5), Language);
		} else if (Language.equalsIgnoreCase("Punjabi")) {
			click(AMDOnboardingScreen.objSelectDisplayLanguage(6), Language);
		} else if (Language.equalsIgnoreCase("Bhojpuri")) {
			click(AMDOnboardingScreen.objSelectDisplayLanguage(7), Language);
		}
	}
/**
 * @Note this method is used to Validation of Settings - Default Video Streaming quality
 * @param userType
 * @param searchKeyword1
 * @throws Exception
 */
	public void settings_DefaultVideoStreamingQuality(String userType, String searchKeyword1) throws Exception {
		extent.HeaderChildNode("Validation of Settings - Default Video Streaming quality as " + userType);
		System.out.println("\nValidation of Settings for Default Video Streaming quality as " + userType);

		click(AMDHomePage.objMoreMenu, "More menu");
		waitTime(2000);
		click(AMDMoreMenu.objSettings, "Setting button");
		verifyElementExist(AMDSettingsScreen.objVideoQualityDefaultvalue, "Video Quality option in Settings");
		boolean defaultvalue = verifyIsElementDisplayed(AMDSettingsScreen.objVideoQualityDefaultvalue);
		String value = findElement(AMDSettingsScreen.objVideoQualityDefaultvalue).getText();
		System.out.println(value);
		if (defaultvalue) {
			logger.info("Default video quality in Select video quality settings is displayed : " + value);
			extent.extentLoggerPass("Settings",
					"Default video quality in Select video quality settings is displayed : " + value);
		} else {
			logger.error("Default video quality is NOT displayed");
			extent.extentLogger("Settings", "Default video quality is NOT displayed");
		}
		Back(2);
		getRuntimeValue = value;
	}
/**
 * Method to go back to the Home landing screen
 * @throws Exception
 */
	public void BackToLandingScreen() throws Exception {
		System.out.println("\n<<< Navigating back to landing screen <<<");
		for (int i = 1; i < 10; i++) {
			Back(1);
			waitTime(2000);
			if (verifyIsElementDisplayed(AMDOnboardingScreen.objExitNo)) {
				click(AMDOnboardingScreen.objExitNo, "Dismiss");
				break;
			}
		}
	}
/**
 * Verifying the deleted content from Downloads screen
 * @param userType
 * @throws Exception
 */
	public void deletedContentAndMultipleDownloadContent(String userType) throws Exception {
		extent.HeaderChildNode("Verify Deleted Content from Downloads screen");
		if (userType.contentEquals("NonSubscribedUser") || userType.contentEquals("SubscribedUser")) {

			System.out.println("\nVerify Deleted Content from Downloads screen");
			int totalEpisodesList = getDriver().findElements(AMDDownloadPage.objNoOfEpisodeList).size();
			logger.info("Content Cards: " + totalEpisodesList);
			// waitTime(3000);
			click(AMDDownloadPage.objDownloadingCircularBar, "Downloading circular bar");
			waitTime(3000);
			click(AMDDownloadPage.objCancelDownloadOption, "Cancel Download CTA");
			waitTime(10000);
			// Back(1);
			Boolean value = verifyElementDisplayed(AMDDownloadPage.objBrowseToDownloadBtn);
//			int totalEpisodesList2 = getDriver().findElements(AMDDownloadPage.objNoOfEpisodeList).size();
//			logger.info("Content Cards: " + totalEpisodesList2);
			if (value == true) {
				extent.extentLoggerPass("Cancel Download", "Downloading content is deleted");
				logger.info("Downloading content is deleted");
			} else {
				extent.extentLoggerFail("Cancel Download", "Downloading content is NOT deleted");
				logger.error("Downloading content is NOT deleted");
			}
			waitTime(2000);
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			// Back(1);
			String getProperty1 = getAttributValue("enabled", AMDHomePage.objDownloadBtn);
			if (getProperty1.equalsIgnoreCase("true")) {
				extent.extentLoggerPass("Downloads Tab",
						"Downloads active page without content downloading is displayed");
				logger.info("Downloads active page without content downloading is displayed");
			} else {
				extent.extentLoggerFail("Downloads tab",
						"No Downloads active page without content downloading is NOT displayed");
				logger.error("No Downloads active page without content downloading is NOT displayed");
			}

			extent.HeaderChildNode("Verify multiple downloading content in Downloads screen");
			System.out.println("\nVerify multiple downloading content in Downloads screen");
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			// **** Download Episode content3
			downloadContent(content3, pVideoQuality, true);
			if (checkElementExist(AMDDownloadPage.objDownloadingText)) {
				extent.extentLoggerPass("Downloading Content", "Downloading content is displayed in Downloads screen");
				logger.info("Downloading content is displayed in Donwloads screen");
			} else {
				extent.extentLoggerFail("Downloading Content",
						"Downloading content is not displayed in Downloads screen");
				logger.error("Downloading content is not displayed in Downloads screen");
			}
			Back(1);
			// **** Download Episode content4
			downloadContent(content4, "Better", true);
			if (checkElementExist(AMDDownloadPage.objDownloadingText)) {
				extent.extentLoggerPass("Donwloading Content", "Downloading content is displayed in Downloads screen");
				logger.info("Downloading content is displayed in Donwloads screen");
			} else {
				extent.extentLoggerFail("Donwloading Content",
						"Downloading content is not displayed in Downloads screen");
				logger.error("Downloading content is not displayed in Downloads screen");
			}
			if (checkElementExist(AMDDownloadPage.objShowsDownloadPage)) {
				extent.extentLoggerPass("ShowsList", "Shows list is displayed in the upfront tab");
				logger.info("Shows list is displayed in the upfront tab");
			} else {
				extent.extentLoggerFail("ShowsList", "Shows list is NOT displayed in the upfront tab");
				logger.error("Shows list is NOT displayed in the upfront tab");
			}
			waitTime(3000);
			click(AMDDownloadPage.objDownloadingText, "Downloading text");
			if (checkElementExist(AMDDownloadPage.objDownloadingCircularBar)) {
				extent.extentLoggerPass("Queued", "User is able to Download only one content at a time");
				logger.info("User is able to Download only one content at a time");
			} else {
				extent.extentLoggerFail("Queued", "User fails to Download only one content at a time");
				logger.error("User fails to Download only one content at a time");
			}
			if (checkElementExist(AMDDownloadPage.objDownloadingCircularBar, "Downloding icon")) {
				extent.extentLoggerPass("Queued", "Contents are Queued up in a line ");
				logger.info("Contents are Queued up in a line ");
			} else {
				extent.extentLoggerFail("Queued", "Contents are NOT Queued up in a line ");
				logger.error("Contents are NOT Queued up in a line ");
			}
		} else {
			logger.info("Validation of Download and multiple content is not applicable for " + userType);
			extent.extentLogger("Downloads",
					"Validation of Download and multiple content is not applicable for " + userType);
		}
	}
/**
 * validating the Downloads page section
 * @param userType
 * @throws Exception
 */
	public void downloadsSectionAndLatestEpisode(String userType) throws Exception {
		extent.HeaderChildNode("Validating Downloads Page section");
		if (userType.contentEquals("NonSubscribedUser") || userType.contentEquals("SubscribedUser")) {

			System.out.println("\nValidating Downloads Page section");

			downloadContent(content5, pVideoQuality, true);
			waitTime(1000);
			click(AMDDownloadPage.objDownloadingText, "Downloading text");
			if (checkElementExist(AMDDownloadPage.objDownloadingCircularBar)) {
				extent.extentLoggerPass("Downloading", "Incomplete Downloads are available");
				logger.info("Incomplete Downloads are available");
			}
			click(AMDDownloadPage.objDownloadingCircularBar, "Downloading Icon");
			if (checkElementExist(AMDDownloadPage.objCallOutwithPauseAll)) {
				extent.extentLoggerPass("Downloading", "Incomplete Downloads are NOT allowed to be Play");
				logger.info("Incomplete Downloads are NOT allowed to be Play");
			} else {
				extent.extentLoggerFail("Downloading", "Incomplete Downloads are allowed to be Play");
				logger.error("Incomplete Downloads are allowed to be Play");
			}
//		switchNetworkWifiToData();
			Back(3);
			// **** Download Episode content6
			downloadContent(content6, "Best", true);
			verifyElementExist(AMDDownloadPage.objTitleoftheShow, "Title of the show");
			System.out.println("Title of the Show is " + getText(AMDDownloadPage.objTitleoftheShow));
			logger.info("Title of the Show is " + getText(AMDDownloadPage.objTitleoftheShow));
			extent.extentLoggerPass("Title", "Title of the Show is " + getText(AMDDownloadPage.objTitleoftheShow));
			verifyElementExist(AMDDownloadPage.objNoOfEpisodes, "Number of Episodes");
			System.out.println("Number of Episodes are " + getText(AMDDownloadPage.objNoOfEpisodes));
			logger.info("Number of Episodes are " + getText(AMDDownloadPage.objNoOfEpisodes));
			extent.extentLoggerPass("Episodes", "Number of Episodes are " + getText(AMDDownloadPage.objNoOfEpisodes));
			verifyElementExist(AMDDownloadPage.objSizeOfEpiodes, "Size of Episodes");
			System.out.println("Size of Episodes is " + getText(AMDDownloadPage.objSizeOfEpiodes));
			logger.info("Size of Episodes is " + getText(AMDDownloadPage.objSizeOfEpiodes));
			extent.extentLoggerPass("Size", "Size of Episodes is " + getText(AMDDownloadPage.objSizeOfEpiodes));
			verifyElementExist(AMDDownloadPage.objRightArrowinDownloads, "Right Arrow");
			verifyElementExist(AMDDownloadPage.objThumbnailOfShows, "Thumbnail of the Show");
			waitTime(2000);
			click(AMDDownloadPage.objTitleoftheShow, "Title of the show");
			if (checkElementExist(AMDDownloadPage.objDownloadMoreCTA, "Download More CTA")) {
				extent.extentLoggerPass("Download More", "Show name is Tappable");
				logger.info("Show name is Tappable");
			} else {
				extent.extentLoggerFail("Download More", "Show name NOT is Tappable");
				logger.error("Show name is NOT Tappable");
			}
			Back(1);
			click(AMDDownloadPage.objThumbnailOfShows, "Thumbnail of the Show");
			if (checkElementExist(AMDDownloadPage.objDownloadMoreCTA, "Download More CTA")) {
				extent.extentLoggerPass("Download More", "Thumbnail is Tappable");
				logger.info("Thumbnail is Tappable");
			} else {
				extent.extentLoggerFail("Download More", "Thumbnail is NOT Tappable");
				logger.error("Thumbnail is NOT Tappable");
			}
			Back(1);
			click(AMDDownloadPage.objRightArrowinDownloads, "Right Arrow");
			if (checkElementExist(AMDDownloadPage.objDownloadMoreCTA, "Download More CTA")) {
				extent.extentLoggerPass("Download More", "Right Arrow Tappable");
				logger.info("Right Arrow is Tappable");
			} else {
				extent.extentLoggerFail("Download More", "Right Arrow Tappable");
				logger.error("Right Arrow is Tappable");
			}
			LatestEpisodeOnTheTop();
			click(AMDHomePage.HomeIcon, "Home Icon");
		} else {
			logger.info("Download section and latest episode is not applicable for " + userType);
			extent.extentLogger("Downloads", "Download section and latest episode is not applicable for " + userType);
		}
	}
/**
 * Method to navigate to Home Landing screen
 * @throws Exception
 */
	public void navigateToLandingScreen() throws Exception {
		accessDeviceLocationPopUp("Allow", userType);
		zeeApplicasterLogin(userType);
	}
/**
 * tapping on the cordinates
 * @param xCordinate
 * @param yCordinate
 */
	public void TapOnCordinates(int xCordinate, int yCordinate) {
		AndroidTouchAction touch = new AndroidTouchAction(getDriver());
		touch.tap(PointOption.point(xCordinate, yCordinate));
	}
/**
 * Login functionality
 * @param LoginMethod
 * @param pUserName
 * @param pPassword
 * @throws Exception
 */
	public void zeeAppLoginWithCredentials(String LoginMethod, String pUserName, String pPassword) throws Exception {
		extent.HeaderChildNode("Login to ZEE5App as " + LoginMethod);

		String UserType = getParameterFromXML("userType");
		if (UserType.equals("Guest")) {
			extent.extentLogger("userType", "Logged In as : Guest");
		} else { 
			extent.extentLogger("userType", "Login as : " + LoginMethod);
		}

		switch (LoginMethod) {
		case "Guest":
			extent.HeaderChildNode("Guest User");
			extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");
			// waitTime(1000);
			// hideKeyboard();
			// verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Skip link");
			waitTime(3000);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as " + LoginMethod);
			System.out.println("\nLogin as " + LoginMethod);

			String SubscribedUsername = getParameterFromXML("SubscribedUserName");
			String SubscribedPassword = getParameterFromXML("SubscribedPassword");

			// verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse
			// for Free");
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			// Verify user is navigated to Login/Register screen post tapping Login/Register
			// link
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");

			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SubscribedUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;

		default:
			extent.HeaderChildNode("Login as " + LoginMethod);
			System.out.println("\nLogin as " + LoginMethod);

			// verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse
			// for Free");
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			// Verify user is navigated to Login/Register screen post tapping Login/Register
			// link
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");

			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, pUserName, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, pPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;
		}
	}

//======================Defect Task=========================
	/**
	 * Verifying downloading the movie content in Downloads screen
	 * @param usertype
	 * @param searchKeyword4
	 * @throws Exception
	 */
	public void movieDownloadFunctonality(String usertype, String searchKeyword4) throws Exception {
		extent.HeaderChildNode("Downloading a Movie content in Downloads tab - AMA2-1299");
		if (usertype.equalsIgnoreCase("SubscribedUser")) {
			downloadContent(searchKeyword4, pVideoQuality, true);
			click(AMDDownloadPage.objmoviestab, "Movies tab");
			boolean var = verifyElementPresent(AMDDownloadPage.objDownloadingConents(searchKeyword4),
					"Downloading content");
			if (var == true) {
				logger.info("Downloading Movie content is displayed in Downloads tab");
				extentLoggerPass("Download", "Downloading Movie content is displayed in Downloads tab");
			} else {
				logger.error("Downloading Movie content is not displayed in Downloads tab");
				extentLoggerFail("Download", "Downloading Movie content is not displayed in Downloads tab");
			}
			click(AMDDownloadPage.objDownloadingConents(searchKeyword4), "Downloading content");
			click(AMDDownloadPage.objCancelDownloadOption, "Cancel download option");
		} else {
			logger.info("This is not applicable for " + usertype + " user");
			extentLogger("", "This is not applicable for " + usertype + " user");
		}
	}
/**
 * Verifying the premium icon on content thumbnail in search results screen
 * @param usertype
 * @throws Exception
 */
	public void premiumTagOnSearchResultScreen(String usertype) throws Exception {
		extent.HeaderChildNode("Premium tag/icon on the content thumbnail in search results screen - AMA2-1296");

		String pContentLang = ResponseInstance.getLanguage(usertype);
		System.out.println("CONTENT LANG: " + pContentLang);
		Response pageResp = ResponseInstance.getResponseForAppPages("Home", pContentLang, usertype);
		String contentName = null;
		contentName = pageResp.jsonPath().get("buckets[0].items[0].title");
		System.out.println(contentName);

		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon2, "Search Icon");
		waitTime(3000);
		click(AMDSearchScreen.objSearchEditBox, "Search edit");
		type(AMDSearchScreen.objSearchBoxBar, contentName, "Search Field");
		waitTime(3000);
		hideKeyboard();
		boolean var = verifyElementPresent(AMDSearchScreen.objPremiumSearchResult(contentName),
				"Premium icon on premium content");
		if (var == true) {
			logger.info("Premium tag/icon is displayed on the content thumbnail in search results screen");
			extentLoggerPass("Preium icon",
					"Premium tag/icon is displayed on the content thumbnail in search results screen");
		} else {
			logger.error("Premium tag/icon is not displayed on the content thumbnail in search results screen");
			extentLoggerFail("Premium icon",
					"Premium tag/icon is not displayed on the content thumbnail in search results screen");
		}
		Back(1);
	}
/**
 * Swipe functionality of content cards
 * @throws Exception
 */
	public void swipeFunctionalityOnContentCardsOfTray() throws Exception {
		extent.HeaderChildNode("Scroll functionality - AMA2-330");
		for (int i = 0; i < 6; i++) {
			boolean var = false;
			waitTime(10000);
			var = verifyIsElementDisplayed(AMDHomePage.objFirstContentCardOfTray("Top"), "content");
			if (var == true) {
				SwipeRailContentCards(AMDHomePage.objFirstContentCardOfTray("Top"));
				break;
			} else {
				PartialSwipe("UP", 1);
			}
		}
		waitTime(3000);

		String tabname = getText(AMDHomePage.objselectedTopNavTab);
		if (tabname.equalsIgnoreCase("Home")) {
			logger.info("User is scrolled only the current section");
			extentLoggerPass("scroll", "User is scrolled only the current section");
		} else {
			logger.error("User is moved to next tab");
			extentLoggerFail("Swipe", "User is moved to next tab");
		}
	}
/**
 * Validating the watch trailer icon
 * @param usertype
 * @throws Exception
 */
	public void watchTrailer(String usertype) throws Exception {
		extent.HeaderChildNode("Handle Watch Trailer button - AMA2-209");
		String pContentLang = ResponseInstance.getLanguage(usertype);
		System.out.println("CONTENT LANG: " + pContentLang);
		Response pageResp = ResponseInstance.getResponseForAppPages("Movies", pContentLang, usertype);
		String contentName = null;
		String contentID = null;
		for (int i = 0; i < 9; i++) {
			contentName = pageResp.jsonPath().get("buckets[0].items[" + i + "].title");
			contentID = pageResp.jsonPath().get("buckets[0].items[" + i + "].id");
			Response contentResp = RestAssured.given()
					.headers("x-access-token", ResponseInstance.getXAccessTokenWithApiKey()).when()
					.get("https://gwapi.zee5.com/content/details/" + contentID
							+ "?translation=en&country=IN&version=2");
			List<String> relatedNode = contentResp.jsonPath().getList("related");
			if (relatedNode.size() > 0) {
				String assetSubType = contentResp.jsonPath().getString("related[0].asset_subtype");
				if (assetSubType.equalsIgnoreCase("trailer")) {
					logger.info("This content has Trailer");
					extentLogger("Trailer", "This content has Trailer");
					System.out.println(contentName);
					selectTopNavigationTab("Movies");
					waitTime(3000);
					waitForElementAndClickIfPresent(AMDHomePage.objContentTitle(contentName), 7, "content");
					waitTime(3000);
					verifyElementPresentAndClick(AMDConsumptionScreen.objWatchTrialer, "WatchTrailer button");
					waitTime(5000);
					Boolean var = verifyIsElementDisplayed(AMDPlayerScreen.objplayer, "Player controls");
					if (var == true) {
						logger.info(
								"Watch trailer cta is displayed for the content consumption screen which is having trailer nodes and on tapping 'Watch trailer' CTA, playBack of Trailer is observed");
						extentLoggerPass("Watch trailer",
								"Watch trailer cta is displayed for the content consumption screen which is having trailer nodes and on tapping 'Watch trailer' CTA, playBack of Trailer is observed");
					} else {
						logger.error(
								"Watch trailer cta is displayed for the content consumption screen which is having trailer nodes and on tapping 'Watch trailer' CTA, playBack of Trailer is not observed");
						extentLoggerFail("Watch trailer",
								"Watch trailer cta is displayed for the content consumption screen which is having trailer nodes and on tapping 'Watch trailer' CTA, playBack of Trailer is not observed");
					}
					Back(1);
					break;
				}
			} else {
				logger.info("This content is not havinag a Trailer");
				extentLogger("Trailer", "This content is not havinag a Trailer");
			}
		}
	}
/**
 * Validating the Eduauraa tab in Top navigation bar menu
 * @throws Exception
 */
	public void eduauraa_TopNavBar() throws Exception {
		extent.HeaderChildNode("Eduauraa to be included in the top navigation bar menu - ZNA-9871");
		waitTime(3000);
		boolean flag = false;
		verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home button");
		int noOfTabs = getCount(AMDHomePage.objTitle);
		System.out.println("\nTop Navigation Tabs: " + noOfTabs);
		for (int k = 1; k <= noOfTabs; k++) {
			if (verifyIsElementDisplayed(AMDGenericObjects.objPageTitle("Eduauraa"))) {
				logger.info("Eduauraa is included in top Navigation bar menu");
				extentLoggerPass("Eduauraa", "Eduauraa is included in top Navigation bar menu");
				flag = true;
				break;
			} else {
				List<WebElement> element = getDriver().findElements(By.xpath("//*[@id='homeTabLayout']/*/child::*"));
				element.get(noOfTabs - 1).click();
				waitTime(1000);
			}
		}
		if (flag == false) {
			logger.error("Eduauraa is not included in top Navigation bar menu");
			extentLoggerFail("Eduauraa", "Eduauraa is not included in top Navigation bar menu");
		}
	}
/**
 * @Note Validating the App crash issues for Live tv contents
 * @throws Exception
 */
	public void crashIssue_LiveTvContents() throws Exception {
		extent.HeaderChildNode(
				"App crash issue when minimize and maximize the App post disconnecting the network when playing Live TV contents - ZNA-10961");
		selectTopNavigationTab("Live TV");
		verifyElementPresentAndClick(AMDHomePage.objFirstContentCardOfTray("FREE"), " Live Content");
		waitForElementDisplayed(AMDPlayerScreen.objplayer, 60);
		TurnOFFWifi();
		waitTime(3000);
		getDriver().runAppInBackground(Duration.ofSeconds(10));
		boolean var = verifyElementPresent(AMDPlayerScreen.objPlayerScreen, "Player screen");
		if (var == true) {
			logger.info("App maximized without any crash");
			extentLoggerPass("App crash", "App maximized without any crash");
		} else {
			logger.error("App is not maximized");
			extentLoggerFail("App crash", "App is not maximized");
		}
		TurnONWifi();
	}
/**
 * validating headre name and back arrow icon validation in all listing screen
 * @param tabName
 * @throws Exception
 */
	public void listingScreenBackArrowAndHeaderName(String tabName) throws Exception {
		extent.HeaderChildNode("Header name and back arrow validation in all the listing screen - AMA2-289");
		selectTopNavigationTab(tabName);
		waitTime(3000);
		for (int j = 0; j < 3; j++) {
			int noOfViewAllBtns = getDriver().findElements(By.xpath("//*[@text='a']")).size();
			System.out.println(noOfViewAllBtns);
			if (noOfViewAllBtns > 1) {
				for (int i = 1; i <= noOfViewAllBtns; i++) {
					getDriver().findElement(By.xpath("(//*[@text='a'])[" + i + "]")).click();
					if (verifyElementDisplayed(AMDHomePage.objBackIcon)) {
						logger.info("Back button is displayed in listing Collection screen");
						extent.extentLoggerPass("Listing Collection Screen",
								"Back button is displayed in listing Collection screen");
					} else {
						logger.error("Back button is not displayed in the listing Collection screen");
						extent.extentLoggerFail("Listing Collection Screen",
								"Back button is not displayed in the listing Collection screen");
					}
					if (verifyElementDisplayed(AMDHomePage.objTitle)) {
						logger.info("Header Name is displayed in listing Collection screen");
						extent.extentLoggerPass("Listing Collection Screen",
								"Header Name is displayed in listing Collection screen");
					} else {
						logger.error("Header Name is not displayed in listing Collection screen");
						extent.extentLoggerFail("Listing Collection Screen",
								"Header Name is not displayed in listing Collection screen");
					}
					Back(1);
				}
				break;
			} else {
				Swipe("UP", 1);
			}
		}
	}
/**
 * removal of mandatory registration of News browsing
 * @param usertype
 * @throws Exception
 */
	@SuppressWarnings("unused")
	public void mandatoryRegistration_NewsContent(String usertype) throws Exception {
		extent.HeaderChildNode("Removal of mandatory registration for News browsing - ZNA-9356");
		if (usertype.equalsIgnoreCase("Guest")) {
			selectTopNavigationTab("News");
			swipeUntilFindElement(AMDHomePage.objTrayTitle("Live"), "UP");
			click(AMDHomePage.objFirstContentCardOfTray("Live"), "First content of Live News Tray");
			waitForAdToFinishInAmd();
			boolean var = verifyIsElementDisplayed(AMDPlayerScreen.objPauseIcon);
			if (var == false) {
				click(AMDPlayerScreen.objPlayerScreen, "PlayerScreen");
			}
			if (verifyElementExist(AMDPlayerScreen.objPauseIcon, "Pause icon")) {
				logger.info("Mandatory Registration popUp is not displayed for Live  content");
				extentLoggerPass("Mandatory Registration popUp",
						"Mandatory Registration popUp is not displayed for Live content");
			} else {
				logger.error("Mandatory Registration popUp is displayed for Live content");
				extentLoggerFail("Mandatory Registration popUp",
						"Mandatory Registration popUp is displayed for Live content");
			}
			Back(1);

			swipeUntilFindElement(AMDHomePage.objCarouselDots, "DOWN");

			swipeUntilFindElement(AMDHomePage.objTrayTitle("Trending"), "UP");
			click(AMDHomePage.objViewAllBtn("Trending"), "Trending News tray view All button");
			int noOfContents = getDriver().findElements(By.xpath(
					"//*[@resource-id='com.graymatrix.did:id/cell_center_container']/child::*[@class='android.widget.ImageView']"))
					.size();
			for (int i = 1; i < 7; i++) {
				getDriver().findElement(By.xpath(
						"(//*[@resource-id='com.graymatrix.did:id/cell_center_container']/child::*[@class='android.widget.ImageView'])["
								+ i + "]"))
						.click();
				waitForAdToFinishInAmd();
				var = verifyIsElementDisplayed(AMDPlayerScreen.objPauseIcon);
				if (var == false) {
					click(AMDPlayerScreen.objPlayerScreen, "PlayerScreen");
				}
				if (verifyElementExist(AMDPlayerScreen.objPauseIcon, "Pause icon")) {
					logger.info("Mandatory Registration popUp is not displayed for content" + i);
					extentLoggerPass("Mandatory Registration popUp",
							"Mandatory Registration popUp is not displayed for content" + i);
				} else {
					logger.error("Mandatory Registration popUp is displayed for content" + i);
					extentLoggerFail("Mandatory Registration popUp",
							"Mandatory Registration popUp is displayed for content" + i);
				}
				Back(1);
				click(AMDHomePage.objViewAllBtn("Trending"), "Trending News tray view All button");
				waitTime(5000);
			}
			Back(1);
		} else {
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not Applicable", "Not Applicable for this userType");
		}
	}
/**
 * validation of Upcoming screen in offline mode
 * @throws Exception
 */
	public void upcomingScreen_OfflineMode() throws Exception {
		extent.HeaderChildNode(
				"ZNA-10691 - Blank screen validation in the Upcoming screen post tapping 'TRY AGAIN' in offline mode");
		TurnOFFWifi();
		waitTime(5000);
		click(AMDHomePage.objUpcomingBtn, "Upcoming tab");
		verifyElementPresentAndClick(AMDOfflineScreen.objTryAgain, "Retry icon");
		boolean var = verifyIsElementDisplayed(AMDOfflineScreen.objTryAgain);
		if (var == true) {
			logger.info("Same offline screen is displayed");
			extentLoggerPass("Blank screen", "Same offline screen is displayed");
		} else {
			logger.info("Same offline screen is not displayed");
			extentLoggerFail("Blank screen", "Same offline screen is not displayed");
		}
		waitTime(3000);
		click(AMDHomePage.objHomeBottomBtn, "Bottom bar Home Button");
		TurnONWifi();
	}
/**
 * verifying crash issues 
 * @param searchKeyword
 * @throws Exception
 */
	public void crashIssue_OptionBelowPlayer(String searchKeyword) throws Exception {
		extent.HeaderChildNode(
				"App crash issue on clicking any option below player post playing 'Expiry date', 'Naxalbari' content in consumption screen - ZNA-10271");
		click(AMDHomePage.objSearchBtn, "Search icon");
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
		click(AMDSearchScreen.objSearchResult(searchKeyword), "Search result");
		waitTime(5000);
		verifyElementPresentAndClick(AMDConsumptionScreen.objShareBtn, "Share icon");
		waitTime(3000);
		boolean var = verifyIsElementDisplayed(AMDPlayerScreen.objSharePopUp, "Share popUp");
		if (var == true) {
			logger.info("App is not crashed on clicking any option below player post playing " + searchKeyword
					+ " content in consumption screen");
			extentLoggerPass("App crash", "App is not crashed on clicking any option below player post playing "
					+ searchKeyword + " content in consumption screen");
		} else {
			logger.error("App is crashed on clicking any option below player post playing " + searchKeyword
					+ " content in consumption screen");
			extentLoggerFail("App crash", "App is crashed on clicking any option below player post playing "
					+ searchKeyword + " content in consumption screen");
		}
	}
/**
 * Verifying the crash issue on launching app in offline mode
 * @throws Exception
 */
	public void crashIssue_AppLaunch_OfflineModeAndValidatingHipiBottomBarMenu() throws Exception {
		extent.HeaderChildNode("App crash issue on launching the app in offline mode - ZNA-10528");

		click(AMDHomePage.objHomeBottomBtn, "Bottom bar Home Button");
		boolean lastSecTab = false;

		int noOfTabs = getCount(AMDHomePage.objTitle);
		System.out.println("HOME PAGE HEADERS: " + noOfTabs);
		for (int i = 1; i <= 10; i++) {

			String tabName = null;
			if (i == noOfTabs) {
				if (!lastSecTab) {
					i = noOfTabs - 1;
				}
				WebElement eleTab = getDriver().findElement(By.xpath(
						"(//*[@class='android.widget.HorizontalScrollView']/child::*/child::*/child::*)[" + i + "]"));
				tabName = eleTab.getText();
				System.out.println(tabName);
				eleTab.click();

			} else {
				WebElement eleTab = getDriver().findElement(By.xpath(
						"(//*[@class='android.widget.HorizontalScrollView']/child::*/child::*/child::*)[" + i + "]"));
				tabName = eleTab.getText();
				System.out.println(tabName);
				eleTab.click();
			}

			waitTime(2000);

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLoggerPass(" ", tabName + " tab is displayed and clicked on " + tabName + " tab");

			boolean var = verifyIsElementDisplayed(AMDOfflineScreen.objYouAreOffline);
			if (var == true) {
				logger.info(
						"You aren't connected to the internet screen is displayed on launching the app in offline mode");
				extent.extentLoggerPass("Offline screen",
						"You aren't connected to the internet screen is displayed on launching the app in offline mode");
				break;
			}
			if (lastSecTab) {
				break;
			}
			if (tabName.equalsIgnoreCase("Music")) {
				lastSecTab = true;
			}
			waitTime(3000);

		}
		click(AMDHomePage.objHomeBtn, "Bottom bar Home Option");
		TurnONWifi();

		extent.HeaderChildNode("HiPi Logo on bottom navigation bar - ZNA-9337");
		verifyElementPresent(AMDHomePage.objHipiMenuBtn, "Hipi bottom ba menu");
	}
/**
 * verifying India Today Live channel
 * @throws Exception
 */
	public void indiaTodayLiveChannel() throws Exception {
		extent.HeaderChildNode("India Today Live Channel - ZNA-11065");
		selectTopNavigationTab("News");
		boolean content = waitForElementAndClickIfPresent(AMDHomePage.objContentTitle("India Today"), 7,
				"India Today Live Channel");
		if (content == true) {
			waitForAdToFinishInAmd();
			boolean var = verifyIsElementDisplayed(AMDPlayerScreen.objPauseIcon);
			if (var == false) {
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			}
			boolean flag = verifyIsElementDisplayed(AMDPlayerScreen.objFullscreenIcon);
			if (flag == true) {
				logger.info("Able to play India Today Live Channel");
				extentLoggerPass("Play", "Able to play India Today Live Channel");
			} else {
				logger.error("Not able to play India Today Live Channel");
				extentLoggerFail("Play", "Not able to play India Today Live Channel");
			}
			Back(1);
		} else {
			logger.info("India Today Live Channel is not present in Carousal");
			extentLoggerWarning("Carousal", "India Today Live Channel is not present in Carousal");
		}
	}
/**
 * verifying crash issue on tapping share icon form consumption screen in offline mode
 * @throws Exception
 */
	public void CrashIssue_Share_OfflineMode() throws Exception {
		extent.HeaderChildNode(
				"App crash issue on tapping share icon from consumption screen post switching to Offline mode - ZNA-10571");
		selectTopNavigationTab("Movies");
		waitTime(5000);
		TurnOFFWifi();
		click(AMDHomePage.objCarouselConetentCard, "content");
		waitTime(3000);
		click(AMDConsumptionScreen.objShareBtn, "Share icon");
		boolean var = verifyIsElementDisplayed(AMDPlayerScreen.objSharePopUp, "Share popUp");
		if (var == true) {
			logger.info("App is not crashed tapping share icon from consumption screen post switching to Offline mode");
			extentLoggerPass("App crash",
					"App is not crashed tapping share icon from consumption screen post switching to Offline mode");
		} else {
			logger.error("App crashed tapping share icon from consumption screen post switching to Offline mode");
			extentLoggerFail("App crash",
					"App crashed tapping share icon from consumption screen post switching to Offline mode");
		}
		Back(2);
		TurnONWifi();
		click(AMDHomePage.objHomeBottomBtn, "Bottom bar Home Button");
	}
/**
 * validation of eduauraa 
 * @param usertype
 * @throws Exception
 */
	public void eduauraa(String usertype) throws Exception {
		accessDeviceLocationPopUp("Allow", userType);
		navigateToIntroScreen_DisplaylangScreen();
		zeeApplicasterLoginForEduauraa(userType);
		extent.HeaderChildNode("ZNA-8873 - Eduauraa Native Integration flow");
		selectTopNavigationTab("Eduauraa");
		click(AMDHomePage.objCarouselTitle1, "Carousal card");

		if (!(usertype.equalsIgnoreCase("SubscribedUser"))) {
			verifyElementExist(AMDConsumptionScreen.objClaimOfferCTA, "Claim offer CTA");
		} else {
			verifyElementExist(AMDConsumptionScreen.objGoToEduauraaCTA, "Go to Eduauraa");
			click(AMDConsumptionScreen.objGoToEduauraaCTA, "Go to Eduauraa CTA");
			verifyElementPresent(AMDOnboardingScreen.objExitPopUpTitle,
					"Exit ZEE5 pop up post tapping on Go to Eduauraa button");
			verifyElementPresent(AMDOnboardingScreen.objExitPopUpTitle, " Exit ZEE5 title");
			verifyElementPresent(AMDOnboardingScreen.objExitPopUpDesc, "Content message on Exit popUp");
			verifyElementPresent(AMDOnboardingScreen.objExitPopUp_ConfirmCTA, "Confirm CTA on Exit popUp");
			verifyElementPresentAndClick(AMDOnboardingScreen.objExitPopUp_CancelCTA, "Cancel CTA on Exit popUp");
			boolean flag = verifyIsElementDisplayed(AMDOnboardingScreen.objExitPopUpTitle);
			if (flag == false) {
				logger.info("Exit pop up is closed post tapping on Cancel CTA");
				extentLoggerPass("Exit popUp", "Exit pop up is closed post tapping on Cancel CTA");
				click(AMDConsumptionScreen.objGoToEduauraaCTA, "Go to Eduauraa CTA");
				SwipeDownOnExitpopUp("DOWN");
				boolean flag2 = verifyIsElementDisplayed(AMDOnboardingScreen.objExitPopUpTitle);
				if (flag2 == false) {
					logger.info("Exit Pop up is closed when user swipe down on Exit ZEE5 pop up.");
					extentLoggerPass("Exit popUp", "Exit Pop up is closed when user swipe down on Exit ZEE5 pop up.");
				} else {
					logger.error("Exit Pop up is not closed when user swipe down on Exit ZEE5 pop up.");
					extentLoggerFail("Exit popUp",
							"Exit Pop up is not closed when user swipe down on Exit ZEE5 pop up.");
				}
			} else {
				logger.error("Exit pop up is not closed post tapping on Cancel CTA");
				extentLoggerFail("Exit popUp", "Exit pop up is not closed post tapping on Cancel CTA");
			}

		}

		if (!(verifyIsElementDisplayed(AMDConsumptionScreen.objAboutEduauraaSection))) {
			PartialSwipeInConsumptionScreen("UP", 1);
		}
		verifyElementPresent(AMDConsumptionScreen.objAboutEduauraaSection, "About Eduauraa section");
		PartialSwipeInConsumptionScreen("UP", 1);

		boolean desc = verifyIsElementDisplayed(AMDConsumptionScreen.objEduauraaDescriptionForAboutEduauraaSection,
				"Eduaruaa description for About Eduauraa section");
		if (desc == false) {
			logger.info("By default About Eduauraa section is not open");
			extentLoggerPass("About Eduauraa section", "By default About Eduauraa section is not open");
		} else {
			logger.error("By default About Eduauraa section is open");
			extentLoggerFail("About Eduauraa section", "By default About Eduauraa section is open");
		}
		click(AMDConsumptionScreen.objExpandIcon("About Eduauraa"), "Expand Icon for 'About Eduauraa' section");
		boolean var1 = verifyIsElementDisplayed(AMDConsumptionScreen.objEduauraaDescriptionForAboutEduauraaSection,
				"Eduaruaa description for About Eduauraa section");
		if (var1 == true) {
			logger.info("About Eduauraa section is expanded");
			extentLoggerPass("Expand", "About Eduauraa section is expanded");
		} else {
			logger.error("About Eduauraa section is collapsed");
			extent.extentLoggerFail("Expand", "About Eduauraa section is collapsed");
		}

		if (!(verifyIsElementDisplayed(AMDConsumptionScreen.objEduauraaBenefitsSection))) {
			PartialSwipeInConsumptionScreen("UP", 1);
		}
		verifyElementPresent(AMDConsumptionScreen.objEduauraaBenefitsSection, "Benefits section");
		PartialSwipeInConsumptionScreen("UP", 1);

		click(AMDConsumptionScreen.objExpandIcon("Benefits"), "Expand Icon for 'Benefits' section");
		boolean var2 = verifyIsElementDisplayed(AMDConsumptionScreen.objEduauraaDescriptionForEduauraaBenefitsSection,
				"Eduaruaa description for Benefits section");
		if (var2 == true) {
			logger.info("Eduauraa benefits section is expanded");
			extentLoggerPass("Expand", "Eduauraa benefits section is expanded");
		} else {
			logger.error("Eduauraa benefits section is collapsed");
			extent.extentLoggerFail("Expand", "Eduauraa benefits section is collapsed");
		}

		if (!(verifyIsElementDisplayed(AMDConsumptionScreen.objEduauraaOfferDetailsSection))) {
			PartialSwipeInConsumptionScreen("UP", 1);
		}
		verifyElementPresent(AMDConsumptionScreen.objEduauraaOfferDetailsSection, "Eduauraa offer details section");
		PartialSwipeInConsumptionScreen("UP", 1);

		click(AMDConsumptionScreen.objExpandIcon("Eduauraa offer details"),
				"Expand Icon for 'Eduauraa offer details' section");
		boolean var3 = verifyIsElementDisplayed(
				AMDConsumptionScreen.objEduauraaDescriptionForEduauraaOfferDetailsSection,
				"Eduaruaa description for Eduauraa offer details section");
		if (var3 == true) {
			logger.info("Eduauraa offer details section is expanded");
			extentLoggerPass("Expand", "Eduauraa offer details section is expanded");
		} else {
			logger.error("Eduauraa offer details section is collapsed");
			extent.extentLoggerFail("Expand", "Eduauraa offer details section is collapsed");
		}

		if (!(usertype.equalsIgnoreCase("SubscribedUser"))) {
			click(AMDConsumptionScreen.objClaimOfferCTA, "Claim offer CTA");
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
			Swipe("UP", 1);
			int noOfPacks = getDriver().findElements(AMDSubscibeScreen.objPremiumPlansInSubscriptionPage).size();
			if (noOfPacks == 1) {
				logger.info("Only one plan '" + getText(AMDSubscibeScreen.objPlanName)
						+ "' is displayed on BUY Subscription");
				extentLoggerPass("Plan", "Only one plan '" + getText(AMDSubscibeScreen.objPlanName)
						+ "' is displayed on BUY Subscription");
			} else {
				logger.error("More than one plan is displayed on BUY Subscription");
				extentLoggerFail("Plan", "More than one plan is displayed on BUY Subscription");
			}
			click(AMDSubscibeScreen.objContinueBtn, "Continue button");
			if (usertype.equalsIgnoreCase("Guest")) {
				verifyElementExist(AMDSubscibeScreen.objAccountInfoScreen, "Account info screen");
				click(AMDSubscibeScreen.objEmailID, "Email");
				type(AMDSubscibeScreen.objEmailID, NonsubscribedUserName, "Email field");
				hideKeyboard();
				click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
				verifyElementExist(AMDSubscibeScreen.objEnterPassword, "Enter Password PopUp");
				click(AMDSubscibeScreen.objEnterPassword, "Password");
				type(AMDSubscibeScreen.objEnterPassword, NonsubscribedPassword, "Password field");
				hideKeyboard();
				verifyElementPresentAndClick(AMDSubscibeScreen.objContinueOnSubscribePopup,
						"Continue button in password popup");
			}
			waitTime(10000);
			Swipe("DOWN", 3);
			verifyElementExist(AMDSubscibeScreen.objMakePaymentScreen, "Payment page");
			Back(3);
			if (usertype.equalsIgnoreCase("Guest")) {
				click(AMDHomePage.objMoreMenu, "More Menu");
				Swipe("UP", 3);
				click(AMDHomePage.objLogout, "Logout");
				click(AMDHomePage.objLogoutPopUpLogoutButton, "Logout button");
				click(AMDHomePage.objHome, "Home tab");
			} else {
				click(AMDHomePage.objHomeBtn, "Bottom bar Home Option");
			}
		}
	}
/**
 * method is to swipe down on Exit popup
 * @param direction
 */
	@SuppressWarnings("rawtypes")
	public void SwipeDownOnExitpopUp(String direction) {
		touchAction = new TouchAction(getDriver());
		String dire = direction;
		try {
			Dimension size = getDriver().manage().window().getSize();
			int starty = (int) (size.height * 0.5);
			int endy = (int) (size.height * 0.2);
			int startx = size.width / 2;
			touchAction.press(PointOption.point(startx, endy))
					.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
					.moveTo(PointOption.point(startx, starty)).release().perform();
			logger.info("Swiping screen in " + " " + dire + " direction" + " " + (1) + " times");
			extent.extentLogger("SwipeDown", "Swiping screen in " + " " + dire + " direction" + " " + (1) + " times");
		} catch (Exception e) {
			logger.error(e);
		}
	}
/**
 * Login functionality
 * @param LoginMethod
 * @throws Exception
 */
	public void zeeApplicasterLoginForEduauraa(String LoginMethod) throws Exception {
		extent.HeaderChildNode("Login Functionality");
		String UserType = getParameterFromXML("userType");

		if (UserType.equals("Guest")) {
			extent.extentLogger("userType", "UserType : Guest");
		}

//		verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Login link");
//		waitTime(3000);

		switch (LoginMethod) {
		case "Guest":
			extent.HeaderChildNode("Guest User");
			extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");
			// Commenting these line as Intro screen has been removed from the App
			// [AMA2-12726]
			// waitTime(1000);
			// hideKeyboard();
			// verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Skip link");
			waitTime(3000);
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as NonSubscribed User");

			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");

			// verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse
			// for Free");
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			// Verify user is navigated to Login/Register screen post tapping Login/Register
			// link
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User");

			String EduauraaUsername = getParameterFromXML("EduauraaClaimedUserName");
			String EduauraaPassword = getParameterFromXML("EduauraaClaimedPassword");
			// verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse
			// for Free");
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			// Verify user is navigated to Login/Register screen post tapping Login/Register
			// link
			click(AMDMoreMenu.objLoginRegisterText, "Login/Register link");

			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, EduauraaUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, EduauraaPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;
		}
	}
/**
 * Validation of tasks and defects
 * @param usertype
 * @param searchKeyword4
 * @throws Exception
 */
	public void tasksAndDefectsValidation(String usertype, String searchKeyword4) throws Exception {
		movieDownloadFunctonality(userType, searchKeyword4);
		relaunch(false);
		premiumTagOnSearchResultScreen(userType);
		swipeFunctionalityOnContentCardsOfTray();
		watchTrailer(userType);
		relaunch(false);
		eduauraa_TopNavBar();
		relaunch(false);
		crashIssue_LiveTvContents();
		relaunch(false);
		listingScreenBackArrowAndHeaderName("Home");
		relaunch(false);
		mandatoryRegistration_NewsContent(userType);
		relaunch(false);
		crashIssue_OptionBelowPlayer("Expiry Date");
		relaunch(false);
		upcomingScreen_OfflineMode();
		CrashIssue_Share_OfflineMode();
		relaunch(false);
		crashIssue_AppLaunch_OfflineModeAndValidatingHipiBottomBarMenu();
		relaunch(false);
		indiaTodayLiveChannel();
		relaunch(true);
		eduauraa(userType);
	}
/**
 * method to download the Upnext content from Download more CTA in Downloads screen
 * @param userType
 * @throws Exception
 */
	public void downloadUpNextContent(String userType) throws Exception {
		// ZNA-11309
		extent.HeaderChildNode(
				"ZNA-11309 : App Restarts when user try to download upnext try content from download more CTA in downloads tab");
		if (!userType.contentEquals("Guest")) {
			logger.info(
					"ZNA-11309 : App Restarts when user try to download upnext try content from download more CTA in downloads tab");
			verifyElementExist(AMDHomePage.objShowsTab, "TV Shows");
			PartialSwipe("UP", 1);
			click(AMDShowsScreen.objcontentCard, "Content card");
			verifyElementPresentAndClick(AMDDownloadPage.objDownloadIcon, "Download Icon");
			waitTime(2000);
			downloadVideoQualityPopUp(pVideoQuality, true);
			waitTime(3000);
			Back(1);
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			click(AMDDownloadPage.objRightArrow, "Right arrow ");
			verifyElementExist(AMDDownloadPage.objDownloadMoreEpisodesButton, "Download More CTA");
			click(AMDDownloadPage.objDownloadMoreEpisodesButton, "Download More CTA");
			waitTime(8000);
			verifyElementExist(AMDPlayerScreen.objUpNext, "Up Next tray");
			click(AMDPlayerScreen.ObjUpNextFirstContent, "Up Next content card");
			waitTime(3000);
			verifyElementPresentAndClick(AMDDownloadPage.objDownloadIcon, "Download Icon");
			waitTime(2000);
			downloadVideoQualityPopUp(pVideoQuality, true);
			waitTime(5000);
			Back(1);
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			if (verifyElementExist(AMDDownloadPage.objDownloadingText, "Downloading content")) {
				extent.extentLoggerPass("Download More", "User is able to initiate Downolading of Up Next content");
				logger.info("User is able to initiate Downolading of Up Next content");
			} else {
				extent.extentLoggerFail("Download More", "User fails to initiate Downolading of Up Next content");
				logger.error("User fails to initiate Downolading of Up Next content");
			}
			click(AMDHomePage.objHomeBtn, "Home");
		} else {
			logger.info("ZNA-11309 : Download Upnext Content is Not applicable for " + userType);
			extent.extentLogger(" Download", "ZNA-11309 : Download Upnext Content is Not applicable for " + userType);
		}
	}
/**
 * Method to verify if Logout option is displayed or not in More menu after Logout
 * @param userType
 * @throws Exception
 */
	public void postLogoutValidation(String userType) throws Exception {
		// ZNA-11323
		extent.HeaderChildNode(
				"ZNA-11323 : [AMD] - 'Logout' option is getting displayed in the More screen post logging out from the account");
		logger.info(
				"ZNA-11323 :[AMD] - 'Logout' option is getting displayed in the More screen post logging out from the account");
		click(AMDHomePage.objMoreMenuBtn, "More menu");
		if (userType.contentEquals("Guest")) {
			if (verifyElementIsNotDisplayed(AMDMoreMenu.objLogout)) {
				logger.info("Logout option is NOT displayed for " + userType + "user");
				extent.extentLoggerPass("Log out", "Logout option is NOT displayed for " + userType + "user");
			} else {
				logger.error("Logout option is displayed for " + userType + "user");
				extent.extentLoggerFail("Log out", "Logout option is displayed for " + userType + "user");
			}
		}
		if (userType.contentEquals("NonSubscribedUser") || userType.contentEquals("SubscribedUser")) {
			swipeUntilFindElement(AMDMoreMenu.objLogout, "UP");
			verifyElementPresentAndClick(AMDMoreMenu.objLogout, "Logout option in More menu");
			verifyElementPresent(AMDMoreMenu.objLogoutPopup, "Logout Confirmation Popup");
			verifyElementPresent(AMDMoreMenu.objCancelButton, "Cancel button");
			verifyElementPresent(AMDMoreMenu.objLogoutButton, "Logout button");
			click(AMDMoreMenu.objLogoutButton, "Logout button");
			Swipe("DOWN", 1);
			Swipe("UP", 1);
			if (verifyElementIsNotDisplayed(AMDMoreMenu.objLogout)) {
				logger.info("Logout option is NOT displayed for " + userType + "user Post Logout");
				extent.extentLoggerPass("Log out",
						"Logout option is NOT displayed for " + userType + "user Post Logout");
			} else {
				logger.error("Logout option is displayed for " + userType + "user Post Logout");
				extent.extentLoggerFail("Log out", "Logout option is displayed for " + userType + "user Post Logout");
			}
			Swipe("DOWN", 1);
			loginAfterLogout(userType);
		}
		click(AMDHomePage.objHomeBtn, "Home");
	}
/**
 * method to Login from More menu
 * @param userType
 * @throws Exception
 */
	public void loginFromMoreScreen(String userType) throws Exception {
		// ZNA-11271
		extent.HeaderChildNode("ZNA-11271");
		logger.info("ZNA-11271");
		if (userType.contentEquals("Guest")) {
			click(AMDHomePage.objMoreMenuBtn, "More menu");
			loginAfterLogout("NonSubscribedUser");
			waitTime(3000);
			Boolean value = findElement(AMDHomePage.objHomeTab).isSelected();
			if (value == true) {
				logger.info("User lands on Home landing screen post login from More screen ");
				extent.extentLoggerPass("More screen", "User lands on Home landing screen post login from More screen");
			} else {
				logger.error("User Fails to lands on Home landing screen post login from More screen");
				extent.extentLoggerFail("More screen",
						"User Fails to lands on Home landing screen post login from More screen");
			}
			click(AMDHomePage.objMoreMenuBtn, "More menu");
			Swipe("UP", 2);
			click(AMDMoreMenu.objLogout, "Logout");
			click(AMDMoreMenu.objLogoutBtn, "Logout Button");

		} else {
			logger.info("ZNA-11271 : Not applicable for " + userType);
			extent.extentLogger("More screen", "ZNA-11271 : Not applicable for " + userType);
		}
	}
/**
 * Method to verify recommend rail in Movies landing screen
 * @param userType
 * @throws Exception
 */
	public void recommendRailInMovies(String userType) throws Exception {
		// ZNA-3495
		extent.HeaderChildNode("ZNA-3495");
		logger.info("ZNA-3495");
		click(AMDHomePage.objMoviesTab, "Movies tab");
		waitForElementAndClickIfPresent(AMDHomePage.objPlayBtn, 10, "Play button");
		if (verifyElementDisplayed(AMDPlayerScreen.objPauseIcon)) {
			click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		} else {
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		}
//		waitTime(3000);
//		click(AMDPlayerScreen.objPlayerScreen,"Player screen");
//		click(AMDPlayerScreen.objPauseIcon,"Pause icon");
		findParticularTray(AMDConsumptionScreen.objRecommendedRail, "Recommended");
		if (verifyElementExist(AMDConsumptionScreen.objRecommendedRail, "Recommended rail")) {
			logger.info("Recommended rail is displayed in Movies consumption screen");
			extent.extentLoggerPass("Recommended rail", "Recommended rail is displayed in Movies consumption screen");
		} else {
			logger.info("Recommended rail is Not displayed in Movies consumption screen");
			extent.extentLoggerWarning("Recommended rail",
					"Recommended rail is Not displayed in Movies consumption screen");
		}
		BackToLandingScreen();
	}
/**
 * Validating the Expand and collapse icon of Benifits section present for Eduauraa content
 * @param userType
 * @throws Exception
 */
	public void playEduauraaAndValidateExpandCollapseofBenefitsSection(String userType) throws Exception {
		// ZNA-9741
		extent.HeaderChildNode("ZNA-9741");
		logger.info("ZNA-9741");
		selectTopNavigationTab("Eduauraa");
		waitTime(3000);
		waitForElementAndClickIfPresent(AMDHomePage.objPlayBtn, 10, "Play button");
		waitTime(3000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		waitTime(3000);
		Boolean result = verifyElementExist(AMDPlayerScreen.objPlayerScreen, "Player screen");
		if (result) {
			logger.info("User is able to play Eduauraa content");
			extent.extentLoggerPass("Eduauraa", "User is able to play Eduauraa content");
		} else {
			logger.error("User is Unable to play Eduauraa content");
			extent.extentLoggerFail("Eduauraa", "User is Unable to play Eduauraa content");
		}

		// ZNA-9749
		extent.HeaderChildNode("ZNA-9749");
		logger.info("ZNA-9749");
		verifyElementExist(AMDPlayerScreen.objBenefitsofEduauraa, "Benefits section of Eduauraa");
		verifyElementExist(AMDPlayerScreen.objExpandArrowOfBenefitsSection, "Expand arrow of Benefits Section");
		click(AMDPlayerScreen.objExpandArrowOfBenefitsSection, "Expand arrow of Benefits Section");
		verifyElementExist(AMDPlayerScreen.objeduauraaDescriptionText, "Description of Benefits section");
		click(AMDPlayerScreen.objExpandArrowOfBenefitsSection, "Collpase arrow of Benefits Section");
		if (verifyElementIsNotDisplayed(AMDPlayerScreen.objeduauraaDescriptionText)) {
			logger.info("User is able to expand and collapse the Benifits section of Eduauraa");
			extent.extentLoggerPass("Eduauraa", "User is able to expand and collapse the Benifits section of Eduauraa");
		} else {
			logger.error("User is Unable to expand and collapse the Benifits section of Eduauraa");
			extent.extentLoggerFail("Eduauraa",
					"User is Unable to expand and collapse the Benifits section of Eduauraa");
		}
	}
/**
 * Validating the listing screen of recommend rails in News landing screen
 * @param userType
 * @throws Exception
 */
	public void recommendRailListingScreenInNews(String userType) throws Exception {
		// ZNA-9902
		extent.HeaderChildNode("ZNA-9902");
		logger.info("ZNA-9902");
		if (!userType.contentEquals("Guest")) {
			click(AMDHomePage.objHomeBtn, "Home");
			selectTopNavigationTab("News");
			findParticularTray(AMDPlayerScreen.objTrendingNewsTray, "Trending News");
			String trayName = getText(AMDPlayerScreen.objTrendingNewsTray);
			verifyElementExist(AMDHomePage.objViewAllBtn("Trending News "), "View All icon of Trending News tray");
			click(AMDHomePage.objViewAllBtn("Trending News "), "View All icon of Trending News tray");
			String pageTitle = getText(AMDHomePage.objTitle);
			if (trayName.contains(pageTitle)) {
				extent.extentLoggerPass("Listing Collection",
						userType + " is able to navigate to listing collection: " + trayName + " Screen");
				logger.info(userType + " is able to navigate to listing collection: " + trayName + " Screen");
			} else {
				extent.extentLoggerFail("Listing Collection",
						userType + " is failed to navigate to listing collection: " + trayName + " Screen");
				logger.error(userType + " is failed to navigate to listing collection: " + trayName + " Screen");
			}

		} else {
			logger.info("ZNA-9902 : Not applicable for " + userType);
			extent.extentLogger("More screen", "ZNA-9902 : Not applicable for " + userType);
		}

	}
/**
 * Verifying the continue watching tray
 * @param userType
 * @throws Exception
 */
	public void continueWatchingTrayDefectValidation(String userType) throws Exception {
		// ZNA-9685
		extent.HeaderChildNode("ZNA-9685");
		logger.info("ZNA-9685");
		selectTopNavigationTab("Movies");
		if (userType.contentEquals("Guest")) {
			if (verifyElementIsNotDisplayed(AMDHomePage.objContinueWatchingTray)) {
				logger.info("Continue watching is NOT displayed for " + userType + "user");
				extent.extentLoggerPass("Continue watching",
						"Continue watching NOT displayed for " + userType + "user");
			} else {
				logger.error("Continue watching is displayed for " + userType + "user");
				extent.extentLoggerFail("Continue watching", "Continue watching is displayed for " + userType + "user");
			}
		}
		if (userType.contentEquals("NonSubscribedUser") || userType.contentEquals("SubscribedUser")) {
			if (verifyElementDisplayed(AMDHomePage.objContinueWatchingTray)) {
				logger.info("Continue watching tray is displayed in Movies Landing screen");
				extent.extentLoggerPass("Continue watching",
						"Continue watching tray is displayed in Movies Landing screen");
			} else {
				logger.error("Continue watching tray is NOT displayed in Movies Landing screen");
				extent.extentLoggerFail("Continue watching",
						"Continue watching tray is NOT displayed in Movies Landing screen");
			}
		}
		click(AMDHomePage.objHomeBtn, "Home");

		// ZNA-9679
		extent.HeaderChildNode("ZNA-9679");
		logger.info("ZNA-9679");
		if (userType.contentEquals("Guest")) {
			click(AMDHomePage.objMoreMenuBtn, "More Menu");
			click(AMDMoreMenu.objProfile, "Profile");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, "igs111@gmail.com", "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, "IGS@1111", "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			click(AMDHomePage.objHomeBtn, "Home");
			if (verifyElementIsNotDisplayed(AMDHomePage.objContinueWatchingTray)) {
				logger.info("Continue watching is NOT displayed in Home landing screen for newly registered " + userType
						+ "user");
				extent.extentLoggerPass("Continue watching",
						"Continue watching NOT displayed in Home landing screen  for newly registered " + userType
								+ "user");
			} else {
				logger.error("Continue watching is displayed in Home landing screen  for newly registered " + userType
						+ "user");
				extent.extentLoggerFail("Continue watching",
						"Continue watching is displayed  in Home landing screen  for newly registered " + userType
								+ "user");
			}
			selectTopNavigationTab("Movies");
			if (verifyElementIsNotDisplayed(AMDHomePage.objContinueWatchingTray)) {
				logger.info("Continue watching is NOT displayed in Movies landing screen for newly registered "
						+ userType + "user");
				extent.extentLoggerPass("Continue watching",
						"Continue watching NOT displayed in Movies landing screen for newly registered " + userType
								+ "user");
			} else {
				logger.error("Continue watching is displayed in Movies landing screen for " + userType + "user");
				extent.extentLoggerFail("Continue watching",
						"Continue watching is displayed  in Movies landing screen for newly registered  " + userType
								+ "user");
			}
			click(AMDHomePage.objHomeBtn, "Home");
			click(AMDHomePage.objMoreMenuBtn, "More menu");
			Swipe("UP", 2);
			click(AMDMoreMenu.objLogout, "Logout");
			click(AMDMoreMenu.objLogoutBtn, "Logout Button");
		} else {
			logger.info("ZNA-9679 : Not applicable for " + userType);
			extent.extentLogger("Continue watching tray", "ZNA-9679 : Not applicable for " + userType);
		}
	}
/**
 * Valudating Trending news present on News landing screen
 * @param userType
 * @throws Exception
 */
	public void trendingNews(String userType) throws Exception {
		// ZNA-9278
		extent.HeaderChildNode("ZNA-9278");
		logger.info("ZNA-9278");
		selectTopNavigationTab("News");
		findParticularTray(AMDPlayerScreen.objTrendingNewsTray, "Trending News");
		if (verifyElementDisplayed(AMDPlayerScreen.objTrendingNewsTray)) {
			logger.info("Trending News tray is displayed in News Landing screen");
			extent.extentLoggerPass("Continue watching", "Trending News tray is displayed in News Landing screen");
		} else {
			logger.error("Trending News tray is NOT displayed in News Landing screen");
			extent.extentLoggerFail("Continue watching", "Trending News tray is NOT displayed in News Landing screen");
		}

	}
/**
 * verifying the serached content in search screen
 * @param userType
 * @throws Exception
 */
	public void searchedContent(String userType) throws Exception {
		// ZNA-9403
		extent.HeaderChildNode("ZNA-9403");
		logger.info("ZNA-9403");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, "Vennaipol", "Search bar");
		hideKeyboard();
		click(AMDDownloadPage.objsearchresultFirst, "Searched Show");
		click(AMDPlayerScreen.objPlayerScreen, "Player");
		if ((verifyElementDisplayed(AMDDownloadPage.objPauseIconOnPlayer))) {
			logger.info("Searched content is playing");
			extent.extentLoggerPass("Search", "Searched content is playing");
		} else {
			logger.error("Searched content is NOT playing");
			extent.extentLoggerFail("Search", "Searched content is NOT playing");
		}
		verifyElementExist(AMDConsumptionScreen.objCurrentAudioLanguage, "Current language");
		String text = findElement(AMDConsumptionScreen.objCurrentAudioLanguage).getText();
		logger.info("current language of the content is " + text);
		System.out.println("current language of the content is " + text);
	}
/**
 * validation of downloaded content in Downloads screen
 * @param userType
 * @throws Exception
 */
	public void validationOfDownloadedContentInDownlodsScreen(String userType) throws Exception {
		extent.HeaderChildNode("AMA2-9339");
		logger.info("AMA2-9339");
		// AMA2-9339
		if (userType.contentEquals("SubscribedUser")) {
			verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
			verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, "Lahore Confidential", "Search bar");
			hideKeyboard();
			click(AMDDownloadPage.objsearchresultFirst, "Searched Show");
			verifyElementPresentAndClick(AMDDownloadPage.objDownloadIcon, "Download Icon");
			waitTime(2000);
			downloadVideoQualityPopUp(pVideoQuality, true);
			waitTime(5000);
			Back(1);
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			String SelectedTabName = getText(AMDHomePage.objSlectedTabInDownloadsScreen);
			if (SelectedTabName.equalsIgnoreCase("Videos")) {
				extent.extentLoggerFail("Videos tab",
						" [AMA2-9339] Downloaded content is displayed in Videos tab instead Movies tab");
				logger.error(" [AMA2-9339] Downloaded content is displayed in Videos tab instead Movies tab");
			} else {
				extent.extentLoggerPass("Movies tab",
						"Downloaded content is displayed in " + SelectedTabName + " instead Movies tab");
				logger.info("Downloaded content is displayed in " + SelectedTabName + " instead Movies tab");
			}
			click(AMDHomePage.objHomeBtn, "Home");
		} else {
			logger.info("AMA2-9339 : Not applicable for " + userType);
			extent.extentLogger("Downloads", "AMA2-9339 : Not applicable for " + userType);
		}
	}
/**
 * validation of Prepaid code
 * @param userType
 * @throws Exception
 */
	public void prepaidCodeValidation(String userType) throws Exception {
		// ZNA-8785
		extent.HeaderChildNode("ZNA-8785");
		logger.info("ZNA-8785");
		if (userType.contentEquals("SubscribedUser")) {
			click(AMDHomePage.objMoreMenuBtn, "More menu");
			click(AMDMoreMenu.objHaveaPrepaidCode, "Have a prepaid code");
			click(AMDOnboardingScreen.objPrepaidCodeField, "Prepaid code field");
			waitTime(1000);
			type(AMDOnboardingScreen.objPrepaidCodeField, "Z530DTQ2v3UiT0", "Prepaid Code field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDOnboardingScreen.objApplyBtn, "Apply button");
			verifyElementExist(AMDOnboardingScreen.objSuccessDesc, "Success description");
			String Text = findElement(AMDOnboardingScreen.objSuccessDesc).getText();
			if (Text.contains("This code is already redeemed")) {
				logger.info(Text + " message is displayed after entering already redeemed prepaid code");
				extent.extentLoggerPass("Prepaid code",
						Text + " message is displayed after entering already redeemed prepaid code");
			} else {
				logger.error(Text + " message is displayed after entering already redeemed prepaid code");
				extent.extentLoggerFail("Prepaid code",
						Text + " message is displayed after entering already redeemed prepaid code");
			}

		} else {
			logger.info("ZNA-8785 : Not applicable for " + userType);
			extent.extentLogger("Continue watching tray", "ZNA-8785 : Not applicable for " + userType);
		}
	}
/**
 * validating the carousel of Eduaraa
 * @param userType
 * @throws Exception
 */
	public void eduaraaCarousel(String userType) throws Exception {
		// ZNA-9688
		extent.HeaderChildNode("ZNA-9688");
		logger.info("ZNA-9688");
		click(AMDHomePage.objHomeBtn, "Home");
		selectTopNavigationTab("Eduauraa");
		if (verifyElementDisplayed(AMDHomePage.objCarouselContentTitleCard("Learn About The Green House Effect"))) {
			click(AMDHomePage.objCarouselContentTitleCard("Learn About The Green House Effect"), "Content card");
			if (verifyElementExist(AMDPlayerScreen.objPause, "Pause icon")) {
				logger.info("User is navigated to Consumption screen and is able to play the content");
				extent.extentLoggerPass("Eduauraa",
						"User is navigated to Consumption screen and is able to play the content");
			} else {
				logger.error("User is navigated to Consumption screen and is able to play the content");
				extent.extentLoggerFail("Eduauraa",
						"User is navigated to Consumption screen and is able to play the content");
			}
		} else {
			logger.info(
					"'Learn About The Green House Effect' content is not displayed in carousel of Eduauraa landing screen");
			extent.extentLoggerWarning("Eduauraa",
					"'Learn About The Green House Effect' content is not displayed in carousel of Eduauraa landing screen");
		}
	}
/**
 * valdation of Downloading the Before Tv content
 * @param userType
 * @throws Exception
 */
	public void downloadBeforeTvContent(String userType) throws Exception {
		// ZNA-8236
		extent.HeaderChildNode("ZNA-8236");
		logger.info("ZNA-8236");
		if (userType.contentEquals("SubscribedUser")) {
			verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
			verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, "Gattimela", "Search bar");
			hideKeyboard();
			click(AMDDownloadPage.objsearchresultFirst, "Searched Show");
			waitTime(4000);
			click(AMDPlayerScreen.ObjUpNextFirstContent, "Up Next content card");
			waitTime(3000);
			verifyElementPresentAndClick(AMDDownloadPage.objDownloadIcon, "Download Icon");
			waitTime(2000);
			downloadVideoQualityPopUp(pVideoQuality, true);
			waitTime(5000);
			Back(1);
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			click(AMDDownloadPage.objRightArrow, "Right arrow");
			if (verifyElementDisplayed(AMDDownloadPage.objThumbnailOfShows)) {
				click(AMDDownloadPage.objThumbnailOfShows, "Before TV content(Latest episode)");
				waitTime(2000);
				downloadVideoQualityPopUp(pVideoQuality, true);
				boolean value1 = verifyElementDisplayed(AMDDownloadPage.objDownloadedContent);
				boolean value2 = verifyElementDisplayed(AMDDownloadPage.objDownloadingCircularBar);
				if ((value1 == true) | (value2 == true)) {
					logger.info("User is able to download the Before Tv content from Downloads tab");
					extent.extentLoggerPass("Downloads",
							"User is able to download the Before Tv content from Downloads tab");
				} else {
					logger.error("User is Unable to download the Before Tv content from Downloads tab");
					extent.extentLoggerFail("Downloads",
							"User is Unable to download the Before Tv content from Downloads tab");
				}
				Back(1);
			} else {
				logger.info("Before Tv content is not displayed in Downloads screen");
				extent.extentLoggerWarning("Downloads", "Before Tv content is not displayed in Downloads screen");
			}
		} else {
			logger.info("ZNA-8236 : Not applicable for " + userType);
			extent.extentLogger("Downloads", "ZNA-8236 : Not applicable for " + userType);
		}

	}
/**
 * @Note Validation of Listing screen of All episode tray
 * @param userTyepe
 * @throws Exception
 */
	public void allEpisodeTrayListingScreen(String userTyepe) throws Exception {
		// AMA2-9692
		extent.HeaderChildNode("AMA2-9692");
		logger.info("AMA2-9692");
		if (!userType.contentEquals("Guest")) {
			click(AMDHomePage.objShowsTab, "TV shows tab");
			waitForElementAndClickIfPresent(AMDHomePage.objPlayBtn, 10, "Play button");
			waitTime(3000);
			click(AMDConsumptionScreen.objWatchlistBtn, "Watchlist icon");
			Back(1);
			click(AMDHomePage.objMoreMenuBtn, "More menu");
			click(AMDMoreMenu.objWatchlist, "Watchlist");
			click(AMDMoreMenu.objWatchlistFirstContent, "Watch list content");
			click(AMDMoreMenu.objWatchlistContentcard, "Watch list content card");
			waitTime(8000);
			findParticularTray(AMDConsumptionScreen.objAllEpisodetray, "All Episodes");
			String getTrayName = findElement(AMDConsumptionScreen.objAllEpisodetray).getText();
			click(AMDHomePage.objViewAllBtn(getTrayName), getTrayName + " - View All button");
			verifyElementExist(AMDHomePage.objTitle, "Listing screen");
			Back(1);
			if (verifyElementDisplayed(AMDPlayerScreen.objPlayerScreen)) {
				logger.info("User is navigated back to consumption screen from Listing screen");
				extent.extentLoggerPass("Watchlist",
						"User is navigated back to consumption screen from Listing screen");
			} else {
				logger.error("[AMA2-9692] User Fails to navigate back to consumption screen from Listing screen");
				extent.extentLoggerFail("Watchlist",
						"[AMA2-9692]  User Fails to navigate back to consumption screen from Listing screen");
			}
		} else {
			logger.info("AMA2-9692 : Not applicable for " + userType);
			extent.extentLogger("Watchlist", "AMA2-9692 : Not applicable for " + userType);
		}
	}

	// relaunch
/**
 * launching the app in offline mode
 * @param userType
 * @throws Exception
 */
	public void launchAppinOffline(String userType) throws Exception {
		// AMA2-8340
		extent.HeaderChildNode("AMA2-8340");
		logger.info("AMA2-8340");
		System.out.println("\nValidation of app launch in Offline mode");
		// *** Verifying app launch in offline Mode
		setWifiConnectionToONOFF("Off");
		if (getOEMName.equalsIgnoreCase("Sony")) {
			wifi_TurnOFFnON();
		}
		waitTime(3000);
		relaunch(true);
		if (verifyElementDisplayed(AMDHomePage.errortitle)) {
			verifyElementExist(AMDHomePage.objRetryCTA, "Retry CTA");
			String text = findElement(AMDHomePage.errortitle).getText();
			logger.error("[AMA2-8340] " + text + " message is displayed when user launch the app in offline mode.");
			extent.extentLoggerFail("AppLaunch",
					"[AMA2-8340]  " + text + " message is displayed when user launch the app in offline mode.");
		} else {
			logger.info("User is able to launch the app");
			extent.extentLogger("AppLaunch", "User is able to launch the app");
		}
		setWifiConnectionToONOFF("ON");
		waitTime(5000);
		verifyElementExist(AMDHomePage.objRetryCTA, "Retry CTA");
		click(AMDHomePage.objRetryCTA, "Retry CTA");
	}
/**
 * validting the quality option
 * @param userType
 * @throws Exception
 */
	public void validatingQualityOptionDefect(String userType) throws Exception {

		// AMA2-8193
		extent.HeaderChildNode("AMA2-8193");
		logger.info("AMA2-8193");
		if (!userType.contentEquals("Guest")) {
			click(AMDSearchScreen.objSearchIcon, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, "Yennenu Soda - Hebbuli" + "\n", "Search bar");
			waitTime(2000);
			hideKeyboard();
			click(AMDDownloadPage.objsearchresultFirst, "Searched Show");
			waitTime(3000);
			verifyElementPresentAndClick(AMDDownloadPage.objDownloadIcon, "Download button");
			waitTime(2000);
			downloadVideoQualityPopUp(pVideoQuality, true);
			waitTime(3000);
			Back(1);
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			click(AMDDownloadPage.objvideostab, "Videos tab in Downloads landing screen");
			click(AMDDownloadPage.objDownloadCompleteIcon, "downloadCompleteIcon");
			click(AMDDownloadPage.objPlayDownloadedContent, "Play Call-out");
			// verifyElementPresentAndClick(AMDDownloadPage.objPauseIconOnPlayer, "Pause
			// Icon");
			scrubProgressBarTillEnd(AMDPlayerScreen.objProgressBar);
			verifyElementExist(AMDPlayerScreen.objThreeDotsOnPlayer,
					"Three dots menu overlay at top right corner of player");
			verifyElementExist(AMDPlayerScreen.objProgressBar, "Progress bar");
			click(AMDPlayerScreen.objThreeDotsOnPlayer, "Three dots option");
			verifyElementExist(AMDPlayerScreen.objQuality, "Video Quality option");
			click(AMDPlayerScreen.objQuality, "Video Quality option");
			verifyElementExist(AMDPlayerScreen.objSelectedQualityOption, "Selected video quality option menu");
			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objQualityOptions)) {
				logger.error(
						"AMA2-8193 : Quality options fails to display post scrolling the progressive bar till the end while playing the Downloaded content");
				extent.extentLoggerFail("Downloads",
						"AMA2-8193 : Quality options fails to display post scrolling the progressive bar till the end while playing the Downloaded content");
			} else {
				logger.info(
						"Quality options is displayed post scrolling the progressive bar till the end while playing the Downloaded content");
				extent.extentLoggerPass("Downloads",
						"Quality options is displayed post scrolling the progressive bar till the end while playing the Downloaded content");
			}
			Back(2);
		}
	}
/**
 * Validation of content playback
 * @param userType
 * @throws Exception
 */
	public void contentPlayBackValidation(String userType) throws Exception {
		// AMA2-9343
		extent.HeaderChildNode("AMA2-9343");
		logger.info("AMA2-9343");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, "Bhagonwali", "Search bar");
		hideKeyboard();
		click(AMDSearchScreen.objEpsiodesTab, "Episodes");
		click(AMDDownloadPage.objsearchresultFirst, "Searched Show");
		waitTime(5000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		waitForElementDisplayed(AMDPlayerScreen.objPause, 15);
		// click(AMDPlayerScreen.objPlayerScreen,"Player screen");
		if (verifyElementExist(AMDPlayerScreen.objPause, "Pause icon")) {
			logger.info("Content playback is initiated");
			extent.extentLoggerPass("Search", "Content playback is initiated");
		} else {
			logger.error("Content playback is Not initiated");
			extent.extentLoggerFail("Eduauraa", "Content playback is Not initiated");
		}

	}
/**
 * Method to find the Tray
 * @param byLocator
 * @param trayname
 */
	public void findParticularTray(By byLocator, String trayname) {
		for (int i = 0; i < 15; i++) {
			if (!(verifyIsElementDisplayed(byLocator))) {
				Swipe("UP", 1);
			} else {
				PartialSwipe("UP", 1);
				logger.info(trayname + " tray is located");
				extent.extentLoggerPass("Tray", trayname + " tray is located");
				break;
			}
		}
	}
/**
 * validating th eplayback of first episode content
 * @param userType
 * @throws Exception
 */
	public void firstEpisodeContentPlayback(String userType) throws Exception {
		// AMA2-9448
		extent.HeaderChildNode("AMA2-9448");
		logger.info("AMA2-9448");
		if (userType.contentEquals("Guest")) {
			click(AMDHomePage.objHomeBtn, "Home");
			click(AMDSearchScreen.objSearchIcon, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, "Rangbaaz" + "\n", "Search bar");
			waitTime(2000);
			hideKeyboard();
			click(AMDDownloadPage.objsearchresultFirst, "Searched Show");
			waitTime(5000);
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			click(AMDPlayerScreen.objPauseIcon, "Pause icon");
			click(AMDPlayerScreen.ObjUpNextFirstContent, "Up Next content card");
			waitTime(5000);
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			click(AMDPlayerScreen.objPauseIcon, "Pause icon");
			verifyElementExist(AMDConsumptionScreen.objContentName, "Content name");
			String text = findElement(AMDConsumptionScreen.objContentName).getText();
			System.out.println(text);
			verifyElementPresentAndClick(AMDConsumptionScreen.objGetPremiumCTA, "Buy Plan CTA");
			verifyElementPresentAndClick(AMDConsumptionScreen.objLoginCTA, "Login CTA in subscribe popup");
			loginAfterLogout("SubscribedUser");
			waitTime(5000);
			String text1 = findElement(AMDConsumptionScreen.objContentName).getText();
			System.out.println(text1);
			if (text.equalsIgnoreCase(text1)) {
				logger.info(
						"Appropriate episode playback is initiated when user login with registered/paid user from subscription popup");
				extent.extentLoggerPass("consumption",
						"Appropriate episode playback is initiated when user login with registered/paid user from subscription popup");
			} else {
				logger.error(
						"[AMA2-9448] First episode content playback is getting initiated instead of the actual episode playback, Post login from subscription popup");
				extent.extentLoggerFail("consumption",
						" [AMA2-9448]  First episode content playback is getting initiated instead of the actual episode playback, Post login from subscription popup");
			}
			Back(1);
			click(AMDHomePage.objMoreMenuBtn, "More menu");
			Swipe("UP", 2);
			click(AMDMoreMenu.objLogout, "Logout");
			click(AMDMoreMenu.objLogoutBtn, "Logout Button");
			Back(1);

		} else {
			logger.info("AMA2-9448 : Not applicable for " + userType);
			extent.extentLogger("consumption", "AMA2-9448 : Not applicable for " + userType);
		}
	}
/**
 * Login functionality
 * @param userType
 * @throws Exception
 */
	public void loginThroughAnyentryPointDefect(String userType) throws Exception {
		// AMA2-7899
		extent.HeaderChildNode("AMA2-7899");
		logger.info("AMA2-7899");
		if (userType.contentEquals("Guest")) {
			selectContentLang_MoreMenu2("Marathi");
			click(AMDHomePage.objMoreMenuBtn, "More menu");
			click(AMDMoreMenu.objSettings, "Settings");
			Swipe("UP", 1);
			click(AMDMoreMenu.objDisplayLang, "Display language option");
			SelectDisplayLanguage("Kannada");
			click(AMDOnboardingScreen.objDiplay_ContinueBtn, "Continue button");
			Back(1);
			Swipe("DOWN", 1);
			// click(AMDMoreMenu.objProfile,"Profile");
			loginAfterLogout("SubscribedUser");
			waitTime(3000);
			if (verifyElementIsNotDisplayed(AMDHomePage.objHomeTab)) {
//	    		 verifyElementExist(AMDHomePage.errortitle, "Error message");
//	    		 String text= findElement(AMDHomePage.errortitle).getText();
//	    		 System.out.println(text+ " message is displayed");
//	    		 logger.info(text+ " message is displayed");
				logger.error(
						"AMA2-7899 :User Fails to login through all entry points, post selecting any display language (except English) and content languages");
				extent.extentLoggerFail("Login",
						"AMA2-7899 : User Fails to login through all entry points, post selecting any display language (except English) and content languages");
			} else {
				logger.info("User is logged-in from any entry point for all display languages.");
				extent.extentLogger("Login", "User is logged-in from any entry point for all display languages.");
				click(AMDHomePage.objMoreMenuBtn, "More menu");
				Swipe("UP", 2);
				click(AMDMoreMenu.objLogout, "Logout");
				click(AMDMoreMenu.objLogoutBtn, "Logout Button");
				Back(1);
			}
		} else {
			logger.info("AMA2-7899 : Not applicable for " + userType);
			extent.extentLogger("Login", "AMA2-7899 : Not applicable for " + userType);
		}
	}
/**
 * validating the player controls
 * @param userType
 * @throws Exception
 */
	public void playerControlDefect(String userType) throws Exception {
		// AMA2-9143
		extent.HeaderChildNode("AMA2-9143");
		logger.info("AMA2-9143");
		click(AMDSearchScreen.objSearchIcon, "Search icon");
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, "Kurukshetra" + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
		click(AMDMoreMenu.objSearchResult("Kurukshetra"), "Search result");
		if (!userType.contains("SubscribedUser")) {
			waitTime(5000);
			registerPopUpClose();
			completeProfilePopUpClose(userType);
			LoadingInProgress();
			adPlay();
			registerPopUpClose();
			waitTime(5000);
//				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		}
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		click(AMDPlayerScreen.objFullscreenIcon, "Maximize Icon");
		// click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		verifyElementPresentAndClick(AMDPlayerScreen.objShareIconOnPlayer, "Share icon");
		verifyElementExist(AMDMoreMenu.objShareOptions, "Share options");
		Back(1);
		if (verifyIsElementDisplayed(AMDPlayerScreen.objPlayer)) {
			logger.error("[AMA2-9143] Player controls fails to auto hide");
			extentLoggerFail("Player controls Auto hide", "[AMA2-9143] Player controls fails to auto hide");
		} else {
			logger.info("Player controls auto hide");
			extentLoggerPass("Player controls Auto hide", "Player controls auto hide");
			click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
		}
		// click(AMDPlayerScreen.objLandscapePlayerScreen, "Player screen");
		verifyElementPresentAndClick(AMDPlayerScreen.objNextIcon, "Next Icon in Landscape");
		waitTime(3000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		if (verifyIsElementDisplayed(AMDPlayerScreen.objPauseIcon)) {
			logger.info(
					"Player is initiated properly without any blank screen post sharing the content in landscape mode");
			extentLoggerPass("Player controls Auto hide",
					"Player should is initiated properly without any blank screen post sharing the content in landscape mode");
		} else {
			logger.error(
					"[AMA2-9143] Blank screen is displayed on the player upon tapping next button on the player post sharing the content in landscape mode");
			extentLoggerFail("Player controls Auto hide",
					"[AMA2-9143] Blank screen is displayed on the player upon tapping next button on the player post sharing the content in landscape mode");
		}
	}
/**
 * Validating th error message displayed on player screen
 * @param userType
 * @throws Exception
 */
	public void somethingWentWrongDefectValidation(String userType) throws Exception {
		// AMA2-11275
		extent.HeaderChildNode("AMA2-11275");
		logger.info("AMA2-11275");
		click(AMDSearchScreen.objSearchIcon, "Search icon");
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, "Jeet Gayi Toh Piyaa Morre - Episode 57" + "\n", "Search bar");
		waitTime(2000);
		hideKeyboard();
		click(AMDDownloadPage.objsearchresultFirst, "Search result");
		if (!userType.contains("SubscribedUser")) {
			waitTime(5000);
			registerPopUpClose();
			completeProfilePopUpClose(userType);
			LoadingInProgress();
			adPlay();
			registerPopUpClose();
			waitTime(5000);
		}
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		if (verifyIsElementDisplayed(AMDPlayerScreen.objPauseIcon)) {
			logger.info("Content playback is initiated for searched content");
			extentLoggerPass("Player", "Content playback is initiated for searched content");
		} else {
			logger.error("[AMA2-11275] Failed to play the searched content");
			extentLoggerFail("Player", "[AMA2-11275] Failed to play the searched content");
		}

	}
/**
 * Verifying the functionality of previous icon for premium content
 * @param userTyep
 * @throws Exception
 */
	public void previousIconForPremiumContent(String userTyep) throws Exception {
		// AMA2-11542
		extent.HeaderChildNode("AMA2-11542");
		logger.info("AMA2-11542");
		if (!userType.contains("SubscribedUser")) {
			click(AMDSearchScreen.objSearchIcon, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, "Zee Bangla Cinema" + "\n", "Search bar");
			waitTime(2000);
			hideKeyboard();
//	 			waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
			click(AMDDownloadPage.objsearchresultFirst, "Search result");
			if (verifyElementExist(AMDConsumptionScreen.objSkipctaOnPlayer, "Skip CTA")) {
				click(AMDConsumptionScreen.objSkipctaOnPlayer, "Skip CTA");
				waitTime(4000);
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
				click(AMDPlayerScreen.objPauseIcon, "Pause icon");
				verifyElementExist(AMDLiveTVScreen.objLiveTV, "Live icon on player");
				boolean value = verifyElementExist(AMDPlayerScreen.objNextIcon, "Previous icon");
				if (value == true) {
					logger.error("[AMA2-11542] Previous icon is displayed on player for Premium Live TV contents");
					extentLoggerFail("Player",
							"[AMA2-11542] Previous icon is displayed on player for Premium Live TV contents");
				} else {
					logger.info("Previous icon is not displayed on player for Live TV contents");
					extentLoggerPass("Player", "Previous icon is not displayed on player for Live TV contents");
				}

			} else {
				logger.info("Skip CTA is not displayed on player");
				extentLogger("Player", "Skip CTA is not displayed on player");
			}
			BackToLandingScreen();
		} else {
			logger.info("AMA2-11542 : Not applicable for " + userType);
			extent.extentLogger("Login", "AMA2-11542 : Not applicable for " + userType);
		}

	}
/**
 * Subscription functionality
 * @param userType
 * @throws Exception
 */
	
	public void subscriptionRevamp(String userType) throws Exception {
		// AMA2-11279
		extent.HeaderChildNode("AMA2-11279");
		logger.info("AMA2-11279");
		if (userType.contains("Guest")) {
			relaunch(true);
			accessDeviceLocationPopUp("Allow", userType);
			navigateToIntroScreen_DisplaylangScreen();
			verifyElementExist(AMDOnboardingScreen.objSubscribeNowBtn, "Buy Plan CTA");
			click(AMDOnboardingScreen.objSubscribeNowBtn, "Buy Plan CTA");
			loginInSusbscribeScreen("NonSubscribedUser");
			verifyElementExist(AMDSubscibeScreen.objMakePaymentScreen, "Make payment screen");
			Back(1);
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Pack selection screen");
			Back(1);
			boolean value = verifyElementIsNotDisplayed(AMDOnboardingScreen.objBrowseForFreeBtn);
			System.out.println(value);
			if (value == true) {
				logger.info("User is navigated to Home landing screen as a logged in user");
				extentLoggerPass("Player", "User is navigated to Home landing screen as a logged in user");
				click(AMDHomePage.objMoreMenuBtn, "More menu");
				Swipe("UP", 2);
				click(AMDMoreMenu.objLogout, "Logout");
				click(AMDMoreMenu.objLogoutBtn, "Logout Button");
				BackToLandingScreen();
			} else {
				logger.error(
						"[AMA2-11279] On tapping device back button once user navigate back to pack selection screen & tapping device back again its navigating back to Intro screen");
				extentLoggerFail("Subscribe",
						"[AMA2-11279] On tapping device back button once user navigate back to pack selection screen & tapping device back again its navigating back to Intro screen");
				zeeApplicasterLoginForSettings(userType);
			}

		} else {
			logger.info("AMA2-11279 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-11279 : Not applicable for " + userType);
		}

		// AMA2-11311
		extent.HeaderChildNode(
				"AMA2-11311 : Subscribe icon on header fails to hide on all landing screen post logging in with the subscribed account ");
		logger.info(
				"AMA2-11311 : Subscribe icon on header fails to hide on all landing screen post logging in with the subscribed account ");
		if (userType.contains("Guest")) {
			verifyElementPresentAndClick(AMDHomePage.objGetPremium, "Buy Plan Header");
			loginInSusbscribeScreen("SubscribedUser");
			verifyElementPresentAndClick(AMDSubscibeScreen.objexplorePremiumCTA, "Explore Buy Plan CTA");
			boolean booleanvalue = verifyElementIsNotDisplayed(AMDHomePage.objGetPremium);
			if (booleanvalue == true) {
				logger.info("Buy Plan icon is not displayed on the header post login as subscribed user");
				extentLoggerPass("Subscribe",
						"Buy Plan icon is not displayed on the header post login as subscribed user");
			} else {
				logger.error(
						"[AMA2-11311] Buy Plan icon on the header is not getting hide post logging into the subscribed account");
				extentLoggerFail("Subscribe",
						"[AMA2-11311] Buy Plan icon on the header is not getting hide post logging into the subscribed account");
			}
			click(AMDHomePage.objMoreMenuBtn, "More menu");
			Swipe("UP", 2);
			click(AMDMoreMenu.objLogout, "Logout");
			click(AMDMoreMenu.objLogoutBtn, "Logout Button");
			BackToLandingScreen();
		} else {
			logger.info("AMA2-11311 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-11311 : Not applicable for " + userType);
		}

		// AMA2-11572
		extent.HeaderChildNode(
				"AMA2-11572 : Only Explore Premium Text is displayed in Plan selection if user reaches Plan selection Screen without internet");
		logger.info(
				"AMA2-11572 : Only Explore Premium Text is displayed in Plan selection if user reaches Plan selection Screen without internet");
		if (!userType.contains("SubscribedUser")) {
			verifyElementPresentAndClick(AMDHomePage.objGetPremium, "Buy Plan Header");
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscription screen");
			// Turning wifi off
			TurnOFFWifi();
			if (getOEMName.equalsIgnoreCase("Sony")) {
				wifi_TurnOFFnON();
			}
			waitTime(3000);
			Back(1);
			click(AMDHomePage.objGetPremium, "Get Premium Header");
			boolean value3 = verifyElementIsNotDisplayed(AMDOfflineScreen.objTryAgain);
			boolean value4 = verifyElementIsNotDisplayed(AMDOfflineScreen.objYouAreOffline);
			if (value3 | value4) {
				logger.error(
						"[AMA2-11572] User is Unable to see the message Your arent connected to the internet along with functional Retry button");
				extentLoggerFail("offline",
						"[AMA2-11572] User is Unable to see the message Your arent connected to the internet along with functional Retry button");
			} else {
				logger.info(
						"User is able to see the message Your arent connected to the internet along with functional Retry button");
				extent.extentLoggerPass("offline",
						"User is able to see the message Your arent connected to the internet along with functional Retry button");
			}
			// Turning wifi ON
			TurnONWifi();
			if (getOEMName.equalsIgnoreCase("Sony")) {
				wifi_TurnOFFnON();
			}
			waitTime(3000);
			Back(1);
		} else {
			logger.info("AMA2-11572 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-11572 : Not applicable for " + userType);
		}

		// AMA2-11278
		extent.HeaderChildNode(
				"AMA2-11278 :In differential amount negative round off value is being displayed after INR while upgrading to 499");
		logger.info(
				"AMA2-11278 :In differential amount negative round off value is being displayed after INR while upgrading to 499");
		relaunch(true);
		accessDeviceLocationPopUp("Allow", userType);
		navigateToIntroScreen_DisplaylangScreen();
		click(AMDOnboardingScreen.objSubscribeNowBtn, "Buy Plan CTA");
		verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscription screen");
		click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
		verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
		hideKeyboard();
		type(AMDLoginScreen.objEmailIdField, "9404252795", "Email Field");
		click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
		verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Password field");
		hideKeyboard();
		type(AMDLoginScreen.objPasswordField, "111222", "Password field");
		click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
		waitTime(3000);
		click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Upgrade CTA");
		if (verifyElementDisplayed(AMDSubscibeScreen.objRoundOffValue)) {
			verifyElementExist(AMDSubscibeScreen.objRoundOffValue, "Round off value");
			String textValue = findElement(AMDSubscibeScreen.objRoundOffValue).getText();
			if (textValue.contains("-")) {
				logger.error(
						"[AMA2-11278] In differential amount negative round off value is being displayed after INR while upgrading to 499");
				extent.extentLoggerFail("Subscribe",
						"[AMA2-11278] In differential amount negative round off value is being displayed after INR while upgrading to 499");
			} else {
				logger.info(
						"In Differential amount section minus round off value is not displayed while upgrading to 499");
				extent.extentLoggerPass("Subscribe",
						"In Differential amount section minus round off value is not displayed while upgrading to 499");
			}
		} else {
			logger.info("Round Off value is not displayed");
		}
		Back(2);
		click(AMDHomePage.objMoreMenuBtn, "More menu");
		Swipe("UP", 2);
		click(AMDMoreMenu.objLogout, "Logout");
		click(AMDMoreMenu.objLogoutBtn, "Logout Button");
		Swipe("DOWN", 2);
		click(AMDMoreMenu.objProfile, "Profile");
		zeeApplicasterLoginForSettings(userType);

		// AMA2-11873
		extent.HeaderChildNode(
				"AMA2-11873 :On Playing eduauraa content user is getting Get Premium CTA on Player post content finishes");
		logger.info(
				"AMA2-11873 :On Playing eduauraa content user is getting Get Premium CTA on Player post content finishes");
		if (!userType.contains("SubscribedUser")) {
			selectTopNavigationTab("Eduauraa");
			waitForElementAndClickIfPresent(AMDHomePage.objPlayBtn, 10, "Eduauraa content");
			waitTime(3000);
			verifyElementExist(AMDConsumptionScreen.objClaimOfferCTA, "Claim Offer CTA");
			scrubProgressBarTillEnd(AMDPlayerScreen.objProgressBar);
			boolean value4 = verifyElementExist(AMDConsumptionScreen.objGetPremiumCTA, "Buy Plan CTA on player");
			boolean value5 = verifyElementExist(AMDConsumptionScreen.objSkipctaOnPlayer, "Skip CTA on player");
			if ((value4 == true) & (value5 == true)) {
				logger.error(
						"[AMA2-11873] User is getting 'To watch this Premium content “Buy Plan CTA“ and Skip' for Eduauraa content");
				extent.extentLoggerFail("Subscribe",
						"[AMA2-11873] User is getting 'To watch this Premium content “Buy Plan CTA“ and Skip' for Eduauraa content");
			} else {
				logger.info(
						"User is Not getting 'To watch this Premium content “Buy Plan CTA“ and Skip' for Eduauraa content");
				extent.extentLoggerPass("Subscribe",
						"User is Not getting 'To watch this Premium content “Buy Plan CTA“ and Skip' for Eduauraa content");
			}
			Back(1);
			click(AMDHomePage.objHomeBottomBtn, "Home button");
		} else {
			logger.info("AMA2-11873 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-11873 : Not applicable for " + userType);
		}

		// AMA2-11883
		extent.HeaderChildNode(
				"AMA2-11883 :Actual amount' is displayed instead of 'Discounted amount' on the make payment screen, Post applying the Promo codes");
		logger.info(
				"AMA2-11883 :Actual amount' is displayed instead of 'Discounted amount' on the make payment screen, Post applying the Promo codes");
		if (!userType.contains("SubscribedUser")) {
			verifyElementPresentAndClick(AMDHomePage.objGetPremium, "Buy Plan Header");
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscription screen");
			verifyElementExist(AMDSubscibeScreen.objPlanPriceValue, "Plan Price value");
			Swipe("UP", 1);
			verifyElementPresentAndClick(AMDSubscibeScreen.objHaveACodeCTA, "Have a code");
			verifyElementPresentAndClick(AMDSubscibeScreen.objEnterACodeEditFiled, "Enter a code field");
			hideKeyboard();
			type(AMDSubscibeScreen.objEnterACodeEditFiled, "Testz40", "Enter a code field");
			verifyElementPresentAndClick(AMDSubscibeScreen.objApplyOnHaveACodescreen, "Apply CTA");
			verifyElementExist(AMDSubscibeScreen.objPlanPriceValue, "Discounted Plan Price value");
			String pricevalue1 = findElement(AMDSubscibeScreen.objPlanPriceValue).getText();
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
			if (userType.equals("Guest")) {
				loginInSusbscribeScreen("NonSubscribedUser");
			}
			waitTime(3000);
			verifyElementExist(AMDSubscibeScreen.objMakePaymentScreen, "Payment Screen");
			verifyElementExist(AMDSubscibeScreen.objPriceValueOnPaymentScreen, "Plan price om payment screen");
			String pricevalue2 = findElement(AMDSubscibeScreen.objPriceValueOnPaymentScreen).getText();
			if (pricevalue1.equals(pricevalue2)) {
				logger.info(
						"The discounted amount is displayed on the make a payment screen, Post applying the Promo code");
				extent.extentLoggerPass("Subscribe",
						"The discounted amount is displayed on the make a payment screen, Post applying the Promo code");
			} else {
				logger.error(
						"[AMA2-11883]'Actual amount' is displayed instead of 'Discounted amount' on the make payment screen");
				extent.extentLoggerFail("Subscribe",
						"[AMA2-11883] 'Actual amount' is displayed instead of 'Discounted amount' on the make payment screen");
			}
			Back(2);
			if (userType.equals("Guest")) {
				click(AMDHomePage.objMoreMenuBtn, "More menu");
				Swipe("UP", 2);
				click(AMDMoreMenu.objLogout, "Logout");
				click(AMDMoreMenu.objLogoutBtn, "Logout Button");
				Back(1);
			}
		} else {
			logger.info("AMA2-11883 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-11883 : Not applicable for " + userType);
		}
	}
/**
 * validation of Rent NOw CTA for TVOD content
 * @param userType
 * @throws Exception
 */
	public void rentNowCTAforTVODcontent(String userType) throws Exception {
		// AMA2-11447
		extent.HeaderChildNode("AMA2-11447");
		logger.info("AMA2-11447");
		if (userType.contains("Guest")) {
			click(AMDHomePage.objHomeBtn, "Home");
			click(AMDSearchScreen.objSearchIcon, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, "Retaliation" + "\n", "Search bar");
			waitTime(2000);
			hideKeyboard();
			click(AMDDownloadPage.objsearchresultFirst, "Searched Show");
			boolean value = verifyElementIsNotDisplayed(AMDConsumptionScreen.objRentNowCTABelowthePlayer);
			if (value == true) {
				logger.info("'Rent Now' cta is display below the player on playing TVOD content");
				extentLoggerPass("Player", "'Rent Now' cta should is display below the player on playing TVOD content");
			} else {
				logger.error("[AMA2-11447] 'Rent Now' cta fails to display below the player on playing TVOD content");
				extentLoggerFail("Subscribe",
						"[AMA2-11447] 'Rent Now' cta fails to display below the player on playing TVOD content");
			}

		} else {
			logger.info("AMA2-11447 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-11447 : Not applicable for " + userType);
		}

	}
/**
 * Login in Subscribe screen
 * @param userType
 * @throws Exception
 */
	public void loginInSusbscribeScreen(String userType) throws Exception {
		extent.HeaderChildNode("LogIn as " + userType);
		System.out.println("\nLogIn as " + userType);
		if (userType.contentEquals("NonSubscribedUser")) {
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");

			// verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup,"Subscription
			// screen");
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
			waitTime(3000);
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			hideKeyboard();
			waitTime(3000);
			type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
			waitTime(3000);
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
			waitTime(3000);
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Password field");
			hideKeyboard();
			waitTime(3000);
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			waitTime(3000);
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
			waitTime(4000);
		}
		if (userType.contentEquals("SubscribedUser")) {

			String SubscribedUsername = getParameterFromXML("SubscribedUserName");
			String SubscribedPassword = getParameterFromXML("SubscribedPassword");

			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscription screen");
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			hideKeyboard();
			type(AMDLoginScreen.objEmailIdField, SubscribedUsername, "Email Field");
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Password field");
			hideKeyboard();
			type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
			waitTime(4000);
		}
	}
/**
 * Validation of TVOD combo offer screen
 * @param pUserType
 * @throws Exception
 */
	public void tVODComboOfferScreenValidation(String pUserType) throws Exception {
		extent.HeaderChildNode("Verify Combo Offer screen");
		if (!(pUserType.equalsIgnoreCase("SubscribedUser"))) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
			verifyElementPresentAndClick(AMDMoreMenu.objBuySubscription, "Buy Subscription");
			waitTime(2000);
			verifyElementPresent(AMDSubscibeScreen.objPremiumBadge, "Premium Badge");
			verifyElementPresent(AMDSubscibeScreen.objPlanSelectionBadge, "Plan selection badge");
			verifyElementPresent(AMDSubscibeScreen.objPlanHeader("Radhe Combo Offer"), "Radhe Combo Offer");
			verifyElementPresent(AMDSubscibeScreen.objLinkedlabel("Radhe + 1 Year ZEE5 Premium"),
					"Radhe + 1 Year ZEE5 Premium");
			verifyElementPresent(AMDSubscibeScreen.objLinkedlabel("Blockbuster movies"), "Blockbuster movies");
			verifyElementPresent(AMDSubscibeScreen.objLinkedlabel("Web Series"), "Web Series");
			verifyElementPresent(AMDSubscibeScreen.objLinkedlabel("Before TV"), "Before TV");
			verifyElementPresent(AMDSubscibeScreen.objHelpIcons, "Help Icons");
			verifyElementPresent(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue Button");
		} else {
			logger.info("Combo offer plan is Not applicable for " + pUserType);
			extentLogger("Combo offer plan", "Combo offer plan is Not applicable for " + pUserType);
		}
	}
/**
 * Validation of TVOD content without active rental
 * @param userType
 * @param TVODContent
 * @throws Exception
 */
	public void validationOfTVODContentWithOutActiveRental(String userType, String TVODContent) throws Exception {

		click(AMDHomePage.objMoviesTab, "Movie tab");
		// Trailer CTA on carousel
		boolean booleanvalue = waitForElementDisplayed(AMDTVODComboOffer.objTrailerCTAonCarousel, 5);
		if (booleanvalue) {
			logger.info("Trailer CTA on carousel banner for TVOD content is displayed");
			extent.extentLoggerPass("Carousel", "Trailer CTA on carousel banner for TVOD content is displayed");
		} else {
			logger.error("Trailer CTA on carousel banner for TVOD content is NOT displayed");
			extent.extentLoggerFail("Carousel", "Trailer CTA on carousel banner for TVOD content is NOTdisplayed");
		}

		// Rent Now CTA on carousel
		boolean value = waitForElementDisplayed(AMDTVODComboOffer.objRentNowCTAonCarousel, 10);
		if (value) {
			logger.info("Rent Now CTA on carousel banner for TVOD content is displayed");
			extent.extentLoggerPass("Carousel", "Rent Now CTA on carousel banner for TVOD content is displayed");
		} else {
			logger.error("Rent Now CTA on carousel banner for TVOD content is NOT displayed");
			extent.extentLoggerFail("Carousel", "Rent Now CTA on carousel banner for TVOD content is NOTdisplayed");
		}
		// clicking on Trailer CTA from Carousel

		waitForElementDisplayed(AMDTVODComboOffer.objTrailerCTAonCarousel, 10);
		click(AMDTVODComboOffer.objTrailerCTAonCarousel, "Trailer CTA on carousel");
		waitTime(3000);
		if (verifyElementExist(AMDConsumptionScreen.objContentName, "Content name in Consumption screen")) {
			logger.info(
					"User is navigated to Consumption screen on clicking Trailer CTA from carousel banner for TVOD content is displayed");
			extent.extentLoggerPass("Consumption Screen",
					"User is navigated to Consumption screen on clicking Trailer CTA from  carousel banner for TVOD content is displayed");
		} else {
			logger.error(
					"User Fails navigate to Consumption screen on clicking Trailer CTA from carousel banner for TVOD content");
			extent.extentLoggerFail("Carousel",
					"User Fails navigate to Consumption screen on clicking Trailer CTA from carousel banner for TVOD content");
		}
		Back(1);

		// clicking on Rent Now CTA from Carousel

		waitForElementDisplayed(AMDTVODComboOffer.objRentNowCTAonCarousel, 10);
		click(AMDTVODComboOffer.objRentNowCTAonCarousel, "Rent Now CTA on carousel");
		waitTime(3000);
		if (verifyElementDisplayed(AMDConsumptionScreen.objContentName)) {
			logger.info(
					"User is navigated to Consumption screen on clicking Rent Now CTA from carousel banner for TVOD content is displayed");
			extent.extentLoggerPass("Consumption Screen",
					"User is navigated to Consumption screen on clicking Trailer CTA from  carousel banner for TVOD content is displayed");
		} else {
			logger.error(
					"User Fails navigate to Consumption screen on clicking Rent Now CTA from carousel banner for TVOD content");
			extent.extentLoggerFail("Carousel",
					"User Fails navigate to Consumption screen on clicking Rent Now CTA from carousel banner for TVOD content");
		}

		waitTime(8000);
		// Rent Now CTA on Consumption screen

		verifyElementExist(AMDTVODComboOffer.objRentNowTextOnPlayer,
				"Watch full content by renting it now text on player");
		if (verifyElementDisplayed(AMDTVODComboOffer.objRentNowCTAOnPlayer)) {
			logger.info("Rent Now CTA on palyer is displayed");
			extent.extentLoggerPass("Consumption Screen", "Rent Now CTA on palyer is displayed");
		} else {
			logger.error("Rent Now CTA on palyer is NOT displayed");
			extent.extentLoggerFail("Consumption Screen", "Rent Now CTA on palyer is NOt displayed");
		}
		if (verifyElementDisplayed(AMDTVODComboOffer.objRentNowCTABelowPlayer)) {
			logger.info("Rent Now CTA below the palyer is displayed");
			extent.extentLoggerPass("Consumption Screen", "Rent Now CTA below the palyer is displayed");
		} else {
			logger.error("Rent Now CTA below the palyer is NOT displayed");
			extent.extentLoggerFail("Consumption Screen", "Rent Now CTA below the palyer is NOt displayed");
		}

		// Radhe combo offer widget on Consumption screen

		if (verifyElementDisplayed(AMDTVODComboOffer.objComboOfferWidgetBelowThePlayer)) {
			logger.info("Combo offer widget below the palyer is displayed");
			extent.extentLoggerPass("Consumption Screen", "Combo offer widget below the palyer is displayed");
		} else {
			logger.error("Combo offer widget below the palyer is NOT displayed");
			extent.extentLoggerFail("Consumption Screen", "Combo offer widget below the palyer is NOt displayed");
		}

		verifyElementExist(AMDTVODComboOffer.objHowItWorksCTA, "How it works CTA");
		click(AMDTVODComboOffer.objHowItWorksCTA, "How it works CTA");
		waitTime(2000);
		verifyElementExist(AMDTVODComboOffer.objQandAModelWindow, "Q&A model window");
		Back(1);

		// validate Combo offer page
		// on clicking Rent Now CTA on the player
		click(AMDTVODComboOffer.objRentNowCTAOnPlayer, "Rent Now CTA on Player");
		if (verifyElementDisplayed(AMDTVODComboOffer.obComboOfferScreen)) {
			verifyElementExist(AMDTVODComboOffer.objPayLessWatchMoreText, "'Pay less,Watch more' text");
			logger.info("Combo offer page is displayed on clicking Rent Now CTA on the player");
			extent.extentLoggerPass("Consumption Screen",
					"Combo offer page is displayed on clicking Rent Now CTA on the player");
		} else {
			logger.error("Combo offer page is NOT displayed on clicking Rent Now CTA on the player");
			extent.extentLoggerFail("Consumption Screen",
					"Combo offer page is NOT displayed on clicking Rent Now CTA on the player");
		}
		Back(1);
		// on clicking Rent Now CTA below the player
		click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA Below the Player");
		if (verifyElementDisplayed(AMDTVODComboOffer.obComboOfferScreen)) {
			verifyElementExist(AMDTVODComboOffer.objPayLessWatchMoreText, "'Pay less,Watch more' text");
			logger.info("Combo offer page is displayed on clicking Rent Now CTA Below the player");
			extent.extentLoggerPass("Consumption Screen",
					"Combo offer page is displayed on clicking Rent Now CTA Below the player");
		} else {
			logger.error("Combo offer page is NOT displayed on clicking Rent Now CTA Below the player");
			extent.extentLoggerFail("Consumption Screen",
					"Combo offer page is NOT displayed on clicking Rent Now CTA Below the player");
		}
		Back(1);
		// on clicking Know more from Combo offer widget below the player
		verifyElementPresentAndClick(AMDTVODComboOffer.objKnowMoreCTAOnWidget, "'Know more' CTA on combo offer widget");
		if (verifyElementDisplayed(AMDTVODComboOffer.obComboOfferScreen)) {
			verifyElementExist(AMDTVODComboOffer.objPayLessWatchMoreText, "'Pay less,Watch more' text");
			logger.info(
					"Combo offer page is displayed on clicking 'Know More CTA' from combo offer widget below the player");
			extent.extentLoggerPass("Consumption Screen",
					"Combo offer page is displayed on clicking 'Know More CTA' from combo offer widget below the player");
		} else {
			logger.error(
					"Combo offer page is NOT displayed on clicking 'Know More CTA' from combo offer widget below the player");
			extent.extentLoggerFail("Consumption Screen",
					"Combo offer page is NOT displayed on clicking 'Know More CTA' from combo offer widget below the player");
		}

		validationOfcomboOfferPage();
	}

/**
 * @Note : This method is used for the validation of the combo offer page 
 * @throws Exception
 */
	@SuppressWarnings("unused")
	public void validationOfcomboOfferPage() throws Exception {
		verifyElementExist(AMDTVODComboOffer.objPosterOfMovieContent, "Poster of Movie Content");
		verifyElementExist(AMDTVODComboOffer.objComboOfferPlan, "Combo offer plan");
		verifyElementExist(AMDTVODComboOffer.objOnlyRentMoviePlan, "Only Rent Movie plan");
		boolean value = findElement(AMDTVODComboOffer.objDefaultComboOfferPlan).isEnabled();
		if (value) {
			verifyElementExist(AMDTVODComboOffer.objBuyComboOfferCTAOnComboOfferPage, "Buy combo CTA");
			logger.info("Radhe combo plan is selected by default");
			extent.extentLoggerPass("Combo offer Screen", "Radhe combo plan is selected by default");
		} else {
			logger.error("Radhe combo plan is NOT selected by default");
			extent.extentLoggerFail("Combo offer Screen", "Radhe combo plan is NOT selected by default");
		}
		click(AMDTVODComboOffer.objOnlyRentMoviePlan, "Only Rent Movie plan");
		boolean value2 = findElement(AMDTVODComboOffer.ObjOnlyRentMoviePlanSelect).isEnabled();
		if (value) {
			verifyElementExist(AMDTVODComboOffer.objRentMovieCTAonComboOfferPage, "Rent Movie CTA");
			logger.info("Rent Movie CTA is displayed on selecting the Only Rent Movie plan");
			extent.extentLoggerPass("Combo offer Screen",
					"Rent Movie CTA is displayed on selecting the Only Rent Movie plan");
		} else {
			logger.error("Rent Movie CTA is NOT displayed on selecting the Only Rent Movie plan");
			extent.extentLoggerFail("Combo offer Screen",
					"Rent Movie CTA is NOT displayed on selecting the Only Rent Movie plan");
		}
	}
/**
 * @Note This method is used for the verifying the ZEEPlex content presence.
 * @param pTitle
 * @throws Exception
 */
	public void searchZEEPLEXContentAndPlay(String pTitle) throws Exception {
		extent.HeaderChildNode("Searching for ZEEPLEX content");
		System.out.println("\nSearching for ZEEPLEX content");

		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, pTitle + "\n", "Searchbar");
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 20);

		if (!verifyIsElementDisplayed(AMDSearchScreen.objFirstSearchResult(pTitle))) {
			swipeUntilFindElement(AMDSearchScreen.objFirstSearchResult(pTitle), "UP");
		}
		click(AMDSearchScreen.objFirstSearchResult(pTitle), "Searched content");
	}
/**
 * @Note This method is used for  validation of consumption screen for ZEEPlex content. 
 * @throws Exception
 */
	public void zeePlexContentInPlayerCTAValidation() throws Exception {
		extent.HeaderChildNode("ZEEPLEX content In-player CTA Validation");
		System.out.println("\nZEEPLEX content In-player CTA Validation");

		String getCTAName = null;
		boolean flgRentExpired = false;

		waitTime(3000);
		if (verifyIsElementDisplayed(AMDPlayerScreen.objParentalPinPopUp)) {
			type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
			hideKeyboard();
			type(AMDMoreMenu.objParentalLockPin2, "2", "ParentalLockPin");
			hideKeyboard();
			type(AMDMoreMenu.objParentalLockPin3, "3", "ParentalLockPin");
			hideKeyboard();
			type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
			hideKeyboard();
			waitTime(4000);
			click(AMDPlayerScreen.objParentalPinContinue, "Continue Button");
			waitTime(4000);
		}

		verifyElementPresent(AMDPlayerScreen.objPlayer, "Consumption sreen");
		if (verifyElementPresent(AMDPlayerScreen.objInPlayerCTA, "Player CTA")) {
			getCTAName = getText(AMDPlayerScreen.objInPlayerCTA);

			if (getCTAName.equalsIgnoreCase("Watch Now")) {
				logger.info("Watch Now CTA is displayed in the player screen");
				extentLoggerPass("Watch NowCTA", "<b>WATCH NOW</b> CTA is displayed in the player screen");
			} else if (getCTAName.equalsIgnoreCase("Resume")) {
				logger.info(getCTAName + " CTA is displayed in the player screen");
				extentLoggerPass(getCTAName, "<b>RESUME</b> CTA is displayed in the player screen");
			} else if (getCTAName.equalsIgnoreCase("Rent for")) {
				logger.info(getCTAName + " CTA is displayed in the player screen");
				extentLoggerPass(getCTAName, getCTAName + " CTA is displayed in the player screen");
				flgRentExpired = true;
			}
		} else {
			logger.info("No CTA displayed in the player screen");
			extentLoggerFail("No CTA", "No CTA displayed in the player screen");
		}

		if (flgRentExpired) {
			click(AMDPlayerScreen.objRentFor, "Rent CTA");
			verifyElementPresent(AMDPlayerScreen.objZeePlexTitle, "Radhe Title");
			verifyElementPresent(AMDPlayerScreen.objZeePlexLogo, "ZEEPlex logo");
			verifyElementPresent(AMDPlayerScreen.objZeePlexValidity, "Validity");
			verifyElementPresent(AMDPlayerScreen.objZeeWatchTime, "Watch Time");
			verifyElementPresent(AMDPlayerScreen.objByRentingTerms, "By renting Terms text");

			verifyElementPresentAndClick(AMDPlayerScreen.objRentFor, "Rent for 249");
			waitTime(2000);
			paymentScreenVerification();
		}
	}
/**
 * @Note This method is used for the verification of the elements on the rental callout
 * @throws Exception
 */
	public void zeePlexContentRentNowCTAValidation() throws Exception {
		extent.HeaderChildNode("UC-3b: ZEEPLEX content validation of Rental Callout screen to Payment");
		System.out.println("\nUC-3b: ZEEPLEX content validation of Rental Callout screen to Payment");

		if (verifyElementDisplayed(AMDPlayerScreen.objPlayerTrailerText)) {
			logger.info("Trailer is played...");
			extentLoggerPass("Trailer", "Trailer is played...");

			verifyElementPresent(AMDPlayerScreen.objSubscribeButtonBelowThePlayer,
					getText(AMDPlayerScreen.objSubscribeButtonBelowThePlayer) + " CTA");
			verifyElementPresent(AMDPlayerScreen.objZeePlexIcon, "ZEEPLEX Icon below the player");

			verifyElementPresentAndClick(AMDPlayerScreen.objSubscribeButtonBelowThePlayer,
					getText(AMDPlayerScreen.objSubscribeButtonBelowThePlayer));

			verifyElementPresent(AMDPlayerScreen.objZeePlexLogo, "ZEEPLEX LOGO");
			verifyElementPresent(AMDPlayerScreen.objZeePlexTitle, getText(AMDPlayerScreen.objZeePlexTitle));
			verifyElementPresent(AMDPlayerScreen.objZeePlexValidity,
					"Validity: " + getText(AMDPlayerScreen.objZeePlexValidity));
			verifyElementPresent(AMDPlayerScreen.objZeePlexValidityDetails,
					getText(AMDPlayerScreen.objZeePlexValidityDetails));
			verifyElementPresent(AMDPlayerScreen.objZeeWatchTime,
					"WATCH TIME: " + getText(AMDPlayerScreen.objZeeWatchTime));
			verifyElementPresent(AMDPlayerScreen.objZeeWatchTimeDetails,
					getText(AMDPlayerScreen.objZeeWatchTimeDetails));

			PartialSwipe("UP", 1);
			if (verifyIsElementDisplayed(AMDPlayerScreen.objRentFor, "RENT FOR CTA")) {
				verifyElementPresentAndClick(AMDPlayerScreen.objRentFor, "Rent for CTA");
				paymentScreenVerification();
				Back(2);
			} else {
				logger.info("{JiraId: AMA2-14410} Rent for CTA is not displated");
				extentLoggerFail("Rent for", "<b>{JiraId: AMA2-14410}</b> Rent for CTA is not displated");
			}
		} else {
			boolean errText;
			waitTime(10000);
			errText = verifyElementPresent(AMDPlayerScreen.objInPlayerError, "In player Error text");

			if (errText) {
				String InPlayerMsg = getText(AMDPlayerScreen.objInPlayerError);
				logger.info(InPlayerMsg + " is displayed");
				extentLoggerPass("In-Player message", InPlayerMsg + " is displayed");

				String InPlayerCTA = getText(AMDPlayerScreen.objInPlayerCTA);
				logger.info("InPlayer CTA is displayed as " + InPlayerCTA);
				extentLoggerPass("InPlayer CTA", "In player message is displayed as " + InPlayerCTA);

				verifyElementPresentAndClick(AMDPlayerScreen.objInPlayerCTA, InPlayerCTA);

				verifyElementPresent(AMDPlayerScreen.objZeePlexLogo, "ZEEPLEX LOGO");
				verifyElementPresent(AMDPlayerScreen.objZeePlexTitle, getText(AMDPlayerScreen.objZeePlexTitle));
				verifyElementPresent(AMDPlayerScreen.objZeePlexValidity,
						"Validity: " + getText(AMDPlayerScreen.objZeePlexValidity));
				verifyElementPresent(AMDPlayerScreen.objZeePlexValidityDetails,
						getText(AMDPlayerScreen.objZeePlexValidityDetails));
				verifyElementPresent(AMDPlayerScreen.objZeeWatchTime,
						"WATCH TIME: " + getText(AMDPlayerScreen.objZeeWatchTime));
				verifyElementPresent(AMDPlayerScreen.objZeeWatchTimeDetails,
						getText(AMDPlayerScreen.objZeeWatchTimeDetails));

				verifyElementPresent(AMDPlayerScreen.objRentFor, "RENT FOR CTA");

				verifyElementPresentAndClick(AMDPlayerScreen.objRentFor, "Rent for CTA");
				paymentScreenVerification();
				Back(2);
			}
		}
	}
/**
 * @Note This method is used for the Payment  screen verification
 * @throws Exception
 */
	public void paymentScreenVerification() throws Exception {
		extent.HeaderChildNode("Payment screen Verification");
		System.out.println("\nPayment screen Verification");
		waitTime(2000);
		verifyElementPresent(AMDPlayerScreen.objMakePayment, "Payment screen");
		verifyElementPresent(AMDPlayerScreen.objLoggedIn, "Logged in text");
		String getEmail = getText(AMDPlayerScreen.objLoggedInEmail);
		if (getEmail.length() > 1) {
			logger.info("Email Id is displayed in payment screen " + getEmail);
			extentLoggerPass("Email ID", "Email Id is displayed in payment screen " + getEmail);
		}
		verifyElementExist(AMDSubscibeScreen.objOfferPlanName, getText(AMDSubscibeScreen.objOfferPlanName));
		verifyElementExist(AMDSubscibeScreen.objOfferPlanPrice, getText(AMDSubscibeScreen.objOfferPlanPrice));
	}
/**
 * @Note this method is used for validation of consumption screen and combo offer page for 99 subscribed user
 * @param tabName
 * @param contentTitle
 * @throws Exception
 */
	public void premiumUser_99(String tabName, String contentTitle) throws Exception {
		validationOfCarousalAndConsumptionPageForComboOfferContent(tabName, contentTitle);
		validationOfcomboOfferPageAndPaymentPage("99", "Upgrade");
	}
/**
 * @Note this method is used for validation of consumption screen and combo offer page for 249 subscribed user
 * @param tabName
 * @param contentTitle
 * @throws Exception
 */
	public void premiumUser_249(String tabName, String contentTitle) throws Exception {
		validationOfCarousalAndConsumptionPageForComboOfferContent(tabName, contentTitle);
		validationOfcomboOfferPageAndPaymentPage("249", "Upgrade");
	}
/**
 * @Note this method is used for validation of consumption screen and combo offer page for 299 subscribed user
 * @param tabName
 * @param contentTitle
 * @throws Exception
 */
	public void premiumUser_299(String tabName, String contentTitle) throws Exception {
		validationOfCarousalAndConsumptionPageForComboOfferContent(tabName, contentTitle);
		validationOfcomboOfferPageAndPaymentPage("299", "Upgrade");
	}
/**
 * @Note this method is used to validation Of Carousal and Consumption Page For Combo Offer Content
 * @param tabName
 * @param contentTitle
 * @throws Exception
 */
	public void validationOfCarousalAndConsumptionPageForComboOfferContent(String tabName, String contentTitle)
			throws Exception {
		extent.HeaderChildNode("Validation of Carousal and Consumption page");
		System.out.println("\nValidation of Carousal and Consumption page");
		selectTopNavigationTab(tabName);

		if (verifyElementExist(AMDHomePage.objCarouselContentTitleCard(contentTitle),
				"Carousel content: " + contentTitle)) {
			waitTime(10000);
			boolean trailerCTA = verifyElementDisplayed(
					AMDTVODComboOffer.objTrailerCTAonCarouselForContent(contentTitle));
			boolean rentCTA = verifyElementDisplayed(AMDTVODComboOffer.objRentNowCTAonCarouselForContent(contentTitle));

			// Trailer CTA from Carousel
			if (trailerCTA) {
				logger.info("Trailer CTA on carousel banner for TVOD content is displayed");
				extent.extentLoggerPass("Carousel",
						"Trailer CTA on carousel banner for " + contentTitle + " is displayed");

				waitTime(5000);
				waitForElementAndClickIfPresent(AMDTVODComboOffer.objTrailerCTAonCarouselForContent(contentTitle), 60,
						"Trailer CTA on " + contentTitle + " Carousel content");
				waitTime(3000);
				if (verifyElementExist(AMDConsumptionScreen.objContentName, "Content name in Consumption screen")) {
					logger.info(
							"User is navigated to Consumption screen on clicking Trailer CTA from carousel banner for content: "
									+ contentTitle);
					extent.extentLoggerPass("Consumption Screen",
							"User is navigated to Consumption screen on clicking Trailer CTA from  carousel banner for content: "
									+ contentTitle);
					Back(1);
				} else {
					logger.error(
							"User Fails navigate to Consumption screen on clicking Trailer CTA from carousel banner for content: "
									+ contentTitle);
					extent.extentLoggerFail("Carousel",
							"User Fails navigate to Consumption screen on clicking Trailer CTA from carousel banner for content: "
									+ contentTitle);
				}
			} else {
				logger.error("Trailer CTA on carousel banner for TVOD content is NOT displayed ");
				extent.extentLoggerWarning("Carousel",
						"Trailer CTA on carousel banner for " + contentTitle + " is NOTdisplayed ");
			}

			// Rent Now CTA from Carousel
			if (rentCTA) {
				logger.info("Rent Now CTA on carousel banner for TVOD content is displayed");
				extent.extentLoggerPass("Carousel",
						"Rent Now CTA on carousel banner for " + contentTitle + " is displayed");

				waitForElementAndClickIfPresent(AMDTVODComboOffer.objRentNowCTAonCarouselForContent(contentTitle), 60,
						"Rent Now CTA on " + contentTitle + " Carousel content");
				waitTime(3000);
				if (verifyElementDisplayed(AMDConsumptionScreen.objContentName)) {
					logger.info(
							"User is navigated to Consumption screen on clicking Rent Now CTA from carousel banner for TVOD content: "
									+ contentTitle);
					extent.extentLoggerPass("Consumption Screen",
							"User is navigated to Consumption screen on clicking Rent Now CTA from carousel banner for TVOD content: "
									+ contentTitle);
					Back(1);
				} else {
					logger.error(
							"User Fails navigate to Consumption screen on clicking Rent Now CTA from carousel banner for TVOD content: "
									+ contentTitle);
					extent.extentLoggerFail("Carousel",
							"User Fails navigate to Consumption screen on clicking Rent Now CTA from carousel banner for TVOD content: "
									+ contentTitle);
				}
			} else {
				logger.error("Rent Now CTA on carousel banner for TVOD content is NOT displayed : AMA2-14680");
				extent.extentLoggerWarning("Carousel",
						"Rent Now CTA on carousel banner for " + contentTitle + " is NOTdisplayed : AMA2-14680");
			}

			// clicking on TVOD Carousel content
			waitForElementAndClickIfPresent(AMDHomePage.objCarouselContentTitleCard(contentTitle), 60,
					"Carousel content: " + contentTitle);
			waitTime(3000);
			if (verifyElementDisplayed(AMDConsumptionScreen.objContentName)) {
				logger.info("User is navigated to Consumption screen on clicking carousel banner for TVOD content: "
						+ contentTitle);
				extent.extentLoggerPass("Consumption Screen",
						"User is navigated to Consumption screen on clicking carousel banner for TVOD content: "
								+ contentTitle);
			} else {
				logger.error("User Fails navigate to Consumption screen on clicking carousel banner for TVOD content: "
						+ contentTitle);
				extent.extentLoggerFail("Carousel",
						"User Fails navigate to Consumption screen on clicking carousel banner for TVOD content: "
								+ contentTitle);
			}

			// Rent Now CTA below the player
			if (verifyElementDisplayed(AMDTVODComboOffer.objRentNowCTABelowPlayer)) {
				String text = findElement(AMDTVODComboOffer.objRentNowCTABelowPlayer).getText();
				extentLoggerPass("", text + " CTA is displayed below the player");
				click(AMDTVODComboOffer.objRentNowCTABelowPlayer, text + " CTA Below the Player");
				if (verifyElementDisplayed(AMDTVODComboOffer.obComboOfferScreen)) {
					logger.info("Combo offer page is displayed on clicking " + text + " CTA Below the player");
					extent.extentLoggerPass("Consumption Screen",
							"Combo offer page is displayed on clicking " + text + " CTA Below the player");
					Back(1);
				} else {
					logger.error("Combo offer page is not displayed on clicking Rent Now CTA Below the player");
					extent.extentLoggerFail("Consumption Screen",
							"Combo offer page is not displayed on clicking Rent Now CTA Below the player");
				}
			}

			if (verifyElementDisplayed(AMDTVODComboOffer.objRentNowTextOnPlayer)) {
				String OnPlayertext = findElement(AMDTVODComboOffer.objRentNowTextOnPlayer).getText();
				extentLogger("", OnPlayertext + " text is displayed player");
				if (OnPlayertext.contains("Watch full content by renting it now")) {
					logger.error("[AMA2-18092] " + OnPlayertext
							+ " text is displayed player instead of 'Blockbuster movies and live events at home'");
					extent.extentLoggerFail("Consumption Screen", "[AMA2-18092] " + OnPlayertext
							+ " text is displayed player instead of 'Blockbuster movies and live events at home'");
				} else {
					logger.info(OnPlayertext + " text is displayed on the player");
					extent.extentLoggerPass("Consumption Screen", OnPlayertext + " text is displayed on the player");
				}
			}

			// Rent Now CTA on The player

			if (verifyElementDisplayed((AMDTVODComboOffer.objRentNowCTAOnPlayer))) {
				String Renttext = findElement(AMDTVODComboOffer.objRentNowCTAOnPlayer).getText();
				extentLoggerPass("", Renttext + " CTA is displayed on the player");
				click(AMDTVODComboOffer.objRentNowCTAOnPlayer, Renttext + " CTA on the Player");
				if (verifyElementDisplayed(AMDTVODComboOffer.obComboOfferScreen)) {
					logger.info("Combo offer page is displayed on clicking Rent Now CTA on the player");
					extent.extentLoggerPass("Consumption Screen",
							"Combo offer page is displayed on clicking Rent Now CTA on the player");
					verifyElementExist(AMDTVODComboOffer.objUpgradeTextOnComboOfferPage, "Upgrade Text");
					verifyElementExist(AMDTVODComboOffer.objUpgradeSubTextOnComboOfferPage, "Upgrade Subtext");
					Back(1);
				} else {
					logger.error("Combo offer page is not displayed on clicking Rent Now CTA on the player");
					extent.extentLoggerFail("Consumption Screen",
							"Combo offer page is not displayed on clicking Rent Now CTA on the player");
				}
			}

			// Supermoon combo offer widget on Consumption screen
			if (verifyElementDisplayed(AMDTVODComboOffer.objComboOfferWidgetBelowThePlayer)) {
				click(AMDTVODComboOffer.objComboOfferWidgetBelowThePlayer, "combo offer widget");
				if (verifyElementDisplayed(AMDTVODComboOffer.obComboOfferScreen)) {
					logger.info("Combo offer page is displayed on clicking combo offer widget below the player");
					extent.extentLoggerPass("Consumption Screen",
							"Combo offer page is displayed on clicking combo offer widget below the player");
					verifyElementExist(AMDTVODComboOffer.objUpgradeTextOnComboOfferPage, "Upgrade Text");
					verifyElementExist(AMDTVODComboOffer.objUpgradeSubTextOnComboOfferPage, "Upgrade Subtext");

					Back(1);
				} else {
					logger.error("Combo offer page is not displayed on clicking combo offer widget below the player");
					extent.extentLoggerFail("Consumption Screen",
							"Combo offer page is not displayed on clicking combo offer widget below the player");
				}
			} else {
				logger.error("[AMA2-18106] Combo offer widget below the player is not displayed");
				extent.extentLoggerFail("Consumption Screen",
						"[AMA2-18106] Combo offer widget below the player is not displayed");
			}
			Swipe("UP", 1);
//			verifyElementExist(AMDTVODComboOffer.objHowItWorksCTA, "How it works CTA");
//			click(AMDTVODComboOffer.objHowItWorksCTA, "How it works CTA");
//			waitTime(2000);
//			verifyElementExist(AMDTVODComboOffer.objQandAModelWindow, "Q&A model window");
//			Back(1);
//			waitTime(3000);
//				PartialSwipeInConsumptionScreen("DOWN", 2);
			click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA Below the Player");
		} else {
			logger.info("Content is not displayed on Carousal");
			extentLoggerWarning("Content on Carousal", "Content is not displayed on Carousal");
		}
	}
/**
 * @Note This method is used to validate the combo Offer Page and Payment Page
 * @param subText
 * @param CTAName
 * @throws Exception
 */
	public void validationOfcomboOfferPageAndPaymentPage(String subText, String CTAName) throws Exception {
		extent.HeaderChildNode("Validation of Combo offer page");
		if (verifyElementExist(AMDTVODComboOffer.objPosterOfMovieContent, "Poster of Movie Content")) {
			verifyElementExist(AMDTVODComboOffer.objUpgradeTextOnComboOfferPage, "Upgrade text");
			verifyElementExist(AMDTVODComboOffer.objUpgradeSubTextOnComboOfferPage, "Upgrade subtext");
			String upgradeSubtext = getText(AMDTVODComboOffer.objUpgradeSubTextOnComboOfferPage);
			if (upgradeSubtext.contains(subText)) {
				logger.info(upgradeSubtext + " is displayed");
				extentLoggerPass("subText", upgradeSubtext + " is displayed");
			} else {
				logger.info(upgradeSubtext + " is not displayed");
				extentLoggerFail("subText", upgradeSubtext + " is not displayed");
			}
			verifyElementExist(AMDTVODComboOffer.objComboOfferPlan, "Combo offer plan");
			Swipe("UP", 2);
			verifyElementExist(AMDTVODComboOffer.objOnlyRentMoviePlan, "Only Rent Movie plan");
			Swipe("DOWN", 2);
			comboOfferPlanCard_OnlyRentMoviePlanCard_Validation();
			Swipe("DOWN", 1);
			String value = getAttributValue("checked", AMDTVODComboOffer.objPlanCost);
			if (value.equalsIgnoreCase("true")) {
				logger.info("Supermoon combo plan is selected by default");
				extent.extentLoggerPass("Combo offer Screen", "Supermoon combo plan is selected by default");
				String cta = getText(AMDTVODComboOffer.objCTABelowTheComboOfferPage);
				System.out.println(cta);
				if (cta.equalsIgnoreCase(CTAName)) {
					logger.info(CTAName + " CTA is displayed when Supermoon combo plan is selected");
					extentLoggerPass("Upgrade CTA",
							CTAName + " CTA is displayed when Supermoon combo plan is selected");
				} else {
					logger.error("[AMA2-18102] " + cta
							+ " CTA is displayed when Supermoon combo plan is selected instead 'Buy Supermoon Combo' CTA");
					extentLoggerFail("Upgrade CTA", "[AMA2-18102] " + cta
							+ " CTA is displayed when Supermoon combo plan is selected instead 'Buy Supermoon Combo' CTA\"");
				}
				click(AMDTVODComboOffer.objCTABelowTheComboOfferPage, CTAName + " CTA");
				paymentScreenVerification();
				Back(1);
			} else {
				logger.error("Supermoon combo plan is NOT selected by default");
				extent.extentLoggerFail("Combo offer Screen", "Supermoon combo plan is NOT selected by default");
			}
			Swipe("UP", 1);
			click(AMDTVODComboOffer.objOnlyRentMoviePlan, "Only Rent Movie plan");
			String cta2 = getText(AMDTVODComboOffer.objCTABelowTheComboOfferPage);
			if (cta2.equalsIgnoreCase("Rent Content")) {
				logger.info(cta2 + " CTA is displayed when 'Only Rent Movie plan' is selected");
				extentLoggerPass("Rent Movie CTA",
						cta2 + " CTA is displayed when 'Only Rent Content plan' is selected");
				click(AMDTVODComboOffer.objCTABelowTheComboOfferPage, cta2 + " CTA");
				paymentScreenVerification();
				Back(1);
			} else {
				logger.info("'Rent Content' CTA is not displayed when 'Only Rent Content plan' is selected");
				extentLoggerFail("Rent Movie CTA",
						"'Rent Content' CTA is not displayed when 'Only Rent Content plan' is selected");
			}
		} else {
			logger.info("Combo offer page is not displayed");
			extentLoggerWarning("Combo offer page", "Combo offer page is not displayed");
		}
	}
/**
 * @Note This method is used to validate the You have it all bottom sheet for rental active user.
 * @param pEmailId
 * @param pPassword
 * @param pContentName
 * @throws Exception
 */
	public void verifyRentalPlanAsSubscribedUser(String pEmailId, String pPassword, String pContentName)
			throws Exception {
		extent.HeaderChildNode("UC-9: Validate 'You have it all' bottom sheet displayed for SubscribedUser");
		System.out.println("\nUC-9: Validate 'You have it all' bottom sheet  displayed for SubscribedUser");

		waitForElementDisplayed(AMDTVODComboOffer.objPlayCTAonCarouselforContent(pContentName), 15);
		verifyElementPresentAndClick(AMDTVODComboOffer.objPlayCTAonCarouselforContent(pContentName),
				"Play button from Carousel");
		click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA");
		waitTime(3000);
		comboOfferPlanCard_OnlyRentMoviePlanCard_Validation();
		click(AMDTVODComboOffer.objBuyRadheComboCTA, "Buy Radhe Combo CTA");
		waitTime(2000);

		if (verifyElementPresent(AMDTVODComboOffer.objAccountInfoLabel, "Account Info overlay")) {
			logger.info("Account Info widget is displayed");
			extentLoggerPass("Account Info widget", "Account Info widget is displayed");

			verifyElementPresent(AMDTVODComboOffer.objPaymentStep2, "Payment Step indicator");
			type(AMDTVODComboOffer.objEmailIdfield, pEmailId, "Email Id");
			hideKeyboard();
			click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
			click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
			type(AMDTVODComboOffer.objPasswordfield, pPassword, "Password");
			hideKeyboard();
			click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
			click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
			waitTime(4000);
			if (verifyIsElementDisplayed(AMDTVODComboOffer.objBottomImg)) {

				if (verifyIsElementDisplayed(AMDTVODComboOffer.objAlreadyActive)) {
					logger.info("'You have it all' bottom sheet is displayed since user already has active plan");
					extentLoggerPass("You have it all",
							"<b>'You have it all'</b> bottom sheet is displayed since user already has active plan");

					verifyElementPresent(AMDTVODComboOffer.objBottomSheetTitle,
							getText(AMDTVODComboOffer.objBottomSheetTitle));
					verifyElementPresent(AMDTVODComboOffer.objBottomSheetSubTitle,
							getText(AMDTVODComboOffer.objBottomSheetSubTitle));
					verifyElementPresent(AMDTVODComboOffer.objActivePlanMsg2,
							"You have already rented this ZEEPLEX movie");
					verifyElementPresent(AMDTVODComboOffer.objWatchNowCalloutCTA, "Watch Now CTA");
					verifyElementPresent(AMDTVODComboOffer.objExplorePremiumCTA, "Explore Premium CTA");
				} else {
					logger.info(getText(AMDTVODComboOffer.objBottomSheetTitle)
							+ " message in bottom sheet is displayed even though user already has active plan");
					extentLoggerFail("You have it all", getText(AMDTVODComboOffer.objBottomSheetTitle)
							+ " message in bottom sheet is displayed even though user already has active plan");

					verifyElementPresent(AMDTVODComboOffer.objBottomSheetTitle,
							getText(AMDTVODComboOffer.objBottomSheetTitle));
					verifyElementPresent(AMDTVODComboOffer.objBottomSheetSubTitle,
							getText(AMDTVODComboOffer.objBottomSheetSubTitle));
					verifyElementPresent(AMDTVODComboOffer.objBottomSheetCTA,
							getText(AMDTVODComboOffer.objBottomSheetSubTitle));
				}
			} else {
				logger.info("'You have it all' screen is not displayed");
				extentLoggerFail("Bottom Sheet", "<b>'You have it all'</b> screen is not displayed ");
			}
		} else {
			logger.info("Account info screen is not displayed");
			extentLoggerFail("Account info", "Account info screen is not displayed ");
		}
	}
/**
 * @Note This method is used for the validation of Radhey combo offer screen.
 * @param pEmailId
 * @param pPassword
 * @throws Exception
 */
	public void verifyRadheComboOfferScreen(String pEmailId, String pPassword) throws Exception {
		extent.HeaderChildNode("Verify Radhe Combo offer screen");

		verifyElementPresent(AMDSubscibeScreen.objPremiumBadge, "Premium Badge");
		verifyElementPresent(AMDSubscibeScreen.objPlanSelectionBadge, "Plan selection badge");
		verifyElementPresent(AMDSubscibeScreen.objPlanHeader("Radhe Combo Offer"), "Radhe Combo Offer");
		verifyElementPresent(AMDSubscibeScreen.objLinkedlabel("Radhe + 1 Year ZEE5 Premium"),
				"Radhe + 1 Year ZEE5 Premium");
		verifyElementPresent(AMDSubscibeScreen.objLinkedlabel("Blockbuster movies"), "Blockbuster movies");
		verifyElementPresent(AMDSubscibeScreen.objLinkedlabel("Web Series"), "Web Series");
		verifyElementPresent(AMDSubscibeScreen.objLinkedlabel("Before TV"), "Before TV");
		verifyElementPresent(AMDTVODComboOffer.objAdFreeTxt, "Before TV");
		verifyElementPresent(AMDSubscibeScreen.objHelpIcons, "Help Icons");

		if (verifyElementDisplayed(AMDTVODComboOffer.objPlanName)) {
			String getPlanName = getText(AMDTVODComboOffer.objPlanName);
			String getPlanPrice = getText(AMDTVODComboOffer.objPlanPrice);
			String getPlanDesc = getText(AMDTVODComboOffer.objPlanDesc);
			String getPlanReccuring = getText(AMDTVODComboOffer.objPlanReccuring);
			String getPlanFooter = getText(AMDTVODComboOffer.objPlanFooterlbl);

			logger.info("Plan name is displayed as: " + getPlanName + "along with plan price: " + getPlanPrice);
			extentLoggerPass("Plan name",
					"Plan name is displayed as: " + getPlanName + "along with plan price: " + getPlanPrice);

			logger.info(
					"Plan description is displayed as: " + getPlanDesc + " with recurring info: " + getPlanReccuring);
			extentLoggerPass("Plan description",
					"Plan description is displayed as: " + getPlanDesc + " with recurring info: " + getPlanReccuring);

			logger.info("Plan footer messege is displayed as: " + getPlanFooter);
			extentLoggerPass("Plan footer", "Plan footer messege is displayed as: " + getPlanFooter);

		}
	}
/**
 * @Note This method is used to Validate Content already rented screen displayed for Non-SubscribedUser
 * @param pEmailId
 * @param pPassword
 * @param pContent
 * @throws Exception
 */
	public void verifyRentalPlanAsNonSubscribedUser(String pEmailId, String pPassword, String pContent)
			throws Exception {
		extent.HeaderChildNode("UC-8: Validate Content already rented screen displayed for Non-SubscribedUser");
		System.out.println("\nUC-8: Validate Content already rented screen displayed for Non-SubscribedUser");
		selectTopNavigationTab("Music");
		waitForElementAndClickIfPresent(AMDHomePage.objCarouselContentTitleCard(pContent), 60,
				"Carousel content: " + pContent);
		click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA");
		waitTime(3000);
		comboOfferPlanCard_OnlyRentMoviePlanCard_Validation();
		click(AMDTVODComboOffer.objBuyRadheComboCTA, "Buy Supermoon Combo CTA");
		waitTime(2000);
		if (verifyElementPresent(AMDTVODComboOffer.objAccountInfoLabel, "Account Info overlay")) {
			logger.info("Account Info widget is displayed");
			extentLoggerPass("Account Info widget", "Account Info widget is displayed");

			verifyElementPresent(AMDTVODComboOffer.objPaymentStep2, "Payment Step indicator");
			type(AMDTVODComboOffer.objEmailIdfield, pEmailId, "Email Id");
			hideKeyboard();
			click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
			click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
			waitTime(3000);
			click(AMDTVODComboOffer.objPasswordfield, "Password field");
			type(AMDTVODComboOffer.objPasswordfield, pPassword, "Password");
			hideKeyboard();
			click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
			click(AMDTVODComboOffer.objContinueBtn, "Continue Button");

			waitTime(5000);
			if (verifyIsElementDisplayed(AMDTVODComboOffer.objAlreadyRented)) {
				logger.info("'Content already rented' bottom sheet is displayed");
				extentLoggerPass("Bottom Sheet", "<b>'Content already rented'</b> bottom sheet is displayed");
				verifyElementPresent(AMDTVODComboOffer.objActivePlanMsg2, "Already Rental Details");
				verifyElementPresent(AMDTVODComboOffer.objWatchNowCalloutCTA, "Watch Now CTA");
				verifyElementPresent(AMDTVODComboOffer.objBuyPremiumCalloutCTA, "Buy Premium CTA");

				// Verify consumption screen on clicking back
				verifyConsumptionScreen_AfterClickingBack();

				// validate watch now CTA
				validateWatchNow(pContent);

				relaunch(true);
				selectTopNavigationTab("Music");
				waitForElementAndClickIfPresent(AMDHomePage.objCarouselContentTitleCard(pContent), 60,
						"Carousel content: " + pContent);
				waitTime(3000);
				click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA");
				waitTime(3000);
				click(AMDTVODComboOffer.objBuyRadheComboCTA, "Buy Supermoon Combo CTA");
				waitTime(2000);
				verifyElementPresent(AMDTVODComboOffer.objPaymentStep2, "Payment Step indicator");
				type(AMDTVODComboOffer.objEmailIdfield, pEmailId, "Email Id");
				hideKeyboard();
				click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
				click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
				type(AMDTVODComboOffer.objPasswordfield, pPassword, "Password");
				hideKeyboard();
				click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
				click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
				waitTime(4000);

				// validate Buy premium CTA
				validateBuyPremium();
			} else {
				logger.info("'Content already rented' screen is not displayed");
				extentLoggerFail("Content already rented", "<b>'Movie already rented'</b> screen is not displayed ");
			}
		} else {
			logger.info("Account info screen is not displayed");
			extentLoggerFail("Account info", "Account info screen is not displayed ");
		}
	}
/**
 * @Note This method is used for the validation Of Carousal and Consumption Page For ComboOffer Content for RSVOD 49 user
 * @param tabName
 * @param contentTitle
 * @throws Exception
 */
	public void rsvodUser_49(String tabName, String contentTitle) throws Exception {
		validationOfCarousalAndConsumptionPageForComboOfferContent(tabName, contentTitle);
		validationOfcomboOfferPageAndPaymentPage("49", "Upgrade");
	}
/**
 *  @Note This method is used for the validation Of Carousal and Consumption Page For ComboOffer Content for RSVOD 499 user
 * @param tabName
 * @param contentTitle
 * @throws Exception
 */
	public void rsvodUser_499(String tabName, String contentTitle) throws Exception {
		validationOfCarousalAndConsumptionPageForComboOfferContent(tabName, contentTitle);
		validationOfcomboOfferPageAndPaymentPage("499", "Upgrade");
	}
/**
 * @Note This method is used for the validation of combo offer,consumption screen for 99 premium user and Upgrade bottom sheet.
 * @param tabName
 * @param contentTitle
 * @param email
 * @param password
 * @throws Exception
 */
	public void guest_premiumUser_99(String tabName, String contentTitle, String email, String password)
			throws Exception {
		validationOfCarousalAndConsumptionPageForComboOfferContent(tabName, contentTitle);
		validationOfComboOfferPage_AccountInfoPage_UpgradeBottomSheet("Pay less, Watch more!", "Buy Supermoon Combo",
				email, password, "99");
	}
/**
 * @Note This method is used for the validation of combo offer,consumption screen for 299 premium user and Upgrade bottom sheet.
 * @param tabName
 * @param contentTitle
 * @param email
 * @param password
 * @throws Exception
 */
	public void guest_premiumUser_299(String tabName, String contentTitle, String email, String password)
			throws Exception {
		validationOfCarousalAndConsumptionPageForComboOfferContent(tabName, contentTitle);
		validationOfComboOfferPage_AccountInfoPage_UpgradeBottomSheet("Pay less, Watch more!", "Buy Supermoon Combo",
				email, password, "299");
	}
/**
 * @Note This method is used for the validation of combo offer,consumption screen for 499 premium user and Upgrade bottom sheet.
 * @param tabName
 * @param contentTitle
 * @param email
 * @param password
 * @throws Exception
 */
	public void guest_premiumUser_499(String tabName, String contentTitle, String email, String password)
			throws Exception {
		validationOfCarousalAndConsumptionPageForComboOfferContent(tabName, contentTitle);
		validationOfComboOfferPage_AccountInfoPage_UpgradeBottomSheet("Pay less, Watch more!", "Buy Supermoon Combo",
				email, password, "499");
	}
/**
 * @Note This method is used for the validation of combo offer,consumption screen for 49 RSVOD user and Upgrade bottom sheet.
 * @param tabName
 * @param contentTitle
 * @param email
 * @param password
 * @throws Exception
 */
	public void guest_RSVODUser_49(String tabName, String contentTitle, String email, String password)
			throws Exception {
		validationOfCarousalAndConsumptionPageForComboOfferContent(tabName, contentTitle);
		validationOfComboOfferPage_AccountInfoPage_UpgradeBottomSheet("Pay less, Watch more!", "Buy Supermoon Combo",
				email, password, "49");
	}
/**
 * @Note This methos is used for the Validation of Combo offer page, Account Info page and Upgrade bottom sheet
 * @param subText
 * @param CTAName
 * @param email
 * @param password
 * @param subText2
 * @throws Exception
 */
	public void validationOfComboOfferPage_AccountInfoPage_UpgradeBottomSheet(String subText, String CTAName,
			String email, String password, String subText2) throws Exception {
		extent.HeaderChildNode("Validation of Combo offer page, Account Info page and Upgrade bottom sheet");
		System.out.println("\nValidation of Combo offer page, Account Info page and Upgrade bottom sheet");
		if (verifyElementExist(AMDTVODComboOffer.objPosterOfMovieContent, "Poster of Movie Content")) {
			verifyElementExist(AMDTVODComboOffer.objUpgradeTextOnComboOfferPage, "Upgrade text");
			verifyElementExist(AMDTVODComboOffer.objUpgradeSubTextOnComboOfferPage, "Upgrade subtext");
			String upgradeSubtext = getText(AMDTVODComboOffer.objUpgradeSubTextOnComboOfferPage);
			if (upgradeSubtext.contains(subText)) {
				logger.info(upgradeSubtext + " is displayed");
				extentLoggerPass("subText", upgradeSubtext + " is displayed");
			} else {
				logger.info(upgradeSubtext + " is not displayed");
				extentLoggerFail("subText", upgradeSubtext + " is not displayed");
			}
			verifyElementExist(AMDTVODComboOffer.objComboOfferPlan, "Combo offer plan");
			Swipe("UP", 1);
			verifyElementExist(AMDTVODComboOffer.objOnlyRentMoviePlan, "Only Rent Movie plan");
			Swipe("DOWN", 1);
			comboOfferPlanCard_OnlyRentMoviePlanCard_Validation();
			Swipe("DOWN", 2);
			boolean value = findElement(AMDTVODComboOffer.objComboOfferPlan).isEnabled();
			if (value) {
				logger.info("Supermoon combo plan is selected by default");
				extent.extentLoggerPass("Combo offer Screen", "supermoon combo plan is selected by default");
				String cta = getText(AMDTVODComboOffer.objCTABelowTheComboOfferPage);
				if (cta.equalsIgnoreCase(CTAName)) {
					logger.info(CTAName + " CTA is displayed when supermoon combo plan is selected");
					extentLoggerPass("Upgrade CTA",
							CTAName + " CTA is displayed when supermoon combo plan is selected");
				} else {
					logger.info("[AMA2-18102] " + cta
							+ " CTA is displayed when Supermoon combo plan is selected instead of " + CTAName);
					extentLoggerFail("Upgrade CTA", "[AMA2-18102] " + cta
							+ " CTA is displayed when Supermoon combo plan is selected instead of " + CTAName);
				}
				click(AMDTVODComboOffer.objCTABelowTheComboOfferPage, cta + " CTA");
				waitTime(2000);
				verifyElementPresent(AMDTVODComboOffer.objPaymentStep2, "Payment Step indicator");

				if (verifyElementPresent(AMDTVODComboOffer.objAccountInfoLabel, "Account Info overlay")) {
					logger.info("Account Info widget is displayed");
					extentLoggerPass("Account Info widget", "Account Info widget is displayed");

					loginFromAccountInfoScreen(email, password);
					waitTime(2000);
					if (verifyElementPresent(AMDTVODComboOffer.objUpgradeBottomSheet, "Upgrade bottom sheet")) {
						String text = getText(AMDTVODComboOffer.objUpgradeBottomSheetText);
						if (text.contains("Upgrade") | text.contains("Rent Content")) {
							logger.info(text + " is displayed");
							extentLoggerPass("Upgrade", text + " is displayed");
						} else {
							logger.info("[AMA2-18084] " + text + " is displayed instead 'Rent Content for text'");
							extentLoggerFail("Upgrade",
									"[AMA2-18084] " + text + " is displayed instead 'Rent Content for text'");
						}

						String subtext = getText(AMDTVODComboOffer.objUpgradeBottomSheetSubText);
						if (subtext.contains(subText2)) {
							logger.info(subtext + " is displayed");
							extentLoggerPass("Upgrade", subtext + " is displayed");
						} else {
							logger.info(subtext + " is not displayed");
							extentLoggerFail("Upgrade", subtext + " is not displayed");
						}
						if (verifyElementDisplayed(AMDTVODComboOffer.objUpgradeBottomSheetCTA)) {
							String upgradebottomsheetcta = getText(AMDTVODComboOffer.objUpgradeBottomSheetCTA);
							if (upgradebottomsheetcta.contains("Upgrade")
									| upgradebottomsheetcta.contains("Rent Content")) {
								logger.info(upgradebottomsheetcta + " is displayed");
								extentLoggerPass("Upgrade", upgradebottomsheetcta + " is displayed");
							} else {
								logger.info("[AMA2-18084] " + upgradebottomsheetcta
										+ " is displayed instead 'Rent Content CTA'");
								extentLoggerFail("Upgrade", "[AMA2-18084] " + upgradebottomsheetcta
										+ " is displayed instead 'Rent Content CTA'");
							}
						}
						click(AMDTVODComboOffer.objUpgradeBottomSheetCTA, "Upgrade bottom sheet CTA");
						paymentScreenVerification();
						Back(1);
					}
				}
				Back(1);
			} else {
				logger.error("Supermoon combo plan is NOT selected by default");
				extent.extentLoggerFail("Combo offer Screen", "Supermoon combo plan is NOT selected by default");
			}
		} else {
			logger.info("Combo offer page is not displayed");
			extentLoggerWarning("Combo offer page", "Combo offer page is not displayed");
		}
	}
/**
 * @Note This method is used for the Only rent movie plan card on the combo offer screen
 * @throws Exception
 */
	public void comboOfferPlanCard_OnlyRentMoviePlanCard_Validation() throws Exception {
		verifyElementExist(AMDTVODComboOffer.objRecommendedTag, "Recommended tag");
		verifyElementExist(AMDTVODComboOffer.objPlanTitle, "Plan Title: " + getText(AMDTVODComboOffer.objPlanTitle));
		verifyElementExist(AMDTVODComboOffer.objPlanCost, "Plan Cost: " + getText(AMDTVODComboOffer.objPlanCost));
		verifyElementExist(AMDTVODComboOffer.objStrikeOutCost,
				"Strickout: " + getText(AMDTVODComboOffer.objStrikeOutCost));
		verifyElementExist(AMDTVODComboOffer.objSaveAmount, "Save: " + getText(AMDTVODComboOffer.objSaveAmount));
		verifyElementExist(AMDTVODComboOffer.objRadheCard, "Radhe card");
		verifyElementExist(AMDTVODComboOffer.obj1YearPremiumCard, "1 year Premium card");
		Swipe("UP", 2);
		verifyElementExist(AMDTVODComboOffer.objRadheRentalPrice, "Radhe rental price");
		verifyElementExist(AMDTVODComboOffer.objRentalValidity, "Rental validity");
		verifyElementExist(AMDTVODComboOffer.objWatchTimeValidity, "Watch time validity");
		verifyElementExist(AMDTVODComboOffer.obj1YearPremiumPlanPrice, "1 year premium plan price");
		verifyElementExist(AMDTVODComboOffer.objPriceOnBottomOfTheComboCard, "Price on Bottom Of the card");
		verifyElementExist(AMDTVODComboOffer.objOnlyRentMoviePlanCost, "Price of Only Rent Movie card");
		verifyElementExist(AMDTVODComboOffer.objOnlyRentMovieRentalValidity, "Rental validity of Only Rent Movie card");
		verifyElementExist(AMDTVODComboOffer.objOnlyRentMovieWatchTimeValidity, "Price of Only Rent Movie card");
		verifyElementExist(AMDTVODComboOffer.objTermsOfUse_PrivacyPolicy,
				"'By proceeding, you agree to our Terms of Service and Privacy Policy' disclaimer");
	}
/**
 * @Note this method is used for the combo offer page for Non subscribed user without active rental pack.
 * @param tabName
 * @param contentTitle
 * @throws Exception
 */
	public void nonSubscribed_withoutRadheRental(String tabName, String contentTitle) throws Exception {
		validationOfCarousalAndConsumptionPageForComboOfferContent(tabName, contentTitle);
		validationOfcomboOfferPageAndPaymentPage("Pay less, Watch more!", "Buy Radhe Combo");
	}
/**
 * @Note this method is used for the validation of combo offer page and upgrade bottom sheet by loggin in with 499 RSVOD user credential in Account info screen 
 * @param tabName
 * @param contentTitle
 * @param email
 * @param password
 * @throws Exception
 */
	public void guest_RSVODUser_499(String tabName, String contentTitle, String email, String password)
			throws Exception {
		validationOfCarousalAndConsumptionPageForComboOfferContent(tabName, contentTitle);
		validationOfComboOfferPage_AccountInfoPage_UpgradeBottomSheet("Pay less, Watch more!", "Buy Radhe Combo", email,
				password, "499");
	}
/**
 * @Note This method is used for the navigating back to home screen.
 * @throws Exception
 */
	public void navigateToHomeScreen() throws Exception {
		extent.HeaderChildNode("Navigation to Home Screen");
//		click(AMDOnboardingScreen.objgetContentLangName(1), "Content Language");
		selectSpecificContentLanguages();
		click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button (Content-LanguageScreen)");
	}
/**
 * @Note This method is used for the TVOD combo offer validation.
 * @param pUserType
 * @param pPlanName
 * @throws Exception
 */
	public void tvodComboOfferScreenValidation(String pUserType, String pPlanName) throws Exception {
		extent.HeaderChildNode("Verify " + pPlanName + " screen");
		System.out.println("\nVerify " + pPlanName + " screen");

		if (!(pUserType.equalsIgnoreCase("SubscribedUser"))) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
			verifyElementPresentAndClick(AMDMoreMenu.objBuySubscription, "Buy Subscription");
			waitTime(2000);
			verifyElementPresent(AMDSubscibeScreen.objPremiumBadge, "Premium Badge");
			verifyElementPresent(AMDSubscibeScreen.objPlanSelectionBadge, "Plan selection badge");
			verifyElementPresent(AMDSubscibeScreen.objStepperLabel, "Step Indicator");
			verifyElementPresent(AMDSubscibeScreen.objPlanHeader(pPlanName), pPlanName);
			verifyElementPresent(AMDSubscibeScreen.objLinkedlabel("Radhe + 1 Year ZEE5 Premium"),
					"Radhe + 1 Year ZEE5 Premium");
			verifyElementPresent(AMDSubscibeScreen.objLinkedlabel("Blockbuster movies"), "Blockbuster movies");
			verifyElementPresent(AMDSubscibeScreen.objLinkedlabel("Web Series"), "Web Series");
			verifyElementPresent(AMDSubscibeScreen.objHelpIcons, "Help Icons");
			verifyElementPresent(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue Button");
			verifyElementPresent(AMDSubscibeScreen.objContinueOnSubscribePopup,
					getText(AMDSubscibeScreen.objContinueOnSubscribePopup));
		} else {
			logger.info(pPlanName + " plan is Not applicable for " + pUserType);
			extentLogger(pPlanName, pPlanName + " plan is Not applicable for " + pUserType);
		}
	}
/**
 * @Note This method is used for the logging via Account info screen.
 * @param pEmailId
 * @param pPassword
 * @throws Exception
 */
	public void loginFromAccountInfoScreen(String pEmailId, String pPassword) throws Exception {
//		extent.HeaderChildNode("Log into ZEE5 from Account Info screen");

		verifyElementPresent(AMDLoginScreen.objAccountInfoScreen, "Account Info screen");
		click(AMDLoginScreen.objEmailIdField, "EmailId");
		type(AMDLoginScreen.objEmailIdField, pEmailId, "Email-Id/Phone");
		hideKeyboard();
		click(AMDLoginScreen.objAccountInfoScreen, "HideKeyboard");
		click(AMDGenericObjects.objContinueCTA, "Continue button");
		verifyElementPresent(AMDLoginScreen.objEnterPasswordField, "Enter Password screen");
		click(AMDLoginScreen.objEmailIdField, "Password");
		type(AMDLoginScreen.objEmailIdField, pPassword, "Password");
		hideKeyboard();
		click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
		click(AMDGenericObjects.objContinueCTA, "Continue button");
	}
/**
 * @Note this method is used to verify non subscribed user navigates to payment screen from subscription callout
 * @param pEmailId
 * @param pPassword
 * @throws Exception
 */
	public void verifyNavigationAsNonSusbscribedUser(String pEmailId, String pPassword) throws Exception {
		extent.HeaderChildNode("Verify Navigation to Payment screen for plan selection as non subscirbed user");
		System.out.println("\nVerify Navigation to Payment screen for plan selection as non subscirbed user");

		verifyElementPresentAndClick(AMDSubscibeScreen.objContinueOnSubscribePopup,
				getText(AMDSubscibeScreen.objContinueOnSubscribePopup));
		loginFromAccountInfoScreen(pEmailId, pPassword);
		paymentScreenVerification();
	}
/**
 * @Note this method is used  to select specific content language from the content languages screen.
 * @throws Exception
 */
	public void selectSpecificContentLanguages() throws Exception {

		click(AMDOnboardingScreen.objSelectContentLang("Hindi"), "Hindi");
		PartialSwipe("UP", 2);
		waitTime(1000);
		click(AMDOnboardingScreen.objSelectContentLang("Kannada"), "Kannada");
		// Swipe("UP", 3);
//		waitTime(1000);
//		click(AMDOnboardingScreen.objSelectContentLang("Punjabi"), "Punjabi");
	}
/**
 * @Note this method is used to Validating that user is able to find the searched content by entering content description
 * @param searchword
 * @throws Exception
 */
	public void searchResultByContentDescription(String searchword) throws Exception {
		extent.HeaderChildNode(
				"Validating that user is able to find the searched content by entering content description");
		waitTime(5000);
		verifyElementPresentAndClick(AMDHomePage.objHome, "Home Tab");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchword + "\n", "Search bar");
		hideKeyboard();
		verifyIsElementDisplayed(AMDSearchScreen.objFirstSearchResult);
		click(AMDSearchScreen.objFirstSearchResult, "Search result");
		waitTime(2000);
		String description = findElement(AMDSearchScreen.objContentDescription).getText();
		System.out.println("Description: " + description);
		if (description.contains(searchword)) {
			logger.info("User is able to check search result by entering content description of the content");
			extent.extentLoggerPass("Related search results",
					"User is able to check search result by entering content description of the content");
		} else {
			logger.info("User is NOT able to check search result by entering content description of the content");
			extent.extentLogger("Related search results",
					"User is NOT able to check search result by entering content description of the content");
		}
	}
/**
 * @note This method is used for Validating that user is able to find the searched content with different test data
 * @param searchKeyword
 * @throws Exception
 */
	public void searResultsOfDifferentTestData(String searchKeyword) throws Exception {
		extent.HeaderChildNode("Validating that user is able to find the searched content");
		waitTime(5000);
		verifyElementPresentAndClick(AMDHomePage.objHome, "Home Tab");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword + "\n", "Search bar");
		hideKeyboard();
		if (verifyIsElementDisplayed(AMDSearchScreen.objFirstSearchResult)) {
			String searchResults = findElement(AMDSearchScreen.objFirstSearchResult).getText();
			System.out.println("Search result : " + searchResults);

			if (searchResults.contains(searchKeyword)) {
				logger.info("Related search results are displayed");
				extent.extentLoggerPass("Related search results", "Related search results are displayed");
			} else {
				logger.info("Related search results are not displayed");
				extent.extentLogger("Related search results", "Related search results are not displayed");
			}

		} else {
			logger.info("Related search results are not displayed");
			extent.extentLogger("Related search results", "Related search results are not displayed");
		}
		Back(1);

	}
	/**
	 * @Note this method is used to verify Deeplinking to Consumption page and navigating till Payment page via combo offer journey
	 * @param url
	 * @param cost
	 * @param LoginOrRegister
	 * @param email
	 * @param password
	 * @throws Exception
	 */
	public void tVODDeeplink(String url, String cost, String LoginOrRegister, String email, String password)
			throws Exception {
		extent.HeaderChildNode("Deeplinking to Consumption page and navigating till Payment page");
		try {
			waitTime(5000);
			String cmd3 = "adb shell am start -W -a android.intent.action.VIEW -d  " + url;
			Process process = Runtime.getRuntime().exec(cmd3);
			new BufferedReader(new InputStreamReader(process.getInputStream()));
			waitTime(12000);
			if (verifyIsElementDisplayed(AMDHomePage.objPopUpToOpenZeeApp)) {
				click(AMDHomePage.objJustOnceOption, "Just once option");
			}
			waitTime(3000);
			if (verifyElementExist(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA below the player")) {
				click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA Below the Player");
				if (verifyElementDisplayed(AMDTVODComboOffer.obComboOfferScreen)) {
					logger.info("Combo offer page is displayed on clicking Rent Now CTA Below the player");
					extent.extentLoggerPass("Consumption Screen",
							"Combo offer page is displayed on clicking Rent Now CTA Below the player");

					if (cost.equalsIgnoreCase("499")) {
						String value = getAttributValue("checked", AMDTVODComboOffer.objPlanCost);
						if (value.equalsIgnoreCase("true")) {
							logger.info(cost + " plan is selected by default");
							extent.extentLoggerPass("Combo offer Screen", cost + " plan is selected by default");
						} else {
							click(AMDTVODComboOffer.objPlanCost, "cost");
						}
					} else if (cost.equalsIgnoreCase("249")) {
						Swipe("UP", 2);
						click(AMDTVODComboOffer.objOnlyRentMoviePlan, "Only Rent Movie plan");
					}

					waitTime(3000);
					click(AMDTVODComboOffer.objCTABelowTheComboOfferPage,
							getText(AMDTVODComboOffer.objCTABelowTheComboOfferPage) + " CTA");
					waitTime(6000);

					if (verifyIsElementDisplayed(AMDTVODComboOffer.objAccountInfoLabel, "Account Info overlay")) {
						logger.info("Account Info widget is displayed");
						extentLoggerPass("Account Info widget", "Account Info widget is displayed");

						if (LoginOrRegister.equalsIgnoreCase("Login")) {
							type(AMDTVODComboOffer.objEmailIdfield, email, "Email Id");
						} else {
							type(AMDTVODComboOffer.objEmailIdfield, generateRandomString(5) + "@gmail.com", "Email Id");
						}
						hideKeyboard();
						click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
						waitTime(5000);
						type(AMDTVODComboOffer.objPasswordfield, password, "Password");
						hideKeyboard();
						click(AMDTVODComboOffer.objContinueBtn, "Continue");
						waitTime(6000);
						paymentScreenVerification();
					} else if (verifyIsElementDisplayed(AMDPlayerScreen.objMakePayment, "Payment screen")) {
						paymentScreenVerification();
					}
				} else {
					logger.error("Combo offer page is not displayed on clicking Rent Now CTA Below the player");
					extent.extentLoggerFail("Consumption Screen",
							"Combo offer page is not displayed on clicking Rent Now CTA Below the player");
				}
			}
		} catch (Exception e) {
			System.out.println("URL not triggered");
		}
	}
	/**
	 * @Note This method is used for Deeplinking to Consumption page and navigating till Payment screen
	 * @param url
	 * @param cost
	 * @param LoginOrRegister
	 * @param email
	 * @param password
	 * @throws Exception
	 */
	public void consumptionDeeplink_TVOD(String url, String cost, String LoginOrRegister, String email, String password)
			throws Exception {
		extent.HeaderChildNode("Deeplinking to Consumption page and navigating till Payment screen");
		System.out.println("\nDeeplinking to Consumption page and navigating till Payment screen");

		try {
			waitTime(5000);
			String cmd3 = "adb shell am start -W -a android.intent.action.VIEW -d  " + url;
			Process process = Runtime.getRuntime().exec(cmd3);
			new BufferedReader(new InputStreamReader(process.getInputStream()));
			waitTime(12000);
			if (verifyIsElementDisplayed(AMDHomePage.objPopUpToOpenZeeApp)) {
				click(AMDHomePage.objJustOnceOption, "Just once option");
			}
			waitTime(3000);
			String newEmail = "Auto" + generateRandomString(5) + "@zee5.com";
			if (verifyElementExist(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA below the player")) {
				click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA Below the Player");
				if (verifyElementDisplayed(AMDTVODComboOffer.obComboOfferScreen)) {
					logger.info("Combo offer page is displayed on clicking Rent Now CTA Below the player");
					extent.extentLoggerPass("Consumption Screen",
							"Combo offer page is displayed on clicking Rent Now CTA Below the player");

					if (cost.equalsIgnoreCase("499")) {
						String value = getAttributValue("checked", AMDTVODComboOffer.objPlanCost);
						if (value.equalsIgnoreCase("true")) {
							logger.info(cost + " plan is selected by default");
							extent.extentLoggerPass("Combo offer Screen", cost + " plan is selected by default");
						} else {
							click(AMDTVODComboOffer.objPlanCost, "cost");
						}
					} else if (cost.equalsIgnoreCase("249")) {
						Swipe("UP", 2);
						click(AMDTVODComboOffer.objOnlyRentMoviePlan, "Only Rent Movie plan");
					}

					waitTime(3000);
					click(AMDTVODComboOffer.objCTABelowTheComboOfferPage,
							getText(AMDTVODComboOffer.objCTABelowTheComboOfferPage) + " CTA");
					waitTime(6000);

					if (verifyIsElementDisplayed(AMDTVODComboOffer.objAccountInfoLabel, "Account Info overlay")) {
						logger.info("Account Info widget is displayed");
						extentLoggerPass("Account Info widget", "Account Info widget is displayed");

						if (LoginOrRegister.equalsIgnoreCase("Login")) {
							click(AMDLoginScreen.objEmailIdField, "EmailId");
							type(AMDTVODComboOffer.objEmailIdfield, email, "Email Id");
						} else {
							click(AMDLoginScreen.objEmailIdField, "EmailId");
							type(AMDTVODComboOffer.objEmailIdfield, newEmail, "Email Id");
						}
						hideKeyboard();
						click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
						click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
						waitTime(5000);
						click(AMDLoginScreen.objEmailIdField, "Password");
						type(AMDTVODComboOffer.objPasswordfield, password, "Password");
						hideKeyboard();
						click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
						click(AMDTVODComboOffer.objContinueBtn, "Continue");
						waitTime(6000);
						paymentScreenVerification();
					} else if (verifyIsElementDisplayed(AMDPlayerScreen.objMakePayment, "Payment screen")) {
						paymentScreenVerification();
					}
				} else {
					logger.error("Combo offer page is not displayed on clicking Rent Now CTA Below the player");
					extent.extentLoggerFail("Consumption Screen",
							"Combo offer page is not displayed on clicking Rent Now CTA Below the player");
				}
			}
		} catch (Exception e) {
			System.out.println("URL is not triggered or accessible");
		}
	}

/**
 * @Note this method is used to verify Deeplinking to Subscription page and navigating till Payment screen
 * @param url
 * @param LoginOrRegister
 * @param email
 * @param password
 */
	public void subscriptionDeeplink_TVOD(String url, String LoginOrRegister, String email, String password) {
		extent.HeaderChildNode("Deeplinking to Subscription page and navigating till Payment screen");
		System.out.println("\nDeeplinking to Subscription page and navigating till Payment screen");

		try {
			waitTime(5000);
			String cmd3 = "adb shell am start -W -a android.intent.action.VIEW -d  " + url;
			Process process = Runtime.getRuntime().exec(cmd3);
			new BufferedReader(new InputStreamReader(process.getInputStream()));
			waitTime(12000);

			if (verifyIsElementDisplayed(AMDHomePage.objPopUpToOpenZeeApp)) {
				click(AMDHomePage.objJustOnceOption, "Just once option");
			}
			waitTime(3000);

			String newEmail = "Auto" + generateRandomString(5) + "@zee5.com";
			String selectedPlanPrice = getText(AMDSubscibeScreen.objContinueBtn);
			if (selectedPlanPrice.contains("499")) {
				logger.info("499 plan is selected");
				extent.extentLoggerPass("Plan", "499 plan is selected");
				click(AMDSubscibeScreen.objContinueBtn, "Continue button");
				waitTime(6000);

				if (verifyIsElementDisplayed(AMDTVODComboOffer.objAccountInfoLabel, "Account Info overlay")) {
					logger.info("Account Info widget is displayed");
					extentLoggerPass("Account Info widget", "Account Info widget is displayed");

					if (LoginOrRegister.equalsIgnoreCase("Login")) {
						click(AMDLoginScreen.objEmailIdField, "EmailId");
						type(AMDTVODComboOffer.objEmailIdfield, email, "Email Id");
					} else {
						click(AMDLoginScreen.objEmailIdField, "EmailId");
						type(AMDTVODComboOffer.objEmailIdfield, newEmail, "Email Id");
					}
					hideKeyboard();
					click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
					click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
					waitTime(5000);
					click(AMDLoginScreen.objEmailIdField, "Password");
					type(AMDTVODComboOffer.objPasswordfield, password, "Password");
					hideKeyboard();
					click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
					click(AMDTVODComboOffer.objContinueBtn, "Continue");
					waitTime(6000);
					paymentScreenVerification();
				} else if (verifyIsElementDisplayed(AMDPlayerScreen.objMakePayment, "Payment screen")) {
					paymentScreenVerification();
				}
			} else {
				logger.error("499 plan is not selected");
				extent.extentLoggerFail("Plan", "499 plan is not selected");
			}

		} catch (Exception e) {
			System.out.println("URL not triggered or accessible");
		}
	}
/**
 * @Note This method is used to Verify Parental control feature test on clicking trailer
 * @param pEmailId
 * @param pPassword
 * @param contentTitle
 * @throws Exception
 */
	@SuppressWarnings("deprecation")
	public void parentalControlValidationOnClickingTrailer(String pEmailId, String pPassword, String contentTitle)
			throws Exception {
		extent.HeaderChildNode("Verify Parental control on clicking trailer");
		boolean popUpFlag = false;
		click(AMDHomePage.MoreMenuIcon, "More Menu tab");
		waitTime(1000);
		click(AMDMoreMenu.objSettings, "Settings option");
		waitTime(5000);
		Swipe("UP", 1);
		verifyElementPresentAndClick(AMDMoreMenu.objParentalControl, "Parental Control");
		verifyElementExist(AMDMoreMenu.objPasswordField, "Password field");
		click(AMDMoreMenu.objPasswordField, "Password field");
		getDriver().getKeyboard().sendKeys(pPassword);
		hideKeyboard();
		if (getOEMName.contains("vivo")) {
			hidePwdKeyboard();
		}
		click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
		waitTime(2000);

		String state = getText(AMDMoreMenu.objNoRestriction);
		System.out.println(state);
		if (state.equalsIgnoreCase("No Restriction")) {
			logger.info(state + " is selected by default");
			extent.extentLoggerPass("Parental Pin", state + " is selected by default");

		} else {
			logger.error(state + " is not selected by default");
			extent.extentLoggerFail("Parental Pin", state + " is not selected by default");

		}

		click(AMDMoreMenu.objRestrictAllContent, "Restrict All Content option");
		click(AMDMoreMenu.objContinueBtn, "Continue Button");
		waitTime(2000);

		if (verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin")) {
			logger.info("Parental Pin is SET");
			extent.extentLoggerPass("Parental Pin", "Parental Pin is SET");
			popUpFlag = true;
			verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin");
			type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
			hideKeyboard();
			type(AMDMoreMenu.objParentalLockPin2, "2", "ParentalLockPin");
			hideKeyboard();
			type(AMDMoreMenu.objParentalLockPin3, "3", "ParentalLockPin");
			hideKeyboard();
			type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
			hideKeyboard();
			waitTime(4000);
			click(AMDMoreMenu.objSetPinContinueBtn, "Continue Button");
			waitTime(2000);

			click(AMDMoreMenu.objParentalLockDone, "Done Button");
			BackToLandingScreen();
		}
		// clicking on TVOD Carousel content
		selectTopNavigationTab("Music");
		waitForElementAndClickIfPresent(AMDHomePage.objCarouselContentTitleCard(contentTitle), 60,
				"Carousel content: " + contentTitle);
		waitTime(3000);
		if (popUpFlag) {
			boolean checkParentalPopUp = verifyElementPresent(AMDPlayerScreen.objParentalPinPopUp,
					"Parental Pin Popup");
			if (checkParentalPopUp) {
				logger.info("Parental Pin Popup is displayed");
				extentLoggerPass("Parental Pin Popup", "Parental Pin Popup is displayed");
				type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin2, "2", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin3, "3", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
				hideKeyboard();
				click(AMDMoreMenu.objContinueBtn, "Continue Button");
				waitTime(6000);
				if (verifyElementDisplayed(AMDTVODComboOffer.objPlayerInfo)) {
					logger.info("User is able to play trailer of TVOD content " + contentTitle
							+ " on post successful validation of PIN");
					extent.extentLoggerPass("Consumption Screen", "User is able to play trailer of TVOD content "
							+ contentTitle + " on post successful validation of PIN");
				} else {
					logger.error("User is Unable to play trailer of TVOD content " + contentTitle
							+ " on post successful validation of PIN");
					extent.extentLoggerFail("Carousel", "User is Unable to play trailer of TVOD content " + contentTitle
							+ " on post successful validation of PIN");
				}
				BackToLandingScreen();
				click(AMDHomePage.MoreMenuIcon, "More Menu tab");
				waitTime(1000);
				PartialSwipe("UP", 1);
				click(AMDMoreMenu.objSettings, "Settings option");
				waitTime(2000);
				swipeUntilFindElement(AMDMoreMenu.objParentalControl, "UP");
				verifyElementPresentAndClick(AMDMoreMenu.objParentalControl, "Parental Control");
				click(AMDMoreMenu.objPasswordField, "Password field");
				getDriver().getKeyboard().sendKeys(pPassword);
				hideKeyboard();
				if (getOEMName.contains("vivo")) {
					hidePwdKeyboard();
				}
				click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
				waitTime(2000);
				click(AMDMoreMenu.objNoRestriction, "No Restriction");
				click(AMDMoreMenu.objContinueBtn, "Continue Button");
				waitTime(2000);
				click(AMDMoreMenu.objParentalLockDone, "Done Button");
				Back(1);
			} else {
				logger.info("Parental Pin Popup is NOT displayed");
				extentLoggerFail("Parental Pin Popup", "Parental Pin Popup is NOT displayed in Landscape mode");
			}

		} else {
			logger.info("Parental Pin failed to set hence Popup is NOT displayed");
			extentLoggerFail("Parental Pin Popup",
					"Parental Pin failed to set hence Popup is NOT displayed in Landscape mode");
		}
	}
/**
 * @note this method is used to validate the parental control feature on clicking watchnow cta on the carousel banner
 * @param pEmailId
 * @param pPassword
 * @param contentTitle
 * @throws Exception
 */
	@SuppressWarnings("deprecation")
	public void playerControlValidationOnclickingWatchNowCTA(String pEmailId, String pPassword, String contentTitle)
			throws Exception {
		extent.HeaderChildNode("Verify Parental control on clicking WatchNow CTA");
		boolean popUpFlag = false;
		click(AMDHomePage.MoreMenuIcon, "More Menu tab");
		waitTime(1000);
		click(AMDMoreMenu.objSettings, "Settings option");
		waitTime(5000);
		Swipe("UP", 1);
		verifyElementPresentAndClick(AMDMoreMenu.objParentalControl, "Parental Control");
		verifyElementExist(AMDMoreMenu.objPasswordField, "Password field");
		click(AMDMoreMenu.objPasswordField, "Password field");
		getDriver().getKeyboard().sendKeys(pPassword);
		hideKeyboard();
		if (getOEMName.contains("vivo")) {
			hidePwdKeyboard();
		}
		click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
		waitTime(2000);

		String state = getText(AMDMoreMenu.objNoRestriction);
		System.out.println(state);
		if (state.equalsIgnoreCase("No Restriction")) {
			logger.info(state + " is selected by default");
			extent.extentLoggerPass("Parental Pin", state + " is selected by default");

		} else {
			logger.error(state + " is not selected by default");
			extent.extentLoggerFail("Parental Pin", state + " is not selected by default");

		}

		click(AMDMoreMenu.objRestrictAllContent, "Restrict All Content option");
		click(AMDMoreMenu.objContinueBtn, "Continue Button");
		waitTime(2000);

		if (verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin")) {
			logger.info("Parental Pin is SET");
			extent.extentLoggerPass("Parental Pin", "Parental Pin is SET");
			popUpFlag = true;
			verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin");
			type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
			hideKeyboard();
			type(AMDMoreMenu.objParentalLockPin2, "2", "ParentalLockPin");
			hideKeyboard();
			type(AMDMoreMenu.objParentalLockPin3, "3", "ParentalLockPin");
			hideKeyboard();
			type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
			hideKeyboard();
			waitTime(4000);
			click(AMDMoreMenu.objSetPinContinueBtn, "Continue Button");
			waitTime(2000);

			click(AMDMoreMenu.objParentalLockDone, "Done Button");
			BackToLandingScreen();
		}
		// clicking on TVOD Carousel content
		selectTopNavigationTab("Music");
		waitForElementAndClickIfPresent(AMDHomePage.objCarouselContentTitleCard(contentTitle), 60,
				"Carousel content: " + contentTitle);
		waitTime(3000);
		if (popUpFlag) {
			boolean checkParentalPopUp = verifyElementPresent(AMDPlayerScreen.objParentalPinPopUp,
					"Parental Pin Popup");
			if (checkParentalPopUp) {
				logger.info("Parental Pin Popup is displayed");
				extentLoggerPass("Parental Pin Popup", "Parental Pin Popup is displayed");
				type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin2, "2", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin3, "3", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
				hideKeyboard();
				waitTime(4000);
				click(AMDMoreMenu.objContinueBtn, "Continue Button");
				waitTime(3000);
				if (verifyElementDisplayed(AMDTVODComboOffer.objWatchNowCTA)) {
					click(AMDTVODComboOffer.objWatchNowCTA, "Watch Now CTA");
					if (verifyElementDisplayed(AMDTVODComboOffer.objAgreeAndWatchCTA)) {
						logger.info("User is able to see Agree and Start watching of TVOD content " + contentTitle
								+ " on post successful validation of PIN");
						extent.extentLoggerPass("Consumption Screen",
								"User is able to see Agree and Start watching of TVOD content " + contentTitle
										+ " on post successful validation of PIN");
						verifyPlayBackAfterEnteringPIN();
					} else {
						logger.error("User is Unable to see Agree and Start watching of TVOD content " + contentTitle
								+ " on post successful validation of PIN");
						extent.extentLoggerFail("Carousel",
								"User is Unable to see Agree and Start watching of TVOD content " + contentTitle
										+ " on post successful validation of PIN");
					}
				}

				BackToLandingScreen();
				click(AMDHomePage.MoreMenuIcon, "More Menu tab");
				waitTime(1000);
				PartialSwipe("UP", 1);
				click(AMDMoreMenu.objSettings, "Settings option");
				waitTime(2000);
				swipeUntilFindElement(AMDMoreMenu.objParentalControl, "UP");
				verifyElementPresentAndClick(AMDMoreMenu.objParentalControl, "Parental Control");
				click(AMDMoreMenu.objPasswordField, "Password field");
				getDriver().getKeyboard().sendKeys(pPassword);
				hideKeyboard();
				if (getOEMName.contains("vivo")) {
					hidePwdKeyboard();
				}
				click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
				waitTime(2000);
				click(AMDMoreMenu.objNoRestriction, "No Restriction");
				click(AMDMoreMenu.objContinueBtn, "Continue Button");
				waitTime(2000);
				click(AMDMoreMenu.objParentalLockDone, "Done Button");
				BackToLandingScreen();
			} else {
				logger.info("Parental Pin Popup is NOT displayed");
				extentLoggerFail("Parental Pin Popup", "Parental Pin Popup is NOT displayed ");
			}
		} else {
			logger.info("Parental Pin failed to set hence Popup is NOT displayed");
			extentLoggerFail("Parental Pin Popup", "Parental Pin failed to set hence Popup is NOT displayed");
		}
	}
/**
 * @note This method is used for the Verifying playback of TVOD content after entering Parental PIN
 * @throws Exception
 */
	public void verifyPlayBackAfterEnteringPIN() throws Exception {
		extent.HeaderChildNode("Verifying playback of TVOD content after entering Parental PIN");
		waitTime(3000);
		click(AMDTVODComboOffer.objAgreeAndWatchCTA, "Agree and watch CTA");
		waitForElementAndClickIfPresent(AMDPlayerScreen.objPauseIcon, 5, "Pause icon");
		if (verifyElementDisplayed(AMDPlayerScreen.objPlayIcon)) {
			logger.info("Playback is started after entering valid Parental PIN");
			extent.extentLoggerPass("Consumption Screen", "Playback is started after entering valid Parental PIN");
		} else {
			logger.info("Fails to initiate playaback after entering Paretal PIN");
			extentLoggerFail("Parental Pin Popup", "Fails to initiate playaback after entering Paretal PIN");
		}
	}
/**
 * @note This method is used for the Verifying Search result for TVOD content
 * @param contentTitle
 * @throws Exception
 */
	public void searchForTVODContent(String contentTitle) throws Exception {
		extent.HeaderChildNode("Verifying Search result for TVOD content");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, contentTitle + "\n", "Searchbar");
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 20);
		if (verifyIsElementDisplayed(AMDSearchScreen.objFirstSearchResult(contentTitle))) {
			click(AMDSearchScreen.objFirstSearchResult(contentTitle), "Searched content");
			waitTime(5000);
			if (verifyElementDisplayed(AMDTVODComboOffer.objPlayerInfo)) {
				String info = findElement(AMDTVODComboOffer.objPlayerInfo).getText();
				if (info.contains("trailer")) {
					logger.info(
							"User is navigated to PLEX consumption screen clicking on content if only trailer is available.");
					extent.extentLoggerPass("Consumption Screen",
							"User is navigated to PLEX consumption screen clicking on content if only trailer is available.");
				} else {
					logger.error(
							"User is NOT navigated to PLEX consumption screen clicking on content if only trailer is available.");
					extent.extentLoggerFail("Consumption Screen",
							"User is NOT navigated to PLEX consumption screen clicking on content if only trailer is available.");
				}

			} else {
				logger.error("Playback is not initaiated");
				extent.extentLoggerFail("Consumption Screen", "Playback is not initaiated");
			}
		}
	}
/**
 * @Note this method for the Verifying search result for Expired TVOD content
 * @param email
 * @param pswd
 * @param TVODExpiredContent
 * @throws Exception
 */
	public void searchForExpiredTVODContent(String email, String pswd, String TVODExpiredContent) throws Exception {
		extent.HeaderChildNode("Verifying search result for Expired TVOD content");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, TVODExpiredContent + "\n", "Searchbar");
		hideKeyboard();
		waitForElementDisplayed(AMDSearchScreen.objAllTab, 20);
		if (verifyIsElementDisplayed(AMDSearchScreen.objFirstSearchResult(TVODExpiredContent))) {
			logger.info("Related search is displayed when user searches for Expired content");
			extent.extentLoggerPass("Consumption Screen",
					"Related search is displayed when user searches for Expired content");
		} else {
			logger.error("Related search is NOT displayed when user searches for Expired content");
			extent.extentLoggerFail("Consumption Screen",
					"Related search is NOT displayed when user searches for Expired content");
		}

	}
/**
 * @Note this method is used to verify the promocode feature in combo offer screen
 */
	public void haveACodeValidationTVOD(String userType, String content) throws Exception {
		extent.HeaderChildNode("Verify Have a code journey");
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			verifyElementPresent(AMDHomePage.objSubscribeTeaser, "Buy plan CTA on landing screen");
			click(AMDHomePage.objSubscribeTeaser, "Buy Plan CTA on landing screen");
			waitTime(5000);
			verifyValidCode("zee5scb");
			waitTime(3000);
			click(AMDHomePage.objSubscribeTeaser, "Buy Plan CTA on landing screen");
			verifyInvalidCode("Z56MSK93rJGDyi");
			BackToLandingScreen();
			extent.HeaderChildNode("Verify Have a code in Combo Offer Page");
			waitForElementAndClickIfPresent(AMDHomePage.objCarouselContentTitleCard(content), 60,
					"Carousel content: " + content);
			click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA Below the Player");
			verifyElementExist(AMDTVODComboOffer.obComboOfferScreen, "Combo offer page");
			Swipe("UP", 1);
			if (verifyElementIsNotDisplayed(AMDSubscibeScreen.objHaveACodeCTA)) {
				logger.info("Have a code CTA is not displayed in Combo offer page - Expected behaviour");
				extent.extentLoggerPass("Code",
						"Have a code CTA is not displayed in Combo offer page - Expected behaviour");
			} else {
				logger.error("Have a code CTA is displayed in combo offer page");
				extent.extentLoggerFail("Code", "Have a code CTA is displayed in combo offer page");
			}
			BackToLandingScreen();
		} else {
			logger.info("This is NOT applicable for " + userType);
			extentLoggerWarning("Login", "This is NOT applicable for " + userType);
		}
	}
/**
 * @note This method is used to validate the valid promocode in Have a code pop up
 * @param code
 * @throws Exception
 */
	@SuppressWarnings("deprecation")
	public void verifyValidCode(String code) throws Exception {
		extent.HeaderChildNode("Verify Valid prepaid/promocode");
		Swipe("UP", 1);
		click(AMDSubscibeScreen.objHaveACodeCTA, "Have a code");
		waitTime(2000);
		getDriver().getKeyboard().sendKeys(code);
		hideKeyboard();
		click(AMDSubscibeScreen.objApplyOnHaveACodescreen, "Apply button");
		if (verifyIsElementDisplayed(AMDSubscibeScreen.objApplyPromoCodeappliedText)) {
			String text = findElement(AMDSubscibeScreen.objApplyPromoCodeappliedText).getText();
			logger.info("Code applied : " + text + " is displayed");
			extent.extentLoggerPass("Code", "Code applied : " + text + " is displayed");
		} else {
			logger.error("Code applied text is NOT displayed");
			extent.extentLoggerFail("Code", "Code applied text is NOT displayed");
		}
		Back(1);
	}
/**
 * This method is used to validate the invalid promocode in Have a code pop up
 * @param code
 * @throws Exception
 */
	@SuppressWarnings("deprecation")
	public void verifyInvalidCode(String code) throws Exception {
		extent.HeaderChildNode("Verify Invalid prepaid/promocode");
		waitTime(3000);
		Swipe("UP", 1);
		click(AMDSubscibeScreen.objHaveACodeCTA, "Have a code");
		getDriver().getKeyboard().sendKeys(code);
		hideKeyboard();
		if (verifyElementDisplayed(AMDSubscibeScreen.objApplyOnHaveACodescreen)) {
			click(AMDSubscibeScreen.objApplyOnHaveACodescreen, "Apply button");
		}
		waitTime(2000);
		if (verifyElementDisplayed(AMDSubscibeScreen.objInvalidPromoCodeText)) {
			String text = findElement(AMDSubscibeScreen.objInvalidPromoCodeText).getText();
			logger.info("Invalid Error Code : " + text + " is displayed");
			extent.extentLoggerPass("Code", "Invalid Error Code : " + text + " is displayed");
		} else {
			logger.error("Invalid Error Code text is NOT displayed");
			extent.extentLoggerFail("Code", "Invalid Error Code text is NOT displayed");
		}
		BackToLandingScreen();
	}
/**
 * @Note This method is used for validating Zeeplex consumption screen from search entry point.
 * @param usertype
 * @param contentTitle
 * @throws Exception
 */
	public void guest_SearchEntryPoint_ZeePlexConsumptionPage(String usertype, String contentTitle) throws Exception {
		if (usertype.equalsIgnoreCase("Guest")) {
			searchZEEPLEXContentAndPlay(contentTitle);
			boolean var = verifyElementIsNotDisplayed(AMDTVODComboOffer.objZeePlexLogoBelowThePlayer);
			if (var == true) {
				logger.info("ZeePlex logo below player is not displayed for TVOD plex content - Expected behaviour");
				extent.extentLoggerPass("ZEEPLEX content",
						"ZeePlex logo below player is not displayed for TVOD plex content - Expected behaviour");
			} else {
				logger.error("ZeePlex logo below player is displayed for TVOD plex content");
				extent.extentLoggerFail("ZEEPLEX content",
						"ZeePlex logo below player is displayed for TVOD plex content");
			}
			waitTime(3000);
			if (verifyElementExist(AMDConsumptionScreen.objContentName, "Content name in Consumption screen")) {
				logger.info("User is navigated to Consumption screen on clicking searched content: " + contentTitle);
				extent.extentLoggerPass("Consumption Screen",
						"User is navigated to Consumption screen on clicking searched content: " + contentTitle);
			} else {
				logger.error("User Fails navigate to Consumption screen on clicking searched content: " + contentTitle);
				extent.extentLoggerFail("Carousel",
						"User Fails navigate to Consumption screen on clicking searched content: " + contentTitle);
			}
			verifyElementExist(AMDConsumptionScreen.objContentName, "Content title in Consumption screen");
			verifyElementExist(AMDPlayerScreen.objcontentRating, "Meta data of searched content");
		} else {
			logger.info("Not applicable for this user");
			extent.extentLogger("Not Applicable", "Not applicable for this user");
		}
	}
/**
 * @Note This method is used to verify the Zeeplex consumption screen from Thumbnail click from plex tray in landing screen
 * @param usertype
 * @param tabName
 * @throws Exception
 */
	public void thumbhnailEntryPoint_ZeeplexConsumptionPage(String usertype, String tabName) throws Exception {
		extent.HeaderChildNode("Navigation to Zeeplex consumption page through Thumbhnail entry point");
		selectTopNavigationTab(tabName);
		waitTime(5000);
		swipeUntilFindElement(AMDHomePage.objFirstContentCardOfTray("ZEEPLEX"), "UP");
		click(AMDHomePage.objFirstContentCardOfTray("ZEEPLEX"), "Zeeplex conent");
		boolean var = verifyElementExist(AMDTVODComboOffer.objZeePlexLogoBelowThePlayer,
				"ZeePlex logo below the Player");
		if (var == true) {
			logger.info(usertype + " user can reach ZEEPLEX Consumption page from the Thumbnails from " + tabName
					+ " screen");
			extent.extentLoggerPass("ZEEPLEX content", usertype
					+ " user can reach ZEEPLEX Consumption page from the Thumbnails from " + tabName + " screen");
		} else {
			logger.error(usertype + " user can reach ZEEPLEX Consumption page from the Thumbnails from " + tabName
					+ " screen");
			extent.extentLoggerFail("ZEEPLEX content", usertype
					+ " user can reach ZEEPLEX Consumption page from the Thumbnails from " + tabName + " screen");
		}
	}
/**
 * @Note This method is used for verifying my transaction screen for plex screen.
 * @throws Exception
 */
	public void verifyMyTransactionForPLEXPlan() throws Exception {

		if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		} else {
			if (!verifyElementDisplayed(AMDMoreMenu.objMyTransactions)) {
				BackToLandingScreen();
				verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More Menu");
			}
		}
		waitTime(3000);
		if (verifyIsElementDisplayed(AMDMoreMenu.objMyTransactions)) {
			logger.info("My Transactions option is availabel on More button");
			extent.extentLoggerPass("MoreMenu Screen", "My Transactions option is availabel on More button");

		} else {
			logger.info("My Transactions option is not availabel on More button");
			extent.extentLoggerFail("MoreMenu Screen", "My Transactions option is not availabel on More button");
		}
		click(AMDMoreMenu.objMyTransactions, "My TransactionsOption");
		waitTime(2000);
		if (verifyIsElementDisplayed(AMDMoreMenu.objMyTransactionsHeader)) {
			logger.info("User navigated to My Transactions Page on tapping My Transactions");
			extent.extentLoggerPass("MyTransactions Screen",
					"User navigated to My Transactions Page on tapping My Transactions");
		} else {
			logger.info("User not navigated to My Transactions Page on tapping My Transactions");
			extent.extentLoggerFail("MyTransactions Screen",
					"User not navigated to My Transactions Page on tapping My Transactions");
		}
		if (checkElementExist(AMDTVODComboOffer.objZEEPLEXLogo, "ZEEPLEX logo")) {
			logger.info("ZEEPLEX logo is displayed");
			extent.extentLoggerPass("MyTransactions Screen", "ZEEPLEX logo is displayed");
		} else {
			logger.error("ZEEPLEX logo is NOT displayed");
			extent.extentLoggerFail("MyTransactions Screen", "ZEEPLEX logo is NOT displayed");
		}
		myTransactionsWithDetails();
		extent.HeaderChildNode("Verify Date of Transaction for every transaction done by the user");
		String TransactionDate = getDriver().findElement(AMDMoreMenu.objTransactionDate1).getText();
		logger.info(TransactionDate);
		if (checkElementExist(AMDMoreMenu.objTransactionDate1, "Transaction date")) {
			logger.info(
					TransactionDate + " : Date of Transaction is shown for the transactions done by the " + userType);
			extent.extentLoggerPass("MyTransactions Screen",
					TransactionDate + " :Date of Transaction is shown for the transactions done by the " + userType);
		} else {

			logger.info(TransactionDate + " : Date of Transaction is not shown for the transactions done by the "
					+ userType);
			extent.extentLoggerFail("MyTransactions Screen", TransactionDate
					+ " :Date of Transaction is not shown for the transactions done by the " + userType);
		}

		extent.HeaderChildNode("Verify My Transactions pack details");
		String TransactionPackName = getDriver().findElement(AMDMoreMenu.objTransactionPackName1).getText();
		logger.info(TransactionPackName);
		if (checkElementExist(AMDMoreMenu.objTransactionPackName1, "Transaction Pack name")) {
			logger.info(TransactionPackName + " : Transaction pack name is displayed for the " + userType);
			extent.extentLoggerPass("MyTransactions Screen",
					TransactionPackName + " : Transaction pack name is displayed for the " + userType);
		} else {

			logger.info(TransactionPackName + " : Transaction pack name is not displayed for the " + userType);
			extent.extentLoggerFail("MyTransactions Screen",
					TransactionPackName + " : Transaction pack name is not displayed for the " + userType);
		}

		String TransactionPackduration = getDriver().findElement(AMDMoreMenu.objTransactionPackDuration1).getText();
		logger.info(TransactionPackduration);
		if (checkElementExist(AMDMoreMenu.objTransactionPackDuration1, "Transaction Pack duration")) {
			logger.info(TransactionPackduration + " : Transaction pack duration is displayed for the " + userType);
			extent.extentLoggerPass("MyTransactions Screen",
					TransactionPackduration + " : Transaction pack duration is displayed for the " + userType);
		} else {

			logger.info(TransactionPackduration + " : Transaction pack duration is not displayed for the " + userType);
			extent.extentLoggerFail("MyTransactions Screen",
					TransactionPackduration + " : Transaction pack duration is not displayed for the " + userType);
		}

		String TransactionPackRental = getDriver().findElement(AMDMoreMenu.objTransactionPackRental1).getText();
		logger.info(TransactionPackRental);
		if (checkElementExist(AMDMoreMenu.objTransactionPackRental1, "Transaction PackRental")) {
			logger.info(TransactionPackRental + " : Transaction pack rental is displayed for the " + userType);
			extent.extentLoggerPass("MyTransactions Screen",
					TransactionPackRental + " : Transaction pack rental is displayed for the " + userType);
		} else {

			logger.info(TransactionPackRental + " : Transaction pack rental is not displayed for the " + userType);
			extent.extentLoggerFail("MyTransactions Screen",
					TransactionPackRental + " : Transaction pack rental is not displayed for the " + userType);
		}

		extent.HeaderChildNode("Verify Payment mode mentioned for the Transaction done by the user");
		String TransactionPackPaymentMode = getDriver().findElement(AMDMoreMenu.objTransactionPackPaymentMode1)
				.getText();
		logger.info(TransactionPackPaymentMode);
		if (checkElementExist(AMDMoreMenu.objTransactionPackPaymentMode1, "Transaction Pack PaymentMode")) {
			logger.info(
					TransactionPackPaymentMode + " : Transaction pack payment mode is displayed for the " + userType);
			extent.extentLoggerPass("MyTransactions Screen",
					TransactionPackPaymentMode + " : Transaction pack payment mode is displayed for the " + userType);
		} else {

			logger.info(TransactionPackPaymentMode + " : Transaction pack payment mode is not displayed for the "
					+ userType);
			extent.extentLoggerFail("MyTransactions Screen", TransactionPackPaymentMode
					+ " : Transaction pack payment mode is not displayed for the " + userType);
		}

		String TransactionPackCountryDetails = getDriver().findElement(AMDMoreMenu.objTransactionPackCountry1)
				.getText();
		logger.info(TransactionPackCountryDetails);
		if (checkElementExist(AMDMoreMenu.objTransactionPackCountry1, "Transaction Pack Country Details")) {
			logger.info(TransactionPackCountryDetails + " : Transaction pack Country details is displayed for the "
					+ userType);
			extent.extentLoggerPass("MyTransactions Screen", TransactionPackCountryDetails
					+ " : Transaction pack Country details is displayed for the " + userType);
		} else {

			logger.info(TransactionPackCountryDetails + " : Transaction pack Country details is not displayed for the "
					+ userType);
			extent.extentLoggerFail("MyTransactions Screen", TransactionPackCountryDetails
					+ " : Transaction pack Country details is not displayed for the " + userType);
		}

		String TransactionPackAutoRenewal = getDriver().findElement(AMDMoreMenu.objTransactionPackAutoRenewal1)
				.getText();
		logger.info(TransactionPackAutoRenewal);
		if (checkElementExist(AMDMoreMenu.objTransactionPackAutoRenewal1, "Transaction Pack Auto-renewal status")) {
			logger.info(TransactionPackAutoRenewal + " : Transaction pack Auto-renewal details is displayed for the "
					+ userType);
			extent.extentLoggerPass("MyTransactions Screen", TransactionPackAutoRenewal
					+ " : Transaction pack Auto-renewal details is displayed for the " + userType);
		} else {

			logger.info(TransactionPackAutoRenewal
					+ " : Transaction pack Auto-renewal details is not displayed for the " + userType);
			extent.extentLoggerFail("MyTransactions Screen", TransactionPackAutoRenewal
					+ " : Transaction pack Auto-renewal details is not displayed for the " + userType);
		}

		extent.HeaderChildNode("Verify status of Transaction is Shown according to the duration of the pack");
		String TransactionPackStatus = getDriver().findElement(AMDMoreMenu.objTransactionPackStatus1).getText();
		logger.info(TransactionPackStatus);
		if (checkElementExist(AMDMoreMenu.objTransactionPackStatus1, "Transaction Pack Status")) {
			logger.info(TransactionPackStatus + " : Transaction pack Status details is displayed for the " + userType);
			extent.extentLoggerPass("MyTransactions Screen",
					TransactionPackStatus + " : Transaction pack Status details is displayed for the " + userType);
		} else {

			logger.info(
					TransactionPackStatus + " : Transaction pack Status details is not displayed for the " + userType);
			extent.extentLoggerFail("MyTransactions Screen",
					TransactionPackStatus + " : Transaction pack Status details is not displayed for the " + userType);
		}

		extent.HeaderChildNode("Verify download Invoice CTA below My transactions");
		if (checkElementExist(AMDMoreMenu.objDownloadInvoice1, "Download invoice")) {
			logger.info("Download invoice CTA is displayed under My Transactions Screen");
			extent.extentLoggerPass("MyTransactions Screen",
					"Download invoice CTA is displayed under My Transactions Screen");
		} else {
			logger.info("Download invoice CTA is not displayed under My Transactions Screen");
			extent.extentLoggerFail("MyTransactions Screen",
					"Download invoice CTA is not displayed under My Transactions Screen");
		}
	}
/**
 * @note this method is used for Myrental screen verification in More screen.
 * @throws Exception
 */
	public void myRentalsScreenVerification() throws Exception {
		if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		} else {
			if (!verifyElementDisplayed(AMDTVODComboOffer.objMyRentalsOption)) {
				BackToLandingScreen();
				verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More Menu");
			}
		}
		waitTime(3000);
		if (verifyIsElementDisplayed(AMDTVODComboOffer.objMyRentalsOption)) {
			logger.info("My Rentals option is availabel on More button");
			extent.extentLoggerPass("MoreMenu Screen", "My Rentals option is availabel on More button");

		} else {
			logger.info("My Rentals option is not availabel on More button");
			extent.extentLoggerFail("MoreMenu Screen", "My Rentals option is not availabel on More button");
		}
		click(AMDTVODComboOffer.objMyRentalsOption, "My Rentals");
		waitTime(2000);
		if (verifyIsElementDisplayed(AMDTVODComboOffer.objMyRentalsTitle)) {
			logger.info("User navigated to My Rentals Page on tapping My Rentals");
			extent.extentLoggerPass("MyTransactions Screen", "User navigated to My Rentals Page on tapping My Rentals");
		} else {
			logger.info("User not navigated to My Rentals Page on tapping My Rentals");
			extent.extentLoggerFail("MyTransactions Screen",
					"User not navigated to My Rentals Page on tapping My Rentals");
		}
	}
/**
 * @note this method is used to valid the My rental screen for active rental user
 * @throws Exception
 */
	public void pLEXContentYetToWatch() throws Exception {

		extent.HeaderChildNode("Verify TVOD content details which user is yet to watch in My Rentals Screen");
		if (checkElementExist(AMDTVODComboOffer.objContentThumbnailInMyRentals, "Thumbnail")) {
			logger.info("Content thumbnail is displayed");
			extent.extentLoggerPass("My Rentals Screen", "Content thumbnail is displayed");
		} else {

			logger.info("Content thumbnail is not displayed");
			extent.extentLoggerFail("My Rentals Screen", "Content thumbnail is not displayed");
		}

		String Contenttile = getDriver().findElement(AMDTVODComboOffer.objContentTitleInMyRentals).getText();
		logger.info(Contenttile);
		if (checkElementExist(AMDTVODComboOffer.objContentTitleInMyRentals, "Content Title")) {
			logger.info(Contenttile + " : Content Title is displayed");
			extent.extentLoggerPass("My Rentals Screen", Contenttile + " : Content Title is displayed");
		} else {

			logger.info(Contenttile + " : Content Title is not displayed");
			extent.extentLoggerFail("My Rentals Screen", Contenttile + " : Content Title is not displayed");
		}

		String ReleasedBy = getDriver().findElement(AMDTVODComboOffer.objReleasedByInMyRentals).getText();
		logger.info(ReleasedBy);
		if (checkElementExist(AMDTVODComboOffer.objReleasedByInMyRentals, "Released by")) {
			logger.info(ReleasedBy + " : is displayed");
			extent.extentLoggerPass("My Rentals Screen", ReleasedBy + " : is displayed");
		} else {

			logger.info(ReleasedBy + " : is not displayed");
			extent.extentLoggerFail("My Rentals Screen", ReleasedBy + " : is not displayed");
		}

		String Packvalidity = getDriver().findElement(AMDTVODComboOffer.objPackValidityInMyRentals).getText();
		logger.info(Packvalidity);
		if (checkElementExist(AMDTVODComboOffer.objPackValidityInMyRentals, "Pack validity")) {
			logger.info(Packvalidity + " : pack validity is displayed");
			extent.extentLoggerPass("My Rentals Screen", Packvalidity + " : pack validity is displayed");
		} else {

			logger.info(Packvalidity + " : pack validity is not displayed");
			extent.extentLoggerFail("My Rentals Screen", Packvalidity + " : pack validity is not displayed");
		}

		extent.HeaderChildNode("Verify WatchNow CTA in My Rentals");
		if (checkElementExist(AMDTVODComboOffer.objWatchNowCTAinMyRentals, "WatchNow CTA")) {
			logger.info("Watch now CTA is displayed");
			extent.extentLoggerPass("My Rentals Screen", "Watch now CTA is displayed");
		} else {
			logger.info("Watch now CTA is not displayed");
			extent.extentLoggerFail("My Rentals Screen", "Watch now CTA is not displayed");
		}

	}
/**
 * @Note this method is used for the verifying my rentals screen for Expired TVOD content.
 * @throws Exception
 */
	public void plexExpiredContent() throws Exception {

		extent.HeaderChildNode("Verify Expired TVOD content details in My Rentals Screen");
		if (verifyElementDisplayed(AMDHomePage.objMoreMenu)) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		} else {
			if (!verifyElementDisplayed(AMDTVODComboOffer.objMyRentalsOption)) {
				BackToLandingScreen();
				verifyElementPresentAndClick(AMDHomePage.MoreMenuIcon, "More Menu");
			}
		}
		click(AMDTVODComboOffer.objMyRentalsOption, "My Rentals");

		if (checkElementExist(AMDTVODComboOffer.objContentThumbnailInMyRentals, "Thumbnail")) {
			logger.info("Content thumbnail is displayed");
			extent.extentLoggerPass("My Rentals Screen", "Content thumbnail is displayed");
		} else {

			logger.info("Content thumbnail is not displayed");
			extent.extentLoggerFail("My Rentals Screen", "Content thumbnail is not displayed");
		}

		String Contenttile = getDriver().findElement(AMDTVODComboOffer.objContentTitleInMyRentals).getText();
		logger.info(Contenttile);
		if (checkElementExist(AMDTVODComboOffer.objContentTitleInMyRentals, "Content Title")) {
			logger.info(Contenttile + " : Content Title is displayed");
			extent.extentLoggerPass("My Rentals Screen", Contenttile + " : Content Title is displayed");
		} else {

			logger.info(Contenttile + " : Content Title is not displayed");
			extent.extentLoggerFail("My Rentals Screen", Contenttile + " : Content Title is not displayed");
		}

		String ReleasedBy = getDriver().findElement(AMDTVODComboOffer.objReleasedByInMyRentals).getText();
		logger.info(ReleasedBy);
		if (checkElementExist(AMDTVODComboOffer.objReleasedByInMyRentals, "Released by")) {
			logger.info(ReleasedBy + " : is displayed");
			extent.extentLoggerPass("My Rentals Screen", ReleasedBy + " : is displayed");
		} else {

			logger.info(ReleasedBy + " : is not displayed");
			extent.extentLoggerFail("My Rentals Screen", ReleasedBy + " : is not displayed");
		}

		String Packvalidity = getDriver().findElement(AMDTVODComboOffer.objPackValidityInMyRentals).getText();
		logger.info(Packvalidity);
		if (checkElementExist(AMDTVODComboOffer.objPackValidityInMyRentals, "Pack validity")) {
			logger.info(Packvalidity + " : pack validity is displayed");
			extent.extentLoggerPass("My Rentals Screen", Packvalidity + " : pack validity is displayed");
		} else {

			logger.info(Packvalidity + " : pack validity is not displayed");
			extent.extentLoggerFail("My Rentals Screen", Packvalidity + " : pack validity is not displayed");
		}

	}
/**
 * @note This method is used to verify the Navigation to Zeeplex consumption page through Watchlist screen
 * @param userType
 * @param contentTitle
 * @throws Exception
 */
	public void watchlistEntryPoint_ZeeplexConsumptionPage(String userType, String contentTitle) throws Exception {
		extent.HeaderChildNode("Navigation to Zeeplex consumption page through Watchlist screen");
		click(AMDHomePage.MoreMenuIcon, "More Menu tab");
		waitTime(2000);
		click(AMDMoreMenu.objWatchlist, "Watchlist option");
		click(AMDUserSessionManagement.objMoviesTabUnderWatchList, "Movies Tab");
		boolean contentsInMoviesTab = verifyIsElementDisplayed(AMDUserSessionManagement.objcontentTitleInWatchList);
		if (contentsInMoviesTab == true) {
			main: for (int i = 0; i < 3; i++) {
				int totalContents = getDriver().findElements(AMDUserSessionManagement.objcontentTitleInWatchList)
						.size();
				for (int j = 1; j <= totalContents; j++) {
					String content = getDriver()
							.findElement(By.xpath(
									"(//*[@resource-id='com.graymatrix.did:id/txt_reminder_item_title'])[" + j + "]"))
							.getText();
					if (content.equalsIgnoreCase(contentTitle)) {
						getDriver().findElement(By.xpath(
								"(//*[@resource-id='com.graymatrix.did:id/txt_reminder_item_title'])[" + j + "]"))
								.click();
						boolean var = verifyElementExist(AMDTVODComboOffer.objZeePlexLogoBelowThePlayer,
								"ZeePlex logo below the Player");
						if (var == true) {
							logger.info("User is navigated to ZEEPLEX Consumption page.");
							extent.extentLoggerPass("ZEEPLEX content",
									"User is navigated to ZEEPLEX Consumption page.");
						} else {
							logger.error("User is not navigated to ZEEPLEX Consumption page.");
							extent.extentLoggerFail("ZEEPLEX content",
									"User is not navigated to ZEEPLEX Consumption page.");
						}
						break main;
					}
				}
				Swipe("UP", 1);
			}
		} else {
			verifyIsElementDisplayed(AMDUserSessionManagement.objNoContentInWatchlist, "Nothing to watch text");
		}
	}
/**
 * @note verification of AMA2-11279 ticket
 * @param userType
 * @throws Exception
 */
	public void verifyBackButtonFromPaymentScreen(String userType) throws Exception {
		// AMA2-11279
		extent.HeaderChildNode("AMA2-11279");
		logger.info("AMA2-11279");
		if (userType.contains("Guest")) {
			verifyElementExist(AMDHomePage.objSubscribeTeaser, "Buy Plan CTA");
			click(AMDHomePage.objSubscribeTeaser, "Buy Plan CTA");
			loginInSusbscribeScreen("NonSubscribedUser");
			verifyElementExist(AMDSubscibeScreen.objMakePaymentScreen, "Make payment screen");
			Back(1);
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Pack selection screen");
			Back(1);
			boolean value = verifyElementIsNotDisplayed(AMDOnboardingScreen.objBrowseForFreeBtn);
			System.out.println(value);
			if (value == true) {
				logger.info("User is navigated to Home landing screen as a logged in user");
				extentLoggerPass("Player", "User is navigated to Home landing screen as a logged in user");
				click(AMDHomePage.objMoreMenuBtn, "More menu");
				Swipe("UP", 2);
				click(AMDMoreMenu.objLogout, "Logout");
				click(AMDMoreMenu.objLogoutBtn, "Logout Button");
			} else {
				logger.error(
						"[AMA2-11279] On tapping device back button once user navigate back to pack selection screen & tapping device back again its navigating back to Intro screen");
				extentLoggerFail("Subscribe",
						"[AMA2-11279] On tapping device back button once user navigate back to pack selection screen & tapping device back again its navigating back to Intro screen");
				zeeApplicasterLoginForSettings(userType);
			}

		} else {
			logger.info("AMA2-11279 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-11279 : Not applicable for " + userType);
		}
	}
/**
 * @note defect validation of AMA2-11311
 * @param userType
 * @throws Exception
 */
	public void verifySubscribeIcon(String userType) throws Exception {
		// AMA2-11311
		extent.HeaderChildNode(
				"AMA2-11311 : Subscribe icon on header fails to hide on all landing screen post logging in with the subscribed account ");
		logger.info(
				"AMA2-11311 : Subscribe icon on header fails to hide on all landing screen post logging in with the subscribed account ");
		if (userType.contains("Guest")) {
			verifyElementPresentAndClick(AMDHomePage.objSubscribeTeaser, "Buy Plan Header");
			loginInSusbscribeScreen("SubscribedUser");
			verifyElementPresentAndClick(AMDSubscibeScreen.objexplorePremiumCTA, "Explore Buy Plan CTA");
			boolean booleanvalue = verifyElementIsNotDisplayed(AMDHomePage.objSubscribeTeaser);
			if (booleanvalue == true) {
				logger.info("Buy Plan icon is not displayed on the header post login as subscribed user");
				extentLoggerPass("Subscribe",
						"Buy Plan icon is not displayed on the header post login as subscribed user");
			} else {
				logger.error(
						"[AMA2-11311] Buy Plan icon on the header is not getting hide post logging into the subscribed account");
				extentLoggerFail("Subscribe",
						"[AMA2-11311] Buy Plan icon on the header is not getting hide post logging into the subscribed account");
			}
			click(AMDHomePage.objMoreMenuBtn, "More menu");
			Swipe("UP", 2);
			click(AMDMoreMenu.objLogout, "Logout");
			click(AMDMoreMenu.objLogoutBtn, "Logout Button");
		} else {
			logger.info("AMA2-11311 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-11311 : Not applicable for " + userType);
		}
	}
/**
 * @note defect validation of AMA2-11572
 * @param userType
 * @throws Exception
 */
	public void verifyExplorePremiiumOffline(String userType) throws Exception {
		// AMA2-11572
		extent.HeaderChildNode(
				"AMA2-11572 : Only Explore Premium Text is displayed in Plan selection if user reaches Plan selection Screen without internet");
		logger.info(
				"AMA2-11572 : Only Explore Premium Text is displayed in Plan selection if user reaches Plan selection Screen without internet");
		if (!userType.contains("SubscribedUser")) {
			verifyElementPresentAndClick(AMDHomePage.objSubscribeTeaser, "Buy Plan CTA");
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscription screen");
			// Turning wifi off
			TurnOFFWifi();
			if (getOEMName.equalsIgnoreCase("Sony")) {
				wifi_TurnOFFnON();
			}
			waitTime(3000);
			Back(1);
			click(AMDHomePage.objSubscribeTeaser, "Buy Plan CTA");
			waitTime(3000);
			boolean value3 = verifyElementIsNotDisplayed(AMDOfflineScreen.objTryAgain);
			boolean value4 = verifyElementIsNotDisplayed(AMDOfflineScreen.objYouAreOffline);
			if (value3 | value4) {
				logger.error(
						"[AMA2-11572] User is Unable to see the message Your arent connected to the internet along with functional Retry button");
				extentLoggerFail("offline",
						"[AMA2-11572] User is Unable to see the message Your arent connected to the internet along with functional Retry button");
			} else {
				logger.info(
						"User is able to see the message Your arent connected to the internet along with functional Retry button");
				extent.extentLoggerPass("offline",
						"User is able to see the message Your arent connected to the internet along with functional Retry button");
			}
			// Turning wifi ON
			TurnONWifi();
			if (getOEMName.equalsIgnoreCase("Sony")) {
				wifi_TurnOFFnON();
			}
			waitTime(3000);
			Back(1);
		} else {
			logger.info("AMA2-11572 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-11572 : Not applicable for " + userType);
		}

	}
/**
 * @Note defect validation of AMA2-11278
 * @param userType
 * @throws Exception
 */
	public void verifyNegativeRoundOffPrice(String userType) throws Exception {
		// AMA2-11278
		extent.HeaderChildNode(
				"AMA2-11278 :In differential amount negative round off value is being displayed after INR while upgrading to 499");
		logger.info(
				"AMA2-11278 :In differential amount negative round off value is being displayed after INR while upgrading to 499");
		if (!userType.contains("SubscribedUser")) {
			click(AMDHomePage.objSubscribeTeaser, "Buy Plan CTA");
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscription screen");
			waitTime(3000);
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
			waitTime(3000);
			click(AMDLoginScreen.objEmailIdField, "Email field");
			hideKeyboard();
			waitTime(3000);
			type(AMDLoginScreen.objEmailIdField, "js1@mailnesia.com", "Email Field");
			waitTime(3000);
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
			waitTime(3000);
			click(AMDLoginScreen.objEmailIdField, "Password field");
			hideKeyboard();
			waitTime(3000);
			type(AMDLoginScreen.objPasswordField, "welcome", "Password field");
			waitTime(3000);
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
			waitTime(5000);
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Upgrade CTA");
			if (verifyElementDisplayed(AMDSubscibeScreen.objRoundOffValue)) {
				verifyElementExist(AMDSubscibeScreen.objRoundOffValue, "Round off value");
				String textValue = findElement(AMDSubscibeScreen.objRoundOffValue).getText();
				if (textValue.contains("-")) {
					logger.error(
							"[AMA2-11278] In differential amount negative round off value is being displayed after INR while upgrading to 499");
					extent.extentLoggerFail("Subscribe",
							"[AMA2-11278] In differential amount negative round off value is being displayed after INR while upgrading to 499");
				} else {
					logger.info(
							"In Differential amount section minus round off value is not displayed while upgrading to 499");
					extent.extentLoggerPass("Subscribe",
							"In Differential amount section minus round off value is not displayed while upgrading to 499");
				}
			} else {
				logger.info("Round Off value is not displayed");
			}
			Back(2);
			click(AMDHomePage.objMoreMenuBtn, "More menu");
			Swipe("UP", 2);
			click(AMDMoreMenu.objLogout, "Logout");
			click(AMDMoreMenu.objLogoutBtn, "Logout Button");
		} else {
			logger.info("AMA2-11278 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-11278 : Not applicable for " + userType);
		}

	}
/**
 * @Note defect validation of AMA2 11873
 * @param userType
 * @throws Exception
 */
	public void verifyBuyPlanForEduauraa(String userType) throws Exception {

		// AMA2-11873
		extent.HeaderChildNode(
				"AMA2-11873 :On Playing eduauraa content user is getting Get Premium CTA on Player post content finishes");
		logger.info(
				"AMA2-11873 :On Playing eduauraa content user is getting Get Premium CTA on Player post content finishes");
		if (!userType.contains("SubscribedUser")) {
			selectTopNavigationTab("Eduauraa");
			waitForElementAndClickIfPresent(AMDHomePage.objPlayBtn, 10, "Eduauraa content");
			verifyElementExist(AMDConsumptionScreen.objClaimOfferCTA, "Claim Offer CTA");
			waitTime(3000);
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			scrubProgressBarTillEnd(AMDPlayerScreen.objProgressBar);
			if ((verifyElementDisplayed(AMDConsumptionScreen.objGetPremiumCTA))
					& (verifyElementDisplayed(AMDConsumptionScreen.objSkipctaOnPlayer))) {
				logger.error(
						"[AMA2-11873] User is getting 'To watch this Premium content “Buy Plan CTA“ and Skip' for Eduauraa content");
				extent.extentLoggerFail("Subscribe",
						"[AMA2-11873] User is getting 'To watch this Premium content “Buy Plan CTA“ and Skip' for Eduauraa content");
			} else {
				logger.info(
						"User is Not getting 'To watch this Premium content “Buy Plan CTA“ and Skip' for Eduauraa content- Expected");
				extent.extentLoggerPass("Subscribe",
						"User is Not getting 'To watch this Premium content “Buy Plan CTA“ and Skip' for Eduauraa content- Expected");
			}

		} else {
			logger.info("AMA2-11873 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-11873 : Not applicable for " + userType);
		}
	}
/**
 * @note defect validation of AMA2-11883
 * @param userType
 * @throws Exception
 */
	public void verifyDiscountAmount(String userType) throws Exception {
		// AMA2-11883
		extent.HeaderChildNode(
				"AMA2-11883 :Actual amount' is displayed instead of 'Discounted amount' on the make payment screen, Post applying the Promo codes");
		logger.info(
				"AMA2-11883 :Actual amount' is displayed instead of 'Discounted amount' on the make payment screen, Post applying the Promo codes");
		if (!userType.contains("SubscribedUser")) {
			verifyElementPresentAndClick(AMDHomePage.objSubscribeTeaser, "Buy Plan CTA");
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscription screen");
			verifyElementExist(AMDSubscibeScreen.objPlanPriceValue, "Plan Price value");
			Swipe("UP", 1);
			verifyElementPresentAndClick(AMDSubscibeScreen.objHaveACodeCTA, "Have a code");
			verifyElementPresentAndClick(AMDSubscibeScreen.objEnterACodeEditFiled, "Enter a code field");
			hideKeyboard();
			type(AMDSubscibeScreen.objEnterACodeEditFiled, "zee5scb", "Enter a code field");
			verifyElementPresentAndClick(AMDSubscibeScreen.objApplyOnHaveACodescreen, "Apply CTA");
			verifyElementExist(AMDSubscibeScreen.objPlanPriceValue, "Discounted Plan Price value");
			String pricevalue1 = findElement(AMDSubscibeScreen.objPlanPriceValue).getText();
			System.out.println(pricevalue1);
			if (userType.equals("Guest")) {
				loginInSusbscribeScreen("NonSubscribedUser");
			}
			waitTime(3000);
			verifyElementExist(AMDSubscibeScreen.objMakePaymentScreen, "Payment Screen");
			verifyElementExist(AMDSubscibeScreen.objPriceValueOnPaymentScreen, "Plan price on payment screen");
			String pricevalue2 = findElement(AMDSubscibeScreen.objPriceValueOnPaymentScreen).getText();
			System.out.println(pricevalue2);
			if (pricevalue1.equals(pricevalue2)) {
				logger.info(
						"The discounted amount is displayed on the make a payment screen, Post applying the Promo code");
				extent.extentLoggerPass("Subscribe",
						"The discounted amount is displayed on the make a payment screen, Post applying the Promo code");
			} else {
				logger.error(
						"[AMA2-11883]'Actual amount' is displayed instead of 'Discounted amount' on the make payment screen");
				extent.extentLoggerFail("Subscribe",
						"[AMA2-11883] 'Actual amount' is displayed instead of 'Discounted amount' on the make payment screen");
			}
			Back(2);
			if (userType.equals("Guest")) {
				click(AMDHomePage.objMoreMenuBtn, "More menu");
				Swipe("UP", 2);
				click(AMDMoreMenu.objLogout, "Logout");
				click(AMDMoreMenu.objLogoutBtn, "Logout Button");
				Back(1);
			}
		} else {
			logger.info("AMA2-11883 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-11883 : Not applicable for " + userType);
		}
	}
/**
 * @Name AMA2-14908 defect validation
 * @param userType
 * @throws Exception
 */
	public void accountInfoPopupDefect(String userType) throws Exception {
		// AMA2-14908
		extent.HeaderChildNode(
				"AMA2-14908 :[AMD] - Account Info popup is getting displayed again post tapping create account cta during guest checkout subscription journey");
		logger.info(
				"AMA2-14908 :[AMD] - Account Info popup is getting displayed again post tapping create account cta during guest checkout subscription journey");
		if (userType.equalsIgnoreCase("Guest")) {
			waitTime(4000);
			verifyElementExist(AMDHomePage.objSubscribeTeaser, "Buy Plan CTA on Home landing screen");
			click(AMDHomePage.objSubscribeTeaser, "Buy Plan CTA on Home landing screen");
			waitTime(4000);
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe screen");
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
			waitTime(2000);
			verifyElementExist(AMDSubscibeScreen.objAccountInfoScreen, "Account info popup");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			hideKeyboard();
			waitTime(3000);
			String pEmailID = generateRandomString(5) + "@gmail.com";
			type(AMDLoginScreen.objEmailIdField, pEmailID, "Email Field");
			waitTime(3000);
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
			waitTime(3000);
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Password field");
			hideKeyboard();
			waitTime(3000);
			type(AMDLoginScreen.objPasswordField, "123456", "Password field");
			waitTime(3000);
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
			waitTime(4000);
			boolean value = verifyElementExist(AMDSubscibeScreen.objMakePaymentScreen, "Make payment screen");
			if (value == true) {
				logger.info("User is navigated to Payment screen");
				extent.extentLoggerPass("Subscribe", "User is navigated to Payment screen");
			} else {
				logger.error(
						"[AMA2-14908] User fails to navigate to payment screen,instead Account info popup is displayed");
				extent.extentLoggerFail("Subscribe",
						"[AMA2-14908] User fails to navigate to payment screen,instead Account info popup is displayed");
			}

		} else {
			logger.info("AMA2-14908 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-14908 : Not applicable for " + userType);
		}
	}
/**
 * @note defect AMA2-13470 validation
 * @param userType
 * @throws Exception
 */
	@SuppressWarnings("unused")
	public void verifyLogoutAndAuthenticateDeviceOptions(String userType) throws Exception {
		// AMA2-13470
		extent.HeaderChildNode(
				"AMA2-13470 :Logout and Authenticate Device options are getting displayed in the More section for Guest user even after logging out of the account from More screen");
		logger.info(
				"AMA2-13470 :Logout and Authenticate Device options are getting displayed in the More section for Guest user even after logging out of the account from More screen");
		if (!userType.equalsIgnoreCase("Guest")) {
			waitTime(3000);
			zNALogoutMethod();
			click(AMDHomePage.objMoreMenu, "More");
			Swipe("UP", 2);
			extent.HeaderChildNode("Verify Logout option for Guest user after logging out from More Screen");
			boolean value = verifyElementIsNotDisplayed(AMDHomePage.objLogout);
			if (value == true) {
				logger.info("Logout option is not displayed for Guest user after logging out of the account");
				extent.extentLoggerPass("MoreScreen",
						"Logout option is not displayed for Guest user after logging out of the account");
			} else {
				logger.error(
						"[AMA2-13470] Logout option are getting displayed in the More section for Guest user even after logging out of the account from More screen");
				extent.extentLoggerFail("MoreScreen",
						"Logout option are getting displayed in the More section for Guest user even after logging out of the account from More screen");
			}
			extent.HeaderChildNode(
					"Verify Authenticate Device option for Guest user after logging out from More Screen");
			waitTime(2000);
			click(AMDMoreMenu.objSettings, "Settings option");
			Swipe("UP", 2);
			boolean value1 = verifyElementIsNotDisplayed(AMDSettingsScreen.objAuthenticateDevice);
			if (value == true) {
				logger.info(
						"Authenticate device option is not displayed for Guest user after logging out of the account");
				extent.extentLoggerPass("MoreScreen",
						"Authenticate device option is not displayed for Guest user after logging out of the account");
			} else {
				logger.error(
						"[AMA2-13470] Authenticate device option are getting displayed in the More section for Guest user even after logging out of the account from More screen");
				extent.extentLoggerFail("MoreScreen",
						"Authenticate device option are getting displayed in the More section for Guest user even after logging out of the account from More screen");
			}

		} else {
			logger.info("AMA2-13470 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-13470 : Not applicable for " + userType);
		}
	}
/**
 * 
 * @param userType
 * @throws Exception
 */
	public void verifyMyTransactionOption(String userType) throws Exception {
		// AMA2-13459
		extent.HeaderChildNode(
				"AMA2-13459 :Account specific - App crashes on tapping My transactions option from More screen");
		logger.info("AMA2-13459 :Account specific - App crashes on tapping My transactions option from More screen");
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			zNALogoutMethod();
			click(AMDHomePage.objMoreMenu, "More");
			click(AMDMoreMenu.objProfile, "Profile");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, "test50@android.co", "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, "123456", "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(5000);
			click(AMDHomePage.objMoreMenu, "More");
			click(AMDMoreMenu.objMyTransactions, "My Transactions option");
			waitTime(5000);
			boolean value1 = verifyElementExist(AMDMoreMenu.objMyTransactionsHeader, "My Transactions header");
			boolean value2 = verifyElementExist(AMDMoreMenu.objTransactionDate, "Transaction date");
			if ((value1 == true) && (value2 == true)) {
				logger.info("User is navigated to My transactions screen");
				extent.extentLoggerPass("MoreScreen", "User is navigated to My transactions screen");
			} else {
				logger.error(
						"[AMA2-13459] User Fails to navigate to My transactions screen and Transaction details are not displayed");
				extent.extentLoggerFail("MoreScreen",
						"[AMA2-13459] User Fails to navigate to My transactions screen and Transaction details are not displayed");
			}
		} else {
			logger.info("AMA2-13459 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-13459 : Not applicable for " + userType);
		}
	}
/**
 * @note AMA2 15780 defect validation
 * @param userType
 * @throws Exception
 */
	public void verifyGoogleIconInSubscriptionScreen(String userType) throws Exception {
		// AMA2-15780
		extent.HeaderChildNode(
				"AMA2-15780 :User fails to Login and navigates back to previous screen from where Subscription journey has been initiated during Guest Checkout for Google login method");
		logger.info(
				"AMA2-15780 :User fails to Login and navigates back to previous screen from where Subscription journey has been initiated during Guest Checkout for Google login method");
		if (userType.equalsIgnoreCase("Guest")) {
			waitTime(4000);
			verifyElementExist(AMDHomePage.objSubscribeTeaser, "Buy Plan CTA on Home landing screen");
			click(AMDHomePage.objSubscribeTeaser, "Buy Plan CTA on Home landing screen");
			waitTime(4000);
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe screen");
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
			waitTime(2000);
			verifyElementExist(AMDSubscibeScreen.objGoogleIcon, "Google icon on Account Info screen");
			click(AMDSubscibeScreen.objGoogleIcon, "Google icon on Account Info screen");
			waitTime(6000);
			if (checkElementExist(AMDLoginScreen.objGmailSignIn, "Gmail Sign In")) {
				verifyElementPresentAndClick(AMDLoginScreen.objGmailEmailField, "Email Field");
				type(AMDLoginScreen.objGmailEmailField, "zeetest55@gmail.com", "Email Field");
				verifyElementPresentAndClick(AMDLoginScreen.objGmailNextBtn, "Next Button");
				verifyElementPresentAndClick(AMDLoginScreen.objGmailPasswordField, "Password Field");
				type(AMDLoginScreen.objGmailPasswordField, "zeetest123", "Password Field");
				verifyElementPresentAndClick(AMDLoginScreen.objGmailNextBtn, "Next Button");

				if (checkElementExist(AMDLoginScreen.objGmailAddPhoneNumber, "Add Phone Number")) {
					verifyElementPresentAndClick(AMDLoginScreen.objSkipBtn, "Skip Button");
				}
				if (checkElementExist(AMDLoginScreen.objAgreeBtn, "Agree Button")) {
					click(AMDLoginScreen.objAgreeBtn, "Agree Button");
				}

				if (checkElementExist(AMDLoginScreen.objAcceptBtn, "Accept Button")) {
					click(AMDLoginScreen.objAcceptBtn, "Accept Button");
				}
			}

			if (checkElementExist(AMDLoginScreen.objGmailAccount, "Gmail Account")) {
				click(AMDLoginScreen.objGmailAccount, "Gmail Account");
				waitTime(6000);
			}
			waitTime(6000);
			boolean value = verifyElementIsNotDisplayed(AMDSubscibeScreen.objMakePaymentScreen);
			if (value == true) {
				logger.error("[AMA2-15780] User Fails to navigate to Make payment screen post Google login");
				extent.extentLoggerFail("MoreScreen",
						"[AMA2-15780] User Fails to navigate to Make payment screen post Google login");
			} else {
				logger.info("User is navigated to Make payment screen post Google login");
				extent.extentLoggerPass("MoreScreen", "User is navigated to Make payment screen post Google login");
			}
		} else {
			logger.info("AMA2-15780 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-15780 : Not applicable for " + userType);
		}
	}
/**
 * @note AMA2 15869 defect validation
 * @param userType
 * @param tabName
 * @throws Exception
 */
	public void downloadIconValidation_NetworkInterupption(String userType, String tabName) throws Exception {
		extent.HeaderChildNode(
				"AMA2-15869: Download completed' icon is getting displayed on the consumption screen even though download has not completed, post network interruption");
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			selectTopNavigationTab(tabName);
			waitTime(10000);
			click(AMDHomePage.objCarouselTitle1, "Carousal card");
			waitTime(5000);
			String consumptionScreenTitle = getText(AMDHomePage.objConsumptionScreenTitle);
			verifyElementPresentAndClick(AMDDownloadPage.objDownloadIcon, "Download button");
			waitTime(2000);
			downloadVideoQualityPopUp(pVideoQuality, true);
			waitTime(3000);
			verifyElementExist(AMDDownloadPage.objDownloadingCircularBar, "Downloading Icon");
			TurnOFFWifi();
			Back(1);
			TurnONWifi();
			waitForElementAndClickIfPresent(AMDHomePage.objContentTitle(consumptionScreenTitle), 6, "Carousel content");
			waitTime(10000);
			boolean var1 = verifyIsElementDisplayed(AMDDownloadPage.objDownloadingCircularBar, "Downloading Icon");
			boolean var2 = verifyIsElementDisplayed(AMDDownloadPage.objDownloadedIcon, "Downloaded icon");
			Back(1);
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			if (verifyIsElementDisplayed(AMDDownloadPage.objDownloadErrorText, "Download failed text")) {
				if (var1 == true) {
					logger.error("Download is in progress state in consumption page");
					extent.extentLoggerFail("Download", "Download is in progress state in consumption page");
				} else if (var2 == true) {
					logger.error("Download is completed in consumption page");
					extent.extentLoggerFail("Download", "Download is completed in consumption page");
				}
			} else {
				if (var1 == true) {
					logger.info("Download is in progress state in consumption page");
					extent.extentLoggerPass("Download", "Download is in progress state in consumption page");
				} else if (var2 == true) {
					logger.info("Download is completed in consumption page");
					extent.extentLoggerPass("Download", "Download is completed in consumption page");
				}
			}
		} else {
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not Applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note AMA2 15782 defect validation
 * @param userType
 * @throws Exception
 */
	public void contentPlayBack_afterTappingReplayIcon(String userType) throws Exception {
		extent.HeaderChildNode(
				"AMA2-15782: Latest show content playback is initiated on tapping reply icon from the player post setting the auto play as off.");
		click(AMDHomePage.MoreMenuIcon, "More menu icon");
		waitTime(5000);
		Swipe("UP", 1);
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings option");
		String elementAutoPlayToggleStatus = getText(AMDMoreMenu.objVideo_Autoply);
		if (elementAutoPlayToggleStatus.equalsIgnoreCase("ON")) {
			click(AMDMoreMenu.objVideo_Autoply, "Auto play option");
		}
		Back(2);
		selectTopNavigationTab("TV Shows");
		click(AMDHomePage.objCarouselTitle1, "Carousal card");
		waitTime(3000);
		PartialSwipeInConsumptionScreen("UP", 1);
		click(AMDGenericObjects.objViewAllBtn("Up Next"), "View All icon of Up Next tray");
		getDriver().findElement(By.xpath(
				"(//*[@resource-id='com.graymatrix.did:id/cell_center_container']/child::*[@class='android.widget.ImageView'])[5]"))
				.click();
		String consumptionScreenTitle1 = null;
		waitTime(5000);
		consumptionScreenTitle1 = getText(AMDHomePage.objConsumptionScreenTitle);
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			waitForAdToFinishInAmd();
			registerPopUpClose();
			completeProfilePopUpClose(userType);
		}
		if (verifyIsElementDisplayed(AMDPlayerScreen.objReplayIconOnPlayer)) {
			click(AMDPlayerScreen.objReplayIconOnPlayer, "Replay icon");
		} else {

			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objPauseIcon)) {
				click(AMDPlayerScreen.objPlayerScreen, "player screen");
			}
			click(AMDPlayerScreen.objPauseIcon, "Pause");

			WebElement element = getDriver().findElement(AMDPlayerScreen.objProgressBar);
			String xDuration = getAttributValue("x", AMDPlayerScreen.objTotalDuration);
			int endX = Integer.parseInt(xDuration) - 30;
			SwipeAnElement(element, endX, 0);
			waitTime(5000);

			if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
				waitForAdToFinishInAmd();
				if (verifyElementIsNotDisplayed(AMDPlayerScreen.objPlay)) {
					if (verifyElementIsNotDisplayed(AMDPlayerScreen.objReplayIconOnPlayer)) {
						click(AMDPlayerScreen.objPlayerScreen, "player screen");
						if (verifyIsElementDisplayed(AMDPlayerScreen.objPlay)) {
							click(AMDPlayerScreen.objPlay, "Play icon");
							click(AMDPlayerScreen.objReplayIconOnPlayer, "Replay icon");
						} else if (verifyIsElementDisplayed(AMDPlayerScreen.objReplayIconOnPlayer)) {
							click(AMDPlayerScreen.objReplayIconOnPlayer, "Replay icon");
						}
					} else {
						click(AMDPlayerScreen.objReplayIconOnPlayer, "Replay icon");
					}

				} else {
					click(AMDPlayerScreen.objPlay, "Play icon");
					click(AMDPlayerScreen.objReplayIconOnPlayer, "Replay icon");
				}

			} else {
				if (verifyElementIsNotDisplayed(AMDPlayerScreen.objPlay)) {
					if (verifyElementIsNotDisplayed(AMDPlayerScreen.objReplayIconOnPlayer)) {
						click(AMDPlayerScreen.objPlayerScreen, "player screen");
						if (verifyIsElementDisplayed(AMDPlayerScreen.objPlay)) {
							click(AMDPlayerScreen.objPlay, "Play icon");
							click(AMDPlayerScreen.objReplayIconOnPlayer, "Replay icon");
						} else if (verifyIsElementDisplayed(AMDPlayerScreen.objReplayIconOnPlayer)) {
							click(AMDPlayerScreen.objReplayIconOnPlayer, "Replay icon");
						}
					} else {
						click(AMDPlayerScreen.objReplayIconOnPlayer, "Replay icon");
					}

				} else {
					click(AMDPlayerScreen.objPlay, "Play icon");
					click(AMDPlayerScreen.objReplayIconOnPlayer, "Replay icon");
				}
			}
		}
		waitTime(10000);
		String consumptionScreenTitle2 = getText(AMDHomePage.objConsumptionScreenTitle);
		if (consumptionScreenTitle1.equalsIgnoreCase(consumptionScreenTitle2)) {
			logger.info("Same content playback is initiated on tapping reply icon on the player.");
			extent.extentLoggerPass("content",
					"Same content playback is initiated on tapping reply icon on the player.");
		} else {
			logger.error("Same content playback is not initiated on tapping reply icon on the player.");
			extent.extentLoggerFail("content",
					"[AMA2-15782] - Same content playback is not initiated on tapping reply icon on the player.");
		}
	}
/**
 * @note AMA2 15766 defect validation
 * @param userType
 * @param tabName
 * @throws Exception
 */
	public void navigationToEduauraaWeb(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("AMA2-15766: error message is getting displayed post redirecting to Eduauraa Web");
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			selectTopNavigationTab(tabName);
			click(AMDHomePage.objCarouselTitle1, "Carousal card");
			click(AMDConsumptionScreen.objGoToEduauraaCTA, "Go to Eduauraa CTA");
			click(AMDOnboardingScreen.objExitPopUp_ConfirmCTA, "Confirm CTA on Exit popUp");
			waitTime(10000);
			getDriver().context("WEBVIEW_1");
			System.out.println(getDriver().getContext());

			boolean var1 = verifyIsElementDisplayed(AMDConsumptionScreen.objEduauraaWelcomePageOrHomePageInWeb);
			if (var1 == true) {
				logger.info("User is navigated to Eduauraa welcome page or Home page");
				extent.extentLoggerPass("Eduauraa", "User is navigated to Eduauraa welcome page or Home page");
			} else {
				logger.error("Error message is displayed post redirecting to Eduauraa Web");
				extent.extentLoggerFail("Eduauraa", "Error message is displayed post redirecting to Eduauraa Web");
			}
			waitTime(5000);
			Back(1);
			waitTime(10000);
			getDriver().context("NATIVE_APP");
			System.out.println(getDriver().getContext());
		} else {
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not Applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note AMA2-11866 defect validation
 * @param userType
 * @param tabName
 * @throws Exception
 */
	public void contentPlayBackInBackGroundValidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode(
				"AMA2-11866: Content Playback continues to play in background post tapping on 'View all' button of all trays in consumption screen");
		selectTopNavigationTab(tabName);
		waitTime(5000);
		click(AMDHomePage.objCarouselTitle1, "Carousal card");
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			waitForAdToFinishInAmd();
			registerPopUpClose();
			completeProfilePopUpClose(userType);
		}
		waitTime(15000);

		if (verifyElementIsNotDisplayed(AMDPlayerScreen.objPauseIcon)) {
			click(AMDPlayerScreen.objPlayerScreen, "player screen");
		}
		click(AMDPlayerScreen.objPauseIcon, "Pause");

		scrubVideoToBegining(AMDPlayerScreen.objProgressBar);

		String time1 = getText(AMDPlayerScreen.objTimer);
		int elapsedTime1 = timeToSec(time1);
		logger.info("Elapsed time before clicking View All button of a tray : " + elapsedTime1);
		extentLogger("timer", "Elapsed time before clicking View All button of a tray : " + elapsedTime1);

		click(AMDPlayerScreen.objPlayIcon, "Play icon");
		PartialSwipeInConsumptionScreen("UP", 1);
		click(AMDGenericObjects.objViewAllBtn("Up Next"), "View All icon of tray");
		waitTime(3000);
		Swipe("UP", 2);
		Swipe("DOWN", 2);
		Back(1);
		if (verifyElementIsNotDisplayed(AMDPlayerScreen.objPauseIcon)) {
			click(AMDPlayerScreen.objPlayerScreen, "player screen");
		}
		click(AMDPlayerScreen.objPauseIcon, "Pause");

		String time2 = getText(AMDPlayerScreen.objTimer);
		int elapsedTime2 = timeToSec(time2);
		logger.info("Elapsed time after navigating back from Listing screen : " + elapsedTime2);
		extentLogger("timer", "Elapsed time after navigating back from Listing screen : " + elapsedTime2);

		if (elapsedTime2 > elapsedTime1) {
			logger.error(
					"Playback continued in background post tapping on View all button all trays in consumption screen.");
			extent.extentLoggerFail("playback",
					"[AMA2-11866] - Playback continued in background post tapping on View all button all trays in consumption screen.");
		} else {
			logger.info(
					"Content playback is stoped, post tapping on view all button and listing screen should be displayed");
			extent.extentLoggerPass("playback",
					"Content playback is stoped, post tapping on view all button and listing screen should be displayed");
		}
	}
/**
 * @note AMA2 11879 defect validation
 * @param userType
 * @throws Exception
 */
	public void accountInfoValidationInPaymentPage(String userType) throws Exception {
		extent.HeaderChildNode(
				"AMA2-11879: Dummy email id is displayed in Account info on payment screen when user logs in with mobile number while purchasing /upgrading pack");
		if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			click(AMDHomePage.objSubscribeIcon, "Buy Plan");
			Swipe("UP", 1);
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button in Subscription page");
			String mobileNumber = getText(AMDSubscibeScreen.objUserEmailIdOrPhnNoInPaymentPage);
			if (mobileNumber.contains("dummy")) {
				logger.error("dummy email id is displayed in the account info on the payment screen");
				extent.extentLoggerFail("emailID",
						"[AMA2-11879] - dummy email id is displayed in the account info on the payment screen");
			} else {
				logger.info(
						"User details as mentioned by user mobile number is displayed in the Account info of payment screen");
				extent.extentLoggerPass("emailID",
						"User details as mentioned by user mobile number is displayed in the Account info of payment screen");
			}

		} else {
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not Applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note AMA2 15465 defect validation
 * @param contentName
 * @throws Exception
 */
	public void audioLanguageValidation(String contentName) throws Exception {
		extent.HeaderChildNode(
				"AMA2-15465: Audio language options are non functional in the 'Audio language' popup displayed in the consumption screen for the contents which has multiple Audio languages");
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName, "Search box");
		hideKeyboard();
		click(AMDSearchScreen.objMoviesTabInSearchResult, "Movies tab");
		waitTime(6000);
		click(AMDSearchScreen.objFirstSearchResult, "Search result");
		waitTime(5000);
		String audioLang1 = getText(AMDConsumptionScreen.objCurrentAudioLanguage);
		click(AMDConsumptionScreen.objCurrentAudioLanguage, "Selected audio language");
		String lang1 = getText(AMDConsumptionScreen.objSubtitleAndAudioLangItems(1));
		if (lang1.equalsIgnoreCase(audioLang1)) {
			click(AMDConsumptionScreen.objSubtitleAndAudioLangItems(2), "Audio language");
		} else {
			click(AMDConsumptionScreen.objSubtitleAndAudioLangItems(1), "Audio language");
		}
		waitTime(3000);
		String audioLang2 = getText(AMDConsumptionScreen.objCurrentAudioLanguage);
		if (audioLang2.equalsIgnoreCase(audioLang1)) {
			logger.error("Audio language options are non functional");
			extent.extentLoggerFail("Audio language", "[AMA2-15465] - Audio language options are non functional");
		} else {
			logger.info("Audio language options are functional");
			extent.extentLoggerPass("Audio language", "Audio language options are functional");
		}
	}
/**
 * @note AMA2-12127 defect validation
 * @throws Exception
 */
	public void verifyUpcomingContent() throws Exception {
		// AMA2-12127
		extent.HeaderChildNode(
				"AMA2-12127 :Upcoming contents fails to display & 'You aren't connected to the internet.' with Retry cta is displayed post navigating to upcoming screen");
		logger.info(
				"AMA2-12127 :Upcoming contents fails to display & 'You aren't connected to the internet.' with Retry cta is displayed post navigating to upcoming screen");
		selectContentLang_MoreMenu2("Hindi,English,Kannada");
		waitTime(5000);
		verifyElementPresentAndClick(AMDHomePage.objUpcoming, "Upcoming tab");
		waitForElementDisplayed(AMDUpcomingPage.objContentCardInfo, 10);
		int cardInfo = findElements(AMDUpcomingPage.objContentCardInfo).size();
		if (cardInfo > 1) {
			logger.info("Upcoming contents is loaded & displayed when user navigates to upcoming screen");
			extent.extentLoggerPass("Page",
					"Upcoming contents is loaded & displayed when user navigates to upcoming screen");
		} else {
			logger.error("[AMA2-12127] Upcoming contents fails to display post navigating to upcoming screen.");
			extent.extentLoggerFail("Page",
					"[AMA2-12127] Upcoming contents fails to display post navigating to upcoming screen.");
		}
	}
/**
 * @Note AMA2 11938 defect validation 
 * @param userType
 * @throws Exception
 */
	public void verifyWeekInShorts(String userType) throws Exception {
		// AMA2-11938
		extent.HeaderChildNode(
				"AMA2-11938 :'Week in short' show downloaded / downloading content is displayed in the videos tab instead of the Shows tab");
		logger.info(
				"AMA2-11938 :'Week in short' show downloaded / downloading content is displayed in the videos tab instead of the Shows tab");
		if (!userType.equalsIgnoreCase("Guest")) {
			waitTime(4000);
			verifyElementPresentAndClick(AMDHomePage.objShowsTab, "TV Shows tab");
			waitTime(10000);
			findParticularTray(AMDHomePage.objWeekInShortTray, "Week In Short");
			if (verifyElementDisplayed(AMDHomePage.objWeekInShortTray)) {
				verifyElementExist(AMDHomePage.objWeekInShortContent, "Week In Short Content card");
				click(AMDHomePage.objWeekInShortContent, "Week In Short Content card");
				waitTime(5000);
				waitForElementDisplayed(AMDDownloadPage.objPauseIconOnPlayer, 2000);
				waitTime(3000);
				verifyElementPresentAndClick(AMDDownloadPage.objDownloadIcon, "Download button");
				waitTime(2000);
				downloadVideoQualityPopUp(pVideoQuality, true);
				waitTime(3000);
				Back(1);
				click(AMDHomePage.objDownloadBtn, "Downloads tab");
				String getSelectedTabName = getText(AMDHomePage.objSelectedTab);
				if (getSelectedTabName.equalsIgnoreCase("Videos")) {
					extent.extentLoggerFail("Movies tab",
							"[AMA2-11938] 'Week in short' show downloaded/downloading content is displayed in the videos tab instead of the Shows tab");
					logger.error(
							"[AMA2-11938]  'Week in short' show downloaded/downloading content is displayed in the videos tab instead of the Shows tab");
				} else {
					extent.extentLoggerPass("Videos tab", "User is navigated to Shows landing page");
					logger.info("User is navigated to Shows landing page");
				}

			} else {
				logger.info("Week In short tray is not displayed");
				extent.extentLoggerWarning("Page", "Week In short tray is not displayed");
			}

		} else {
			logger.info("AMA2-11938 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-11938 : Not applicable for " + userType);
		}
	}
/**
 * @note This method is used to validate deeplink to login registration screen.
 * @param pDeeplinkUrl
 * @param pUserType
 * @throws Exception
 */
	public void deeplinkToLoginScreenFromEmailNotification(String pDeeplinkUrl, String pUserType) throws Exception {
		extent.HeaderChildNode("Deeplink to Login/Register screen from Email/notification");
		System.out.println("\nDeeplink to Login/Register screen from Email/notification");

		if (pUserType.equalsIgnoreCase("Guest")) {
			try {
				waitTime(3000);
				String cmd3 = "adb shell am start -W -a android.intent.action.VIEW -d  " + pDeeplinkUrl;
				Process process = Runtime.getRuntime().exec(cmd3);
				new BufferedReader(new InputStreamReader(process.getInputStream()));
				waitTime(12000);
				if (verifyIsElementDisplayed(AMDHomePage.objPopUpToOpenZeeApp)) {
					click(AMDHomePage.objJustOnceOption, "Just once option");
				}
				waitTime(4000);
				if (verifyIsElementDisplayed(AMDLoginScreen.objLoginOrRegisterPageTitle)) {
					logger.info(
							"User is navigated to Login/Register screen post tapping on deeplinking URL from Email/notification");
					extent.extentLoggerPass("Login/Register screen",
							"User is navigated to Login/Register screen post tapping on deeplinking URL from Email/notification");
				} else {
					logger.error(
							"User failed to navigate to Login/Register screen post tapping on deeplinking URL from Email/notification");
					extent.extentLoggerFail("Login/Register screen",
							"User failed to navigate to Login/Register screen post tapping on deeplinking URL from Email/notification");
				}

			} catch (Exception e) {
				System.out.println("URL is not triggered or accessible");
			}
		} else {
			logger.info("Login/Register screen validation is not applicable for " + pUserType);
			extent.extentLoggerPass("Login/Register screen",
					"Login/Register screen validation is not applicable for " + pUserType);
		}
	}
/**
 * @note AMA2-15115 defect validation
 * @param userType
 * @param contentTitle
 * @throws Exception
 */
	public void appcrashIssue_ChennaiVSChina(String userType, String contentTitle) throws Exception {
		extent.HeaderChildNode(
				"AMA2-15115: App crashes post tapping on 'Chennai vs China | Trailer' TVOD content for Guest and Subscribed users");
		if (!(userType.equalsIgnoreCase("NonSubscribedUser"))) {
			click(AMDHomePage.objSearchBtn, "Search button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, contentTitle, "Search box");
			hideKeyboard();
			click(AMDSearchScreen.objFirstSearchResult, "Search result");
			waitTime(5000);
			boolean var = verifyIsElementDisplayed(AMDConsumptionScreen.objShareBtn);
			if (var == true) {
				logger.info(
						"user is navigated to the consumption screen post tapping on the 'Chennai vs China | trailer' TVOD content");
				extent.extentLoggerPass("App crash",
						"user is navigated to the consumption screen post tapping on the 'Chennai vs China | trailer' TVOD content");
			} else {
				logger.error("App crashed post tapping on 'Chennai vs China | trailer' TVOD content");
				extent.extentLoggerFail("App crash",
						"[AMA2-15115] - App crashed post tapping on 'Chennai vs China | trailer' TVOD content");
			}
		} else {
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not Applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note AMA2 11640 defect validation
 * @param userType
 * @throws Exception
 */
	public void bottomNavigationBarValidationInListingScreen(String userType) throws Exception {
		extent.HeaderChildNode(
				"AMA2-11640 - Bottom navigation bar is getting displayed on the All episode rails listing screen");
		selectTopNavigationTab("TV Shows");
		waitTime(5000);
		click(AMDHomePage.objCarouselTitle1, "Carousal card");
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			waitForAdToFinishInAmd();
			registerPopUpClose();
			completeProfilePopUpClose(userType);
		}

		for (int i = 0; i < 3; i++) {
			if (verifyIsElementDisplayed(AMDGenericObjects.objViewAllBtn("All Episodes"))) {
				click(AMDGenericObjects.objViewAllBtn("All Episodes"), "View All button of 'All Episodes' tray");
				break;
			} else {
				PartialSwipeInConsumptionScreen("UP", 2);
			}
		}

		boolean var = verifyElementExist(AMDHomePage.objMoreMenu, "More menu");
		if (var == true) {
			logger.error("Bottom navigation bar is displayed on the All episode rails listing screen");
			extent.extentLoggerFail("Bottom Navigation bar",
					"[AMA2-11640] - Bottom navigation bar is displayed on the All episode rails listing screen");
		} else {
			logger.info("Bottom navigation bar is displayed on the All episode rails listing screen");
			extent.extentLoggerPass("Bottom Navigation bar",
					"Bottom navigation bar is displayed on the All episode rails listing screen");

		}

	}
/**
 * @note AMA2 11726 deect validation
 * @param contentTitle
 * @throws Exception
 */
	public void listingScreenHeader(String contentTitle) throws Exception {
		extent.HeaderChildNode(
				"AMA2-11726: Listing screen header fails to display when user navigate back to 'Free Movies' listing screen from Collection listing screen");
		selectTopNavigationTab("Home");
		boolean var = waitForElementAndClickIfPresent(AMDHomePage.objContentTitle(contentTitle), 4, "Carousel content");
		if (var == true) {
			waitTime(4000);
			getDriver().findElement(By.xpath("(//*[@text='a'])[1]")).click();
			waitTime(3000);
			Back(1);
			boolean header = verifyIsElementDisplayed(AMDNewsPage.objListingScreenHeader, "Listing screen header");
			if (header == true) {
				logger.info(
						"Free Movies Header text is displayed when user navigate back from collection listing screen");
				extent.extentLoggerPass("Listingscreen header",
						"Free Movies Header text is displayed when user navigate back from collection listing screen");
			} else {
				logger.error(
						"Listing screen header failed to display when user navigate back to 'Free Movies' listing screen from Collection listing screen");
				extent.extentLoggerFail("Listingscreen header",
						"[AMA2-11726] - Listing screen header failed to display when user navigate back to 'Free Movies' listing screen from Collection listing screen");
			}
		} else {
			logger.info("Free Movies content is not displayed under Carousal banner");
			extent.extentLoggerWarning("Free movies", "Free Movies content is not displayed under Carousal banner");
		}

	}
/**
 * @note AMA2 12294 defect validation
 * @param userType
 * @param email
 * @param password
 * @throws Exception
 */
	public void haveAPrepaidCodeDuringUpgradeJourney(String userType, String email, String password) throws Exception {
		extent.HeaderChildNode("AMA2-12294: Have a Code ? option is displayed during upgrade journey .");
		if (!(userType.equalsIgnoreCase("NonSubscribedUser"))) {
			if (!(userType.equalsIgnoreCase("Guest"))) {
				loginWithEmailID(email, password);
			}
			click(AMDHomePage.objMoreMenu, "More menu");
			click(AMDMoreMenu.objBuySubscription, "Buy Plan");
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
			if (userType.equalsIgnoreCase("Guest")) {
				verifyElementExist(AMDSubscibeScreen.objAccountInfoScreen, "Account info screen");
				click(AMDSubscibeScreen.objEmailID, "Email");
				type(AMDSubscibeScreen.objEmailID, email, "Email field");
				hideKeyboard();
				click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
				waitTime(5000);
				verifyElementExist(AMDSubscibeScreen.objEnterPassword, "Enter Password PopUp");
				click(AMDSubscibeScreen.objEnterPassword, "Password");
				type(AMDSubscibeScreen.objEnterPassword, password, "Password field");
				hideKeyboard();
				verifyElementPresentAndClick(AMDSubscibeScreen.objContinueOnSubscribePopup,
						"Continue button in password popup");
			}
			waitTime(15000);
			if (verifyIsElementDisplayed(AMDSubscibeScreen.objMakePaymentScreen)) {
				Back(1);
			}
			Swipe("UP", 1);
			boolean var = verifyIsElementDisplayed(AMDSubscibeScreen.objHaveACodeCTA);
			if (var == true) {
				logger.error("Have a Code is displayed in Plan selection screen ");
				extent.extentLoggerFail("code", "[AMA2-12294] - Have a Code is displayed in Plan selection screen");
			} else {
				logger.info("Have a Code is not displayed in Plan selection screen ");
				extent.extentLoggerPass("code", "Have a Code is not displayed in Plan selection screen");
			}
		} else {
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not Applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note this method is used to check hipi option in bottom navigation bar
 * @throws Exception
 */
	public void hipLogo_BottomNavigationBar() throws Exception {
		extent.HeaderChildNode("HiPi Logo on bottom navigation bar - ZNA-9337");
		verifyElementPresent(AMDHomePage.objHipiMenuBtn, "Hipi bottom bar menu");
	}
/**
 * @note ZNA 10939 defect validation
 * @throws Exception
 */
	public void appcrashIssue_OnTappingBackButton_LearnWithEduauraaTray() throws Exception {
		extent.HeaderChildNode(
				"App crash issue on tapping device back button, post accessing any of the contents from 'Learn with Eduauraa' tray - ZNA-10939");
		selectTopNavigationTab("Eduauraa");
		waitTime(4000);
		boolean flag = false;
		for (int i = 0; i < 20; i++) {
			boolean var = verifyIsElementDisplayed(AMDHomePage.objFirstContentCardOfTray("Learn with Eduauraa"));
			if (var == true) {
				click(AMDHomePage.objFirstContentCardOfTray("Learn with Eduauraa"),
						"content from Learn with Eduauraa tray");
				flag = true;
				click(AMDGenericObjects.objFirstContentInListingCollectionPage,
						"First content in Listing collection page");
				waitForElementDisplayed(AMDConsumptionScreen.objShareBtn, 30);
				verifyElementExist(AMDConsumptionScreen.objShareBtn, "Consumption screen");
				Back(1);
				boolean screen = verifyIsElementDisplayed(AMDHomePage.objListingScreen, "Listing screen");
				if (screen == true) {
					logger.info("User is navigated to previous screen post tapping on device back button");
					extentLoggerPass("Previous screen",
							"User is navigated to previous screen post tapping on device back button");
				} else {
					logger.error("User is not navigated to previous screen post tapping on device back button");
					extentLoggerFail("Previous screen",
							"User is not navigated to previous screen post tapping on device back button");
				}
				break;
			} else {
				Swipe("UP", 1);
			}
		}
		if (flag == false) {
			logger.info("Learn with Eduauraa tray is not displayed");
			extentLogger("", "Learn with Eduauraa tray is not displayed");
		}
	}
/** 
 * @note ZNA 10528 defect validation
 * @param userType
 * @throws Exception
 */
	public void crashIssue_AppLaunch_OfflineMode(String userType) throws Exception {
		extent.HeaderChildNode("App crash issue on launching the app in offline mode - ZNA-10528");
		if (userType.equalsIgnoreCase("Guest")) {
			click(AMDHomePage.objHomeBottomBtn, "Bottom bar Home Button");
			boolean lastSecTab = false;
			TurnOFFWifi();

			int noOfTabs = getCount(AMDHomePage.objTitle);
			System.out.println("HOME PAGE HEADERS: " + noOfTabs);
			for (int i = 1; i <= 10; i++) {

				String tabName = null;
				if (i == noOfTabs) {
					if (!lastSecTab) {
						i = noOfTabs - 1;
					}
					WebElement eleTab = getDriver().findElement(
							By.xpath("(//*[@class='android.widget.HorizontalScrollView']/child::*/child::*/child::*)["
									+ i + "]"));
					tabName = eleTab.getText();
					System.out.println(tabName);
					eleTab.click();

				} else {
					WebElement eleTab = getDriver().findElement(
							By.xpath("(//*[@class='android.widget.HorizontalScrollView']/child::*/child::*/child::*)["
									+ i + "]"));
					tabName = eleTab.getText();
					System.out.println(tabName);
					eleTab.click();
				}

				waitTime(2000);

				logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
				extent.extentLoggerPass(" ", tabName + " tab is displayed and clicked on " + tabName + " tab");

				boolean var = verifyIsElementDisplayed(AMDOfflineScreen.objYouAreOffline);
				if (var == true) {
					logger.info(
							"You aren't connected to the internet screen is displayed on launching the app in offline mode");
					extent.extentLoggerPass("Offline screen",
							"You aren't connected to the internet screen is displayed on launching the app in offline mode");
					break;
				}
				if (lastSecTab) {
					break;
				}
				if (tabName.equalsIgnoreCase("Music")) {
					lastSecTab = true;
				}
				waitTime(3000);
			}
			click(AMDHomePage.objHomeBtn, "Bottom bar Home Option");
			TurnONWifi();

		} else {
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not Applicable", "Not Applicable for this userType");
		}
	}
/**
 * @Note This method is used to validate Skip functionality in Login/Register screen
 * @param pUserType
 * @throws Exception
 */
	public void skipToHomeLandingScreenVerification(String pUserType) throws Exception {
		extent.HeaderChildNode("SKIP to Home landing screen");
		System.out.println("\nSKIP to Home landing screen");

		// click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button
		// (Content-LanguageScreen)");
		if (pUserType.equalsIgnoreCase("Guest")) {
			click(AMDHomePage.HomeIcon, "Home Tab");
			click(AMDHomePage.MoreMenuIcon, "More Menu");
			click(AMDHomePage.objMyProfileIcon, "Profile icon");
			verifyElementPresentAndClick(AMDLoginScreen.objSkipBtn, "SKIP");
			waitTime(1000);

			if (verifyIsElementDisplayed(AMDHomePage.objHome)) {
				click(AMDHomePage.objHome, "Home Button");
				logger.info("User navigates to landing screen on selecting Skip Button");
				extent.extentLoggerPass("Skip button",
						"User navigates to landing screen on selecting <b>Skip</b> Button");
			} else {
				logger.error("User failed to navigate to landing screen on selecting Skip Button");
				extent.extentLoggerFail("Skip button",
						"User failed to navigate to landing screen on selecting <b>Skip</b> Button");
			}
		} else {
			logger.info("Skip verification Not Applicable for " + pUserType);
			extent.extentLogger("Skip", "Skip verification Not Applicable for " + pUserType);
		}
	}
/**
 * @Note This method is used to validate the Trending and Recent Search history in Search landing screen
 * @throws Exception
 */
	public void recentSearchHistoryValidation() throws Exception {
		extent.HeaderChildNode("Trending & Recent Search history Validation");
		System.out.println("\nTrending & Recent Search history Validation");

		waitTime(3000);
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		waitTime(2000);
//		if (verifyIsElementDisplayed(AMDGenericObjects.objText("Trending Searches"))) {
//			logger.info("Trending Search is available in Search screen");
//			extent.extentLoggerPass("Trending Search", "<b>Trending Search</b> is available in Search screen");
//		} else {
//			logger.error("Trending Search is not available in Search screen");
//			extent.extentLoggerFail("Trending Search", "<b>Trending Search</b> is not available in Search screen");
//		}

//		waitTime(3000);
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, "Mummy" , "Search bar");
		waitTime(3000);
		click(AMDSearchScreen.objSearchkeypad, "Search icon in keypad");
		hideKeyboard();
		click(AMDSearchScreen.objClearSearch, "ClearText");
		waitTime(2000);
		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, "Friends", "Search bar");
		waitTime(5000);
		click(AMDSearchScreen.objSearchkeypad, "Search icon in keypad");
		hideKeyboard();
		click(AMDSearchScreen.objClearSearch, "ClearText");
		waitTime(2000);

		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, "Abhay2" , "Search bar");
		waitTime(5000);
		click(AMDSearchScreen.objSearchkeypad, "Search icon in keypad");
		hideKeyboard();
		click(AMDSearchScreen.objClearSearch, "ClearText");
		waitTime(2000);

		click(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, "GOD", "Search bar");
		waitTime(5000);
		click(AMDSearchScreen.objSearchkeypad, "Search icon in keypad");
		hideKeyboard();
		click(AMDSearchScreen.objClearSearch, "ClearText");

		if (verifyIsElementDisplayed(AMDSearchScreen.objRecentsearchOverlay)) {
			extent.extentLoggerPass("Recent Search Overlay",
					"<b>Recent Search Overlay</b> is available in search screen with past search history");
			logger.info("Recent Search Overlay is available in search screen with past search history");
		} else {
			extent.extentLoggerFail("Recent Search Overlay", "Recent Search Overlay is not displayed in search screen");
			logger.info("Recent Search Overlay is not available in search screen");
		}

		if (verifyIsElementDisplayed(AMDSearchScreen.objClearAll)) {
			extent.extentLoggerPass("Recent Searched Keywords",
					"<b>Recent Searched Keywords</b> are displayed in search screen");
			logger.info("Recent Searched Keywords are displayed in search screen");
		} else {
			extent.extentLoggerFail("Recent Search Overlay",
					"Recent Searched Keywords is not displayed in search screen");
			logger.info("Recent Searched Keywords are not displayed in search screen");
		}
	}
/**
 * @Note This method is used to validate the Have a prepaid code journey in More screen.
 * @param pUserType
 * @throws Exception
 */
	public void haveaCodeForInvalidPrepaidCodeValidation(String pUserType) throws Exception {
		extent.HeaderChildNode("Have a Code Subscription journey validation");
		System.out.println("\nHave a Code Subscription journey validation");

		String invalidPrepaid = "HIJKLN";
		switch (pUserType.toUpperCase()) {

		case "GUEST":

			click(AMDHomePage.HomeIcon, "Home Tab");
			click(AMDHomePage.MoreMenuIcon, "More Menu");
			click(AMDMoreMenu.objHaveaPrepaidCode, "Have a Prepaid code");

			if (verifyIsElementDisplayed(AMDMoreMenu.objPrepaidCodePopUp)) {
				waitTime(2000);
				click(AMDMoreMenu.objPrepaidCodeTxt, "Prepaidcode field");
				type(AMDMoreMenu.objPrepaidCodeTxt, invalidPrepaid, "Prepaid Code");
				hideKeyboard();
				click(AMDMoreMenu.objApplyBtn, "Apply Btn");

				if (getText(AMDMoreMenu.objPopUpDisc).contains("You are not logged in")) {
					click(AMDMoreMenu.objLoginBtn, "Login Button");

					verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
					type(AMDLoginScreen.objEmailIdField, getParameterFromXML("regUserName"), "Email Field");
					hideKeyboard();
					verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
					verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
					type(AMDLoginScreen.objPasswordField, getParameterFromXML("regPassword"), "Password field");
					hideKeyboard();
					verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
					waitTime(3000);

					String getPopupDisc = getText(AMDMoreMenu.objPopUpDisc);
					if (getPopupDisc.contains("Invalid code")) {
						logger.info(getPopupDisc + " message is displayed");
						extent.extentLoggerPass("Invalid Code", "<b>" + getPopupDisc + "</b> message is displayed");

						click(AMDMoreMenu.objDoneBtn, "Done");
						swipeUntilFindElement(AMDMoreMenu.objLogout, "UP");
						click(AMDMoreMenu.objLogout, "Logout");
						click(AMDMoreMenu.objLogoutBtn, "LogoutBtn");
					} else {
						logger.error("Invalid popup message is not displayed");
						extent.extentLoggerFail("Invalid Code", "Invalid Code popup message is not displayed");
					}
				} else {
					logger.error("Popup screen is not displayed");
					extent.extentLoggerFail("Popup screen", "Popup screen is not displayed");
				}
			} else {
				logger.info("Prepaid Code popup is not displayed");
				extent.extentLoggerFail("Prepaid code", "Prepaid Code popup is not displayed");
			}
			break;

		case "NONSUBSCRIBEDUSER":

			click(AMDHomePage.HomeIcon, "Home Tab");
			click(AMDHomePage.MoreMenuIcon, "More Menu");
			click(AMDMoreMenu.objHaveaPrepaidCode, "Have a Prepaid code");

			if (verifyIsElementDisplayed(AMDMoreMenu.objPrepaidCodePopUp)) {
				waitTime(2000);
				click(AMDMoreMenu.objPrepaidCodeTxt, "Prepaidcode field");
				type(AMDMoreMenu.objPrepaidCodeTxt, invalidPrepaid, "Prepaid Code");
				hideKeyboard();
				click(AMDMoreMenu.objApplyBtn, "Apply Btn");

				waitTime(2000);
				String getPopupDisc = getText(AMDMoreMenu.objPopUpDisc);
				if (getPopupDisc.contains("Invalid code")) {
					logger.info(getPopupDisc + " message is displayed");
					extent.extentLoggerPass("Invalid Code", "<b>" + getPopupDisc + "</b> message is displayed");

					click(AMDMoreMenu.objDoneBtn, "Done");
					swipeUntilFindElement(AMDMoreMenu.objLogout, "UP");
					click(AMDMoreMenu.objLogout, "Logout");
					click(AMDMoreMenu.objLogoutBtn, "LogoutBtn");
				} else {
					logger.error("Invalid popup message is not displayed");
					extent.extentLoggerFail("Invalid Code", "Invalid Code popup message is not displayed");
				}
			}
			break;

		case "SUBSCRIBEDUSER":

			click(AMDHomePage.HomeIcon, "Home Tab");
			click(AMDHomePage.MoreMenuIcon, "More Menu");
			click(AMDMoreMenu.objHaveaPrepaidCode, "Have a Prepaid code");

			if (verifyIsElementDisplayed(AMDMoreMenu.objPrepaidCodePopUp)) {
				waitTime(2000);
				click(AMDMoreMenu.objPrepaidCodeTxt, "Prepaidcode field");
				type(AMDMoreMenu.objPrepaidCodeTxt, invalidPrepaid, "Prepaid Code");
				hideKeyboard();
				click(AMDMoreMenu.objApplyBtn, "Apply Btn");

				waitTime(2000);
				String getPopupDisc = getText(AMDMoreMenu.objPopUpDisc);
				if (getPopupDisc.contains("Invalid code")) {
					logger.info(getPopupDisc + " message is displayed");
					extent.extentLoggerPass("Invalid Code", "<b>" + getPopupDisc + "</b> message is displayed");

					click(AMDMoreMenu.objDoneBtn, "Done");
					swipeUntilFindElement(AMDMoreMenu.objLogout, "UP");
					click(AMDMoreMenu.objLogout, "Logout");
					click(AMDMoreMenu.objLogoutBtn, "LogoutBtn");
				} else {
					logger.error("Invalid popup message is not displayed");
					extent.extentLoggerFail("Invalid Code", "Invalid Code popup message is not displayed");
				}
			}
			break;
		}
	}
/**
 * @Note This method is used to validate the Subscription Plan Title And Description Validation for Subscribed user
 * @param userType
 * @throws Exception
 */
	public void subscriptionPackValidation(String userType) throws Exception {
		extent.HeaderChildNode("Subscription Plan Title And Description Validation");
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			click(AMDHomePage.HomeIcon, "Home Tab");
			click(AMDHomePage.MoreMenuIcon, "More Menu");
			click(AMDMoreMenu.objBuySubscription, "Buy Plan");
			waitTime(5000);
			Swipe("UP", 1);
			int subscriptionPlans = getDriver().findElements(AMDSubscibeScreen.objPremiumPlansInSubscriptionPage)
					.size();
			for (int i = 1; i <= subscriptionPlans; i++) {
				boolean title = verifyIsElementDisplayed(AMDSubscibeScreen.objPlanNameOfPlan(i), "Plan Title");
				if (title == true) {
					logger.info("Plan title: " + getText(AMDSubscibeScreen.objPlanNameOfPlan(i)));
					extentLoggerPass("Plan Title", "Plan title: " + getText(AMDSubscibeScreen.objPlanNameOfPlan(i)));
				} else {
					logger.error("Plan title is not displayed");
					extent.extentLoggerFail("Plan Title", "Plan title is not displayed");
				}

				boolean desc = verifyIsElementDisplayed(AMDSubscibeScreen.objPlanDescriptionOfPlan(i),
						"Plan Description");
				if (desc == true) {
					logger.info("Plan description: " + getText(AMDSubscibeScreen.objPlanDescriptionOfPlan(i)));
					extentLoggerPass("Plan description",
							"Plan description: " + getText(AMDSubscibeScreen.objPlanDescriptionOfPlan(i)));
				} else {
					logger.info("Plan description is not displayed");
					extent.extentLogger("Plan Title", "Plan description is not displayed");
				}

			}
		} else {
			logger.info("Not Applicable for this userType");
			extentLogger("Not Applicable", "Not Applicable for this userType");
		}
	}
/**
 * @Note This method is used to validate the consumption screen on playing the premium contents.
 * @param userType
 * @throws Exception
 */
	public void premiumContentsValidationInPlayerScreen(String userType) throws Exception {
		extent.HeaderChildNode("Premium contents validation");
		String courselContentTitle = carouselValidationWithApi(userType, "homepage");
		waitTime(5000);
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			if (verifyElementIsNotDisplayed(AMDHomePage.objBuyNowCTAForContentOnCarousal(courselContentTitle))) {
				logger.info("BuyNow CTA is not displayed on Premium banners");
				extentLoggerPass("Buy Now CTA", "BuyNow CTA is not displayed on Premium banners");
			}
		}
		waitForElementAndClickIfPresent(AMDHomePage.objContentTitle(courselContentTitle), 15, "Carousel content");
		waitTime(5000);
		if (verifyIsElementDisplayed(AMDPlayerScreen.objAdultErrorMessage)) {
			logger.info("Adult error message on the player for this content is displayed");
			extentLogger("", "Adult error message on the player for this content is displayed");
		} else {
			if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
				verifyElementExist(AMDPlayerScreen.objBuyNowCTABelowThePlayer, "Buy Now CTA below the Player");
			} else {
				if (verifyIsElementDisplayed(AMDPlayerScreen.objBuyNowCTABelowThePlayer)) {
					logger.error("Buy Now CTA is displayed");
					extentLoggerFail("Buy Now CTA", "Buy Now CTA is displayed");
				} else {
					logger.info("Buy Now CTA is not displayed");
					extentLoggerPass("Buy Now CTA", "Buy Now CTA is not displayed");
				}
			}
			if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				waitTime(8000);
				Boolean var = verifyIsElementDisplayed(AMDConsumptionScreen.objWatchTrialer);
				if (var == false) {
					waitTime(5000);
					verifyElementExist(AMDConsumptionScreen.objGetPremiumOnPlayer, "Buy Now CTA on the Player");
				} else {
					if (!(verifyIsElementDisplayed(AMDPlayerScreen.objPauseIcon))) {
						click(AMDPlayerScreen.objPlayerScreen, "player screen");
					}
					click(AMDPlayerScreen.objPauseIcon, "Pause");

					WebElement element = getDriver().findElement(AMDPlayerScreen.objProgressBar);
					String xDuration = getAttributValue("x", AMDPlayerScreen.objTotalDuration);
					int endX = Integer.parseInt(xDuration) - 30;
					SwipeAnElement(element, endX, 0);
					waitTime(5000);
					click(AMDPlayerScreen.objPlay, "Play icon");
					verifyElementExist(AMDConsumptionScreen.objGetPremiumOnPlayer, "Buy Now CTA on the Player");
				}
			}
		}
	}

/**
 * @note this method is used to validate the whats app feature in edit profile screen for unregistered user
 * @param userType
 * @throws Exception
 */
	public void whatsApp_UnRegisteredUser(String userType) throws Exception {
		extent.HeaderChildNode("WhatsApp opt-in in Registration screen for UnRegistered user");
		if (userType.equalsIgnoreCase("Guest")) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			type(AMDRegistrationScreen.objEmailIDTextField, generateRandomString(5) + "@gmail.com", "Email field");
			waitTime(3000);
			if (verifyIsElementDisplayed(AMDRegistrationScreen.objProceedBtn, "Proceed button")) {
				logger.info("User is able to enter Email id/Mobile no. on the Login/Registration screen");
				extent.extentLoggerPass("Email ID",
						"User is able to enter Email id/Mobile no. on the Login/Registration screen");
			} else {
				logger.error("User is not able to enter Email id/Mobile no. on the Login/Registration screen");
				extent.extentLoggerFail("Email ID",
						"User is not able to enter Email id/Mobile no. on the Login/Registration screen");
			}

			click(AMDRegistrationScreen.objProceedBtn, "Proceed button");
			waitTime(5000);
			if (!(verifyIsElementDisplayed(AMDRegistrationScreen.objWhatsappOptIn))) {
				logger.info(
						"WhatsApp opt-in tickbox is not visible, if user input Email id on the email/Mobile no. field");
				extent.extentLoggerPass("Whatsapp opt-in tickbox",
						"WhatsApp opt-in tickbox is not visible, if user input Email id on the email/Mobile no. field");
			} else {
				logger.error(
						"WhatsApp opt-in tickbox is visible, if user input Email id on the email/Mobile no. field");
				extent.extentLoggerFail("Whatsapp opt-in tickbox",
						"WhatsApp opt-in tickbox is visible, if user input Email id on the email/Mobile no. field");
			}

			String text = getDriver().findElement(AMDRegistrationScreen.objEmailIDTextField).getText();
			Pattern p = Pattern.compile("[^a-z0-9 ]", Pattern.CASE_INSENSITIVE);
			Matcher passWord = p.matcher(text);
			boolean b = passWord.find();
			if (b) {
				logger.info(
						"No error message is displayed and Whatsapp opt-in tickbox is not visible, if user input any special character on the email field");
				extent.extentLoggerPass("Email",
						"No error message is displayed and Whatsapp opt-in tickbox is not visible, if user input any special character on the email field");

			} else {
				logger.error(
						"Error message is displayed and Whatsapp opt-in tickbox is visible, if user input any special character on the email field");
				extent.extentLoggerFail("Email",
						"Error message is displayed and Whatsapp opt-in tickbox is visible, if user input any special character on the email field");
			}

			Back(1);
			clearField(AMDLoginScreen.objEmailIdField, "EmailField");
			waitTime(3000);
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "EmailField");
			type(AMDLoginScreen.objEmailIdField, UnRegisteredMobile, "Mobile");
			hideKeyboard();
			click(AMDLoginScreen.objProceedBtn, "Proceed icon");
			waitTime(5000);
			if (verifyIsElementDisplayed(AMDRegistrationScreen.objWhatsappOptIn)) {
				logger.info(
						"WhatsApp opt-in tickbox is visible, if user input Mobile no. on the email/Mobile no. field");
				extent.extentLoggerPass("Whatsapp opt-in tickbox",
						"WhatsApp opt-in tickbox is visible, if user input Mobile no. on the email/Mobile no. field");

				String whatsappText = getText(AMDRegistrationScreen.objWhatsappOptIn);
				if (whatsappText.equalsIgnoreCase("I want to receive updates & notifications over WhatsApp")) {
					logger.info("Text is displayed in Whatsapp Opt-in");
					extent.extentLoggerPass("text", "Text is displayed in Whatsapp Opt-in");
				} else {
					logger.error("Text is not displayed in Whatsapp Opt-in");
					extent.extentLoggerFail("text", "Text is not displayed in Whatsapp Opt-in");
				}

				String tickBox1 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
				if (tickBox1.equalsIgnoreCase("false")) {
					logger.info("WhatsApp opt-in tick box appears unchehcked by default");
					extent.extentLoggerPass("TickBox", "WhatsApp opt-in tick box appears unchehcked by default");
				} else {
					logger.error("WhatsApp opt-in tick box appears checked by default");
					extent.extentLoggerFail("TickBox", "WhatsApp opt-in tick box appears checked by default");
				}
				click(AMDRegistrationScreen.objWhatsappOptIn, "Whatsapp OptIn Tick Box");
				waitTime(3000);
				String tickBox2 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
				if (!(tickBox1.equalsIgnoreCase(tickBox2))) {
					logger.info("user is able select or deselect the WhatsApp opt-in tickbox");
					extent.extentLoggerPass("tickbox", "user is able select or deselect the WhatsApp opt-in tickbox");
				} else {
					logger.error("user is not able select or deselect the WhatsApp opt-in tickbox");
					extent.extentLoggerFail("tickbox",
							"user is not able select or deselect the WhatsApp opt-in tickbox");
				}

				type(AMDRegistrationScreen.objFirstNameTxtField, FirstName, "First name field");
				hideKeyboard();
				click(AMDRegistrationScreen.objLastNameTxtField, "Last Name field");
				type(AMDRegistrationScreen.objLastNameTxtField, LastName, "Last Name");
				hideKeyboard();

				String pDOB = "01/01/1990", pNewPassword = "123456";
				click(AMDRegistrationScreen.objDOBTxtField, "DOB field");
				type(AMDRegistrationScreen.objDOBTxtField, pDOB, "DOB");
				hideKeyboard();
				verifyElementPresentAndClick(AMDRegistrationScreen.objGederTxtField, "Gender field");
				verifyElementPresentAndClick(AMDRegistrationScreen.objMale, "Gender male");
				click(AMDRegistrationScreen.objPasswordTxtField, "Passowrd");
				type(AMDRegistrationScreen.objPasswordTxtField, pNewPassword, "Password field");
				hideKeyboard();
				Swipe("UP", 1);
				String btn = getAttributValue("clickable", AMDRegistrationScreen.objRegisterBtn);
				if (btn.equalsIgnoreCase("true")) {
					logger.info(
							"Register CTA is highlited for mobile No. user who Select/deselect on WhatsApp opt-in tickbox, post entering all fields in registration screen ");
					extent.extentLoggerPass("Register button",
							"Register CTA is highlited for mobile No. user who Select/deselect on WhatsApp opt-in tickbox, post entering all fields in registration screen ");

					click(AMDRegistrationScreen.objRegisterBtn, "Register button");
					verifyElementExist(AMDLoginScreen.objOtpScreenTitle, "OTP screen");
				} else {
					logger.error(
							"Register CTA is not highlited for mobile No. user who Select/deselect on WhatsApp opt-in tickbox, post entering all fields in registration screen ");
					extent.extentLoggerFail("Register button",
							"Register CTA is not highlited for mobile No. user who Select/deselect on WhatsApp opt-in tickbox, post entering all fields in registration screen ");
				}
			} else {
				logger.error(
						"WhatsApp opt-in tickbox is not visible, if user input Mobile no. on the email/Mobile no. field");
				extent.extentLoggerFail("Whatsapp opt-in tickbox",
						"WhatsApp opt-in tickbox is not visible, if user input Mobile no. on the email/Mobile no. field");
			}
		} else {
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not Applicable", "Not Applicable for this userType");
		}

	}
/**
 * @note @note this method is used to validate the whats app feature in edit profile screen for registered user
 * @param userType
 * @throws Exception
 */
	public void whatsApp_RegisteredUser(String userType) throws Exception {
		extent.HeaderChildNode("WhatsApp opt-in in Edit profile screen for Registered user");
		if (!(userType.equalsIgnoreCase("Guest"))) {
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");
			verifyElementPresentAndClick(AMDMyProfileScreen.objEditProfileButton, "Edit CTA");

			verifyElementPresent(AMDEditProfileScreen.objMobileNoField, "Mobile number text field");
			String mobileNumber = getText(AMDEditProfileScreen.objMobileNumberField);
			if (!(mobileNumber.equalsIgnoreCase("Mobile Number"))) {
				String tickBox1 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptInTickBox);
				click(AMDRegistrationScreen.objWhatsappOptInTickBox, "Whatsapp OptIn Tick Box");
				waitTime(3000);
				String tickBox2 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptInTickBox);
				if (!(tickBox1.equalsIgnoreCase(tickBox2))) {
					logger.info("user is able select or deselect the WhatsApp opt-in tickbox");
					extent.extentLoggerPass("tickbox", "user is able select or deselect the WhatsApp opt-in tickbox");
				} else {
					logger.error("user is not able select or deselect the WhatsApp opt-in tickbox");
					extent.extentLoggerFail("tickbox",
							"user is not able select or deselect the WhatsApp opt-in tickbox");
				}

			} else {
				logger.info("User has only EmailId");
				extentLogger("EmailId", "User has only EmailId");
				String tickBox1 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptInTickBox);
				click(AMDRegistrationScreen.objWhatsappOptInTickBox, "Whatsapp OptIn Tick Box");
				waitTime(3000);
				String tickBox2 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptInTickBox);
				if (tickBox1.equalsIgnoreCase(tickBox2)) {
					logger.info("WhatsApp opt-in tickbox is remain deactivated");
					extent.extentLoggerPass("tickbox", "WhatsApp opt-in tickbox is remain deactivated");
				} else {
					logger.error("WhatsApp opt-in tickbox is activated");
					extent.extentLoggerFail("tickbox", "WhatsApp opt-in tickbox is activated");
				}

			}
		} else {
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not Applicable", "Not Applicable for this userType");
		}

	}
	/**
	 * @note validating deeplinkinng to homepage
	 * @param userType
	 * @param url
	 * @throws Exception
	 */
	public void navigationToHomePageOrLoginOrRegisterPageThrough_Deeplinking(String userType, String url)
			throws Exception {
		extent.HeaderChildNode("Navigation to Home screen or Login/Register screen through Deeplinking");
		waitTime(5000);
		String cmd3 = "adb shell am start -W -a android.intent.action.VIEW -d  " + url;
		Process process = Runtime.getRuntime().exec(cmd3);
		new BufferedReader(new InputStreamReader(process.getInputStream()));
		if (!(userType.equalsIgnoreCase("Guest"))) {
			waitTime(12000);
			if (verifyIsElementDisplayed(AMDHomePage.objTopNav_HomeTab)) {
				logger.info("The User who opted for Zee5 Whatsapp is redirected to homepage");
				extent.extentLoggerPass("Deeplinking",
						"The User who opted for Zee5 Whatsapp is redirected to homepage");
			} else {
				logger.error("The User who opted for Zee5 Whatsapp is not redirected to homepage");
				extent.extentLoggerFail("Deeplinking",
						"The User who opted for Zee5 Whatsapp is not redirected to homepage");
			}

		} else {
			waitTime(12000);
			if (verifyIsElementDisplayed(AMDRegistrationScreen.objEmailIDTextField, "Email Id field")) {
				logger.info("The Guest user is redirected to Login/Register page");
				extent.extentLoggerPass("Deeplinking", "The Guest user is redirected to Login/Register page");
			} else {
				logger.error("The Guest user is not redirected to Login/Register page");
				extent.extentLoggerFail("Deeplinking", "The Guest user is not redirected to Login/Register page");
			}
		}

	}
/**
 * @note AMA2 15760 defect validation
 * @param userType
 * @throws Exception
 */
	public void hipiLogoAndDurationOnSubscriptionPlan(String userType) throws Exception {
		extent.HeaderChildNode("AMA2-15760: HiPi Logo functionality on bottom navigation bar");
		click(AMDHomePage.objHipiMenuBtn, "Hipi bottom bar menu");
		waitTime(5000);
		Swipe("UP", 8);
		if (verifyIsElementDisplayed(AMDHomePage.objHipiBottomSection)) {
			logger.error("[AMA2-15760] - Hipi logo is functional");
			extent.extentLoggerFail("Hipi", "[AMA2-15760] - Hipi logo is functional");
			Back(1);
		} else {
			logger.info("Hipi logo is nonfunctional");
			extent.extentLoggerPass("Hipi", "Hipi logo is nonfunctional");
		}
		extent.HeaderChildNode("AMA2-16398: Removal of duration below the subscription plan");
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			click(AMDHomePage.objSubscribeIcon, "Buy plan");
			waitTime(15000);
			Swipe("UP", 1);
			int plans = getDriver().findElements(AMDSubscibeScreen.objPremiumPlansInSubscriptionPage).size();
			for (int i = 1; i <= plans; i++) {
				if (verifyIsElementDisplayed(AMDSubscibeScreen.objOfferBadgeOnPremiumPlans(i))) {
					logger.info("Offer is available on Pack " + i);
					extent.extentLogger("Offer", "Offer is available on this Pack " + i);
				} else {
					boolean planDuration = verifyIsElementDisplayed(
							AMDSubscibeScreen.objPlanDescrptionOfPremiumPlans(i));
					if (planDuration == false) {
						logger.info("Duration below the subscribe plan is removed for Pack " + i);
						extent.extentLoggerPass("Plan duration",
								"Duration below the subscribe plan is removed for Pack " + i);
					} else {
						logger.error("Duration below the subscribe plan is not removed for Pack " + i);
						extent.extentLoggerFail("Plan duration",
								"Duration below the subscribe plan is not removed for Pack " + i);
					}
				}

			}
		} else {
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not Applicable", "Not Applicable for this userType");
		}
	}

//Performance scripts

	public void Memory_UsagePerformance() throws IOException {
		System.out.println("Memory Usage of Native App");

		String getNativeMemory = "";
		String getTotalMemory = "";
		String adbCommand1 = "adb shell dumpsys meminfo com.graymatrix.did | grep Native";
		String adbCommand2 = "adb shell dumpsys meminfo com.graymatrix.did | grep TOTAL";

		Process process1 = Runtime.getRuntime().exec(adbCommand1);
		BufferedReader nativeResult = new BufferedReader(new InputStreamReader(process1.getInputStream()));

		Process process2 = Runtime.getRuntime().exec(adbCommand2);
		BufferedReader totalResult = new BufferedReader(new InputStreamReader(process2.getInputStream()));

		getNativeMemory = nativeResult.readLine().trim();
		getTotalMemory = totalResult.readLine().trim();

//	System.out.println(getNativeMemory);
//	System.out.println(getTotalMemory);

		ArrayList<String> getNativeValue = new ArrayList<String>();
		String[] splitData = getNativeMemory.split(" ");
		for (int i = 0; i < splitData.length; i++) {
			if (!splitData[i].isEmpty()) {
				getNativeValue.add(splitData[i]);
			}
		}

		ArrayList<String> getTotalValue = new ArrayList<String>();
		String[] splitData2 = getTotalMemory.split(" ");
		for (int i = 0; i < splitData2.length; i++) {
			if (!splitData2[i].isEmpty()) {
				getTotalValue.add(splitData2[i]);
			}
		}

//	System.out.println(getNativeValue);	
//	System.out.println(getTotalValue);

		int mbNativeHeap = (Integer.parseInt(getNativeValue.get(2)) / 1024);
		logger.info("App Memory Info - Native Heap : " + getNativeValue.get(2) + " KB");
		logger.info("App Memory Info - Native Heap : " + mbNativeHeap + " MB");
		extent.extentLoggerPass("Memory Info", "<b>App Memory Info - Native Heap :</b> " + mbNativeHeap + " MB");

		int mbTotal = (Integer.parseInt(getTotalValue.get(1)) / 1024);
		logger.info("App Memory Info - TOTAL : " + getTotalValue.get(1) + " KB");
		logger.info("App Memory Info - TOTAL : " + mbTotal + " MB");
		extent.extentLoggerPass("Memory Info", "<b>App Memory Info - TOTAL :</b> " + mbTotal + " MB");

	}
/**
 * @note this method is used to validate the battery info of the device
 * @throws Exception
 */
	public void batteryStats_Performance() throws Exception {
		System.out.println("\nBattery Stats Information");

		String getBatteryInfo = "";
//	String adbCommand="adb shell dumpsys batterystats --charged com.graymatrix.did | grep Computed";
		String adbCommand = "adb shell pm dump com.graymatrix.did | grep Computed";

		Process process = Runtime.getRuntime().exec(adbCommand);
		BufferedReader result = new BufferedReader(new InputStreamReader(process.getInputStream()));

		getBatteryInfo = result.readLine().trim();
		// System.out.println(getBatteryInfo);

		String[] batteryStats = getBatteryInfo.split(",");

		logger.info("\nApp Battery Info - " + batteryStats[1]);
		extent.extentLoggerPass("Battery Info", "<b>App Battery Info - </b> " + batteryStats[1]);
	}
/**
 * @note this methode is used to check the Usage of app
 * @throws IOException
 */
	public void cpu_UsagePerformance() throws IOException {
		System.out.println("\nCPU Usage of App");

		String getCpuStats = "";
		String adbCommand = "adb shell dumpsys cpuinfo | grep com.graymatrix.did";
		Process process = Runtime.getRuntime().exec(adbCommand);
		BufferedReader adbResult = new BufferedReader(new InputStreamReader(process.getInputStream()));

		getCpuStats = adbResult.readLine().trim();
//	System.out.println(getCpuStats);

		String[] getCPUStatus = getCpuStats.split(" ");

		logger.info("App CPU Usage status : " + getCPUStatus[0]);
		extent.extentLoggerPass("CPU Status", "<b>App CPU  Usage status : </b>" + getCPUStatus[0]);
	}
/**
 * @note this method is used to check GPU usage of the app
 * @throws Exception
 */
	public void gpu_UsagePerformance() throws Exception {
		System.out.println("\nGPU Usage of App");

		String getGPUInfo = "";
		String nGPUFramesRendered = "";
		String adbCommand = "adb shell dumpsys gfxinfo com.graymatrix.did | grep MB";
		String adbCommand2 = "adb shell dumpsys gfxinfo com.graymatrix.did | grep rendered";

		Process process = Runtime.getRuntime().exec(adbCommand);
		BufferedReader result = new BufferedReader(new InputStreamReader(process.getInputStream()));

		Process process2 = Runtime.getRuntime().exec(adbCommand2);
		BufferedReader result2 = new BufferedReader(new InputStreamReader(process2.getInputStream()));

		getGPUInfo = result.readLine().trim();
		// System.out.println(getGPUInfo);
		String[] splitData = getGPUInfo.split(",");
		String GPUConsumed = splitData[1].trim();

		nGPUFramesRendered = result2.readLine().trim();
		// System.out.println(nGPUFramesRendered);

		logger.info("\nTotal GPU Memory Usage of Current session : " + GPUConsumed);
		extent.extentLoggerPass("GPU Info", "<b>Total GPU Memory Usage of Current session :</b> " + GPUConsumed);

		logger.info("\nGPU Rendering Info of Current session - " + nGPUFramesRendered);
		extent.extentLoggerPass("GPU Info", "<b>GPU Rendering Info of Current session - </b> " + nGPUFramesRendered);
	}
/**
 * @note This method is used to check the performance of login functionality   
 * @throws Exception
 */
	public void performance_LoginFunctionality() throws Exception {
		extent.HeaderChildNode("Login Functionality Performance");
		System.out.println("\n>>> Login Functionality Performance");

//	String appPackageName = getParameterFromXML("appPackageName");
		String appPackageName = "com.graymatrix.did";

		// Threshold Values declaration
		int threshold_TimeTaken = 22;
		int threshold_NativeMemory = 35;
		int threshold_TotalMemory = 35;
		int threshold_CPU = 75;
		int threshold_GPUMem = 10;
		int threshold_GPURendered = 2300;
		int threshold_Network = 27;

		boolean timeFlag = true, memFlag = true, totalmemFlag = true, cpuFlag = true, gpuMemFlag = true,
				gpuRenFlag = true, trafficFlag = true;

		Instant startTime = Instant.now();
		logger.info("Instant Start time : " + startTime);

		loginWithEmailID("igszee23@yopmail.com", "123456");
		// AppPerformanceTestInfo(appPackageName);

		// #### App Performance MEMORY Usage Info
		ArrayList<String> getMmoryInfo = Memory_UsagePerformanceV2();
		int nativeMemory = Integer.parseInt(getMmoryInfo.get(0).trim());
		int totalMemory = Integer.parseInt(getMmoryInfo.get(1).trim());

		// #### App Performance CPU Usage Info
		String getCPUInfo = cpu_UsagePerformanceV2();
		int nCpuUSage = Integer.parseInt(getCPUInfo);

		// #### App Performance GPU Usage Info
		ArrayList<String> getGPUInfo = GPU_UsagePerformanceV2();
//	float nGPUMemory = Float.parseFloat(getGPUInfo.get(0).replace(" MB", "").trim());
		String[] parseString = getGPUInfo.get(0).split("MB");
		float nGPUMemory = Float.parseFloat(parseString[0].trim());
		int nGPURendered = Integer.parseInt(getGPUInfo.get(1).replace("Total frames rendered: ", "").trim());

		// #### App Performance Network Traffic Usage Info
		int nNetTraffic = getApp_NetworkTrafficUsageV2(appPackageName);

		// #### App Performance Battery Info
		String batteryInfo = BatteryStats_PerformanceV2();

		verifyElementPresent(AMDHomePage.objCarouselBtn, "Play Btn");

		Instant endTime = Instant.now();
		logger.info("Instant End time : " + endTime);

		Duration timeElapsed = Duration.between(startTime, endTime);
		logger.info("Time taken to login with registered user (sec): " + timeElapsed.getSeconds());

		if (timeElapsed.getSeconds() < threshold_TimeTaken) {
			logger.info("Time taken to login with registered user (Sec): " + timeElapsed.getSeconds());
			extent.extentLoggerPass("Timer",
					"<b>Time taken to login with registered user (Sec)</b>: " + timeElapsed.getSeconds());
		} else {
			timeFlag = false;
			logger.info("Taken too long to login with registered user (Sec): " + timeElapsed.getSeconds());
			extent.extentLoggerFail("Timer",
					"<b>Taken too long to login with registered user (Sec)</b>: " + timeElapsed.getSeconds());
		}
		softAssertion.assertEquals(timeFlag, true);

		if (nativeMemory < threshold_NativeMemory) {
			logger.info("App Memory Info - Native Heap : " + nativeMemory + " MB");
			extent.extentLoggerPass("Memory Info", "<b>App Memory Info - Native Heap :</b> " + nativeMemory + " MB");
		} else {
			memFlag = false;
			logger.error("App Memory Info - Native Heap : " + nativeMemory + " MB");
			extent.extentLoggerFail("Memory Info", "<b>App Memory Info - Native Heap :</b> " + nativeMemory + " MB");
		}
		softAssertion.assertEquals(memFlag, true);

		if (totalMemory < threshold_TotalMemory) {
			logger.info("App Memory Info - Total : " + totalMemory + " MB");
			extent.extentLoggerPass("Memory Info", "<b>App Memory Info - Total :</b> " + totalMemory + " MB");
		} else {
			totalmemFlag = false;
			logger.error("App Memory Info - Total : " + totalMemory + " MB");
			extent.extentLoggerFail("Memory Info", "<b>App Memory Info - Total :</b> " + totalMemory + " MB");
		}
		softAssertion.assertEquals(totalmemFlag, true);

		if (nCpuUSage < threshold_CPU) {
			logger.info("App CPU  Usage status : " + nCpuUSage + "%");
			extent.extentLoggerPass("CPU Info", "<b>App CPU Usage status : </b> " + nCpuUSage + "%");
		} else {
			cpuFlag = false;
			logger.error("App Memory Info - Total : " + nCpuUSage + "%");
			extent.extentLoggerFail("CPU Info", "<b>App CPU Usage status : </b> " + nCpuUSage + "%");
		}
		softAssertion.assertEquals(cpuFlag, true);

		if (nGPUMemory < threshold_GPUMem) {
			logger.info("\nTotal GPU Memory Usage of Current session : " + nGPUMemory + " MB");
			extent.extentLoggerPass("GPU Info",
					"<b>Total GPU Memory Usage of Current session :</b> " + nGPUMemory + " MB");
		} else {
			gpuMemFlag = false;
			logger.error("\nTotal GPU Memory Usage of Current session exceeded : " + nGPUMemory + " MB");
			extent.extentLoggerFail("GPU Info",
					"<b>Total GPU Memory Usage of Current session exceeded:</b> " + nGPUMemory + " MB");
		}
		softAssertion.assertEquals(gpuMemFlag, true);

		if (nGPURendered < threshold_GPURendered) {
			logger.info("\nGPU Current session - Total frames rendered: " + nGPURendered);
			extent.extentLoggerPass("GPU Info", "<b>GPU Current session - Total frames rendered: </b> " + nGPURendered);
		} else {
			gpuRenFlag = false;
			logger.error("\nGPU Current session - Total frames rendered: " + nGPURendered);
			extent.extentLoggerFail("GPU Info", "<b>GPU Current session - Total frames rendered: </b> " + nGPURendered);
		}
		softAssertion.assertEquals(gpuRenFlag, true);

		if (nNetTraffic < threshold_Network) {
			logger.info("\nThe current App traffic usage is : " + (int) nNetTraffic + " Mb");
			extent.extentLoggerPass("Traffic Usage",
					"<b>The Current App traffic usage is : </b> " + (int) nNetTraffic + " Mb");
		} else {
			trafficFlag = false;
			logger.error("\nThe current App traffic usage is : " + (int) nNetTraffic + " Mb");
			extent.extentLoggerFail("Traffic Usage",
					"<b>The Current App traffic usage is : </b> " + (int) nNetTraffic + " Mb");
		}
		performaceDetails.add("Login " + "," + timeElapsed.getSeconds() + "," + nativeMemory + " MB," + totalMemory
				+ " MB," + nCpuUSage + "%," + nGPUMemory + " MB," + nGPURendered + "," + nNetTraffic + " MB");

		String timeTaken = Long.toString(timeElapsed.getSeconds());
		String strNativeMemory = Integer.toString(nativeMemory);
		String strTotalMemory = Integer.toString(totalMemory);
		String strCPU = Integer.toString(nCpuUSage);
		String strGPU = Float.toString(nGPUMemory);
		String strGPURendered = Integer.toString(nGPURendered);
		String strTraffic = Integer.toString(nNetTraffic);

		performaceMatrics.put("Time Taken", timeTaken + " Sec");
		performaceMatrics.put("Memory Native Heap", strNativeMemory + " MB");
		performaceMatrics.put("Total Memory", strTotalMemory + " MB");
		performaceMatrics.put("CPU", strCPU + "%");
		performaceMatrics.put("GPU", strGPU + " MB");
		performaceMatrics.put("Total Frames Rendered", strGPURendered);
		performaceMatrics.put("Current Traffic Usage", strTraffic + " MB");

		System.out.println(
				"\n---------------------------------------------- Login Functionality ----------------------------------------------");
		System.out.println(performaceMatrics);
		System.out.println(
				"-------------------------------------------------------------------------------------------------------------------");

		softAssertion.assertEquals(trafficFlag, true);
		softAssertion.assertAll();

		if (batteryInfo.contains("drain")) {
			logger.info("\nApp Battery Info - " + batteryInfo);
			extent.extentLoggerPass("Timer", "<b>App Battery Info - </b>" + batteryInfo);
		} else {
			logger.error("\nApp Battery Info - " + batteryInfo);
			extent.extentLoggerFail("Timer", "<b>App Battery Info - </b>" + batteryInfo);
		}
	}
/**
 * @note This method is used to check the performance of content playbck
 * @throws Exception
 */
	public void performance_InitiateContentPlayback() throws Exception {
		extent.HeaderChildNode("Initiate content playback Performance detail");
		System.out.println("\n>>> Initiate content playback Performance detail");

//	String appPackageName = getParameterFromXML("appPackageName");
		String appPackageName = "com.graymatrix.did";

		// Threshold Values declaration
		int threshold_TimeTaken = 9;
		int threshold_NativeMemory = 44;
		int threshold_TotalMemory = 280;
		int threshold_CPU = 110;
		int threshold_GPUMem = 26;
		int threshold_GPURendered = 2300;
		int threshold_Network = 90;
		boolean timeFlag = true, memFlag = true, totalmemFlag = true, cpuFlag = true, gpuMemFlag = true,
				gpuRenFlag = true, trafficFlag = true;

		loginWithEmailID("zeetest34new@test.com", "123456");
		waitForElementDisplayed(AMDHomePage.objZee5Logo, 30);
		selectTopNavigationTab("Movies");
		verifyElementPresentAndClick(AMDHomePage.objPlayBtn, "Play");
		Instant startTime = Instant.now();
		logger.info("Instant Start time : " + startTime);

		verifyElementPresent(AMDPlayerScreen.objPauseIcon, "Player Start");

		// #### App Performance MEMORY Usage Info
		ArrayList<String> getMmoryInfo = Memory_UsagePerformanceV2();
		int nativeMemory = Integer.parseInt(getMmoryInfo.get(0).trim());
		int totalMemory = Integer.parseInt(getMmoryInfo.get(1).trim());

		// #### App Performance CPU Usage Info
		String getCPUInfo = cpu_UsagePerformanceV2();
		int nCpuUSage = Integer.parseInt(getCPUInfo);

		// #### App Performance GPU Usage Info
		ArrayList<String> getGPUInfo = GPU_UsagePerformanceV2();
		float nGPUMemory = Float.parseFloat(getGPUInfo.get(0).replace(" MB", "").trim());
		int nGPURendered = Integer.parseInt(getGPUInfo.get(1).replace("Total frames rendered: ", "").trim());

		// #### App Performance Network Traffic Usage Info
		int nNetTraffic = getApp_NetworkTrafficUsageV2(appPackageName);

		// #### App Performance Battery Info
		String batteryInfo = BatteryStats_PerformanceV2();

		Instant endTime = Instant.now();
		logger.info("Instant End time : " + endTime);

		Duration timeElapsed = Duration.between(startTime, endTime);
		extent.extentLogger("Timer",
				"<b>Time taken to start playback in consumption screen (Sec):</b> " + timeElapsed.getSeconds());
		Back(1);

		if (timeElapsed.getSeconds() < threshold_TimeTaken) {
			logger.info("Time taken to start playback in consumption screen (Sec): " + timeElapsed.getSeconds());
			extent.extentLoggerPass("Timer",
					"<b>Time taken to start playback in consumption screen (Sec)</b>: " + timeElapsed.getSeconds());
		} else {
			timeFlag = false;
			logger.info("Time taken to start playback in consumption screen (Sec): " + timeElapsed.getSeconds());
			extent.extentLoggerFail("Timer",
					"<b>Time taken to start playback in consumption screen (Sec)</b>: " + timeElapsed.getSeconds());
		}
		softAssertion.assertEquals(timeFlag, true);

		if (nativeMemory < threshold_NativeMemory) {
			logger.info("App Memory Info - Native Heap : " + nativeMemory + " MB");
			extent.extentLoggerPass("Memory Info", "<b>App Memory Info - Native Heap :</b> " + nativeMemory + " MB");
		} else {
			memFlag = false;
			logger.error("App Memory Info - Native Heap : " + nativeMemory + " MB");
			extent.extentLoggerFail("Memory Info", "<b>App Memory Info - Native Heap :</b> " + nativeMemory + " MB");
		}
		softAssertion.assertEquals(memFlag, true);

		if (totalMemory < threshold_TotalMemory) {
			logger.info("App Memory Info - Total : " + totalMemory + " MB");
			extent.extentLoggerPass("Memory Info", "<b>App Memory Info - Total :</b> " + totalMemory + " MB");
		} else {
			totalmemFlag = false;
			logger.error("App Memory Info - Total : " + totalMemory + " MB");
			extent.extentLoggerFail("Memory Info", "<b>App Memory Info - Total :</b> " + totalMemory + " MB");
		}
		softAssertion.assertEquals(totalmemFlag, true);

		if (nCpuUSage < threshold_CPU) {
			logger.info("App CPU  Usage status : " + nCpuUSage + "%");
			extent.extentLoggerPass("CPU Info", "<b>App CPU Usage status : </b> " + nCpuUSage + "%");
		} else {
			cpuFlag = false;
			logger.error("App Memory Info - Total : " + nCpuUSage + "%");
			extent.extentLoggerFail("CPU Info", "<b>App CPU Usage status : </b> " + nCpuUSage + "%");
		}
		softAssertion.assertEquals(cpuFlag, true);

		if (nGPUMemory < threshold_GPUMem) {
			logger.info("\nTotal GPU Memory Usage of Current session : " + nGPUMemory + " MB");
			extent.extentLoggerPass("GPU Info",
					"<b>Total GPU Memory Usage of Current session :</b> " + nGPUMemory + " MB");
		} else {
			gpuMemFlag = false;
			logger.error("\nTotal GPU Memory Usage of Current session exceeded : " + nGPUMemory + " MB");
			extent.extentLoggerFail("GPU Info",
					"<b>Total GPU Memory Usage of Current session exceeded:</b> " + nGPUMemory + " MB");
		}
		softAssertion.assertEquals(gpuMemFlag, true);

		if (nGPURendered < threshold_GPURendered) {
			logger.info("\nGPU Current session - Total frames rendered: " + nGPURendered);
			extent.extentLoggerPass("GPU Info", "<b>GPU Current session - Total frames rendered: </b> " + nGPURendered);
		} else {
			gpuRenFlag = false;
			logger.error("\nGPU Current session - Total frames rendered: " + nGPURendered);
			extent.extentLoggerFail("GPU Info", "<b>GPU Current session - Total frames rendered: </b> " + nGPURendered);
		}
		softAssertion.assertEquals(gpuRenFlag, true);

		if (nNetTraffic < threshold_Network) {
			logger.info("\nThe current App traffic usage is : " + (int) nNetTraffic + " Mb");
			extent.extentLoggerPass("Traffic Usage",
					"<b>The Current App traffic usage is : </b> " + (int) nNetTraffic + " Mb");
		} else {
			trafficFlag = false;
			logger.error("\nThe current App traffic usage is : " + (int) nNetTraffic + " Mb");
			extent.extentLoggerFail("Traffic Usage",
					"<b>The Current App traffic usage is : </b> " + (int) nNetTraffic + " Mb");
		}
		performaceDetails.add(
				"Initiate Content playback" + "," + timeElapsed.getSeconds() + "," + nativeMemory + " MB," + totalMemory
						+ " MB," + nCpuUSage + "%," + nGPUMemory + " MB," + nGPURendered + "," + nNetTraffic + " MB");

		String timeTaken = Long.toString(timeElapsed.getSeconds());
		String strNativeMemory = Integer.toString(nativeMemory);
		String strTotalMemory = Integer.toString(totalMemory);
		String strCPU = Integer.toString(nCpuUSage);
		String strGPU = Float.toString(nGPUMemory);
		String strGPURendered = Integer.toString(nGPURendered);
		String strTraffic = Integer.toString(nNetTraffic);

		performaceMatrics.put("Time Taken", timeTaken + " Sec");
		performaceMatrics.put("Memory Native Heap", strNativeMemory + " MB");
		performaceMatrics.put("Total Memory", strTotalMemory + " MB");
		performaceMatrics.put("CPU", strCPU + "%");
		performaceMatrics.put("GPU", strGPU + " MB");
		performaceMatrics.put("Total Frames Rendered", strGPURendered);
		performaceMatrics.put("Current Traffic Usage", strTraffic + " MB");

		System.out.println(
				"\n---------------------------------------------- Content Playback  ----------------------------------------------");
		System.out.println(performaceMatrics);
		System.out.println(
				"-------------------------------------------------------------------------------------------------------------------");

		softAssertion.assertEquals(trafficFlag, true);
		softAssertion.assertAll();

		if (batteryInfo.contains("drain")) {
			logger.info("\nApp Battery Info - " + batteryInfo);
			extent.extentLoggerPass("Timer", "<b>App Battery Info - </b>" + batteryInfo);
		} else {
			logger.error("\nApp Battery Info - " + batteryInfo);
			extent.extentLoggerFail("Timer", "<b>App Battery Info - </b>" + batteryInfo);
		}
	}

	public void AppPerformanceTestInfo(String pPackageName) throws Exception {
		System.out.println("\nApp Performance Test infomation - Memory|CPU|GPU|Battery and Network Usage");

		Memory_UsagePerformance();
		batteryStats_Performance();
		cpu_UsagePerformance();
		gpu_UsagePerformance();
		getApp_NetworkTrafficUsage(pPackageName);
	}
/**
 * @note this method is used to check network trafic usage.
 * @param pPackageName
 * @throws Exception
 */
	public void getApp_NetworkTrafficUsage(String pPackageName) throws Exception {

//	String PackageName = "com.graymatrix.did";

		double flowAction = 0;
		try {
			String pidCommand = "adb shell pidof " + pPackageName;
			Process process = Runtime.getRuntime().exec(pidCommand);
			BufferedReader pidResult = new BufferedReader(new InputStreamReader(process.getInputStream()));

			String PID = pidResult.readLine().trim();
			// System.out.println("PID : "+PID);

			Runtime runtime = Runtime.getRuntime();
			Process proc = runtime.exec("adb shell cat /proc/" + PID + "/net/dev");
			try {
				if (proc.waitFor() != 0) {
					System.err.println("exit value = " + proc.exitValue());
				}
				BufferedReader in = new BufferedReader(new InputStreamReader(proc.getInputStream()));
				StringBuffer stringBuffer = new StringBuffer();
				String line = null;
				while ((line = in.readLine()) != null) {
					stringBuffer.append(line + " ");

				}
				String str1 = stringBuffer.toString();
				String str2 = str1.substring(str1.indexOf("wlan0:"), str1.indexOf("wlan0:") + 100);

				// System.out.println("sent first sentence" + str2);
				// The space is divided into a string array to take the second and tenth
				// numbers, which are the sending traffic and the receiving traffic.
				String[] toks = str2.split(" +");
				String str4 = toks[1];
				String str6 = toks[9];
				int b = Integer.parseInt(str4);
				int a = Integer.parseInt(str6);

				double sendFlow = a / 1024;
				double revFlow = b / 1024;
				flowAction = sendFlow + revFlow;
				System.out.println("The current App traffic usage is : " + flowAction + "Kbps");
				logger.info("\nThe current App traffic usage is : " + (int) flowAction / 1024 + "Mbps");
				extent.extentLoggerPass("Traffic Usage",
						"<b>The current App traffic usage is : </b> " + (int) flowAction / 1024 + "Mbps");

			} catch (InterruptedException e) {
				System.err.println(e);
			} finally {
				try {
					proc.destroy();
				} catch (Exception e2) {
				}
			}
		} catch (Exception StringIndexOutOfBoundsException) {
			System.out.println("Please check if the device is connected | App is closed");
			extent.extentLoggerWarning("Traffic Usage",
					"<b>Please check if the device is connected | App is closed </b>");
		}
	}
/**
 * @note this method is used for validation of offline video
 * @throws Exception
 */
	public void tapOnVideoInOfflineMode() throws Exception {
		extent.HeaderChildNode("Offline Screen Validation");
		System.out.println("\nOffline Screen Validation");
		waitTime(3000);
		click(AMDHomePage.objMoviesTab, "Movie tab");
		waitTime(5000);
		TurnOFFWifi();
		if (getOEMName.equalsIgnoreCase("Sony")) {
			wifi_TurnOFFnON();
		}
		waitTime(2000);
		waitForElementAndClickIfPresent(AMDHomePage.objPlayBtn, 10, "Play icon");
		waitTime(3000);
		if (verifyElementDisplayed(AMDHomePage.objRetryCTA)) {
			String text = findElement(AMDConsumptionScreen.objErrTextOnPlayer).getText();
			logger.info(text + " with Retry CTA is displayed");
			extentLoggerPass("Applaunch", text + " with Retry CTA is displayed");
		} else {
			logger.error("Retry CTA is not displayed");
			extentLoggerFail("Buy Now CTA", "Retry CTA is not displayed");
		}
		TurnONWifi();
		if (getOEMName.equalsIgnoreCase("Sony")) {
			wifi_TurnOFFnON();
		}
		waitTime(2000);
		Back(1);
	}
/**
 * @note AMA2 10443 defect validation
 * @param userType
 * @throws Exception
 */
	public void verifyContinueCTAInSubscribeScreen(String userType) throws Exception {
		// AMA2-10443
		extent.HeaderChildNode("AMA2-10443 : 'Continue with ₹299 per month' text is displayed on continue cta");
		logger.info("AMA2-10443 : 'Continue with ₹299 per month' text is displayed on continue cta");
		if (!userType.equalsIgnoreCase("SubscribedUser")) {
			click(AMDHomePage.objSubscribeTeaser, "Buy Plan CTA on Home landing screen");
			Swipe("UP", 1);
			verifyElementExist(AMDSubscibeScreen.obj299Pack, "299 pack");
			String planprice = findElement(AMDSubscibeScreen.obj299Pack).getText();
			logger.info(planprice);
			verifyElementExist(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue CTA");
			String ContinueCTA = findElement(AMDSubscibeScreen.objContinueOnSubscribePopup).getText();
			logger.info(ContinueCTA);
			if (ContinueCTA.contains("per month")) {
				extent.extentLoggerFail("Subscribe screen", "[AMA2-10443] " + ContinueCTA + " is displayed");
				logger.error("[AMA2-10443] " + ContinueCTA + " is displayed");
			} else {
				extent.extentLoggerPass("Subscribe screen", ContinueCTA + " is displayed");
				logger.info(ContinueCTA + " is displayed");
			}
		} else {
			logger.info("AMA2-10443 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-10443 : Not applicable for " + userType);
		}

	}
/**
 * @note AMA2 10784 defect validation
 * @param userType
 * @throws Exception
 */
	public void verifyErrorMessageOnPlayerOnTappingNextButton(String userType) throws Exception {
		// AMA2-10784
		extent.HeaderChildNode(
				"AMA2-10784 : Oops!! Something went wrong along with retry button is getting displayed on player, On tapping next button on the player for Zee Tray's");
		logger.info(
				"AMA2-10784 :Oops!! Something went wrong along with retry button is getting displayed on player, On tapping next button on the player for Zee Tray's");
		click(AMDHomePage.objShowsTab, "Shows tab");
		selectContentLang_MoreMenu2("Tamil");
		findParticularTray(AMDHomePage.objzeetamilshowstray, "Zee Tamil Shows tray");
		String getTrayName = getText(AMDHomePage.objzeetamilshowstray);
		click(AMDHomePage.objViewAllBtn(getTrayName), getTrayName + " - View All button");
		click(AMDHomePage.objFirstContentCardFromListingScreen, "Content card");
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			waitTime(4000);
			registerPopUpClose();
			completeProfilePopUpClose(userType);
			waitForAdToFinishInAmd();
			registerPopUpClose();
		}
		waitTime(8000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		click(AMDPlayerScreen.objNextIcon, "Next icon on player");
		boolean value = verifyElementIsNotDisplayed(AMDPlayerScreen.objRetryBtn);
		if (value == true) {
			extent.extentLoggerPass("Player screen", "Playback is initiated");
			logger.info("Playback is initiated");
		} else {
			String text = findElement(AMDPlayerScreen.objInPlayerError).getText();
			logger.error("[AMA2-10784] " + text + " with Retry CTA is displayed");
			extentLoggerFail("PlayerScreen", "[AMA2-10784] " + text + " with Retry CTA is displayed");
		}

	}
/**
 * @note AMA2 10577 defect validation.
 * @param userType
 * @throws Exception
 */
	public void functionalityOfExplorePremium(String userType) throws Exception {
		// AMA2-10577
		extent.HeaderChildNode(
				"AMA2-10577 : User navigates back to more/previous screen post tapping on 'Explore Premium' button from pack selection screen");
		logger.info(
				"AMA2-10577 :User navigates back to more/previous screen post tapping on 'Explore Premium' button from pack selection screen");
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
			verifyElementPresentAndClick(AMDMoreMenu.objMySubscription, "My Subscription");
			waitTime(3000);
			verifyElementPresentAndClick(AMDMoreMenu.objBrowseAllPacks, "Browse All Packs CTA");
			waitTime(4000);
			verifyElementPresentAndClick(AMDSubscibeScreen.objexplorePremiumCTA, "Explore Premium CTA");
			String getSelectedTabName = getText(AMDHomePage.objSelectedTab);
			if (getSelectedTabName.equalsIgnoreCase("Home")) {
				extent.extentLoggerPass("More Screen",
						"User is navigated to Home landing screen post tapping on 'Explore Premium' button from pack selection screen");
				logger.info(
						"User is navigated to Home landing screen post tapping on 'Explore Premium' button from pack selection screen");
			} else {
				logger.error(
						"[AMA2-10577] User fails to navigate to Home landing screen post tapping on explore premium button.");
				extentLoggerFail("PlayerScreen",
						"[AMA2-10577] User fails to navigate to Home landing screen post tapping on explore premium button.");
			}
			click(AMDHomePage.objMoreMenu, "More menu");
			click(AMDMoreMenu.objBuySubscription, "Buy Plan");
			waitTime(4000);
			verifyElementPresentAndClick(AMDSubscibeScreen.objexplorePremiumCTA, "Explore Premium CTA");
			String getSelectedTab = getText(AMDHomePage.objSelectedTab);
			if (getSelectedTab.equalsIgnoreCase("Home")) {
				extent.extentLoggerPass("More Screen",
						"User is navigated to Home landing screen post tapping on 'Explore Premium' button from pack selection screen");
				logger.info(
						"User is navigated to Home landing screen post tapping on 'Explore Premium' button from pack selection screen");
			} else {
				logger.error(
						"[AMA2-10577] User fails to navigate to Home landing screen post tapping on explore premium button.");
				extentLoggerFail("PlayerScreen",
						"[AMA2-10577] User fails to navigate to Home landing screen post tapping on explore premium button.");
			}

		} else {
			logger.info("AMA2-10577 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-10577 : Not applicable for " + userType);
		}

	}
/**
 * AMA2 10349 defect validation
 * @param userType
 * @throws Exception
 */
	public void verifyBrowseAllPacksInMySubscription(String userType) throws Exception {
		// AMA2-10349
		extent.HeaderChildNode(
				"AMA2-10349 : User fails to navigate to Subcription pack selection screen instead it redirects back to More Menu screen, on tapping \"Browse All Packs\" CTA in My subscription");
		logger.info(
				"AMA2-10349 :User fails to navigate to Subcription pack selection screen instead it redirects back to More Menu screen, on tapping \"Browse All Packs\" CTA in My subscription");
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
			verifyElementPresentAndClick(AMDMoreMenu.objMySubscription, "My Subscription");
			waitTime(3000);
			verifyElementPresentAndClick(AMDMoreMenu.objBrowseAllPacks, "Browse All Packs CTA");
			waitTime(4000);
			if (verifyElementDisplayed(AMDSubscibeScreen.objNewSubscribePopup)) {
				extent.extentLoggerPass("More Screen",
						"User is navigated to Subscription pack selection screen post tapping on Browse all packs cta in My subscription screen");
				logger.info(
						"User is navigated to Subscription pack selection screen post tapping on Browse all packs cta in My subscription screen");
			} else {
				logger.error(
						"[AMA2-10349] User Fails to navigate to Susbcription pack selection screen post tapping on Broswe All packs CTA in My Subscription");
				extentLoggerFail("PlayerScreen",
						"[AMA2-10349] User Fails to navigate to Susbcription pack selection screen post tapping on Broswe All packs CTA in My Subscription");
			}
		} else {
			logger.info("AMA2-10349 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-10349 : Not applicable for " + userType);
		}

	}
/**
 * @note AMA2 10146 defect validation.
 * @param userType
 * @throws Exception
 */
	public void verifyErrorMeasageOfExpiredCode(String userType) throws Exception {
		// AMA2-10146
		extent.HeaderChildNode("AMA2-10146 : Error message displaying for Expired promocode is not as per VD");
		logger.info("AMA2-10146 : Error message displaying for Expired promocode is not as per VD");
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			verifyElementPresentAndClick(AMDHomePage.objGetPremium, "Buy Plan Header");
			waitTime(4000);
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscription screen");
			verifyElementExist(AMDSubscibeScreen.objPlanPriceValue, "Plan Price value");
			Swipe("UP", 2);
			verifyElementPresentAndClick(AMDSubscibeScreen.objHaveACodeCTA, "Have a code");
			verifyElementPresentAndClick(AMDSubscibeScreen.objEnterACodeEditFiled, "Enter a code field");
			hideKeyboard();
			type(AMDSubscibeScreen.objEnterACodeEditFiled, "ExpiredCode", "Enter a code field");
			verifyElementPresentAndClick(AMDSubscibeScreen.objApplyOnHaveACodescreen, "Apply CTA");
			verifyElementExist(AMDSubscibeScreen.objInvalidPromoCodeText, "Error text");
			String text = findElement(AMDSubscibeScreen.objInvalidPromoCodeText).getText();
			if (text.contains("Invalid")) {
				logger.error("[AMA2-10146] " + text + " is displayed instead 'Promo code is Expired' text");
				extentLoggerFail("HaveACode",
						"[AMA2-10146] " + text + " is displayed instead 'Promo code is Expired' text");
			} else {
				extent.extentLoggerPass("HaveACode", text + " error text is displayed");
				logger.info(text + " error text is displayed");
			}
		} else {
			logger.info("AMA2-10146 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-10146 : Not applicable for " + userType);
		}
	}
/**
 * @note AMA2 10600 defect validation
 * @param userType
 * @throws Exception
 */
	public void verifySubscribeIconPostLoggingFromLoginctaOnPlayer(String userType) throws Exception {
		// AMA2-10600
		extent.HeaderChildNode(
				"AMA2-10600 :Subscription header CTA/Get Premium CTA is displayed in all landing screens, post logging with Login CTA on player");
		logger.info(
				"AMA2-10600 :Subscription header CTA/Get Premium CTA is displayed in all landing screens, post logging with Login CTA on player");
		if (userType.equalsIgnoreCase("Guest")) {
			verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
			verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, "Karenjit Kaur", "Search bar");
			hideKeyboard();
			click(AMDDownloadPage.objsearchresultFirst, "Searched Show");
			verifyElementPresentAndClick(AMDPlayerScreen.objRetryBtn, "Login CTA on player");
			waitTime(3000);
			String SubscribedUsername = getParameterFromXML("SubscribedUserName");
			String SubscribedPassword = getParameterFromXML("SubscribedPassword");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SubscribedUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			Back(2);
			boolean value = verifyElementIsNotDisplayed(AMDHomePage.objSubscribeTeaser);
			if (value == true) {
				extent.extentLoggerPass("Search",
						"Subscription header CTA is not displayed, post login from Login CTA on the player.");
				logger.info("Subscription header CTA is not displayed, post login from Login CTA on the player.");
			} else {
				logger.error(
						"[AMA2-10600] Subscription header CTA is displayed in landing screen, post logging with Login CTA on the player");
				extentLoggerFail("HaveACode",
						"[AMA2-10600] Subscription header CTA is displayed in landing screen, post logging with Login CTA on the player");
			}
		} else {
			logger.info("AMA2-10600 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-10600 : Not applicable for " + userType);
		}

	}
/**
 * @note this method is used to check memory usage of the app
 * @return
 * @throws IOException
 */
	public ArrayList<String> Memory_UsagePerformanceV2() throws IOException {
		System.out.println("Memory Usage of Native App!");

		String getNativeMemory = "";
		String getTotalMemory = "";
		String adbCommand1 = "adb shell dumpsys meminfo com.graymatrix.did | grep Native";
		String adbCommand2 = "adb shell dumpsys meminfo com.graymatrix.did | grep TOTAL";

		Process process1 = Runtime.getRuntime().exec(adbCommand1);
		BufferedReader nativeResult = new BufferedReader(new InputStreamReader(process1.getInputStream()));
		Process process2 = Runtime.getRuntime().exec(adbCommand2);
		BufferedReader totalResult = new BufferedReader(new InputStreamReader(process2.getInputStream()));

		getNativeMemory = nativeResult.readLine().trim();
		getTotalMemory = totalResult.readLine().trim();

		ArrayList<String> getNativeValue = new ArrayList<String>();
		String[] splitData = getNativeMemory.split(" ");
		for (int i = 0; i < splitData.length; i++) {
			if (!splitData[i].isEmpty()) {
				getNativeValue.add(splitData[i]);
			}
		}

		ArrayList<String> getTotalValue = new ArrayList<String>();
		String[] splitData2 = getTotalMemory.split(" ");
		for (int i = 0; i < splitData2.length; i++) {
			if (!splitData2[i].isEmpty()) {
				getTotalValue.add(splitData2[i]);
			}
		}

		int mbNativeHeap = (Integer.parseInt(getNativeValue.get(2)) / 1024);
		logger.info("App Memory Info - Native Heap : " + mbNativeHeap + " MB");

		int mbTotal = (Integer.parseInt(getTotalValue.get(1)) / 1024);
		logger.info("App Memory Info - TOTAL : " + mbTotal + " MB");

		ArrayList<String> Memory_UsagePerformanceV2 = new ArrayList<String>();
		Memory_UsagePerformanceV2.add(convertToString(mbNativeHeap));
		Memory_UsagePerformanceV2.add(convertToString(mbTotal));

		return Memory_UsagePerformanceV2;
	}
/**
 * @note this method is used to check CPU usage of the app
 * @return
 * @throws IOException
 */
	public String cpu_UsagePerformanceV2() throws IOException {
		System.out.println("\nCPU Usage of App");

		String getCpuStats = "";
		String adbCommand = "adb shell dumpsys cpuinfo | grep com.graymatrix.did";
		Process process = Runtime.getRuntime().exec(adbCommand);
		BufferedReader adbResult = new BufferedReader(new InputStreamReader(process.getInputStream()));

		getCpuStats = adbResult.readLine().trim();
//	System.out.println(getCpuStats);

		String[] getCPUStatus = getCpuStats.split(" ");
		logger.info("App CPU Usage status : " + getCPUStatus[0]);

		String CPUInfo = getCPUStatus[0].replace("%", "").trim();
		return CPUInfo;
	}
/**
 * @note this method is used to check GPU Memory Usage of Current session
 * @return
 * @throws Exception
 */
	public ArrayList<String> GPU_UsagePerformanceV2() throws Exception {
		System.out.println("\nGPU Usage of App");

		String getGPUInfo = "";
		String nGPUFramesRendered = "";
		String GPUConsumed = null;
		String adbCommand = "adb shell dumpsys gfxinfo com.graymatrix.did | grep bytes,";
		String adbCommand2 = "adb shell dumpsys gfxinfo com.graymatrix.did | grep rendered";

		Process process = Runtime.getRuntime().exec(adbCommand);
		BufferedReader result = new BufferedReader(new InputStreamReader(process.getInputStream()));

		Process process2 = Runtime.getRuntime().exec(adbCommand2);
		BufferedReader result2 = new BufferedReader(new InputStreamReader(process2.getInputStream()));

		getGPUInfo = result.readLine().trim();
		// System.out.println(getGPUInfo);
//		String[] splitData = getGPUInfo.split(",");
//		String GPUConsumed = splitData[1].trim();

		if (getGPUInfo.contains(",")) {
			String[] splitData = getGPUInfo.split(",");
			if (splitData[1].contains("(")) {
				String[] splitData2 = splitData[1].split("MB");
				GPUConsumed = splitData2[0].trim() + " MB";
			} else {
				GPUConsumed = splitData[1].trim();
			}
		} else if (getGPUInfo.contains(":")) {
			String[] splitData = getGPUInfo.replace("Texture:", "").split("MB");
			GPUConsumed = splitData[0].trim() + " MB";
		}
		nGPUFramesRendered = result2.readLine().trim();

		logger.info("\nTotal GPU Memory Usage of Current session : " + GPUConsumed);
		logger.info("\nGPU Rendering Info of Current session - " + nGPUFramesRendered);

		ArrayList<String> GPU_UsagePerformanceV2 = new ArrayList<String>();
		GPU_UsagePerformanceV2.add(GPUConsumed);
		GPU_UsagePerformanceV2.add(nGPUFramesRendered);

		return GPU_UsagePerformanceV2;
	}
/**
 * @note This method is used to check network trafic
 * @param pPackageName
 * @return
 * @throws Exception
 */
	public int getApp_NetworkTrafficUsageV2(String pPackageName) throws Exception {

//		String PackageName = "com.graymatrix.did";
		int flowAction = 0;
		try {
			String pidCommand = "adb shell pidof " + pPackageName;
			Process process = Runtime.getRuntime().exec(pidCommand);
			BufferedReader pidResult = new BufferedReader(new InputStreamReader(process.getInputStream()));

			String PID = pidResult.readLine().trim();
			// System.out.println("PID : "+PID);

			Runtime runtime = Runtime.getRuntime();
			Process proc = runtime.exec("adb shell cat /proc/" + PID + "/net/dev");
			try {
//					if (proc.waitFor() != 0) {
//						System.err.println("exit value = " + proc.exitValue());
//					}
				BufferedReader in = new BufferedReader(new InputStreamReader(proc.getInputStream()));
				StringBuffer stringBuffer = new StringBuffer();
				String line = null;
				while ((line = in.readLine()) != null) {
					stringBuffer.append(line + " ");

				}
				String str1 = stringBuffer.toString();
				String str2 = str1.substring(str1.indexOf("wlan0:"), str1.indexOf("wlan0:") + 100);

				// System.out.println("sent first sentence" + str2);
				// The space is divided into a string array to take the second and tenth
				// numbers, which are the sending traffic and the receiving traffic.
				String[] toks = str2.split(" +");
				String str4 = toks[1];
				String str6 = toks[9];
//					int b = Integer.parseInt(str4);
//					int a = Integer.parseInt(str6);
				long b = Long.parseLong(str4);
				long a = Long.parseLong(str6);

				int sendFlow = (int) (a / 1024);
				int revFlow = (int) (b / 1024);
				flowAction = sendFlow + revFlow;
				flowAction = flowAction / 1024;
				logger.info("\nCurrent App traffic usage: " + flowAction + "MB");
				// extent.extentLogger("Traffic Usage","<b>Current App traffic usage:
				// </b> " + (int)flowAction/1024 + "Mbps");
			}
//					catch (InterruptedException e) {
//					System.err.println(e);
//				} 
			finally {
				try {
					proc.destroy();
				} catch (Exception e2) {
				}
			}
		} catch (Exception StringIndexOutOfBoundsException) {
			System.out.println("Please check if the device is connected | App is closed");
			extent.extentLoggerWarning("Traffic Usage",
					"<b>Please check if the device is connected | App is closed </b>");
		}
		return flowAction;
	}
/**
 * @note This method is used to check the battery status 
 * @return
 * @throws Exception
 */
	public String BatteryStats_PerformanceV2() throws Exception {
		System.out.println("\nBattery Status Information");

		String getBatteryInfo = "";
//	String adbCommand="adb shell dumpsys batterystats --charged com.graymatrix.did | grep Computed";
		String adbCommand = "adb shell pm dump com.graymatrix.did | grep Computed";
		String strDrain = "Not found";
		try {
			Process process = Runtime.getRuntime().exec(adbCommand);
			BufferedReader result = new BufferedReader(new InputStreamReader(process.getInputStream()));

			getBatteryInfo = result.readLine().trim();
			System.out.println(getBatteryInfo);

			if (getBatteryInfo.contains("drain")) {
				String[] listOfData = getBatteryInfo.split(",");
				for (int i = 0; i < listOfData.length; i++) {
					if (listOfData[i].contains("Computed drain")) {
						strDrain = listOfData[i];
					}
				}
				logger.info("\nApp Battery Info - " + strDrain);
			}

		} catch (Exception e) {
			System.out.println(strDrain);
		}
		return strDrain;
	}
/**
 * @note this method is used to verify the performance parameters after launching app
 * @param permission
 * @throws Exception
 */
	public void appLaunchDeviceLocationPopUp(String permission) throws Exception {
		extent.HeaderChildNode("App Launch Scenario");
		System.out.println("App Launch Scenario");

		// Threshold Values declaration
		int threshold_TimeTaken = 11;
		int threshold_NativeMemory = 30;
		int threshold_TotalMemory = 200;
		int threshold_CPU = 200;
		int threshold_GPUMem = 7;
		int threshold_GPURendered = 1500;
		int threshold_Network = 8;

		boolean flag = false;

		if (verifyElementExist(AMDOnboardingScreen.objAllowLocationAccessPopup, "AllowPopup")) {
			String str1 = getAttributValue("text", AMDOnboardingScreen.objFirstPermissionButton);
			String str2 = getAttributValue("text", AMDOnboardingScreen.objSecondPermissionButton);

			if (str1.contains("ALLOW")) {
				System.out.println("ALLOW is present");
				click(AMDOnboardingScreen.objAllow(str1), str1);
			} else if (str1.contains("WHILE USING THE APP")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.objAllow(str1), str1);
			} else if (str1.contains("Allow")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.objAllow(str1), str1);
			} else if (str2.contains("ALLOW")) {
				System.out.println("ALLOW is present");
				click(AMDOnboardingScreen.objAllow(str2), str2);
			} else if (str2.contains("Allow")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.objAllow(str2), str2);
			}
			flag = true;
			verifyElementPresent(AMDHomePage.objFirstRailDisplay, "First Rail Loaded");
			// AppPerformanceTestInfo("com.graymatrix.did");

		} else {
			System.out.println("Access Device Location PopUp not displayed");
		}

		if (flag) {

			ArrayList<String> getMmoryInfo = Memory_UsagePerformanceV2();
			int nativeMemory = Integer.parseInt(getMmoryInfo.get(0).trim());
			int totalMemory = Integer.parseInt(getMmoryInfo.get(1).trim());

			// #### App Performance CPU Usage Info
			String getCPUInfo = cpu_UsagePerformanceV2();
			int nCpuUSage = Integer.parseInt(getCPUInfo);

			// #### App Performance GPU Usage Info
			ArrayList<String> getGPUInfo = GPU_UsagePerformanceV2();
			float nGPUMemory = Float.parseFloat(getGPUInfo.get(0).replace(" MB", "").trim());
			int nGPURendered = Integer.parseInt(getGPUInfo.get(1).replace("Total frames rendered: ", "").trim());

			// #### App Performance Network Traffic Usage Info
			double nNetTraffic = getApp_NetworkTrafficUsageV2("com.graymatrix.did");

			if (DriverInstance.timeElapsed.getSeconds() < threshold_TimeTaken) {
				logger.info("Time taken to launch the App (Sec): " + DriverInstance.timeElapsed.getSeconds());
				extent.extentLoggerPass("Timer",
						"<b>Time taken to launch the App (Sec)</b>: " + DriverInstance.timeElapsed.getSeconds());
			} else {
				logger.info("Time taken to launch the App (Sec): " + DriverInstance.timeElapsed.getSeconds());
				extent.extentLoggerFail("Timer",
						"<b>Time taken to launch the App (Sec)</b>: " + DriverInstance.timeElapsed.getSeconds());
			}

			if (nativeMemory < threshold_NativeMemory) {
				logger.info("App Memory Info - Native Heap : " + nativeMemory + " MB");
				extent.extentLoggerPass("Memory Info",
						"<b>App Memory Info - Native Heap :</b> " + nativeMemory + " MB");
			} else {
				logger.error("App Memory Info - Native Heap : " + nativeMemory + " MB");
				extent.extentLoggerFail("Memory Info",
						"<b>App Memory Info - Native Heap :</b> " + nativeMemory + " MB");
			}

			if (totalMemory < threshold_TotalMemory) {
				logger.info("App Memory Info - Total : " + totalMemory + " MB");
				extent.extentLoggerPass("Memory Info", "<b>App Memory Info - Total :</b> " + totalMemory + " MB");
			} else {
				logger.error("App Memory Info - Total : " + totalMemory + " MB");
				extent.extentLoggerFail("Memory Info", "<b>App Memory Info - Total :</b> " + totalMemory + " MB");
			}

			if (nCpuUSage < threshold_CPU) {
				logger.info("App CPU  Usage status : " + nCpuUSage + "%");
				extent.extentLoggerPass("CPU Info", "<b>App CPU Usage status : </b> " + nCpuUSage + "%");
			} else {
				logger.error("App Memory Info - Total : " + nCpuUSage + "%");
				extent.extentLoggerFail("CPU Info", "<b>App CPU Usage status : </b> " + nCpuUSage + "%");
			}

			if (nGPUMemory < threshold_GPUMem) {
				logger.info("\nTotal GPU Memory Usage of Current session : " + nGPUMemory + " MB");
				extent.extentLoggerPass("GPU Info",
						"<b>Total GPU Memory Usage of Current session :</b> " + nGPUMemory + " MB");
			} else {
				logger.error("\nTotal GPU Memory Usage of Current session exceeded : " + nGPUMemory + " MB");
				extent.extentLoggerFail("GPU Info",
						"<b>Total GPU Memory Usage of Current session exceeded:</b> " + nGPUMemory + " MB");
			}

			if (nGPURendered < threshold_GPURendered) {
				logger.info("\nGPU Current session - Total frames rendered: " + nGPURendered);
				extent.extentLoggerPass("GPU Info",
						"<b>GPU Current session - Total frames rendered: </b> " + nGPURendered);
			} else {
				logger.error("\nGPU Current session - Total frames rendered: " + nGPURendered);
				extent.extentLoggerFail("GPU Info",
						"<b>GPU Current session - Total frames rendered: </b> " + nGPURendered);
			}

			if (nNetTraffic < threshold_Network) {
				logger.info("\nThe current App traffic usage is : " + (int) nNetTraffic + " Mbps");
				extent.extentLoggerPass("Traffic Usage",
						"<b>The Current App traffic usage is : </b> " + (int) nNetTraffic + " Mbps");
			} else {
				logger.error("\nThe current App traffic usage is : " + (int) nNetTraffic + " Mbps");
				extent.extentLoggerFail("Traffic Usage",
						"<b>The Current App traffic usage is : </b> " + (int) nNetTraffic + " Mbps");
			}
		}
	}
/**
 * @note this method is used to handle device location pop up
 * @param permission
 * @throws Exception
 */
	public void accessDeviceLocationPopUp(String permission) throws Exception {
		extent.HeaderChildNode("Access Device Location PopUp");
		System.out.println("\nAccess Device Location PopUp");

		if (verifyElementExist(AMDOnboardingScreen.objAllowLocationAccessPopup, "AllowPopup")) {

			String str1 = getAttributValue("text", AMDOnboardingScreen.objFirstPermissionButton);
			String str2 = getAttributValue("text", AMDOnboardingScreen.objSecondPermissionButton);

			if (str1.contains("ALLOW")) {
				System.out.println("ALLOW is present");
				click(AMDOnboardingScreen.objAllow(str1), str1);
			} else if (str1.contains("WHILE USING THE APP")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.objAllow(str1), str1);
			} else if (str1.contains("Allow")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.objAllow(str1), str1);
			} else if (str2.contains("ALLOW")) {
				System.out.println("ALLOW is present");
				click(AMDOnboardingScreen.objAllow(str2), str2);
			} else if (str2.contains("Allow")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.objAllow(str2), str2);
			}
		} else {
			System.out.println("Access Device Location PopUp not displayed");
		}
	}
/**
 * @note this method is used to verify the downloaded content offline playback.
 * @param userType
 * @throws Exception
 */
	public void playDownloadedContentOffline(String userType) throws Exception {
		if (!(userType.equalsIgnoreCase("Guest"))) {
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			waitTime(2000);
			click(AMDDownloadPage.objDownloadedContent, "Downloaded content");
			waitTime(2000);
			TurnOFFWifi();
			if (getOEMName.equalsIgnoreCase("Sony")) {
				wifi_TurnOFFnON();
			}
			waitTime(4000);
			verifyElementPresentAndClick(AMDDownloadPage.objPlayDownloadedContent, "Play Call-out");
			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			}
			if (verifyElementDisplayed(AMDPlayerScreen.objProgressBar)) {
				logger.info("Playback of downloaded content is initiated in offline");
				extent.extentLoggerPass("Downloads Screen", "Playback of downloaded content is initiated in offline");
			} else {
				logger.error("Playback of downloaded content is NOT initiated in offline");
				extent.extentLoggerFail("Downloads Screen",
						"Playback of downloaded content is NOT initiated in offline");
			}
			TurnONWifi();
			if (getOEMName.equalsIgnoreCase("Sony")) {
				wifi_TurnOFFnON();
			}
			waitTime(2000);
			BackToLandingScreen();
			click(AMDHomePage.objHomeBtn, "Home");
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			waitTime(2000);
			click(AMDDownloadPage.objDownloadedContent, "Downloaded content");
			waitTime(2000);
			click(AMDDownloadPage.objDeleteDownloadCTA, "Delete Download");
			waitTime(2000);
			Back(1);
		}
	}
/**
 * AMA2 10953 defect validation
 * @param userType
 * @throws Exception
 */
	public void verifyOTPPopup(String userType) throws Exception {
		// AMA2-10953
		extent.HeaderChildNode(
				"AMA2-10953 :Verify OTP popup fails to close on tapping minus symbol displayed on the top");
		logger.info("AMA2-10953 :Verify OTP popup fails to close on tapping minus symbol displayed on the top");
		if (userType.equalsIgnoreCase("Guest")) {
			String RegisteredMobile = getParameterFromXML("RegisteredMobile");
			waitTime(2000);
			click(AMDHomePage.objSubscribeTeaser, "Buy Plan Header");
			waitTime(3000);
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue CTA");
			verifyElementPresent(AMDLoginScreen.objAccountInfoScreen, "Account Info screen");
			click(AMDLoginScreen.objEmailIdField, "EmailId");
			type(AMDLoginScreen.objEmailIdField, RegisteredMobile, "Email-Id/Phone");
			hideKeyboard();
			click(AMDGenericObjects.objContinueCTA, "Continue button");
			verifyElementPresentAndClick(AMDSubscibeScreen.objGetOTP, "Get OTP CTA");
			verifyElementExist(AMDSubscibeScreen.objVerifyOTPScreen, "Verify OTP popup");
			verifyElementPresentAndClick(AMDSubscibeScreen.objminusOnVerifyOTP, "Minus symbol on verify OTP screen");
			waitTime(3000);
			boolean value = verifyElementIsNotDisplayed(AMDSubscibeScreen.objVerifyOTPScreen);
			if (value == true) {
				extent.extentLoggerPass("VerifyOTP",
						"Verify OTP is closed on tapping minus symbol displayed on the top");
				logger.info("Verify OTP is closed on tapping minus symbol displayed on the top");
			} else {
				logger.error(
						"[AMA2-10953] Verify OTP popup fails to close on tapping minus symbol displayed on the top");
				extentLoggerFail("VerifyOTP",
						"[AMA2-10953] Verify OTP popup fails to close on tapping minus symbol displayed on the top");
			}
		} else {
			logger.info("AMA2-10953 : Not applicable for " + userType);
			extent.extentLogger("VerifyOTP", "AMA2-10953 : Not applicable for " + userType);
		}
	}
/**
 * @note AMA2 10951 defect validation.
 * @param userType
 * @throws Exception
 */
	public void upgradeToPremiumCTA(String userType) throws Exception {
		// AMA2-10951
		extent.HeaderChildNode(
				"AMA2-10951 :'Get Premium' CTA is getting displayed instead 'Upgrade to Premium' CTA on player for RSVOD users");
		logger.info(
				"AMA2-10951 :'Get Premium' CTA is getting displayed instead 'Upgrade to Premium' CTA on player for RSVOD users");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, "Uri: The Surgical Strike", "Search bar");
		hideKeyboard();
		click(AMDDownloadPage.objsearchresultFirst, "Searched Show");
		waitTime(8000);
		verifyElementDisplayed(AMDPlayerScreen.objUpgradeToPremiumCTAOnPlayer);
		String text = findElement(AMDPlayerScreen.objUpgradeToPremiumCTAOnPlayer).getText();
		if (text.contains("Upgrade")) {
			extent.extentLoggerPass("Player",
					"'Upgrade to Premium' CTA with appropriate text is displayed on player for RSVOD users");
			logger.info("'Upgrade to Premium' CTA with appropriate text is displayed on player for RSVOD users");
		} else {
			logger.error(
					"[AMA2-10951] 'Get Premium' CTA is getting displayed instead 'Upgrade to Premium' CTA on player for RSVOD users");
			extentLoggerFail("Player",
					"[AMA2-10951] 'Get Premium' CTA is getting displayed instead 'Upgrade to Premium' CTA on player for RSVOD users");
		}

	}
/**
 * @note AMA2 11203 defect validation
 * @param userType
 * @throws Exception
 */
	public void verifyPurchaseofPremiumPack(String userType) throws Exception {
		// AMA2-11203
		extent.HeaderChildNode(
				"AMA2-11203 :Account specific, User is allowed to purchase another premium pack even though a user has annual pack");
		logger.info(
				"AMA2-11203 :Account specific, User is allowed to purchase another premium pack even though a user has annual pack");
		waitTime(2000);
		click(AMDHomePage.objSubscribeTeaser, "Buy Plan Header");
		waitTime(3000);
		verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe screen");
		String text = findElement(AMDSubscibeScreen.objContinueOnSubscribePopup).getText();
		System.out.println(text);
		logger.info(text);
		if (text.contains("Upgrade")) {
			logger.error("[AMA2-11203] " + text
					+ " is displayed instead 'Explore Premium CTA' for the User which is allowed to purchase another premium pack even though a user has annual pack");
			extentLoggerFail("Subscribe", "[AMA2-11203] " + text
					+ " is displayed instead 'Explore Premium CTA' for the User which is allowed to purchase another premium pack even though a user has annual pack");
		} else {
			extent.extentLoggerPass("Subscribe", text + " is displayed on pack selection screen");
			logger.info(text + " is displayed on pack selection screen");
		}

	}
/**
 * @note AMA2 11205 defect validation
 * @param userType
 * @throws Exception
 */
	public void incorrectMessageForInvalidMobileNumber(String userType) throws Exception {
		// AMA2-11205
		extent.HeaderChildNode(
				"AMA2-11205: Incorrect error message is getting displayed on account info screen post entering invalid mobile number");
		logger.info(
				"AMA2-11205  :Incorrect error message is getting displayed on account info screen post entering invalid mobile number");
		waitTime(2000);
		if (userType.equalsIgnoreCase("Guest")) {
			click(AMDHomePage.objSubscribeTeaser, "Buy Plan Header");
			waitTime(3000);
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe screen");
			verifyElementPresentAndClick(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue CTA");
			verifyElementExist(AMDLoginScreen.objAccountInfoScreen, "Account Info screen");
			click(AMDLoginScreen.objEmailIdField, "EmailId/Mobile Number field");
			type(AMDLoginScreen.objEmailIdField, "98806534", "Email-Id/Phone");
			hideKeyboard();
			verifyElementExist(AMDSubscibeScreen.objPasswordErrorMessage, "Error text");
			String text = findElement(AMDSubscibeScreen.objPasswordErrorMessage).getText();
			System.out.println(text);
			logger.info(text);
			if (text.contains("Invalid")) {
				logger.error("[AMA2-11205] " + text
						+ " error text is displayed instead 'phone number should be of 10 digits' error message");
				extentLoggerFail("Subscribe", "[AMA2-11205] " + text
						+ " error text is displayed instead 'phone number should be of 10 digits' error message");
			} else {
				extent.extentLoggerPass("Subscribe",
						text + " error message is displayed on enetering mobile number lessthan 10 digits");
				logger.info(text + " error message is displayed on enetering mobile number lessthan 10 digits");
			}

		} else {
			logger.info("AMA2-11205 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-11205 : Not applicable for " + userType);
		}

	}
/**
 * @note AMA2 16721 deect validation
 * @param userType
 * @throws Exception
 */
	public void appCrash_OnTappingBuyPlanInOffline(String userType) throws Exception {
//AMA2-16721
		extent.HeaderChildNode(
				"AMA2-16721: App is getting crashed on tapping Buy plan header CTA post launching the app in offline mode");
		logger.info(
				"AMA2-16721  :App is getting crashed on tapping Buy plan header CTA post launching the app in offline mode");
		if (!userType.equalsIgnoreCase("SubscribedUser")) {
			waitTime(2000);
			setWifiConnectionToONOFF("Off");
			if (getOEMName.equalsIgnoreCase("Sony")) {
				wifi_TurnOFFnON();
			}
			waitTime(3000);
			relaunch(true);
			waitTime(3000);
			verifyElementExist(AMDHomePage.errortitle, "Retry CTA is displayed");
			verifyElementPresentAndClick(AMDHomePage.objSubscribeTeaser, "Buy Plan Header");
			boolean value = verifyElementDisplayed(AMDHomePage.errortitle);
			if (value == true) {
				extent.extentLoggerPass("Subscribe", "Internet error message with Retry CTA is displayed");
				logger.info("Internet error message woth Retry CTA is displayed");
			} else {
				logger.error("[AMA2-16721] Internet error message with Retry CTA is NOT displayed");
				extentLoggerFail("Subscribe", "[AMA2-16721] Internet error message with Retry CTA is NOT displayed");
			}
			setWifiConnectionToONOFF("ON");

		} else {
			logger.info("AMA2-16721 : Not applicable for " + userType);
			extent.extentLogger("Subscribe", "AMA2-16721 : Not applicable for " + userType);
		}

	}
/**
 * @note AMA2 10892 defect validation.
 * @param userType
 * @throws Exception
 */
	public void verifyPrepaidCode(String userType) throws Exception {
//AMA2-10892
		extent.HeaderChildNode(
				"AMA2-10892: Congratulation pop up is displayed when user apply a valid promo code in Have a prepaid code option available on more menu screen");
		logger.info(
				"AMA2-10892  :Congratulation pop up is displayed when user apply a valid promo code in Have a prepaid code option available on more menu screen");
		if (!userType.equalsIgnoreCase("Guest")) {
			click(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementExist(AMDMoreMenu.objHaveaPrepaidCode, "Have a prepaid code option");
			click(AMDMoreMenu.objHaveaPrepaidCode, "Have a prepaid code option");
			verifyElementExist(AMDMoreMenu.objPrepaidCodePopUp, "Prepaid code popup");
			click(AMDMoreMenu.objPrepaidCodeField, "Prepaid code edit field");
			type(AMDMoreMenu.objPrepaidCodeField, "SRM40", "Prepaid code");
			hideKeyboard();
			click(AMDMoreMenu.objApplyBtn, "Apply button");
			verifyElementExist(AMDMoreMenu.objAppliedcodeDesc, "Error message");
			String text = findElement(AMDMoreMenu.objAppliedcodeDesc).getText();
			System.out.println(text);
			logger.info(text);
			if (text.contains("Invalid")) {
				extent.extentLoggerPass("Have a code",
						"Invalid prepaid code pop up is displayed when user enter promo code in prepaid code pop up");
				logger.info(
						"Invalid prepaid code pop up is displayed when user enter promo code in prepaid code pop up");
			} else {
				logger.error(
						"[AMA2-10892] Invalid prepaid code pop up is NOT displayed when user enter promo code in prepaid code pop up");
				extentLoggerFail("Have a code",
						"[AMA2-10892] Invalid prepaid code pop up is NOT displayed when user enter promo code in prepaid code pop up");
			}

		} else {
			logger.info("AMA2-10892 : Not applicable for " + userType);
			extent.extentLogger("Have a code", "AMA2-10892 : Not applicable for " + userType);
		}
	}
/**
 * @note AMA2 12309 defect validation.
 * @param userType
 * @throws Exception
 */
	public void verifyPlaybackOfPremiumContent(String userType) throws Exception {
//AMA2-12309
		extent.HeaderChildNode(
				"AMA2-12309: 'Oops!! something went wrong' error message is displayed on player post playing any premium contents for all user types");
		logger.info(
				"AMA2-12309  :'Oops!! something went wrong' error message is displayed on player post playing any premium contents for all user types");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
		verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
		type(AMDSearchScreen.objSearchBoxBar, "Hebbuli", "Search bar");
		hideKeyboard();
		click(AMDDownloadPage.objsearchresultFirst, "Searched content");
		waitTime(3000);
		click(AMDPlayerScreen.objPlayerScreen, "Player");
		if ((verifyElementDisplayed(AMDDownloadPage.objPauseIconOnPlayer))) {
			logger.info("Playback is initiated for Premium content");
			extent.extentLoggerPass("Search", "Playback is initiated for Premium content");
		} else {
			logger.error("[AMA2-12309] Playback is NOT initiated for Premium content");
			extent.extentLoggerFail("Search", "[AMA2-12309] Playback is NOT initiated for Premium content");
		}
	}
/**
 * @note AMA2 12333 defect validation
 * @param userType
 * @throws Exception
 */
	public void verifySkipCTAOnPlayer(String userType) throws Exception {
//AMA2-12333
		extent.HeaderChildNode(
				"AMA2-12333: Skip CTA displayed on player is non-functional for Guest user before the consumption screen rails load");
		logger.info(
				"AMA2-12333  :Skip CTA displayed on player is non-functional for Guest user before the consumption screen rails load");
		if (!userType.equalsIgnoreCase("Guest")) {
			verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
			verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, "Pushpaka Vimana", "Search bar");
			hideKeyboard();
			click(AMDSearchScreen.objMoviesTab, "Movies");
			click(AMDDownloadPage.objsearchresultFirst, "Searched content");
			verifyElementExist(AMDConsumptionScreen.objSkipctaOnPlayer, "Skip CTA on player");
			click(AMDConsumptionScreen.objSkipctaOnPlayer, "Skip CTA on player");
			if ((verifyElementDisplayed(AMDDownloadPage.objPauseIconOnPlayer))) {
				logger.info("Skip CTA is functional and next content playback is initiated");
				extent.extentLoggerPass("Player", "Skip CTA is functional and next content playback is initiated");
			} else {
				logger.error("[AMA2-12333] Skip CTA is non-functional and next content playback is NOT initiated");
				extent.extentLoggerFail("Player",
						"[AMA2-12333] Skip CTA is non-functional and next content playback is NOT initiated");
			}

		} else {
			logger.info("AMA2-12333 : Not applicable for " + userType);
			extent.extentLogger("Player", "AMA2-12333 : Not applicable for " + userType);
		}
	}
/**
 * @note this method is used to validate the email id field.
 * @param userType
 * @throws Exception
 */
	public void validationOfEmailIDField(String userType) throws Exception {
		if (userType.equals("Guest")) {
			relaunch(false);
			extent.HeaderChildNode("Email ID field Validation");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			type(AMDRegistrationScreen.objEmailIDTextField, generateRandomString(5) + "@gmail.com", "Email field");
			waitTime(3000);
			if (verifyIsElementDisplayed(AMDRegistrationScreen.objProceedBtn, "Proceed button")) {
				logger.info("User is able to enter Email id/Mobile no. on the Login/Registration screen");
				extent.extentLoggerPass("Email ID",
						"User is able to enter Email id/Mobile no. on the Login/Registration screen");
			} else {
				logger.error("User is not able to enter Email id/Mobile no. on the Login/Registration screen");
				extent.extentLoggerFail("Email ID",
						"User is not able to enter Email id/Mobile no. on the Login/Registration screen");
			}
		} else {
			extent.HeaderChildNode("Email ID field Validation");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note This method is used to validate whats app check box in register screen
 * @param userType
 * @throws Exception
 */
	public void whatsAppTickBox_EmailIDOnEmailIDField(String userType) throws Exception {
		if (userType.equals("Guest")) {
			relaunch(false);
			extent.HeaderChildNode(
					"Validation of WhatsApp opt-in tickbox, if user input Email id on the email/Mobile no. field");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			type(AMDRegistrationScreen.objEmailIDTextField, generateRandomString(5) + "@gmail.com", "Email field");
			waitTime(3000);
			click(AMDRegistrationScreen.objProceedBtn, "Proceed button");
			waitTime(5000);
			if (!(verifyIsElementDisplayed(AMDRegistrationScreen.objWhatsappOptIn))) {
				logger.info(
						"WhatsApp opt-in tickbox is not visible, if user input Email id on the email/Mobile no. field");
				extent.extentLoggerPass("Whatsapp opt-in tickbox",
						"WhatsApp opt-in tickbox is not visible, if user input Email id on the email/Mobile no. field");
			} else {
				logger.error(
						"WhatsApp opt-in tickbox is visible, if user input Email id on the email/Mobile no. field");
				extent.extentLoggerFail("Whatsapp opt-in tickbox",
						"WhatsApp opt-in tickbox is visible, if user input Email id on the email/Mobile no. field");
			}
		} else {
			extent.HeaderChildNode(
					"Validation of WhatsApp opt-in tickbox, if user input Email id on the email/Mobile no. field");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note this method is used for Validation of WhatsApp opt-in tickbox, if user input any special character on the email field
 * @param userType
 * @throws Exception
 */
	public void whatsAppTickbox_SpecialCharacterOnEmailID(String userType) throws Exception {
		if (userType.equals("Guest")) {
			relaunch(false);
			extent.HeaderChildNode(
					"Validation of WhatsApp opt-in tickbox, if user input any special character on the email field");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			type(AMDRegistrationScreen.objEmailIDTextField, generateRandomString(5) + "@gmail.com", "Email field");
			waitTime(3000);
			click(AMDRegistrationScreen.objProceedBtn, "Proceed button");
			waitTime(5000);
			String text = getDriver().findElement(AMDRegistrationScreen.objEmailIDTextField).getText();
			Pattern p = Pattern.compile("[^a-z0-9 ]", Pattern.CASE_INSENSITIVE);
			Matcher passWord = p.matcher(text);
			boolean b = passWord.find();
			if (b) {
				logger.info(
						"No error message is displayed and Whatsapp opt-in tickbox is not visible, if user input any special character on the email field");
				extent.extentLoggerPass("Email",
						"No error message is displayed and Whatsapp opt-in tickbox is not visible, if user input any special character on the email field");

			} else {
				logger.error(
						"Error message is displayed and Whatsapp opt-in tickbox is visible, if user input any special character on the email field");
				extent.extentLoggerFail("Email",
						"Error message is displayed and Whatsapp opt-in tickbox is visible, if user input any special character on the email field");
			}
		} else {
			extent.HeaderChildNode(
					"Validation of WhatsApp opt-in tickbox, if user input any special character on the email field");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note this method is used for Validation of WhatsApp opt-in tickbox, if user input Mobile no. on the email/Mobile no. field
 * @param userType
 * @throws Exception
 */
	public void whatsAppTickBox_MobileNoInEmailIDField(String userType) throws Exception {
		if (userType.equals("Guest")) {
			relaunch(false);
			extent.HeaderChildNode(
					"Validation of WhatsApp opt-in tickbox, if user input Mobile no. on the email/Mobile no. field");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "EmailField");
			type(AMDLoginScreen.objEmailIdField, UnRegisteredMobile, "Mobile");
			hideKeyboard();
			click(AMDLoginScreen.objProceedBtn, "Proceed icon");
			waitTime(5000);
			if (verifyIsElementDisplayed(AMDRegistrationScreen.objWhatsappOptIn)) {
				logger.info(
						"WhatsApp opt-in tickbox is visible, if user input Mobile no. on the email/Mobile no. field");
				extent.extentLoggerPass("Whatsapp opt-in tickbox",
						"WhatsApp opt-in tickbox is visible, if user input Mobile no. on the email/Mobile no. field");
			} else {
				logger.error(
						"WhatsApp opt-in tickbox is not visible, if user input Mobile no. on the email/Mobile no. field");
				extent.extentLoggerFail("Whatsapp opt-in tickbox",
						"WhatsApp opt-in tickbox is not visible, if user input Mobile no. on the email/Mobile no. field");
			}
		} else {
			extent.HeaderChildNode(
					"Validation of WhatsApp opt-in tickbox, if user input Mobile no. on the email/Mobile no. field");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note This method is used for Validation of WhatsApp text on Whatsapp opt-in tickbox
 * @param userType
 * @throws Exception
 */
	public void whatsappTextOnWhatsappOptIn(String userType) throws Exception {
		if (userType.equals("Guest")) {
			relaunch(false);
			extent.HeaderChildNode("Validation of WhatsApp text on Whatsapp opt-in tickbox");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "EmailField");
			type(AMDLoginScreen.objEmailIdField, UnRegisteredMobile, "Mobile");
			hideKeyboard();
			click(AMDLoginScreen.objProceedBtn, "Proceed icon");
			waitTime(5000);
			String whatsappText = getText(AMDRegistrationScreen.objWhatsappOptIn);
			if (whatsappText.equalsIgnoreCase("I want to receive updates and notifications over WhatsApp")) {
				logger.info("Text is displayed in Whatsapp Opt-in");
				extent.extentLoggerPass("text", "Text is displayed in Whatsapp Opt-in");
			} else {
				logger.error("Text is not displayed in Whatsapp Opt-in");
				extent.extentLoggerFail("text", "Text is not displayed in Whatsapp Opt-in");
			}
		} else {
			extent.HeaderChildNode("Validation of WhatsApp text on Whatsapp opt-in tickbox");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note this method is used for Validation of Whatsapp opt-in checkbox by default
 * @param userType
 * @throws Exception
 */
	public void whatsAppOptinCheckBoxByDefault(String userType) throws Exception {
		if (userType.equals("Guest")) {
			relaunch(false);
			extent.HeaderChildNode("Validation of Whatsapp opt-in checkbox by default");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "EmailField");
			type(AMDLoginScreen.objEmailIdField, UnRegisteredMobile, "Mobile");
			hideKeyboard();
			click(AMDLoginScreen.objProceedBtn, "Proceed icon");
			waitTime(5000);
			String tickBox1 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
			if (tickBox1.equalsIgnoreCase("false")) {
				logger.info("WhatsApp opt-in tick box appears unchehcked by default");
				extent.extentLoggerPass("TickBox", "WhatsApp opt-in tick box appears unchehcked by default");
			} else {
				logger.error("WhatsApp opt-in tick box appears checked by default");
				extent.extentLoggerFail("TickBox", "WhatsApp opt-in tick box appears checked by default");
			}
		} else {
			extent.HeaderChildNode("Validation of Whatsapp opt-in checkbox by default");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}

	}
/**
 * @note this method is used for Validation of Whatsapp opt-in checkbox functionality
 * @param userType
 * @throws Exception
 */
	public void whatsAppOptInCheckBoxFunctionality(String userType) throws Exception {
		if (userType.equals("Guest")) {
			relaunch(false);
			extent.HeaderChildNode("Validation of Whatsapp opt-in checkbox functionality");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "EmailField");
			type(AMDLoginScreen.objEmailIdField, UnRegisteredMobile, "Mobile");
			hideKeyboard();
			click(AMDLoginScreen.objProceedBtn, "Proceed icon");
			waitTime(5000);
			String tickBox1 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
			click(AMDRegistrationScreen.objWhatsappOptIn, "Whatsapp OptIn Tick Box");
			waitTime(3000);

			String tickBox2 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
			if (!(tickBox1.equalsIgnoreCase(tickBox2))) {
				logger.info("user is able select or deselect the WhatsApp opt-in tickbox");
				extent.extentLoggerPass("tickbox", "user is able select or deselect the WhatsApp opt-in tickbox");
			} else {
				logger.error("user is not able select or deselect the WhatsApp opt-in tickbox");
				extent.extentLoggerFail("tickbox", "user is not able select or deselect the WhatsApp opt-in tickbox");
			}
		} else {
			extent.HeaderChildNode("Validation of Whatsapp opt-in checkbox functionality");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}

	}
/**
 * @note this method is used for Validation of Register CTA Functionality on selecting whatsapp opt in
 * @param userType
 * @throws Exception
 */
	public void registerCTAFunctionalityOnSelectingWhatsappOptIn(String userType) throws Exception {
		if (userType.equals("Guest")) {
			relaunch(false);
			extent.HeaderChildNode("Validation of Register CTA Functionality on selecting whatsapp opt in");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "EmailField");
			type(AMDLoginScreen.objEmailIdField, UnRegisteredMobile, "Mobile");
			hideKeyboard();
			click(AMDLoginScreen.objProceedBtn, "Proceed icon");
			waitTime(3000);
			type(AMDRegistrationScreen.objFirstNameTxtField, FirstName, "First name field");
			hideKeyboard();
			click(AMDRegistrationScreen.objLastNameTxtField, "Last Name field");
			type(AMDRegistrationScreen.objLastNameTxtField, LastName, "Last Name");
			hideKeyboard();

			String pDOB = "01/01/1990", pNewPassword = "123456";
			click(AMDRegistrationScreen.objDOBTxtField, "DOB field");
			type(AMDRegistrationScreen.objDOBTxtField, pDOB, "DOB");
			hideKeyboard();
			verifyElementPresentAndClick(AMDRegistrationScreen.objGederTxtField, "Gender field");
			verifyElementPresentAndClick(AMDRegistrationScreen.objMale, "Gender male");
			click(AMDRegistrationScreen.objPasswordTxtField, "Passowrd");
			type(AMDRegistrationScreen.objPasswordTxtField, pNewPassword, "Password field");
			hideKeyboard();
			Swipe("UP", 1);
			waitTime(5000);
			click(AMDRegistrationScreen.objWhatsappOptIn, "Whatsapp OptIn Tick Box");
			String btn = getAttributValue("clickable", AMDRegistrationScreen.objRegisterBtn);
			if (btn.equalsIgnoreCase("true")) {
				logger.info(
						"Register CTA is highlited for mobile No. user who Selects on WhatsApp opt-in tickbox, post entering all fields in registration screen ");
				extent.extentLoggerPass("Register button",
						"Register CTA is highlited for mobile No. user who Selects on WhatsApp opt-in tickbox, post entering all fields in registration screen ");
			} else {
				logger.error(
						"Register CTA is not highlited for mobile No. user who Selects on WhatsApp opt-in tickbox, post entering all fields in registration screen ");
				extent.extentLoggerFail("Register button",
						"Register CTA is not highlited for mobile No. user who Selects on WhatsApp opt-in tickbox, post entering all fields in registration screen ");
			}
		} else {
			extent.HeaderChildNode("Validation of Register CTA Functionality on selecting whatsapp opt in");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note this method is used to 
 * @param userType
 * @throws Exception
 */
	public void otpScreen_OnselectingWhatsappOptIn(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			relaunch(false);
			extent.HeaderChildNode(
					"OTP screen validation on tapping Register CTA, post selecting Whatsapp opt-in tick box");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "EmailField");
			type(AMDLoginScreen.objEmailIdField, UnRegisteredMobile, "Mobile");
			hideKeyboard();
			click(AMDLoginScreen.objProceedBtn, "Proceed icon");
			waitTime(3000);
			type(AMDRegistrationScreen.objFirstNameTxtField, FirstName, "First name field");
			hideKeyboard();
			click(AMDRegistrationScreen.objLastNameTxtField, "Last Name field");
			type(AMDRegistrationScreen.objLastNameTxtField, LastName, "Last Name");
			hideKeyboard();

			String pDOB = "01/01/1990", pNewPassword = "123456";
			click(AMDRegistrationScreen.objDOBTxtField, "DOB field");
			type(AMDRegistrationScreen.objDOBTxtField, pDOB, "DOB");
			hideKeyboard();
			verifyElementPresentAndClick(AMDRegistrationScreen.objGederTxtField, "Gender field");
			verifyElementPresentAndClick(AMDRegistrationScreen.objMale, "Gender male");
			click(AMDRegistrationScreen.objPasswordTxtField, "Passowrd");
			type(AMDRegistrationScreen.objPasswordTxtField, pNewPassword, "Password field");
			hideKeyboard();
			Swipe("UP", 1);
			waitTime(5000);
			click(AMDRegistrationScreen.objWhatsappOptIn, "Whatsapp OptIn Tick Box");
			click(AMDRegistrationScreen.objRegisterBtn, "Register button");
			verifyElementExist(AMDLoginScreen.objOtpScreenTitle, "OTP screen");
		} else {
			extent.HeaderChildNode(
					"OTP screen validation on tapping Register CTA, post selecting Whatsapp opt-in tick box");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note this method is used for OTP screen validation on tapping Register CTA, post deselecting Whatsapp opt-in tick box
 * @param userType
 * @throws Exception
 */
	public void otpScreen_OnDeselectingWhatsappOptIn(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			relaunch(false);
			extent.HeaderChildNode(
					"OTP screen validation on tapping Register CTA, post deselecting Whatsapp opt-in tick box");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "EmailField");
			type(AMDLoginScreen.objEmailIdField, UnRegisteredMobile, "Mobile");
			hideKeyboard();
			click(AMDLoginScreen.objProceedBtn, "Proceed icon");
			waitTime(5000);
			type(AMDRegistrationScreen.objFirstNameTxtField, FirstName, "First name field");
			hideKeyboard();
			click(AMDRegistrationScreen.objLastNameTxtField, "Last Name field");
			type(AMDRegistrationScreen.objLastNameTxtField, LastName, "Last Name");
			hideKeyboard();

			String pDOB = "01/01/1990", pNewPassword = "123456";
			click(AMDRegistrationScreen.objDOBTxtField, "DOB field");
			type(AMDRegistrationScreen.objDOBTxtField, pDOB, "DOB");
			hideKeyboard();
			verifyElementPresentAndClick(AMDRegistrationScreen.objGederTxtField, "Gender field");
			verifyElementPresentAndClick(AMDRegistrationScreen.objMale, "Gender male");
			click(AMDRegistrationScreen.objPasswordTxtField, "Passowrd");
			type(AMDRegistrationScreen.objPasswordTxtField, pNewPassword, "Password field");
			hideKeyboard();
			Swipe("UP", 1);
			click(AMDRegistrationScreen.objRegisterBtn, "Register button");
			verifyElementExist(AMDLoginScreen.objOtpScreenTitle, "OTP screen");
		} else {
			extent.HeaderChildNode(
					"OTP screen validation on tapping Register CTA, post deselecting Whatsapp opt-in tick box");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note This method is used for validating WhatsApp opt-in tickbox in Edit profile screen
 * @param userType
 * @throws Exception
 */
	public void whatsAppOptInTickBoxInEditProfileScreen(String userType) throws Exception {
		if (!(userType.equalsIgnoreCase("Guest"))) {
			relaunch(true);
			extent.HeaderChildNode("WhatsApp opt-in tickbox in Edit profile screen");
			if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				loginWithEmailID("igszeefive3@gmail.com", "123456");
			} else {
				loginWithEmailID("zeein7@mailnesia.com", "123456");
			}
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");
			verifyElementPresentAndClick(AMDMyProfileScreen.objEditProfileButton, "Edit CTA");
			verifyElementExist(AMDRegistrationScreen.objWhatsappOptIn, "Whatsapp OptIn Tick Box");
		} else {
			extent.HeaderChildNode("WhatsApp opt-in tickbox in Edit profile screen");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}

	}
/**
 * @note this method is used for validating WhatsApp text in Whatsapp opt-in in Edit profile screen
 * @param userType
 * @throws Exception
 */
	public void whatsAppTextInwhatsAppOptIn_EditProfileScreen(String userType) throws Exception {
		if (!(userType.equalsIgnoreCase("Guest"))) {
			relaunch(false);
			extent.HeaderChildNode("WhatsApp text in Whatsapp opt-in in Edit profile screen");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");
			verifyElementPresentAndClick(AMDMyProfileScreen.objEditProfileButton, "Edit CTA");
			waitTime(3000);
			String whatsappText = getText(AMDRegistrationScreen.objWhatsappOptIn);
			if (whatsappText.equalsIgnoreCase("I want to receive updates and notifications over WhatsApp")) {
				logger.info("Text is displayed in Whatsapp Opt-in");
				extent.extentLoggerPass("text", "Text is displayed in Whatsapp Opt-in");
			} else {
				logger.error("Text is not displayed in Whatsapp Opt-in");
				extent.extentLoggerFail("text", "Text is not displayed in Whatsapp Opt-in");
			}
		} else {
			extent.HeaderChildNode("WhatsApp text in Whatsapp opt-in in Edit profile screen");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note this method is used for Field validation in Edit profile screen
 * @param userType
 * @throws Exception
 */
	public void fieldValidation_EditProfileSreen(String userType) throws Exception {
		if (!(userType.equalsIgnoreCase("Guest"))) {
			relaunch(false);
			extent.HeaderChildNode("Field validation in Edit profile screen");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");
			verifyElementPresentAndClick(AMDMyProfileScreen.objEditProfileButton, "Edit CTA");
			waitTime(3000);
			type(AMDEditProfileScreen.objMobileNumberField, "0123456789", "Mobile number field");
			hideKeyboard();
			Swipe("UP", 1);
			String saveChanges = getAttributValue("enabled", AMDEditProfileScreen.objSaveChanges);
			if (saveChanges.equalsIgnoreCase("true")) {
				logger.info("User is able to enter details in required fields");
				extentLoggerPass("field", "User is able to enter details in required fields");
			} else {
				logger.error("User is not able to enter details in required fields");
				extentLoggerFail("field", "User is not able to enter details in required fields");
			}
		} else {
			extent.HeaderChildNode("Field validation in Edit profile screen");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}

	}
/**
 * @note this method is used for validation of Whatsapp Opt-in functionality post entering mobile number in Edit profile screen
 * @param userType
 * @throws Exception
 */
	public void whatsappOptInFunctionalityPostEnteringMobileNoInEditProfileScreen(String userType) throws Exception {
		if (!(userType.equalsIgnoreCase("Guest"))) {
			relaunch(false);
			extent.HeaderChildNode("Whatsapp Opt-in functionality post entering mobile number in Edit profile screen");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");
			verifyElementPresentAndClick(AMDMyProfileScreen.objEditProfileButton, "Edit CTA");
			waitTime(3000);
			type(AMDEditProfileScreen.objMobileNumberField, "0123456789", "Mobile number field");
			hideKeyboard();
			Swipe("UP", 1);
			String tickBox1 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
			click(AMDRegistrationScreen.objWhatsappOptIn, "Whatsapp OptIn Tick Box");
			waitTime(3000);

			String tickBox2 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
			if (!(tickBox1.equalsIgnoreCase(tickBox2))) {
				logger.info(
						"user is able select or deselect the WhatsApp opt-in tickbox, post entering the mobile no. in edit profile page");
				extent.extentLoggerPass("tickbox",
						"user is able select or deselect the WhatsApp opt-in tickbox, post entering the mobile no. in edit profile page");
			} else {
				logger.error(
						"user is not able select or deselect the WhatsApp opt-in tickbox, post entering the mobile no. in edit profile page");
				extent.extentLoggerFail("tickbox",
						"user is not able select or deselect the WhatsApp opt-in tickbox, post entering the mobile no. in edit profile page");
			}
		} else {
			extent.HeaderChildNode("Whatsapp Opt-in functionality post entering mobile number in Edit profile screen");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note this method is used for validation of Whatsapp opt-in Enable functionality in Edit profile screen
 * @param userType
 * @throws Exception
 */
	public void whatsappOptInEnable_EditProfileScreen(String userType) throws Exception {
		if (!(userType.equalsIgnoreCase("Guest"))) {
			relaunch(false);
			extent.HeaderChildNode("Whatsapp opt-in Enable functionality in Edit profile screen");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");
			verifyElementPresentAndClick(AMDMyProfileScreen.objEditProfileButton, "Edit CTA");
			waitTime(3000);
			type(AMDEditProfileScreen.objMobileNumberField, "0123456789", "Mobile number field");
			hideKeyboard();
			Swipe("UP", 1);
			String tickBox1 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
			click(AMDRegistrationScreen.objWhatsappOptIn, "Whatsapp OptIn Tick Box");
			waitTime(3000);
			String tickBox2 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
			if (!(tickBox1.equalsIgnoreCase(tickBox2))) {
				logger.info("WhatsApp opt-in tickbox  is enabled post entering mobile no. in edit profile page");
				extent.extentLoggerPass("tickbox",
						"WhatsApp opt-in tickbox  is enabled post entering mobile no. in edit profile page");
			} else {
				logger.error("WhatsApp opt-in tickbox  is not enabled post entering mobile no. in edit profile page");
				extent.extentLoggerFail("tickbox",
						"WhatsApp opt-in tickbox  is not enabled post entering mobile no. in edit profile page");
			}
		} else {
			extent.HeaderChildNode("Whatsapp opt-in Enable functionality in Edit profile screen");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note this method is used for validation of Whatsapp opt-in Disable functionality in Edit profile screen
 * @param userType
 * @throws Exception
 */
	public void whatsappOptInDisable_EditProfileScreen(String userType) throws Exception {
		if (!(userType.equalsIgnoreCase("Guest"))) {
			relaunch(false);
			extent.HeaderChildNode("Whatsapp opt-in Disable functionality in Edit profile screen");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");
			verifyElementPresentAndClick(AMDMyProfileScreen.objEditProfileButton, "Edit CTA");
			waitTime(3000);
			String tickBox1 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
			click(AMDRegistrationScreen.objWhatsappOptIn, "Whatsapp OptIn Tick Box");
			waitTime(3000);
			String tickBox2 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
			if (tickBox1.equalsIgnoreCase(tickBox2)) {
				logger.info("WhatsApp opt-in tickbox is deactivated when user enter only Email id");
				extent.extentLoggerPass("tickbox",
						"WhatsApp opt-in tickbox is deactivated when user enter only Email id");
			} else {
				logger.error("WhatsApp opt-in tickbox is not deactivated when user enter only Email id");
				extent.extentLoggerFail("tickbox",
						"WhatsApp opt-in tickbox is not deactivated when user enter only Email id");
			}
		} else {
			extent.HeaderChildNode("Whatsapp opt-in Disable functionality in Edit profile screen");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note This method is used for validation of Whatsapp Opt-in functionality post entering only email Id in Edit profile screen
 * @param userType
 * @throws Exception
 */
	public void whatsappOptInFunctionalityPostEnteringOnlyEmailIdInEditProfileScreen(String userType) throws Exception {
		if (!(userType.equalsIgnoreCase("Guest"))) {
			relaunch(false);
			extent.HeaderChildNode("Whatsapp Opt-in functionality post entering only email Id in Edit profile screen");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");
			verifyElementPresentAndClick(AMDMyProfileScreen.objEditProfileButton, "Edit CTA");
			waitTime(3000);
			String tickBox1 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
			click(AMDRegistrationScreen.objWhatsappOptIn, "Whatsapp OptIn Tick Box");
			waitTime(3000);
			String tickBox2 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
			if (tickBox1.equalsIgnoreCase(tickBox2)) {
				logger.info(
						"user is not able select or deselect the WhatsApp opt-in tickbox, post entering only email id in edit profile page");
				extent.extentLoggerPass("tickbox",
						"user is not able select or deselect the WhatsApp opt-in tickbox, post entering only email id in edit profile page");
			} else {
				logger.error(
						"user is able select or deselect the WhatsApp opt-in tickbox, post entering only email id in edit profile page");
				extent.extentLoggerFail("tickbox",
						"user is able select or deselect the WhatsApp opt-in tickbox, post entering only email id in edit profile page");
			}
		} else {
			extent.HeaderChildNode("Whatsapp Opt-in functionality post entering only email Id in Edit profile screen");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note This method is used for validation of Whatsapp opt-in Enable functionality post entering both emailId and Mobile number in Edit profile screen
 * @param userType
 * @throws Exception
 */
	public void whatsappOptInFunctionalityPostEnteringBothEmailIdAndMobileNumberInEditProfileScreen(String userType)
			throws Exception {
		if (!(userType.equalsIgnoreCase("Guest"))) {
			relaunch(false);
			extent.HeaderChildNode(
					"Whatsapp opt-in Enable functionality post entering both emailId and Mobile number in Edit profile screen");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");
			verifyElementPresentAndClick(AMDMyProfileScreen.objEditProfileButton, "Edit CTA");
			waitTime(3000);
			type(AMDEditProfileScreen.objMobileNumberField, "0123456789", "Mobile number field");
			hideKeyboard();
			Swipe("UP", 1);
			String tickBox1 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
			click(AMDRegistrationScreen.objWhatsappOptIn, "Whatsapp OptIn Tick Box");
			waitTime(3000);
			String tickBox2 = getAttributValue("checked", AMDRegistrationScreen.objWhatsappOptIn);
			if (!(tickBox1.equalsIgnoreCase(tickBox2))) {
				logger.info(
						"WhatsApp opt-in tickbox  is enabled post entering both email id and mobile no. in edit profile page");
				extent.extentLoggerPass("tickbox",
						"WhatsApp opt-in tickbox  is enabled post entering both email id and mobile no. in edit profile page");
			} else {
				logger.error(
						"WhatsApp opt-in tickbox  is not enabled post entering both email id and mobile no. in edit profile page");
				extent.extentLoggerFail("tickbox",
						"WhatsApp opt-in tickbox  is not enabled post entering both email id and mobile no. in edit profile page");
			}
		} else {
			extent.HeaderChildNode(
					"Whatsapp opt-in Enable functionality post entering both emailId and Mobile number in Edit profile screen");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note This method is used to check performance of app till landing screen.
 * @throws Exception
 */
	public void appLaunchtoHomeScreen() throws Exception {
		extent.HeaderChildNode("App Launch Scenario");
		System.out.println("App Launch Scenario");

		// Threshold Values declaration
		int threshold_TimeTaken = 12;
		int threshold_NativeMemory = 38;
		int threshold_TotalMemory = 200;
		int threshold_CPU = 5;
		int threshold_GPUMem = 14;
		int threshold_GPURendered = 60;
		int threshold_Network = 300;

		waitForElementDisplayed(AMDHomePage.objZee5Logo, 60);
		if (verifyElementPresent(AMDHomePage.objFirstRailDisplay, "First Rail")) {
			// AppPerformanceTestInfo("com.graymatrix.did");

			ArrayList<String> getMmoryInfo = Memory_UsagePerformanceV2();
			int nativeMemory = Integer.parseInt(getMmoryInfo.get(0).trim());
			int totalMemory = Integer.parseInt(getMmoryInfo.get(1).trim());

			boolean timeFlag = true, memFlag = true, totalmemFlag = true, cpuFlag = true, gpuMemFlag = true,
					gpuRenFlag = true, trafficFlag = true;

			// #### App Performance CPU Usage Info
			String getCPUInfo = cpu_UsagePerformanceV2();
			int nCpuUSage = Integer.parseInt(getCPUInfo);

			// #### App Performance GPU Usage Info
			ArrayList<String> getGPUInfo = GPU_UsagePerformanceV2();
			float nGPUMemory = Float.parseFloat(getGPUInfo.get(0).replace(" MB", "").trim());
			int nGPURendered = Integer.parseInt(getGPUInfo.get(1).replace("Total frames rendered: ", "").trim());

			// #### App Performance Network Traffic Usage Info
			int nNetTraffic = getApp_NetworkTrafficUsageV2("com.graymatrix.did");

			if (DriverInstance.timeElapsed.getSeconds() <= threshold_TimeTaken) {
				logger.info("Time taken to launch the App (Sec): " + DriverInstance.timeElapsed.getSeconds());
				extent.extentLoggerPass("Timer",
						"<b>Time taken to launch the App (Sec)</b>: " + DriverInstance.timeElapsed.getSeconds());
			} else {
				timeFlag = false;
				logger.info("Time taken to launch the App (Sec): " + DriverInstance.timeElapsed.getSeconds());
				extent.extentLoggerFail("Timer",
						"<b>Time taken to launch the App (Sec)</b>: " + DriverInstance.timeElapsed.getSeconds());
			}
			softAssertion.assertEquals(timeFlag, true);

			if (nativeMemory < threshold_NativeMemory) {
				logger.info("App Native Heap Memory: " + nativeMemory + " MB");
				extent.extentLoggerPass("Memory Info", "<b>App Native Heap Memory: </b>" + nativeMemory + " MB");
			} else {
				memFlag = false;
				logger.error("App Native Heap Memory: " + nativeMemory + " MB");
				extent.extentLoggerFail("Memory Info", "<b>App Native Heap Memory: </b>" + nativeMemory + " MB");
			}
			softAssertion.assertEquals(memFlag, true);

			if (totalMemory < threshold_TotalMemory) {
				logger.info("App Peak Memory Usage: " + totalMemory + " MB");
				extent.extentLoggerPass("Memory Info", "<b>App Peak Memory Usage: </b>" + totalMemory + " MB");
			} else {
				totalmemFlag = false;
				logger.error("App Peak Memory Usage: " + totalMemory + " MB");
				extent.extentLoggerFail("Memory Info", "<b>AApp Peak Memory Usage: </b>" + totalMemory + " MB");
			}
			softAssertion.assertEquals(totalmemFlag, true);

			if (nCpuUSage < threshold_CPU) {
				logger.info("CPU Usage: " + nCpuUSage + "%");
				extent.extentLoggerPass("CPU Info", "<b>CPU Usage: </b>" + nCpuUSage + "%");
			} else {
				cpuFlag = false;
				logger.error("CPU Usage: " + nCpuUSage + "%");
				extent.extentLoggerFail("CPU Info", "<b>CPU Usage: </b>" + nCpuUSage + "%");
			}
			softAssertion.assertEquals(cpuFlag, true);

			if (nGPUMemory < threshold_GPUMem) {
				logger.info("\nGPU Memory Usage: " + nGPUMemory + " MB");
				extent.extentLoggerPass("GPU Info", "<b>GPU Memory Usage: </b>" + nGPUMemory + " MB");
			} else {
				gpuMemFlag = false;
				logger.error("\nGPU Memory Usage exceeded: " + nGPUMemory + " MB");
				extent.extentLoggerFail("GPU Info", "<b>GPU Memory Usage exceeded: </b>" + nGPUMemory + " MB");
			}
			softAssertion.assertEquals(gpuMemFlag, true);

			if (nGPURendered < threshold_GPURendered) {
				logger.info("\nGPU FPS: " + nGPURendered);
				extent.extentLoggerPass("GPU Info", "<b>GPU FPS: </b>" + nGPURendered);
			} else {
				gpuRenFlag = false;
				logger.error("\nGPU FPS: " + nGPURendered);
				extent.extentLoggerFail("GPU Info", "<b>nGPU FPS: </b>" + nGPURendered);
			}
			softAssertion.assertEquals(gpuRenFlag, true);

			if (nNetTraffic < threshold_Network) {
				logger.info("\nApp traffic usage: " + (int) nNetTraffic + " MB");
				extent.extentLoggerPass("Traffic Usage", "<b>App traffic usage: </b>" + (int) nNetTraffic + " MB");
			} else {
				trafficFlag = false;
				logger.error("\nApp traffic usage: " + (int) nNetTraffic + " MB");
				extent.extentLoggerFail("Traffic Usage", "<b>App traffic usage: </b>" + (int) nNetTraffic + " MB");
			}

			performaceDetails.add("App Launch" + "," + DriverInstance.timeElapsed.getSeconds() + "," + nativeMemory
					+ " MB," + totalMemory + " MB," + nCpuUSage + "%," + nGPUMemory + " MB," + nGPURendered + ","
					+ nNetTraffic + " MB");

			String timeTaken = Long.toString(DriverInstance.timeElapsed.getSeconds());
			String strNativeMemory = Integer.toString(nativeMemory);
			String strTotalMemory = Integer.toString(totalMemory);
			String strCPU = Integer.toString(nCpuUSage);
			String strGPU = Float.toString(nGPUMemory);
			String strGPURendered = Integer.toString(nGPURendered);
			String strTraffic = Integer.toString(nNetTraffic);

			performaceMatrics.put("Time Taken", timeTaken + " Sec");
			performaceMatrics.put("Native Heap Memory", strNativeMemory + " MB");
			performaceMatrics.put("Peak Memory", strTotalMemory + " MB");
			performaceMatrics.put("CPU Usage", strCPU + "%");
			performaceMatrics.put("GPU Usage", strGPU + " MB");
			performaceMatrics.put("GPU FPS", strGPURendered);
			performaceMatrics.put("Traffic Usage", strTraffic + " MB");

			System.out.println(
					"\n---------------------------------------------- App Launch Scenario ----------------------------------------------");
			System.out.println(performaceMatrics);
			System.out.println(
					"-------------------------------------------------------------------------------------------------------------------");
			clearAllPerformanceMatrics();

			softAssertion.assertEquals(trafficFlag, true);
			softAssertion.assertAll();

		} else {
			logger.error("\nHome page is not displayed");
			extent.extentLoggerFail("Traffic Usage", "<b>Home page is not displayed!</b>");
		}
	}
/**
 * @note this method is used for validating Save changes CTA functionality in EditProfile screen
 * @param userType
 * @throws Exception
 */
	public void saveChangesCTA_Highlight_InEditProfileScreen(String userType) throws Exception {
		if (!(userType.equalsIgnoreCase("Guest"))) {
			relaunch(false);
			extent.HeaderChildNode("Save changes CTA functionality in EditProfile screen");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");
			verifyElementPresentAndClick(AMDMyProfileScreen.objEditProfileButton, "Edit CTA");
			waitTime(3000);
			type(AMDEditProfileScreen.objMobileNumberField, "0123456789", "Mobile number field");
			hideKeyboard();
			Swipe("UP", 1);
			String cta = getAttributValue("enabled", AMDEditProfileScreen.objSaveChanges);
			if (cta.equalsIgnoreCase("true")) {
				logger.info(
						"Savechanges CTA is highlighted for mobile No. user who Select/deselect on WhatsApp opt-in tickbox");
				extent.extentLoggerPass("CTA",
						"Savechanges CTA is highlighted for mobile No. user who Select/deselect on WhatsApp opt-in tickbox");
			} else {
				logger.error(
						"Savechanges CTA is not highlighted for mobile No. user who Select/deselect on WhatsApp opt-in tickbox");
				extent.extentLoggerFail("CTA",
						"Savechanges CTA is not highlighted for mobile No. user who Select/deselect on WhatsApp opt-in tickbox");
			}
		} else {
			extent.HeaderChildNode("Save changes CTA functionality in EditProfile screen");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note This method is used for validating Save changes CTA functionality in EditProfile screen for previously registered user having mobile number
 * @param userType
 * @throws Exception
 */
	public void saveChangesFunctionality_PreviouslyRegisteredUser_havingMobileNumber(String userType) throws Exception {
		if (!(userType.equalsIgnoreCase("Guest"))) {
			relaunch(true);
			zeeApplicasterLogin(userType);
			extent.HeaderChildNode(
					"Save changes CTA functionality in EditProfile screen for previously registered user having mobile number");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");
			verifyElementPresentAndClick(AMDMyProfileScreen.objEditProfileButton, "Edit CTA");
			waitTime(3000);
			String firstName = getText(AMDRegistrationScreen.objFirstNameTxtField);
			clearField(AMDRegistrationScreen.objFirstNameTxtField, "First name field");
			hideKeyboard();
			waitTime(5000);
			click(AMDRegistrationScreen.objFirstNameTxtField, "First name field");
			type(AMDRegistrationScreen.objFirstNameTxtField, firstName + "e", "First name field");
			hideKeyboard();
			Swipe("UP", 1);
			click(AMDEditProfileScreen.objSaveChanges, "Save changes");
			waitTime(5000);
			if (verifyIsElementDisplayed(AMDMyProfileScreen.objEditProfileButton)) {
				logger.info("user navigated to My profile screen on tapping Save changes CTA");
				extentLoggerPass("Myprofile", "user navigated to My profile screen on tapping Save changes CTA");
			} else {
				logger.error("user is not navigated to My profile screen on tapping Save changes CTA");
				extentLoggerFail("Myprofile", "user is not navigated to My profile screen on tapping Save changes CTA");
			}
		} else {
			extent.HeaderChildNode(
					"Save changes CTA functionality in EditProfile screen for previously registered user having mobile number");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note this method is used for validating Save changes CTA functionality for previously registered user by entering mobile number in edit profile screen
 * @param userType
 * @throws Exception
 */
	public void saveChangesFunctionality_PreviouslyRegisteredUser_havingOnlyEmailID(String userType) throws Exception {
		if (!(userType.equalsIgnoreCase("Guest"))) {
			relaunch(true);
			extent.HeaderChildNode(
					"Save changes CTA functionality for previously registered user by entering mobile number in edit profile screen");
			if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				loginWithEmailID("igszeefive3@gmail.com", "123456");
			} else {
				loginWithEmailID("zeein7@mailnesia.com", "123456");
			}
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");
			verifyElementPresentAndClick(AMDMyProfileScreen.objEditProfileButton, "Edit CTA");
			waitTime(3000);
			type(AMDEditProfileScreen.objMobileNumberField, UnRegisteredMobile, "Mobile number field");
			hideKeyboard();
			Swipe("UP", 1);
			click(AMDEditProfileScreen.objSaveChanges, "Save changes");
			waitTime(5000);
			if (verifyIsElementDisplayed(AMDLoginScreen.objOtpScreenTitle)) {
				logger.info("user navigated to OTP screen on tapping Save changes CTA");
				extentLoggerPass("Myprofile", "user navigated to OTP screen on tapping Save changes CTA");
			} else {
				logger.error("user is not navigated to OTP screen on tapping Save changes CTA");
				extentLoggerFail("Myprofile", "user is not navigated to OTP screen on tapping Save changes CTA");
			}
		} else {
			extent.HeaderChildNode(
					"Save changes CTA functionality for previously registered user by entering mobile number in edit profile screen");
			logger.info("Not Applicable for this userType");
			extent.extentLogger("Not applicable", "Not Applicable for this userType");
		}
	}
/**
 * @note This method is used for navigating to  playstore
 * @throws Exception
 */
	public void installmarketBuild() throws Exception {
		extent.HeaderChildNode("Install market build");
		logger.info("Install market build");
		logger.info("Uninstalling zee5");
		extent.extentLogger("", "Uninstalling zee5");
		Runtime.getRuntime().exec("adb uninstall com.graymatrix.did");
		waitTime(3000);
		logger.info("Clearing play store app data");
		extent.extentLogger("", "Clearing play store app data");
		Runtime.getRuntime().exec("adb shell pm clear -n com.android.vending");
		waitTime(3000);
		logger.info("Launching Play store");
		extent.extentLogger("", "Launching Play store");
		Runtime.getRuntime().exec("adb shell am start -n com.android.vending/com.android.vending.AssetBrowserActivity");
		waitTime(3000);
		installZeeApp();
	}
/**
 * @note this method is used for installing app /opening app from playstore
 * @throws Exception
 */
	public void installZeeApp() throws Exception {
		logger.info("Install Zee5");
		extent.HeaderChildNode("Install Zee5");
		waitTime(4000);
		click(AMDAppUpgrade.objplaystoreSearch, "Edit field");
		type(AMDAppUpgrade.objplaystoreSearch, "Zee5 \n", "Edit field");
		hideKeyboard();
		verifyElementPresentAndClick(AMDAppUpgrade.objInstallButton, "Install button");
		waitForElementAndClickIfPresent(AMDAppUpgrade.objOpenButton, 100, "Open CTA");
	}
/**
 * @note This method is used for upgrading the user pack
 * @param LoginMethod
 * @throws Exception
 */
	public void loginForUpgradeModule(String LoginMethod) throws Exception {
		System.out.println("\nLogin to the App");

		switch (LoginMethod) {
		case "Guest":
			extent.HeaderChildNode("Logged in as <b>Guest</b> User");

			extent.extentLogger("Accessing the application as Guest user",
					"Accessing the application as <b>Guest</b> user");
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as NonSubscribed User");

			String Username = getParameterFromXML("UpgradeNonsubscribedUserName");
			String Password = getParameterFromXML("UpgradeNonsubscribedPassword");

			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");

			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User");

			String SubscribedUsername = getParameterFromXML("UpgradeSubscribedUserName");
			String SubscribedPassword = getParameterFromXML("UpgradeSubscribedPassword");

			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");

			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SubscribedUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;
		}
	}
/**
 * @note This method is used to get default settings value of app 
 * @param puserType
 * @throws Exception
 */
	@SuppressWarnings("unused")
	public void GetSettingsDetails(String puserType) throws Exception {
		extent.HeaderChildNode("Getting the user settings details for Market build");
		String Streamvalue = null;
		String Streamoverwifi = null;
		String autoPlay = null;
		String downloadQuality = null;
		String downloadoverwifi = null;
		String displaylang = null;

		if (puserType.equalsIgnoreCase("Guest")) {
			click(AMDHomePage.MoreMenuIcon, "More menu icon");
			verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings option");
			verifyElementExist(AMDSettingsScreen.objVideoQualityDefaultvalue, "Video Quality");
			Streamvalue = findElement(AMDSettingsScreen.objVideoQualityDefaultvalue).getText();

			verifyElementExist(AMDSettingsScreen.objStreamOverWifiValue, "Stream over wifi");
			String StreamOverwifi = findElement(AMDSettingsScreen.objStreamOverWifiValue).getText();
			Streamoverwifi = getAttributValue("checked", AMDSettingsScreen.objStreamOverWifiValue);

			verifyElementExist(AMDSettingsScreen.objAutoPlayToggleSwitch, "Auto Play");
			String AutoPlay = findElement(AMDSettingsScreen.objAutoPlayToggleSwitch).getText();
			autoPlay = getAttributValue("checked", AMDSettingsScreen.objAutoPlayToggleSwitch);

			verifyElementExist(AMDSettingsScreen.objDownloadQualityValue, "Download Quality");
			downloadQuality = findElement(AMDSettingsScreen.objDownloadQualityValue).getText();

			verifyElementExist(AMDSettingsScreen.objDownloadOverWifiToggle, "Download over wifi");
			String DownloadOverWifi = findElement(AMDSettingsScreen.objDownloadOverWifiToggle).getText();
			downloadoverwifi = getAttributValue("checked", AMDSettingsScreen.objDownloadOverWifiToggle);
			Swipe("UP", 1);
			verifyElementExist(AMDSettingsScreen.objDisplayLangValue, "Display Launguage");
			displaylang = findElement(AMDSettingsScreen.objDisplayLangValue).getText();
		} else {
			String Username = null;
			String Password = null;
			if (pUserType.equalsIgnoreCase("SubscribedUser")) {
				Username = getParameterFromXML("UpgradeSubscribedUserName");
				Password = getParameterFromXML("UpgradeSubscribedPassword");
			} else if (pUserType.equalsIgnoreCase("NonSubscribedUser")) {
				Username = getParameterFromXML("UpgradeNonsubscribedUserName");
				Password = getParameterFromXML("UpgradeNonsubscribedPassword");
			}
			Properties pro = new Properties();
			Streamvalue = ResponseInstance.getUserSettingsDetails(Username, Password).getProperty("streaming_quality");
			autoPlay = ResponseInstance.getUserSettingsDetails(Username, Password).getProperty("auto_play");
			downloadQuality = ResponseInstance.getUserSettingsDetails(Username, Password)
					.getProperty("download_quality");
			if (downloadQuality.equalsIgnoreCase("High")) {
				downloadQuality = "Better";
			}
			if (downloadQuality.equalsIgnoreCase("Medium")) {
				downloadQuality = "Good";
			}
			if (downloadQuality.equalsIgnoreCase("Low")) {
				downloadQuality = "Datasaver";
			}
			Streamoverwifi = ResponseInstance.getUserSettingsDetails(Username, Password)
					.getProperty("stream_over_wifi");
			downloadoverwifi = ResponseInstance.getUserSettingsDetails(Username, Password)
					.getProperty("download_over_wifi");
			displaylang = ResponseInstance.getUserSettingsDetails(Username, Password).getProperty("display_language");
			if (displaylang.equalsIgnoreCase("en")) {
				displaylang = "English";
			}

		}

		extentLogger("", "Stream quality: " + Streamvalue);
		extentLogger("", "Auto play: " + autoPlay);
		extentLogger("", "Download quality: " + downloadQuality);
		extentLogger("", "Stream over wifi: " + Streamoverwifi);
		extentLogger("", "Download over wifi: " + downloadoverwifi);
		extentLogger("", "Display language: " + displaylang);

		marketsettings.add(Streamvalue);
		marketsettings.add(autoPlay);
		marketsettings.add(downloadQuality);
		marketsettings.add(Streamoverwifi);
		marketsettings.add(downloadoverwifi);
		marketsettings.add(displaylang);
		// marketsettings.add(contentlang);
		System.out.println("Market build user settings details : " + marketsettings);
		logger.info("Market build user settings details : " + marketsettings);
		Back(2);
	}
/**
 * @note this method is used for uninstalling zee5 app
 * @throws Exception
 */
	public void uninstallZee5() throws Exception {
		logger.info("Uninstalling zee5");
		extent.HeaderChildNode("Uninstalling zee5");
		Runtime.getRuntime().exec("adb uninstall com.graymatrix.did");
		logger.info("Uninstalled the zee5 application");
		extent.extentLogger("", "Uninstalled the zee5 application");
		waitTime(2000);
	}
/**
 * @note this method is used to launch playstore app
 * @throws Exception
 */
	public void launchPlayStoreApp() throws Exception {
		logger.info("Launching Play store");
		extent.HeaderChildNode("Launching Play store");
		Runtime.getRuntime().exec("adb shell am start -n com.android.vending/com.android.vending.AssetBrowserActivity");
		logger.info("Play store app is launched");
		waitTime(4000);
	}
/**
 * @note this method is used for clearing playsote app data.
 * @throws Exception
 */
	public void clearPlayStoreAppData() throws Exception {
		logger.info("Clearing play store app data");
		extent.HeaderChildNode("Clearing play store app data");
		Runtime.getRuntime().exec("adb shell pm clear -n com.android.vending");
		logger.info("cleared playstore app data");
		extent.extentLogger("", "cleared playstore app data");
		waitTime(4000);
	}
/**
 * This method is used to add beta account in playstore
 * @throws Exception
 */
	public void InstallZee5() throws Exception {
		logger.info("Installing Zee5 Upgrade build");
		extent.HeaderChildNode("Installing Zee5 Upgrade build");

		launchPlayStoreApp();
		verifyElementPresentAndClick(AMDAppUpgrade.objgmailProfileicon, "Gmail profile icon");
		click(AMDAppUpgrade.objdownArrow, "Down arrow");
		if (verifyElementIsNotDisplayed(AMDAppUpgrade.objSecondAacountInPlaystore)) {
			click(AMDAppUpgrade.objAddAccount, "Add Account");
			waitTime(8000);
			click(AMDAppUpgrade.objeditEmailfield, "Edit email field");
			type(AMDAppUpgrade.objeditEmailfield, "mallikarjun.beta23@gmail.com", "Edit field");
			hideKeyboard();
			waitTime(2000);
			click(AMDAppUpgrade.objNextbtn, "Next button");
			waitTime(4000);
			verifyElementPresentAndClick(AMDAppUpgrade.objEditPasswordfield, "Edit password field");
			type(AMDAppUpgrade.objEditPasswordfield, "beta12345", "Edit field");
			hideKeyboard();
			click(AMDAppUpgrade.objNextbtn, "Next button");
			waitTime(4000);
			click(AMDAppUpgrade.objIagreebtn, "I agree button");
			waitTime(5000);
		}
		if (verifyElementDisplayed(AMDAppUpgrade.objSecondAacountInPlaystore)) {
			click(AMDAppUpgrade.objSecondAacountInPlaystore, "Account");
			waitTime(4000);
		}
		waitTime(5000);
		Runtime.getRuntime().exec("adb shell pm clear -n com.android.vending");
		waitTime(5000);
		System.out.println("cleared play store app data");
		waitTime(3000);
		Runtime.getRuntime().exec("adb shell am start -n com.android.vending/com.android.vending.AssetBrowserActivity");
		System.out.println("launched play store");
		waitTime(5000);
		verifyElementPresentAndClick(AMDAppUpgrade.objgmailProfileicon, "Gmail profile icon");
		click(AMDAppUpgrade.objdownArrow, "Down arrow");
		click(AMDAppUpgrade.objSecondAacountInPlaystore, "Account");
		waitTime(8000);
		click(AMDAppUpgrade.objplaystoreSearch, "Edit field");
		type(AMDAppUpgrade.objplaystoreSearch, "Zee5 \n", "Edit field");
		hideKeyboard();
		verifyElementPresentAndClick(AMDAppUpgrade.objUpdatebutton, "Update button");
		waitTime(30000);
		waitForElementDisplayed(AMDAppUpgrade.objOpenButton, 30);
		waitTime(25000);
		click(AMDAppUpgrade.objOpenButton, "Open button");
		waitTime(8000);
	}
/**
 * @note this method is used for handling device location pop during onboarding.
 * @param permission
 * @param userType
 * @throws Exception
 */
	public void accessDeviceLocationPopUp1(String permission, String userType) throws Exception {
		extent.HeaderChildNode("Access Device Location PopUp");
		extent.extentLogger("Time ", "Time taken to launch the App (Sec)" + DriverInstance.timeElapsed.getSeconds());
		extent.extentLogger("User Type", "UserType : " + userType);
		logger.info("UserType : " + userType);
		System.out.println("Access Device Location PopUp");
		Thread.sleep(10000);

		if (verifyElementExist(AMDOnboardingScreen.objAllowLocationAccessPopup, "AllowPopup")) {
			Wait(5000);

			String str1 = getAttributValue("text", AMDOnboardingScreen.objFirstPermissionButton);
			String str2 = getAttributValue("text", AMDOnboardingScreen.objSecondPermissionButton);

			if (str1.contains("ALLOW")) {
				System.out.println("ALLOW is present");
				click(AMDOnboardingScreen.objAllow(str1), str1);

			} else if (str1.contains("WHILE USING THE APP")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.objAllow(str1), str1);
			} else if (str1.contains("Allow")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.objAllow(str1), str1);
			} else if (str2.contains("ALLOW")) {
				System.out.println("ALLOW is present");
				click(AMDOnboardingScreen.objAllow(str2), str2);
			} else if (str2.contains("Allow")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.objAllow(str2), str2);
			}
			AppPerformanceTestInfo("com.graymatrix.did");
			Thread.sleep(10000);
		} else {
			System.out.println("Access Device Location PopUp not displayed");
		}
	}
/**
 * @note This method is used to retrieve cw tray of user.
 * @param userType
 * @throws Exception
 */
	public void getContinueWatchingTrayDetails(String userType) throws Exception {
		extent.HeaderChildNode("Get Continue watching tray details for Market build");
		if (!userType.equalsIgnoreCase("Guest")) {
			waitForElementDisplayed(AMDHomePage.objContinueWatchingTray, 30);
			boolean ContinueWatchingTray = verifyIsElementDisplayed(AMDHomePage.objContinueWatchingTray);
			if (ContinueWatchingTray) {
				List<WebElement> tabs = getDriver().findElements(AMDHomePage.objCWtraycontents);
				System.out.println(tabs.size());
				PartialSwipe("UP", 1);
				for (int i = 1; i <= tabs.size(); i++) {
					System.out.println("i : " + i);
					WebElement ele = findElement(AMDHomePage.objCWContent(i));
					String CWTrayFirstContentTitle = ele.getText();
					logger.info("Continue watching content title " + i + ":" + CWTrayFirstContentTitle);
					extentLogger("", "Continue watching content title " + i + ":" + CWTrayFirstContentTitle);
					MarketCWtray.add(CWTrayFirstContentTitle);
				}
				logger.info("Market build Continue watching tray contents: " + MarketCWtray);
			} else {
				logger.error("Continue watching tray not displayed");
				extent.extentLoggerWarning("Continue watching Tray", "Continue watching tray not displayed in");
			}
		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}
/**
 * @note this method is used to check downloaded contents in download screen.
 * @param userType
 * @throws Exception
 */
	public void downloadsDetails(String userType) throws Exception {
		extent.HeaderChildNode("Get Downloads details for Market build");
		if (!userType.equalsIgnoreCase("Guest")) {
			verifyElementPresent(AMDHomePage.objDownloadBtn, "Downloads tab at the bottom navigation bar");
			downloadContent(content1, "Good", true);
//		click(AMDHomePage.objDownloadBtn, "Downloads tab");
			waitTime(3000);
			click(AMDDownloadPage.objshowstab, "Shows tab in Downloads landing screen");
			if (verifyElementDisplayed(AMDDownloadPage.objBrowseToDownloadBtn)) {
				logger.info("There are no contents in Shows tab");
				extent.extentLogger("", "There are no contents in Shows tab");
			} else {
				verifyElementExist(AMDDownloadPage.objDownloadedVideoContent, "Downloaded content");
				String DownloadedContentText = getDriver().findElement(AMDDownloadPage.objDownloadedVideoContent)
						.getText();
				System.out.println(DownloadedContentText);
				logger.info("Downloaded content: " + DownloadedContentText + " is displayed");
				extent.extentLogger("", "Downloaded content: " + DownloadedContentText + " is displayed");
				Downloadedcontent.add(DownloadedContentText);
			}
			click(AMDDownloadPage.objmoviestab, "Movies tab in Downlaods landing screen");
			if (verifyElementDisplayed(AMDDownloadPage.objBrowseToDownloadBtn)) {
				logger.info("There are no contents in Movies tab");
				extent.extentLogger("", "There are no contents in Movies tab");
			} else {
				verifyElementExist(AMDDownloadPage.objDownloadedVideoContent, "Downloaded content");
				String DownloadedContentText = getDriver().findElement(AMDDownloadPage.objDownloadedVideoContent)
						.getText();
				System.out.println(DownloadedContentText);
				logger.info("Downloaded content: " + DownloadedContentText + " is displayed");
				extent.extentLogger("", "Downloaded content: " + DownloadedContentText + " is displayed");
				Downloadedcontent.add(DownloadedContentText);
			}
			click(AMDDownloadPage.objvideostab, "Videos tab in Downloads landing screen");
			if (verifyElementDisplayed(AMDDownloadPage.objBrowseToDownloadBtn)) {
				logger.info("There are no contents in Videos tab");
				extent.extentLogger("", "There are no contents in Vidoes tab");
			} else {
				verifyElementExist(AMDDownloadPage.objDownloadedVideoContent, "Downloaded content");
				String DownloadedContentText = getDriver().findElement(AMDDownloadPage.objDownloadedVideoContent)
						.getText();
				System.out.println(DownloadedContentText);
				logger.info("Downloaded content: " + DownloadedContentText + " is displayed");
				extent.extentLogger("", "Downloaded content: " + DownloadedContentText + " is displayed");
				Downloadedcontent.add(DownloadedContentText);
			}
			logger.info("Downloaded contents: " + Downloadedcontent);
		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}

	}
/**
 * @note This method iis used to get Watchlist details for Market build
 * @param userType
 * @throws Exception
 */
	public void watchListDetails(String userType) throws Exception {
		extent.HeaderChildNode("Get Watchlist details for Market build");
		if (!userType.equalsIgnoreCase("Guest")) {
			String Username = null;
			String Password = null;
			if (pUserType.equalsIgnoreCase("SubscribedUser")) {
				Username = getParameterFromXML("UpgradeSubscribedUserName");
				Password = getParameterFromXML("UpgradeSubscribedPassword");
			} else if (pUserType.equalsIgnoreCase("NonSubscribedUser")) {
				Username = getParameterFromXML("UpgradeNonsubscribedUserName");
				Password = getParameterFromXML("UpgradeNonsubscribedPassword");
			}
			Response respWatchlist = ResponseInstance.getWatchList1(Username, Password);
			int totalcontent = respWatchlist.jsonPath().getList("array").size();
			extent.extentLogger("", "Number of contents in Watch list " + totalcontent);
			System.out.println("Number of contents in Watch list " + totalcontent);
			String contentid = null;
			for (int i = 0; i < totalcontent; i++) {
				contentid = respWatchlist.jsonPath().getString("[" + i + "].id");
				Response contentresp = ResponseInstance.getContentDetails1(contentid);
				String assetSubtype = contentresp.jsonPath().getString("asset_subtype");
				String contenttitle = null;
				if (assetSubtype.equalsIgnoreCase("episode")) {
					contenttitle = contentresp.jsonPath().getString("tvshow_details.title");
				} else {
					contenttitle = contentresp.jsonPath().getString("original_title");
				}
				marketwatchlist.add(contenttitle);
			}
			System.out.println(marketwatchlist);
			extent.extentLogger("", "Watch list contents: " + marketwatchlist);
		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}
/**
 * @note This method is used to  Capture user settings details for upgrade build
 * @throws Exception
 */
	@SuppressWarnings("unused")
	public void captureSettingsDetailsForupgradeBuild() throws Exception {
		extent.HeaderChildNode("Capture user settings details for upgrade build");
		click(AMDHomePage.MoreMenuIcon, "More menu icon");
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings option");
		verifyElementExist(AMDSettingsScreen.objVideoQualityDefaultvalue, "Video Quality");
		String videoqaulity = findElement(AMDSettingsScreen.objVideoQualityDefaultvalue).getText();

		verifyElementExist(AMDSettingsScreen.objStreamOverWifiValue, "Stream over wifi");
		String StreamOverWifi = findElement(AMDSettingsScreen.objStreamOverWifiValue).getText();
		String streamoverwifi = getAttributValue("checked", AMDSettingsScreen.objStreamOverWifiValue);

		verifyElementExist(AMDSettingsScreen.objAutoPlayToggleSwitch, "Auto Play");
		String AutoPlay = findElement(AMDSettingsScreen.objAutoPlayToggleSwitch).getText();
		String autoplay = getAttributValue("checked", AMDSettingsScreen.objAutoPlayToggleSwitch);

		verifyElementExist(AMDSettingsScreen.objDownloadQualityValue, "Download Quality");
		String Downloadquality = findElement(AMDSettingsScreen.objDownloadQualityValue).getText();

		verifyElementExist(AMDSettingsScreen.objDownloadOverWifiToggle, "Download over wifi");
		String DownloadOverWifi = findElement(AMDSettingsScreen.objDownloadOverWifiToggle).getText();
		String downloadoverwifi = getAttributValue("checked", AMDSettingsScreen.objDownloadOverWifiToggle);
		Swipe("UP", 1);
		verifyElementExist(AMDSettingsScreen.objDisplayLangValue, "Display Launguage");
		String DisplayLanguage = findElement(AMDSettingsScreen.objDisplayLangValue).getText();

		extentLogger("", "Stream quality: " + videoqaulity);
		extentLogger("", "Auto play: " + autoplay);
		extentLogger("", "Download quality: " + Downloadquality);
		extentLogger("", "Stream over wifi: " + StreamOverWifi);
		extentLogger("", "Download over wifi: " + DownloadOverWifi);
		extentLogger("", "Display language: " + DisplayLanguage);

		Upgradesettings.add(videoqaulity);
		Upgradesettings.add(autoplay);
		Upgradesettings.add(Downloadquality);
		Upgradesettings.add(streamoverwifi);
		Upgradesettings.add(downloadoverwifi);
		Upgradesettings.add(DisplayLanguage);
//	Upgradesettings.add(contentlang);

		logger.info("Market build Settings details: " + marketsettings);
		logger.info("Upgrade build Settings details: " + Upgradesettings);

		for (int i = 0; i < Upgradesettings.size(); i++) {
			if (marketsettings.get(i).equalsIgnoreCase(Upgradesettings.get(i))) {
				logger.info("Market build user setting detail: " + marketsettings.get(i) + " is same as Upgrade build :"
						+ Upgradesettings.get(i));
				extent.extentLoggerPass("", "Market build user setting detail: " + marketsettings.get(i)
						+ " is same as Upgrade build :" + Upgradesettings.get(i));
			} else {
				logger.error("Market build user setting detail: " + marketsettings.get(i)
						+ " is NOT same as Upgrade build :" + Upgradesettings.get(i));
				extent.extentLoggerFail("", "Market build user setting detail: " + marketsettings.get(i)
						+ " is NOT same as Upgrade build :" + Upgradesettings.get(i));
			}
		}
		BackToLandingScreen();
	}
/**
 * @note this mwthod is used to Capture Watchlist Details for Upgrade build
 * @param userType
 * @throws Exception
 */
	public void captureWatchlistDetailsForUpgradeBuild(String userType) throws Exception {
		extent.HeaderChildNode("Capture Watchlist Details for Upgrade build");
		if (!userType.equalsIgnoreCase("Guest")) {
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
			click(AMDMoreMenu.objWatchlist, "My Watchlist");
			waitTime(3000);
			if (verifyIsElementDisplayed(AMDWatchlistPage.objWatchlistTitle)) {
				logger.info("User navigated to my Watchlist screen");
				extent.extentLoggerPass("watchlist", "User navigated to my Watchlist screen");
			} else {
				logger.error("User not navigated to my Watchlist screen");
				extent.extentLoggerFail("watchlist", "User not navigated to my Watchlist screen");
			}
			click(AMDWatchlistPage.objShowsTab, "Shows tab");
			watchlistContents();
			waitTime(3000);
			click(AMDWatchlistPage.objMoviesTab, "Movies tab");
			watchlistContents();
			waitTime(3000);
			click(AMDWatchlistPage.objVideosTab, "Videos tab");
			watchlistContents();
			waitTime(3000);
			logger.info("Upgrade build watch list contents: " + Upgradewatchlist);

			for (int i = 0; i < Upgradewatchlist.size(); i++) {

				if (marketwatchlist.get(i).equalsIgnoreCase(Upgradewatchlist.get(i))) {
					logger.info("Market build Watchlist details: " + marketwatchlist.get(i)
							+ " is same as Upgrade build :" + Upgradewatchlist.get(i));
					extent.extentLoggerPass("", "Market build Watchlist details: " + marketwatchlist.get(i)
							+ " is same as Upgrade build :" + Upgradewatchlist.get(i));
				} else {
					logger.error("Market build Watchlist details: " + marketwatchlist.get(i)
							+ " is NOT same as Upgrade build :" + Upgradewatchlist.get(i));
					extent.extentLoggerFail("", "Market build Watchlist details: " + marketwatchlist.get(i)
							+ " is NOT same as Upgrade build :" + Upgradewatchlist.get(i));
				}
			}
		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}
/**
 * @note This method is used to verify Watchlist screen.
 * @throws Exception
 */
	public void watchlistContents() throws Exception {
		boolean watchlistFlag = false;

		if (verifyIsElementDisplayed(AMDWatchlistPage.objNoReminderIcon)) {
			logger.info("Watchlist screen displayed with Empty Watchlist icon");
			extent.extentLoggerPass("Watchlist", "Watchlist screen displayed with Empty Watchlist icon");

		} else {
			watchlistFlag = true;
			logger.info("Watchlist has some content cards");
			extent.extentLoggerPass("watchlist", "Watchlist has some content cards");
			if (watchlistFlag) {
				List<WebElement> contents = getDriver().findElements(AMDWatchlistPage.objContentNames);
				System.out.println(contents.size());
				for (int i = 1; i <= contents.size(); i++) {
					System.out.println("i : " + i);
					WebElement ele = findElement(AMDWatchlistPage.objIterateTitle(i));
					String watchlistcontent = ele.getText();
					logger.info(i + " Watch list content title : " + watchlistcontent);
					extentLogger("", i + " Watch list content title :  " + watchlistcontent);
					Upgradewatchlist.add(watchlistcontent);
				}
			}
		}
	}
/**
 * @note this method is used for Capture Downloads Details for Upgrade build
 * @throws Exception
 */
	public void captureDownloadsForrUpgradeBuild() throws Exception {
		extent.HeaderChildNode("Capture Downloads Details for Upgrade build");
		verifyElementPresent(AMDHomePage.objDownloadBtn, "Downloads tab at the bottom navigation bar");

		click(AMDHomePage.objDownloadBtn, "Downloads tab");
		waitTime(3000);
		click(AMDDownloadPage.objshowstab, "Shows tab in Downloads landing screen");
		if (verifyElementDisplayed(AMDDownloadPage.objBrowseToDownloadBtn)) {
			logger.info("There are no contents in Shows tab");
			extent.extentLogger("", "There are no contents in Shows tab");
		} else {
			verifyElementExist(AMDDownloadPage.objDownloadedVideoContent, "Downloaded content");
			String DownloadedContentText = getDriver().findElement(AMDDownloadPage.objDownloadedVideoContent).getText();
			System.out.println(DownloadedContentText);
			logger.info(DownloadedContentText + " downloaded content is displayed");
			extent.extentLogger("", DownloadedContentText + " downloaded content is displayed");
			UpgradeDownloadedcontent.add(DownloadedContentText);
		}
		click(AMDDownloadPage.objmoviestab, "Movies tab in Downlaods landing screen");
		if (verifyElementDisplayed(AMDDownloadPage.objBrowseToDownloadBtn)) {
			logger.info("There are no contents in Movies tab");
			extent.extentLogger("", "There are no contents in Movies tab");
		} else {
			verifyElementExist(AMDDownloadPage.objDownloadedVideoContent, "Downloaded content");
			String DownloadedContentText = getDriver().findElement(AMDDownloadPage.objDownloadedVideoContent).getText();
			System.out.println(DownloadedContentText);
			logger.info(DownloadedContentText + " downloaded content is displayed");
			extent.extentLogger("", DownloadedContentText + " downloaded content is displayed");
			UpgradeDownloadedcontent.add(DownloadedContentText);
		}
		click(AMDDownloadPage.objvideostab, "Videos tab in Downloads landing screen");
		if (verifyElementDisplayed(AMDDownloadPage.objBrowseToDownloadBtn)) {
			logger.info("There are no contents in Videos tab");
			extent.extentLogger("", "There are no contents in Vidoes tab");
		} else {
			verifyElementExist(AMDDownloadPage.objDownloadedVideoContent, "Downloaded content");
			String DownloadedContentText = getDriver().findElement(AMDDownloadPage.objDownloadedVideoContent).getText();
			System.out.println(DownloadedContentText);
			logger.info(DownloadedContentText + " downloaded content is displayed");
			extent.extentLogger("", DownloadedContentText + " downloaded content is displayed");
			UpgradeDownloadedcontent.add(DownloadedContentText);
		}

		logger.info("Downloaded contents in Upgrade build: " + UpgradeDownloadedcontent);

		logger.info("Downloaded contents in Market build: " + Downloadedcontent);

		for (int i = 0; i < UpgradeDownloadedcontent.size(); i++) {

			if (Downloadedcontent.get(i).equalsIgnoreCase(UpgradeDownloadedcontent.get(i))) {
				logger.info("Market build Downloaded contents: " + Downloadedcontent.get(i)
						+ " is same as Upgrade build :" + UpgradeDownloadedcontent.get(i));
				extent.extentLoggerPass("", "Market build Downloaded contents: " + Downloadedcontent.get(i)
						+ " is same as Upgrade build :" + UpgradeDownloadedcontent.get(i));
			} else {
				logger.error("Market build Downloaded contents: " + Downloadedcontent.get(i)
						+ " is NOT same as Upgrade build :" + UpgradeDownloadedcontent.get(i));
				extent.extentLoggerFail("", "Market build Downloaded contents: " + Downloadedcontent.get(i)
						+ " is NOT same as Upgrade build :" + UpgradeDownloadedcontent.get(i));
			}
		}

		BackToLandingScreen();
	}
/**
 * @note this method is used for Capture Continue watching tray details for Upgrade build
 * @param userType
 * @throws Exception
 */
	public void captureContinueWatchingTrayForUpgradeBuild(String userType) throws Exception {
		extent.HeaderChildNode("Capture Continue watching tray details for Upgrade build");
		if (!userType.equalsIgnoreCase("Guest")) {
			waitForElementDisplayed(AMDHomePage.objContinueWatchingTray, 30);
			boolean ContinueWatchingTray = verifyIsElementDisplayed(AMDHomePage.objContinueWatchingTray);
			if (ContinueWatchingTray) {
				List<WebElement> tabs = getDriver().findElements(AMDHomePage.objCWtraycontents);
				System.out.println(tabs.size());
				PartialSwipe("UP", 1);
				for (int i = 1; i <= tabs.size(); i++) {
					System.out.println("i : " + i);
					WebElement ele = findElement(AMDHomePage.objCWContent(i));
					String CWTrayFirstContentTitle = ele.getText();
					logger.info("Continue watching content title " + i + ":" + CWTrayFirstContentTitle);
					extentLogger("", "Continue watching content title " + i + ":" + CWTrayFirstContentTitle);
					UpgradeCWtray.add(CWTrayFirstContentTitle);
				}
				logger.info("Upgrade build Continue watching tray contents: " + UpgradeCWtray);

				for (int i = 0; i < UpgradeCWtray.size(); i++) {
					if (MarketCWtray.get(i).equalsIgnoreCase(UpgradeCWtray.get(i))) {
						logger.info("Market build Continue watching tray content: " + MarketCWtray.get(i)
								+ " is same as Upgrade build :" + UpgradeCWtray.get(i));
						extent.extentLoggerPass("", "Market build Continue watching tray content: "
								+ MarketCWtray.get(i) + " is same as Upgrade build :" + UpgradeCWtray.get(i));
					} else {
						logger.error("Market build Continue watching tray content " + MarketCWtray.get(i)
								+ " is NOT same as Upgrade build :" + UpgradeCWtray.get(i));
						extent.extentLoggerFail("", "Market build Continue watching tray content: "
								+ MarketCWtray.get(i) + " is NOT same as Upgrade build :" + UpgradeCWtray.get(i));
					}
				}
			} else {
				logger.info("Continue watching tray not displayed");
				extent.extentLoggerWarning("Continue watching Tray", "Continue watching tray not displayed in");
			}

		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}
/**
 * @note this method is used to Capture Downloads Details for Upgrade build
 * @param userType
 * @throws Exception
 */
	public void captureDownloadsForUpgradeBuild(String userType) throws Exception {
		extent.HeaderChildNode("Capture Downloads Details for Upgrade build");
		if (!userType.equalsIgnoreCase("Guest")) {
			verifyElementPresent(AMDHomePage.objDownloadBtn, "Downloads tab at the bottom navigation bar");

			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			waitTime(3000);
			click(AMDDownloadPage.objshowstab, "Shows tab in Downloads landing screen");
			if (verifyElementDisplayed(AMDDownloadPage.objBrowseToDownloadBtn)) {
				logger.info("There are no contents in Shows tab");
				extent.extentLogger("", "There are no contents in Shows tab");
			} else {
				verifyElementExist(AMDDownloadPage.objDownloadedVideoContent, "Downloaded content");
				String DownloadedContentText = getDriver().findElement(AMDDownloadPage.objDownloadedVideoContent)
						.getText();
				// System.out.println(DownloadedContentText);
				logger.info(DownloadedContentText + " downloaded content is displayed");
				extent.extentLogger("", DownloadedContentText + " downloaded content is displayed");
				UpgradeDownloadedcontent.add(DownloadedContentText);
			}
			click(AMDDownloadPage.objmoviestab, "Movies tab in Downlaods landing screen");
			if (verifyElementDisplayed(AMDDownloadPage.objBrowseToDownloadBtn)) {
				logger.info("There are no contents in Movies tab");
				extent.extentLogger("", "There are no contents in Movies tab");
			} else {
				verifyElementExist(AMDDownloadPage.objDownloadedVideoContent, "Downloaded content");
				String DownloadedContentText = getDriver().findElement(AMDDownloadPage.objDownloadedVideoContent)
						.getText();
				// System.out.println(DownloadedContentText);
				logger.info(DownloadedContentText + " downloaded content is displayed");
				extent.extentLogger("", DownloadedContentText + " downloaded content is displayed");
				UpgradeDownloadedcontent.add(DownloadedContentText);
			}
			click(AMDDownloadPage.objvideostab, "Videos tab in Downloads landing screen");
			if (verifyElementDisplayed(AMDDownloadPage.objBrowseToDownloadBtn)) {
				logger.error("AMA2-17966 : Downloads are not retained, There are no contents in Videos tab");
				extentLoggerFail("", "AMA2-17966 : Downloads are not retained, There are no contents in Videos tab");

			} else {
				verifyElementExist(AMDDownloadPage.objDownloadedVideoContent, "Downloaded content");
				String DownloadedContentText = getDriver().findElement(AMDDownloadPage.objDownloadedVideoContent)
						.getText();
				// System.out.println(DownloadedContentText);
				logger.info(DownloadedContentText + " downloaded content is displayed");
				extent.extentLogger("", DownloadedContentText + " downloaded content is displayed");
				UpgradeDownloadedcontent.add(DownloadedContentText);
			}

			logger.info("Downloaded contents in Upgrade build: " + UpgradeDownloadedcontent);

			logger.info("Downloaded contents in Market build: " + Downloadedcontent);

			for (int i = 0; i < UpgradeDownloadedcontent.size(); i++) {

				if (Downloadedcontent.get(i).equalsIgnoreCase(UpgradeDownloadedcontent.get(i))) {
					logger.info("Market build Downloaded contents: " + Downloadedcontent.get(i)
							+ " is same as Upgrade build :" + UpgradeDownloadedcontent.get(i));
					extent.extentLoggerPass("", "Market build Downloaded contents: " + Downloadedcontent.get(i)
							+ " is same as Upgrade build :" + UpgradeDownloadedcontent.get(i));
				} else {
					logger.error("Market build Downloaded contents: " + Downloadedcontent.get(i)
							+ " is NOT same as Upgrade build :" + UpgradeDownloadedcontent.get(i));
					extent.extentLoggerFail("", "Market build Downloaded contents: " + Downloadedcontent.get(i)
							+ " is NOT same as Upgrade build :" + UpgradeDownloadedcontent.get(i));
				}
			}

			BackToLandingScreen();
		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}
/**
 * @note This method is used to Capture Recent search history for Market build
 * @param userType
 * @throws Exception
 */
	public void recentSearchedForMarketBuild(String userType) throws Exception {
		extent.HeaderChildNode("Capture Recent search history for Market build");
		if (userType.equalsIgnoreCase("Guest")) {
			verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, "Hero" + "\n", "Search bar");
			hideKeyboard();
			waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
			click(AMDSearchScreen.objClearSearch, "ClearText");
			waitTime(2000);

			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, "Mummy" + "\n", "Search bar");
			hideKeyboard();
			waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
			click(AMDSearchScreen.objClearSearch, "ClearText");
			waitTime(2000);

			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, "Friends" + "\n", "Search bar");
			hideKeyboard();
			waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
			click(AMDSearchScreen.objClearSearch, "ClearText");
			waitTime(2000);

			if (verifyIsElementDisplayed(AMDSearchScreen.objRecentSearch)) {
				extent.extentLoggerPass("Recent Search Overlay",
						"Recent Search Overlay is available in search results screen");
				logger.info("Recent Search Overlay is available in search results screen");

				List<WebElement> contents = getDriver().findElements(AMDSearchScreen.objRecentSearchHistory);
				System.out.println(contents.size());
				for (int i = 1; i <= contents.size(); i++) {
					System.out.println("i : " + i);
					WebElement ele = findElement(AMDSearchScreen.objRecentSearches(i));
					String recentsearchlist = ele.getText();
					logger.info("Recent search history content " + i + ":" + recentsearchlist);
					extentLogger("", "Recent search history content " + i + ":" + recentsearchlist);
					MarketRecentSearch.add(recentsearchlist);
				}
				logger.info("Market build Recent search history list: " + MarketRecentSearch);
			} else {
				extent.extentLogger("Recent Search Overlay",
						"Recent Search Overlay is not available in search results screen");
				logger.info("Recent Search Overlay is not available in search results screen");
			}
		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}
/**
 * @note this method is used to Capture Recent search history for Upgrade build
 * @param userType
 * @throws Exception
 */
	public void recentSearchedForUpgradeBuild(String userType) throws Exception {
		extent.HeaderChildNode("Capture Recent search history for Upgrade build");
		if (userType.equalsIgnoreCase("Guest")) {
			verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
			if (verifyIsElementDisplayed(AMDSearchScreen.objRecentSearch)) {
				extent.extentLoggerPass("Recent Search Overlay",
						"Recent Search Overlay is available in search results screen");
				logger.info("Recent Search Overlay is available in search results screen");

				List<WebElement> contents = getDriver().findElements(AMDSearchScreen.objRecentSearchHistory);
				System.out.println(contents.size());
				for (int i = 1; i <= contents.size() - 1; i++) {
					System.out.println("i : " + i);
					WebElement ele = findElement(AMDSearchScreen.objRecentSearches(i));
					String recentsearchlist = ele.getText();
					logger.info("Recent search history content " + i + ":" + recentsearchlist);
					extentLogger("", "Recent search history content " + i + ":" + recentsearchlist);
					UpgradeRecentSearch.add(recentsearchlist);
				}
				logger.info("Upgrade build Recent search history list: " + UpgradeRecentSearch);

				for (int i = 0; i < UpgradeRecentSearch.size(); i++) {

					if (MarketRecentSearch.get(i).equalsIgnoreCase(UpgradeRecentSearch.get(i))) {
						logger.info("Market build Recent search history detail: " + MarketRecentSearch.get(i)
								+ " is same as Upgrade build :" + UpgradeRecentSearch.get(i));
						extent.extentLoggerPass("",
								"Market build Recent search history detail: " + MarketRecentSearch.get(i)
										+ " is same as Upgrade build :" + UpgradeRecentSearch.get(i));
					} else {
						logger.error("Market build Recent search history detail: " + MarketRecentSearch.get(i)
								+ " is NOT same as Upgrade build :" + UpgradeRecentSearch.get(i));
						extent.extentLoggerFail("",
								"Market build Recent search history detail: " + MarketRecentSearch.get(i)
										+ " is NOT same as Upgrade build :" + UpgradeRecentSearch.get(i));
					}
				}

			} else {
				extent.extentLogger("Recent Search Overlay",
						"Recent Search Overlay is not available in search results screen");
				logger.info("Recent Search Overlay is not available in search results screen");
			}
			BackToLandingScreen();
		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}
/**
 * @note This method is used to clear performance matric values
 */
	public static void clearAllPerformanceMatrics() {
		performaceMatrics.remove("Time Taken");
		performaceMatrics.remove("Native Heap Memory");
		performaceMatrics.remove("Peak Memory");
		performaceMatrics.remove("CPU Usage");
		performaceMatrics.remove("GPU Usage");
		performaceMatrics.remove("GPU FPS");
		performaceMatrics.remove("Traffic Usage");
	}
/**
 * @note This method is used to verify performance of episode content playback
 * @throws Exception
 */
	public void initiateContentPlaybackTVEPISODE() throws Exception {
		extent.HeaderChildNode("Initiate content playback of Episode");
		System.out.println("\n>>> Initiate content playback of Episode");

//String appPackageName = getParameterFromXML("appPackageName");
		String appPackageName = "com.graymatrix.did";

		// Threshold Values declaration
		int threshold_TimeTaken = 15;
		int threshold_NativeMemory = 45;
		int threshold_TotalMemory = 300;
		int threshold_CPU = 150;
		int threshold_GPUMem = 30;
		int threshold_GPURendered = 15000;
		int threshold_Network = 90;
		boolean timeFlag = true, memFlag = true, totalmemFlag = true, cpuFlag = true, gpuMemFlag = true,
				gpuRenFlag = true, trafficFlag = true;

		loginWithEmailID("zeetest34new@test.com", "123456");
		waitForElementDisplayed(AMDHomePage.objZee5Logo, 30);
		selectTopNavigationTab("TV Shows");
		verifyElementPresentAndClick(AMDHomePage.objPlayBtn, "Play");
		Instant startTime = Instant.now();
		logger.info("Instant Start time : " + startTime);

		verifyElementPresent(AMDPlayerScreen.objPauseIcon, "Player Start");

		// #### App Performance MEMORY Usage Info
		ArrayList<String> getMmoryInfo = Memory_UsagePerformanceV2();
		int nativeMemory = Integer.parseInt(getMmoryInfo.get(0).trim());
		int totalMemory = Integer.parseInt(getMmoryInfo.get(1).trim());

		// #### App Performance CPU Usage Info
		String getCPUInfo = cpu_UsagePerformanceV2();
		int nCpuUSage = Integer.parseInt(getCPUInfo);

		// #### App Performance GPU Usage Info
		ArrayList<String> getGPUInfo = GPU_UsagePerformanceV2();
		float nGPUMemory = Float.parseFloat(getGPUInfo.get(0).replace(" MB", "").trim());
		int nGPURendered = Integer.parseInt(getGPUInfo.get(1).replace("Total frames rendered: ", "").trim());

		// #### App Performance Network Traffic Usage Info
		int nNetTraffic = getApp_NetworkTrafficUsageV2(appPackageName);

		// #### App Performance Battery Info
		String batteryInfo = BatteryStats_PerformanceV2();

		Instant endTime = Instant.now();
		logger.info("Instant End time : " + endTime);

		Duration timeElapsed = Duration.between(startTime, endTime);
		extent.extentLogger("Timer",
				"<b>Time taken to start playback for Episode(Sec):</b> " + timeElapsed.getSeconds());
		Back(1);

		if (timeElapsed.getSeconds() < threshold_TimeTaken) {
			extent.extentLoggerPass("Timer",
					"<b>Time taken to start playback for Episode(Sec)</b>: " + timeElapsed.getSeconds());
		} else {
			timeFlag = false;
			logger.info("Time taken to start playback for Episode(Sec): " + timeElapsed.getSeconds());
			extent.extentLoggerFail("Timer",
					"<b>Time taken to start playback for Episode(Sec)</b>: " + timeElapsed.getSeconds());
		}
		softAssertion.assertEquals(timeFlag, true);

		if (nativeMemory < threshold_NativeMemory) {
			logger.info("App Native Heap Memory: " + nativeMemory + " MB");
			extent.extentLoggerPass("Memory Info", "<b>App Native Heap Memory: :</b> " + nativeMemory + " MB");
		} else {
			memFlag = false;
			logger.error("App Native Heap Memory: " + nativeMemory + " MB");
			extent.extentLoggerFail("Memory Info", "<b>App Native Heap Memory: </b> " + nativeMemory + " MB");
		}
		softAssertion.assertEquals(memFlag, true);

		if (totalMemory < threshold_TotalMemory) {
			logger.info("App Peak Memory Usage: " + totalMemory + " MB");
			extent.extentLoggerPass("Memory Info", "<b>App Peak Memory Usage:</b> " + totalMemory + " MB");
		} else {
			totalmemFlag = false;
			logger.error("App Peak Memory Usage: " + totalMemory + " MB");
			extent.extentLoggerFail("Memory Info", "<b>App Peak Memory Usage:</b> " + totalMemory + " MB");
		}
		softAssertion.assertEquals(totalmemFlag, true);

		if (nCpuUSage < threshold_CPU) {
			logger.info("CPU Usage : " + nCpuUSage + "%");
			extent.extentLoggerPass("CPU Info", "<b>CPU Usage: </b>" + nCpuUSage + "%");
		} else {
			cpuFlag = false;
			logger.error("CPU Usage: " + nCpuUSage + "%");
			extent.extentLoggerFail("CPU Info", "<b>CPU Usage: </b>" + nCpuUSage + "%");
		}
		softAssertion.assertEquals(cpuFlag, true);

		if (nGPUMemory < threshold_GPUMem) {
			logger.info("\nGPU Memory Usage: " + nGPUMemory + " MB");
			extent.extentLoggerPass("GPU Info", "<b>GPU Memory Usage: </b>" + nGPUMemory + " MB");
		} else {
			gpuMemFlag = false;
			logger.error("\nGPU Memory Usage exceeded: " + nGPUMemory + " MB");
			extent.extentLoggerFail("GPU Info", "<b>GPU Memory Usage exceeded: </b>" + nGPUMemory + " MB");
		}
		softAssertion.assertEquals(gpuMemFlag, true);

		if (nGPURendered < threshold_GPURendered) {
			logger.info("\nGPU FPS: " + nGPURendered);
			extent.extentLoggerPass("GPU Info", "<b>GPU FPS: </b>" + nGPURendered);
		} else {
			gpuRenFlag = false;
			logger.error("\nGPU FPS: " + nGPURendered);
			extent.extentLoggerFail("GPU Info", "<b>GPU FPS: </b>" + nGPURendered);
		}
		softAssertion.assertEquals(gpuRenFlag, true);

		if (nNetTraffic < threshold_Network) {
			logger.info("\nApp traffic usage: " + (int) nNetTraffic + " MB");
			extent.extentLoggerPass("Traffic Usage", "<b>App traffic usage: </b>" + (int) nNetTraffic + " MB");
		} else {
			trafficFlag = false;
			logger.error("\nApp traffic usage: " + (int) nNetTraffic + " MB");
			extent.extentLoggerFail("Traffic Usage", "<b>App traffic usage: </b>" + (int) nNetTraffic + " MB");
		}

		performaceDetails.add("Initiate content playback (Episode)" + "," + timeElapsed.getSeconds() + ","
				+ nativeMemory + " MB," + totalMemory + " MB," + nCpuUSage + "%," + nGPUMemory + " MB," + nGPURendered
				+ "," + nNetTraffic + " MB");

		String timeTaken = Long.toString(timeElapsed.getSeconds());
		String strNativeMemory = Integer.toString(nativeMemory);
		String strTotalMemory = Integer.toString(totalMemory);
		String strCPU = Integer.toString(nCpuUSage);
		String strGPU = Float.toString(nGPUMemory);
		String strGPURendered = Integer.toString(nGPURendered);
		String strTraffic = Integer.toString(nNetTraffic);

		performaceMatrics.put("Time Taken", timeTaken + " Sec");
		performaceMatrics.put("Native Heap Memory", strNativeMemory + " MB");
		performaceMatrics.put("Peak Memory", strTotalMemory + " MB");
		performaceMatrics.put("CPU Usage", strCPU + "%");
		performaceMatrics.put("GPU Usage", strGPU + " MB");
		performaceMatrics.put("GPU FPS", strGPURendered);
		performaceMatrics.put("Traffic Usage", strTraffic + " MB");

		System.out.println(
				"\n---------------------------------------------- Playback Functionality EPISODE ----------------------------------------------");
		System.out.println(performaceMatrics);
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------");
		clearAllPerformanceMatrics();

		softAssertion.assertEquals(trafficFlag, true);
		softAssertion.assertAll();

		if (batteryInfo.contains("drain")) {
			logger.info("\nApp Battery Info - " + batteryInfo);
			extent.extentLoggerPass("Timer", "<b>App Battery Info - </b>" + batteryInfo);
		} else {
			logger.error("\nApp Battery Info - " + batteryInfo);
			extent.extentLoggerFail("Timer", "<b>App Battery Info - </b>" + batteryInfo);
		}
	}
/**
 * @note This method is used to verify performance matrix of content playback
 * @throws Exception
 */
	public void consumptionScreenforShows() throws Exception {
		extent.HeaderChildNode("Consumption screen for Shows");
		System.out.println("\n>>> Consumption screen for Shows");

//String appPackageName = getParameterFromXML("appPackageName");
		String appPackageName = "com.graymatrix.did";

		// Threshold Values declaration
		int threshold_TimeTaken = 15;
		int threshold_NativeMemory = 45;
		int threshold_TotalMemory = 300;
		int threshold_CPU = 150;
		int threshold_GPUMem = 30;
		int threshold_GPURendered = 1500;
		int threshold_Network = 90;
		boolean timeFlag = true, memFlag = true, totalmemFlag = true, cpuFlag = true, gpuMemFlag = true,
				gpuRenFlag = true, trafficFlag = true;

		loginWithEmailID("zeetest34new@test.com", "123456");
		waitForElementDisplayed(AMDHomePage.objZee5Logo, 30);
		selectTopNavigationTab("TV Shows");
		verifyElementPresentAndClick(AMDHomePage.objPlayBtn, "Play");
		Instant startTime = Instant.now();
		logger.info("Instant Start time : " + startTime);

		verifyElementPresent(AMDPlayerScreen.objPauseIcon, "Player Start");
		verifyElementPresent(AMDConsumptionScreen.objAudioLanguage, "Audio lang");
		verifyElementPresent(AMDConsumptionScreen.objContentDesc, "Content Desc");
		verifyElementPresent(AMDConsumptionScreen.objExpandDesc, "Expand view");

		// #### App Performance MEMORY Usage Info
		ArrayList<String> getMmoryInfo = Memory_UsagePerformanceV2();
		int nativeMemory = Integer.parseInt(getMmoryInfo.get(0).trim());
		int totalMemory = Integer.parseInt(getMmoryInfo.get(1).trim());

		// #### App Performance CPU Usage Info
		String getCPUInfo = cpu_UsagePerformanceV2();
		int nCpuUSage = Integer.parseInt(getCPUInfo);

		// #### App Performance GPU Usage Info
		ArrayList<String> getGPUInfo = GPU_UsagePerformanceV2();
		float nGPUMemory = Float.parseFloat(getGPUInfo.get(0).replace(" MB", "").trim());
		int nGPURendered = Integer.parseInt(getGPUInfo.get(1).replace("Total frames rendered: ", "").trim());

		// #### App Performance Network Traffic Usage Info
		int nNetTraffic = getApp_NetworkTrafficUsageV2(appPackageName);

		// #### App Performance Battery Info
		String batteryInfo = BatteryStats_PerformanceV2();

		Instant endTime = Instant.now();
		logger.info("Instant End time : " + endTime);

		Duration timeElapsed = Duration.between(startTime, endTime);
		extent.extentLogger("Timer",
				"<b>Time taken to start playback for Episode(Sec):</b> " + timeElapsed.getSeconds());
		Back(1);

		if (timeElapsed.getSeconds() < threshold_TimeTaken) {
			extent.extentLoggerPass("Timer",
					"<b>Time taken to start playback for Episode(Sec)</b>: " + timeElapsed.getSeconds());
		} else {
			timeFlag = false;
			logger.info("Time taken to start playback for Episode(Sec): " + timeElapsed.getSeconds());
			extent.extentLoggerFail("Timer",
					"<b>Time taken to start playback for Episode(Sec)</b>: " + timeElapsed.getSeconds());
		}
		softAssertion.assertEquals(timeFlag, true);

		if (nativeMemory < threshold_NativeMemory) {
			logger.info("App Native Heap Memory: " + nativeMemory + " MB");
			extent.extentLoggerPass("Memory Info", "<b>App Native Heap Memory: :</b> " + nativeMemory + " MB");
		} else {
			memFlag = false;
			logger.error("App Native Heap Memory: " + nativeMemory + " MB");
			extent.extentLoggerFail("Memory Info", "<b>App Native Heap Memory: </b> " + nativeMemory + " MB");
		}
		softAssertion.assertEquals(memFlag, true);

		if (totalMemory < threshold_TotalMemory) {
			logger.info("App Peak Memory Usage: " + totalMemory + " MB");
			extent.extentLoggerPass("Memory Info", "<b>App Peak Memory Usage:</b> " + totalMemory + " MB");
		} else {
			totalmemFlag = false;
			logger.error("App Peak Memory Usage: " + totalMemory + " MB");
			extent.extentLoggerFail("Memory Info", "<b>App Peak Memory Usage:</b> " + totalMemory + " MB");
		}
		softAssertion.assertEquals(totalmemFlag, true);

		if (nCpuUSage < threshold_CPU) {
			logger.info("CPU Usage : " + nCpuUSage + "%");
			extent.extentLoggerPass("CPU Info", "<b>CPU Usage: </b>" + nCpuUSage + "%");
		} else {
			cpuFlag = false;
			logger.error("CPU Usage: " + nCpuUSage + "%");
			extent.extentLoggerFail("CPU Info", "<b>CPU Usage: </b>" + nCpuUSage + "%");
		}
		softAssertion.assertEquals(cpuFlag, true);

		if (nGPUMemory < threshold_GPUMem) {
			logger.info("\nGPU Memory Usage: " + nGPUMemory + " MB");
			extent.extentLoggerPass("GPU Info", "<b>GPU Memory Usage: </b>" + nGPUMemory + " MB");
		} else {
			gpuMemFlag = false;
			logger.error("\nGPU Memory Usage exceeded: " + nGPUMemory + " MB");
			extent.extentLoggerFail("GPU Info", "<b>GPU Memory Usage exceeded: </b>" + nGPUMemory + " MB");
		}
		softAssertion.assertEquals(gpuMemFlag, true);

		if (nGPURendered < threshold_GPURendered) {
			logger.info("\nGPU FPS: " + nGPURendered);
			extent.extentLoggerPass("GPU Info", "<b>GPU FPS: </b>" + nGPURendered);
		} else {
			gpuRenFlag = false;
			logger.error("\nGPU FPS: " + nGPURendered);
			extent.extentLoggerFail("GPU Info", "<b>GPU FPS: </b>" + nGPURendered);
		}
		softAssertion.assertEquals(gpuRenFlag, true);

		if (nNetTraffic < threshold_Network) {
			logger.info("\nApp traffic usage: " + (int) nNetTraffic + " MB");
			extent.extentLoggerPass("Traffic Usage", "<b>App traffic usage: </b>" + (int) nNetTraffic + " MB");
		} else {
			trafficFlag = false;
			logger.error("\nApp traffic usage: " + (int) nNetTraffic + " MB");
			extent.extentLoggerFail("Traffic Usage", "<b>App traffic usage: </b>" + (int) nNetTraffic + " MB");
		}

		String timeTaken = Long.toString(timeElapsed.getSeconds());
		String strNativeMemory = Integer.toString(nativeMemory);
		String strTotalMemory = Integer.toString(totalMemory);
		String strCPU = Integer.toString(nCpuUSage);
		String strGPU = Float.toString(nGPUMemory);
		String strGPURendered = Integer.toString(nGPURendered);
		String strTraffic = Integer.toString(nNetTraffic);

		performaceDetails.add("ConsumpitonScreen for Shows" + "," + timeElapsed.getSeconds() + "," + nativeMemory
				+ " MB," + totalMemory + " MB," + nCpuUSage + "%," + nGPUMemory + " MB," + nGPURendered + ","
				+ nNetTraffic + " MB");

		performaceMatrics.put("Time Taken", timeTaken + " Sec");
		performaceMatrics.put("Native Heap Memory", strNativeMemory + " MB");
		performaceMatrics.put("Peak Memory", strTotalMemory + " MB");
		performaceMatrics.put("CPU Usage", strCPU + "%");
		performaceMatrics.put("GPU Usage", strGPU + " MB");
		performaceMatrics.put("GPU FPS", strGPURendered);
		performaceMatrics.put("Traffic Usage", strTraffic + " MB");

		System.out.println(
				"\n---------------------------------------------- Consumption screen for Shows ----------------------------------------------");
		System.out.println(performaceMatrics);
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------");
		clearAllPerformanceMatrics();

		softAssertion.assertEquals(trafficFlag, true);
		softAssertion.assertAll();

		if (batteryInfo.contains("drain")) {
			logger.info("\nApp Battery Info - " + batteryInfo);
			extent.extentLoggerPass("Timer", "<b>App Battery Info - </b>" + batteryInfo);
		} else {
			logger.error("\nApp Battery Info - " + batteryInfo);
			extent.extentLoggerFail("Timer", "<b>App Battery Info - </b>" + batteryInfo);
		}
	}
/**
 * @note this method is used to capture performace matrix of Movies content
 * @throws Exception
 */
	public void consumptionScreenforMovies() throws Exception {
		extent.HeaderChildNode("Consumption screen for Movies");
		System.out.println("\n>>> Consumption screen for Movies");

//String appPackageName = getParameterFromXML("appPackageName");
		String appPackageName = "com.graymatrix.did";

		// Threshold Values declaration
		int threshold_TimeTaken = 18;
		int threshold_NativeMemory = 45;
		int threshold_TotalMemory = 300;
		int threshold_CPU = 150;
		int threshold_GPUMem = 30;
		int threshold_GPURendered = 1500;
		int threshold_Network = 90;
		boolean timeFlag = true, memFlag = true, totalmemFlag = true, cpuFlag = true, gpuMemFlag = true,
				gpuRenFlag = true, trafficFlag = true;

		loginWithEmailID("zeetest34new@test.com", "123456");
		waitForElementDisplayed(AMDHomePage.objZee5Logo, 30);
		selectTopNavigationTab("Movies");
		verifyElementPresentAndClick(AMDHomePage.objPlayBtn, "Play");
		Instant startTime = Instant.now();
		logger.info("Instant Start time : " + startTime);

		verifyElementPresent(AMDPlayerScreen.objPauseIcon, "Player Start");
		verifyElementPresent(AMDConsumptionScreen.objAudioLanguage, "Audio lang");
		verifyElementPresent(AMDConsumptionScreen.objContentDesc, "Content Desc");
		verifyElementPresent(AMDConsumptionScreen.objExpandDesc, "Expand view");

		// #### App Performance MEMORY Usage Info
		ArrayList<String> getMmoryInfo = Memory_UsagePerformanceV2();
		int nativeMemory = Integer.parseInt(getMmoryInfo.get(0).trim());
		int totalMemory = Integer.parseInt(getMmoryInfo.get(1).trim());

		// #### App Performance CPU Usage Info
		String getCPUInfo = cpu_UsagePerformanceV2();
		int nCpuUSage = Integer.parseInt(getCPUInfo);

		// #### App Performance GPU Usage Info
		ArrayList<String> getGPUInfo = GPU_UsagePerformanceV2();
		float nGPUMemory = Float.parseFloat(getGPUInfo.get(0).replace(" MB", "").trim());
		int nGPURendered = Integer.parseInt(getGPUInfo.get(1).replace("Total frames rendered: ", "").trim());

		// #### App Performance Network Traffic Usage Info
		int nNetTraffic = getApp_NetworkTrafficUsageV2(appPackageName);

		// #### App Performance Battery Info
		String batteryInfo = BatteryStats_PerformanceV2();

		Instant endTime = Instant.now();
		logger.info("Instant End time : " + endTime);

		Duration timeElapsed = Duration.between(startTime, endTime);
		extent.extentLogger("Timer",
				"<b>Time taken to start playback for Episode(Sec):</b> " + timeElapsed.getSeconds());
		Back(1);

		if (timeElapsed.getSeconds() < threshold_TimeTaken) {
			extent.extentLoggerPass("Timer",
					"<b>Time taken to start playback for Episode(Sec)</b>: " + timeElapsed.getSeconds());
		} else {
			timeFlag = false;
			logger.info("Time taken to start playback for Episode(Sec): " + timeElapsed.getSeconds());
			extent.extentLoggerFail("Timer",
					"<b>Time taken to start playback for Episode(Sec)</b>: " + timeElapsed.getSeconds());
		}
		softAssertion.assertEquals(timeFlag, true);

		if (nativeMemory < threshold_NativeMemory) {
			logger.info("App Native Heap Memory: " + nativeMemory + " MB");
			extent.extentLoggerPass("Memory Info", "<b>App Native Heap Memory: :</b> " + nativeMemory + " MB");
		} else {
			memFlag = false;
			logger.error("App Native Heap Memory: " + nativeMemory + " MB");
			extent.extentLoggerFail("Memory Info", "<b>App Native Heap Memory: </b> " + nativeMemory + " MB");
		}
		softAssertion.assertEquals(memFlag, true);

		if (totalMemory < threshold_TotalMemory) {
			logger.info("App Peak Memory Usage: " + totalMemory + " MB");
			extent.extentLoggerPass("Memory Info", "<b>App Peak Memory Usage:</b> " + totalMemory + " MB");
		} else {
			totalmemFlag = false;
			logger.error("App Peak Memory Usage: " + totalMemory + " MB");
			extent.extentLoggerFail("Memory Info", "<b>App Peak Memory Usage:</b> " + totalMemory + " MB");
		}
		softAssertion.assertEquals(totalmemFlag, true);

		if (nCpuUSage < threshold_CPU) {
			logger.info("CPU Usage : " + nCpuUSage + "%");
			extent.extentLoggerPass("CPU Info", "<b>CPU Usage: </b>" + nCpuUSage + "%");
		} else {
			cpuFlag = false;
			logger.error("CPU Usage: " + nCpuUSage + "%");
			extent.extentLoggerFail("CPU Info", "<b>CPU Usage: </b>" + nCpuUSage + "%");
		}
		softAssertion.assertEquals(cpuFlag, true);

		if (nGPUMemory < threshold_GPUMem) {
			logger.info("\nGPU Memory Usage: " + nGPUMemory + " MB");
			extent.extentLoggerPass("GPU Info", "<b>GPU Memory Usage: </b>" + nGPUMemory + " MB");
		} else {
			gpuMemFlag = false;
			logger.error("\nGPU Memory Usage exceeded: " + nGPUMemory + " MB");
			extent.extentLoggerFail("GPU Info", "<b>GPU Memory Usage exceeded: </b>" + nGPUMemory + " MB");
		}
		softAssertion.assertEquals(gpuMemFlag, true);

		if (nGPURendered < threshold_GPURendered) {
			logger.info("\nGPU FPS: " + nGPURendered);
			extent.extentLoggerPass("GPU Info", "<b>GPU FPS: </b>" + nGPURendered);
		} else {
			gpuRenFlag = false;
			logger.error("\nGPU FPS: " + nGPURendered);
			extent.extentLoggerFail("GPU Info", "<b>GPU FPS: </b>" + nGPURendered);
		}
		softAssertion.assertEquals(gpuRenFlag, true);

		if (nNetTraffic < threshold_Network) {
			logger.info("\nApp traffic usage: " + (int) nNetTraffic + " MB");
			extent.extentLoggerPass("Traffic Usage", "<b>App traffic usage: </b>" + (int) nNetTraffic + " MB");
		} else {
			trafficFlag = false;
			logger.error("\nApp traffic usage: " + (int) nNetTraffic + " MB");
			extent.extentLoggerFail("Traffic Usage", "<b>App traffic usage: </b>" + (int) nNetTraffic + " MB");
		}

		performaceDetails.add("ConsumpitonScreen for Movies" + "," + timeElapsed.getSeconds() + "," + nativeMemory
				+ " MB," + totalMemory + " MB," + nCpuUSage + "%," + nGPUMemory + " MB," + nGPURendered + ","
				+ nNetTraffic + " MB");

		String timeTaken = Long.toString(timeElapsed.getSeconds());
		String strNativeMemory = Integer.toString(nativeMemory);
		String strTotalMemory = Integer.toString(totalMemory);
		String strCPU = Integer.toString(nCpuUSage);
		String strGPU = Float.toString(nGPUMemory);
		String strGPURendered = Integer.toString(nGPURendered);
		String strTraffic = Integer.toString(nNetTraffic);

		performaceMatrics.put("Time Taken", timeTaken + " Sec");
		performaceMatrics.put("Native Heap Memory", strNativeMemory + " MB");
		performaceMatrics.put("Peak Memory", strTotalMemory + " MB");
		performaceMatrics.put("CPU Usage", strCPU + "%");
		performaceMatrics.put("GPU Usage", strGPU + " MB");
		performaceMatrics.put("GPU FPS", strGPURendered);
		performaceMatrics.put("Traffic Usage", strTraffic + " MB");

		System.out.println(
				"\n---------------------------------------------- Consumption screen for Movies ----------------------------------------------");
		System.out.println(performaceMatrics);
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------");
		clearAllPerformanceMatrics();

		softAssertion.assertEquals(trafficFlag, true);
		softAssertion.assertAll();

		if (batteryInfo.contains("drain")) {
			logger.info("\nApp Battery Info - " + batteryInfo);
			extent.extentLoggerPass("Timer", "<b>App Battery Info - </b>" + batteryInfo);
		} else {
			logger.error("\nApp Battery Info - " + batteryInfo);
			extent.extentLoggerFail("Timer", "<b>App Battery Info - </b>" + batteryInfo);
		}
	}
/**
 * @note this method is used to uninstall existing zee5 app and install Zee5 app from playstore
 * @throws Exception
 */
	public void installZee5AppFromPlayStore() throws Exception {
		extent.HeaderChildNode("Install ZEE5 App from Playstore");
		System.out.println("\nInstall ZEE5 App from Playstore");

		Runtime.getRuntime().exec("adb uninstall com.graymatrix.did");
		logger.info("Uninstalling zee5");
		extent.extentLogger("", "Uninstalling zee5");
		waitTime(3000);

		Runtime.getRuntime().exec("adb shell pm clear -n com.android.vending");
		logger.info("Clearing play store app data");
		extent.extentLogger("", "Clearing play store app data");

		waitTime(3000);
		Runtime.getRuntime().exec("adb shell am start -n com.android.vending/com.android.vending.AssetBrowserActivity");
		logger.info("Launching Play store");
		extent.extentLogger("", "Launching Play store");

		System.out.println("\nInstalling Fresh Zee5 App");
		waitTime(4000);
		click(AMDAppUpgrade.objplaystoreSearch, "Edit field");
		type(AMDAppUpgrade.objplaystoreSearch, "Zee5 \n", "Edit field");
		hideKeyboard();
		verifyElementPresentAndClick(AMDAppUpgrade.objInstallButton, "Install button");
		waitTime(5000);
		waitForElementAndClickIfPresent(AMDAppUpgrade.objOpenButton, 250, "Open CTA");
	}

	public void ListingScreenfromHome() throws Exception {
		extent.HeaderChildNode("Listing screen from Home");
		System.out.println("\n>>> Listing screen from Home");

//String appPackageName = getParameterFromXML("appPackageName");
		String appPackageName = "com.graymatrix.did";

		// Threshold Values declaration
		int threshold_TimeTaken = 4;
		int threshold_NativeMemory = 35;
		int threshold_TotalMemory = 300;
		int threshold_CPU = 120;
		int threshold_GPUMem = 7;
		int threshold_GPURendered = 2000;
		int threshold_Network = 100;
		boolean timeFlag = true, memFlag = true, totalmemFlag = true, cpuFlag = true, gpuMemFlag = true,
				gpuRenFlag = true, trafficFlag = true;

		loginWithEmailID("zeetest34new@test.com", "123456");
		waitForElementDisplayed(AMDHomePage.objZee5Logo, 30);
//	selectTopNavigationTab("Movies");
		verifyElementPresentAndClick(AMDHomePage.objSeeAllFirstRail, "See All");
		Instant startTime = Instant.now();
		logger.info("Instant Start time : " + startTime);

		verifyElementPresent(AMDHomePage.objTitle, "Listing page title");
		verifyElementPresent(AMDHomePage.objBackIcon, "Back Button");

		// #### App Performance MEMORY Usage Info
		ArrayList<String> getMmoryInfo = Memory_UsagePerformanceV2();
		int nativeMemory = Integer.parseInt(getMmoryInfo.get(0).trim());
		int totalMemory = Integer.parseInt(getMmoryInfo.get(1).trim());

		// #### App Performance CPU Usage Info
		String getCPUInfo = cpu_UsagePerformanceV2();
		int nCpuUSage = Integer.parseInt(getCPUInfo);

		// #### App Performance GPU Usage Info
		ArrayList<String> getGPUInfo = GPU_UsagePerformanceV2();
		float nGPUMemory = Float.parseFloat(getGPUInfo.get(0).replace(" MB", "").trim());
		int nGPURendered = Integer.parseInt(getGPUInfo.get(1).replace("Total frames rendered: ", "").trim());

		// #### App Performance Network Traffic Usage Info
		int nNetTraffic = getApp_NetworkTrafficUsageV2(appPackageName);

		// #### App Performance Battery Info
		String batteryInfo = BatteryStats_PerformanceV2();

		Instant endTime = Instant.now();
		logger.info("Instant End time : " + endTime);

		Duration timeElapsed = Duration.between(startTime, endTime);
		extent.extentLogger("Timer", "<b>Time taken to load listing screen(Sec):</b> " + timeElapsed.getSeconds());
		Back(1);

		if (timeElapsed.getSeconds() < threshold_TimeTaken) {
			extent.extentLoggerPass("Timer",
					"<b>Time taken to load listing screen(Sec)</b>: " + timeElapsed.getSeconds());
		} else {
			timeFlag = false;
			logger.info("Time taken to load listing screen(Sec): " + timeElapsed.getSeconds());
			extent.extentLoggerFail("Timer",
					"<b>Time taken to load listing screen(Sec)</b>: " + timeElapsed.getSeconds());
		}
		softAssertion.assertEquals(timeFlag, true);

		if (nativeMemory < threshold_NativeMemory) {
			logger.info("App Native Heap Memory: " + nativeMemory + " MB");
			extent.extentLoggerPass("Memory Info", "<b>App Native Heap Memory: :</b> " + nativeMemory + " MB");
		} else {
			memFlag = false;
			logger.error("App Native Heap Memory: " + nativeMemory + " MB");
			extent.extentLoggerFail("Memory Info", "<b>App Native Heap Memory: </b> " + nativeMemory + " MB");
		}
		softAssertion.assertEquals(memFlag, true);

		if (totalMemory < threshold_TotalMemory) {
			logger.info("App Peak Memory Usage: " + totalMemory + " MB");
			extent.extentLoggerPass("Memory Info", "<b>App Peak Memory Usage:</b> " + totalMemory + " MB");
		} else {
			totalmemFlag = false;
			logger.error("App Peak Memory Usage: " + totalMemory + " MB");
			extent.extentLoggerFail("Memory Info", "<b>App Peak Memory Usage:</b> " + totalMemory + " MB");
		}
		softAssertion.assertEquals(totalmemFlag, true);

		if (nCpuUSage < threshold_CPU) {
			logger.info("CPU Usage : " + nCpuUSage + "%");
			extent.extentLoggerPass("CPU Info", "<b>CPU Usage: </b>" + nCpuUSage + "%");
		} else {
			cpuFlag = false;
			logger.error("CPU Usage: " + nCpuUSage + "%");
			extent.extentLoggerFail("CPU Info", "<b>CPU Usage: </b>" + nCpuUSage + "%");
		}
		softAssertion.assertEquals(cpuFlag, true);

		if (nGPUMemory < threshold_GPUMem) {
			logger.info("\nGPU Memory Usage: " + nGPUMemory + " MB");
			extent.extentLoggerPass("GPU Info", "<b>GPU Memory Usage: </b>" + nGPUMemory + " MB");
		} else {
			gpuMemFlag = false;
			logger.error("\nGPU Memory Usage exceeded: " + nGPUMemory + " MB");
			extent.extentLoggerFail("GPU Info", "<b>GPU Memory Usage exceeded: </b>" + nGPUMemory + " MB");
		}
		softAssertion.assertEquals(gpuMemFlag, true);

		if (nGPURendered < threshold_GPURendered) {
			logger.info("\nGPU FPS: " + nGPURendered);
			extent.extentLoggerPass("GPU Info", "<b>GPU FPS: </b>" + nGPURendered);
		} else {
			gpuRenFlag = false;
			logger.error("\nGPU FPS: " + nGPURendered);
			extent.extentLoggerFail("GPU Info", "<b>GPU FPS: </b>" + nGPURendered);
		}
		softAssertion.assertEquals(gpuRenFlag, true);

		if (nNetTraffic < threshold_Network) {
			logger.info("\nApp traffic usage: " + (int) nNetTraffic + " MB");
			extent.extentLoggerPass("Traffic Usage", "<b>App traffic usage: </b>" + (int) nNetTraffic + " MB");
		} else {
			trafficFlag = false;
			logger.error("\nApp traffic usage: " + (int) nNetTraffic + " MB");
			extent.extentLoggerFail("Traffic Usage", "<b>App traffic usage: </b>" + (int) nNetTraffic + " MB");
		}

		String timeTaken = Long.toString(timeElapsed.getSeconds());
		String strNativeMemory = Integer.toString(nativeMemory);
		String strTotalMemory = Integer.toString(totalMemory);
		String strCPU = Integer.toString(nCpuUSage);
		String strGPU = Float.toString(nGPUMemory);
		String strGPURendered = Integer.toString(nGPURendered);
		String strTraffic = Integer.toString(nNetTraffic);

		performaceMatrics.put("Time Taken", timeTaken + " Sec");
		performaceMatrics.put("Native Heap Memory", strNativeMemory + " MB");
		performaceMatrics.put("Peak Memory", strTotalMemory + " MB");
		performaceMatrics.put("CPU Usage", strCPU + "%");
		performaceMatrics.put("GPU Usage", strGPU + " MB");
		performaceMatrics.put("GPU FPS", strGPURendered);
		performaceMatrics.put("Traffic Usage", strTraffic + " MB");

		System.out.println(
				"\n---------------------------------------------- Listing screen from Home ----------------------------------------------");
		System.out.println(performaceMatrics);
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------");
		clearAllPerformanceMatrics();

		if (batteryInfo.contains("drain")) {
			logger.info("\nApp Battery Info - " + batteryInfo);
			extent.extentLoggerPass("Timer", "<b>App Battery Info - </b>" + batteryInfo);
		} else {
			logger.error("\nApp Battery Info - " + batteryInfo);
			extent.extentLoggerFail("Timer", "<b>App Battery Info - </b>" + batteryInfo);
		}
		performaceDetails
				.add("Load Listing screen" + "," + timeElapsed.getSeconds() + "," + nativeMemory + " MB," + totalMemory
						+ " MB," + nCpuUSage + "%," + nGPUMemory + " MB," + nGPURendered + "," + nNetTraffic + " MB");

		softAssertion.assertEquals(trafficFlag, true);
		softAssertion.assertAll();
	}
/**
 * @note this method is uesed for capturing performance matrix of payment screen
 * @throws Exception
 */
	public void loadPaymentModeSelectionScreen() throws Exception {
		extent.HeaderChildNode("Load payment mode selection screen");
		System.out.println("\n>>> Load payment mode selection screen");

//String appPackageName = getParameterFromXML("appPackageName");
		String appPackageName = "com.graymatrix.did";

		// Threshold Values declaration
		int threshold_TimeTaken = 13;
		int threshold_NativeMemory = 40;
		int threshold_TotalMemory = 300;
		int threshold_CPU = 300;
		int threshold_GPUMem = 7;
		int threshold_GPURendered = 1500;
		int threshold_Network = 400;
		boolean timeFlag = true, memFlag = true, totalmemFlag = true, cpuFlag = true, gpuMemFlag = true,
				gpuRenFlag = true, trafficFlag = true;

		loginWithEmailID("zee5latest@gmail.com", "User@123");
		waitForElementDisplayed(AMDHomePage.objZee5Logo, 30);
		verifyElementPresentAndClick(AMDHomePage.objBuyPlanCTA, "Buy Plan");
		verifyElementPresentAndClick(AMDSubscibeScreen.objContinueBtn, "Continue Button");

		Instant startTime = Instant.now();
		logger.info("Instant Start time : " + startTime);

		// #### App Performance MEMORY Usage Info
		ArrayList<String> getMmoryInfo = Memory_UsagePerformanceV2();
		int nativeMemory = Integer.parseInt(getMmoryInfo.get(0).trim());
		int totalMemory = Integer.parseInt(getMmoryInfo.get(1).trim());

		// #### App Performance CPU Usage Info
		String getCPUInfo = cpu_UsagePerformanceV2();
		int nCpuUSage = Integer.parseInt(getCPUInfo);

		// #### App Performance GPU Usage Info
		ArrayList<String> getGPUInfo = GPU_UsagePerformanceV2();
		float nGPUMemory = Float.parseFloat(getGPUInfo.get(0).replace(" MB", "").trim());
		int nGPURendered = Integer.parseInt(getGPUInfo.get(1).replace("Total frames rendered: ", "").trim());

		// #### App Performance Network Traffic Usage Info
		int nNetTraffic = getApp_NetworkTrafficUsageV2(appPackageName);

		// #### App Performance Battery Info
		String batteryInfo = BatteryStats_PerformanceV2();

		verifyElementPresent(AMDSubscibeScreen.objMakePaymentScreen, "Payment Screen");
		Instant endTime = Instant.now();
		logger.info("Instant End time : " + endTime);

		Duration timeElapsed = Duration.between(startTime, endTime);
		extent.extentLogger("Timer",
				"<b>Time taken to load payment mode selection screen (Sec):</b> " + timeElapsed.getSeconds());

		if (timeElapsed.getSeconds() < threshold_TimeTaken) {
			extent.extentLoggerPass("Timer",
					"<b>Time taken to load payment mode selection screen(Sec)</b>: " + timeElapsed.getSeconds());
		} else {
			timeFlag = false;
			logger.info("Time taken to load payment mode selection screen(Sec): " + timeElapsed.getSeconds());
			extent.extentLoggerFail("Timer",
					"<b>Time taken to load payment mode selection screen(Sec)</b>: " + timeElapsed.getSeconds());
		}
		softAssertion.assertEquals(timeFlag, true);

		if (nativeMemory < threshold_NativeMemory) {
			logger.info("App Native Heap Memory: " + nativeMemory + " MB");
			extent.extentLoggerPass("Memory Info", "<b>App Native Heap Memory: :</b> " + nativeMemory + " MB");
		} else {
			memFlag = false;
			logger.error("App Native Heap Memory: " + nativeMemory + " MB");
			extent.extentLoggerFail("Memory Info", "<b>App Native Heap Memory: </b> " + nativeMemory + " MB");
		}
		softAssertion.assertEquals(memFlag, true);

		if (totalMemory < threshold_TotalMemory) {
			logger.info("App Peak Memory Usage: " + totalMemory + " MB");
			extent.extentLoggerPass("Memory Info", "<b>App Peak Memory Usage:</b> " + totalMemory + " MB");
		} else {
			totalmemFlag = false;
			logger.error("App Peak Memory Usage: " + totalMemory + " MB");
			extent.extentLoggerFail("Memory Info", "<b>App Peak Memory Usage:</b> " + totalMemory + " MB");
		}
		softAssertion.assertEquals(totalmemFlag, true);

		if (nCpuUSage < threshold_CPU) {
			logger.info("CPU Usage : " + nCpuUSage + "%");
			extent.extentLoggerPass("CPU Info", "<b>CPU Usage: </b>" + nCpuUSage + "%");
		} else {
			cpuFlag = false;
			logger.error("CPU Usage: " + nCpuUSage + "%");
			extent.extentLoggerFail("CPU Info", "<b>CPU Usage: </b>" + nCpuUSage + "%");
		}
		softAssertion.assertEquals(cpuFlag, true);

		if (nGPUMemory < threshold_GPUMem) {
			logger.info("\nGPU Memory Usage: " + nGPUMemory + " MB");
			extent.extentLoggerPass("GPU Info", "<b>GPU Memory Usage: </b>" + nGPUMemory + " MB");
		} else {
			gpuMemFlag = false;
			logger.error("\nGPU Memory Usage exceeded: " + nGPUMemory + " MB");
			extent.extentLoggerFail("GPU Info", "<b>GPU Memory Usage exceeded: </b>" + nGPUMemory + " MB");
		}
		softAssertion.assertEquals(gpuMemFlag, true);

		if (nGPURendered < threshold_GPURendered) {
			logger.info("\nGPU FPS: " + nGPURendered);
			extent.extentLoggerPass("GPU Info", "<b>GPU FPS: </b>" + nGPURendered);
		} else {
			gpuRenFlag = false;
			logger.error("\nGPU FPS: " + nGPURendered);
			extent.extentLoggerFail("GPU Info", "<b>GPU FPS: </b>" + nGPURendered);
		}
		softAssertion.assertEquals(gpuRenFlag, true);

		if (nNetTraffic < threshold_Network) {
			logger.info("\nApp traffic usage: " + (int) nNetTraffic + " MB");
			extent.extentLoggerPass("Traffic Usage", "<b>App traffic usage: </b>" + (int) nNetTraffic + " MB");
		} else {
			trafficFlag = false;
			logger.error("\nApp traffic usage: " + (int) nNetTraffic + " MB");
			extent.extentLoggerFail("Traffic Usage", "<b>App traffic usage: </b>" + (int) nNetTraffic + " MB");
		}

		performaceDetails
				.add("Load Payment screen" + "," + timeElapsed.getSeconds() + "," + nativeMemory + " MB," + totalMemory
						+ " MB," + nCpuUSage + "%," + nGPUMemory + " MB," + nGPURendered + "," + nNetTraffic + " MB");

		String timeTaken = Long.toString(timeElapsed.getSeconds());
		String strNativeMemory = Integer.toString(nativeMemory);
		String strTotalMemory = Integer.toString(totalMemory);
		String strCPU = Integer.toString(nCpuUSage);
		String strGPU = Float.toString(nGPUMemory);
		String strGPURendered = Integer.toString(nGPURendered);
		String strTraffic = Integer.toString(nNetTraffic);

		performaceMatrics.put("Time Taken", timeTaken + " Sec");
		performaceMatrics.put("Native Heap Memory", strNativeMemory + " MB");
		performaceMatrics.put("Peak Memory", strTotalMemory + " MB");
		performaceMatrics.put("CPU Usage", strCPU + "%");
		performaceMatrics.put("GPU Usage", strGPU + " MB");
		performaceMatrics.put("GPU FPS", strGPURendered);
		performaceMatrics.put("Traffic Usage", strTraffic + " MB");

		System.out.println(
				"\n---------------------------------------------- Load Payment mode selection screen ----------------------------------------------");
		System.out.println(performaceMatrics);
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------");
		clearAllPerformanceMatrics();

		softAssertion.assertEquals(trafficFlag, true);
		softAssertion.assertAll();

		if (batteryInfo.contains("drain")) {
			logger.info("\nApp Battery Info - " + batteryInfo);
			extent.extentLoggerPass("Timer", "<b>App Battery Info - </b>" + batteryInfo);
		} else {
			logger.error("\nApp Battery Info - " + batteryInfo);
			extent.extentLoggerFail("Timer", "<b>App Battery Info - </b>" + batteryInfo);
		}
	}
/**
 * @note This method is used to validate the eduaraa portal 
 * @param usertype
 * @throws Exception
 */
	public void eduauraaPortalValidation(String usertype) throws Exception {
		extent.HeaderChildNode("Validation of Eduauraa portal");
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			selectTopNavigationTab("Eduauraa");
			waitForElementAndClickIfPresent(AMDHomePage.objPlayBtn, 10, "Eduauraa content");
			if (verifyElementDisplayed(AMDConsumptionScreen.objclaimOffercta)) {
				click(AMDConsumptionScreen.objclaimOffercta, "Claim offer CTA");
				verifyElementExist(AMDConsumptionScreen.objCongratulationTextOnplayer,
						"Congartulation text message on player");
				verifyElementPresentAndClick(AMDConsumptionScreen.objGotoEduauraaOnPlayer, "Go to Eduauraa");
			} else {
				click(AMDConsumptionScreen.objGoToEduauraaCTA, "Go to Eduauraa");
			}
			click(AMDConsumptionScreen.objconfirmbutton, "confirm");
			waitTime(5000);
			verifyElementExist(AMDConsumptionScreen.objWelcomeToEduauraaPage, "Welcome to Eduauraa page");
			verifyElementExist(AMDConsumptionScreen.objNamefield, "Name field in Eduauraa page");
			verifyElementExist(AMDConsumptionScreen.objMobileNo, "Mobile number field in Eduauraa page");
			verifyElementExist(AMDConsumptionScreen.objEmailfield, "Email field in Eduauraa page");
			boolean value = findElement(AMDConsumptionScreen.objContinueButton).isEnabled();
			if (value == false) {
				logger.info("By default Continue button is disabled");
				extentLoggerPass("Myprofile", "By default Continue button is disabled");
			} else {
				logger.error("By default Continue button is Not disabled");
				extentLoggerFail("Myprofile", "By default Continue button is Not disabled");
			}
			click(AMDConsumptionScreen.objMobileNo, "Mobile number");
			type(AMDConsumptionScreen.objMobileNo, "9880653452", "Mobile number");
			hideKeyboard();
			waitTime(5000);
			if (verifyElementDisplayed(AMDConsumptionScreen.objContinueEnabled)) {
				logger.info("Continue button is enabled after filling the all fields");
				extentLoggerPass("Myprofile", "Continue button is enabled after filling the all fields");
			} else {
				logger.error("Continue button is Not enabled after filling the all fields");
				extentLoggerFail("Myprofile", "Continue button is Not enabled after filling the all fields");
			}
			waitTime(3000);
			click(AMDConsumptionScreen.objContinueButton, "Continue button");
			verifyElementExist(AMDConsumptionScreen.objChooseCourseType, "Choose your course type page");
			verifyElementExist(AMDConsumptionScreen.objSelectboard, "Select Board");
			verifyElementExist(AMDConsumptionScreen.objgrade, "Select Grade");
			verifyElementExist(AMDConsumptionScreen.objLang, "Select Language");
			verifyElementExist(AMDConsumptionScreen.objtemrsAndprivacypolicy, "Terms and Privacy policy links");
			verifyElementExist(AMDConsumptionScreen.objContinueButton, "Continue button on Choose your course type");
		}
	}
/**
 * @note This method is used to login into eduauraa portal
 * @param LoginMethod
 * @throws Exception
 */
	public void zeeApplicasterLoginForEduauraaPortal(String LoginMethod) throws Exception {
		System.out.println("\nLogin to the App");

		switch (LoginMethod) {
		case "Guest":
			extent.HeaderChildNode("Logged in as <b>Guest</b> User");

			extent.extentLogger("Accessing the application as Guest user",
					"Accessing the application as <b>Guest</b> user");
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as NonSubscribed User");

			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");

			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");

			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User");

			String SubscribedUsername = getParameterFromXML("SubscribedUserNameForEduauraa");
			String SubscribedPassword = getParameterFromXML("SubscribedPasswordForEduauraa");

			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");

			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SubscribedUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;
		}
	}

//============CONVIVO======================
/**
 * @note This method is used for conviva verification
 * @param userType
 * @throws Exception
 */
	public void convivaVerification(String userType) throws Exception {
		String firstContentID = "0-0-103559";
		String firstContentName = "Robin Hood Forever Enemies";
		String firstContentMetaInSearch = "English";
		ArrayList<String> firstContentdata = new ArrayList<String>();
		firstContentdata.add(firstContentID);
		firstContentdata.add(firstContentName);
		firstContentdata.add(firstContentMetaInSearch);
		// Initial Conviva setup
		WebDriver driverForWeb = initialSetUpForConviva();
		ArrayList<Integer> playerTapDetails = setFilterForConviva(driverForWeb, firstContentdata);
		// TC1 Attempts, TC2 Concurrent Plays, TC4 VST, TC5 Avg Percent Complete, TC6
		// Pause video, TC11 Average Frame Rate
		verifyConvivaAttemptsConcurrentPlaysVST(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC9 T37 exitBeforeVideoStarts
		verifyConvivaExitBeforeVideoStarts(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC13 Click on progress bar
		verifyConvivaClickOnProgressBar(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC14 Drag on progress bar
		verifyConvivaDragOnProgressBar(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC15 Forward on progress bar
		verifyConvivaForwardOnProgressBar(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC16 Background
		verifyConvivaAppPutToBackground(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC17 Device sleep
		verifyConvivaPhoneLockUnlock(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC19 Landscape
		verifyConvivaLandscapePlayer(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC20 Session Close
		verifyConvivaSessionClose(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC21 Session End
		verifyConvivaOnEndOfSession(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC27 Session after Midroll
		verifyConvivaAfterMidRoll(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC28 Session after Postroll
		verifyConvivaAfterPostRoll(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC29 Seek past midroll
		verifyConvivaAfterMidRollThroughSeek(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC30 Background during Ad Play
		verifyConvivaOnBackgroundDuringAdPlay(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC31 Ad Click
		verifyConvivaOnAdClick(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC32 Video Replay
		verifyConvivaOnContentReplay(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC33 Multiple video play
		verifyConvivaOnMultipleContentPlay(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC34 End of stream to next playlist item
		String episodeContentID = "0-1-manual-65mhjdvejur0";
		String episodeName = "Rhea and Siddharth Evade Arrest";
		String episodeNameInSearch = "Kumkum Bhagya - Episode 1900 - Jul 19, 2021";
		String episodeMeta = "Hindi";
		String audioLanguage = "Hindi";
		String category = "TV Show";
		String contentType = "episode";
		String episodeNumber = "Episode 1900";
		String genre = "Drama";
		String rootID = "1900";
		String show = "Kumkum Bhagya";
		String contentAccessType = "advertisement_downloadable";
		ArrayList<String> episodeContentdata = new ArrayList<String>();
		episodeContentdata.add(episodeContentID);
		episodeContentdata.add(episodeName);
		episodeContentdata.add(episodeNameInSearch);
		episodeContentdata.add(episodeMeta);
		episodeContentdata.add(audioLanguage);
		episodeContentdata.add(category);
		episodeContentdata.add(contentType);
		episodeContentdata.add(episodeNumber);
		episodeContentdata.add(genre);
		episodeContentdata.add(rootID);
		episodeContentdata.add(show);
		episodeContentdata.add(contentAccessType);
		verifyConvivaOnUpnextContentPlay(userType, driverForWeb, episodeContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(episodeContentID, 1, "");
		// TC35 Skip to next playlist item
		verifyConvivaOnSkipContentAndPlayAnother(userType, driverForWeb, episodeContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(episodeContentID, 1, "");
		// TC42 CDN, TC43 Meta data in session, TC45 Device Tags, TC46 Required Tags,
		// TC47 Custom Tags
		verifyConvivaMetaDataAndCDN(userType, driverForWeb, episodeContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(episodeContentID, 1, "");
	}
/**
 * @note This method initialises the driver for conviva analytics tool
 * @return
 * @throws Exception
 */
	public WebDriver initialSetUpForConviva() throws Exception {
		extent.HeaderChildNode("Conviva launch, login and initial setup");
		System.out.println("------------------- Conviva launch, login and initial setup -------------------");
		extent.extentLogger("", "<b>---------- Launch Conviva ----------</b>");
		String phonePublicIP = getPhonePublicIP();
//		System.setProperty("webdriver.chrome.driver",
//				"C:\\Users\\User\\.m2\\repository\\webdriver\\chromedriver\\win32\\90.0.4430.24\\chromedriver.exe");
//		WebDriverManager.chromedriver().version(DriverInstance.getDriverVersion()).setup();
        WebDriverManager.chromedriver().cachePath("Drivers").setup();
		WebDriver driverForWeb = new ChromeDriver();
		driverForWeb.navigate().to("https://pulse.conviva.com/");
		logger.info("Launched Conviva website on Chrome");
		extent.extentLogger("", "Launched Conviva website on Chrome");
		driverForWeb.manage().window().maximize();
		logger.info("Maximized Chrome window");
		extent.extentLogger("", "Maximized Chrome window");
		waitTime(3000);
		extent.extentLogger("", "<b>---------- Login to Conviva ----------</b>");
		String userID = "murali.appadi@zee.esselgroup.com";
		String userPassword = "Ch@ng3m3!!";
		driverForWeb.findElement(PWAConvivaPage.objUserNameField).sendKeys(userID);
		driverForWeb.findElement(PWAConvivaPage.objNextButton).click();
		logger.info("Entered User ID : " + userID);
		extent.extentLogger("", "Entered User ID : " + userID);
		waitTime(5000);
		driverForWeb.findElement(PWAConvivaPage.objPasswordField).sendKeys(userPassword);
		logger.info("Entered Password : " + userPassword);
		extent.extentLogger("", "Entered Password : " + userPassword);
		driverForWeb.findElement(PWAConvivaPage.objSignInButton).click();
		logger.info("Logged in to Conviva");
		extent.extentLogger("", "Logged in to Conviva");
		waitTime(12000);
		extent.extentLogger("", "<b>---------- Select Admin User ----------</b>");
		driverForWeb.findElement(PWAConvivaPage.objUserTypeDropdown).click();
		logger.info("Clicked User dropdown");
		extent.extentLogger("", "Clicked User dropdown");
		waitTime(3000);
		driverForWeb.findElement(PWAConvivaPage.objAdminUser).click();
		logger.info("Clicked Admin user from dropdown");
		extent.extentLogger("", "Clicked Admin user from dropdown");
		waitTime(7000);
		extent.extentLogger("",
				"<b>---------- Register IP Address of Test Device for Device Validation ----------</b>");
		driverForWeb.get("https://pulse.conviva.com/device_validation/manage");
		logger.info("Opened https://pulse.conviva.com/device_validation/manage");
		extent.extentLogger("", "Opened https://pulse.conviva.com/device_validation/manage");
		waitTime(3000);
		JavascriptExecutor js = (JavascriptExecutor) driverForWeb;
		js.executeScript("window.scrollBy(0,300)", "");
		driverForWeb.findElement(PWAConvivaPage.objManageIPSortButton("For_Automation")).click();
		logger.info("Clicked on 'For_Automation' field in Manage IPs");
		extent.extentLogger("", "Clicked on 'For_Automation' field in Manage IPs");
		waitTime(2000);
		driverForWeb.findElement(PWAConvivaPage.objEditIP("For_Automation")).click();
		logger.info("Clicked on 'For_Automation' Edit button");
		extent.extentLogger("", "Clicked on 'For_Automation' Edit button");
		driverForWeb.findElement(PWAConvivaPage.objIPAddressField).clear();
		logger.info("Cleared IP Address field");
		extent.extentLogger("", "Cleared IP Address field");
		waitTime(3000);
		driverForWeb.findElement(PWAConvivaPage.objIPAddressField).sendKeys(phonePublicIP.trim());
		logger.info("Entered device public address : " + phonePublicIP.trim());
		extent.extentLogger("", "Entered device public address : " + phonePublicIP.trim());
		driverForWeb.findElement(PWAConvivaPage.objUpdateButton).click();
		logger.info("Clicked on Update button");
		extent.extentLogger("", "Clicked on Update button");
		return driverForWeb;
	}
/**
 * @noate  This method is used for fetching filter in conviva dashboard
 * @param driverForWeb
 * @param contentdata
 * @return
 * @throws Exception
 */
	public ArrayList<Integer> setFilterForConviva(WebDriver driverForWeb, ArrayList<String> contentdata)
			throws Exception {
		ArrayList<Integer> playerTapDetails = new ArrayList<Integer>();
		extent.extentLogger("", "<b>---------- Fetch Filter rules for Real Time testing----------</b>");
		String contentID = contentdata.get(0);
		String contentName = contentdata.get(1);
		String contentMetaInSearch = contentdata.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		int playerHeight = 0, playerWidth = 0, heightOffset = 0, widthOffset = 0, requiredHeight = 0, requiredWidth = 0,
				playerX = 0, playerY = 0;
		try {
			WebElement player = getDriver().findElement(AMDPlayerScreen.objplayer);
			playerHeight = player.getSize().getHeight();
			playerWidth = player.getSize().getWidth();
			heightOffset = playerHeight / 5;
			widthOffset = playerWidth / 5;
			playerX = player.getLocation().getX();
			playerY = player.getLocation().getY();
			requiredHeight = playerY + heightOffset;
			requiredWidth = playerX + widthOffset;
			System.out.println(requiredHeight);
			System.out.println(requiredWidth);
		} catch (Exception e) {
		}
		playerTapDetails.add(requiredHeight);
		playerTapDetails.add(requiredWidth);
		String url = "https://pulse.conviva.com/app/pulse/device_validation/?live=true";
		driverForWeb.get(url);
		logger.info("Opened : " + url);
		extent.extentLogger("", "Opened : " + url);
		waitTime(5000);
		WebElement frameElement = driverForWeb.findElement(PWAConvivaPage.objIframePulse4);
		driverForWeb.switchTo().frame(frameElement);
		driverForWeb.findElement(PWAConvivaPage.objDeviceValidationFilter).click();
		logger.info("Clicked on device validation dropdown");
		extent.extentLogger("", "Clicked on device validation dropdown");
		waitTime(5000);
		driverForWeb.findElement(PWAConvivaPage.objDeviceValidation("For_Automation")).click();
		logger.info("Clicked on 'For_Automation' from dropdown");
		extent.extentLogger("", "Clicked on 'For_Automation' from dropdown");
		boolean foundEntry = false;
		ArrayList<String> rulesField = new ArrayList<String>();
		ArrayList<String> rulesValue = new ArrayList<String>();
		if (clickElementInRefreshingConvivaPage(driverForWeb, PWAConvivaPage.objMonitorSessionID(contentID),
				"Monitor Session ID for the played content")) {
			ArrayList<String> filterValues = new ArrayList<String>();
			String browserVersion = getTextFromRefreshingConvivaPage(driverForWeb, PWAConvivaPage.objBrowserVersion,
					"Rule Browser Version");
			String deviceOperatingSystem = getTextFromRefreshingConvivaPage(driverForWeb, PWAConvivaPage.objDeviceOS,
					"Rule Device Operating System");
			String deviceHardwareType = getTextFromRefreshingConvivaPage(driverForWeb,
					PWAConvivaPage.objDeviceHardwareType, "Rule Device Hardware Type");
			String assetName = getTextFromRefreshingConvivaPage(driverForWeb, PWAConvivaPage.objAssetName,
					"Rule Asset Name");

			rulesField.add("Browser Version");
			rulesValue.add(browserVersion);

			rulesField.add("Device Operating System");
			rulesValue.add(deviceOperatingSystem);

			rulesField.add("Device Hardware Type");
			rulesValue.add(deviceHardwareType);

			rulesField.add("Asset Name");
			rulesValue.add(assetName);

		}
		extent.extentLogger("", "<b>---------- Set Filter rules for Real Time testing----------</b>");
		driverForWeb.get("https://pulse.conviva.com/app/pulse/filters");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/filters");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/filters");
		Thread.sleep(5000);
		frameElement = driverForWeb.findElement(PWAConvivaPage.objIframePulse4);
		driverForWeb.switchTo().frame(frameElement);
		driverForWeb.findElement(PWAConvivaPage.objSearchFilterField).click();
		logger.info("Clicked on Filter Search Field");
		extent.extentLogger("", "Clicked on Filter Search Field");
		driverForWeb.findElement(PWAConvivaPage.objSearchFilterField).sendKeys("For_Automation");
		logger.info("Typed 'For_Automation' in search edit field");
		extent.extentLogger("", "Typed 'For_Automation' in search edit field");
		driverForWeb.findElement(PWAConvivaPage.objFiltersSortButton).click();
		logger.info("Clicked on Filter Sort button");
		extent.extentLogger("", "Clicked on Filter Sort button");
		driverForWeb.findElement(PWAConvivaPage.objFiltersEditButton).click();
		logger.info("Clicked on Edit button");
		extent.extentLogger("", "Clicked on Edit button");
		waitTime(5000);
		int fields = driverForWeb.findElements(PWAConvivaPage.objFilterRulesFieldsCount).size();
		int deleteButtons = driverForWeb.findElements(PWAConvivaPage.objDeleteField).size();
		for (int i = 0; i < deleteButtons; i++) {
			driverForWeb.findElement(PWAConvivaPage.objDeleteField).click();
			waitTime(2000);
		}
		logger.info("Deleted old Filter Rules");
		extent.extentLogger("", "Deleted old Filter Rules");
		int endCount = rulesField.size();
		for (int i = 1; i <= endCount; i++) {
			String rule = rulesField.get(i - 1);
			String value = rulesValue.get(i - 1);
			driverForWeb.findElement(PWAConvivaPage.objRulesSelectField(i)).click();
			waitTime(1000);
			driverForWeb.findElement(PWAConvivaPage.objRulesSelectField(i, rule)).click();
			logger.info("Clicked on Rule " + rule);
			extent.extentLogger("", "Clicked on Rule " + rule);
			waitTime(1000);
			driverForWeb.findElement(PWAConvivaPage.objRulesValueField(i)).click();
			waitTime(1000);
			driverForWeb.findElement(PWAConvivaPage.objRulesValueField(i)).clear();
			waitTime(1000);
			driverForWeb.findElement(PWAConvivaPage.objRulesValueField(i)).sendKeys(value);
			waitTime(1000);
			logger.info("Typed Value " + value);
			extent.extentLogger("", "Typed Value " + value);
			driverForWeb.findElement(PWAConvivaPage.objAndButton).click();
			waitTime(1000);
			logger.info("Clicked on AND button");
			extent.extentLogger("", "Clicked on AND button");

		}
		driverForWeb.findElement(PWAConvivaPage.objSaveFilterButton).click();
		return playerTapDetails;
	}
/**
 * @note This method is used to check Attempts, Concurrent Plays, VST, Average Frame Rate
 */
	public void verifyConvivaAttemptsConcurrentPlaysVST(String userType, WebDriver webdriver,
			ArrayList<String> contentData, ArrayList<Integer> playerTapDetails) throws Exception {
		// From front end
		extent.HeaderChildNode("TC 1, 2, 4, 11 : Attempts, Concurrent Plays, VST, Average Frame Rate");
		System.out.println("------------------- TC 1 : Attempts metric on Pulse -------------------");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		Back(1);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		Date startDate = new Date();
		Date endDate = new Date();
		ArrayList<Date> startAndEndTime = new ArrayList<Date>();
		startAndEndTime = getPlayerStartEndTime(startDate, endDate, playerTapDetails);
		startDate = startAndEndTime.get(0);
		endDate = startAndEndTime.get(1);
		ArrayList<Integer> vst = getDateDifference(startDate, endDate);
		logger.info("VST from app : " + vst.get(0) + "min, " + vst.get(1) + "sec, " + vst.get(2) + "millisec");
		extent.extentLogger("",
				"VST from app : " + vst.get(0) + "min, " + vst.get(1) + "sec, " + vst.get(2) + "millisec");
		int vstMilliSecApp = vst.get(0) * 60 * 1000 + vst.get(1) * 1000 + vst.get(2);
		logger.info("VST calculated in millisecs : " + vstMilliSecApp);
		extent.extentLogger("", "VST calculated in millisecs : " + vstMilliSecApp);
		// From Conviva
		webdriver.get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		boolean needWait = true;
		String attempts = "";
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				attempts = webdriver.findElement(PWAConvivaPage.objAttempts).getAttribute("innerText");
				if (Character.isDigit(attempts.charAt(0))) {
					if (attempts.trim().equals("0"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (attempts.trim().equals("0") || attempts.equals("")) {
			extent.extentLoggerFail("", "Attempts is displayed as " + attempts);
			logger.error("Attempts is displayed as " + attempts);
		} else if (attempts.trim().equals("1")) {
			extent.extentLogger("", "Attempts is displayed as " + attempts + ", expected behavior");
			logger.info("Attempts is displayed as " + attempts + ", expected behavior");
		} else {
			extent.extentLogger("", "Attempts is displayed as " + attempts);
			logger.info("Attempts is displayed as " + attempts);
		}
		String concurrentPlays = "";
		try {
			concurrentPlays = webdriver.findElement(PWAConvivaPage.objConcurrentPlays).getAttribute("innerText");
		} catch (Exception e) {
		}
		if (concurrentPlays.trim().equals("0") || concurrentPlays.equals("")) {
			extent.extentLoggerFail("", "Concurrent Plays is displayed as " + concurrentPlays);
			logger.error("Concurrent Plays is displayed as " + concurrentPlays);
		} else if (concurrentPlays.trim().equals("1")) {
			extent.extentLogger("", "Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior");
			logger.info("Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior");
		} else {
			extent.extentLogger("", "Concurrent Plays is displayed as " + concurrentPlays);
			logger.info("Concurrent Plays is displayed as " + concurrentPlays);
		}
		String avgFrameRatePerSec = "";
		try {
			avgFrameRatePerSec = webdriver.findElement(PWAConvivaPage.objAverageFrameRate).getAttribute("innerText");
		} catch (Exception e) {
		}
		extent.extentLogger("", "Average Frame Rate is displayed as " + avgFrameRatePerSec);
		logger.info("Average Frame Rate is displayed as " + avgFrameRatePerSec);
		String avgFrameRatePerSecTemp = avgFrameRatePerSec.replace(" fps", "");
		float avgFrameRatePerSecFloat = Float.parseFloat(avgFrameRatePerSecTemp);
		if (avgFrameRatePerSecFloat < 24.0 && avgFrameRatePerSecFloat > 60.0) {
			extent.extentLoggerFail("", "Average Frame Rate is not maintained within range 24 fps to 60 fps");
			logger.error("Average Frame Rate is not maintained within range 24 fps to 60 fps");
		} else {
			extent.extentLogger("", "Average Frame Rate is maintained within range 24 fps to 60 fps");
			logger.info("Average Frame Rate is maintained within range 24 fps to 60 fps");
		}
		waitTime(5000);
		screencapture(webdriver);
		String vstConviva = "", temp = "", tempSec = "", tempMilliSec = "", tempPreviousIterationString = "";
		int tempVST = 0, tempPreviousIteration = 0;
		for (int i = 0; i < 50; i++) {
			try {
				vstConviva = webdriver.findElement(PWAConvivaPage.objVideoStartupTime).getAttribute("title");
				temp = vstConviva.replace(" sec", "").trim();
				tempSec = temp.split("\\.")[0];
				tempMilliSec = temp.split("\\.")[1];
				tempVST = (Integer.valueOf(tempSec) * 1000) + Integer.valueOf(tempMilliSec);
				if (tempVST > tempPreviousIteration) {
					tempPreviousIteration = tempVST;
					tempPreviousIterationString = vstConviva;
				}
				waitTime(1000);
			} catch (Exception e) {
			}
		}

		logger.info("Conviva VST is displayed as " + tempPreviousIterationString + " sec");
		extent.extentLogger("", "Conviva VST is displayed as " + tempPreviousIterationString + " sec");
		int vstMilliSecCon = tempPreviousIteration;
		logger.info("Conviva VST calculated in millisecs : " + vstMilliSecCon);
		extent.extentLogger("", "Conviva VST calculated in millisecs : " + vstMilliSecCon);
		if (Integer.valueOf(vstMilliSecCon).compareTo(vstMilliSecApp) < 5000) {
			logger.info("Calculated VST and Conviva VST have difference below 5 seconds");
			extent.extentLogger("", "Calculated VST and Conviva VST have difference below 5 seconds");
		} else {
			logger.error("Calculated VST and Conviva VST have difference above 5 seconds");
			extent.extentLoggerFail("", "Calculated VST and Conviva VST have difference above 5 seconds");
		}
		extent.HeaderChildNode("TC 5 : Average % Complete");
		String url = "https://pulse.conviva.com/app/pulse/device_validation/?live=true";
		webdriver.get(url);
		logger.info("Opened : " + url);
		extent.extentLogger("", "Opened : " + url);
		waitTime(5000);
		WebElement frameElement = webdriver.findElement(PWAConvivaPage.objIframePulse4);
		webdriver.switchTo().frame(frameElement);
		webdriver.findElement(PWAConvivaPage.objDeviceValidationFilter).click();
		logger.info("Clicked on device validation dropdown");
		extent.extentLogger("", "Clicked on device validation dropdown");
		waitTime(5000);
		webdriver.findElement(PWAConvivaPage.objDeviceValidation("For_Automation")).click();
		logger.info("Clicked on 'For_Automation' from dropdown");
		extent.extentLogger("", "Clicked on 'For_Automation' from dropdown");
		boolean foundEntry = false;
		ArrayList<String> rulesField = new ArrayList<String>();
		ArrayList<String> rulesValue = new ArrayList<String>();
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		TouchAction act = new TouchAction(getDriver());
		if (clickElementInRefreshingConvivaPage(webdriver, PWAConvivaPage.objMonitorSessionID(contentID),
				"Monitor Session ID for the played content")) {
			boolean perCompChanged = false;
			String percentCompleteBefore = getTextFromRefreshingConvivaPage(webdriver,
					PWAConvivaPage.objAvgPercentageComplete, "Average % Complete");
			act.press(PointOption.point(x, y)).release().perform();
			forwardRewindPlayer("forward");
			waitTime(3000);
			forwardRewindPlayer("forward");
			waitTime(3000);
			forwardRewindPlayer("forward");
			waitTime(3000);
			logger.info("Wait time added");
			extent.extentLogger("", "Wait time added");
			for (int i = 0; i < 50; i++) {
				String percentCompleteAfter = getTextFromRefreshingConvivaPage(webdriver,
						PWAConvivaPage.objAvgPercentageComplete, "Average % Complete");
				if (!percentCompleteAfter.equals(percentCompleteBefore)) {
					perCompChanged = true;
					break;
				} else
					waitTime(1000);
			}
			if (perCompChanged) {
				logger.info("Average % Complete metric should increase has passed");
				extent.extentLogger("", "Average % Complete metric should increase has passed");
			} else {
				logger.info("Average % Complete metric should increase has failed");
				extent.extentLogger("", "Average % Complete metric should increase has failed");
			}
		}
		extent.HeaderChildNode("TC 6 : Monitoring session for Paused Video");
		act.press(PointOption.point(x, y)).release().perform();
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		webdriver.navigate().back();
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		frameElement = webdriver.findElement(PWAConvivaPage.objIframePulse4);
		webdriver.switchTo().frame(frameElement);
		String playing = getTextFromRefreshingConvivaPage(webdriver,
				PWAConvivaPage.objMonitorSessionPlayingContent(contentID), "Content log");
		if (playing.equals("Playing")) {
			logger.info("Session is maintained for Paused content in Device Validation page");
			extent.extentLogger("", "Session is maintained for Paused content in Device Validation page");
		} else {
			logger.error("Session is not maintained for Paused content in Device Validation page");
			extent.extentLoggerFail("", "Session is not maintained for Paused content in Device Validation page");
		}
	}
/**
 * @note This method is used to verify Monitoring Exit before video start
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	public void verifyConvivaExitBeforeVideoStarts(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 9, TC37 : Monitoring Exit before video start");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitTime(2000);
		Back(1);
		logger.info("Navigated back to exit play");
		String url = "https://pulse.conviva.com/app/pulse/device_validation/?live=true";
		webdriver.get(url);
		logger.info("Opened : " + url);
		extent.extentLogger("", "Opened : " + url);
		waitTime(5000);
		WebElement frameElement = webdriver.findElement(PWAConvivaPage.objIframePulse4);
		webdriver.switchTo().frame(frameElement);
		webdriver.findElement(PWAConvivaPage.objDeviceValidationFilter).click();
		logger.info("Clicked on device validation dropdown");
		extent.extentLogger("", "Clicked on device validation dropdown");
		waitTime(5000);
		webdriver.findElement(PWAConvivaPage.objDeviceValidation("For_Automation")).click();
		logger.info("Clicked on 'For_Automation' from dropdown");
		extent.extentLogger("", "Clicked on 'For_Automation' from dropdown");
		if (findElementInRefreshingConvivaPage(webdriver,
				PWAConvivaPage.objMonitorSessionIDExitBeforeVideoStart(contentName), "Exit Before Video Starts log")) {
			logger.info("Session is logged when content is exit before start");
			extent.extentLogger("", "Session is logged when content is exit before start");
		} else {
			logger.error("Session is not logged when content is exit before start");
			extent.extentLoggerFail("", "Session is not logged when content is exit before start");
		}
	}
/**
 * @note This method is used to Monitoring real time after clicking on Progress bar
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	@SuppressWarnings({ "unused", "rawtypes" })
	public void verifyConvivaClickOnProgressBar(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 13 : Monitoring real time after clicking on Progress bar");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		TouchAction act = new TouchAction(getDriver());
		act.press(PointOption.point(x, y)).release().perform();
		clickOnProgressBar(40);
		waitForAdToFinishInAmd();
		Date startDate = new Date();
		Date endDate = new Date();
		ArrayList<Date> startAndEndTime = new ArrayList<Date>();
		startAndEndTime = getPlayerStartEndTime(startDate, endDate, playerTapDetails);
		startDate = startAndEndTime.get(0);
		endDate = startAndEndTime.get(1);
		ArrayList<Integer> vst = getDateDifference(startDate, endDate);
		logger.info("VRT from app : " + vst.get(0) + "min, " + vst.get(1) + "sec, " + vst.get(2) + "millisec");
		extent.extentLogger("",
				"VRT from app : " + vst.get(0) + "min, " + vst.get(1) + "sec, " + vst.get(2) + "millisec");
		int vstMilliSecApp = vst.get(0) * 60 * 1000 + vst.get(1) * 1000 + vst.get(2);
		logger.info("VRT calculated in millisecs : " + vstMilliSecApp);
		extent.extentLogger("", "VRT calculated in millisecs : " + vstMilliSecApp);
		webdriver.get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		String concurrentPlays = "";
		boolean needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				concurrentPlays = webdriver.findElement(PWAConvivaPage.objConcurrentPlays).getAttribute("innerText");
				if (Character.isDigit(concurrentPlays.charAt(0))) {
					if (!concurrentPlays.trim().equals("1"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (concurrentPlays.trim().equals("0") || concurrentPlays.equals("")) {
			extent.extentLoggerFail("", "Concurrent Plays is displayed as " + concurrentPlays);
			logger.error("Concurrent Plays is displayed as " + concurrentPlays);
		} else if (concurrentPlays.trim().equals("1")) {
			extent.extentLogger("", "Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior");
			logger.info("Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior");
		} else {
			extent.extentLogger("", "Concurrent Plays is displayed as " + concurrentPlays);
			logger.info("Concurrent Plays is displayed as " + concurrentPlays);
		}
		String rebufRatio = "", temp = "";
		float highestRebufRatio = 0.0f, lowestRebufRatio = 0.0f;
		for (int i = 0; i < 10; i++) {
			try {
				rebufRatio = webdriver.findElement(PWAConvivaPage.objRebufferingRatio).getAttribute("innerText");
				System.out.println("rebufRatio: " + rebufRatio);
				temp = rebufRatio.split(" ")[0];
				float tempF = Float.valueOf(temp);
				if (tempF > highestRebufRatio)
					highestRebufRatio = tempF;
				if (tempF < lowestRebufRatio)
					lowestRebufRatio = tempF;
				waitTime(1000);
			} catch (Exception e) {
			}
		}
		extent.extentLogger("", "Highest Rebuffering ratio recorded " + highestRebufRatio);
		logger.info("Highest Rebuffering ratio recorded " + highestRebufRatio);
		extent.extentLogger("", "Lowest Rebuffering ratio recorded " + lowestRebufRatio);
		logger.info("Lowest Rebuffering ratio recorded " + lowestRebufRatio);
		if (lowestRebufRatio < highestRebufRatio) {
			logger.info("Increasing Rebuffering ratio has been captured");
			extent.extentLogger("", "Increasing Rebuffering ratio has been captured");
		} else {
			logger.info("No buffering observed for the user");
			extent.extentLogger("", "No buffering observed for the user");
		}

		String vrtConviva = "", tempvrt = "", tempSec = "", tempMilliSec = "", tempPreviousIterationString = "";
		int tempVRT = 0, tempPreviousIteration = 0;
		for (int i = 0; i < 50; i++) {
			try {
				vrtConviva = webdriver.findElement(PWAConvivaPage.objVideoRestartTime).getAttribute("title");
				tempvrt = vrtConviva.replace(" sec", "").trim();
				tempSec = tempvrt.split("\\.")[0];
				tempMilliSec = tempvrt.split("\\.")[1];
				tempVRT = (Integer.valueOf(tempSec) * 1000) + Integer.valueOf(tempMilliSec);
				if (tempVRT > tempPreviousIteration) {
					tempPreviousIteration = tempVRT;
					tempPreviousIterationString = vrtConviva;
				}
				waitTime(1000);
			} catch (Exception e) {
			}
		}

		logger.info("Conviva VRT is displayed as " + tempPreviousIterationString + " sec");
		extent.extentLogger("", "Conviva VRT is displayed as " + tempPreviousIterationString + " sec");
		int vrtMilliSecCon = tempPreviousIteration;
		logger.info("Conviva VRT calculated in millisecs : " + vrtMilliSecCon);
		extent.extentLogger("", "Conviva VRT calculated in millisecs : " + vrtMilliSecCon);
		if (Integer.valueOf(vrtMilliSecCon).compareTo(vstMilliSecApp) < 5000) {
			logger.info("Calculated VRT and Conviva VRT have difference below 5 seconds");
			extent.extentLogger("", "Calculated VRT and Conviva VRT have difference below 5 seconds");
		} else {
			logger.error("Calculated VRT and Conviva VRT have difference above 5 seconds");
			extent.extentLoggerFail("", "Calculated VRT and Conviva VRT have difference above 5 seconds");
		}

	}
/**
 * @note this method is used to Monitoring real time after dragging on Progress bar
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	@SuppressWarnings("rawtypes")
	public void verifyConvivaDragOnProgressBar(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 14 : Monitoring real time after dragging on Progress bar");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		TouchAction act = new TouchAction(getDriver());
		act.press(PointOption.point(x, y)).release().perform();
		dragOnProgressBar(40);
		waitForAdToFinishInAmd();
		Date startDate = new Date();
		Date endDate = new Date();
		ArrayList<Date> startAndEndTime = new ArrayList<Date>();
		startAndEndTime = getPlayerStartEndTime(startDate, endDate, playerTapDetails);
		startDate = startAndEndTime.get(0);
		endDate = startAndEndTime.get(1);
		ArrayList<Integer> vst = getDateDifference(startDate, endDate);
		logger.info("VRT from app : " + vst.get(0) + "min, " + vst.get(1) + "sec, " + vst.get(2) + "millisec");
		extent.extentLogger("",
				"VRT from app : " + vst.get(0) + "min, " + vst.get(1) + "sec, " + vst.get(2) + "millisec");
		int vstMilliSecApp = vst.get(0) * 60 * 1000 + vst.get(1) * 1000 + vst.get(2);
		logger.info("VRT calculated in millisecs : " + vstMilliSecApp);
		extent.extentLogger("", "VRT calculated in millisecs : " + vstMilliSecApp);
		webdriver.get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		String concurrentPlays = "";
		boolean needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				concurrentPlays = webdriver.findElement(PWAConvivaPage.objConcurrentPlays).getAttribute("innerText");
				if (Character.isDigit(concurrentPlays.charAt(0))) {
					if (!concurrentPlays.trim().equals("1"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (concurrentPlays.trim().equals("0") || concurrentPlays.equals("")) {
			extent.extentLoggerFail("", "Concurrent Plays is displayed as " + concurrentPlays);
			logger.error("Concurrent Plays is displayed as " + concurrentPlays);
		} else if (concurrentPlays.trim().equals("1")) {
			extent.extentLogger("", "Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior");
			logger.info("Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior");
		} else {
			extent.extentLogger("", "Concurrent Plays is displayed as " + concurrentPlays);
			logger.info("Concurrent Plays is displayed as " + concurrentPlays);
		}
		String rebufRatio = "", temp = "";
		float highestRebufRatio = 0.0f, lowestRebufRatio = 0.0f;
		for (int i = 0; i < 10; i++) {
			try {
				rebufRatio = webdriver.findElement(PWAConvivaPage.objRebufferingRatio).getAttribute("innerText");
				System.out.println("rebufRatio: " + rebufRatio);
				temp = rebufRatio.split(" ")[0];
				float tempF = Float.valueOf(temp);
				if (tempF > highestRebufRatio)
					highestRebufRatio = tempF;
				if (tempF < lowestRebufRatio)
					lowestRebufRatio = tempF;
				waitTime(1000);
			} catch (Exception e) {
			}
		}
		extent.extentLogger("", "Highest Rebuffering ratio recorded " + highestRebufRatio);
		logger.info("Highest Rebuffering ratio recorded " + highestRebufRatio);
		extent.extentLogger("", "Lowest Rebuffering ratio recorded " + lowestRebufRatio);
		logger.info("Lowest Rebuffering ratio recorded " + lowestRebufRatio);
		if (lowestRebufRatio < highestRebufRatio) {
			logger.info("Increasing Rebuffering ratio has been captured");
			extent.extentLogger("", "Increasing Rebuffering ratio has been captured");
		} else {
			logger.info("No buffering observed for the user");
			extent.extentLogger("", "No buffering observed for the user");
		}

		String vrtConviva = "", tempvrt = "", tempSec = "", tempMilliSec = "", tempPreviousIterationString = "";
		int tempVRT = 0, tempPreviousIteration = 0;
		for (int i = 0; i < 50; i++) {
			try {
				vrtConviva = webdriver.findElement(PWAConvivaPage.objVideoRestartTime).getAttribute("title");
				tempvrt = vrtConviva.replace(" sec", "").trim();
				tempSec = tempvrt.split("\\.")[0];
				tempMilliSec = tempvrt.split("\\.")[1];
				tempVRT = (Integer.valueOf(tempSec) * 1000) + Integer.valueOf(tempMilliSec);
				if (tempVRT > tempPreviousIteration) {
					tempPreviousIteration = tempVRT;
					tempPreviousIterationString = vrtConviva;
				}
				waitTime(1000);
			} catch (Exception e) {
			}
		}

		logger.info("Conviva VRT is displayed as " + tempPreviousIterationString + " sec");
		extent.extentLogger("", "Conviva VRT is displayed as " + tempPreviousIterationString + " sec");
		int vrtMilliSecCon = tempPreviousIteration;
		logger.info("Conviva VRT calculated in millisecs : " + vrtMilliSecCon);
		extent.extentLogger("", "Conviva VRT calculated in millisecs : " + vrtMilliSecCon);
		if (Integer.valueOf(vrtMilliSecCon).compareTo(vstMilliSecApp) < 5000) {
			logger.info("Calculated VRT and Conviva VRT have difference below 5 seconds");
			extent.extentLogger("", "Calculated VRT and Conviva VRT have difference below 5 seconds");
		} else {
			logger.error("Calculated VRT and Conviva VRT have difference above 5 seconds");
			extent.extentLoggerFail("", "Calculated VRT and Conviva VRT have difference above 5 seconds");
		}
		screencapture(webdriver);
	}
/**
 * @note This method is used to Monitoring real time after pressing Forward on Progress bar
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	@SuppressWarnings("rawtypes")
	public void verifyConvivaForwardOnProgressBar(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 15 : Monitoring real time after pressing Forward on Progress bar");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		TouchAction act = new TouchAction(getDriver());
		act.press(PointOption.point(x, y)).release().perform();
		forwardRewindPlayer("forward");
		waitTime(3000);
		forwardRewindPlayer("forward");
		waitTime(3000);
		forwardRewindPlayer("forward");
		waitTime(3000);
		waitForAdToFinishInAmd();
		Date startDate = new Date();
		Date endDate = new Date();
		ArrayList<Date> startAndEndTime = new ArrayList<Date>();
		startAndEndTime = getPlayerStartEndTime(startDate, endDate, playerTapDetails);
		startDate = startAndEndTime.get(0);
		endDate = startAndEndTime.get(1);
		ArrayList<Integer> vst = getDateDifference(startDate, endDate);
		logger.info("VRT from app : " + vst.get(0) + "min, " + vst.get(1) + "sec, " + vst.get(2) + "millisec");
		extent.extentLogger("",
				"VRT from app : " + vst.get(0) + "min, " + vst.get(1) + "sec, " + vst.get(2) + "millisec");
		int vstMilliSecApp = vst.get(0) * 60 * 1000 + vst.get(1) * 1000 + vst.get(2);
		logger.info("VRT calculated in millisecs : " + vstMilliSecApp);
		extent.extentLogger("", "VRT calculated in millisecs : " + vstMilliSecApp);
		webdriver.get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		String concurrentPlays = "";
		boolean needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				concurrentPlays = webdriver.findElement(PWAConvivaPage.objConcurrentPlays).getAttribute("innerText");
				if (Character.isDigit(concurrentPlays.charAt(0))) {
					if (!concurrentPlays.trim().equals("1"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (concurrentPlays.trim().equals("0") || concurrentPlays.equals("")) {
			extent.extentLoggerFail("", "Concurrent Plays is displayed as " + concurrentPlays);
			logger.error("Concurrent Plays is displayed as " + concurrentPlays);
		} else if (concurrentPlays.trim().equals("1")) {
			extent.extentLogger("", "Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior");
			logger.info("Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior");
		} else {
			extent.extentLogger("", "Concurrent Plays is displayed as " + concurrentPlays);
			logger.info("Concurrent Plays is displayed as " + concurrentPlays);
		}
		String rebufRatio = "", temp = "";
		float highestRebufRatio = 0.0f, lowestRebufRatio = 0.0f;
		for (int i = 0; i < 10; i++) {
			try {
				rebufRatio = webdriver.findElement(PWAConvivaPage.objRebufferingRatio).getAttribute("innerText");
				System.out.println("rebufRatio: " + rebufRatio);
				temp = rebufRatio.split(" ")[0];
				float tempF = Float.valueOf(temp);
				if (tempF > highestRebufRatio)
					highestRebufRatio = tempF;
				if (tempF < lowestRebufRatio)
					lowestRebufRatio = tempF;
				waitTime(1000);
			} catch (Exception e) {
			}
		}
		extent.extentLogger("", "Highest Rebuffering ratio recorded " + highestRebufRatio);
		logger.info("Highest Rebuffering ratio recorded " + highestRebufRatio);
		extent.extentLogger("", "Lowest Rebuffering ratio recorded " + lowestRebufRatio);
		logger.info("Lowest Rebuffering ratio recorded " + lowestRebufRatio);
		if (lowestRebufRatio < highestRebufRatio) {
			logger.info("Increasing Rebuffering ratio has been captured");
			extent.extentLogger("", "Increasing Rebuffering ratio has been captured");
		} else {
			logger.info("No buffering observed for the user");
			extent.extentLogger("", "No buffering observed for the user");
		}

		String vrtConviva = "", tempvrt = "", tempSec = "", tempMilliSec = "", tempPreviousIterationString = "";
		int tempVRT = 0, tempPreviousIteration = 0;
		for (int i = 0; i < 50; i++) {
			try {
				vrtConviva = webdriver.findElement(PWAConvivaPage.objVideoRestartTime).getAttribute("title");
				tempvrt = vrtConviva.replace(" sec", "").trim();
				tempSec = tempvrt.split("\\.")[0];
				tempMilliSec = tempvrt.split("\\.")[1];
				tempVRT = (Integer.valueOf(tempSec) * 1000) + Integer.valueOf(tempMilliSec);
				if (tempVRT > tempPreviousIteration) {
					tempPreviousIteration = tempVRT;
					tempPreviousIterationString = vrtConviva;
				}
				waitTime(1000);
			} catch (Exception e) {
			}
		}

		logger.info("Conviva VRT is displayed as " + tempPreviousIterationString + " sec");
		extent.extentLogger("", "Conviva VRT is displayed as " + tempPreviousIterationString + " sec");
		int vrtMilliSecCon = tempPreviousIteration;
		logger.info("Conviva VRT calculated in millisecs : " + vrtMilliSecCon);
		extent.extentLogger("", "Conviva VRT calculated in millisecs : " + vrtMilliSecCon);
		if (Integer.valueOf(vrtMilliSecCon).compareTo(vstMilliSecApp) < 5000) {
			logger.info("Calculated VRT and Conviva VRT have difference below 5 seconds");
			extent.extentLogger("", "Calculated VRT and Conviva VRT have difference below 5 seconds");
		} else {
			logger.error("Calculated VRT and Conviva VRT have difference above 5 seconds");
			extent.extentLoggerFail("", "Calculated VRT and Conviva VRT have difference above 5 seconds");
		}
		screencapture(webdriver);
	}
/**
 * @note This method is used to  Monitoring real time after device is put to Sleep during playback
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	public void verifyConvivaPhoneLockUnlock(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 17 : Monitoring real time after device is put to Sleep during playback");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		webdriver.get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		String attempts = "";
		boolean needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				attempts = webdriver.findElement(PWAConvivaPage.objAttempts).getAttribute("innerText");
				if (Character.isDigit(attempts.charAt(0))) {
					if (!attempts.trim().equals("1"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (attempts.trim().equals("0") || attempts.equals("")) {
			extent.extentLoggerFail("", "Attempts is displayed as " + attempts);
			logger.error("Attempts is displayed as " + attempts);
		} else if (attempts.trim().equals("1")) {
			extent.extentLogger("", "Attempts is displayed as " + attempts + ", expected behavior");
			logger.info("Attempts is displayed as " + attempts + ", expected behavior");
		} else {
			extent.extentLogger("", "Attempts is displayed as " + attempts);
			logger.info("Attempts is displayed as " + attempts);
		}
		String plays = "";
		try {
			plays = webdriver.findElement(PWAConvivaPage.objPlays).getAttribute("innerText");
		} catch (Exception e) {
		}
		if (plays.trim().equals("100 %")) {
			extent.extentLogger("", "Plays is displayed as " + plays + ", expected behavior");
			logger.info("Plays is displayed as " + plays + ", expected behavior");
		} else {
			extent.extentLoggerFail("", "Plays is displayed as " + plays + ", instead of 100%");
			logger.error("Plays is displayed as " + plays + ", instead of 100%");
		}
		adbKeyevents(26);
		extent.extentLogger("", "Phone is locked");
		logger.info("Phone is locked");
		String attemptsAtLocked = "";
		needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				attemptsAtLocked = webdriver.findElement(PWAConvivaPage.objAttempts).getAttribute("innerText");
				if (Character.isDigit(attemptsAtLocked.charAt(0))) {
					if (!attemptsAtLocked.trim().equals("0"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (attemptsAtLocked.trim().equals("0")) {
			extent.extentLogger("",
					"Attempts is displayed as " + attemptsAtLocked + ", expected behavior for app in background");
			logger.info("Attempts is displayed as " + attemptsAtLocked + ", expected behavior for app in background");
		} else {
			extent.extentLoggerFail("", "Attempts is displayed as " + attemptsAtLocked + " for app in background");
			logger.error("Attempts is displayed as " + attemptsAtLocked + " for app in background");
		}
		String playsAtLocked = "";
		try {
			playsAtLocked = webdriver.findElement(PWAConvivaPage.objPlays).getAttribute("innerText");
		} catch (Exception e) {
		}
		if (playsAtLocked.trim().equals("0 %")) {
			extent.extentLogger("",
					"Plays is displayed as " + playsAtLocked + ", expected behavior for app in background");
			logger.info("Plays is displayed as " + playsAtLocked + ", expected behavior for app in background");
		} else {
			extent.extentLoggerFail("",
					"Plays is displayed as " + playsAtLocked + " for app in background instead of 0%");
			logger.error("Plays is displayed as " + playsAtLocked + " for app in background instead of 0%");
		}
		screencapture(webdriver);
		adbKeyevents(26);
		waitTime(3000);
		Swipe("Up", 1);
		extent.extentLogger("", "Phone is locked");
		logger.info("Phone is locked");
	}
/**
 * @note This method is used to Monitoring real time after App is put To Background during playback
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	public void verifyConvivaAppPutToBackground(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 16 : Monitoring real time after App is put To Background during playback");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		webdriver.get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		String attempts = "";
		boolean needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				attempts = webdriver.findElement(PWAConvivaPage.objAttempts).getAttribute("innerText");
				if (Character.isDigit(attempts.charAt(0))) {
					if (!attempts.trim().equals("1"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (attempts.trim().equals("0") || attempts.equals("")) {
			extent.extentLoggerFail("", "Attempts is displayed as " + attempts);
			logger.error("Attempts is displayed as " + attempts);
		} else if (attempts.trim().equals("1")) {
			extent.extentLogger("", "Attempts is displayed as " + attempts + ", expected behavior");
			logger.info("Attempts is displayed as " + attempts + ", expected behavior");
		} else {
			extent.extentLogger("", "Attempts is displayed as " + attempts);
			logger.info("Attempts is displayed as " + attempts);
		}
		String plays = "";
		try {
			plays = webdriver.findElement(PWAConvivaPage.objPlays).getAttribute("innerText");
		} catch (Exception e) {
		}
		if (plays.trim().equals("100 %")) {
			extent.extentLogger("", "Plays is displayed as " + plays + ", expected behavior");
			logger.info("Plays is displayed as " + plays + ", expected behavior");
		} else {
			extent.extentLoggerFail("", "Plays is displayed as " + plays + ", instead of 100%");
			logger.error("Plays is displayed as " + plays + ", instead of 100%");
		}
		getDriver().runAppInBackground(Duration.ofSeconds(15));
		extent.extentLogger("", "App went to background for 15 seconds");
		logger.info("App went to background for 15 seconds");
		String attemptsAtBackground = "";
		needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				attemptsAtBackground = webdriver.findElement(PWAConvivaPage.objAttempts).getAttribute("innerText");
				if (Character.isDigit(attemptsAtBackground.charAt(0))) {
					if (!attemptsAtBackground.trim().equals("0"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (attemptsAtBackground.trim().equals("0")) {
			extent.extentLogger("",
					"Attempts is displayed as " + attemptsAtBackground + ", expected behavior for app in background");
			logger.info(
					"Attempts is displayed as " + attemptsAtBackground + ", expected behavior for app in background");
		} else {
			extent.extentLoggerFail("", "Attempts is displayed as " + attemptsAtBackground + " for app in background");
			logger.error("Attempts is displayed as " + attemptsAtBackground + " for app in background");
		}
		String playsAtBackground = "";
		try {
			playsAtBackground = webdriver.findElement(PWAConvivaPage.objPlays).getAttribute("innerText");
		} catch (Exception e) {
		}
		if (playsAtBackground.trim().equals("0 %")) {
			extent.extentLogger("",
					"Plays is displayed as " + playsAtBackground + ", expected behavior for app in background");
			logger.info("Plays is displayed as " + playsAtBackground + ", expected behavior for app in background");
		} else {
			extent.extentLoggerFail("",
					"Plays is displayed as " + playsAtBackground + " for app in background instead of 0%");
			logger.error("Plays is displayed as " + playsAtBackground + " for app in background instead of 0%");
		}
		screencapture(webdriver);
	}
/**
 * @note This method is used to Monitoring real time for Landscape Player mode
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	@SuppressWarnings({ "rawtypes", "unused" })
	public void verifyConvivaLandscapePlayer(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 19 : Monitoring real time for Landscape Player mode");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		TouchAction act = new TouchAction(getDriver());
		act.press(PointOption.point(x, y)).release().perform();
		click(AMDPlayerScreen.objFullscreenIcon, "Full screen icon");
		waitTime(5000);
		webdriver.get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		String attempts = "";
		boolean needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				attempts = webdriver.findElement(PWAConvivaPage.objAttempts).getAttribute("innerText");
				if (Character.isDigit(attempts.charAt(0))) {
					if (!attempts.trim().equals("1"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (attempts.trim().equals("0") || attempts.equals("")) {
			extent.extentLoggerFail("", "Attempts is displayed as " + attempts);
			logger.error("Attempts is displayed as " + attempts);
		} else if (attempts.trim().equals("1")) {
			extent.extentLogger("", "Attempts is displayed as " + attempts + ", expected behavior");
			logger.info("Attempts is displayed as " + attempts + ", expected behavior");
		} else {
			extent.extentLogger("", "Attempts is displayed as " + attempts);
			logger.info("Attempts is displayed as " + attempts);
		}
		String plays = "";
		try {
			plays = webdriver.findElement(PWAConvivaPage.objPlays).getAttribute("innerText");
		} catch (Exception e) {
		}
		if (plays.trim().equals("100 %")) {
			extent.extentLogger("", "Plays is displayed as " + plays + ", expected behavior");
			logger.info("Plays is displayed as " + plays + ", expected behavior");
		} else {
			extent.extentLoggerFail("", "Plays is displayed as " + plays + ", instead of 100%");
			logger.error("Plays is displayed as " + plays + ", instead of 100%");
		}
	}
/**
 * @note This method is used to Monitoring real time after session close
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	public void verifyConvivaSessionClose(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 20 : Monitoring real time after session close");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		Back(1);
		logger.info("Session is closed");
		extent.extentLogger("", "Session is closed");
		waitTime(5000);
		webdriver.get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		String concurrentPlays = "";
		boolean needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				concurrentPlays = webdriver.findElement(PWAConvivaPage.objConcurrentPlays).getAttribute("innerText");
				if (Character.isDigit(concurrentPlays.charAt(0))) {
					if (!concurrentPlays.trim().equals("0"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (concurrentPlays.trim().equals("0")) {
			extent.extentLogger("",
					"Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior for Session Close");
			logger.info(
					"Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior for Session Close");
		} else {
			extent.extentLoggerFail("",
					"Concurrent Plays is displayed as " + concurrentPlays + ", instead of 0 for Session Close");
			logger.error("Concurrent Plays is displayed as " + concurrentPlays + ", instead of 0 for Session Close");
		}

	}
/**
 * @note This method is used to Monitoring real time after end of session
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	@SuppressWarnings("unused")
	public void verifyConvivaOnEndOfSession(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 21 : Monitoring real time after end of session");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		TouchAction act = new TouchAction(getDriver());
		act.press(PointOption.point(x, y)).release().perform();
		dragOnProgressBar(100);
		waitForAdToFinishInAmd();
		logger.info("Session is ended");
		extent.extentLogger("", "Session is ended");
		waitTime(5000);
		webdriver.get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		String concurrentPlays = "";
		boolean needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				concurrentPlays = webdriver.findElement(PWAConvivaPage.objConcurrentPlays).getAttribute("innerText");
				if (Character.isDigit(concurrentPlays.charAt(0))) {
					if (!concurrentPlays.trim().equals("0"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (concurrentPlays.trim().equals("0")) {
			extent.extentLogger("",
					"Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior for Session Close");
			logger.info(
					"Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior for Session Close");
		} else {
			extent.extentLoggerFail("",
					"Concurrent Plays is displayed as " + concurrentPlays + ", instead of 0 for Session Close");
			logger.error("Concurrent Plays is displayed as " + concurrentPlays + ", instead of 0 for Session Close");
		}
	}
/**
 * @note This method is used to Monitoring real time after midroll Ad play
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	public void verifyConvivaAfterMidRoll(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 27 : Monitoring real time after midroll Ad play");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		TouchAction act = new TouchAction(getDriver());
		act.press(PointOption.point(x, y)).release().perform();
		clickOnProgressBar(50);
		waitForAdToFinishInAmd();
		waitTime(5000);
		webdriver.get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		String concurrentPlays = "";
		boolean needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				concurrentPlays = webdriver.findElement(PWAConvivaPage.objConcurrentPlays).getAttribute("innerText");
				if (Character.isDigit(concurrentPlays.charAt(0))) {
					if (!concurrentPlays.trim().equals("1"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (concurrentPlays.trim().equals("1")) {
			extent.extentLogger("", "Concurrent Plays is displayed as " + concurrentPlays
					+ ", expected behavior for after midroll play");
			logger.info("Concurrent Plays is displayed as " + concurrentPlays
					+ ", expected behavior for after midroll play");
		} else {
			extent.extentLogger("",
					"Concurrent Plays is displayed as " + concurrentPlays + ", instead of 1 after midroll play");
			logger.info("Concurrent Plays is displayed as " + concurrentPlays + ", instead of 1 after midroll play");
		}
	}
/**
 * @note This method is used to Monitoring real time after postroll Ad play
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	public void verifyConvivaAfterPostRoll(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 28 : Monitoring real time after postroll Ad play");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		TouchAction act = new TouchAction(getDriver());
		act.press(PointOption.point(x, y)).release().perform();
		dragOnProgressBar(100);
		waitForAdToFinishInAmd();
		waitTime(5000);
		webdriver.get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		String concurrentPlays = "";
		boolean needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				concurrentPlays = webdriver.findElement(PWAConvivaPage.objConcurrentPlays).getAttribute("innerText");
				if (Character.isDigit(concurrentPlays.charAt(0))) {
					if (!concurrentPlays.trim().equals("0"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (concurrentPlays.trim().equals("0")) {
			extent.extentLogger("", "Concurrent Plays is displayed as " + concurrentPlays
					+ ", expected behavior for after postroll play");
			logger.info("Concurrent Plays is displayed as " + concurrentPlays
					+ ", expected behavior for after postroll play");
		} else {
			extent.extentLogger("",
					"Concurrent Plays is displayed as " + concurrentPlays + ", instead of 0 after postroll play");
			logger.info("Concurrent Plays is displayed as " + concurrentPlays + ", instead of 0 after postroll play");
		}
	}
/**
 * @note This method is used to Monitoring real time after seek past midroll
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	@SuppressWarnings("rawtypes")
	public void verifyConvivaAfterMidRollThroughSeek(String userType, WebDriver webdriver,
			ArrayList<String> contentData, ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 29 : Monitoring real time after seek past midroll");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		TouchAction act = new TouchAction(getDriver());
		act.press(PointOption.point(x, y)).release().perform();
		dragOnProgressBar(50);
		waitForAdToFinishInAmd();
		waitForAdToFinishInAmd();
		waitForAdToFinishInAmd();
		waitForAdToFinishInAmd();
		waitForAdToFinishInAmd();
		waitTime(5000);
		webdriver.get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		String concurrentPlays = "";
		boolean needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				concurrentPlays = webdriver.findElement(PWAConvivaPage.objConcurrentPlays).getAttribute("innerText");
				if (Character.isDigit(concurrentPlays.charAt(0))) {
					if (!concurrentPlays.trim().equals("1"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (concurrentPlays.trim().equals("1")) {
			extent.extentLogger("", "Concurrent Plays is displayed as " + concurrentPlays
					+ ", expected behavior for seek past midroll");
			logger.info("Concurrent Plays is displayed as " + concurrentPlays
					+ ", expected behavior for seek past midroll");
		} else {
			extent.extentLogger("",
					"Concurrent Plays is displayed as " + concurrentPlays + ", instead of 1 for seek past midroll");
			logger.info("Concurrent Plays is displayed as " + concurrentPlays + ", instead of 1 for seek past midroll");
		}
	}
/**
 * @note This method is used Monitoring real time on background during Ad Play
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	public void verifyConvivaOnBackgroundDuringAdPlay(String userType, WebDriver webdriver,
			ArrayList<String> contentData, ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 30 : Monitoring real time on background during Ad Play");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		TouchAction act = new TouchAction(getDriver());
		act.press(PointOption.point(x, y)).release().perform();
		clickOnProgressBar(50);
		waitTime(5000);
		if (verifyIsElementDisplayed(AMDPlayerScreen.objAd2)) {
			logger.info("Midroll Ad is playing");
			extentLogger("Ad", "Midroll Ad is playing");
			getDriver().runAppInBackground(Duration.ofSeconds(30));
			extent.extentLogger("", "App went to background for 30 seconds");
			logger.info("App went to background for 30 seconds");
			waitTime(5000);
			webdriver.get("https://pulse.conviva.com/reports/54");
			extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
			logger.info("Opened : https://pulse.conviva.com/reports/54");
			waitTime(10000);
			logger.info("Waited for 10 seconds");
			extent.extentLogger("", "Waited for 10 seconds");
			// App In Foreground
			extent.extentLogger("", "App in foreground");
			logger.info("App in foreground");
			String concurrentPlays = "";
			boolean needWait = true;
			for (int i = 1; i <= 500; i++) {
				webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
				try {
					concurrentPlays = webdriver.findElement(PWAConvivaPage.objConcurrentPlays)
							.getAttribute("innerText");
					if (Character.isDigit(concurrentPlays.charAt(0))) {
						if (!concurrentPlays.trim().equals("1"))
							needWait = true;
						else
							needWait = false;
					}
				} catch (Exception e) {
					needWait = true;
					System.out.println("failed " + i);
				}
				if (needWait == false)
					break;
				else
					waitTime(3000);
			}
			if (concurrentPlays.trim().equals("1")) {
				extent.extentLogger("", "Concurrent Plays is displayed as " + concurrentPlays
						+ ", expected behavior for App Foreground");
				logger.info("Concurrent Plays is displayed as " + concurrentPlays
						+ ", expected behavior for App Foreground");
			} else {
				extent.extentLoggerFail("",
						"Concurrent Plays is displayed as " + concurrentPlays + ", instead of 1 for App Foreground");
				logger.error(
						"Concurrent Plays is displayed as " + concurrentPlays + ", instead of 1 for App Foreground");
			}
		} else {
			extent.extentLoggerWarning("", "Midroll Ad did not play, hence test case could not be verified");
			logger.info("Midroll Ad did not play, hence test case could not be verified");
		}
	}
/**
 * @note This method is used to Monitoring real time on after Ad Play click
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	@SuppressWarnings("rawtypes")
	public void verifyConvivaOnAdClick(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 31 : Monitoring real time on after Ad Play click");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		TouchAction act = new TouchAction(getDriver());
		act.press(PointOption.point(x, y)).release().perform();
		clickOnProgressBar(50);
		waitTime(5000);
		if (verifyIsElementDisplayed(AMDPlayerScreen.objAd2)) {
			logger.info("Midroll Ad is playing");
			extentLogger("Ad", "Midroll Ad is playing");
			click(AMDPlayerScreen.objLearnMoreTextOnAdPlayBack, "'Learn More' text on Ad");
			waitTime(4000);
			Back(1);
			waitForAdToFinishInAmd();
			webdriver.get("https://pulse.conviva.com/reports/54");
			extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
			logger.info("Opened : https://pulse.conviva.com/reports/54");
			waitTime(10000);
			logger.info("Waited for 10 seconds");
			extent.extentLogger("", "Waited for 10 seconds");
			String concurrentPlays = "";
			boolean needWait = true;
			for (int i = 1; i <= 500; i++) {
				webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
				try {
					concurrentPlays = webdriver.findElement(PWAConvivaPage.objConcurrentPlays)
							.getAttribute("innerText");
					if (Character.isDigit(concurrentPlays.charAt(0))) {
						if (!concurrentPlays.trim().equals("1"))
							needWait = true;
						else
							needWait = false;
					}
				} catch (Exception e) {
					needWait = true;
					System.out.println("failed " + i);
				}
				if (needWait == false)
					break;
				else
					waitTime(3000);
			}
			if (concurrentPlays.trim().equals("1")) {
				extent.extentLogger("", "Concurrent Plays is displayed as " + concurrentPlays
						+ ", expected behavior of video play resume after Ad click");
				logger.info("Concurrent Plays is displayed as " + concurrentPlays
						+ ", expected behavior of video play resume after Ad click");
			} else {
				extent.extentLoggerFail("", "Concurrent Plays is displayed as " + concurrentPlays
						+ ", instead of 1 for video play resume after Ad click");
				logger.error("Concurrent Plays is displayed as " + concurrentPlays
						+ ", instead of 1 for video play resume after Ad click");
			}
		} else {
			extent.extentLoggerWarning("", "Midroll Ad did not play, hence test case could not be verified");
			logger.info("Midroll Ad did not play, hence test case could not be verified");
		}
	}
/**
 * @note This method is used to Monitoring real time on after Ad Play click
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	public void verifyConvivaOnContentReplay(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 32 : Monitoring real time on content replay");
		// Set auto play OFF
		click(AMDHomePage.MoreMenuIcon, "More Menu icon");
		click(AMDMoreMenu.objSettings, "Settings option");
		String elementAutoPlayToggleStatus = getText(AMDMoreMenu.objVideo_Autoply);
		String originalAutoplaySetting = elementAutoPlayToggleStatus;
		logger.info("Original Auto play setting is : " + elementAutoPlayToggleStatus);
		extent.extentLogger("", "Original Auto play setting is : " + elementAutoPlayToggleStatus);
		if (elementAutoPlayToggleStatus.equalsIgnoreCase("ON")) {
			click(AMDMoreMenu.objVideo_Autoply, "Auto play");
			logger.info("Clicked on Autoplay to turn it OFF");
			extent.extentLogger("", "Clicked on Autoplay to turn it OFF");
		}
		Back(1);
		waitTime(3000);
		Back(1);
		waitTime(3000);
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		TouchAction act = new TouchAction(getDriver());
		act.press(PointOption.point(x, y)).release().perform();
		clickOnProgressBar(99);
		waitTime(4000);
		boolean replayClicked = false;
		for (int i = 0; i < 15; i++) {
			try {
				act.press(PointOption.point(x, y)).release().perform();
				getDriver().findElement(AMDPlayerScreen.objReplayIconOnPlayer).click();
				logger.info("Clicked on Replay icon");
				extent.extentLogger("", "Clicked on Replay icon");
				replayClicked = true;
				break;
			} catch (Exception e) {
				waitTime(2000);
			}
		}
		waitForAdToFinishInAmd();
		webdriver.get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		String concurrentPlays = "";
		boolean needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				concurrentPlays = webdriver.findElement(PWAConvivaPage.objConcurrentPlays).getAttribute("innerText");
				if (Character.isDigit(concurrentPlays.charAt(0))) {
					if (!concurrentPlays.trim().equals("1"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (concurrentPlays.trim().equals("1")) {
			extent.extentLogger("",
					"Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior for video replay");
			logger.info("Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior for video replay");
		} else {
			extent.extentLoggerFail("",
					"Concurrent Plays is displayed as " + concurrentPlays + ", instead of 1 for video replay");
			logger.error("Concurrent Plays is displayed as " + concurrentPlays + ", instead of 1 for video replay");
		}
		// Set auto play ON
		Back(1);
		waitTime(3000);
		Back(1);
		waitTime(3000);
		click(AMDHomePage.MoreMenuIcon, "More Menu icon");
		click(AMDMoreMenu.objSettings, "Settings option");
		elementAutoPlayToggleStatus = getText(AMDMoreMenu.objVideo_Autoply);
		logger.info("Auto play setting is currently : " + elementAutoPlayToggleStatus);
		extent.extentLogger("", "Auto play setting is currently : " + elementAutoPlayToggleStatus);
		if (!elementAutoPlayToggleStatus.equalsIgnoreCase(originalAutoplaySetting)) {
			click(AMDMoreMenu.objVideo_Autoply, "Auto play");
			logger.info("Clicked on Autoplay to turn it " + originalAutoplaySetting);
			extent.extentLogger("", "Clicked on Autoplay to turn it " + originalAutoplaySetting);
		} else {
			logger.info("Retaining the autoplay setting to original state: " + originalAutoplaySetting);
			extent.extentLogger("", "Retaining the autoplay setting to original state: " + originalAutoplaySetting);
		}
		Back(1);
		waitTime(3000);
		Back(1);
		waitTime(3000);
	}
/**
 * @note This method is used for Monitoring real time on multiple content play
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	public void verifyConvivaOnMultipleContentPlay(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 33 : Monitoring real time on multiple content play");
		String contentIDTemp = "0-0-103560";
		String contentNameTemp = "Robin Hood Forever Enemies";
		String contentMetaInSearchTemp = "Hindi";
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentNameTemp + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objSearchResult(contentNameTemp, contentMetaInSearchTemp),
				"Search result for Hindi Content");
		Back(1);
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentMetaInSearch = contentData.get(2);
		click(AMDSearchScreen.objSearchResult(contentName, contentMetaInSearch), "Search result for English Content");
		waitForAdToFinishInAmd();
		webdriver.get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLogger("", "Waited for 10 seconds");
		String concurrentPlays = "";
		boolean needWait = true;
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			try {
				concurrentPlays = webdriver.findElement(PWAConvivaPage.objConcurrentPlays).getAttribute("innerText");
				if (Character.isDigit(concurrentPlays.charAt(0))) {
					if (!concurrentPlays.trim().equals("1"))
						needWait = true;
					else
						needWait = false;
				}
			} catch (Exception e) {
				needWait = true;
				System.out.println("failed " + i);
			}
			if (needWait == false)
				break;
			else
				waitTime(3000);
		}
		if (concurrentPlays.trim().equals("1")) {
			extent.extentLogger("",
					"Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior for video play");
			logger.info("Concurrent Plays is displayed as " + concurrentPlays + ", expected behavior for video play");
		} else {
			extent.extentLoggerFail("",
					"Concurrent Plays is displayed as " + concurrentPlays + ", instead of 1 for video play");
			logger.error("Concurrent Plays is displayed as " + concurrentPlays + ", instead of 1 for video play");
		}
		ResponseInstance.updateWatchHistory(contentIDTemp, 1, "");

	}
/**
 * @note This method is used for Monitoring data validation on upnext content played
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	@SuppressWarnings("rawtypes")
	public void verifyConvivaOnUpnextContentPlay(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 34 : Monitoring data validation on upnext content played");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentNameInSearch = contentData.get(2);
		String contentMetaInSearch = contentData.get(3);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objEpsiodesTab, "Episodes Tab");
		click(AMDSearchScreen.objSearchResult(contentNameInSearch, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		String firstEpisodeTitle = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);
		logger.info("Episode Title displayed: " + firstEpisodeTitle);
		extent.extentLogger("", "Episode Title displayed: " + firstEpisodeTitle);
		String firstEpisodeMetaData = getText(AMDPlayerScreen.objContentMeta);
		logger.info("Episode Meta data displayed: " + firstEpisodeMetaData);
		extent.extentLogger("", "Episode Meta data displayed: " + firstEpisodeMetaData);
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		TouchAction act = new TouchAction(getDriver());
		act.press(PointOption.point(x, y)).release().perform();
		clickOnProgressBar(99);
		waitForAdToFinishInAmd();
		String upnextEpisodeTitle = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);
		logger.info("Upnext Episode Title displayed: " + upnextEpisodeTitle);
		extent.extentLogger("", "Upnext Episode Title displayed: " + upnextEpisodeTitle);
		String upnextEpisodeMetaData = getText(AMDPlayerScreen.objContentMeta);
		logger.info("Upnext Episode Meta data displayed: " + upnextEpisodeMetaData);
		extent.extentLogger("", "Upnext Episode Meta data displayed: " + upnextEpisodeMetaData);
		if (!upnextEpisodeMetaData.contains("Episode 1900")) {
			upnextEpisodeTitle = upnextEpisodeTitle.split("'")[0];
			String url = "https://pulse.conviva.com/app/pulse/device_validation/?live=true";
			webdriver.get(url);
			logger.info("Opened : " + url);
			extent.extentLogger("", "Opened : " + url);
			waitTime(5000);
			WebElement frameElement = webdriver.findElement(PWAConvivaPage.objIframePulse4);
			webdriver.switchTo().frame(frameElement);
			webdriver.findElement(PWAConvivaPage.objDeviceValidationFilter).click();
			logger.info("Clicked on device validation dropdown");
			extent.extentLogger("", "Clicked on device validation dropdown");
			waitTime(5000);
			webdriver.findElement(PWAConvivaPage.objDeviceValidation("For_Automation")).click();
			logger.info("Clicked on 'For_Automation' from dropdown");
			extent.extentLogger("", "Clicked on 'For_Automation' from dropdown");
			if (findElementInRefreshingConvivaPage(webdriver, PWAConvivaPage.objMonitorSessionID(upnextEpisodeTitle),
					"Upnext Content in Data Validation")) {
				logger.info("Session is created for the Upnext content played");
				extent.extentLogger("", "Session is created for the Upnext content played");
			} else {
				logger.error("Session is not created for the Upnext content played");
				extent.extentLoggerFail("", "Session is not created for the Upnext content played");
			}
			String convivaContent = getTextFromRefreshingConvivaPage(webdriver,
					PWAConvivaPage.objMonitorSessionContent(upnextEpisodeTitle), "Upnext Content from Conviva");
			String upnextContentID = convivaContent.split("\\[")[1].split("\\]")[0];
			System.out.println(upnextContentID);
			ResponseInstance.updateWatchHistory(upnextContentID, 1, "");
			screencapture(webdriver);
		} else {
			logger.error("Upnext content failed to play");
			extent.extentLoggerFail("", "Upnext content failed to play");
		}
	}
/**
 * @note This method is used for Monitoring data validation on skip content and play another content
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	public void verifyConvivaOnSkipContentAndPlayAnother(String userType, WebDriver webdriver,
			ArrayList<String> contentData, ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 35 : Monitoring data validation on skip content and play another content");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentNameInSearch = contentData.get(2);
		String contentMetaInSearch = contentData.get(3);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objEpsiodesTab, "Episodes Tab");
		click(AMDSearchScreen.objSearchResult(contentNameInSearch, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		String firstEpisodeTitle = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);
		logger.info("Episode Title displayed: " + firstEpisodeTitle);
		extent.extentLogger("", "Episode Title displayed: " + firstEpisodeTitle);
		String firstEpisodeMetaData = getText(AMDPlayerScreen.objContentMeta);
		logger.info("Episode Meta data displayed: " + firstEpisodeMetaData);
		extent.extentLogger("", "Episode Meta data displayed: " + firstEpisodeMetaData);
		click(AMDPlayerScreen.objPlayPageUpnextFirstCardImage, "First Card Image in Up Next tray");
		waitForAdToFinishInAmd();
		String upnextEpisodeTitle = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);
		logger.info("Upnext Episode Title displayed: " + upnextEpisodeTitle);
		extent.extentLogger("", "Upnext Episode Title displayed: " + upnextEpisodeTitle);
		String upnextEpisodeMetaData = getText(AMDPlayerScreen.objContentMeta);
		logger.info("Upnext Episode Meta data displayed: " + upnextEpisodeMetaData);
		extent.extentLogger("", "Upnext Episode Meta data displayed: " + upnextEpisodeMetaData);
		if (!upnextEpisodeMetaData.contains("Episode 1900")) {
			upnextEpisodeTitle = upnextEpisodeTitle.split("'")[0];
			String url = "https://pulse.conviva.com/app/pulse/device_validation/?live=true";
			webdriver.get(url);
			logger.info("Opened : " + url);
			extent.extentLogger("", "Opened : " + url);
			waitTime(5000);
			WebElement frameElement = webdriver.findElement(PWAConvivaPage.objIframePulse4);
			webdriver.switchTo().frame(frameElement);
			webdriver.findElement(PWAConvivaPage.objDeviceValidationFilter).click();
			logger.info("Clicked on device validation dropdown");
			extent.extentLogger("", "Clicked on device validation dropdown");
			waitTime(5000);
			webdriver.findElement(PWAConvivaPage.objDeviceValidation("For_Automation")).click();
			logger.info("Clicked on 'For_Automation' from dropdown");
			extent.extentLogger("", "Clicked on 'For_Automation' from dropdown");
			if (findElementInRefreshingConvivaPage(webdriver, PWAConvivaPage.objMonitorSessionID(upnextEpisodeTitle),
					"Upnext Content in Data Validation")) {
				logger.info("Session is created for the Upnext content played");
				extent.extentLogger("", "Session is created for the Upnext content played");
			} else {
				logger.error("Session is not created for the Upnext content played");
				extent.extentLoggerFail("", "Session is not created for the Upnext content played");
			}
			String convivaContent = getTextFromRefreshingConvivaPage(webdriver,
					PWAConvivaPage.objMonitorSessionContent(upnextEpisodeTitle), "Upnext Content from Conviva");
			String upnextContentID = convivaContent.split("\\[")[1].split("\\]")[0];
			System.out.println(upnextContentID);
			ResponseInstance.updateWatchHistory(upnextContentID, 1, "");
			screencapture(webdriver);
		} else {
			logger.error("Upnext content failed to play");
			extent.extentLoggerFail("", "Upnext content failed to play");
		}

	}
/**
 * @note This method is used for verifying Metadata in Device Validation page 
 * @param userType
 * @param webdriver
 * @param contentData
 * @param playerTapDetails
 * @throws Exception
 */
	public void verifyConvivaMetaDataAndCDN(String userType, WebDriver webdriver, ArrayList<String> contentData,
			ArrayList<Integer> playerTapDetails) throws Exception {
		ZEE5AppClearAndLogin(userType);
		extent.HeaderChildNode("TC 43 : Metadata in Device Validation page");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentNameInSearch = contentData.get(2);
		String contentMetaInSearch = contentData.get(3);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, contentName + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objEpsiodesTab, "Episodes Tab");
		click(AMDSearchScreen.objSearchResult(contentNameInSearch, contentMetaInSearch), "Search result");
		waitForAdToFinishInAmd();
		String episodeTitle = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);
		logger.info("Episode Title displayed: " + episodeTitle);
		extent.extentLogger("", "Episode Title displayed: " + episodeTitle);
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		TouchAction act = new TouchAction(getDriver());
		act.press(PointOption.point(x, y)).release().perform();
		WebElement timer = getDriver().findElement(AMDPlayerScreen.objTotalDuration);
		String timerduration = timer.getText();
		logger.info("Episode Total Duration displayed: " + timerduration);
		extent.extentLogger("", "Episode Total Duration displayed: " + timerduration);
		int totalDurationInt = returnSeconds(timerduration);
		logger.info("Episode Total Duration calculated in seconds: " + totalDurationInt);
		extent.extentLogger("", "Episode Total Duration calculated in seconds: " + totalDurationInt);
		String url = "https://pulse.conviva.com/app/pulse/device_validation/?live=true";
		webdriver.get(url);
		logger.info("Opened : " + url);
		extent.extentLogger("", "Opened : " + url);
		waitTime(5000);
		WebElement frameElement = webdriver.findElement(PWAConvivaPage.objIframePulse4);
		webdriver.switchTo().frame(frameElement);
		String assetName = getTextFromRefreshingConvivaPage(webdriver,
				PWAConvivaPage.objDeviceValidationAssetName(episodeTitle), "Asset displayed");
		if (assetName.equals("") || assetName.equalsIgnoreCase("NA") || assetName.equals(null)) {
			extent.extentLoggerFail("", "Invalid Asset is displayed");
			logger.error("Invalid Asset is displayed");
		}
		String sessionStatus = getTextFromRefreshingConvivaPage(webdriver,
				PWAConvivaPage.objDeviceValidationSessionStatus(episodeTitle), "Session Status displayed");
		if (sessionStatus.equals("") || sessionStatus.equalsIgnoreCase("NA") || sessionStatus.equals(null)) {
			extent.extentLoggerFail("", "Invalid Session Status is displayed");
			logger.error("Invalid Session Status is displayed");
		}
		String sessionStartTime = getTextFromRefreshingConvivaPage(webdriver,
				PWAConvivaPage.objDeviceValidationSessionStartTime(episodeTitle), "Session Start Time displayed");
		if (sessionStartTime.equals("") || sessionStartTime.equalsIgnoreCase("NA") || sessionStartTime.equals(null)) {
			extent.extentLoggerFail("", "Invalid Session Start Time is displayed");
			logger.error("Invalid Session Start Time is displayed");
		}
		String deviceType = getTextFromRefreshingConvivaPage(webdriver,
				PWAConvivaPage.objDeviceValidationDeviceType(episodeTitle), "Device Type displayed");
		if (deviceType.equals("") || deviceType.equalsIgnoreCase("NA") || deviceType.equals(null)) {
			extent.extentLoggerFail("", "Invalid Device Type is displayed");
			logger.error("Invalid Device Type is displayed");
		}
		String browser = getTextFromRefreshingConvivaPage(webdriver,
				PWAConvivaPage.objDeviceValidationBrowser(episodeTitle), "Browser displayed");
		if (browser.equals("") || browser.equalsIgnoreCase("NA") || browser.equals(null)) {
			extent.extentLoggerFail("", "Invalid Browser is displayed");
			logger.error("Invalid Browser is displayed");
		}
		String clientID = getTextFromRefreshingConvivaPage(webdriver,
				PWAConvivaPage.objDeviceValidationClientID(episodeTitle), "Client ID displayed");
		if (clientID.equals("") || clientID.equalsIgnoreCase("NA") || clientID.equals(null)) {
			extent.extentLoggerFail("", "Invalid Client ID is displayed");
			logger.error("Invalid Client ID is displayed");
		}
		String monitorSessionID = getTextFromRefreshingConvivaPage(webdriver,
				PWAConvivaPage.objDeviceValidationMonitorSessionID(episodeTitle), "Monitor Session ID displayed");
		if (monitorSessionID.equals("") || monitorSessionID.equalsIgnoreCase("NA") || monitorSessionID.equals(null)) {
			extent.extentLoggerFail("", "Invalid Monitor Session ID is displayed");
			logger.error("Invalid Monitor Session ID is displayed");
		}

		extent.HeaderChildNode("TC 42 : CDN verification");
		webdriver.findElement(PWAConvivaPage.objDeviceValidationFilter).click();
		logger.info("Clicked on device validation dropdown");
		extent.extentLogger("", "Clicked on device validation dropdown");
		waitTime(5000);
		webdriver.findElement(PWAConvivaPage.objDeviceValidation("For_Automation")).click();
		logger.info("Clicked on 'For_Automation' from dropdown");
		extent.extentLogger("", "Clicked on 'For_Automation' from dropdown");
		if (clickElementInRefreshingConvivaPage(webdriver, PWAConvivaPage.objMonitorSessionID(episodeTitle),
				"Monitor Session ID")) {
			String cdn = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objCDN, "CDN displayed");
			if (cdn.equals("") || cdn.equalsIgnoreCase("NA") || cdn.equals(null)) {
				extent.extentLoggerFail("", "Inalid CDN is displayed");
				logger.error("Invalid CDN is displayed");
			}
			// Device Tags
			verifyConvivaDeviceTagsVerification(webdriver);
			ArrayList<String> requiredTagsExpectedValues = new ArrayList<String>();
			requiredTagsExpectedValues.add(assetName);
			requiredTagsExpectedValues.add(clientID);
			requiredTagsExpectedValues.add(monitorSessionID);
			requiredTagsExpectedValues.add(String.valueOf(totalDurationInt));
			// Required Tags
			verifyConvivaRequiredTagsVerification(webdriver, requiredTagsExpectedValues);
			// Custom Tags
			verifyConvivaCustomTagsVerification(webdriver, contentData);
		} else {
			logger.error("Failed to click on the Monitor Session ID");
			extent.extentLoggerFail("", "Failed to click on the Monitor Session ID");
		}

	}
/**
 * @note this method is used for time into seconds
 * @param duration
 * @return
 */
	public Integer returnSeconds(String duration) {
		int returnSeconds = 0;
		String[] durationSplits = duration.split(":");
		if (durationSplits.length == 3) {
			returnSeconds = Integer.valueOf(durationSplits[0]) * 3600 + Integer.valueOf(durationSplits[1]) * 60
					+ Integer.valueOf(durationSplits[2]);
		}
		if (durationSplits.length == 2) {
			returnSeconds = Integer.valueOf(durationSplits[0]) * 60 + Integer.valueOf(durationSplits[1]);
		}
		return returnSeconds;
	}
/**
 * @note this method is used for Custom Tags verification
 * @param webdriver
 * @param contentData
 * @throws Exception
 */
	public void verifyConvivaCustomTagsVerification(WebDriver webdriver, ArrayList<String> contentData)
			throws Exception {
		extent.HeaderChildNode("TC 47 : Custom Tags verification");
		String contentID = contentData.get(0);
		String contentName = contentData.get(1);
		String contentNameInSearch = contentData.get(2);
		String contentMetaInSearch = contentData.get(3);
		String contentAudioLanguage = contentData.get(4);
		String contentCategory = contentData.get(5);
		String contentContentType = contentData.get(6);
		String contentEpisodeNumber = contentData.get(7);
		String contentGenre = contentData.get(8);
		String contentRootID = contentData.get(9);
		String contentShow = contentData.get(10);
		String contentContentAccessType = contentData.get(11);

		// accessType
		String accessType = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objaccessType,
				"accessType displayed");
		if (pUserType.equalsIgnoreCase("Guest") && !(accessType.equals("guest"))) {
			extent.extentLoggerFail("", "Invalid accessType is displayed instead of 'guest'");
			logger.error("Invalid accessType is displayed instead of 'guest'");
		}
		if (pUserType.equalsIgnoreCase("NonSubscribedUser") && !(accessType.equals("registered"))) {
			extent.extentLoggerFail("", "Invalid accessType is displayed instead of 'registered'");
			logger.error("Invalid accessType is displayed instead of 'registered'");
		}
		if (pUserType.equalsIgnoreCase("SubscribedUser") && !(accessType.equals("premium"))) {
			extent.extentLoggerFail("", "Invalid accessType is displayed instead of 'premium'");
			logger.error("Invalid accessType is displayed instead of 'premium'");
		}
		// adID
		String adID = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objadID, "adID displayed");
		if (adID.equals("") || adID.equalsIgnoreCase("NA") || adID.equals(null)) {
			extent.extentLoggerFail("", "Invalid adID is displayed");
			logger.error("Invalid adID is displayed");
		}
		// affiliate
		String affiliate = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objaffiliate,
				"affiliate displayed");
		if (!affiliate.equals("Zee Entertainment Enterprises Ltd")) {
			extent.extentLoggerFail("",
					"Invalid affiliate is displayed instead of 'Zee Entertainment Enterprises Ltd'");
			logger.error("Invalid affiliate is displayed instead of 'Zee Entertainment Enterprises Ltd'");
		}
		// appVersion
		String appVersion = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objappVersion,
				"appVersion displayed");
		if (appVersion.equals("") || appVersion.equalsIgnoreCase("NA") || appVersion.equals(null)) {
			extent.extentLoggerFail("", "Invalid appVersion is displayed");
			logger.error("Invalid appVersion is displayed");
		}
		// audioLanguage
		String audioLanguage = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objaudioLanguage,
				"audioLanguage displayed");
		if (!audioLanguage.equals(contentAudioLanguage)) {
			extent.extentLoggerFail("", "Invalid audioLanguage is displayed instead of " + contentAudioLanguage);
			logger.error("Invalid audioLanguage is displayed instead of " + contentAudioLanguage);
		}
		// autoPlay
		String autoPlay = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objautoPlay, "autoPlay displayed");
		if (autoPlay.equals("") || autoPlay.equalsIgnoreCase("NA") || autoPlay.equals(null)) {
			extent.extentLoggerFail("", "Invalid autoPlay is displayed");
			logger.error("Invalid autoPlay is displayed");
		}
		// catchUp
		String catchUp = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objcatchUp, "catchUp displayed");
		if (catchUp.equals("") || catchUp.equalsIgnoreCase("NA") || catchUp.equals(null)) {
			extent.extentLoggerFail("", "Invalid catchUp is displayed");
			logger.error("Invalid catchUp is displayed");
		}
		// category
		String category = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objcategory, "category displayed");
		if (!category.equals(contentCategory)) {
			extent.extentLoggerFail("", "Invalid category is displayed instead of " + contentCategory);
			logger.error("Invalid category is displayed instead of " + contentCategory);
		}
		// connectionType
		String connectionType = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objconnectionType,
				"connectionType displayed");
		if (connectionType.equals("") || connectionType.equalsIgnoreCase("NA") || connectionType.equals(null)) {
			extent.extentLoggerFail("", "Invalid connectionType is displayed");
			logger.error("Invalid connectionType is displayed");
		}
		// contentAccessType
		String contentaccesstype = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objcontentAccessType,
				"contentAccessType displayed");
		if (!contentaccesstype.equals(contentContentAccessType)) {
			extent.extentLoggerFail("",
					"Invalid contentAccessType is displayed instead of " + contentContentAccessType);
			logger.error("Invalid contentAccessType is displayed instead of " + contentContentAccessType);
		}
		// contentID
		String contentContentID = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objcontentID,
				"contentID displayed");
		if (!contentContentID.equals(contentID)) {
			extent.extentLoggerFail("", "Invalid contentID is displayed instead of " + contentID);
			logger.error("Invalid contentID is displayed instead of " + contentID);
		}
		// contentType
		String contentType = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objcontentType,
				"contentType displayed");
		if (!contentType.equals(contentContentType)) {
			extent.extentLoggerFail("", "Invalid contentType is displayed instead of " + contentContentType);
			logger.error("Invalid contentType is displayed instead of " + contentContentType);
		}
		// episodeName
		String episodeName = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objEpisodeName,
				"episodeName displayed");
		if (!episodeName.equals(contentName)) {
			extent.extentLoggerFail("", "Invalid episodeName is displayed instead of " + contentName);
			logger.error("Invalid episodeName is displayed instead of " + contentName);
		}
		// episodeNumber
		String episodeNumber = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objEpisodeNumber,
				"episodeNumber displayed");
		if (!episodeNumber.equals(contentEpisodeNumber)) {
			extent.extentLoggerFail("", "Invalid episodeNumber is displayed instead of " + contentEpisodeNumber);
			logger.error("Invalid episodeNumber is displayed instead of " + contentEpisodeNumber);
		}
		// genre
		String genre = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objGenreC, "genre displayed");
		if (!genre.equals(contentGenre)) {
			extent.extentLoggerFail("", "Invalid genre is displayed instead of " + contentGenre);
			logger.error("Invalid genre is displayed instead of " + contentGenre);
		}
		// originalLanguage
		String originalLanguage = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objOriginalLanguage,
				"originalLanguage displayed");
		if (!originalLanguage.equals(contentAudioLanguage)) {
			extent.extentLoggerFail("", "Invalid originalLanguage is displayed instead of " + contentAudioLanguage);
			logger.error("Invalid originalLanguage is displayed instead of " + contentAudioLanguage);
		}
		// platformName
		String platformName = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objPlatformName,
				"platformName displayed");
		if (!platformName.equals("Android App")) {
			extent.extentLoggerFail("", "Invalid platformName is displayed instead of 'Android App'");
			logger.error("Invalid platformName is displayed instead of 'Android App'");
		}
		// playbackQuality
		String playbackQuality = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objPlaybackQuality,
				"playbackQuality displayed");
		if (playbackQuality.equals("") || playbackQuality.equalsIgnoreCase("NA") || playbackQuality.equals(null)) {
			extent.extentLoggerFail("", "Invalid playbackQuality is displayed");
			logger.error("Invalid playbackQuality is displayed");
		}
		// playerVersion
		String playerVersion = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objPlayerVersion,
				"playerVersion displayed");
		if (playerVersion.equals("") || playerVersion.equalsIgnoreCase("NA") || playerVersion.equals(null)) {
			extent.extentLoggerFail("", "Invalid playerVersion is displayed");
			logger.error("Invalid playerVersion is displayed");
		}
		// pubDate
		String pubDate = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objPubDate, "pubDate displayed");
		if (pubDate.equals("") || pubDate.equalsIgnoreCase("NA") || pubDate.equals(null)) {
			extent.extentLoggerFail("", "Invalid pubDate is displayed");
			logger.error("Invalid pubDate is displayed");
		}
		// rootID
		String rootID = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objRootID, "rootID displayed");
		if (!rootID.equals(contentRootID)) {
			extent.extentLoggerFail("", "Invalid rootID is displayed instead of " + contentRootID);
			logger.error("Invalid rootID is displayed instead of " + contentRootID);
		}
		// show
		String show = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objShow, "show displayed");
		if (!show.equals(contentShow)) {
			extent.extentLoggerFail("", "Invalid show is displayed instead of " + contentShow);
			logger.error("Invalid show is displayed instead of " + contentShow);
		}
		// streamingProtocol
		String streamingProtocol = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objStreamingProtocol,
				"streamingProtocol displayed");
		if (streamingProtocol.equals("") || streamingProtocol.equalsIgnoreCase("NA")
				|| streamingProtocol.equals(null)) {
			extent.extentLoggerFail("", "Invalid streamingProtocol is displayed");
			logger.error("Invalid streamingProtocol is displayed");
		}
		// subtitle
		String subtitle = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objSubtitle, "subtitle displayed");
		if (subtitle.equals("") || subtitle.equalsIgnoreCase("NA") || subtitle.equals(null)) {
			extent.extentLoggerFail("", "Invalid subtitle is displayed");
			logger.error("Invalid subtitle is displayed");
		}
		// videoStartPoint
		String videoStartPoint = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objVideoStartPoint,
				"videoStartPoint displayed");
		if (videoStartPoint.equals("") || videoStartPoint.equalsIgnoreCase("NA") || videoStartPoint.equals(null)) {
			extent.extentLoggerFail("", "Invalid videoStartPoint is displayed");
			logger.error("Invalid videoStartPoint is displayed");
		}
	}
/**
 * @note This methos is used for Device Tags verification
 * @param webdriver
 * @throws Exception
 */
	public void verifyConvivaDeviceTagsVerification(WebDriver webdriver) throws Exception {
		extent.HeaderChildNode("TC 45 : Device Tags verification");
		// Browser Name
		String browserName = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objBrowserName,
				"Browser Name displayed");
		if (!browserName.equals("Native App")) {
			extent.extentLoggerFail("", "Invalid Browser Name is displayed");
			logger.error("Invalid Browser Name is displayed");
		}
		// Browser Version
		String browserVersion = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objBrowserVersion,
				"Browser Version displayed");
		if (!browserVersion.equals("Native App")) {
			extent.extentLoggerFail("", "Invalid Browser Version is displayed");
			logger.error("Invalid Browser Version is displayed");
		}
		// Device Hardware Type
		String deviceHardwareType = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objDeviceHardwareType,
				"Device Hardware Type displayed");
		if (!deviceHardwareType.equals("Mobile Phone")) {
			extent.extentLoggerFail("", "Invalid Device Hardware Type is displayed");
			logger.error("Invalid Device Hardware Type is displayed");
		}
		// Device Manufacturer
		String deviceManufacturer = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objDeviceManufacturer,
				"Device Manufacturer displayed");
		if (deviceManufacturer.equals("") || deviceManufacturer.equalsIgnoreCase("NA")
				|| deviceManufacturer.equals(null)) {
			extent.extentLoggerFail("", "Invalid Device Manufacturer is displayed");
			logger.error("Invalid Device Manufacturer is displayed");
		}
		// Device Marketing Name
		String deviceMarketingName = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objDeviceMarketingName,
				"Device Marketing Name displayed");
		if (deviceMarketingName.equals("") || deviceMarketingName.equalsIgnoreCase("NA")
				|| deviceMarketingName.equals(null)) {
			extent.extentLoggerFail("", "Invalid Device Marketing Name is displayed");
			logger.error("Invalid Device Marketing Name is displayed");
		}
		// Device Model
		String deviceModel = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objDeviceModel,
				"Device Model displayed");
		if (deviceModel.equals("") || deviceModel.equalsIgnoreCase("NA") || deviceModel.equals(null)) {
			extent.extentLoggerFail("", "Invalid Device Model is displayed");
			logger.error("Invalid Device Model is displayed");
		}
		// Device Name
		String deviceName = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objDeviceName,
				"Device Name displayed");
		if (!deviceName.equals("Android Phone")) {
			extent.extentLoggerFail("", "Invalid Device Name is displayed");
			logger.error("Invalid Device Name is displayed");
		}
		// Device Operating System
		String deviceOperatingSystem = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objDeviceOS,
				"Device Operating System displayed");
		if (!deviceOperatingSystem.equals("Android")) {
			extent.extentLoggerFail("", "Invalid Device Operating System is displayed");
			logger.error("Invalid Device Operating System is displayed");
		}
		// Device Operating System Family
		String deviceOperatingSystemFamily = getTextFromRefreshingConvivaPage(webdriver,
				PWAConvivaPage.objDeviceOSFamily, "Device Operating System Family displayed");
		if (!deviceOperatingSystemFamily.equals("Android")) {
			extent.extentLoggerFail("", "Invalid Device Operating System Family is displayed");
			logger.error("Invalid Device Operating System Family is displayed");
		}
		// Device Operating System Version
		String deviceOSVersion = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objDeviceOSVersion,
				"Device Operating System Version displayed");
		if (deviceOSVersion.equals("") || deviceOSVersion.equalsIgnoreCase("NA") || deviceOSVersion.equals(null)) {
			extent.extentLoggerFail("", "Invalid Device Operating System Version is displayed");
			logger.error("Invalid Device Operating System Version is displayed");
		}
		// Player Framework Name
		String playerFrameworkName = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objPlayerFrameworkName,
				"Player Framework Name displayed");
		if (!playerFrameworkName.equals("Zee5 Kaltura Player-Android")) {
			extent.extentLoggerFail("", "Invalid Player Framework Name is displayed");
			logger.error("Invalid Player Framework Name is displayed");
		}
		// Player Framework Version
		String playerFrameworkVersion = getTextFromRefreshingConvivaPage(webdriver,
				PWAConvivaPage.objPlayerFrameworkVersion, "Player Framework Version displayed");
		if (!playerFrameworkVersion.equals("Zee5 Kaltura Player-Android 4.9.0")) {
			extent.extentLoggerFail("", "Invalid Player Framework Version is displayed");
			logger.error("Invalid Player Framework Version is displayed");
		}
		// Conviva Library Version
		String comvivaLibraryVersion = getTextFromRefreshingConvivaPage(webdriver,
				PWAConvivaPage.objConvivaLibraryVersion, "Conviva Library Version displayed");
		if (comvivaLibraryVersion.equals("") || comvivaLibraryVersion.equalsIgnoreCase("NA")
				|| comvivaLibraryVersion.equals(null)) {
			extent.extentLoggerFail("", "Invalid Conviva Library Version is displayed");
			logger.error("Invalid Conviva Library Version is displayed");
		}
		// Player Name
		String playerName = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objPlayerName, "Player Name");
		if (!playerName.equals("Kaltura Android")) {
			extent.extentLoggerFail("", "Invalid Player Name is displayed");
			logger.error("Invalid Player Name is displayed");
		}
	}
/**
 * @Note This method is used for Required Tags verification
 * @param webdriver
 * @param requiredTagsExpectedValues
 * @throws Exception
 */
	public void verifyConvivaRequiredTagsVerification(WebDriver webdriver, ArrayList<String> requiredTagsExpectedValues)
			throws Exception {
		extent.HeaderChildNode("TC 46 : Required Tags verification");
		String expectedAssetName = requiredTagsExpectedValues.get(0);
		String expectedClientID = requiredTagsExpectedValues.get(1);
		String expectedSessionID = requiredTagsExpectedValues.get(2);
		String expectedContentLength = requiredTagsExpectedValues.get(3) + " s";
		// Session ID
		String sessionID = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objSessionID, "Session ID");
		if (!sessionID.equals(expectedSessionID)) {
			extent.extentLoggerFail("", "Session ID mismatch in device validation screen and details screen");
			logger.error("Session ID mismatch in device validation screen and details screen");
		}
		// Viewer ID
		String viewerID = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objViewerID, "Viewer ID");
		if (viewerID.equals("") || viewerID.equalsIgnoreCase("NA") || viewerID.equals(null)) {
			extent.extentLoggerFail("", "Invalid Viewer ID is displayed");
			logger.error("Invalid Viewer ID is displayed");
		}
		// Client ID
		String clientID = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objClientID, "Client ID");
		if (!clientID.equals(expectedClientID)) {
			extent.extentLoggerFail("", "Client ID mismatch in device validation screen and details screen");
			logger.error("Client ID mismatch in device validation screen and details screen");
		}
		// Session Status
		String sessionStatus = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objSessionStatus,
				"Session Status");
		if (!sessionStatus.equals("Playing")) {
			extent.extentLoggerFail("", "Incorrect Session Status is displayed instead of 'Playing'");
			logger.error("Incorrect Session Status is displayed instead of 'Playing'");
		}
		// Asset Name
		String assetname = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objAssetName, "Asset Name");
		if (!assetname.equals(expectedAssetName)) {
			extent.extentLoggerFail("", "Incorrect Asset Name is displayed instead of " + expectedAssetName);
			logger.error("Incorrect Asset Name is displayed instead of " + expectedAssetName);
		}
		// Stream URL
		String streamURL = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objStreamURL, "Stream URL");
		if (streamURL.equals("") || streamURL.equalsIgnoreCase("NA") || streamURL.equals(null)) {
			extent.extentLoggerFail("", "Invalid Stream URL is displayed");
			logger.error("Invalid Stream URL is displayed");
		}
		// Video (Live/VoD)
		String video = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objVideoLiveVOD, "Video (Live/VoD)");
		if (!video.equals("VOD")) {
			extent.extentLoggerFail("", "Incorrect Video type is displayed instead of VOD");
			logger.error("Incorrect Video type is displayed instead of VOD");
		}
		// Content Length
		String contentLength = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objAssetDuration,
				"Content Length");
		if (!contentLength.equals(expectedContentLength)) {
			extent.extentLoggerFail("", "Incorrect Content Length is displayed instead of " + expectedContentLength);
			logger.error("Incorrect Content Length is displayed instead of " + expectedContentLength);
		}
		// Average % Complete
		String avgPercentComplete = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objAvgPercentageComplete,
				"Average % Complete");
		if (avgPercentComplete.equals("") || avgPercentComplete.equalsIgnoreCase("NA")
				|| avgPercentComplete.equals(null)) {
			extent.extentLoggerFail("", "Invalid Average % Complete is displayed");
			logger.error("Invalid Average % Complete is displayed");
		}
		// City
		String city = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objCity, "City");
		if (city.equals("") || city.equalsIgnoreCase("NA") || city.equals(null)) {
			extent.extentLoggerFail("", "Invalid City is displayed");
			logger.error("Invalid City is displayed");
		}
		// State
		String state = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objState, "State");
		if (state.equals("") || state.equalsIgnoreCase("NA") || state.equals(null)) {
			extent.extentLoggerFail("", "Invalid State is displayed");
			logger.error("Invalid State is displayed");
		}
		// Country
		String country = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objCountry, "Country");
		if (!country.equals("India")) {
			extent.extentLoggerFail("", "Invalid Country is displayed instead of 'India'");
			logger.error("Invalid Country is displayed instead of 'India'");
		}
		// ASNumber
		String ASNumber = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objASNumber, "ASNumber");
		if (ASNumber.equals("") || ASNumber.equalsIgnoreCase("NA") || ASNumber.equals(null)) {
			extent.extentLoggerFail("", "Invalid ASNumber is displayed");
			logger.error("Invalid ASNumber is displayed");
		}
		// ASName
		String ASName = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objASName, "ASName");
		if (ASName.equals("") || ASName.equalsIgnoreCase("NA") || ASName.equals(null)) {
			extent.extentLoggerFail("", "Invalid ASName is displayed");
			logger.error("Invalid ASName is displayed");
		}
		// CDN
		String cdn = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objCDN, "CDN");
		if (cdn.equals("") || cdn.equalsIgnoreCase("NA") || cdn.equals(null)) {
			extent.extentLoggerFail("", "Invalid CDN is displayed");
			logger.error("Invalid CDN is displayed");
		}
		// ISP
		String isp = getTextFromRefreshingConvivaPage(webdriver, PWAConvivaPage.objISP, "ISP");
		if (isp.equals("") || isp.equalsIgnoreCase("NA") || isp.equals(null)) {
			extent.extentLoggerFail("", "Invalid ISP is displayed");
			logger.error("Invalid ISP is displayed");
		}
		// Device Connection Type
		String deviceConnectionType = getTextFromRefreshingConvivaPage(webdriver,
				PWAConvivaPage.objDeviceConnectionType, "Device Connection Type");
		if (deviceConnectionType.equals("") || deviceConnectionType.equalsIgnoreCase("NA")
				|| deviceConnectionType.equals(null)) {
			extent.extentLoggerFail("", "Invalid Device Connection Type is displayed");
			logger.error("Invalid Device Connection Type is displayed");
		}
	}
/**
 * @note This method is used to clear app data and logging in to the app
 * @param userType
 * @throws Exception
 */
	public void ZEE5AppClearAndLogin(String userType) throws Exception {
		tearDown();
		new Zee5ApplicasterBusinessLogic("zee");
		accessDeviceLocationPopUp("Allow", userType);
		navigateToIntroScreen_DisplaylangScreen();
		zeeApplicasterLogin(userType);
	}
/**
 * @note This method is used for Refreshing element the conviva page
 * @param webdriver
 * @param locator
 * @param displayText
 * @return
 * @throws Exception
 */
	public boolean clickElementInRefreshingConvivaPage(WebDriver webdriver, By locator, String displayText)
			throws Exception {
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS);
			try {
				webdriver.findElement(locator).click();
				logger.info("Clicked on " + displayText);
				extent.extentLogger("", "Clicked on " + displayText);
				return true;
			} catch (Exception e) {
				try {
					js.executeScript("window.scrollBy(0,100)", "");
					waitTime(2000);
					System.out.println("Waiting ..");
				} catch (Exception e1) {
				}
			}
		}
		return false;
	}
/**
 * @note This method is used for refreshing conviva page to check for element
 * @param webdriver
 * @param locator
 * @param displayText
 * @return
 * @throws Exception
 */
	public String getTextFromRefreshingConvivaPage(WebDriver webdriver, By locator, String displayText)
			throws Exception {
		for (int i = 1; i <= 500; i++) {
			webdriver.manage().timeouts().implicitlyWait(3, TimeUnit.SECONDS);
			try {
				String text = webdriver.findElement(locator).getAttribute("innerText");
				logger.info(displayText + " : " + text);
				extent.extentLogger("", displayText + " : " + text);
				return text;
			} catch (Exception e) {
				try {
					js.executeScript("window.scrollBy(0,100)", "");
					waitTime(2000);
					System.out.println("Waiting ..");
				} catch (Exception e1) {
				}
			}
		}
		logger.info("Text fetch failed for " + displayText);
		extent.extentLogger("", "Text fetch failed for " + displayText);
		return "";
	}
/**
 * @note this method is used for checking the date difference between dates
 * @param startDate
 * @param endDate
 * @return
 * @throws Exception
 */
	public ArrayList<Integer> getDateDifference(Date startDate, Date endDate) throws Exception {
		ArrayList<Integer> timeValues = new ArrayList<Integer>();
		long duration = endDate.getTime() - startDate.getTime();
		long diffInMilliSeconds = TimeUnit.MILLISECONDS.toMillis(duration);
		int milliSeconds = (int) Math.floorMod(diffInMilliSeconds, 1000);
		int seconds = (int) (diffInMilliSeconds / 1000);
		int mins = 0;
		if (seconds >= 60) {
			mins = seconds / 60;
			seconds = Math.floorMod(seconds, 60);
		}
		System.out.println("minutes: " + mins);
		System.out.println("seconds: " + seconds);
		System.out.println("milliSeconds: " + milliSeconds);
		timeValues.add(mins);
		timeValues.add(seconds);
		timeValues.add(milliSeconds);
		return timeValues;
	}
/**
 * @note this method fethes the date in specified format and converts it to string
 * @param date
 * @return
 * @throws Exception
 */
	public String getDateDetails(Date date) throws Exception {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		String dateString = dateFormat.format(date).toString();
		return dateString;
	}
/**
 * @note this method is used to fetch the content playback start time.
 * @param startDate
 * @param endDate
 * @param playerTapDetails
 * @return
 * @throws Exception
 */
	@SuppressWarnings({ "rawtypes", "unused" })
	public ArrayList<Date> getPlayerStartEndTime(Date startDate, Date endDate, ArrayList<Integer> playerTapDetails)
			throws Exception {
		int x = playerTapDetails.get(0);
		int y = playerTapDetails.get(1);
		ArrayList<Date> startAndEndTime = new ArrayList<Date>();
		getDriver().manage().timeouts().implicitlyWait(5, TimeUnit.MILLISECONDS);
		String playerHeadPosition = "0";
		boolean adPlay = false, adMessage = false;
		TouchAction act = new TouchAction(getDriver());
		main: for (int j = 0; j < 1000; j++) {
			try {
				getDriver().findElement(AMDPlayerScreen.objAd2);
				if (adMessage == false) {
					logger.info("Ad play in progress");
					extent.extentLogger("AdPlayInProgress", "Ad play in progress");
					adMessage = true;
				}
			} catch (Exception e1) {
				startDate = new Date();
				for (int k = 0; k < 50; k++) {
					try {
						act.press(PointOption.point(x, y)).release().perform();
						WebElement timer = getDriver().findElement(AMDPlayerScreen.objTimer);
						endDate = new Date();
						playerHeadPosition = timer.getText();
						screencapture();
						break main;
					} catch (Exception e2) {
					}
				}

			}
		}
		logger.info("Start Time calculated: " + getDateDetails(startDate));
		extent.extentLogger("", "Start Time calculated: " + getDateDetails(startDate));
		logger.info("Player head position : " + playerHeadPosition);
		extent.extentLogger("AdPlayInProgress", "Player head position : " + playerHeadPosition);
		logger.info("End Time calculated: " + getDateDetails(endDate));
		extent.extentLogger("", "End Time calculated: " + getDateDetails(endDate));
		startAndEndTime.add(startDate);
		startAndEndTime.add(endDate);
		return startAndEndTime;
	}
/**
 * @Note This method is used to fetch the phone public IP address.
 * @return
 * @throws Exception
 */
	public String getPhonePublicIP() throws Exception {
		String cmd = "adb shell ip address show";
		Process p = Runtime.getRuntime().exec(cmd);
		BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
		String line = "", doc = "", ip = "";
		while ((line = br.readLine()) != null) {
			doc = doc + line;
		}
		if (doc.contains(" scope global temporary dynamic "))
			doc = doc.split("scope global temporary dynamic")[0];
		else if (doc.contains(" scope global dynamic "))
			doc = doc.split(" scope global dynamic ")[0];
		String[] inets = doc.split("inet6");
		doc = inets[inets.length - 1];
		ip = doc.split("/64")[0];
		logger.info("ip :: " + doc);
		return ip;
	}
/**
 * 
 * 
 * @param token
 */
	public static void decodeTokenParts(String token) {
		String[] parts = token.split("\\.", 0);
		byte[] bytes = Base64.getUrlDecoder().decode(parts[1]);
		String decodedString = new String(bytes, StandardCharsets.UTF_8);
		System.out.println("Decoded: " + decodedString);
	}
/**
 * @note this method fetches the Ip address
 * @param useIPv4
 * @return
 */
	public static String getIPAddressOfSystem(boolean useIPv4) {
		try {
			List<NetworkInterface> interfaces = Collections.list(NetworkInterface.getNetworkInterfaces());
			for (NetworkInterface intf : interfaces) {
				List<InetAddress> addrs = Collections.list(intf.getInetAddresses());
				for (InetAddress addr : addrs) {
					if (!addr.isLoopbackAddress()) {
						String sAddr = addr.getHostAddress();
						// boolean isIPv4 = InetAddressUtils.isIPv4Address(sAddr);
						boolean isIPv4 = sAddr.indexOf(':') < 0;

						if (useIPv4) {
							if (isIPv4)
								return sAddr;
						} else {
							if (!isIPv4) {
								int delim = sAddr.indexOf('%'); // drop ip6 zone suffix
								return delim < 0 ? sAddr.toUpperCase() : sAddr.substring(0, delim).toUpperCase();
							}
						}
					}
				}
			}
		} catch (Exception ex) {
		} // for now eat exceptions
		return "";
	}
/**
 * @note This method is used for verifying forward and backward functionality of the player.
 * @param ForwardOrRewind
 * @throws Exception
 */
	@SuppressWarnings("rawtypes")
	public void forwardRewindPlayer(String ForwardOrRewind) throws Exception {
		touchAction = new TouchAction(getDriver());
		int playerHeight = 0, playerWidth = 0, heightOffset = 0, widthOffsetForward = 0, widthOffsetRewind = 0,
				playerX = 0, playerY = 0;
		int requiredY = 0, requiredXForward = 0, requiredXRewind = 0;
		try {
			WebElement player = getDriver().findElement(AMDPlayerScreen.objplayer);
			playerHeight = player.getSize().getHeight();
			playerWidth = player.getSize().getWidth();
			heightOffset = playerHeight / 3;
			widthOffsetForward = playerWidth / 8;
			widthOffsetRewind = (playerWidth * 7) / 8;
			playerX = player.getLocation().getX();
			playerY = player.getLocation().getY();
			requiredY = playerY + heightOffset;
			requiredXForward = playerX + widthOffsetForward;
			requiredXRewind = playerX + widthOffsetRewind;
			if (ForwardOrRewind.equalsIgnoreCase("forward")) {
				touchAction.press(PointOption.point(requiredXForward, requiredY)).release().perform()
						.press(PointOption.point(requiredXForward, requiredY)).release().perform();
				logger.info("Double tapped to forward by 10 seconds");
				extent.extentLogger("", "Double tapped to forward by 10 seconds");
			} else {
				touchAction.press(PointOption.point(requiredXRewind, requiredY)).release().perform()
						.press(PointOption.point(requiredXRewind, requiredY)).release().perform();
				logger.info("Double tapped to rewind by 10 seconds");
				extent.extentLogger("", "Double tapped to rewind by 10 seconds");
			}
		} catch (Exception e) {
		}
	}
/**
 * @Note This method is used for clicking on the seek bar 
 * @param percent
 * @throws Exception
 */
	@SuppressWarnings("rawtypes")
	public void clickOnProgressBar(int percent) throws Exception {
		touchAction = new TouchAction(getDriver());
		int seekbarX = 0, seekbarY = 0, seekbarHeight = 0, seekbarWidth = 0, offsetX = 0, offsetY = 0;
		int requiredX = 0, requiredY = 0;
		try {
			WebElement seekbar = getDriver().findElement(AMDPlayerScreen.objProgressBar);
			seekbarX = seekbar.getLocation().getX();
			seekbarY = seekbar.getLocation().getY();
			seekbarHeight = seekbar.getSize().getHeight();
			seekbarWidth = seekbar.getSize().getWidth();
			offsetX = (seekbarWidth * percent) / 100;
			offsetY = seekbarHeight / 2;
			requiredX = seekbarX + offsetX;
			requiredY = seekbarY + offsetY;
			touchAction.press(PointOption.point(requiredX, requiredY)).release().perform();
			logger.info("Clicked on " + percent + " percent of the seek bar");
			extent.extentLogger("", "Clicked on " + percent + " percent of the seek bar");
		} catch (Exception e) {
		}
	}
/**
 * @note This method is used for seeking the progress bar
 * @param percent
 * @throws Exception
 */
	@SuppressWarnings("rawtypes")
	public void dragOnProgressBar(int percent) throws Exception {
		touchAction = new TouchAction(getDriver());
		int seekbarX = 0, seekbarY = 0, seekbarHeight = 0, seekbarWidth = 0, offsetX = 0, offsetY = 0;
		int requiredX = 0, requiredY = 0;
		try {
			WebElement seekbar = getDriver().findElement(AMDPlayerScreen.objProgressBar);
			seekbarX = seekbar.getLocation().getX();
			seekbarY = seekbar.getLocation().getY();
			seekbarHeight = seekbar.getSize().getHeight();
			seekbarWidth = seekbar.getSize().getWidth();
			offsetX = (seekbarWidth * percent) / 100;
			offsetY = seekbarHeight / 2;
			requiredX = seekbarX + offsetX;
			requiredY = seekbarY + offsetY;
			touchAction.longPress(PointOption.point(seekbarX, requiredY))
					.moveTo(PointOption.point(requiredX, requiredY)).release().perform();
			logger.info("Dragged to " + percent + " percent on the seek bar");
			extent.extentLogger("", "Dragged to " + percent + " percent of the seek bar");
		} catch (Exception e) {
		}
	}

	// --------------------------------------------------------------- DFP
	// --------------------------------------------------------------
/**
 * @note This method is used for Login functionality for DFP user.
 * @param LoginMethod
 * @throws Exception
 */
	public void zee5AppLoginDFP(String LoginMethod) throws Exception {
		extent.HeaderChildNode("Login Functionality");
		waitTime(8000);
		String UserType = getParameterFromXML("userType");
		if (UserType.equals("Guest")) {
			extent.extentLogger("userType", "UserType : Guest");
		}

//		verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Login link");
//		waitTime(3000);

		switch (LoginMethod) {
		case "Guest":
			extent.HeaderChildNode("Guest User");
			extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");
			waitTime(5000);
//			hideKeyboard();
//			verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Skip link");

			waitTime(8000);
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as NonSubscribed User");

			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");

			verifyElementPresentAndClick(AMDOnboardingScreen.objZeeMoreButton, "More button");

			verifyElementPresentAndClick(AMDOnboardingScreen.objZeeLoginRegisterLink, "Login/Register Link");

			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User");

			String SubscribedUsername = getParameterFromXML("SubscribedUserName");
			String SubscribedPassword = getParameterFromXML("SubscribedPassword");

			verifyElementPresentAndClick(AMDOnboardingScreen.objZeeMoreButton, "More button");

			verifyElementPresentAndClick(AMDOnboardingScreen.objZeeLoginRegisterLink, "Login/Register Link");

			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SubscribedUsername, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;
		}
	}
/**
 * @note This method is used for handling device location pop up and update pop up
 * @param permission
 * @param userType
 * @throws Exception
 */
	public void accessDeviceLocationPopUpDFP(String permission, String userType) throws Exception {
		extent.HeaderChildNode("Access Device Location PopUp");
		extent.extentLogger("User Type", "UserType : " + userType);
		logger.info("UserType : " + userType);
		System.out.println("Access Device Location PopUp");
		Thread.sleep(10000);
		Thread.sleep(10000);
		if (verifyIsElementDisplayed(AMDOnboardingScreen.objUpdateZee5PopUpNOTHANKSButton, "NO THANKS Button")) {
			verifyElementPresentAndClick(AMDOnboardingScreen.objUpdateZee5PopUpNOTHANKSButton, "NO THANKS Button");
		} else {
			System.out.println("UpdateZee5 Not displayed");
		}
		Thread.sleep(10000);
		if (verifyElementExist(AMDOnboardingScreen.objAllowLocationAccessPopup, "AllowPopup")) {
			Wait(5000);

			String str1 = getAttributValue("text", AMDOnboardingScreen.objFirstPermissionButton);
			String str2 = getAttributValue("text", AMDOnboardingScreen.objSecondPermissionButton);
			System.out.println(str1);
			System.out.println(str2);

			if (str1.contains("ALLOW")) {
				System.out.println("ALLOW is present");
				click(AMDOnboardingScreen.ele1Allow(str1), str1);
			} else if (str1.contains("Allow")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.ele1Allow(str1), str1);
			} else if (str2.contains("ALLOW")) {
				System.out.println("ALLOW is present");
				click(AMDOnboardingScreen.ele1Allow(str2), str2);
			} else if (str2.contains("Allow")) {
				System.out.println("Allow is present");
				click(AMDOnboardingScreen.ele1Allow(str2), str2);
			} else if (str1.contains("WHILE USING THE APP")) {
				System.out.println("WHILE USING THE APP is present");
				click(AMDOnboardingScreen.ele1Allow(str1), str1);
			}

			Thread.sleep(10000);
		} else {
			System.out.println("Access Device Location PopUp not displayed");
		}

	}
/**
 * @note This method is used for handling onboarding tc  
 * @throws Exception
 */
	public void selectYourCountryAndLanguage() throws Exception {
		extent.HeaderChildNode("Select Your country and Language");
		verifyElementPresentAndClick(AMDOnboardingScreen.objContinueBtnInCountryPopUp,
				"SelectYourCountry Continue Button");

		waitTime(5000);

		// searchAndClick(AMDOnboardingScreen.objHindiLanguage, "Hindi Langauge");
		searchAndClick(AMDOnboardingScreen.objMarathiLanguage, "Marathi Langauge");
		searchAndClick(AMDOnboardingScreen.objTeluguLanguage, "Telugu Langauge");
		searchAndClick(AMDOnboardingScreen.objTamilLanguage, "Tamil Langauge");
		searchAndClick(AMDOnboardingScreen.objMalayalamLanguage, "Malayalam Langauge");
		searchAndClick(AMDOnboardingScreen.objBengaliLanguage, "Bengali Langauge");
		searchAndClick(AMDOnboardingScreen.objGujaratiLanguage, "Gujarati Langauge");
		searchAndClick(AMDOnboardingScreen.objPunjabiLanguage, "Punjabi Langauge");
		searchAndClick(AMDOnboardingScreen.objBhojpuriLanguage, "Bhojpuri Langauge");
		searchAndClick(AMDOnboardingScreen.objOriyaLanguage, "Oriya Langauge");

		verifyElementPresentAndClick(AMDOnboardingScreen.objContinueBtnInLanguagePopUp, "Continue Button");

	}
/**
 * @note This method is used for verifying masthead ads
 * @param userType
 * @throws Exception
 */
	public void validateNativeAds(String userType) throws Exception {
		extent.HeaderChildNode("Native Ads Validation");

		verifyElementPresentAndClick(AMDHomePage.objHomeTab1, "Home Tab");
		checkForNativeAds("Home Tab", userType);

		verifyElementPresentAndClick(AMDHomePage.objTvShowsTab, "TV Shows Tab");
		checkForNativeAds("TV Shows Tab", userType);

//		verifyElementPresentAndClick(AMDHomePage.objMoviesTab, "Movies Tab");
//		checkForNativeAds("Movies Tab");

//		verifyElementPresentAndClick(AMDHomePage.objNewsTab, "News Tab");
//		checkForNativeAds("News Tab",userType);

	}
/**
 * @note this method is used for verifying native ads 
 * @param str
 * @param userType
 */
	public void checkForNativeAds(String str, String userType) {

		if (!userType.equalsIgnoreCase("SubscribedUser")) {
			int j = 0;

			for (int i = 0; i <= 20; i++) {

				if (verifyIsElementDisplayed(AMDHomePage.objNativeAd, "Native Ad")) {
					extent.extentLoggerPass("", "Native Ad is displayed in " + str);
					break;
				} else {
					PartialSwipe("UP", 2);
					waitTime(8000);
					j = i;
				}
			}

			if (j == 20) {
				extent.extentLoggerFail("", "Native Ad is not displayed in " + str);
			}
		} else {
			waitTime(8000);

			int j = 0;

			for (int i = 0; i <= 10; i++) {

				if (verifyIsElementDisplayed(AMDHomePage.objNativeAd, "Native Ad")) {
					extent.extentLoggerFail("", "Native Ad is displayed in " + str);
					break;
				} else {
					PartialSwipe("UP", 2);
					waitTime(8000);
					j = i;
				}
			}

			if (j == 20) {
				extent.extentLoggerPass("", "Native Ad is not displayed in " + str);
			}

		}
	}
/**
 * @note This method is used for validating masthead ads.
 * @param userType
 * @throws Exception
 */
	public void validateMastheadAds(String userType) throws Exception {
		extent.HeaderChildNode("Masthead Ads Validation");

		verifyElementPresentAndClick(AMDHomePage.objHomeBottomBtn, "Home Button");
		waitTime(5000);

		verifyElementPresentAndClick(AMDHomePage.objHomeTab1, "Home Tab");
		checkForMastheadAds("Home Tab", userType);

		verifyElementPresentAndClick(AMDHomePage.objTvShowsTab, "TV Shows Tab");
		checkForMastheadAds("TV Shows Tab", userType);

		verifyElementPresentAndClick(AMDHomePage.objMoviesTab, "Movies Tab");
		checkForMastheadAds("Movies Tab", userType);

		verifyElementPresentAndClick(AMDHomePage.objNewsTab, "News Tab");
		checkForMastheadAds("News Tab", userType);

	}
/**
 * @note this method is useed to verify the image+video masth head ad.
 * @param str
 * @param userType
 * @throws Exception
 */
	public void checkForMastheadAds(String str, String userType) throws Exception {

		if (!userType.equalsIgnoreCase("SubscribedUser")) {
			int j = 0;
			waitTime(8000);
			for (int i = 0; i <= 20; i++) {

				if (verifyIsElementDisplayed(AMDHomePage.objMastheadAd, "Masthead Ad")) {
					extent.extentLoggerPass("", "Masthead Ad is displayed in " + str);
					waitTime(10000);
					waitTime(3000);
					if (verifyIsElementDisplayed(AMDHomePage.objMastheadAdPlayIcon, "Play icon")) {
						verifyElementPresentAndClick(AMDHomePage.objMastheadAdPlayIcon, "Play icon");
						waitTime(2000);
						if (verifyIsElementDisplayed(AMDHomePage.objMastheadAdPlayPauseIcon, "Masthead Pause icon")) {
							extent.extentLoggerPass("", "pause icon is displayed on the playable masthead Ad");
						} else {
							extent.extentLoggerFail("", "pause icon is not displayed on the playable masthead Ad");
						}

						if (verifyIsElementDisplayed(AMDHomePage.objMastheadAdPlayMuteIcon, "Masthead Mute icon")) {
							extent.extentLoggerPass("", "Mute icon is displayed on the playable masthead Ad");
						} else {
							extent.extentLoggerFail("", "Mute icon is not displayed on the playable masthead Ad");
						}
					}

					break;
				} else {
					waitTime(8000);
					j = i;
				}
			}

			if (j == 20) {
				extent.extentLoggerFail("", "Masthead Ad is not displayed in " + str);
			}
		} else {
			int j = 0;
			waitTime(8000);
			for (int i = 0; i <= 5; i++) {

				if (verifyIsElementDisplayed(AMDHomePage.objMastheadAd, "Masthead Ad")) {
					extent.extentLoggerFail("", "Masthead Ad is displayed in " + str);
					waitTime(10000);
					waitTime(3000);

					break;
				} else {
					waitTime(8000);
					j = i;
				}
			}

			if (j == 20) {
				extent.extentLoggerPass("", "Masthead Ad is not displayed in " + str);
			}
		}

	}
/**
 * @note This method is used for handling complete profile CRPU dialog
 * @throws Exception
 */
	public void completeProfilePopUpClose() throws Exception {
		waitTime(15000);
		if (verifyIsElementDisplayed(AMDPlayerScreen.objCompleteProfilePopUp)) {
			logger.info("CompleteProfile PopUp is displayed");
			extent.extentLogger("Register Pop Up", "CompleteProfile PopUp is displayed");
			waitTime(5000);
			click(AMDGenericObjects.objPopUpDivider, "CompleteProfile PopUp");
//		Back(1);
		}
	}
/**
 * @note this method is used to verify the comapanion ads
 * @param userType
 * @param SearchContent
 * @throws Exception
 */
	public void validateCompanionAds(String userType, String SearchContent) throws Exception {
		extent.HeaderChildNode("Companion Ads Validation");

		verifyElementPresentAndClick(AMDHomePage.objHomeBottomBtn, "Home Button");
		waitTime(5000);

		verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, SearchContent + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objFirstSearchResult1(SearchContent), "Search result");
		waitTime(5000);
		waitTime(5000);

		verifyIsElementDisplayed(AMDHomePage.objCompanionAd, "Companion Ad");

		LoadingInProgress();
		adPlay();
		if (userType.equalsIgnoreCase("Guest")) {
			registerPopUpClose();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			completeProfilePopUpClose();
		}

		if (userType.equalsIgnoreCase("SubscribedUser")) {
			if (verifyIsElementDisplayed(AMDHomePage.objCompanionAd, "Companion Ad")) {
				extent.extentLoggerFail("", "Companion Ad is present");
			} else {
				extent.extentLoggerPass("", "Companion Ad is not present");
			}
		} else {
			if (verifyIsElementDisplayed(AMDHomePage.objCompanionAd, "Companion Ad")) {
				extent.extentLoggerPass("", "Companion Ad is present");
			} else {
				extent.extentLoggerFail("", "Companion Ad is not present");
			}
		}

		waitTime(15000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");

		if (verifyIsElementDisplayed(AMDPlayerScreen.objCurrentTime, "Current Time")) {
			extent.extentLoggerPass("", "Content played after Ad Play");
		} else {
			extent.extentLoggerFail("", "Content not played after Ad Play");
		}
	}
/**
 * @note This method is used to verify the preroll ads playback
 * @param userType
 * @param SearchContent
 * @throws Exception
 */
	public void validatePlaybackAds(String userType, String SearchContent) throws Exception {
		extent.HeaderChildNode("Validation of Playback Ads");
		verifyElementPresentAndClick(AMDHomePage.objHomeBottomBtn, "Home Button");
		waitTime(5000);

		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			extent.HeaderChildNode("Verify Ad View event");
			click(AMDSearchScreen.objSearchIcon, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, SearchContent + "\n", "Search bar");
			hideKeyboard();
			waitTime(4000);
			waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
			waitTime(4000);
//			click(AMDSearchScreen.objFirstContentInSearchResult, "Search result");
			click(AMDSearchScreen.objSearchResultContainsText(SearchContent), "Search Result");

			// PRE-ROLL
			waitTime(10000);
			waitTime(10000);
			boolean adPreroll = verifyIsElementDisplayed(AMDPlayerScreen.objAd);
			if (adPreroll == true) {
				logger.info("PreRoll Ad play in progress");
				extentLoggerPass("Ad", "PreRoll Ad play in progress");
				waitForAdToFinishInAmd1(AMDPlayerScreen.objAd);
			} else {
				logger.info("PreRoll Ad is not available for the content");
				extent.extentLogger("Ad", "PreRoll Ad is not available for the content");
			}
			boolean adPreroll1 = verifyIsElementDisplayed(AMDPlayerScreen.objAd1);
			if (adPreroll1 == true) {
				logger.info("PreRoll Bumper Ad play in progress");
				extentLoggerPass("Ad", "PreRoll Bumper Ad play in progress");
				waitForAdToFinishInAmd1(AMDPlayerScreen.objAd1);
			} else {
				logger.info("PreRoll Bumper Ad is not available for the content");
				extent.extentLogger("Ad", "PreRoll Bumper Ad is not available for the content");
			}

			System.out.println(userType);
			if (userType.equalsIgnoreCase("Guest")) {
				registerPopUpClose();
			} else {

			}

			if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				completeProfilePopUpClose();
			} else {

			}

			waitTime(10000);
			waitTime(10000);

			if (verifyIsElementDisplayed(AMDPlayerScreen.objPause, "pause icon")) {
				scrubProgressBarToMidDFP1(AMDPlayerScreen.objProgressBar);
			} else {
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
				scrubProgressBarToMidDFP1(AMDPlayerScreen.objProgressBar);
			}

			waitTime(5000);
//			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			waitTime(2000);

			// MID-ROLL
			boolean adMidRoll = verifyIsElementDisplayed(AMDPlayerScreen.objAd);
			if (adMidRoll) {
				logger.info("Mid roll Ad play in progress");
				extent.extentLoggerPass("Ad", "Mid roll Ad played in Midroll");
				waitForAdToFinishInAmd1(AMDPlayerScreen.objAd);
			} else {
				logger.info("Mid roll Ad is not available for the content");
				extent.extentLogger("Ad", "Mid roll Ad is not available for the content");
			}
			boolean adMidRoll1 = verifyIsElementDisplayed(AMDPlayerScreen.objAd1);
			if (adMidRoll1) {
				logger.info("Mid roll Ad play in progress");
				extent.extentLoggerPass("Ad", "Mid roll Ad played in Midroll");
				waitForAdToFinishInAmd1(AMDPlayerScreen.objAd1);
			} else {
				logger.info("Mid roll Ad is not available for the content");
				extent.extentLogger("Ad", "Mid roll Ad is not available for the content");
			}

			waitTime(10000);
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			scrubProgressBarTillEndDFP1(AMDPlayerScreen.objProgressBar);
			waitTime(5000);

			// POST-ROLL
			boolean adPostroll = verifyIsElementDisplayed(AMDPlayerScreen.objAd);
			if (adPostroll) {
				logger.info("Post Roll Ad play in progress");
				extent.extentLoggerPass("Ad", "Post Roll Ad played in Postroll");
				waitForAdToFinishInAmd1(AMDPlayerScreen.objAd);
			} else {
				logger.info("Post Roll Ad is not available for the content");
				extent.extentLogger("Ad", "Post Roll Ad is not available for the content");
			}
			boolean adPostroll1 = verifyIsElementDisplayed(AMDPlayerScreen.objAd1);
			if (adPostroll1) {
				logger.info("Post Roll Bumper Ad play in progress");
				extent.extentLoggerPass("Ad", "Post Roll Bumper Ad played in Postroll");
				waitForAdToFinishInAmd1(AMDPlayerScreen.objAd1);
			} else {
				logger.info("Ad is not available for the content");
				extent.extentLogger("Ad", "Post Roll Bumper Ad is not available for the content");
			}
		} else {

			extent.HeaderChildNode("Ad validation is not applicable for - " + userType);
			click(AMDSearchScreen.objSearchIcon, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, SearchContent + "\n", "Search bar");
			hideKeyboard();
			waitTime(4000);
			waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
			waitTime(4000);
//			click(AMDSearchScreen.objFirstContentInSearchResult, "Search result");
			click(AMDSearchScreen.objSearchResultContainsText(SearchContent), "Search Result");

			waitTime(8000);

			boolean ad = verifyIsElementDisplayed(AMDPlayerScreen.objAd);
			if (ad == true) {
				logger.info("Ad play in progress");
				extent.extentLoggerFail("Ad", "Ad played for Subscribed User");
			} else {
				logger.info("Ad is not available for Subscribed User");
				extent.extentLoggerPass("Ad", "Ad is not available for Subscribed User");
			}

		}
	}
/**
 * @note this method is used to verify the ads playback completed 
 * @param locator
 */
	public void waitForAdToFinishInAmd1(By locator) {
		// waitTime(20000);

		for (int i = 0; i <= 50; i++) {
			if (verifyIsElementDisplayed(locator)) {
				System.out.println("Ad is Playing");
			} else {
				System.out.println("Ad completed");
				break;
			}
		}

	}
/**
 * @note This method is used to verify midroll ad
 * @param byLocator1
 * @throws Exception
 */
	public void scrubProgressBarToMidDFP1(By byLocator1) throws Exception {

		// click(AMDPlayerScreen.objPauseIcon, "Pause");
		WebElement element = getDriver().findElement(byLocator1);
		Dimension size = element.getSize();
		Point point = element.getLocation();

		int getX = point.getX();
		int getY = point.getY();
		int height = (int) (size.getHeight());
		int width = (int) (size.getWidth());

		// System.out.println(getX);
		// System.out.println(getY);
		// System.out.println(height);
		// System.out.println(width);

		float midOfWidth = (float) (width * 0.5);
		int pointX = (int) (getX + midOfWidth);
		// System.out.println(pointX);
		float midOfHeight = (float) (height / 2);
		int pointY = (int) (getY + midOfHeight);
		// System.out.println(pointY);

		AndroidTouchAction touch = new AndroidTouchAction(getDriver());
		touch.longPress(LongPressOptions.longPressOptions().withElement(ElementOption.element(element)))
				.waitAction(WaitOptions.waitOptions(Duration.ofMillis(3000))).moveTo(PointOption.point(pointX, pointY))
				.release().perform();

	}
/**
 * @note This method is used for verifying the post roll ad.
 * @param byLocator1
 * @throws Exception
 */
	public void scrubProgressBarTillEndDFP1(By byLocator1) throws Exception {
//		click(AMDPlayerScreen.objPauseIcon, "Pause");

		WebElement element = getDriver().findElement(byLocator1);
		Dimension size = element.getSize();
		Point point = element.getLocation();

		int getX = point.getX();
		int getY = point.getY();
		int height = (int) (size.getHeight());
		int width = (int) (size.getWidth());

		// System.out.println(getX);
		// System.out.println(getY);
		// System.out.println(height);
		// System.out.println(width);

		float midOfWidth = (float) (width * 0.9);
		int pointX = (int) (getX + midOfWidth);
		// System.out.println(pointX);
		float midOfHeight = (float) (height / 2);
		int pointY = (int) (getY + midOfHeight);
		// System.out.println(pointY);

		AndroidTouchAction touch = new AndroidTouchAction(getDriver());
		touch.longPress(LongPressOptions.longPressOptions().withElement(ElementOption.element(element)))
				.waitAction(WaitOptions.waitOptions(Duration.ofMillis(3000))).moveTo(PointOption.point(pointX, pointY))
				.release().perform();
	}
/**
 * @note This method is used for Validation of charles Response Ads
 * @param userType
 * @param SearchContent
 * @throws Exception
 */
	public void validateCharlesResponseAds(String userType, String SearchContent) throws Exception {
		extent.HeaderChildNode("Validation of charles Response Ads");

		if (!userType.equalsIgnoreCase("SubscribedUser")) {
			waitTime(8000);
			Swipe("UP", 2);
			Swipe("DOWN", 2);
			waitTime(8000);
			click(AMDSearchScreen.objSearchIcon, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, SearchContent + "\n", "Search bar");
			hideKeyboard();
			waitTime(4000);
			waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
			waitTime(4000);
//		click(AMDSearchScreen.objFirstContentInSearchResult, "Search result");
			click(AMDSearchScreen.objSearchResultContainsText(SearchContent), "Search Result");

			waitTime(8000);

			boolean ad = verifyIsElementDisplayed(AMDPlayerScreen.objAd);
			if (ad == true) {
				logger.info("Ad play in progress");
				extent.extentLoggerPass("Ad", "Ad played");
			} else {
				logger.info("Ad is not available for Subscribed User");
				extent.extentLogger("Ad", "Ad is not available");
			}
			waitTime(8000);
			waitTime(8000);
			waitTime(8000);

		}
	}

	/**
	 * Sugar Box
	 */

	public static String getSugarBoxOTP() throws IOException {

		String getOTP = null;
		String SMSCommand = "adb shell content query --uri content://sms --projection address,body | grep SUGRBX | grep 0";

		Process process = Runtime.getRuntime().exec(SMSCommand);
		BufferedReader Result = new BufferedReader(new InputStreamReader(process.getInputStream()));

		try {
			getOTP = Result.readLine().split("Use")[1].split(" ")[1].trim();
			System.out.println(getOTP);
		} catch (Exception e) {
			System.out.println("Failed to fetch the OTP " + e);
			logger.info("Failed to fetch the OTP " + e);
		}
		return getOTP;
	}
/**
 * @note this method is used to verify onboarding of SB
 * @param phoneNumber
 * @throws Exception
 */
	public void onboardingToSugarboxNetwork(String phoneNumber) throws Exception {
		extent.HeaderChildNode("Onboarding to SugarBox Network");
		System.out.println("\nOnboarding to SugarBox Network");

//		String phoneNumber = "9620001566";
		boolean notificationFlag = verifyElementPresent(AMDSugarbox.objSugrBxZoneNotification, "Sugarbox Notification");

		if (notificationFlag) {
			click(AMDSugarbox.objLocateBtn, "Locate btn");
			verifyElementPresentAndClick(AMDSugarbox.objAllowLocationPopup, "Allow");
			waitTime(10000);

			if (verifyElementIsNotDisplayed(AMDSugarbox.objConnectToSugarBox)) {
				click(AMDHomePage.objZee5Logo, "Zee5Logo");
				try {
					waitForElementDisplayed(AMDSugarbox.objSugarboxLogo, 30);
					click(AMDHomePage.objZee5Logo, "Zee5Logo");
					waitTime(2000);
					if (verifyElementIsNotDisplayed(AMDSugarbox.objSugarboxLogo)) {
						TurnONWifi();
					} else {
						verifyElementPresentAndClick(AMDSugarbox.objSugarboxLogo, "Logo");
						verifyElementPresentAndClick(AMDSugarbox.objConnectToSugarBox, "ConnectToSugarBox CTA");
						waitTime(3000);
						TurnONWifi();
					}
				} catch (Exception e) {
					// TODO: handle exception
					System.out.println("Sugarbox icon in landing screen is not present: " + e);
					logger.info("Sugarbox icon in landing screen is not present: " + e);
				}
				waitTime(3000);
			} else if (verifyElementDisplayed(AMDSugarbox.objConnectToSugarBox)) {
				try {
					verifyElementPresentAndClick(AMDSugarbox.objConnectToSugarBox, "ConnectToSugarBox CTA");
					waitTime(3000);
					TurnONWifi();
//					verifyElementPresentAndClick(AMDSugarbox.objSugrBoxWifi, "Sugarbox wifi");

				} catch (Exception e) {
					// TODO: handle exception
					System.out.println("Sugarbox icon in landing screen is not present: " + e);
					logger.info("Sugarbox icon in landing screen is not present: " + e);
				}
			}

			waitForElementDisplayed(AMDSugarbox.objMobNumField, 15);
			if (verifyElementDisplayed(AMDSugarbox.objMobNumField)) {
				type(AMDSugarbox.objMobNumField, phoneNumber, "Mobile field");
				click(AMDSugarbox.objContinueBtn, "Continue");

				// ### Hard wait for a min to receive the latest OTP for Sugarbox login
				waitTime(35000);
				waitForElementDisplayed(AMDSugarbox.objOTPScreen, 15);
				String OTP = getSugarBoxOTP();

				if (verifyElementDisplayed(AMDSugarbox.objOTPScreen)) {
					if (OTP != null) {
						logger.info("OTP is recieved: " + OTP);
						extent.extentLoggerPass("OTP Recieved", "OTP is recieved: " + OTP);
						for (int i = 0, j = 1; i < OTP.length(); i++, j++) {
							String digit = Character.toString(OTP.charAt(i));
							String index = convertToString(j);
							type(AMDSugarbox.objOTPField(index), digit, "OTP Field");
						}
						waitTime(2000);
						click(AMDSugarbox.objSubmitOTP, "Submit OTP");

						if (verifyElementPresent(AMDSugarbox.objSkip, "Skip Button")) {
							sugarBoxTutorialScreenValidation();
						} else {
							logger.info("Onboarding SugarBox Tutorial screen not displayed");
							extent.extentLoggerWarning("Tutorial Screen",
									"Onboarding SugarBox Tutorial screen not displayed");
						}
					} else {
						logger.info("OTP is not recieved after waiting for min");
						extent.extentLoggerWarning("OTP", "OTP is not recieved after waiting for min");
					}
				} else if (verifyElementDisplayed(AMDSugarbox.objSkip)) {
					verifyElementPresentAndClick(AMDSugarbox.objSkip, "Skip Button");
					verifyElementPresent(AMDSugarbox.objSugarboxLogo, "Sugarbox logo in Home Screen");
				} else {
					logger.info("OTP screen not displayed");
					extent.extentLoggerFail("OTP", "OTP screen not displayed");
				}
			}
		} else {
			logger.info("Device is not in the SugarBox Zone");
			extent.extentLoggerWarning("SugarBox Zone", "Device is not in the SugarBox Zone");
		}
	}
/**
 * @note This method handles the SugarBox Tutorial Screen Validation
 * @throws Exception
 */
	public void sugarBoxTutorialScreenValidation() throws Exception {
		System.out.println("\nSugarBox Tutorial Screen Validation");

		String tutorialTitle1 = "Get the Best of ZEE5 experience";
		String tutorialTitle2 = "Look for SugarBox icon on videos";
		String tutorialTitle3 = "Manage your SugarBox experience";

		String tutorialDesc1 = "You can Watch or Download these videos at ZERO data cost";
		String tutorialDesc2 = "Videos having SugarBox icon are available to stream or download at ZERO data cost";
		String tutorialDesc3 = "Tap on the icon to connect or disconnect from SugarBox";

		String onboardingTxt1 = "Stream seamlessly";
		String onboardingTxt2 = "Super fast downloads";
		String onboardingTxt3 = "No usage limit";

		verifyElementPresent(AMDGenericObjects.objText(tutorialTitle1), tutorialTitle1);
		verifyElementPresent(AMDGenericObjects.objText(tutorialDesc1), tutorialDesc1);
		verifyElementPresent(AMDGenericObjects.objText(onboardingTxt1), onboardingTxt1);
		verifyElementPresent(AMDGenericObjects.objText(onboardingTxt2), onboardingTxt2);
		verifyElementPresent(AMDGenericObjects.objText(onboardingTxt3), onboardingTxt3);
		verifyElementPresentAndClick(AMDSugarbox.objContinueNext, "Continue");

		verifyElementPresent(AMDGenericObjects.objText(tutorialTitle2), tutorialTitle2);
		verifyElementPresent(AMDGenericObjects.objText(tutorialDesc2), tutorialDesc2);
		verifyElementPresentAndClick(AMDSugarbox.objContinueNext, "Continue CTA");

		verifyElementPresent(AMDGenericObjects.objText(tutorialTitle3), tutorialTitle3);
		verifyElementPresent(AMDGenericObjects.objText(tutorialDesc3), tutorialDesc3);
		verifyElementPresentAndClick(AMDSugarbox.objContinueNext, "Continue To Sugarbox");

		verifyElementPresent(AMDSugarbox.objSugarboxLogo, "Sugarbox logo in Home Screen");

	}
/**
 * @note This method is used for verifying Content Playback in Sugarbox Network
 * @param pUsertype
 * @throws Exception
 */
	public void contentPlaybackVerificationInSugarboxNetwork(String pUsertype) throws Exception {
		extent.HeaderChildNode("Content Playback in Sugarbox Network");
		System.out.println("\nContent Playback in Sugarbox Network");

		String railName = ResponseInstance.getFirstRailNameFromPage("Home", pUsertype);
		System.out.println(railName);

		if (!pUsertype.equalsIgnoreCase("Guest")) {
			swipeUntilFindElement(AMDHomePage.objRailName(railName), "Up");
		}
		for (int i = 1; i <= 5; i++) {
			click(AMDSugarbox.objContentCard(railName, i), "Content card");
			if (verifyElementDisplayed(AMDSugarbox.objVideoNotAvailableContinue)) {
				String getHeader = getText(AMDSugarbox.objHeadeTitle);
				if (getHeader.contains("video is not available at this SugarBox")) {
					logger.info("The Selected Content is not available in SugarBox Zone");
					extent.extentLoggerPass("Content playback",
							"The Selected Content is not available in SugarBox Zone");
					click(AMDSugarbox.objCancelCTA, "Cancel");
				}
			} else {
				try {
					waitTime(5000);
					verifyElementPresent(AMDPlayerScreen.objPlayerScreen, "Player Screen");
					String getTitle = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);
					logger.info("Selected Content card is playable in SugarBox Network: " + getTitle);
					extent.extentLoggerPass("Content playback",
							"Selected Content card is playable in SugarBox Network: " + getTitle);
					Back(1);
				} catch (Exception e) {
					// TODO: handle exception
					System.out.println(e);
				}
			}
		}
	}
/**
 * @note This method is used for Content Playback Validation
 * @param pTabName
 * @param pUsertype
 * @throws Exception
 */
	public void playbackVerificationInSugarboxNetwork(String pTabName, String pUsertype) throws Exception {
		extent.HeaderChildNode("Content Playback Validation");
		System.out.println("\nContent Playback Validation");
		waitTime(8000);

		// Required Parameters
		String setDwnContentName = "Kanmani - DV | Akshatha.T | Vaishnavi Gopal";
		String setWatchContentName1 = "Dream Girl";
		String setWatchContentName2 = "Kailasapura";

		String railName = ResponseInstance.getFirstRailNameFromPage(pTabName, pUsertype);
		System.out.println(railName);

		if (!pUsertype.equalsIgnoreCase("Guest")) {
			swipeUntilFindElement(AMDHomePage.objRailName(railName), "Up");
		}

		boolean NonSbflag = false, Sbflag = false;
		for (int i = 1; i <= 4; i++) {
			click(AMDSugarbox.objContentCard(railName, i), "Content card");

			if (verifyElementDisplayed(AMDSugarbox.objVideoNotAvailableContinue)) {
				String getHeader = getText(AMDSugarbox.objHeadeTitle);
				if (getHeader.contains("video is not available at this SugarBox")) {
					logger.info("Popup with text: " + getHeader);
					extent.extentLoggerPass("Pop Up", "Popup with text: " + getHeader);

					// ******Verifying the Popup screen CTA and title
					verifyElementPresent(AMDSugarbox.SBLogoPopup, "SugarBox Logo");
					verifyElementPresent(
							AMDGenericObjects
									.objText("Continue to stream or download this video using your mobile data"),
							"Continue to stream or download this video using your mobile data");
					verifyElementPresent(AMDSugarbox.objDontShowCheckBx, "Dont Show this again");
					verifyElementPresent(AMDSugarbox.objVideoNotAvailableContinue, "Continue");
					verifyElementPresentAndClick(AMDSugarbox.objCancelCTA, "Cancel CTA");
					verifyElementPresent(AMDHomePage.objRailName(railName), railName);

					// ******Verify content can be played with Mobile Data
					click(AMDSugarbox.objContentCard(railName, i), "Content card");
					click(AMDSugarbox.objVideoNotAvailableContinue, "Continue CTA");
					waitTime(7000);
					if (verifyElementDisplayed(AMDPlayerScreen.objPlayerScreen)) {
						logger.info("Content is played with Mob data: "
								+ getText(AMDPlayerScreen.objcontentTitleInconsumptionPage));
						extent.extentLoggerPass("Content playback", "Content is played with Mob data: "
								+ getText(AMDPlayerScreen.objcontentTitleInconsumptionPage));
						BackToLandingScreen();
						NonSbflag = true;
					} else {
						logger.error("Content is not played with Mob data!");
						extent.extentLoggerFail("Content playback", "Content is not played with Mob data!");
					}
				}
			} else {
				if (verifyElementPresent(AMDPlayerScreen.objPlayerScreen, "Player Screen")) {
					String getTitle = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);
					logger.info("SugarBox Content is played: " + getTitle);
					extent.extentLoggerPass("Content playback", "SugarBox Content is played: " + getTitle);

					if (verifyElementDisplayed(AMDConsumptionScreen.objDownloadbtn)) {
						click(AMDConsumptionScreen.objDownloadbtn, "Download CTA");

						if (pUsertype.equalsIgnoreCase("Guest")) {
							if (verifyElementPresent(AMDLoginScreen.objLoginOrRegisterPageTitle,
									"Login/Registration screen")) {
								logger.info("Login/Register screen is displayed");
								extent.extentLoggerPass("Login/Register", "Login/Register screen is displayed");
								hideKeyboard();
								BackToLandingScreen();
								Sbflag = true;
							} else {
								logger.error("Login/Register screen is not displayed");
								extent.extentLoggerFail("Login/Register", "Login/Register screen is not displayed");
							}

						} else {
							if (verifyElementPresent(AMDConsumptionScreen.objDownloadVideoQuality,
									"Download video quality")) {
								extent.extentLoggerPass("", "Download video quality is displayed");
								BackToLandingScreen();
							}

						}
					} else {
						logger.info("Downlaod CTA is not available for this content");
						extent.extentLogger("Download CTAr", "Downlaod CTA is not available for this content");
					}
				}
			}
			if (NonSbflag == true && Sbflag == true) {
				break;
			}
		}

		// DOWNLOAD FUNCTIONALITY
		if (!pUsertype.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Content Download Validation");
			System.out.println("\nContent Download Validation");

			BackToLandingScreen();
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings CTA");

			if (verifyIsElementDisplayed(AMDSettingsScreen.objDownloadOverWifiOFF, "Download Over Wifi OFF")) {
				verifyElementPresentAndClick(AMDSettingsScreen.objDownloadOverWifiOFF, "Download Over Wifi OFF");
			} else {
				extent.extentLoggerPass("", "Download Over wifi is ON");
			}

			BackToLandingScreen();
			verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon2, "Search Icon");
			waitTime(3000);
			click(AMDSearchScreen.objSearchEditBox, "Search edit");
			type(AMDSearchScreen.objSearchBoxBar, setDwnContentName + "\n", "Search Field");
			waitTime(8000);
			hideKeyboard();
			waitTime(5000);
			click(AMDSearchScreen.objSearchResultContainsText(setDwnContentName), "Searched Show");
			waitTime(5000);
			waitTime(5000);
			verifyElementPresentAndClick(AMDDownloadPage.objDownloadIcon, "Download button");
			waitTime(2000);
			verifyElementPresent(AMDDownloadPage.objDownloadProgressIcon1, "Download progress icon");
			waitTime(5000);
			waitTime(5000);
			waitForElementDisplayed(AMDDownloadPage.objDownloadedContentIcon, 50);
			BackToLandingScreen();
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			waitTime(5000);

			if (verifyIsElementDisplayed(AMDHomePage.objContentDownloadedIcon, "Content Downloaded icon")) {
				extent.extentLoggerPass("", "User is able to Download the content available on Sugar Box server");
			} else {
				extent.extentLoggerFail("", "User is not able to Download the content available on Sugar Box server");
			}

			if (verifyIsElementDisplayed(AMDHomePage.objSugarBoxIconOnThumbnail, "SugarBox Icon")) {
				extent.extentLoggerPass("", "Sugar Box Icon is displayed on the thumbanil");
			} else {
				extent.extentLoggerFail("", "Sugar Box Icon is not displayed on the thumbanil");
			}

			verifyElementPresentAndClick(AMDHomePage.objContentDownloadedIcon, "Content Downloaded icon");
			waitTime(5000);
			verifyElementPresentAndClick(AMDHomePage.objContentDownloadedDeleteIcon, "Content Downloaded Delete icon");
			BackToLandingScreen();
		}

		// MY Watchlist
		if (!pUsertype.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Add to Watchlist Validation ");
			System.out.println("\nAdd to Watchlist Validation");

			BackToLandingScreen();

			// --Add Music to Watchlist
			verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon2, "Search Icon");
			waitTime(3000);
			click(AMDSearchScreen.objSearchEditBox, "Search edit");
			type(AMDSearchScreen.objSearchBoxBar, setDwnContentName + "\n", "Search Field");
			waitTime(8000);
			hideKeyboard();
			waitTime(5000);
			click(AMDSearchScreen.objSearchResultContainsText(setDwnContentName), "Searched Show");
			waitTime(5000);
			waitTime(5000);
			verifyElementPresentAndClick(AMDDownloadPage.objWatchlistIcon, "Watchlist button");

			waitTime(2000);
			Back(1);
			waitTime(2000);

			clearField(AMDSearchScreen.objSearchEditBox, "Search edit");
			waitTime(8000);
			click(AMDSearchScreen.objSearchEditBox, "Search edit");
			waitTime(8000);
			type(AMDSearchScreen.objSearchBoxBar, setWatchContentName1 + "\n", "Search Field");
			waitTime(8000);
			hideKeyboard();
			waitTime(5000);
			click(AMDSearchScreen.objSearchResultContainsText(setWatchContentName1), "Searched Show");
			waitTime(5000);
			waitTime(5000);
			verifyElementPresentAndClick(AMDDownloadPage.objWatchlistIcon, "Watchlist button");

			waitTime(2000);
			Back(1);
			waitTime(2000);

			clearField(AMDSearchScreen.objSearchEditBox, "Search edit");
			waitTime(8000);
			click(AMDSearchScreen.objSearchEditBox, "Search edit");
			waitTime(8000);
			type(AMDSearchScreen.objSearchBoxBar, setWatchContentName2 + "\n", "Search Field");
			waitTime(8000);
			hideKeyboard();
			waitTime(5000);
			click(AMDSearchScreen.objSearchResultContainsText(setWatchContentName2), "Searched Show");
			waitTime(5000);
			waitTime(5000);
			verifyElementPresentAndClick(AMDDownloadPage.objWatchlistIcon, "Watchlist button");

			waitTime(2000);
			Back(1);
			waitTime(2000);

			waitTime(5000);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresentAndClick(AMDMoreMenu.objWatchlist, "Watchlist CTA");
			waitTime(5000);

			// --Shows
			if (verifyIsElementDisplayed(AMDMoreMenu.objWatchlistShowsSelected, "Shows Tab")) {
				System.out.println("Shows tab is selected");
			} else {
				click(AMDMoreMenu.objWatchlistShowsTab, "Shows Tab");
				waitTime(5000);
			}

			waitTime(5000);
			if (verifyIsElementDisplayed(AMDHomePage.objSugarBoxIconOnThumbnail, "SugarBox Icon")) {
				extent.extentLoggerPass("", "Sugar Box Icon is displayed on the thumbanil");
			} else {
				extent.extentLoggerFail("", "Sugar Box Icon is not displayed on the thumbanil");
			}

			verifyElementPresentAndClick(AMDMoreMenu.objWatchlistContent(setWatchContentName2), "Show content");
			waitTime(5000);
			verifyElementPresentAndClick(AMDMoreMenu.objShowFirstContent, "First content");
			waitTime(5000);

			if (verifyElementPresent(AMDPlayerScreen.objPlayerScreen, "Player Screen")) {
				String getTitle = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);
				logger.info("SugarBox Content is played: " + getTitle);
				extent.extentLoggerPass("Content playback", "SugarBox Content is played");
				waitTime(5000);
				verifyElementPresentAndClick(AMDDownloadPage.objWatchlistedIcon, "Watchlisted button");
			} else {
				extent.extentLoggerFail("Content playback", "SugarBox Content is not played ");
			}

			Back(1);
			waitTime(5000);
			Back(1);
			waitTime(5000);

			// --Movies
			if (verifyIsElementDisplayed(AMDMoreMenu.objWatchlistMoviesSelected, "Movies Tab")) {
				System.out.println("Movies tab is selected");
			} else {
				click(AMDMoreMenu.objWatchlistMoviesTab, "Movies Tab");
				waitTime(5000);
			}

			waitTime(5000);
			if (verifyIsElementDisplayed(AMDHomePage.objSugarBoxIconOnThumbnail, "SugarBox Icon")) {
				extent.extentLoggerPass("", "Sugar Box Icon is displayed on the thumbanil");
			} else {
				extent.extentLoggerFail("", "Sugar Box Icon is not displayed on the thumbanil");
			}

			verifyElementPresentAndClick(AMDMoreMenu.objWatchlistContent(setWatchContentName1), "Movie content");
			waitTime(5000);

			if (verifyElementPresent(AMDPlayerScreen.objPlayerScreen, "Player Screen")) {
				String getTitle = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);
				logger.info("SugarBox Content is played: " + getTitle);
				extent.extentLoggerPass("Content playback", "SugarBox Content is played");
				waitTime(5000);
				verifyElementPresentAndClick(AMDDownloadPage.objWatchlistedIcon, "Watchlisted button");
			} else {
				extent.extentLoggerFail("Content playback", "SugarBox Content is not played ");
			}

			Back(1);
			waitTime(5000);

			// Videos
			if (verifyIsElementDisplayed(AMDMoreMenu.objWatchlistVideosSelected, "Videos Tab")) {
				System.out.println("Movies tab is selected");
			} else {
				click(AMDMoreMenu.objWatchlistVideosTab, "Videos Tab");
				waitTime(5000);
			}

			waitTime(5000);
			if (verifyIsElementDisplayed(AMDHomePage.objSugarBoxIconOnThumbnail, "SugarBox Icon")) {
				extent.extentLoggerPass("", "Sugar Box Icon is displayed on the thumbanil");
			} else {
				extent.extentLoggerFail("", "Sugar Box Icon is not displayed on the thumbanil");
			}

			verifyElementPresentAndClick(AMDMoreMenu.objWatchlistContent(setDwnContentName), "Videos content");
			waitTime(5000);

			if (verifyElementPresent(AMDPlayerScreen.objPlayerScreen, "Player Screen")) {
				String getTitle = getText(AMDPlayerScreen.objcontentTitleInconsumptionPage);
				logger.info("SugarBox Content is played: " + getTitle);
				extent.extentLoggerPass("Content playback", "SugarBox Content is played");
				waitTime(5000);
				verifyElementPresentAndClick(AMDDownloadPage.objWatchlistedIcon, "Watchlisted button");
			} else {
				extent.extentLoggerFail("Content playback", "SugarBox Content is not played ");
			}

			Back(1);
			waitTime(5000);
			BackToLandingScreen();
		}
	}
/**
 * @note this method is used for SB dissconnection screen validation
 * @throws Exception
 */
	public void sBDisconnectionValidation() throws Exception {
		extent.HeaderChildNode("SugarBox Disconnection Validation");
		System.out.println("\nSugarBox Disconnection Validation");

		verifyElementPresentAndClick(AMDSugarbox.objSugarboxLogo, "Logo");

		if (verifyElementDisplayed(AMDSugarbox.objExitSBNetwrkPopup)) {
			verifyElementPresentAndClick(AMDGenericObjects.objText("No"), "No CTA");
			verifyElementPresent(AMDHomePage.objHomeBottomBtn, "Home Screen");

			click(AMDSugarbox.objSugarboxLogo, "Logo");
			verifyElementPresentAndClick(AMDGenericObjects.objText("Yes"), "Yes CTA");
			TurnOFFWifi();

			if (verifyElementDisplayed(AMDGenericObjects.objText("DONE"))
					|| verifyElementDisplayed(AMDGenericObjects.objText("Done"))) {
				Back(1);
//				Runtime.getRuntime().exec("adb shell monkey -p com.graymatrix.did -c android.intent.category.LAUNCHER 1");
			}
			verifyElementPresent(AMDGenericObjects.objText("Disconnected"), "Disconnected");
			verifyElementPresent(AMDGenericObjects.objText("Thank you for using SugarBox"),
					"Thank you for using SugarBox");
			verifyElementPresent(AMDGenericObjects.objText("#SaveTheInternet"), "#SaveTheInternet");
			verifyElementPresent(AMDSugarbox.objCloseImg, "X icon");
			verifyElementPresentAndClick(AMDSugarbox.objLocateNearBySB, "Locate a Sugarbox Zone");
			verifyElementPresent(AMDSugarbox.objListofZones, "List of Sugarbox Zones");
		}
	}
/**
 * @note this method is used for dissconnecting from SB network.
 * @throws Exception
 */
	public void disconnectSugarBoxNetwork() throws Exception {
		extent.HeaderChildNode("Disconnect Sugarbox Network");
		System.out.println("\nDisconnect Sugarbox Network");

		verifyElementPresentAndClick(AMDSugarbox.objSugarboxLogo, "Logo");

		if (verifyElementDisplayed(AMDSugarbox.objExitSBNetwrkPopup)) {
			verifyElementPresentAndClick(AMDGenericObjects.objText("Yes"), "Yes CTA");
			TurnOFFWifi();
			if (verifyElementDisplayed(AMDGenericObjects.objText("DONE"))) {
				Back(1);
//				Runtime.getRuntime().exec("adb shell monkey -p com.graymatrix.did -c android.intent.category.LAUNCHER 1");
			}
			verifyElementPresent(AMDSugarbox.objDisconnetced, "Disconnected");
			verifyElementPresentAndClick(AMDSugarbox.objCloseImg, "X icon");
		}
	}
/**
 * @This method is used for parental control validation
 * @param userType
 * @throws Exception
 */
	public void parentalControl(String userType) throws Exception {
		parentalControlPopupPinValidation(userType);
		parentalPinPlatformValidation(userType);
		newAgeRatingValidationBelowPlayer(userType);
		verifyContentPlayPostSettingParentalControl(userType);
	}
/**
 * @note this method is used to UI/UX of PC is as per new design changes
 * @param userType
 * @throws Exception
 */
	public void verifyContentPlayPostSettingParentalControl(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("TC_42 : Verify that UI/UX is as per new design changes");
			System.out.println("TC_42 : Verify that UI/UX is as per new design changes");
			BackToLandingScreen();
			click(AMDHomePage.MoreMenuIcon, "More Menu tab");
			waitTime(1000);
			click(AMDMoreMenu.objSettings, "Settings option");
			waitTime(5000);
			Swipe("UP", 1);
			verifyElementPresentAndClick(AMDMoreMenu.objParentalControl, "Parental Control");
			verifyElementExist(AMDMoreMenu.objPasswordField, "Password field");
			String password = "";
			if (userType.equals("NonSubscribedUser")) {
				password = getParameterFromXML("NonsubscribedPassword");
			} else if (userType.equals("SubscribedUser")) {
				password = getParameterFromXML("SubscribedPassword");
			}
			click(AMDMoreMenu.objPasswordField, "Password field");
			type(AMDMoreMenu.objPasswordField, password, "Password");
			waitTime(2000);
			hideKeyboard();
			click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(2000);
//		click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
//		waitTime(2000);
//		Back(1);
			verifyElementPresent(AMDMoreMenu.Restrict13PlusAboveContent, "Restrict 13+ Content");
			verifyElementPresent(AMDMoreMenu.objNoRestriction, "No restriction option ");
			verifyElementPresent(AMDMoreMenu.objRestrictAllContent, "Restrict All");
			verifyElementPresent(AMDMoreMenu.Restrict7AboveContent, "Restrict 18+ Content");
			verifyElementPresent(AMDMoreMenu.Restrict18PlusAboveContent, "Restrict 18+ Content");
			verifyElementPresent(AMDMoreMenu.Restrict16AboveContent, "Restrict 16+ Content");

			click(AMDMoreMenu.objRestrictAllContent, "Restrict All Content option");
			click(AMDMoreMenu.objContinueBtn, "Continue Button");
			waitTime(2000);

			if (verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin")) {
				logger.info("Parental Pin is SET");
				extent.extentLoggerPass("Parental Pin", "Parental Pin is SET");

				verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin");
				type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin2, "2", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin3, "3", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
				hideKeyboard();
				waitTime(4000);
				click(AMDMoreMenu.objSetPinContinueBtn, "Continue Button");
				waitTime(2000);

				click(AMDMoreMenu.objParentalLockDone, "Done Button");
				Back(1);
			} else {
				logger.info("Parental Pin Popup is NOT displayed");
				extent.extentLoggerFail("Parental Pin", "Parental Pin Popup is NOT displayed");
			}
		}
	}
/**
 * This method is used for validation of deeplink content
 * @param pDeeplink
 */
	public void deepLinkContentDecsriptor(String pDeeplink) {
		extent.HeaderChildNode("DeepLink to Playback " + pDeeplink + " screen");
		System.out.println("\n>>> DeepLink to Playback " + pDeeplink + " screen");

//		String appPackageName = getParameterFromXML("appPackageName");
		String appPackageName = "com.graymatrix.did";
		try {
			getDriver().close();
			waitTime(5000);
			String command = null;
			Instant startTime = Instant.now();
			logger.info("Start time: " + startTime);
			extent.extentLogger("Start Time", "Start time: " + startTime);
			if (pDeeplink.equalsIgnoreCase("Consumption")) {
				command = "adb shell am start -W -a android.intent.action.VIEW -d  \"https://www.zee5.com/movies/details/14-phere/0-0-1z51198\"";
			}

			Process process = Runtime.getRuntime().exec(command);
			new BufferedReader(new InputStreamReader(process.getInputStream()));

//			if (pDeeplink.equalsIgnoreCase("Consumption")) {
//				waitForElementDisplayed(AMDHomePage.objPopUpToOpenZeeApp, 30);
//				if (verifyIsElementDisplayed(AMDHomePage.objPopUpToOpenZeeApp)) {
//					click(AMDHomePage.objJustOnceOption, "Just once option");
//				}
//			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
/**
 * @note this method is used for PC pop up pin validation
 * @param Keyword
 * @throws Exception
 */
	public void parentalControlPopupPinValidation(String Keyword) throws Exception {

		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {

			parentalControlPopupPin18PlusValidation(Keyword);
			// ParentalControlPopupPin16PlusValidation(Keyword);
			parentalControlPopupPin13PlusValidation(Keyword);
			// ParentalControlPopupPin7PlusValidation(Keyword);
			parentalControlPopupPinRestrictAllValidation(Keyword);
		}
	}
/**
 * @note this method is used to verify "U" rated content
 * @param Keyword
 * @param loc
 * @param text
 * @throws Exception
 */
	public void parentalControlPopupPin(String Keyword, By loc, String text) throws Exception {
		// Verify "U" rated content
		navigateBackToHomeLandingScreen();
		waitTime(5000);
		click(AMDHomePage.MoreMenuIcon, "More Menu tab");
		waitTime(1000);
		click(AMDMoreMenu.objSettings, "Settings option");
		waitTime(5000);
		Swipe("UP", 1);
		verifyElementPresentAndClick(AMDMoreMenu.objParentalControl, "Parental Control");
		verifyElementExist(AMDMoreMenu.objPasswordField, "Password field");
		String password = "";
		if (userType.equals("NonSubscribedUser")) {
			password = getParameterFromXML("NonsubscribedPassword");
		} else if (userType.equals("SubscribedUser")) {
			password = getParameterFromXML("SubscribedPassword");
		}
		click(AMDMoreMenu.objPasswordField, "Password field");
		type(AMDMoreMenu.objPasswordField, password, "Password");
		waitTime(2000);
		hideKeyboard();
		click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
		waitTime(4000);
		boolean value = verifyElementDisplayed(loc);
		if (value == true) {
			click(loc, text);
		} else {
			logger.error(
					"[AMA2-17876] [AMD] - Device Specific - \"Restrict U/A 18+ Content\" is displayed instead of \"Restrict A 18+ Content\" option in Parental control screen");
			extent.extentLoggerFail("",
					"[AMA2-17876] [AMD] - Device Specific - \"Restrict U/A 18+ Content\" is displayed instead of \"Restrict A 18+ Content\" option in Parental control screen");
		}
		click(AMDMoreMenu.objContinueBtn, "Continue Button");
		waitTime(5000);
		if (text.contains("No Restrict Content")) {
			click(AMDMoreMenu.objParentalLockDone, "Done Button");
		} else {
			if (verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin")) {
				logger.info("Parental Pin is SET");
				extent.extentLoggerPass("Parental Pin", "Parental Pin is SET");

				verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin");
				type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin2, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin3, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin4, "1", "ParentalLockPin");
				hideKeyboard();
				waitTime(4000);
				click(AMDMoreMenu.objSetPinContinueBtn, "Continue Button");
				waitTime(2000);
				click(AMDMoreMenu.objParentalLockDone, "Done Button");
			} else {
				logger.info("Parental Pin Popup is NOT displayed");
				extent.extentLoggerFail("Parental Pin", "Parental Pin Popup is NOT displayed");
			}
			BackToLandingScreen();
			click(AMDHomePage.objSearchBtn, "Search button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, Keyword, "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objFirstSearchResult, "Search result");
			boolean checkParentalPopUp = verifyElementDisplayed(AMDPlayerScreen.objParentalPinPopUp);
			boolean EnterPinOnPlayer = verifyElementDisplayed(AMDConsumptionScreen.NewEnterPINOnPlayerScreen);
			if (checkParentalPopUp) {	
			if (checkParentalPopUp) {
				logger.info("Parental Pin Popup is displayed");
				extentLoggerPass("Parental Pin Popup", "Parental Pin Popup is displayed");
				Back(2);
				waitTime(5000);
			} else {
				if (text.contains("Restrict A 7+ Content")) {
					logger.error(
							"[AMA2-17867] [AMD] - Parental Control popup fails to display on consumption screen upon playing U/A 7+ contents post Restricting U/A 7+ in parental control screen");
					extent.extentLoggerFail("",
							"[AMA2-17867] [AMD] - Parental Control popup fails to display on consumption screen upon playing U/A 7+ contents post Restricting U/A 7+ in parental control screen");
				} else {
					logger.error("Parental Pin Popup is NOT displayed for " + text);
					extentLoggerFail("Parental Pin Popup", "Parental Pin Popup is NOT displayed for " + text);
				}
			}
			} else {
				if (EnterPinOnPlayer) {
					logger.info("Enter Parental Pin on Player screen is displayed for " + text);
					extentLoggerPass("Parental Pin Popup", "Enter Parental Pin on Player screen is displayed for " + text);
					Back(2);
				}else {
					logger.error("Enter Parental Pin on Player screen is NOT displayed for " + text);
					extentLoggerFail("Parental Pin Popup", "Enter Parental Pin on Player screen is NOT displayed for " + text);
				}
			}
		}

		if (text.contains("No Restrict Content")) {
			boolean checkParentalPopUp = verifyElementDisplayed(AMDPlayerScreen.objParentalPinPopUp);
			if (checkParentalPopUp) {
				logger.info("Parental Pin Popup is displayed");
				extentLoggerPass("Parental Pin Popup",
						"Parental Pin Popup is displayed post selecting No Restriction option");
				BackToLandingScreen();
				waitTime(5000);
			} else {
				logger.info("Parental Pin Popup is NOT displayed");
				extentLoggerPass("Parental Pin Popup",
						"Parental Pin Popup is not displayed post selecting No Restriction option");
			}
			waitTime(5000);
		}
	}
/**
 * @note this method is used for cross platform PC settings
 * @param userType
 * @throws Exception
 */
	public void parentalPinPlatformValidation(String userType) throws Exception {
		extent.HeaderChildNode(
				"TC_38 : Validate that is Parental control reflected when user login with same account in Web. ");
		System.out.println(
				"TC_38 : Validate that is Parental control reflected when user login with same account in Web. ");
		if (userType.equalsIgnoreCase("NonSubscribedUser") | userType.equalsIgnoreCase("SubscribedUser")) {

			// Verify "U" rated content
			// launchChromeApplication();
			Utilities.setPlatform = "Web";
			new CommandBase("Chrome");
			init();
			waitTime(4000);
			getDriver().get("https://www.zee5.com/");
			waitTime(10000);

			navigateToHome();
			if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("Login as NonSubscribed User");
				String Username = getParameterFromXML("NonsubscribedUserName");
				String Password = getParameterFromXML("NonsubscribedPassword");
				// click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply
				// button");
				// waitForElementAndClickIfPresent(PWAHomePage.objNotNow, 30, "Notification
				// popup");
				waitTime(3000);
				if (!checkElementDisplayed(PWALoginPage.objLoginBtn, "Login Button")) {
					click(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
				}
				waitTime(5000);
				click(PWALoginPage.objLoginBtn, "Login button");
				click(PWALoginPage.objEmailField, "Email field");
				waitTime(5000);
				type(PWALoginPage.objEmailField, Username, "Email Field");
				hideKeyboard();
				waitTime(3000);
				// dismissSystemPopUp();
				click(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, Password + "\n", "Password field");
				hideKeyboard();
				waitTime(5000);
//			waitTime(5000);
//			click(PWALoginPage.objWebLoginButton, "Login Button");
				waitTime(3000);

			}
			if (userType.equalsIgnoreCase("SubscribedUser")) {
				extent.HeaderChildNode("Login as Subscribed User");
				String SubscribedUsername = getParameterFromXML("SubscribedUserName");
				String SubscribedPassword = getParameterFromXML("SubscribedPassword");
				// click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply
				// button");
				// waitForElementAndClickIfPresent(PWAHomePage.objNotNow, 30, "Notification
				// popup");
				waitTime(3000);
				if (!checkElementDisplayed(PWALoginPage.objLoginBtn, "Login Button")) {
					click(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
				}
				waitTime(5000);
				click(PWALoginPage.objLoginBtn, "Login button");
				click(PWALoginPage.objEmailField, "Email field");
				waitTime(5000);
				type(PWALoginPage.objEmailField, SubscribedUsername, "Email Field");
				hideKeyboard();
				waitTime(5000);
				// dismissSystemPopUp();
				click(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, SubscribedPassword + "\n", "Password field");
				hideKeyboard();
				waitTime(5000);
			}
			// navigateToHome();
			String keyword = "Black Widows";
			waitTime(5000);
			click(PWAHomePage.objSearchBtn, "Search icon");
			waitTime(5000);
			click(PWAHomePage.objSearchField, "Search icon");
			waitTime(5000);
			type(PWAHomePage.objSearchField, keyword + "\n", "Search field");
			// click(PWASearchPage.objSearchMoviesTab, "Movies tab");
			waitTime(10000);
			click(PWASearchPage.objSearchedResult(keyword), "Search Result");
			waitTime(10000);
			click(PWAShowsPage.objFirstAssetEpisodeFirstRail, "First Episode");
			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPopUpInPlayer, "Set Lock Field");
		}
	}
/**
 * @note this method is used for verifying PC settings for registered users
 * @param userType
 * @throws Exception
 */
	public void parentalPinValidation(String userType) throws Exception {
		// Verify "U" rated content
		extent.HeaderChildNode("TC_35 : Parental Control option should be displayed to Logged in users only.");
		System.out.println("TC_35 : Parental Control option should be displayed to Logged in users only.");
		navigateBackToHomeLandingScreen();
		verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
		waitTime(3000);
		click(AMDMoreMenu.objSettings, "Settings option");
		waitTime(5000);
		Swipe("UP", 1);
		if (userType.equalsIgnoreCase("Guest")) {
			if (verifyElementDisplayed(AMDMoreMenu.objParentalControl)) {
				logger.error("Parental Control option is displayed for Guest user");
				extentLoggerFail("Parent Control", " Parental Control option is displayed for Guest user");
			} else {
				logger.info("Parental Control option is not displayed for Guest user");
				extentLoggerPass("Parent Control", "Parental Control option is not displayed for Guest user");
			}
		}

		if (userType.equalsIgnoreCase("SubscribedUser") | userType.equalsIgnoreCase("NonSubscribedUser")) {
			verifyElementPresent(AMDMoreMenu.objParentalControl, "Parental control option");
			// Verify "U" rated content
			extent.HeaderChildNode(
					"TC_36 : Validate that is Parental control reflected when user login with same account in same device.");
			System.out.println(
					"TC_36 : Validate that is Parental control reflected when user login with same account in same device.");
			waitTime(5000);
			Swipe("UP", 1);
			verifyElementPresentAndClick(AMDMoreMenu.objParentalControl, "Parental Control");
			verifyElementExist(AMDMoreMenu.objPasswordField, "Password field");
			String password = "";
			if (userType.equals("NonSubscribedUser")) {
				password = getParameterFromXML("NonsubscribedPassword");
			} else if (userType.equals("SubscribedUser")) {
				password = getParameterFromXML("SubscribedPassword");
			}
			click(AMDMoreMenu.objPasswordField, "Password field");
			type(AMDMoreMenu.objPasswordField, password, "Password");
			waitTime(2000);
			hideKeyboard();
			waitTime(2000);
			click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(2000);
			// click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(2000);
			String state = getText(AMDMoreMenu.objNoRestriction);
			System.out.println(state);
			if (state.equalsIgnoreCase("No Restriction")) {
				logger.info(state + " is selected by default");
				extent.extentLoggerPass("Parental Pin", state + " is selected by default");
			} else {
				logger.error(state + " is not selected by default");
				extent.extentLoggerFail("Parental Pin", state + " is not selected by default");
			}
			click(AMDMoreMenu.objRestrictAllContent, "Restrict All Content option");
			click(AMDMoreMenu.objContinueBtn, "Continue Button");
			waitTime(2000);
			if (verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin")) {
				logger.info("Parental Pin is SET");
				extent.extentLoggerPass("Parental Pin", "Parental Pin is SET");
				verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin");
				type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin2, "2", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin3, "3", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
				hideKeyboard();
				waitTime(4000);
				click(AMDMoreMenu.objSetPinContinueBtn, "Continue Button");
				waitTime(2000);
				click(AMDMoreMenu.objParentalLockDone, "Done Button");
			} else {
				logger.info("Parental Pin Popup is NOT displayed");
				extent.extentLoggerFail("Parental Pin", "Parental Pin Popup is NOT displayed");
			}
			BackToLandingScreen();
			waitTime(5000);
			click(AMDHomePage.objSearchBtn, "Search button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, "Bhinna", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objFirstSearchResult, "Search result");
			waitTime(6000);
			boolean checkParentalPopUp = verifyElementDisplayed(AMDPlayerScreen.objParentalPinPopUp);
			if (checkParentalPopUp) {
				logger.info("Parental Pin Popup is displayed");
				extentLoggerPass("Parental Pin Popup", "Parental Pin Popup is displayed in Landscape mode");
				Back(2);
			} else {
				logger.info("Parental Pin Popup is NOT displayed");
				extentLoggerFail("Parental Pin Popup", "Parental Pin Popup is NOT displayed in Landscape mode");
			}
		}
	}
/**
 * @note this method is used for verifying the age rating in the consumption screen.
 * @param usertype
 * @throws Exception
 */
	public void newAgeRatingValidationBelowPlayer(String usertype) throws Exception {
		extent.HeaderChildNode("Verify New Age Rating below player");
		if (userType.equalsIgnoreCase("SubscribedUser") | userType.equalsIgnoreCase("NonSubscribedUser")
				| userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"TC_30 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for \"U\" rated content.");
			System.out.println(
					"TC_30 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for \"U\" rated content.");
			// Verify "U" rated content
			newAgeRatingValidation("Saand Ki Aankh", "", "U");
			// relaunch(false);
			// Verify "U/A 7+" rated content
			extent.HeaderChildNode(
					"TC_31 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 7+' rated content.");
			System.out.println(
					"TC_31 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 7+' rated content.");
			newAgeRatingValidation("Jelimals & Chhota Bheem", "U/A ", "7+");
			// relaunch(false);
			// Verify "U/A 7+" rated content
			extent.HeaderChildNode(
					"TC_32 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 13+' rated content.");
			System.out.println(
					"TC_32 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 13+' rated content.");
			newAgeRatingValidation("Dhoop Ki Deewar", "U/A ", "13+");
			// relaunch(false);
			// Verify "U" rated content
			extent.HeaderChildNode(
					"TC_33 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 16+' rated content.");
			System.out.println(
					"TC_33 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 16+' rated content.");
			newAgeRatingValidation("Helmet", "U/A ", "16+");
			// relaunch(false);
			// Verify "U/A 7+" rated content
			extent.HeaderChildNode(
					"TC_34 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'A' rated content.");
			System.out.println(
					"TC_34 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'A' rated content.");
			newAgeRatingValidation("Nisha", "", "A");
		}
	}
/**
 * @note This method is used to validate Updated Age rating
 * @param Keyword
 * @param Rating
 * @param AgeRating
 * @throws Exception
 */
	public void newAgeRatingValidation(String Keyword, String Rating, String AgeRating) throws Exception {
		BackToLandingScreen();
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, Keyword, "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objFirstSearchResult, "Search result");
		waitTime(10000);
		boolean checkParentalPopUp = verifyElementDisplayed(AMDPlayerScreen.objParentalPinPopUp);
		if (checkParentalPopUp) {
			Back(1);
		}
		if (verifyElementDisplayed(AMDPlayerScreen.objcontentRating)) {
			String text = getText(AMDPlayerScreen.objcontentRating);

			System.out.println("Content rating " + text);
			String text1 = Rating + AgeRating;
			String text2 = "•  " + text1;
			System.out.println(text1);
			System.out.println(text2);
			if (text.contains(text2) && text.contains(AgeRating)) {
				logger.info("Content Rating  " + text + " is displayed below the player");
				extentLoggerPass("Myprofile", "Content Rating  " + text + " is displayed below the player");
			} else {
				if (text.contains("7+")) {
					logger.info(
							"\"U/A 7+\" rating is displayed for all the kids contents");
					extent.extentLoggerPass("",
							"\"U/A 7+\" rating is displayed for all the kids contents");
				} else {
					logger.error("Content age Rating " + AgeRating + " does not match below the player");
					extentLoggerFail("Rating", "Content age Rating " + AgeRating + " does not match below the player");
					BackToLandingScreen();
				}
			}
		} else {
			logger.error("Content age Rating " + AgeRating + " is not displayed below the player");
			extentLoggerFail("Rating", "Content age Rating " + AgeRating + " is not displayed below the player");
		}
		waitTime(6000);
	}
/**
 * @note This method is used to validate new age rating.
 * @param Keyword
 * @param AgeRating
 * @throws Exception
 */
	public void NewAgeRatingValidation(String Keyword, String AgeRating) throws Exception {
		navigateBackToHomeLandingScreen();
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, Keyword, "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objFirstSearchResult, "Search result");
		waitTime(6000);
		boolean checkParentalPopUp = verifyElementPresent(AMDPlayerScreen.objParentalPinPopUp, "Parental Pin Popup");
		if (checkParentalPopUp) {
			Back(1);
		}
		if (verifyElementDisplayed(AMDPlayerScreen.objcontentRating)) {
			String text = getText(AMDPlayerScreen.objcontentRating);
//			String[] text1 = text.split("•");
//			String text3= text1[5];

			System.out.println("Content rating " + text);
			String text6 = "•  " + AgeRating;
			if (text.contains(AgeRating)) {
				logger.info("Content Rating " + text + " is displayed below the player");
				extentLoggerPass("Myprofile", "Content Rating " + text + " is displayed below the player");
			} else {
				logger.error("Content age Rating " + AgeRating + " does not match below the player");
				extentLoggerFail("Rating", "Content age Rating " + AgeRating + " does not match below the player");
			}
		} else {
			logger.error("Content age Rating " + AgeRating + " is not displayed below the player");
			extentLoggerFail("Rating", "Content age Rating " + AgeRating + " is not displayed below the player");
		}
		waitTime(6000);
	}
/**
 * @note this method is used to verify PC option in settings and its functionality.
 * @param userType
 * @throws Exception
 */
	public void parentalControlValidation(String userType) throws Exception {
		extent.HeaderChildNode("Parental Control Validation");
		if (!(userType.equalsIgnoreCase("Guest"))) {
			extent.HeaderChildNode("Validate that Parental Control option is available in More Menu.(TC_01)");
			System.out.println("\"Validate that Parental Control option is available in More Menu.(TC_01)\"");
			String Username = null;
			String Password = null;
			if (userType.contentEquals("NonSubscribedUser")) {
				Username = getParameterFromXML("NonsubscribedUserName");
				Password = getParameterFromXML("NonsubscribedPassword");
			}
			if (userType.contentEquals("SubscribedUser")) {
				Username = getParameterFromXML("SubscribedUserName");
				Password = getParameterFromXML("SubscribedPassword");
			}
			waitTime(8000);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuBtn, "More Menu");
			verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings");
			verifyElementPresent(AMDSettingsScreen.objParentalControloption, "Parental Control option");

			extent.HeaderChildNode(
					"Validate that the below mentioned options are available for Parental control. (TC_02)");
			System.out.println("Validate that the below mentioned options are available for Parental control. (TC_02)");
			click(AMDSettingsScreen.objParentalControloption, "Parental Control option");
			verifyElementPresentAndClick(AMDSettingsScreen.objPasswordfield, "Password field");
			waitTime(5000);
			type(AMDSettingsScreen.objPasswordfield, Password, "Enter Password");
			hideKeyboard();
			verifyElementPresentAndClick(AMDSettingsScreen.objContinueCTAVerifyAccount, "Continue Button Set PIN page");
			verifyElementExist(AMDSettingsScreen.objNoRestrictions, "No Restrictions");
			verifyElementExist(AMDSettingsScreen.objRestrictA18Content, "Restrict A 18+ Content");
			verifyElementExist(AMDSettingsScreen.objRestrictUA16Content, "Restrict U/A 16+ Content ");
			verifyElementExist(AMDSettingsScreen.objRestrictUA13Content, "Restrict U/A 13+ Content");
			verifyElementExist(AMDSettingsScreen.objRestrictUA7Content, "objRestrictUA7Content");
			verifyElementExist(AMDSettingsScreen.objRestrictAllContent, "Restrict All Content");

			extent.HeaderChildNode("Validate the UI of Parental Control screen.(TC_03)");
			System.out.println("Validate the UI of Parental Control screen.(TC_03)");
			verifyElementExist(AMDSettingsScreen.objParentalControlTitleCentreOfTheHeader,
					"Parental Control title in the centre of the Header");
			verifyElementExist(AMDSettingsScreen.objBackButton, "Back Button");
			verifyElementExist(AMDSettingsScreen.objSetAParentalLockToBlockYourChildFromAccessingCertainContent,
					"Set a parental lock to block your child from accessing certain content");
			verifyElementPresent(AMDSettingsScreen.objContinueCTA, "Continue CTA");

			extent.HeaderChildNode(
					"Validate that user is able to select options provided for parental control.(TC_04)");
			System.out.println("Validate that user is able to select options provided for parental control.(TC_04)");
			click(AMDSettingsScreen.objRestrictUA16Content, "Restrict U/A 16+ Content ");
			if (verifyElementPresent(AMDSettingsScreen.objSelectOption, "Select Option")) {
				logger.info("user is able to select Option ");
				extent.extentLoggerPass("", "user is able to select Option");
			} else {

				logger.error("user is unable to select option ");
				extent.extentLoggerFail("", "user is unable to select option ");
			}

			extent.HeaderChildNode("Validate that user will be able to select any one option at a time.(TC_05)");
			System.out.println("Validate that user will be able to select any one option at a time.(TC_05)");
			if (verifyElementPresent(AMDSettingsScreen.objSelectOption, "Select Option")) {
				logger.info("User is able to select only one option listed in Parental Control screen at a time.");
				extent.extentLoggerPass("",
						"User is able to select only one option listed in Parental Control screen at a time.");
			} else {
				logger.error("User not able to select only one option listed in Parental Control screen at a time.");
				extent.extentLoggerFail("",
						"User not able to select only one option listed in Parental Control screen at a time.");
			}

			extent.HeaderChildNode(
					"Valdiate that small tick mark is displayed at the right corner of the option, when user select any option.(TC_06)");
			System.out.println(
					"Valdiate that small tick mark is displayed at the right corner of the option, when user select any option.(TC_06)");
			verifyElementPresentAndClick(AMDSettingsScreen.objNoRestrictions, "No Restrictions");
			verifyElementExist(AMDSettingsScreen.objSelectOption, "Tick mark for selected option");

			extent.HeaderChildNode("Validate the functionality of \"Continue\" CTA.(TC_07)");
			System.out.println("Validate the functionality of \"Continue\" CTA.(TC_07)");
			verifyElementPresentAndClick(AMDSettingsScreen.objContinueCTA, "Continue CTA");
			if (verifyElementExist(AMDSettingsScreen.objSuccessPage, "Success! Page")) {
				logger.info("Continue CTA is functional");
				extent.extentLoggerPass("", "Continue CTA is functional");
			} else {
				logger.error("Continue CTA is Not functional");
				extent.extentLoggerFail("", "Continue CTA is Not functional");
			}
			click(AMDSettingsScreen.objDoneButton, "Done Button");

			extent.HeaderChildNode(
					"Validate the funcionality post tapping on \"Continue\" CTA for selecting \"No Restriction\" option.(TC_08)");
			System.out.println(
					"Validate the funcionality post tapping on \"Continue\" CTA for selecting \"No Restriction\" option.(TC_08)");
			Swipe("UP", 1);
			click(AMDSettingsScreen.objParentalControloption, "Parental Control option");
			verifyElementPresentAndClick(AMDSettingsScreen.objPasswordfield, "Password feald");
			waitTime(5000);
			type(AMDSettingsScreen.objPasswordfield, Password, "Enter Password");
			hideKeyboard();
			waitTime(8000);
			verifyElementPresentAndClick(AMDSettingsScreen.objContinueCTAVerifyAccount, "Continue Button Set PIN page");
			verifyElementPresentAndClick(AMDSettingsScreen.objNoRestrictions, "No Restrictions");
			verifyElementPresentAndClick(AMDSettingsScreen.objContinueCTA, "Continue CTA");
			if (verifyElementIsNotDisplayed(AMDSettingsScreen.objSetPIN)) {
				logger.info("Continue CTA is functional for slecting 'No Restriction' option");
				extent.extentLoggerPass("", "Continue CTA is functional for slecting 'No Restriction' option");
			} else {
				logger.error("Continue CTA is NOT functional for slecting 'No Restriction' option");
				extent.extentLoggerFail("", "Continue CTA is NOT functional for slecting 'No Restriction' option");
			}
			Back(1);

			extent.HeaderChildNode("Validate the Functionality of \"Done\" CTA(TC_09)");
			System.out.println("Validate the Functionality of \"Done\" CTA(TC_09)");
			verifyElementPresentAndClick(AMDSettingsScreen.objContinueCTA, "Continue CTA");
			click(AMDSettingsScreen.objDoneButton, "Done Button");
			if (verifyElementExist(AMDSettingsScreen.objSettingsScreenTitle, "Settings Screen Title")) {
				logger.info("Done CTA is functional");
				extent.extentLoggerPass("", "Done CTA is functional");
			} else {
				logger.error("Done CTA is NOT functional");
				extent.extentLoggerFail("", "Done CTA is NOT functional");
			}

			extent.HeaderChildNode(
					"Validate the functionality of \"Continue\" CTA post selecting any of the options except \"No Restriction\". CTA(TC_10)");
			System.out.println(
					"Validate the functionality of \"Continue\" CTA post selecting any of the options except \"No Restriction\". CTA(TC_10)");
			Swipe("UP", 1);
			verifyElementPresentAndClick(AMDSettingsScreen.objParentalControloption, "Parental Control option");
			verifyElementPresentAndClick(AMDSettingsScreen.objPasswordfield, "Password field");
			waitTime(8000);
			type(AMDSettingsScreen.objPasswordfield, Password, "Enter Password");
			hideKeyboard();
			waitTime(8000);
			verifyElementPresentAndClick(AMDSettingsScreen.objContinueCTAVerifyAccount, "Continue Button Set PIN page");
			waitTime(8000);
			verifyElementPresentAndClick(AMDSettingsScreen.objRestrictAllContent, "Restrict All Content");
			verifyElementPresentAndClick(AMDSettingsScreen.objContinueCTA, "Continue CTA");
			if (verifyElementExist(AMDSettingsScreen.objSetPIN, "Set PIN Popup")) {
				logger.info("Continue CTA is functional for slecting other option except 'No Restriction'");
				extent.extentLoggerPass("",
						"Continue CTA is functional for slecting other option except 'No Restriction'");
			} else {
				logger.error("Continue CTA is functional for slecting other option except 'No Restriction'");
				extent.extentLoggerFail("",
						"Continue CTA is functional for slecting other option except 'No Restriction'");
			}
			verifyElementExist(AMDSettingsScreen.objEnterNew4DigitPIN, "Enter new 4-digit PIN");
			hideKeyboard();
			verifyElementExist(AMDSettingsScreen.objShowPIN, "Show PIN");
			verifyElementExist(AMDSettingsScreen.objContinueButtonSetPINpage, "Continue Button Set PIN page");

			extent.HeaderChildNode(
					"Validate the functionality of \"Continue\" CTA post selecting any of the options except \"No Restriction\". (TC_11)");
			System.out.println(
					"Validate the functionality of \"Continue\" CTA post selecting any of the options except \"No Restriction\". (TC_11)");
			verifyElementExist(AMDSettingsScreen.objSetPIN, "Set PIN Popup");
			verifyElementPresentAndClick(AMDSettingsScreen.objEnterPINTextFeiled, "Enter PIN");
			type(AMDSettingsScreen.objEnterPINTextFeiled, "1122", "Enter PIN");
			hideKeyboard();
			verifyElementPresentAndClick(AMDSettingsScreen.objContinueButtonSetPINpage, "Continue Button Set PIN page");
			waitTime(8000);
			if (verifyElementExist(AMDSettingsScreen.objParentalControlSettingsAppliedSuccessfully,
					"Parental control settings applied successfully")) {
				logger.info("Continue CTA is functional and user is able to set parental pin successfully");
				extent.extentLoggerPass("",
						"Continue CTA is functional and user is able to set parental pin successfully");
			} else {
				logger.error("Continue CTA is NOT functional and user is Unable to set parental pin successfully");
				extent.extentLoggerFail("",
						"Continue CTA is NOT functional and user is Unable to set parental pin successfully");
			}
			verifyElementExist(AMDSettingsScreen.objDoneButton, "Done Button on Success page");

			extent.HeaderChildNode("Validate the Functionality of \"Done\" CTA (TC_12)");
			System.out.println("Validate the Functionality of \"Done\" CTA (TC_12)");
			click(AMDSettingsScreen.objDoneButton, "Done Button on Success page");
			if (verifyElementExist(AMDSettingsScreen.objSettingsScreenTitle, "Settings Screen Title")) {
				logger.info("Done CTA on Success page is functional");
				extent.extentLoggerPass("", "Done CTA on Success page is functional");
			} else {
				logger.error("Done CTA on Success page is NOT functional");
				extent.extentLoggerFail("", "Done CTA on Success page is NOT functional");
			}

			extent.HeaderChildNode(
					"Validate that Parental control PIN dialog is displayed on consumption screen, if user set any of the below mentioned options.\r\n"
							+ " (TC_13)");
			System.out.println(
					"Validate that Parental control PIN dialog is displayed on consumption screen, if user set any of the below mentioned options.\r\n"
							+ " (TC_13)");
			verifyElementPresentAndClick(AMDSettingsScreen.objBackButton, "Back Button");
			verifyElementPresentAndClick(AMDHomePage.objHomeTab, "Home tab");
			waitTime(5000);
			verifyElementPresentAndClick(AMDHomePage.objPlayBtn, "Play Button on carousel");
			if(checkElementExist(AMDConsumptionScreen.objEnterYour4DigitPIN)) {
			if (checkElementExist(AMDConsumptionScreen.objEnterYour4DigitPIN)) {
				logger.info("Enter your 4-digit PIN parental pop up is displayed on playing the content");
				extent.extentLoggerPass("",
						"Enter your 4-digit PIN parental pop up is displayed on playing the content");
			} else {
				logger.error("Enter your 4-digit PIN parental pop up is NOT displayed on playing the content");
				extent.extentLoggerFail("",
						"Enter your 4-digit PIN parental pop up is NOT displayed on playing the content");
			}
			}
			else {
				if (checkElementExist(AMDConsumptionScreen.NewEnterPINOnPlayerScreen)) {
					logger.info("Enter your 4-digit PIN on player screen is displayed on playing the content");
					extent.extentLoggerPass("",
							"Enter your 4-digit PIN on player screen is displayed on playing the content");
				} else {
					logger.error("Enter your 4-digit PIN on player screen is NOT displayed on playing the content");
					extent.extentLoggerFail("",
							"Enter your 4-digit PIN on player screen is NOT displayed on playing the content");
				}
			}
			extent.HeaderChildNode("Validate the functionality when user select \"No Restrictions\" option. (TC_14)");
			System.out.println("Validate the functionality when user select \"No Restrictions\" option. (TC_14)");
			BackToLandingScreen();
			waitTime(4000);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuBtn, "More Menu");
			waitTime(4000);
			verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings");
			waitTime(4000);
			Swipe("UP", 1);
			verifyElementPresent(AMDSettingsScreen.objParentalControloption, "Parental Control option");
			click(AMDSettingsScreen.objParentalControloption, "Parental Control option");
			verifyElementPresentAndClick(AMDSettingsScreen.objPasswordfield, "Password field");
			waitTime(5000);
			type(AMDSettingsScreen.objPasswordfield, Password, "Enter Password");
			hideKeyboard();
			waitTime(8000);
			verifyElementPresentAndClick(AMDSettingsScreen.objContinueCTAVerifyAccount, "Continue Button Set PIN page");
			waitTime(8000);
			verifyElementPresentAndClick(AMDSettingsScreen.objNoRestrictions, "No Restrictions");
			verifyElementPresentAndClick(AMDSettingsScreen.objContinueCTA, "Continue CTA");
			verifyElementPresent(AMDSettingsScreen.objSuccessPage, "Success! Page");
			click(AMDSettingsScreen.objDoneButton, "Done Button");
			verifyElementPresent(AMDSettingsScreen.objSettingsScreenTitle, "Settings Screen Title");
			verifyElementPresentAndClick(AMDSettingsScreen.objBackButton, "Back Button");
			verifyElementPresentAndClick(AMDHomePage.objHomeTab, "Home tab");
			waitTime(5000);
			verifyElementPresentAndClick(AMDHomePage.objPlayBtn, "Play Button on carousel");
			if (verifyElementIsNotDisplayed(AMDConsumptionScreen.objEnterYour4DigitPIN) | verifyElementIsNotDisplayed(AMDConsumptionScreen.NewEnterPINOnPlayerScreen)) {
				logger.info(
						"Parental Control PIN dialog is NOT displayed for content on selecting 'No Restriction option'");
				extent.extentLoggerPass("",
						"Parental Control PIN dialog is NOT displayed for content on selecting 'No Restriction option'");
			} else {
				logger.error(
						"Parental Control PIN dialog is displayed for content on selecting 'No Restriction option'");
				extent.extentLoggerFail("",
						"Parental Control PIN dialog is displayed for content on selecting 'No Restriction option'");
			}
		} else {
			logger.info("Parental Control Validation is not Applicable for " + userType);
			extent.extentLogger("", "Parental Control Validation is not Applicable for " + userType);
		}
	}
/**
 * @note this method is used to validate Grievance Redressal page
 * @param userType
 * @throws Exception
 */
	public void grievance_Redressal(String userType) throws Exception {
		extent.HeaderChildNode("Validation of Grievance Redressal page");
		click(AMDHomePage.objMoreMenu, "More menu");
		Swipe("UP", 2);
		if (verifyElementDisplayed(AMDMoreMenu.objGrievanceRedressalOption)) {
			logger.info("Grievance Redressal option is displayed in More menu for " + userType);
			extentLoggerPass("MoreMenu", "Grievance Redressal option is displayed in More menu for " + userType);
		} else {
			logger.error("Grievance Redressal option is NOT displayed in More menu for " + userType);
			extentLoggerFail("MoreMenu", "Grievance Redressal option is NOT displayed in More menu for " + userType);
		}
		click(AMDMoreMenu.objGrievanceRedressalOption, "Grievance Redressal option");
		waitTime(5000);
		String context = getDriver().getContext();
		System.out.println("context is : " + context);
		if (verifyElementDisplayed(AMDMoreMenu.GrievanceRedressalPage)) {
			logger.info("User is navigated to Grievance Redressal page");
			extentLoggerPass("MoreMenu", "User is navigated to Grievance Redressal page");
		} else {
			logger.error("User is NOT navigated to Grievance Redressal page");
			extentLoggerFail("MoreMenu", "User is NOT navigated to Grievance Redressal page");
		}
		swipeUntilFindElement(AMDMoreMenu.WasThisarticleHelpful, "UP");
		if (verifyElementDisplayed(AMDMoreMenu.WasThisarticleHelpful)) {
			verifyElementExist(AMDMoreMenu.WasThisarticleHelpful,
					"'Was this article helpful?' in Grievance Redressal page");
			verifyElementExist(AMDMoreMenu.WasThisarticleHelfulYesBtn, "'Was this article helpful?' Yes button");
			verifyElementExist(AMDMoreMenu.WasThisarticleHelfulNoBtn, "'Was this article helpful?' No button");
		} else {
			logger.error("'Was this article helpful?'is not displayed");
			extentLoggerFail("MoreMenu", "'Was this article helpful?'is not displayed");
		}
		Swipe("DOWN", 2);
		if (verifyElementDisplayed(AMDMoreMenu.GrievanceRedressalEmailId)) {
			logger.info("Grievnance Redressal Email Id is displayed");
			extentLoggerPass("MoreMenu", "Grievnance Redressal Email Id is displayed");
			String str1 = getAttributValue("content-desc", AMDMoreMenu.GrievanceRedressalEmailId);
			// String str1 = findElement(AMDMoreMenu.GrievanceRedressalEmailId).getText();
			System.out.println(str1);
			extentLogger("", "Email id present on Grievance Redressal screen is: " + str1);
			click(AMDMoreMenu.GrievanceRedressalEmailId, "Grievnance Redressal Email Id");
			waitTime(3000);
			if (verifyIsElementDisplayed(AMDMoreMenu.objInternetErrormsg)) {
				logger.error("On clicking the email id, " + str1
						+ "User is unable to navigate to the respective page of email id");
				extent.extentLoggerFail("HyperLink", "On clicking the email id, " + str1
						+ " User is unable to navigate to the respective page of email id");
			} else {
				if (checkElementExist(AMDLoginScreen.objEmailSelect, "Email select popup")) {
					logger.info("On clicking email id, email account pop up is displayed");
					extentLogger("MoreMenu", "On clicking email id, email account pop up is displayed");
					click(AMDLoginScreen.objSelectGmail, "Gmail Account");
					waitTime(5000);
					hideKeyboard();
					if (checkElementExist(AMDMoreMenu.objGmailpage, "Email page")) {
						logger.info("User is navigated to respective page on clicking email id");
						extentLoggerPass("MoreMenu", "User is navigated to respective page on clicking email id");
					} else {
						logger.error("User is navigated to respective page on clicking email id");
						extentLoggerFail("MoreMenu", "User is navigated to respective page on clicking email id");
					}
					Back(1);
				}
			}
		} else {
			logger.error("Grievnance Redressal Email Id is NOT displayed");
			extentLoggerFail("MoreMenu", "Grievnance Redressal Email Id is NOT displayed");
		}
		verifyElementExist(AMDMoreMenu.objcloseButton, "Close icon in Grievance Redressal page");
		click(AMDMoreMenu.objcloseButton, "Close icon in Grievance Redressal page");
		if (checkElementExist(AMDMoreMenu.objGrievanceRedressalOption)) {
			logger.info(
					"User is navigated to the Previous screen on clicking the Close button in Grievnance Redressal screen");
			extent.extentLoggerPass("Help Center",
					"User is navigated to the Previous screen on clicking the Close button in Grievnance Redressal screen");
		} else {
			logger.error(
					"User is unable to navigate to the Previous screen on clicking the Close button in Grievnance Redressal screen");
			extent.extentLoggerFail("Help Center",
					"User is unable to navigate to the Previous screen on clicking the Close button in Grievnance Redressal screen");
		}
	}
/**
 * @note this method is used for SB validation.
 * @param pTitle
 * @param pSubTitle
 * @throws Exception
 */
	public void verifySugarBoxNotification(String pTitle, String pSubTitle) throws Exception {
		extent.HeaderChildNode("SugarBox Notification Validation");
		System.out.println("\nSugarBox Notification Validation");

//		String pTitle = "Welcome to the SugarBox Zone";
//		String pSubTitle = "Connect to SugarBox Wi-Fi and start watching ZEE5 Premium without using mobile data";

		String readNotification, readNotification2;
		String notificationCommand = "adb shell dumpsys notification --noredact | grep Zone";
		String notificationCommand2 = "adb shell dumpsys notification --noredact | grep ZEE5";

		waitTime(12000);
		Process process = Runtime.getRuntime().exec(notificationCommand);
		BufferedReader Result = new BufferedReader(new InputStreamReader(process.getInputStream()));

		Process secProcess = Runtime.getRuntime().exec(notificationCommand2);
		BufferedReader secResult = new BufferedReader(new InputStreamReader(secProcess.getInputStream()));

		boolean flagTitle = false, flagSubTitle = false;
		for (int iCount = 1; iCount < 15; iCount++) {
			readNotification = Result.readLine();
			readNotification2 = secResult.readLine();
			if (readNotification.contains(pTitle) && flagTitle == false) {
				flagTitle = true;
				logger.info("SugarBox Notification (Title) is displayed: " + pTitle);
				extent.extentLoggerPass("Notification", "Notification (Title) is displayed: " + pTitle);
			}
			if (readNotification.contains(pSubTitle) && flagSubTitle == false) {
				flagSubTitle = true;
				logger.info("SugarBox Notification (SubTitle) is displayed: " + pSubTitle);
				extent.extentLoggerPass("Notification", "Notification (SubTitle) is displayed: " + pSubTitle);
			} else if (readNotification2.contains(pSubTitle) && flagSubTitle == false) {
				flagSubTitle = true;
				logger.info("SugarBox Notification (SubTitle) is displayed: " + pSubTitle);
				extent.extentLoggerPass("Notification", "Notification (SubTitle) is displayed: " + pSubTitle);
			}

			if (flagTitle == true && flagSubTitle == true) {
				break;
			}
		}

		if (flagTitle == false || flagSubTitle == false) {
			logger.info("SugarBox Notification is not displayed");
			extent.extentLoggerFail("Notification", "SugarBox Notification (SubTitle) is not displayed");
		}
	}
/**
 * @note This method is used to verify SB welcome back screen
 * @param pUsertype
 * @throws Exception
 */
	public void verifyWelcomeBackScreenInSugarboxNetwork(String pUsertype) throws Exception {
		extent.HeaderChildNode("Welcome Back Screen");
		System.out.println("\nWelcome Back Screen");

		verifyElementPresentAndClick(AMDHomePage.HomeIcon, "Landing screen");
		Back(1);
		if (verifyElementDisplayed(AMDGenericObjects.objText("Are you sure you want to exit ZEE5?"))) {
			click(AMDHomePage.objQuitYesCTA, "YES CTA");
			logger.info("Quiting the ZEE5 App");
			extent.extentLoggerPass("App Quit", "Quiting the ZEE5 App");
			waitTime(5000);
		}

		// Re-launching the App to verify 'Welcome Back' Screen
		relaunch(false);
		waitTime(30000);
		waitForElementDisplayed(AMDGenericObjects.objContainText("Welcome Back"), 60);
		if (verifyElementDisplayed(AMDGenericObjects.objText("Welcome Back"))) {
			logger.info("Welcome Back screen is displayed");
			extent.extentLoggerPass("Welcome Back", "<b>Welcome Back</b> screen is displayed");
		} else {
			logger.error("Welcome Back screen is not displayed");
			extent.extentLoggerFail("Welcome Back", "<b>Welcome Back</b> screen is not displayed");
		}

		if (verifyElementDisplayed(AMDSugarbox.SBLogoWelcomeScreen)) {
			logger.info("SugarBox logo is displayed in Welcom Back screen");
			extent.extentLoggerPass("Logo", "<b>SugarBox logo</b> is displayed in Welcom Back screen");
		} else {
			logger.error("SugarBox logo is not displayed");
			extent.extentLoggerFail("Logo", "<b>SugarBox logo</b> is not displayed");
		}

		if (verifyElementDisplayed(
				AMDGenericObjects.objText("Continue your ZEE5 experience at ZERO data cost with SugarBox"))) {
			logger.info("Continue your ZEE5 experience at ZERO data cost with SugarBox is displayed");
			extent.extentLoggerPass("Welcome Back",
					"<b>Continue your ZEE5 experience at ZERO data cost with SugarBox</b> is displayed");
		} else {
			logger.error("Continue your ZEE5 experience at ZERO data cost with SugarBox is not displayed");
			extent.extentLoggerFail("Welcome Back",
					"<b>Continue your ZEE5 experience at ZERO data cost with SugarBox</b> is not displayed");
		}

		if (verifyElementDisplayed(AMDGenericObjects.objText("#SaveTheInternet"))) {
			logger.info("#SaveTheInternet is displayed");
			extent.extentLoggerPass("#SaveTheInternet", "<b>#SaveTheInternet</b> is displayed");
		} else {
			logger.error("#SaveTheInternet is not displayed");
			extent.extentLoggerFail("#SaveTheInternet", "<b>#SaveTheInternet</b> is not displayed");
		}

		verifyElementPresentAndClick(AMDSugarbox.objContinueToSugarBoxCTA, "ContinueToSugarBox CTA");
		waitTime(3000);
		verifyElementPresent(AMDHomePage.objHomeBottomBtn, "Home Page");
	}
/**
 * @note this method is used to Verify Content Descriptor for News and Live content
 * @param userType
 * @throws Exception
 */
	public void contentDescriptorForNewsAndLiveContent(String userType) throws Exception {
		extent.HeaderChildNode("Verify Content Descriptor for News and Live content");
		selectTopNavigationTab("News");
		waitTime(3000);
		verifyElementPresentAndClick(AMDHomePage.objPlayBtn, "Play button");
		boolean value = verifyElementIsNotDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
		if (value) {
			logger.info("Content Descriptor is NOT displayed for News content - Expected Behaviour");
			extentLoggerPass("", "Content Descriptor is NOT displayed for News content - Expected Behaviour");
		} else {
			logger.error("Content Descriptor is displayed for News content");
			extentLoggerFail("", "Content Descriptor is displayed for News content");
		}
		waitTime(3000);
		Back(1);
		verifyElementPresentAndClick(AMDHomePage.objPlayBtn, "Play button");
		boolean value1 = verifyElementIsNotDisplayed(AMDPlayerScreen.objAgeRatedOnPlayer);
		if (value1) {
			logger.info("Age Rating on Player is NOT displayed for News content - Expected Behaviour");
			extentLoggerPass("", "Age Rating on Player is NOT displayed for News content - Expected Behaviour");
		} else {
			logger.error("Age Rating on Player is displayed for News content");
			extentLoggerFail("", "Age Rating on Player is displayed for News content");
		}
		waitTime(3000);
		Back(1);
		click(AMDHomePage.objHomeBottomBtn, "Home icon");
		selectTopNavigationTab("Live TV");
		click(AMDLiveTVScreen.objLiveTVFirstContentCard, "Live Tv content");
		// verifyElementExist(AMDLiveTVScreen.objLiveTV, "Live toggle on Player
		// screen");
		boolean value2 = verifyElementIsNotDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
		if (value2) {
			logger.info("Content Descriptor is NOT displayed for Live content - Expected Behaviour");
			extentLoggerPass("", "Content Descriptor is NOT displayed for Live content - Expected Behaviour");
		} else {
			logger.error("Content Descriptor is displayed for Live content");
			extentLoggerFail("", "Content Descriptor is displayed for Live content");
		}
		waitTime(3000);
		Back(1);
		click(AMDLiveTVScreen.objLiveTVFirstContentCard, "Live Tv content");
		// verifyElementExist(AMDLiveTVScreen.objLiveTV, "Live toggle on Player
		// screen");
		boolean value3 = verifyElementIsNotDisplayed(AMDPlayerScreen.objAgeRatedOnPlayer);
		if (value3) {
			logger.info("Age Rating on Player is NOT displayed for Live content - Expected Behaviour");
			extentLoggerPass("", "Age Rating on Player is NOT displayed for Live content - Expected Behaviour");
		} else {
			logger.error("Age Rating on Player is displayed for Live content");
			extentLoggerFail("", "Age Rating on Player is displayed for Live content");
		}
	}
/**
 * @note this method is used to Verify Content Descriptor for Ads
 * @param userType
 * @param searchcontent
 * @throws Exception
 */
	public void verifyContentDescriptorForAds(String userType, String searchcontent) throws Exception {
		extent.HeaderChildNode("Verify Content Descriptor for Ads");
		if (!userType.equals("SubscribedUser")) {
			verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, searchcontent + "\n", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objFirstSearchResult1(searchcontent), "Search result");
			if (verifyIsElementDisplayed(AMDPlayerScreen.objAd2)) {
				logger.info("Ad is playing");
				extentLogger("Ad", "Ad is playing");
			}
			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objContentDescOnPlayer)) {
				logger.info("Content Descriptor is NOT displayed for Ads - Expected Behaviour");
				extentLoggerPass("", "Content Descriptor is NOT displayed for Ads - Expected Behaviour");
			} else {
				logger.error("Content Descriptor is displayed for Ads");
				extentLoggerFail("", "Content Descriptor is displayed for Ads");
			}
		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}
/**
 * @note this method is used to Verify Content Descriptor After Ad completes
 * @param userType
 * @param searchcontent
 * @throws Exception
 */
	public void verifyContentDescriptorAfterAdFinishes(String userType, String searchcontent) throws Exception {
		extent.HeaderChildNode("Verify Content Descriptor After Ad completes");
		if (!userType.equals("SubscribedUser")) {
			verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, searchcontent + "\n", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objMoviesTab, "Movies tab");
			click(AMDSearchScreen.objFirstSearchResult1(searchcontent), "Search result");
			if (verifyIsElementDisplayed(AMDPlayerScreen.objAd2)) {
				logger.info("Ad is playing");
				extentLogger("Ad", "Ad is playing");
				verifyElementNotPresent(AMDPlayerScreen.objAd2, 300);
			}
//			else {
//				logger.info("Ad is not played");
//				extentLogger("Ad", "Ad is not played");
//			}
			waitTime(5000);
			boolean value = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			System.out.println(value);
			if (value) {
				logger.info("Content Descriptor is displayed After Ad is completed");
				extentLoggerPass("", "Content Descriptor is displayed After Ad is completed");
			} else {
				logger.error("Content Descriptor is NOT displayed After Ad is completed");
				extentLoggerFail("", "Content Descriptor is NOT displayed After Ad is completed");
			}
		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}
/**
 * @note this method is used to Verify Content Descriptor For Downloaded content
 * @param userType
 * @throws Exception
 */
	public void contentDescriptorForDownloadedContent(String userType) throws Exception {
		extent.HeaderChildNode("Verify Content Descriptor For Downloaded content");
		if (!(userType.equalsIgnoreCase("Guest"))) {

			click(AMDSearchScreen.objSearchIcon, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, "Bebaakee" + "\n", "Search bar");
			waitTime(2000);
			hideKeyboard();
			click(AMDDownloadPage.objsearchresultFirst, "Searched Show");
			waitTime(3000);
			verifyElementPresentAndClick(AMDDownloadPage.objDownloadIcon, "Download button");
			waitTime(2000);
			downloadVideoQualityPopUp("Better", true);
			waitTime(3000);
			Back(1);
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			click(AMDDownloadPage.objRightArrow, "Right arrow");
			waitForElementAndClickIfPresent(AMDDownloadPage.objDownloadCompleteIcon, 8000, "downloadCompleteIcon");
			verifyElementPresentAndClick(AMDDownloadPage.objPlayDownloadedContent, "Play Call-out");
			boolean value = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			System.out.println(value);
			if (value) {
				logger.info("Content Descriptor is displayed for Downloaded content");
				extentLoggerPass("", "Content Descriptor is displayed for Downloaded content");
			} else {
				logger.error("Content Descriptor is NOT displayed for Downloaded content");
				extentLoggerFail("", "Content Descriptor is NOT displayed for Downloaded content");
			}
			waitTime(4000);
			Back(1);
		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}
/**
 * @note This method is used to verify the Content Descriptor for Downloaded content in OFFLINE mode.
 * @param userType
 * @throws Exception
 */
	public void contentDescriptorForDownloadedContentInOffline(String userType) throws Exception {
		extent.HeaderChildNode("Verify Content Descriptor for Downloaded content in OFFLINE");
		if (!(userType.equalsIgnoreCase("Guest"))) {
			click(AMDDownloadPage.objRightArrow, "Right arrow");
			click(AMDDownloadPage.objDownloadedContent, "Downloaded content");
			waitTime(2000);
			TurnOFFWifi();
			if (getOEMName.equalsIgnoreCase("Sony")) {
				wifi_TurnOFFnON();
			}
			waitTime(4000);
			verifyElementPresentAndClick(AMDDownloadPage.objPlayDownloadedContent, "Play Call-out");
			boolean value = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			System.out.println(value);
			if (value) {
				logger.info("Content Descriptor is displayed for Downloaded content in OFFLINE");
				extentLoggerPass("", "Content Descriptor is displayed for Downloaded content in OFFLINE");
			} else {
				logger.error("Content Descriptor is NOT displayed for Downloaded content in OFFLINE");
				extentLoggerFail("", "Content Descriptor is NOT displayed for Downloaded content in OFFLINE");
			}
			TurnONWifi();
			if (getOEMName.equalsIgnoreCase("Sony")) {
				wifi_TurnOFFnON();
			}
			waitTime(2000);
		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}

	}
/**
 * @note this method is used to Verify AGE RATED when Content Descriptor is Empty
 * @param userType
 * @throws Exception
 */
	public void verifyAgeRatedIfCDisEmpty(String userType) throws Exception {
		extent.HeaderChildNode("Verify AGE RATED when Content Descriptor is Empty");
		if ((userType.equalsIgnoreCase("Guest"))) {
			click(AMDSearchScreen.objSearchIcon, "Search icon");
			click(AMDSearchScreen.objSearchEditBox, "Search Box");
			type(AMDSearchScreen.objSearchBoxBar, "Sundari - Hebbuli" + "\n", "Search bar");
			waitTime(2000);
			hideKeyboard();
			click(AMDDownloadPage.objsearchresultFirst, "Searched Show");
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			waitForElementDisplayed(AMDDownloadPage.objPauseIconOnPlayer, 10000);
			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objContentDescOnPlayer)) {
				logger.info("Content Descriptor is Empty");
				extentLoggerPass("", "Content Descriptor is Empty");
				Back(1);
				click(AMDDownloadPage.objsearchresultFirst, "Searched Show");
				boolean AgeRatevalue = verifyElementDisplayed(AMDPlayerScreen.objAgeRatedOnPlayer);
				System.out.println(AgeRatevalue);
				if (AgeRatevalue == true) {
					logger.info("Age Rated is displayed if Content descriptor is empty");
					extentLoggerPass("", "Age Rated is displayed if Content descriptor is empty");
				} else {
					logger.error("Age Rated is NOT displayed if Content descriptor is empty");
					extentLoggerFail("", "Age Rated is NOT displayed if Content descriptor is empty");
				}
			}
		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}
/**
 * @note this method is used validate the age rating on CD and meta deta are similar
 * @param userType
 * @param searchcontent
 * @throws Exception
 */
	public void verifyAgeRating_OnPlayer_And_BelowPlayer(String userType, String searchcontent) throws Exception {
		extent.HeaderChildNode(
				"Verify that Age rating mentioned in Content descriptor is same as Age rating mentioned in meta data below the player");
		verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, searchcontent + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		// click(AMDSearchScreen.objMoviesTab,"Movies tab");
		click(AMDSearchScreen.objFirstSearchResult1(searchcontent), "Search result");
		verifyElementExist(AMDPlayerScreen.objAgeRatedOnPlayer, "Age Rating in Content Descriptor");
		String Rating = findElement(AMDPlayerScreen.objAgeRatedOnPlayer).getText();
		String Rate[] = Rating.split(" ");
		String AgeRated = Rate[1].concat(" ");
		String AGE = AgeRated.concat(Rate[2]);
		logger.info("Age Rating in metadata below the player is: " + AGE);
		extentLoggerPass("", "Age Rating in Content Descriptor is: " + AGE);
		String metadata = findElement(AMDConsumptionScreen.objContentInfo).getText();
		String[] arrSplit = metadata.split(" . ");
		System.out.println(arrSplit.length);
		for (int i = 0; i < arrSplit.length; i++) {
			System.out.println("Value at " + i + ": " + arrSplit[i]);
		}
		String eGenre = arrSplit[arrSplit.length - 1];
		String Rate1[] = eGenre.split(" ");
		String AgeRated1 = Rate1[1].concat(" ");
		String AGE1 = AgeRated1.concat(Rate1[2]);
		logger.info("Age Rating in metadata below the player is: " + AGE1);
		extentLoggerPass("", "Age Rating in metadata below the player is: " + AGE1);
		if (AGE.contentEquals(AGE1)) {
			logger.info(
					"Age Rated in Content descriptor is SAME as Age rating displayed in meta data below the player");
			extentLoggerPass("",
					"Age Rated in Content descriptor is SAME as Age rating displayed in meta data below the player");
		} else {
			logger.error(
					"Age Rated in Content descriptor is NOT same as Age rating displayed in meta data below the player");
			extentLoggerFail("",
					"Age Rated in Content descriptor is NOT same as Age rating displayed in meta data below the player");
		}

	}
/**
 * @note This method is used to verify CD after entering Parental PIN
 * @param userType
 * @param searchcontent
 * @throws Exception
 */
	public void verifyContentDescriptor_AfterEntering_ParentalPIN(String userType, String searchcontent)
			throws Exception {
		extent.HeaderChildNode(
				"Verify that After entering valid parental pin ,Playback will initiate i.e.Video start and User will get content descriptor as per CD logic");
		if (!(userType.equalsIgnoreCase("Guest"))) {
			click(AMDHomePage.MoreMenuIcon, "More Menu tab");
			waitTime(1000);
			PartialSwipe("UP", 1);
			click(AMDMoreMenu.objSettings, "Settings option");
			waitTime(1000);
			swipeUntilFindElement(AMDMoreMenu.objParentalControl, "UP");
			click(AMDMoreMenu.objParentalControl, "Parental Control");
			String password = "";
			if (userType.equals("NonSubscribedUser")) {
				password = getParameterFromXML("NonsubscribedPassword");
			} else if (userType.equals("SubscribedUser")) {
				password = getParameterFromXML("SubscribedPassword");
			}
			click(AMDMoreMenu.objPasswordField, "Password field");
			getDriver().getKeyboard().sendKeys(password);
			hideKeyboard();
			if (getOEMName.contains("vivo")) {
				hidePwdKeyboard();
			}
			click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(2000);
			click(AMDMoreMenu.objRestrictAllContent, "Restrict All Content option");
			click(AMDMoreMenu.objContinueBtn, "Continue Button");
			waitTime(4000);
			verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin");
			if (verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin")) {
				logger.info("Setting Parental Pin for " + pUserType);
				extentLoggerPass("Setting Parental Pin", "Setting Parental Pin for " + pUserType);
				type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin2, "2", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin3, "3", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
				hideKeyboard();
				waitTime(4000);
				click(AMDMoreMenu.objSetPinContinueBtn, "Continue Button");
				waitTime(2000);
				click(AMDMoreMenu.objParentalLockDone, "Done Button");
				Back(1);
				waitTime(3000);
				Back(1);
			} else {
				logger.info("Parental Pin Popup not displayed");
				extentLoggerFail("Parental Pin", "Parental Pin Popup not displayed");
			}
			verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, searchcontent + "\n", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objFirstSearchResult1(searchcontent), "Search result");
			verifyElementExist(AMDConsumptionScreen.objEnterYour4DigitPIN, "Enter your 4 digit PIN popup");
			type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
			hideKeyboard();
			type(AMDMoreMenu.objParentalLockPin2, "2", "ParentalLockPin");
			hideKeyboard();
			type(AMDMoreMenu.objParentalLockPin3, "3", "ParentalLockPin");
			hideKeyboard();
			type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
			hideKeyboard();
			waitTime(4000);
			click(AMDMoreMenu.objSetPinContinueBtn, "Continue Button");
			boolean value = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			System.out.println(value);
			if (value) {
				logger.info("Content Descriptor is displayed after entering valid Parental PIN");
				extentLoggerPass("", "Content Descriptor is displayed after entering valid Parental PIN");
			} else {
				logger.error("Content Descriptor is NOT displayed after entering valid Parental PIN");
				extentLoggerFail("", "Content Descriptor is NOT displayed after entering valid Parental PIN");
			}
			waitTime(3000);
			Back(1);
			click(AMDHomePage.MoreMenuIcon, "More Menu tab");
			waitTime(1000);
			PartialSwipe("UP", 1);
			click(AMDMoreMenu.objSettings, "Settings option");
			waitTime(2000);
			swipeUntilFindElement(AMDMoreMenu.objParentalControl, "UP");
			verifyElementPresentAndClick(AMDMoreMenu.objParentalControl, "Parental Control");
			verifyElementExist(AMDMoreMenu.objPasswordField, "Password field");
			if (userType.equals("NonSubscribedUser")) {
				password = getParameterFromXML("NonsubscribedPassword");
			} else if (userType.equals("SubscribedUser")) {
				password = getParameterFromXML("SubscribedPassword");
			}
			click(AMDMoreMenu.objPasswordField, "Password field");
			getDriver().getKeyboard().sendKeys(password);
			hideKeyboard();
			if (getOEMName.contains("vivo")) {
				hidePwdKeyboard();
			}
			click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(2000);
			click(AMDMoreMenu.objNoRestriction, "No Restriction");
			click(AMDMoreMenu.objContinueBtn, "Continue Button");
			waitTime(2000);
			click(AMDMoreMenu.objParentalLockDone, "Done Button");
			Back(1);
		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}
/**
 * @note this method is used for verifying Deeplink to  Grienance Redressal page
 * @param pDeeplinkUrl
 * @param pUserType
 * @throws Exception
 */
	public void deeplinkGrievanceRedressal(String pDeeplinkUrl, String pUserType) throws Exception {
		extent.HeaderChildNode("Deeplink Grienance Redressal");
		System.out.println("\nDeeplink Grienance Redressal");
		Duration timeElapsed = null;
		Instant startTime = Instant.now();
		logger.info("Start time: " + startTime);
		try {
			waitTime(3000);
			String cmd3 = "adb shell am start -W -a android.intent.action.VIEW -d  " + pDeeplinkUrl;
			Process process = Runtime.getRuntime().exec(cmd3);
			new BufferedReader(new InputStreamReader(process.getInputStream()));
			waitTime(12000);
			if (verifyIsElementDisplayed(AMDHomePage.objPopUpToOpenZeeApp)) {
				click(AMDHomePage.objJustOnceOption, "Just once option");
			}
			waitTime(4000);
			if (verifyIsElementDisplayed(AMDMoreMenu.GrievanceRedressalPage)) {
				logger.info("User is navigated to Grievance Redressal screen post tapping on deeplinking URL");
				extent.extentLoggerPass("",
						"User is navigated to Grievance Redressal screen post tapping on deeplinking URL");
			} else {
				logger.error("User failed to navigate to Grievance Redressal screen post tapping on deeplinking URL");
				extent.extentLoggerFail("",
						"User failed to navigate to Grievance Redressal screen post tapping on deeplinking URL");
			}
			Instant endTime = Instant.now();
			logger.info("End time: " + endTime);
			timeElapsed = Duration.between(startTime, endTime);
			System.out.println("Time taken to open Grievance Redressal page on clicking deeplink url is "
					+ timeElapsed.getSeconds() + " seconds");
			extentLogger("", "Time taken to open Grievance Redressal page on clicking deeplink url is "
					+ timeElapsed.getSeconds() + " seconds");

		} catch (Exception e) {
			System.out.println("URL is not triggered or accessible");
		}
	}
/**
 * @note this method is used for CD validation.
 * @param userType
 * @param searchcontent
 * @param contentType
 * @throws Exception
 */
	public void contentDescription_Validation(String userType, String searchcontent, String contentType)
			throws Exception {
		extent.HeaderChildNode(
				"TC_01,TC_02,TC_7:Verify that a small visual overlay is displayed on the player with age rating & the description of the content. ");
		System.out.println(
				"TC_01,TC_02,TC_7:Verify that a small visual overlay is displayed on the player with age rating & the description of the content. ");
		verifyElementPresentAndClick(AMDHomePage.objHomeBottomBtn, "Home Button");
		waitTime(5000);
		verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, searchcontent + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objFirstSearchResult1(searchcontent), "Search result");
		boolean value = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
		if (value == true) {
			logger.info("Content Descriptor is displayed for " + contentType + " " + searchcontent);
			extentLoggerPass("", "Content Descriptor is displayed for " + contentType + " " + searchcontent);
		} else {
			logger.error("Content Descriptor is NOT displayed for " + contentType + " " + searchcontent);
			extentLoggerFail("", "Content Descriptor is NOT displayed for " + contentType + " " + searchcontent);
		}
		boolean AgeRatevalue = verifyElementDisplayed(AMDPlayerScreen.objAgeRatedOnPlayer);
		System.out.println(AgeRatevalue);
		if (AgeRatevalue == true) {
			logger.info("Age Rated is displayed for " + contentType + " " + searchcontent);
			extentLoggerPass("", "Age Rated is displayed for " + contentType + " " + searchcontent);
		} else {
			logger.error("Age Rated is NOT displayed for " + contentType + " " + searchcontent);
			extentLoggerFail("", "Age Rated is NOT displayed for " + contentType + " " + searchcontent);
		}

	}
/**
 * @note this method is used to Verifying  the Content Descriptor  on the player when video starting on auto play
 * @param userType
 * @param searchcontent
 * @throws Exception
 */
	public void verifyCD_in_AutoPlay(String userType, String searchcontent) throws Exception {
		extent.HeaderChildNode(
				"TC_12 : Verify that Content Descriptor is displayed on the player when video starting on auto play.");
		System.out.println(
				"TC_12 : Verify that Content Descriptor is displayed on the player when video starting on auto play.");
		click(AMDHomePage.objMoreMenu, "More Menu");
		Swipe("UP", 1);
		click(AMDMoreMenu.objSettings, "Settings");
		verifyElementExist(AMDMoreMenu.objVideo_Autoply, "Video Auto play toggle");
		String text = findElement(AMDMoreMenu.objVideo_Autoply).getText();
		if (text.equalsIgnoreCase("OFF")) {
			click(AMDMoreMenu.objVideo_Autoply, "Video Auto play toggle");
		} else {
			logger.info("Video Auto play is switched ON");
			extentLoggerPass("", "Video Auto play is switched ON");
		}
		Back(1);
		verifyElementPresentAndClick(AMDHomePage.objHomeBottomBtn, "Home Button");
		waitTime(5000);
		verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, searchcontent + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objFirstSearchResult1(searchcontent), "Search result");
		waitTime(5000);
		click(AMDPlayerScreen.objPlayerScreen, "Player Screen");
		scrubProgressBarTillEnd(AMDPlayerScreen.objProgressBar);
		waitTime(6000);
		if (verifyElementDisplayed(AMDPlayerScreen.objAgeRatedOnPlayer)) {
			boolean value = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			if (value == true) {
				logger.info("Content Descriptor is displayed for when video starts on Auto play");
				extentLoggerPass("", "Content Descriptor is displayed for when video starts on Auto play");
			} else {
				logger.info("Content Descriptor is Empty");
				extentLoggerWarning("", "Content Descriptor is Empty");
			}
		}
	}
/**
 * @note This method is used for validating content playback bcz of CD.
 * @param userType
 * @param searchcontent
 * @throws Exception
 */
	public void verifyContentPlayability(String userType, String searchcontent) throws Exception {
		extent.HeaderChildNode(
				"TC_41 : Verify that user content playability will not be impacted due to content descriptor");
		System.out
				.println("TC_41 : Verify that user content playability will not be impacted due to content descriptor");
		verifyElementPresentAndClick(AMDHomePage.objHomeBottomBtn, "Home Button");
		waitTime(5000);
		verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, searchcontent + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objFirstSearchResult1(searchcontent), "Search result");
		boolean value = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
		if (value == true) {
			logger.info("Content Descriptor is displayed for " + searchcontent);
			extentLoggerPass("", "Content Descriptor is displayed for " + searchcontent);
		} else {
			logger.error("Content Descriptor is displayed for " + searchcontent);
			extentLoggerFail("", "Content Descriptor is displayed for " + searchcontent);
		}
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		waitTime(1000);
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		waitTime(2000);
		if (verifyElementDisplayed(AMDPlayerScreen.objPlay)) {
			logger.info("Content playability is not impacted due to Content Descriptor");
			extent.extentLoggerPass("", "Content playability is not impacted due to Content Descriptor");
		} else {
			logger.error("Content playability is impacted due to Content Descriptor");
			extent.extentLoggerFail("", "Content playability is impacted due to Content Descriptor");
		}

	}
/**
 * @note this method verifies all the player control will work properly when CD is displayed
 * @param userType
 * @param searchcontent
 * @throws Exception
 */
	public void verify_PlayerControls(String userType, String searchcontent) throws Exception {
		extent.HeaderChildNode("TC_42: Verify that all the player control will work properly");
		System.out.println("TC_4: Verify that all the player control will work properly");
		verifyElementPresentAndClick(AMDHomePage.objHomeBottomBtn, "Home Button");
		waitTime(5000);
		verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, searchcontent + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objFirstSearchResult1(searchcontent), "Search result");
		if (verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer)) {
			logger.info("Content Descriptor is displayed");
			extentLoggerPass("", "Content Descriptor is displayed");
		}
		waitTime(10000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPause, "Pause icon");
		if (verifyElementDisplayed(AMDPlayerScreen.objPlayIcon)) {
			logger.info("Pause icon is Functional");
			extent.extentLoggerPass("", "Pause icon is Functional");
		} else {
			logger.error("Pause icon is NOT Functional");
			extent.extentLoggerFail("", "Pause icon is NOT Functional");
		}
		click(AMDPlayerScreen.objPlayIcon, "Play icon");
		waitTime(18000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		if (verifyElementDisplayed(AMDPlayerScreen.objPause)) {
			logger.info("Play icon is Functional");
			extent.extentLoggerPass("", "Play icon is Functional");
		} else {
			logger.error("Play icon is NOT Functional");
			extent.extentLoggerFail("", "Play icon is NOT Functional");
		}
		click(AMDPlayerScreen.objPause, "Pause icon");
		verifyElementPresentAndClick(AMDPlayerScreen.objFullscreenIcon, "Maximize icon");
		waitTime(5000);
		GetAndVerifyOrientation("Landscape");
		waitTime(3000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		if (verifyElementDisplayed(AMDPlayerScreen.objFullscreenIcon)) {
			logger.info("Maximize icon is Functional");
			extent.extentLoggerPass("", "Maximize icon is Functional");
		} else {
			logger.error("Maximize icon is NOT Functional");
			extent.extentLoggerFail("", "Maximize icon is NOT Functional");
		}
		click(AMDPlayerScreen.objFullscreenIcon, "Minimize icon");
		waitTime(3000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		if (verifyElementDisplayed(AMDPlayerScreen.objFullscreenIcon)) {
			logger.info("Minimize icon is Functional");
			extent.extentLoggerPass("", "Minimize icon is Functional");
		} else {
			logger.error("Minimize icon is NOT Functional");
			extent.extentLoggerFail("", "Minimize icon is NOT Functional");
		}
		waitTime(3000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objNextIcon, "Next Icon");
		waitTime(5000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		if (verifyElementDisplayed(AMDPlayerScreen.objPreviousIcon)) {
			logger.info("Next icon is Functional");
			extent.extentLoggerPass("", "Next icon is Functional");
		} else {
			logger.error("Next icon is NOT Functional");
			extent.extentLoggerFail("", "Next icon is NOT Functional");
		}
		waitTime(5000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPreviousIcon, "Previous icon");
		waitTime(5000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		if (verifyElementDisplayed(AMDPlayerScreen.objNextIcon)) {
			logger.info("Previous Icon is Functional");
			extent.extentLoggerPass("", "Previous Icon is Functional");
		} else {
			logger.error("Previous Icon is NOT Functional");
			extent.extentLoggerFail("", "Previous Icon is NOT Functional");
		}
	}
/**
 * @note this method is used to verify Content Descriptor is displayed on the player when video starting from the beginning
 * @param userType
 * @throws Exception
 */
	public void contentDescriptorShouldBeDisplayedOnThePlayerWhenVideoStartingFromTheBeginning(String userType)
			throws Exception {
		extent.HeaderChildNode(
				"TC_09 Verify that Content Descriptor is displayed on the player when video starting from the beginning. ");
		System.out.println(
				"TC_09 Verify that Content Descriptor is displayed on the player when video starting from the beginning. ");

		swipeUntilFindElement(AMDHomePage.objFirstContentCardOfTray("Top"), "UP");
		verifyIsElementDisplayed(AMDHomePage.objFirstContentCardOfTray("Top"), "content");
		click(AMDHomePage.objFirstContentCardOfTray("Top"), "content");
		waitTime(5000);
		if (verifyElementExist(AMDPlayerScreen.objAgeRatedOnPlayer, "Age Rating on Player")) {
			if (verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer)) {
				logger.info("Content Descriptor is displayed");
				extentLoggerPass("", "Content Descriptor is displayed");
			} else {
				logger.info("Content Descriptor is Empty");
				extentLoggerWarning("", "Content Descriptor is Empty");
			}
		}
	}
/**
 * @note this method is used for verifying Content Descriptor is displayed on the player when video resuming from CW tray
 * @param userType
 * @throws Exception
 */
	public void resumedFromContinueWatchingTray(String userType) throws Exception {
		if (!userType.contentEquals("Guest")) {
			extent.HeaderChildNode(
					"TC_10: Verify that Content Descriptor is displayed on the player when video resuming.");
			System.out.println("TC_10 :Verify that Content Descriptor is displayed on the player when video resuming.");
			Swipe("DOWN", 1);
			if (verifyElementDisplayed(AMDHomePage.objContinueWatchingTray)) {
				logger.info("Continue watching tray is displayed in Home Landing screen");
				extent.extentLoggerPass("Continue watching",
						"Continue watching tray is displayed in Home Landing screen");
				waitTime(3000);
				verifyElementPresentAndClick(AMDHomePage.objFirstContentCardOfTray("Continue"),
						"Continue watching tray first Content");
				if (verifyElementExist(AMDPlayerScreen.objAgeRatedOnPlayer, "Age Rating on Player")) {
					boolean value = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
					System.out.println(value);
					if (value) {
						logger.info(
								"Content Descriptor is displayed after resuming the video from Continue watching tray");
						extentLoggerPass("",
								"Content Descriptor is displayed after resuming the video from Continue watching tray");
					} else {
						logger.info("Content Descriptor is Empty");
						extentLoggerWarning("", "Content Descriptor is Empty");
					}
				}
			} else {
				logger.error("Continue watching tray is NOT displayed in Landing screen");
				extent.extentLoggerFail("Continue watching",
						"Continue watching tray is NOT displayed in Landing screen");
			}
		} else {
			logger.info("Continue watching tray is not applicable for Guest user");
			extent.extentLogger("Continue watching", "Continue watching tray is not applicable for Guest user");
		}

	}
/**
 * @note this method is used for validating CD is displayed on clicking next button.
 * @param userType
 * @param searchcontent
 * @throws Exception
 */
	public void verify_CD_onClicking_NextIcon(String userType, String searchcontent) throws Exception {
		extent.HeaderChildNode(
				"TC_11 : Verify that Content Descriptor is displayed on the player when video starting on clicking \"Next\" on player.");
		System.out.println(
				"TC_11 : Verify that Content Descriptor is displayed on the player when video starting on clicking \"Next\" on player.");
		verifyElementPresentAndClick(AMDHomePage.objHomeBottomBtn, "Home Button");
		waitTime(5000);
		verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, searchcontent + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objFirstSearchResult1(searchcontent), "Search result");
		waitTime(8000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objNextIcon, "Next Icon");
		if (verifyElementExist(AMDPlayerScreen.objAgeRatedOnPlayer, "Age Rating on Player")) {
			boolean value = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			if (value == true) {
				logger.info("Content Descriptor is displayed on player when video started on clicking Next icon");
				extentLoggerPass("",
						"Content Descriptor is displayed on player when video started on clicking Next icon");
			} else {
				logger.info("Content Descriptor is Empty");
				extentLoggerWarning("", "Content Descriptor is Empty");
			}
		}
	}
/**
 * @note this method is used for validating CD feature for the TVOD contents.
 * @param userType
 * @throws Exception
 */
	public void contentDescriptorTVOD(String userType) throws Exception {
		contentDescriptor_TVODContentFromContinueWatching(userType);// contentName
		contentDescriptor_TVODContentFromMyRentals(userType);// contentName
		contentDescriptor_TVODContentForInterruption(userType);// contentName
	}
/**
 * @note this method is used for validating the CD in different screen orientation.
 * @param userType
 * @throws Exception
 */
	public void contentDescriptorPostPlayerElements(String userType) throws Exception {
		contentDescriptorVPlayerElements(userType);// contentName14
		contentDescriptorPlayerinterruption(userType);// contentName 17
		ContentDescriptorPostPlayerkill(userType);// contentName19
		contentDescriptorPotraitOrientatonValidation(userType);// 20
		contentDescriptorLandscapeOrientatonValidation(userType);// contentName 21
		contentDescriptorEpisodeValidation(userType);// 22
		contentDescriptorDisplayDurationValidation(userType);// contentName18
		contentDescriptorDisplayValidation(userType);// contentName 16
	}
/**
 * @note this method is used for searching the content
 * @param Keyword
 * @param contentType
 * @throws Exception
 */
	public void searchContent(String Keyword, String contentType) throws Exception {
		navigateBackToHomeLandingScreen();
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, Keyword, "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objFirstSearchResult1(Keyword), "Search result");
//			if(contentType.equals("Web Series")) {
//				
//				click(AMDGenericObjects.objFirstCardFromTray, "First Content Card");
//			}
	}
/**
 * @note this method is used for handling PC pop up.
 * @throws Exception
 */
	public void handleParentalPopUp() throws Exception {

		boolean checkParentalPopUp = verifyElementDisplayed(AMDPlayerScreen.objParentalPinPopUp);
		if (checkParentalPopUp) {
			logger.info("Parental Pin Popup is displayed");
			waitTime(3000);
			if (verifyIsElementDisplayed(AMDPlayerScreen.objParentalPinPopUp)) {
				type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin2, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin3, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin4, "1", "ParentalLockPin");
				hideKeyboard();
				waitTime(4000);
				click(AMDPlayerScreen.objParentalPinContinue, "Continue Button");
			}
		}
	}
/**
 * @note this method is used for verifying CD on deeplinking.
 * @param userType
 * @throws Exception
 */
	public void contentDescriptorDeeplinkValidation(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Content descriptor overlay");
			extent.HeaderChildNode(
					"TC_13 : Verify that Content Descriptor is displayed on the player when user deeplink any content.");
			System.out.println(
					"TC_13 : Verify that Content Descriptor is displayed on the player when user deeplink any content.");
			waitTime(6000);

			deepLinkContentDecsriptor("Consumption");

			// handleParentalPopUp();
//				if(userType.equalsIgnoreCase("NonSubscribedUser")) {
//				waitForAdToFinishInAmd();
//				}

			boolean value = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			if (value == true) {
				logger.info("Content Descriptor is displayed on deeplinking a content");
				extentLoggerPass("", "Content Descriptor is displayed on deeplinking a content");
			} else {
				logger.error("Content Descriptor is not displayed on deeplinking a content");
				extentLoggerFail("", "Content Descriptor is not displayed on deeplinking a content");
			}
			waitTime(3000);
			Back(1);
			waitTime(3000);
		}
	}
/**
 * @note this method is used for validating the CD when player controls are displayed.
 * @param userType
 * @throws Exception
 */
	public void contentDescriptorVPlayerElements(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {

			extent.HeaderChildNode(
					"TC_14 : Verify that Content Descriptor will display on player when other player elements are displayed.");
			System.out.println(
					"TC_14 : Verify that Content Descriptor will display on player when other player elements are displayed.");
			waitTime(6000);
			searchContent("14 Phere", "Movie");
//			handleParentalPopUp();
//			if(userType.equalsIgnoreCase("NonSubscribedUser")) {
//			waitForAdToFinishInAmd();
//			}
			// waitForElementDisplayed(AMDPlayerScreen.objPauseIcon,5);
			click(AMDPlayerScreen.objPlayer, "Content descriptor");

			boolean value = verifyElementPresent(AMDPlayerScreen.objPauseIcon, "Player control");
			if (value == true) {
				boolean value1 = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
				if (value1 == true) {
					logger.info("Content Descriptor displayed after player controls disappears");
					extentLoggerPass("Content Descriptor",
							"Content Descriptor displayed after player controls disappears");

				} else {
					logger.error("Content Descriptor is not displayed after player controls disappears");
					extentLoggerFail("Rating", "Content Descriptor is not displayed after player controls disappears");

				}
			} else {
				logger.error("Player controls fail to display");
				extentLoggerFail("Rating", "Player controls fail to display");

			}
			waitTime(3000);
			Back(2);
			waitTime(3000);
		}
	}
/**
 * @note this method is used for validating the time of CD appearance on Player screen.
 * @param userType
 * @throws Exception
 */
	public void contentDescriptorDisplayValidation(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {

			extent.HeaderChildNode(
					"TC_16 : Validate that Content Descriptor is displayed for a period of 5 seconds on the player.");
			System.out.println(
					"TC_16 : Validate that Content Descriptor is displayed for a period of 5 seconds on the player.");
			waitTime(6000);
			searchContent("14 Phere", "Web Series");
//			handleParentalPopUp();
//			if(userType.equalsIgnoreCase("NonSubscribedUser")||userType.equalsIgnoreCase("Guest")) {
//			waitForAdToFinishInAmd();
//			}
			waitTime(4000);

			logger.info("Content Description is displayed 1");
			String time1 = getText(AMDPlayerScreen.objTimer);
			int startTime = timeToSec(time1);
			System.out.println(startTime + " Start time");
			if (verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer)) {

				waitTime(2000);
				tapPlayerToGetControls("Potrait");
				waitTime(1000);


				logger.info("Content Description is not displayed");

				String time2 = getText(AMDPlayerScreen.objTimer);
				int startTime2 = timeToSec(time2);
				int startTime3 = (startTime2 - startTime);
				System.out.println(startTime3);
				String s = Integer.toString(startTime3);
				System.out.println(s + " Content descriptor duration");



				if (s.equals("5")) {
					logger.info("Content Description is disappeared after displaying for a period of 5 seconds");
					extentLoggerPass("Content Descriptor ",
							"Content Description is disappeared after displaying a period of 5 seconds");
				} else {
					logger.error("Content Description is not disappeared after displaying for a period of 5 seconds");
					extentLoggerFail("Content Descriptor ",
							"Content Description is not disappeared after displaying for a period of 5 seconds");
					// }
				}
			}
			waitTime(3000);
			Back(2);
			waitTime(3000);
		}
	}
/**
 * @note this method is used to validate the CD when player controlls are appeared on player.
 * @param userType
 * @throws Exception
 */
	public void contentDescriptorPlayerinterruption(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"TC_17 : Validate that Content Descriptor will disappear on player when elements like Player controls, hearder overlay, error messaged, etc., are displayed.");
			System.out.println(
					"TC_17 : Validate that Content Descriptor will disappear on player when elements like Player controls, hearder overlay, error messaged, etc., are displayed.");
			searchContent("14 Phere", "Movies");
//			handleParentalPopUp();
//			if(userType.equalsIgnoreCase("NonSubscribedUser")||userType.equalsIgnoreCase("Guest")) {
//			waitForAdToFinishInAmd();
//			}
			boolean value = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			if (value == true) {
				System.out.println("1");
				click(AMDPlayerScreen.objPlayer, "Player");
//				tapPlayerToGetControls("Potrait");
				verifyElementPresent(AMDPlayerScreen.objPauseIcon, "Pause Icon");
				// verifyElementPresent(AMDPlayerScreen.objNextIcon,"Next Icon");
				// verifyElementPresent(AMDPlayerScreen.objProgressBar,"Progress bar");
				boolean value2 = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
				if (value2 == true) {
					logger.info("Content Description reappeared after overlay elements are invoked");
					extentLoggerPass("Content Descriptor ",
							"Content Description reappeared after overlay elements are invoked");

				} else {
					logger.error(
							"Content Description is not disappeared after displaying after player controls disappeared");
					extentLoggerFail("Content Descriptor ",
							"Content Description is not disappeared after displaying after player controls disappeared");
				}

			} else {
				logger.error("Content Description is not displayed");
				extentLoggerFail("Content Descriptor ", "Content Description is not displayed");
			}
			waitTime(3000);
			Back(2);
			waitTime(3000);
		}
	}
/**
 * @note this method is used to validate the CD functionality when other overlay elements are invoked
 * @param userType
 * @throws Exception
 */
	public void contentDescriptorDisplayDurationValidation(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {

			extent.HeaderChildNode(
					"TC_18 : Validate the display duration of Content Descriptor, when other overlay elements are invoked.");
			System.out.println(
					"TC_18 : Validate the display duration of Content Descriptor, when other overlay elements are invoked.");

			searchContent("14 Phere", "Movies");
//			handleParentalPopUp();
//			if(userType.equalsIgnoreCase("NonSubscribedUser")||userType.equalsIgnoreCase("Guest")) {
//			waitForAdToFinishInAmd();
//			}
			boolean value = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			if (value == true) {
				System.out.println("1");
				tapPlayerToGetControls("Potrait");
				verifyElementPresent(AMDPlayerScreen.objPauseIcon, "Pause Icon");
				// verifyElementPresent(AMDPlayerScreen.objNextIcon,"Next Icon");
				// verifyElementPresent(AMDPlayerScreen.objProgressBar,"Progress bar");
				boolean value2 = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
				if (value2 == true) {
					logger.info("Content Description reappeared after overlay elements are invoked");
					extentLoggerPass("Content Descriptor ",
							"Content Description reappeared after overlay elements are invoked");

				} else {
					logger.error(
							"Content Description is not disappeared after displaying after player controls disappeared");
					extentLoggerFail("Content Descriptor ",
							"Content Description is not disappeared after displaying after player controls disappeared");
				}

			} else {
				logger.error("Content Description is not displayed");
				extentLoggerFail("Content Descriptor ", "Content Description is not displayed");
			}
			logger.info("Content Description is displayed 1");
			String time1 = getText(AMDPlayerScreen.objTimer);
			int startTime = timeToSec(time1);
			System.out.println(startTime + " Start time");
			if (verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer)) {


				waitTime(5000);

				boolean value3 = verifyElementIsNotDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
				if (value3 == true) {
					logger.info("Content Description is not displayed");

					String time2 = getText(AMDPlayerScreen.objTimer);
					int startTime2 = timeToSec(time2);
					int startTime3 = (startTime - startTime2);
					String s = Integer.toString(startTime3);
					System.out.println(s + " Content descriptor duration");
					if (s.equals("5")) {
						logger.info("Content Description is disappeared after displaying for a period of 5 seconds");
						extentLoggerPass("Content Descriptor ",
								"Content Description is disappeared after displaying a period of 5 seconds");
					} else {
						logger.error(
								"Content Description is not disappeared after displaying for a period of 5 seconds");
						extentLoggerFail("Content Descriptor ",
								"Content Description is not disappeared after displaying for a period of 5 seconds");
					}
				}
			}
			waitTime(3000);
			Back(2);
			waitTime(3000);

		}
	}
/**
 * @note this method is useed to CD functionality after content playback completion.
 * @param userType
 * @throws Exception
 */
	public void ContentDescriptorPostPlayerkill(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {

			extent.HeaderChildNode(
					"TC_19 : Validate that Content Descriptor will not reappear post completing its display duration. ");
			System.out.println(
					"TC_19 : Validate that Content Descriptor will not reappear post completing its display duration. ");

			searchContent("14 Phere", "Movie");
//			handleParentalPopUp();
//			if(userType.equalsIgnoreCase("NonSubscribedUser")||userType.equalsIgnoreCase("Guest")) {
//			//wait for ad
//				waitForAdToFinishInAmd();
//			}
			// wait for content decriptor
			boolean value1 = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			if (value1 == true) {
				System.out.println("1");
				waitTime(20000);
				tapPlayerToGetControls("Potrait");
				boolean value2 = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
				if (value2 == false) {
					logger.info("Content Description is not reappeared after its entire display duration");
					extentLoggerPass("Content Descriptor ",
							"Content Description is not reappeared after its entire display duration");
				} else {
					logger.error("Content Description is reappeared after its playout session");
					extentLoggerFail("Content Descriptor ",
							"Content Description is reappeared after its entire display duration");

				}

			} else {
				logger.error("Content Description is not displayed");
				extentLoggerFail("Content Descriptor ", "Content Description is not displayed");
			}
			waitTime(3000);
			Back(2);
			waitTime(3000);

			searchContent("14 Phere", "Movie");
//			handleParentalPopUp();
//			if(userType.equalsIgnoreCase("NonSubscribedUser")||userType.equalsIgnoreCase("Guest")) {
//				//wait for ad
//					waitForAdToFinishInAmd();
//				}
			boolean value2 = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			if (value2 == true) {
				logger.info("Content Description is displayed post killing player and replaying it");
				extentLoggerPass("Content Descriptor ",
						"Content Description is displayed post killing player and replaying it");
			} else {
				logger.error("Content Description is not displayed post killing player and replaying it");
				extentLoggerFail("Content Descriptor ",
						"Content Description is not displayed post killing player and replaying it");
			}
			waitTime(3000);
			Back(2);
			waitTime(3000);
		}
	}
/**
 * @note this method is used to verify the CD functionality in portrait mode
 * @param userType
 * @throws Exception
 */
	public void contentDescriptorPotraitOrientatonValidation(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {

			extent.HeaderChildNode("TC_20 : Validate that Content Descriptor is displayed in Portrait mode.");
			System.out.println("TC_20 : Validate that Content Descriptor is displayed in Portrait mode.");

			searchContent("14 Phere", "Web Series");
//			handleParentalPopUp();
//			if(userType.equalsIgnoreCase("NonSubscribedUser")||userType.equalsIgnoreCase("Guest")) {
//			waitForAdToFinishInAmd();
//			}
			boolean value2 = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			if (value2 == true) {
				logger.info("Content Description is displayed in potrait mode");
				extentLoggerPass("Content Descriptor ", "Content Description is displayed in potrait mode");
			} else {
				logger.error("Content Description is not displayed");
				extentLoggerFail("Content Descriptor ", "Content Description is not displayed in potrait mode");
			}
			waitTime(3000);
			Back(2);
			waitTime(3000);
		}
	}
/**
 * @note this method is used to verify the CD functionality in landscape mode
 * @param userType
 * @throws Exception
 */
	public void contentDescriptorLandscapeOrientatonValidation(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {

			extent.HeaderChildNode(
					"TC_21 : Validate that Content Descriptor is displayed on both Portrait & Landscape mode. ");
			System.out.println(
					"TC_21 : Validate that Content Descriptor is displayed on both Portrait & Landscape mode. ");
			searchContent("14 Phere", "Web Series");
//			handleParentalPopUp();
//			waitForAdToFinishInAmd();
//			}
			try {
				click(AMDPlayerScreen.objContentDescOnPlayer, "Content descriptor");
				click(AMDPlayerScreen.objFullscreenIcon, "Maximize Icon");
			} catch (Exception e) {
				tapPlayerToGetControls("Potrait");
				click(AMDPlayerScreen.objFullscreenIcon, "Maximize Icon");
			}

			// waitTime(5000);
			boolean value2 = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			if (value2 == true) {
				logger.info("Content Description is displayed in Landscape mode");
				extentLoggerPass("Content Descriptor ", "Content Description is displayed in Landscape mode");
			} else {
				logger.error("[AMA2-17870] Content Description is not displayed in Landscape mode");
				extentLoggerFail("Content Descriptor ",
						"[AMA2-17870] Content Description is not displayed in Landscape mode");
			}
			waitTime(3000);
			Back(2);
			waitTime(3000);
		}
	}
/**
 * @note this method is used for validating CD for episodes
 * @param userType
 * @throws Exception
 */
	public void contentDescriptorEpisodeValidation(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {

			extent.HeaderChildNode("TC_22 : Validate that Content Descriptor is displayed for Episode content.");
			System.out.println("TC_22 : Validate that Content Descriptor is displayed for Episode content.");

			searchContent("Bebaakee", "Web Series");
			boolean value2 = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			if (value2 == true) {
				logger.info("Content Description is displayed for episode content");
				extentLoggerPass("Content Descriptor ", "Content Description is displayed for episode content");
			} else {
				logger.error("Content Description is not displayed for episode content");
				extentLoggerFail("Content Descriptor ", "Content Description is not displayed for episode content");
			}
			waitTime(3000);
			Back(2);
			waitTime(3000);
		}
	}
/**
 * @note this method is used for validating CD functionality when content is played from CW tray
 * @param UserType
 * @throws Exception
 */
	public void contentDescriptor_TVODContentFromContinueWatching(String UserType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"TC_34 : Verify that on resuming TVOD content from Continue Watching, Will be consider as Video start and user will get Content Descriptor as per CD logic");
			System.out.println(
					"TC_34 : Verify that on resuming TVOD content from Continue Watching, Will be consider as Video start and user will get Content Descriptor as per CD logic");

			searchContent("Pukar", "Movie");
			handleParentalPopUp();
			if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				waitForAdToFinishInAmd();
			}
			waitTime(9000);
			tapPlayerToGetControls("Potrait");
			verifyElementExist(AMDPlayerScreen.objPlayer, "Player screen");
//				waitTime(9000);
//				tapPlayerToGetControls("Potrait");
//				verifyElementExist(AMDPlayerScreen.objPlayer, "Player screen");
			navigateBackToHomeLandingScreen();
			click(AMDHomePage.objContinueWatchingTray, "Continue Watching Tray");
			click(AMDHomePage.objContinueWatchingTrayContentCard, "Continue Watching content");
			// handleParentalPopUp();
			if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				waitForAdToFinishInAmd();
			}
			// verifyElementPresent(AMDConsumptionScreen.objRated18,"Rated content
			// descriptor");
			if (verifyElementDisplayed(AMDPlayerScreen.objAgeRatedOnPlayer)) {
				boolean value2 = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
				if (value2 == true) {
					logger.info("Content Descriptor is displayed post accessing TVOD content from consumption screen");
					extentLoggerPass("Content Descriptor ",
							"Content Descriptor is displayed post accessing TVOD content from consumption screen");
				} else {
					logger.info("Content Descriptor is Empty");
					extentLoggerWarning("", "Content Descriptor is Empty");
				}
			} else {
				logger.error("Age rate is not displayed on player");
				extentLoggerFail("", "Age rate is not displayed on player");
			}
		}
	}
/**
 * @note this method is used for verifying CD functionality when content is played from My rentals.
 * @param UserType
 * @throws Exception
 */
	public void contentDescriptor_TVODContentFromMyRentals(String UserType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {

			extent.HeaderChildNode(
					"TC_35 : Verify that on resuming TVOD content from My rental , Will be consider as Video start and user will get Content Descriptor as per CD logic");
			System.out.println(
					"TC_35 : Verify that on resuming TVOD content from My rental , Will be consider as Video start and user will get Content Descriptor as per CD logic");
			searchContent("Pukar", "Movie");
			// handleParentalPopUp();
			if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				waitForAdToFinishInAmd();
			}
//				waitTime(9000);
//				tapPlayerToGetControls("Potrait");
//				verifyElementExist(AMDPlayerScreen.objPlayer, "Player screen");
//				waitTime(9000);
//				tapPlayerToGetControls("Potrait");
//				verifyElementExist(AMDPlayerScreen.objPlayer, "Player screen");
			navigateBackToHomeLandingScreen();
			click(AMDHomePage.MoreMenuIcon, "More menu");
			waitTime(1000);
			// PartialSwipe("UP", 1);
			verifyElementPresentAndClick(AMDTVODComboOffer.objMyRentalsOption, "My Rentals");
			if (verifyElementDisplayed(AMDTVODComboOffer.objContentThumbnailInMyRentals)) {
				// handleParentalPopUp();
				if (userType.equalsIgnoreCase("NonSubscribedUser")) {
					waitForAdToFinishInAmd();
				}

				if (verifyElementDisplayed(AMDPlayerScreen.objAgeRatedOnPlayer)) {
					boolean value2 = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
					if (value2 == true) {
						logger.info(
								"Content Descriptor is displayed post accessing TVOD content from consumption screen");
						extentLoggerPass("Content Descriptor ",
								"Content Descriptor is displayed post accessing TVOD content from consumption screen");
					} else {
						logger.info("Content Descriptor is Empty");
						extentLoggerWarning("", "Content Descriptor is Empty");
					}
				}
			} else {
				logger.info("No contents are listed in My Rentals");
				extentLoggerWarning("", "No contents are listed in My Rentals");
			}
		}
	}
/**
 * @note this method is used to verify functionality of CD with intruption
 * @param UserType
 * @throws Exception
 */
	public void contentDescriptor_TVODContentForInterruption(String UserType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"TC_37 : Verify that after network intruption , other intruption like Call , Message , Minimise , Maximise , Lock and unlock of app then user will not be able to see CD if watch duration of 5 sec is completed");
			System.out.println(
					"TC_37 : Verify that after network intruption , other intruption like Call , Message , Minimise , Maximise , Lock and unlock of app then user will not be able to see CD if watch duration of 5 sec is completed");
			Back(1);
			searchContent("Pukar", "Movies");
//					handleParentalPopUp();
//					waitForAdToFinishInAmd();
			// verifyPlaybackAfterLockAndUnlock();

			if (verifyElementDisplayed(AMDPlayerScreen.objAgeRatedOnPlayer)) {
				getDriver().runAppInBackground(Duration.ofSeconds(10));
				logger.info("App is put to background");
				extentLogger("Time", "App is put to background");
//				waitTime(5000);
//				tapPlayerToGetControls("portrait");
				boolean value2 = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
				if (value2 == true) {
					logger.info("Content Descriptor is displayed post app minimise Interruption");
					extentLoggerPass("Content Descriptor ",
							"Content Descriptor is displayed post app minimise Interruption");

				} else {
					logger.info("Content Descriptor is Empty");
					extentLoggerWarning("", "Content Descriptor is Empty");
				}
			} else {
				logger.error("Age rate is not displayed");
				extentLoggerFail("Content Descriptor ", "Age rate is not displayed");

			}
		}
	}
/**
 * @note this method is used verify PC on crossPlatform.
 * @param userType
 * @throws Exception
 */
	public void parentalControlPlatform(String userType) throws Exception {
		extent.HeaderChildNode("Parental Control Platform");
		parentalPinPlatformValidation(userType);

	}
/**
 * 
 * @param userType
 * @throws Exception
 */
	public void parentalControl18Plus(String userType) throws Exception {
		extent.HeaderChildNode("Parental Control");
		// TC_15
		parentalControlPopupPin18PlusValidation("Auto Shankar");
	}
/**
 * 
 * @param userType
 * @throws Exception
 */
	public void parentalControl16Plus(String userType) throws Exception {
		extent.HeaderChildNode("Parental Control");
		// TC_15,16,17,18,19
		parentalControlPopupPin16PlusValidation("Helmet");
	}
/**
 * 
 * @param userType
 * @throws Exception
 */
	public void parentalControl7Plus(String userType) throws Exception {
		extent.HeaderChildNode("Parental Control");
		// TC_15,16,17,18,19
		parentalControlPopupPin7PlusValidation("Cyclops Planet");
	}
/**
 * 
 * @param userType
 * @throws Exception
 */
	public void parentalControl13Plus(String userType) throws Exception {
		extent.HeaderChildNode("Parental Control");
		// TC_15,16,17,18,19
		parentalControlPopupPin13PlusValidation("Dhoop ki Deewar");
	}
/**
 * 
 * @param userType
 * @throws Exception
 */
	public void parentalControlRestrictAll(String userType) throws Exception {
		extent.HeaderChildNode("Parental Control");
		// TC_19
		parentalControlPopupPinRestrictAllValidation("Gattimela");
	}
/**
 * @this method used for Verifying that user is able to play content without any delay after entering valid Parental pin
 * @param userType
 * @throws Exception
 */
	public void verifyContentPlayContentPostSettingParentalControl(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"TC_43 : Verify that user is able to play content without any delay after entering valid Parental pin");
			System.out.println(
					"TC_43 : Verify that user is able to play content without any delay after entering valid Parental pin");

			navigateBackToHomeLandingScreen();
			click(AMDHomePage.objSearchBtn, "Search button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, "Bhinna", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objFirstSearchResult, "Search result");
			waitTime(6000);
			boolean checkParentalPopUp = verifyElementPresent(AMDPlayerScreen.objParentalPinPopUp,
					"Parental Pin Popup");
			if (checkParentalPopUp) {
				logger.info("Parental Pin Popup is displayed");
				extentLoggerPass("Parental Pin Popup", "Parental Pin Popup is displayed in Landscape mode");
				waitTime(3000);
				if (verifyIsElementDisplayed(AMDPlayerScreen.objParentalPinPopUp)) {
					type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
					hideKeyboard();
					type(AMDMoreMenu.objParentalLockPin2, "2", "ParentalLockPin");
					hideKeyboard();
					type(AMDMoreMenu.objParentalLockPin3, "3", "ParentalLockPin");
					hideKeyboard();
					type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
					hideKeyboard();
					waitTime(4000);
					click(AMDPlayerScreen.objParentalPinContinue, "Continue Button");

				} else {
					logger.info("Parental Pin Popup is NOT displayed");
					extentLoggerFail("Parental Pin Popup", "Parental Pin Popup is NOT displayed in Landscape mode");
				}
				waitTime(2000);
				click(AMDPlayerScreen.objPlayer, "Player");

				verifyElementPresent(AMDPlayerScreen.objPlayerStartTime, "Timer is started on entering parental pin");
				if (verifyElementPresent(AMDPlayerScreen.objPlayer, "Consumption sreen")) {
					logger.info("Post Parental Pin Popup content player is displayed");

				} else {
					logger.info("Post Parental Pin Popup content player is NOT displayed");
					extentLoggerFail("Player", "Post Parental Pin Popup content player is NOT displayed");
				}
			} else {
				logger.info("Parental Pin Popup is NOT displayed");
				extentLoggerFail("Parental Pin Popup", "Parental Pin Popup is NOT displayed in Landscape mode");
			}
		}

		extent.HeaderChildNode(
				"TC_44 : Verify that user is able to play content without any delay after entering valid Parental pin");
		System.out.println(
				"TC_44 : Verify that user is able to play content without any delay after entering valid Parental pin");
		waitTime(5000);
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			verifyElementPresent(AMDPlayerScreen.objPlayer, "Consumption sreen");
			tapPlayerToGetControls("Potrait");
			verifyElementPresent(AMDPlayerScreen.objPauseIcon, "Content player");
			waitTime(5000);
		}
	}
/**
 * @note This method is used for Verifying that user will get proper error message on player if user cancel the parental pin dialog
 * @param userType
 * @throws Exception
 */
	public void verifyContentErrorMessagePostSettingParentalControl(String userType) throws Exception {

		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"TC_45 : Verify that user will get proper error message on player if user cancel the parental pin dialog");
			System.out.println(
					"TC_45 : Verify that user will get proper error message on player if user cancel the parental pin dialog");

			navigateBackToHomeLandingScreen();
			click(AMDHomePage.objSearchBtn, "Search button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, "Bhinna", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objFirstSearchResult, "Search result");
			waitTime(6000);
			boolean checkParentalPopUp1 = verifyElementPresent(AMDPlayerScreen.objParentalPinPopUp,
					"Parental Pin Popup");
			if (checkParentalPopUp1) {
				logger.info("Parental Pin Popup is displayed");
				extentLoggerPass("Parental Pin Popup", "Parental Pin Popup is displayed in Landscape mode");
				waitTime(3000);
				// Enter invalid lock pin
				if (verifyIsElementDisplayed(AMDPlayerScreen.objParentalPinPopUp)) {
					type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
					hideKeyboard();
					type(AMDMoreMenu.objParentalLockPin2, "1", "ParentalLockPin");
					hideKeyboard();
					type(AMDMoreMenu.objParentalLockPin3, "1", "ParentalLockPin");
					hideKeyboard();
					type(AMDMoreMenu.objParentalLockPin4, "1", "ParentalLockPin");
					hideKeyboard();
					waitTime(4000);
					click(AMDPlayerScreen.objParentalPinContinue, "Continue Button");
					verifyElementDisplayed(AMDPlayerScreen.objtoastErrorMesssage);
					Back(1);
					waitTime(4000);
					verifyElementPresent(AMDPlayerScreen.objErrorMessageOnPlayer,
							"on canceling parental pop up on player, Error message");
					waitTime(4000);
				} else {
					logger.info("Parental Pin Popup is NOT displayed");
					extentLoggerFail("Parental Pin Popup", "Parental Pin Popup is NOT displayed in Landscape mode");
				}
			}
			Back(1);
		}
	}
/**
 * @note this method is used for Verifying that user is able to play live tv channel without any parental pin even though parental pin is set
 * @param userType
 * @throws Exception
 */
	public void verifyLiveTVContentPostSettingParentalControl(String userType) throws Exception {

		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"TC_46 : Verify that user is able to play live tv channel without any parental pin even though parental pin is set");
			System.out.println(
					"TC_46 : Verify that user is able to play live tv channel without any parental pin even though parental pin is set");
			navigateBackToHomeLandingScreen();
			selectTopNavigationTab("Live TV");
			waitTime(2000);
			verifyElementPresentAndClick(AMDLiveTVScreen.objFirstContent, "Live Tv content");
			waitForAdToFinishInAmd();
			click(AMDPlayerScreen.objplayer, "Player screen");
			boolean checkParentalPopUp2 = verifyElementDisplayed(AMDPlayerScreen.objParentalPinPopUp);
			if (checkParentalPopUp2) {
				logger.error("Parental Pin Popup is displayed");
				extentLoggerFail("Parental Pin Popup", "Parental Pin Popup is displayed for Live TV content");
				waitTime(3000);
			} else {
				logger.info("Parental Pin Popup is not displayed for Live TV content");
				extent.extentLoggerPass("Parental Pin", "Parental Pin Popup is not displayed for Live TV content");
			}
			Back(1);
			waitTime(3000);
		}
	}
/**
 * @note this method is used to Verify that user is able to see parental pin journey as per selected display language.
 * @param userType
 * @throws Exception
 */
	public void verifyParentalPinJourneyPostDisplayLanguage(String userType) throws Exception {

		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"TC_47 : Verify that user is able to see parental pin journey as per selected display language.");
			System.out.println(
					"TC_47 : Verify that user is able to see parental pin journey as per selected display language.");

			navigateBackToHomeLandingScreen();
			click(AMDHomePage.objBottomBarSelectedHomeTab, "Home tab");
			click(AMDHomePage.MoreMenuIcon, "More Menu");
			verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings Option");
			swipeUntilFindElement(AMDLoginScreen.objDisplayLang, "Up");
			click(AMDLoginScreen.objDisplayLang, "Display Language");
			verifyElementPresent(AMDLoginScreen.objDisplayLanguageScreenTitle, "Display language screen Header");
			SelectDisplayLanguage("Kannada");
			click(AMDOnboardingScreen.objDiplay_ContinueBtn, "Continue button");
			Back(2);
			// navigateBackToHomeLandingScreen();
			click(AMDHomePage.objSeeAllFirstRail, "See All rail");
			waitTime(3000);
			click(AMDHomePage.objFirstContentCardFromListingScreen, "First content from listing screen");
			waitTime(3000);
			verifyElementPresent(AMDPlayerScreen.objParentalPinDialog, "Parental Pin Dailog");
			verifyElementPresent(AMDPlayerScreen.objShowPin, "Show pin");
			verifyElementPresent(AMDPlayerScreen.objForgotPin, "Forgot pin");
			verifyElementPresent(AMDPlayerScreen.objParentalPinPopUp, "Parental Pop up");
			Back(2);
			navigateBackToHomeLandingScreen();
			click(AMDHomePage.MoreMenuIcon, "More Menu");
			verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings Option");
			swipeUntilFindElement(AMDLoginScreen.objDisplayLang, "Up");
			click(AMDLoginScreen.objDisplayLang, "Display Language");
			verifyElementPresent(AMDLoginScreen.objDisplayLanguageScreenTitle, "Display language screen Header");
			SelectDisplayLanguage("English");
			click(AMDOnboardingScreen.objDiplay_ContinueBtn, "Continue button");
			Back(2);
		}
	}
/**
 * @note this method is used to verify user is able to see parental pin dialog on redirecting to consumption screen via deeplink if user has set Parental control
 * @param userType
 * @throws Exception
 */
	public void verifyParentalPinJourneyPostviaDeeplink(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {

			extent.HeaderChildNode(
					"TC_48 : Verify that user is able to see parental pin dialog on redirecting to consumption screen via deeplink if user has set Parental control");
			System.out.println(
					"TC_48 : Verify that user is able to see parental pin dialog on redirecting to consumption screen via deeplink if user has set Parental control");
			navigateBackToHomeLandingScreen();
			deepLinkContentDecsriptor("Consumption");
			if (waitForElementDisplayed(AMDPlayerScreen.objParentalPinPopUp, 10)) {
				verifyElementPresent(AMDPlayerScreen.objParentalPinPopUp, "On acessing Deeplink, Parental pin popup");
			}
		}
	}
/**
 * @note this method is used to Verify that user is able to reset parental pin from consumption screen or via parental control setting
 * @param userType
 * @throws Exception
 */
	public void verifyParentalPinResetPin(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {

			extent.HeaderChildNode(
					"TC_68 : Verify that user is able to reset parental pin from consumption screen or via parental control setting");
			System.out.println(
					"TC_68 : Verify that user is able to reset parental pin from consumption screen or via parental control setting");
            BackToLandingScreen();
			navigateBackToHomeLandingScreen();
			click(AMDHomePage.objSearchBtn, "Search button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, "Bhinna", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objFirstSearchResult, "Search result");
			waitTime(6000);
			click(AMDPlayerScreen.objForgotPin, "Forgot pin");
			click(AMDLoginScreen.objEnterPasswordField,"Enter password field");
			type(AMDLoginScreen.objEnterPasswordField, "123456", "Password field");
			waitTime(2000);
			hideKeyboard();
			click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(8000);
			Swipe("UP", 1);
			click(AMDMoreMenu.objRestrictAllContent, "Restrict All Content option");
			waitTime(5000);
			click(AMDMoreMenu.objContinueBtn, "Continue Button");
			waitTime(2000);

			if (verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin")) {
				logger.info("Parental Pin is SET");
				extent.extentLoggerPass("Parental Pin", "Parental Pin is SET");

				verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin");
				type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin2, "2", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin3, "3", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin4, "4", "ParentalLockPin");
				hideKeyboard();
				waitTime(4000);
				click(AMDMoreMenu.objSetPinContinueBtn, "Continue Button");
				waitTime(2000);
				verifyElementPresent(AMDPlayerScreen.objParentalSuccessScreen, "Parental Success Screen");

				click(AMDMoreMenu.objParentalLockDone, "Done Button");
			} else {
				logger.info("Parental Pin Popup is NOT displayed");
				extent.extentLoggerFail("Parental Pin", "Parental Pin Popup is NOT displayed");
			}
		}
	}
/**
 * @note this method is used to Validate the PC functionality when user select \"Restrict A 18+ Content\" option
 * @param Keyword
 * @throws Exception
 */
	public void parentalControlPopupPin18PlusValidation(String Keyword) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"TC_15 : Validate the functionality when user select \"Restrict A 18+ Content\" option");
			System.out.println(
					"TC_15 : Validate the functionality when user select \\\"Restrict A 18+ Content\\\" option");
			parentalControlPopupPin("Auto Shankar", AMDMoreMenu.Restrict18PlusAboveContent, "Restrict A 18+ Content");
		}
	}
/**
 * @note this method is used to Validate the functionality when user select \"Restrict U/A 16+ Content\" option.
 * @param Keyword
 * @throws Exception
 */
	public void parentalControlPopupPin16PlusValidation(String Keyword) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"TC_16 : Validate the functionality when user select \"Restrict U/A 16+ Content\" option.");
			System.out.println(
					"TC_16 : Validate the functionality when user select \"Restrict U/A 16+ Content\" option.");
			parentalControlPopupPin(Keyword, AMDMoreMenu.Restrict16AboveContent, "Restrict A 16+ Content");
		}
	}
/**
 * @note this method is used for Validating the functionality when user select \"Restrict U/A 13+ Content\" option.
 * @param Keyword
 * @throws Exception
 */
	public void parentalControlPopupPin13PlusValidation(String Keyword) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"TC_17 : Validate the functionality when user select \"Restrict U/A 13+ Content\" option.");
			System.out.println(
					"TC_17 : Validate the functionality when user select \"Restrict U/A 13+ Content\" option.");
			parentalControlPopupPin(Keyword, AMDMoreMenu.Restrict13PlusAboveContent, "Restrict A 13+ Content");
		}
	}
/**
 * @note this method is used to Validate the PC functionality when user select \"Restrict U/A 7+ Content\" option.
 * @param Keyword
 * @throws Exception
 */
	public void parentalControlPopupPin7PlusValidation(String Keyword) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"TC_18 : Validate the functionality when user select \"Restrict U/A 7+ Content\" option.");
			System.out.println(
					"TC_18 : Validate the functionality when user select \\\"Restrict U/A 7+ Content\\\" option.");
			parentalControlPopupPin(Keyword, AMDMoreMenu.Restrict7AboveContent, "Restrict A 7+ Content");
		}
	}
/**
 * @note this method is used to validate the functionality when user select \"Restrict All Content\" option.
 * @param Keyword
 * @throws Exception
 */
	public void parentalControlPopupPinRestrictAllValidation(String Keyword) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"TC_19 : Validate the functionality when user select \"Restrict All Content\" option.");
			System.out.println("TC_19 : Validate the functionality when user select \"Restrict All Content\" option.");
			parentalControlPopupPin("Gattimela", AMDMoreMenu.objRestrictAllContent, "Restrict All Content");
		}
	}
/**
 * @note this method is used to set PC in web
 * @param loc
 * @param password
 * @param button
 * @throws Exception
 */
	public void setParentalPopup(By loc, String password, String button) throws Exception {

		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "parental pincode");
		waitTime(3000);

		// verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl,
		// "parental pincode");
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password field");
		String Password = getParameterFromXML(password);
		type(PWALoginPage.objPasswordField, Password, "Password");
		hideKeyboard();
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
		WatchMorePopup();
		waitTime(3000);
		click(PWAHamburgerMenuPage.objRestrict13PlusContent, "Restrict 13+ content");
		waitTime(3000);
		verifyElementPresentAndClick(loc, button);
		waitTime(3000);
		if (verifyElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin1)) {
			{
				type(PWAHamburgerMenuPage.objParentalLockPin1, "1", "setParentalLockPin");
			}
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin2)) {
				type(PWAHamburgerMenuPage.objParentalLockPin2, "1", "setParentalLockPin");
			}
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin3)) {
				type(PWAHamburgerMenuPage.objParentalLockPin3, "1", "setParentalLockPin");
			}
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin4)) {
				type(PWAHamburgerMenuPage.objParentalLockPin4, "1", "setParentalLockPin");
			}
		}
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Continue button");
	}
/**
 * @note this method is used to navigate to provided url page
 */
	public void navigateToHome() {
		String url = getParameterFromXML("url");
		getDriver().get(url);
		waitTime(5000);
	}
/**
 * @note this method is used for handling watch now icon
 * @throws Exception
 */
	public void WatchMorePopup() throws Exception {
		if (verifyIsElementDisplayed(PWAPlayerPage.objWouldYouLikePopUp)) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "Watch now close icon");
		}
	}
/**
 * @note this method is used for keeping PC to no restriction.
 * @param usertype
 * @throws Exception
 */
	public void setparentalPinToNoRestriction(String usertype) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			navigateBackToHomeLandingScreen();
			click(AMDHomePage.MoreMenuIcon, "More Menu tab");
			waitTime(1000);
			click(AMDMoreMenu.objSettings, "Settings option");
			waitTime(5000);
			Swipe("UP", 1);
			verifyElementPresentAndClick(AMDMoreMenu.objParentalControl, "Parental Control");
			verifyElementExist(AMDMoreMenu.objPasswordField, "Password field");
			String password = "";
			if (userType.equals("NonSubscribedUser")) {
				password = getParameterFromXML("NonsubscribedPassword");
			} else if (userType.equals("SubscribedUser")) {
				password = getParameterFromXML("SubscribedPassword");
			}
			click(AMDMoreMenu.objPasswordField, "Password field");
			type(AMDMoreMenu.objPasswordField, password, "Password");
			waitTime(2000);
			hideKeyboard();
			click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(2000);
			// click(AMDMoreMenu.objPasswordContinueBtn, "Continue button");
			waitTime(2000);
			click(AMDMoreMenu.objNoRestriction, "Restrict All Content option");
			click(AMDMoreMenu.objContinueBtn, "Continue Button");
			waitTime(2000);
			click(AMDMoreMenu.objParentalLockDone, "Done Button");
			Back(2);
		}
	}
/**
 * @note this method is used to Validate that new age rating is displayed as part of metadata below the player in Consumption screen for U rated .
 * @param usertype
 * @throws Exception
 */
	public void newAge_U_RatingValidationBelowPlayer(String usertype) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"TC_30 : the functionality when user select \\\"Restrict All Content\\\" option. for \"U\" rated content.");
			System.out.println(
					"TC_30 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for \"U\" rated content.");
			// Verify "U" rated content
			setparentalPinToNoRestriction(usertype);
			NewAgeRatingValidation("Saand Ki Aankh", "U");
		}
	}
/**
 * @note this method is used for Verify "U/A 7+" rated content
 * @param usertype
 * @throws Exception
 */
	public void newAge_U_A_7Plus_RatingValidationBelowPlayer(String usertype) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {

//				// Verify "U/A 7+" rated content

			extent.HeaderChildNode(
					"TC_31 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 7+' rated content.");
			System.out.println(
					"TC_31 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 7+' rated content.");
			NewAgeRatingValidation("Saand Ki Aankh", "U/A 7+");
		}
	}
/**
 * @note this method is used for Verifying "U/A 13+" rated content.
 * @param usertype
 * @throws Exception
 */
	public void newAge_U_A_13Plus_RatingValidationBelowPlayer(String usertype) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {

			// Verify "U/A 13+" rated content
			extent.HeaderChildNode(
					"TC_32 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 13+' rated content.");
			System.out.println(
					"TC_32 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 13+' rated content.");
			NewAgeRatingValidation("Dhoop ki Deewar", "U/A 13+");

		}
	}
/**
 * @Note this method is used to validate U_A_16 plus PC setting.
 * @param usertype
 * @throws Exception
 */
	public void newAge_U_A_16Plus_RatingValidationBelowPlayer(String usertype) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {

			// Verify "U/A 16+" rated content
			extent.HeaderChildNode(
					"TC_33 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 16+' rated content.");
			System.out.println(
					"TC_33 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 16+' rated content.");
			NewAgeRatingValidation("Saand Ki Aankh", "U/A 16+");

		}
	}
/**
 * @note this method is used to Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'A' rated content.
 * @param usertype
 * @throws Exception
 */
	public void newAgeARatingValidationBelowPlayer(String usertype) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {
			// Verify "A" rated content
			extent.HeaderChildNode(
					"TC_34 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'A' rated content.");
			System.out.println(
					"TC_34 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'A' rated content.");
			NewAgeRatingValidation("Black Widows", "A");

		}
	}
/**
 * @note this method is used to validate the CD functionality. 
 * @param userType
 * @param searchcontent
 * @throws Exception
 */
	public void verify_CD_Dismissal(String userType, String searchcontent) throws Exception {
		extent.HeaderChildNode("Verify that Content descriptor dismissal and reapair will be smooth");
		verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, searchcontent + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objFirstSearchResult1(searchcontent), "Search result");
		logger.info("Locking the device screen");
		extentLogger("Time", "Locking the device screen");
		adbKeyevents(26);
		waitTime(7000);
		logger.info("Un-Locking the device screen");
		extentLogger("Time", "Un-Locking the device screen");
		adbKeyevents(26);
		waitTime(3000);
		Swipe("Up", 1);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPlayIcon, "Play icon");
		boolean value = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
		System.out.println(value);
		if (value) {
			logger.info("Content Descriptor is displayed after performing Interruption(Lock and UnLock)");
			extentLoggerPass("", "Content Descriptor is displayed after performing Interruption(Lock and UnLock)");
		} else {
			logger.error("Content Descriptor is NOT displayed after performing Interruption(Lock and UnLock)");
			extentLoggerFail("", "Content Descriptor is NOT displayed after performing Interruption(Lock and UnLock)");
		}
	}
/**
 * @note This method is used for quitting ZEE5 app.
 * @throws Exception
 */
	public void quitZEE5App() throws Exception {
		System.out.println("\nQuitting the ZEE5 App");
		// Adding Wait time to laod the App if relaunched
		waitTime(10000);
		boolean flag = false;
		for (int i = 1; i <= 10; i++) {
			Back(1);
			waitTime(2000);
			if (verifyElementDisplayed(AMDOnboardingScreen.objExitYes)) {
				click(AMDOnboardingScreen.objExitYes, "Yes");
				flag = true;
			}
			if (flag) {
				break;
			}
		}
	}
/**
 * @note this method is used for executing deeplinks
 * @param pDeeplink
 */
	public void executeDeeplink(String pDeeplink) {
		try {
			waitTime(5000);
			String commandLine = "adb shell am start -W -a android.intent.action.VIEW -d " + pDeeplink + "\"";
			Process process = Runtime.getRuntime().exec(commandLine);
			new BufferedReader(new InputStreamReader(process.getInputStream()));
			waitTime(12000);

			HeaderChildNode("Executed Deeplink -  " + pDeeplink);
			logger.info("Executed the deeplink  - " + pDeeplink);
			extent.extentLoggerPass("Deeplink", "Executed the deeplink - " + pDeeplink);
		} catch (Exception e) {
			logger.error("Failed to execute the deeplink -" + pDeeplink);
			extent.extentLoggerFail("", "Failed to execute the deeplink - " + pDeeplink);
		}
	}
/**
 * @note this method is used for Settings Screen validationv via Deeplink
 * @throws Exception
 */
	public void settingsScreenViaDeeplink() throws Exception {
		extent.HeaderChildNode("Settings Screen validationv via Deeplink");
		System.out.println("\nSettings Screen validation via Deeplink");

		waitTime(4000);
		if (verifyElementDisplayed(AMDGenericObjects.objText("ZEE5"))) {
			click(AMDGenericObjects.objContainText("ZEE5"), "Open With Zee5");
			waitTime(6000);
			if (verifyElementDisplayed(AMDMoreMenu.objSettingsScreenTitle)) {
				logger.info("Settings screen is displayed through deeplink");
				extent.extentLoggerPass("Settings", "Settings screen is displayed through deeplink");
			} else {
				logger.error("Settings screen is not displayed through deeplink");
				extent.extentLoggerFail("", "Settings screen is not displayed through deeplink");
			}
		}
	}
/**
 * @note this method is used to validate Watchlist Screen validation via Deeplink.
 * @param pUserType
 * @throws Exception
 */
	public void watchlistScreenViaDeeplink(String pUserType) throws Exception {
		extent.HeaderChildNode("Watchlist Screen validation via Deeplink");
		System.out.println("\nWatchlist Screen validation via Deeplink");

		waitTime(4000);
		if (verifyElementDisplayed(AMDGenericObjects.objText("ZEE5"))) {
			click(AMDGenericObjects.objContainText("ZEE5"), "Open With Zee5");
			waitTime(6000);
			if (pUserType.equalsIgnoreCase("Guest")) {
				if (verifyElementDisplayed(AMDLoginScreen.objLoginText)) {
					logger.info("Login/Register screen is displayed through deeplink");
					extent.extentLoggerPass("Login", "Login/Register screen is displayed through deeplink");
				} else {
					logger.error("Login/Register screen is not displayed through deeplink");
					extent.extentLoggerFail("Login", "Login/Register screen is not displayed through deeplink");
				}
			} else {
				if (verifyElementDisplayed(AMDMoreMenu.objWatchlist)) {
					logger.info("Watchlist screen is displayed through deeplink");
					extent.extentLoggerPass("Watchlist", "Watchlist screen is displayed through deeplink");
				} else {
					logger.error("Watchlist screen is not displayed through deeplink");
					extent.extentLoggerFail("Watchlist", "Watchlist screen is not displayed through deeplink");
				}
			}
		}
	}
/**
 * @note this method is used to validate Subscription Screen validation via Deeplink
 * @throws Exception
 */
	public void subscriptionScreenViaDeeplink() throws Exception {
		extent.HeaderChildNode("Subscription Screen validation via Deeplink");
		System.out.println("\nSubscription Screen validation via Deeplink");

		waitTime(4000);
		if (verifyElementDisplayed(AMDGenericObjects.objText("ZEE5"))) {
			click(AMDGenericObjects.objContainText("ZEE5"), "Open With Zee5");
			waitTime(7000);
			if (verifyElementDisplayed(AMDSubscibeScreen.objNewSubscribePopup)) {
				logger.info("Subscription popup screen is displayed through deeplink");
				extent.extentLoggerPass("Subscription", "Subscription popup screen is displayed through deeplink");
			} else {
				logger.error("Subscription popup screen is not displayed through deeplink");
				extent.extentLoggerFail("Subscription", "Subscription popup screen is not displayed through deeplink");
			}
		}
	}
/**
 * @note this method is used to Verify New Age Rating below player
 * @param usertype
 * @param Keyword
 * @throws Exception
 */
	public void newAgeRatingValidationBelowPlayer(String usertype, String Keyword) throws Exception {
		extent.HeaderChildNode("Verify New Age Rating below player");

		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"TC_30 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for \"U\" rated content.");
			System.out.println(
					"TC_30 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for \"U\" rated content.");
			// Verify "U" rated content
			NewAgeRatingValidation("Saand Ki Aankh", "U");

			// Verify "U/A 7+" rated content
			extent.HeaderChildNode(
					"TC_31 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 7+' rated content.");
			System.out.println(
					"TC_31 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 7+' rated content.");
			NewAgeRatingValidation("Saand Ki Aankh", "U/A 7+");

			// Verify "U/A 7+" rated content
			extent.HeaderChildNode(
					"TC_32 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 13+' rated content.");
			System.out.println(
					"TC_32 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 13+' rated content.");
			NewAgeRatingValidation("Saand Ki Aankh", "U/A 13+");

			// Verify "U" rated content
			extent.HeaderChildNode(
					"TC_33 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 16+' rated content.");
			System.out.println(
					"TC_33 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'U/A 16+' rated content.");
			NewAgeRatingValidation("Saand Ki Aankh", "U/A 16+");

			// Verify "U/A 7+" rated content
			extent.HeaderChildNode(
					"TC_34 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'A' rated content.");
			System.out.println(
					"TC_34 : Validate that new age rating is displayed as part of metadata below the player in Consumption screen for 'A' rated content.");
			NewAgeRatingValidation("Cabaret", "A");

		}
	}
/**
 * @note this method is used to validate downloading content from appcentre
 * @param build
 * @param buildVersion
 * @throws Exception
 */
	public void appCenter(String build, String buildVersion) throws Exception {
		HeaderChildNode("App Center");
		verifyElementPresentAndClick(AppCenterPage.objMicrosoft, "Microsoft");
		type(AppCenterPage.objEmail, "ABC@igsindia.net", "Email Field");
		verifyElementPresentAndClick(AppCenterPage.objSignIn, "Next Icon");
		waitTime(4000);
		type(AppCenterPage.objPassword, "password", "Password Field");
		verifyElementPresentAndClick(AppCenterPage.objSignIn, "Next Icon");
		if (verifyElementPresent(AppCenterPage.objSignIn, "Next Icon")) {
			verifyElementPresentAndClick(AppCenterPage.objSignIn, "Next Icon");
		}
		waitTime(4000);
		if (verifyElementPresent(AppCenterPage.objMoreInformationRequiredPopUp, "More Information")) {
			click(AppCenterPage.objCancelBtn, "Cancel");
		}
		waitTime(4000);
		if (verifyElementPresent(AppCenterPage.objNoBtn, "No Icon")) {
			click(AppCenterPage.objNoBtn, "No Icon");
		}

		if (verifyElementPresent(AppCenterPage.objZee5AndroidHeader, "ZEE5 Android Header")) {
			if (build.equals("latest")) {
				click(AppCenterPage.objDownloadLatestReleaseBtn, "Dwonload button");
			} else {
				List<WebElement> version = findElements(AppCenterPage.objVersion);
				List<WebElement> expend = findElements(AppCenterPage.objExpandMore);
				int buildsVersion = version.size();
				for (int i = 1; i < buildsVersion; i++) {
					System.out.println(version.get(i).getText());
					if (version.get(i).getText().contains(buildVersion)) {
						expend.get(i).click();
						verifyElementPresentAndClick(AppCenterPage.objDownloadBtn, "Download button");
						break;
					}
				}
			}
		}
	}
/**
 * @note this method is used to validate Home screen via deeplink.
 * @throws Exception
 */
	public void homeScreenViaDeeplink() throws Exception {
		extent.HeaderChildNode("Home Screen validation via Deeplink");
		System.out.println("\nHome Screen validation via Deeplink");

		waitTime(4000);
		if (verifyElementDisplayed(AMDGenericObjects.objText("ZEE5"))) {
			click(AMDGenericObjects.objContainText("ZEE5"), "Open With Zee5");
			waitTime(6000);
			if (verifyElementDisplayed(AMDHomePage.objHighlightedTab("Home"))) {
				logger.info("Home screen is displayed through deeplink");
				extent.extentLoggerPass("Home", "Home screen is displayed through deeplink");
			} else {
				logger.error("Home screen is not displayed through deeplink");
				extent.extentLoggerFail("Home", "Home screen is not displayed through deeplink");
			}
		}
	}
/**
 * @note this method is used to validate deeplink to My Subscriptions screen
 * @param pUserType
 * @throws Exception
 */
	public void mySubscriptionScreenViaDeeplink(String pUserType) throws Exception {
		extent.HeaderChildNode("My Subscriptions Screen validation via Deeplink");
		System.out.println("\nMy Subscriptions Screen validation via Deeplink");

		waitTime(4000);
		if (verifyElementDisplayed(AMDGenericObjects.objText("ZEE5"))) {
			click(AMDGenericObjects.objContainText("ZEE5"), "Open With Zee5");
			waitTime(6000);
			if (pUserType.equalsIgnoreCase("Guest")) {
				if (verifyElementDisplayed(AMDLoginScreen.objLoginText)) {
					logger.info("Login/Register screen is displayed through deeplink for " + pUserType);
					extent.extentLoggerPass("Login/Register",
							"Login/Register screen is displayed through deeplink for " + pUserType);
				} else {
					logger.error("Login/Register screen is not displayed through deeplink for " + pUserType);
					extent.extentLoggerFail("Login/Register",
							"Login/Register screen is not displayed through deeplink for " + pUserType);
				}
			} else {
				if (verifyElementDisplayed(AMDMoreMenu.objMySubscriptionsHeader)) {
					logger.info("My Subscriptions screen is displayed through deeplink");
					extent.extentLoggerPass("My Subscriptions",
							"My Subscriptions screen is displayed through deeplink");
				} else {
					logger.error("My Subscriptions screen is not displayed through deeplink");
					extent.extentLoggerFail("My Subscriptions",
							"My Subscriptions screen is not displayed through deeplink");
				}
			}
		}
	}
/**
 * @note this method is used to validate deeplink to My Transactions page.
 * @param pUserType
 * @throws Exception
 */
	public void myTransactionsScreenViaDeeplink(String pUserType) throws Exception {
		extent.HeaderChildNode("My Transactions Screen validation via Deeplink");
		System.out.println("\nMy Transactions Screen validation via Deeplink");

		waitTime(4000);
		if (verifyElementDisplayed(AMDGenericObjects.objText("ZEE5"))) {
			click(AMDGenericObjects.objContainText("ZEE5"), "Open With Zee5");
			waitTime(6000);
			if (pUserType.equalsIgnoreCase("Guest")) {
				if (verifyElementDisplayed(AMDLoginScreen.objLoginText)) {
					logger.info("Login/Register screen is displayed through deeplink for " + pUserType);
					extent.extentLoggerPass("Login/Register",
							"Login/Register screen is displayed through deeplink for " + pUserType);
				} else {
					logger.error("Login/Register screen is not displayed through deeplink for " + pUserType);
					extent.extentLoggerFail("Login/Register",
							"Login/Register screen is not displayed through deeplink for " + pUserType);
				}
			} else {
				if (verifyElementDisplayed(AMDMoreMenu.objMyTransactionsHeader)) {
					logger.info("My Transactions screen is displayed through deeplink");
					extent.extentLoggerPass("My Transactions", "My Transactions screen is displayed through deeplink");
				} else {
					logger.error("My Transactions screen is not displayed through deeplink");
					extent.extentLoggerFail("My Transactions",
							"My Transactions screen is not displayed through deeplink");
				}
			}
		}
	}
/**
 * @note this method is used for Edit Profile Screen validation via Deeplink
 * @param pUserType
 * @throws Exception
 */
	public void editProfilePageViaDeeplink(String pUserType) throws Exception {
		extent.HeaderChildNode("Edit Profile Screen validation via Deeplink");
		System.out.println("\nEdit Profile Screen validation via Deeplink");

		waitTime(4000);
		if (verifyElementDisplayed(AMDGenericObjects.objText("ZEE5"))) {
			click(AMDGenericObjects.objContainText("ZEE5"), "Open With Zee5");
			waitTime(6000);
			if (pUserType.equalsIgnoreCase("Guest")) {
				if (verifyElementDisplayed(AMDLoginScreen.objLoginText)) {
					logger.info("Login/Register screen is displayed through deeplink for " + pUserType);
					extent.extentLoggerPass("Login/Register",
							"Login/Register screen is displayed through deeplink for " + pUserType);
				} else {
					logger.error("Login/Register screen is not displayed through deeplink for " + pUserType);
					extent.extentLoggerFail("Login/Register",
							"Login/Register screen is not displayed through deeplink for " + pUserType);
				}
			} else {
				if (verifyElementDisplayed(AMDMyProfileScreen.objEditProfileHeader)) {
					logger.info("Edit Profile screen is displayed via deeplink");
					extent.extentLoggerPass("Edit Profile", "Edit Profile screen is displayed via deeplink");
				} else {
					logger.error("Edit Profile screen is not displayed through deeplink");
					extent.extentLoggerFail("Edit Profile", "Edit Profile screen is not displayed through deeplink");
				}
			}
		}
	}
/**
 * @Note This method is used to validate the social login.
 * @param userType
 * @throws Exception
 */
	public void SocialLogin(String userType) throws Exception {

		extent.HeaderChildNode("Social Login Validation");
		if (userType.equalsIgnoreCase("Guest")) {
			waitTime(3000);
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			// Verify user is navigated to Login/Register screen post tapping Login/Register
			// link
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			// Gmail Login
			verifyElementPresentAndClick(AMDLoginScreen.objGoogleBtn, "Gmail icon");
			if (checkElementExist(AMDLoginScreen.objGmailSignIn, "Gmail Sign In")) {
				verifyElementPresentAndClick(AMDLoginScreen.objGmailEmailField, "Email Field");
				type(AMDLoginScreen.objGmailEmailField, "zeetest55@gmail.com", "Email Field");
				verifyElementPresentAndClick(AMDLoginScreen.objGmailNextBtn, "Next Button");
				verifyElementPresentAndClick(AMDLoginScreen.objGmailPasswordField, "Password Field");
				type(AMDLoginScreen.objGmailPasswordField, "zeetest123", "Password Field");
				verifyElementPresentAndClick(AMDLoginScreen.objGmailNextBtn, "Next Button");

				if (checkElementExist(AMDLoginScreen.objGmailAddPhoneNumber, "Add Phone Number")) {
					verifyElementPresentAndClick(AMDLoginScreen.objSkipBtn, "Skip Button");
				}
				if (checkElementExist(AMDLoginScreen.objAgreeBtn, "Agree Button")) {
					click(AMDLoginScreen.objAgreeBtn, "Agree Button");
				}

				if (checkElementExist(AMDLoginScreen.objAcceptBtn, "Accept Button")) {
					click(AMDLoginScreen.objAcceptBtn, "Accept Button");
				}
			}

			if (checkElementExist(AMDLoginScreen.objGmailAccount, "Gmail Account")) {
				click(AMDLoginScreen.objGmailAccount, "Gmail Account");
				waitTime(5000);
			}
			if (checkElementExist(AMDOnboardingScreen.objTellUsMore, "More info Screen")) {
				if (checkElementExist(AMDLoginScreen.objEmailIdField, "Email Id field")) {
					type(AMDLoginScreen.objEmailIdField, "zeetest@gmail.com", "Email Id field");
				}
				verifyElementPresentAndClick(AMDLoginScreen.objDOB, "Date of Birth");
				verifyElementPresentAndClick(AMDLoginScreen.objDate, "Date");
				verifyElementPresentAndClick(AMDLoginScreen.objDateOK, "OK button");
				verifyElementPresentAndClick(AMDLoginScreen.objGender, "Gender Field");
				verifyElementPresentAndClick(AMDLoginScreen.objGenderMale, "Male");
				verifyElementExist(AMDLoginScreen.objSubmitButton, "Submit Button");
				Back(1);
			}

			if (checkElementExist(AMDHomePage.objHome, "Home Tab")) {
				logger.info("Google login is successfull");
				extent.extentLoggerPass("Login", "Google login is successfull");

				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
				swipeUntilFindElement(AMDMoreMenu.objLogout, "UP");
				verifyElementPresentAndClick(AMDMoreMenu.objLogout, "Logout");
				verifyElementPresentAndClick(AMDMoreMenu.objLogoutBtn, "Logout Button");
				waitTime(5000);
				Swipe("DOWN", 2);
				verifyElementPresentAndClick(AMDMoreMenu.objProfile, "Login/Register");

			} else {
				logger.info("Pre conditions not met, Account is not logged In");
				extentLogger("Gmail", "Pre conditions not met, Account is not logged In");
				for (int i = 0; i < 5; i++) {
					if (verifyIsElementDisplayed(AMDLoginScreen.objtwitterBtn)) {
						break;
					} else {
						Back(1);
					}
				}

			}

			// Facebook Login

			clearField(AMDLoginScreen.objEmailIdField, "Email Id");
			waitTime(3000);
			verifyElementPresentAndClick(AMDLoginScreen.objfbBtn, "Facebook icon");
			waitTime(5000);
			if (checkElementExist(AMDHomePage.objHome, "Home Tab")) {
				logger.info("Facebook Login is Successfull");
				extent.extentLoggerPass("Login", "Facebook Login is Successfull");
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
				waitTime(4000);
				Swipe("UP", 1);

				verifyElementPresentAndClick(AMDMoreMenu.objLogout, "Logout");
				verifyElementPresentAndClick(AMDMoreMenu.objLogoutBtn, "Logout Button");
				waitTime(5000);
				Swipe("Down", 2);
				verifyElementPresentAndClick(AMDMoreMenu.objProfile, "Login/Register");
			} else {
				logger.info("Pre conditions not met, Social Account is not logged In");
				extentLoggerWarning("Facebook", "Pre conditions not met, Social Account is not logged In");
				if (checkElementExist(AMDLoginScreen.objFBEmail, "Email Id field")) {
					logger.info("Facebook login screen is displayed");
					extentLoggerPass("Facebook login page", "Facebook login screen is displayed");
				} else {
					logger.info("Facebook login screen is not displayed");
					extentLogger("Facebook login page", "Facebook login screen is not displayed");
				}
				Back(1);
			}

			// Twitter login

			verifyElementPresentAndClick(AMDLoginScreen.objtwitterBtn, "Twitter icon");
			waitTime(5000);

			if (checkElementExist(AMDLoginScreen.objTwitterAutorizeAllowBtn, "Authorize app")) {
				logger.info("twitter Page is displayed");
				extent.extentLoggerPass("twitter", "twitter Page is displayed");
				click(AMDLoginScreen.objTwitterAutorizeAllowBtn, "Authorize app");
				waitTime(5000);
			}

			if (checkElementExist(AMDHomePage.objHome, "Home Tab")) {
				logger.info("Twitter Login is Successfull");
				extent.extentLoggerPass("Login", "Twitter Login is Successfull");
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
				Swipe("UP", 2);
				verifyElementPresentAndClick(AMDMoreMenu.objLogout, "Logout");
				verifyElementPresentAndClick(AMDMoreMenu.objLogoutBtn, "Logout Button");

			} else {
				logger.info("Pre conditions not met, Account is not logged In");
				extentLogger("Twitter", "Pre conditions not met, Account is not logged In");
				for (int i = 0; i < 5; i++) {
					if (verifyIsElementDisplayed(AMDLoginScreen.objtwitterBtn)) {
						break;
					} else {
						Back(1);
					}
				}
			}
		} else {
			logger.info("Social Login is NOT Applicable for Registered Users");
			extentLogger("Registered User", "Social Login is NOT Applicable for Registered Users");
		}
	}
/**
 * @Note This method is used to verify the rails/trays present in the landing screen according to content language selected.
 * @param userType
 * @param contentLanguage
 * @throws Exception
 */
	public void railsVerificationAccordingToContentLanguage(String userType, String contentLanguage) throws Exception {
		extent.HeaderChildNode("Verification of Rails based on Content Language");
		selectContentLang_MoreMenu_ByDeselectingEnglishKannada(contentLanguage);
		selectTopNavigationTab("Home");

		boolean flag = false;
		if (contentLanguage.equalsIgnoreCase("Bengali")) {
			flag = swipeUntilFindElement(AMDHomePage.objRailName("Telugu"), "UP");
		} else {
			flag = swipeUntilFindElement(AMDHomePage.objRailName(contentLanguage), "UP");
		}
		if (flag == true) {
			logger.info("Relevent rail is displayed");
			extent.extentLoggerPass("rails", "Relevent rail is displayed");
		} else {
			logger.error("Relevent rail is not displayed");
			extent.extentLoggerFail("rails", "Relevent rail is not displayed");
		}
		waitTime(3000);
		deselectContentLang_MoreMenuAndSelectEnglishKannada(contentLanguage);
	}

	public void selectContentLang_MoreMenu_ByDeselectingEnglishKannada(String planguage) throws Exception {

		click(AMDHomePage.HomeIcon, "Home button");
		click(AMDHomePage.MoreMenuIcon, "More Menu");
		Swipe("UP", 1);
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings CTA");
		verifyElementPresent(AMDGenericObjects.objScreenTitleName("Settings"), "Settings Screen");
		Swipe("UP", 1);
		swipeUntilFindElement(AMDMoreMenu.objContentLang, "UP");
		verifyElementPresentAndClick(AMDMoreMenu.objContentLang, "Content language");
		verifyElementPresent(AMDGenericObjects.objScreenTitleName("Content Language"), "Content language screen");

		// ***** UnSelecting default content languages *****
		click(AMDOnboardingScreen.objSelectContentLang("English"), "English");
		PartialSwipe("UP", 2);
		waitTime(1000);
		click(AMDOnboardingScreen.objSelectContentLang("Kannada"), "Kannada");
		Swipe("DOWN", 1);

		// ***** Selecting required language *****
		if (planguage.contains(",")) {
			Swipe("DOWN", 1);
			String[] pLanguages = planguage.split(",");
			int n = pLanguages.length;
			for (int i = 0; i < n; i++) {

				for (int j = 0; j < 5; j++) {
					if (getDriver().findElements(AMDOnboardingScreen.objSelectContentLang(pLanguages[i])).size() == 0) {
						PartialSwipe("UP", 1);
					} else {
						verifyElementPresentAndClick(AMDOnboardingScreen.objSelectContentLang(pLanguages[i]),
								pLanguages[i]);
						break;
					}
				}
			}
		} else {
			outerLoop: for (int i = 1; i <= 4; i++) {
				int totalLanguages = getCount(AMDOnboardingScreen.objContentLangBtns);
				for (int j = 1; j <= totalLanguages; j++) {
					String visibleLang = getText(AMDOnboardingScreen.objgetContentLangName(j));
					if (planguage.equalsIgnoreCase(visibleLang)) {
						verifyElementPresentAndClick(AMDOnboardingScreen.objSelectContentLang(planguage), planguage);
						break outerLoop;
					}
				}
				PartialSwipe("UP", 1);
			}
		}
		waitTime(1000);
		verifyElementPresentAndClick(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button");
		waitTime(1000);
		Back(1);
		click(AMDHomePage.HomeIcon, "Home button");
	}
/**
 * @note this method is used for selecting English and Kannada as CL.
 * @param planguage
 * @throws Exception
 */
	public void deselectContentLang_MoreMenuAndSelectEnglishKannada(String planguage) throws Exception {

		click(AMDHomePage.HomeIcon, "Home button");
		click(AMDHomePage.MoreMenuIcon, "More Menu");
		Swipe("UP", 1);
		click(AMDMoreMenu.objSettings, "Settings CTA");
		verifyElementDisplayed(AMDGenericObjects.objScreenTitleName("Settings"));
		Swipe("UP", 1);
		click(AMDMoreMenu.objContentLang, "Content language");
		verifyElementDisplayed(AMDGenericObjects.objScreenTitleName("Content Language"));

		// ***** deSelecting selected language *****
		if (planguage.contains(",")) {
			Swipe("DOWN", 1);
			String[] pLanguages = planguage.split(",");
			int n = pLanguages.length;
			System.out.println(n);
			for (int i = 0; i < n; i++) {
				int totalLanguages = getCount(AMDOnboardingScreen.objContentLangBtns);
				for (int j = 1; j <= totalLanguages; j++) {
					String visibleLang = getText(AMDOnboardingScreen.objgetContentLangName(j));
					if (pLanguages[i].equalsIgnoreCase(visibleLang)) {
						click(AMDOnboardingScreen.objSelectContentLang(pLanguages[i]), pLanguages[i]);
					}
				}
				PartialSwipe("UP", 3);
			}
		} else {
			outerLoop: for (int i = 1; i <= 4; i++) {
				int totalLanguages = getCount(AMDOnboardingScreen.objContentLangBtns);
				for (int j = 1; j <= totalLanguages; j++) {
					String visibleLang = getText(AMDOnboardingScreen.objgetContentLangName(j));
					if (planguage.equalsIgnoreCase(visibleLang)) {
						click(AMDOnboardingScreen.objSelectContentLang(planguage), planguage);
						break outerLoop;
					}
				}
				PartialSwipe("UP", 1);
			}
		}

		// ***** Selecting default content languages *****
		Swipe("DOWN", 4);
		click(AMDOnboardingScreen.objSelectContentLang("English"), "English");
		PartialSwipe("UP", 2);
		waitTime(1000);
		click(AMDOnboardingScreen.objSelectContentLang("Kannada"), "Kannada");
		Swipe("DOWN", 1);
		waitTime(1000);
		click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button");
		waitTime(1000);
//	click(AMDGenericObjects.objBackBtn, "Back button");
		Back(1);
		click(AMDHomePage.HomeIcon, "Home button");
	}
/**
 * @Note This method is used to Verification of Rails in Landing screen based on the tab selected
 * @param userType
 * @param tabName
 * @throws Exception
 */
	public void verifyRailsInLangingScreen(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("Verification of Rails in Landing screen: " + tabName);
		selectTopNavigationTab(tabName);

		String pContentLang = ResponseInstance.getContentLanguageForAppMixpanel(userType);
		System.out.println("CONTENT LANG: " + pContentLang);

		Response pageResp = ResponseInstance.getResponseForAppPages(tabName, pContentLang, userType);
		pageResp.print();

		ArrayList<String> railNames = new ArrayList<String>();

		if (tabName.equalsIgnoreCase("Live TV")) {
			for (int i = 0; i < 20; i++) {
				List trayItems = pageResp.jsonPath().getList("items[" + i + "].items");
				System.out.println(trayItems.size());
				if (trayItems.size() > 0) {
					String title = pageResp.jsonPath().getString("items[" + i + "].title");
					railNames.add(title);
				}
				if (railNames.size() == 3) {
					break;
				}
			}
			System.out.println(railNames);

			findingTrayInscreen(20, AMDHomePage.objTrayTitle(railNames.get(0)),
					AMDHomePage.objTrayTitle(railNames.get(0)), railNames.get(0), "First rail", userType, tabName);
			findingTrayInscreen(20, AMDHomePage.objTrayTitle(railNames.get(1)),
					AMDHomePage.objTrayTitle(railNames.get(0)), railNames.get(1), "First rail", userType, tabName);
			findingTrayInscreen(20, AMDHomePage.objTrayTitle(railNames.get(2)),
					AMDHomePage.objTrayTitle(railNames.get(0)), railNames.get(2), "First rail", userType, tabName);
		} else {
			for (int i = 2; i < 5; i++) {
				String title = pageResp.jsonPath().getString("buckets[" + i + "].title");
				railNames.add(title);
			}
			System.out.println(railNames);

			if (railNames.get(0) != null) {
				findingTrayInscreen(20, AMDHomePage.objTrayTitle(railNames.get(0)), AMDHomePage.objCarouselDots,
						railNames.get(0), "MastheadCarousel", userType, tabName);
			}

			if (railNames.get(1) != null) {
				findingTrayInscreen(20, AMDHomePage.objTrayTitle(railNames.get(1)), AMDHomePage.objCarouselDots,
						railNames.get(1), "MastheadCarousel", userType, tabName);
			}

			if (railNames.get(2) != null) {
				findingTrayInscreen(20, AMDHomePage.objTrayTitle(railNames.get(2)), AMDHomePage.objCarouselDots,
						railNames.get(2), "MastheadCarousel", userType, tabName);
			}
		}
	}
/**
 * @note this method is used for validating carousel banner for combo offer
 * @param tabName
 * @param contentTitle
 * @throws Exception
 */
	public void nonSubscribed_withoutSupermoon(String tabName, String contentTitle) throws Exception {
		validationOfCarousalAndConsumptionPageForComboOfferContent(tabName, contentTitle);
		validationOfcomboOfferPageAndPaymentPage("Pay less, Watch more!", "Buy Supermoon Combo");
	}

//========================VI Integration============================

	// ---------------------------------------Veena-----------------------------------
/**
 * @note this method is used for register on blocker screen.
 * @param searchcontent
 * @throws Exception
 */
	public void zee_Register(String searchcontent) throws Exception {
		if (userType.equalsIgnoreCase("ClassicUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_056] [TC_AND_VI_SUB_057]  - Verify that User is able to register the app through 'Existing ZEE5 user? Click here to login' CTA in blocker screen, Verify that user is able to register the app from blocker screen using Email/Mobile number/any socila login");
			System.out.println(
					"[TC_AND_VI_SUB_056] [TC_AND_VI_SUB_057]  - Verify that User is able to register the app through 'Existing ZEE5 user? Click here to login' CTA in blocker screen, Verify that user is able to register the app from blocker screen using Email/Mobile number/any socila login");

			relaunch(false);
			waitTime(6000);
			click(AMDViPage.objBlockerLoginLink, "Existing ZEE5 user? Click here to login");
			waitTime(6000);
			registerForFreeScreen("Email");
			waitTime(6000);
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_058]  - Verify that blocker screen shouldn't be displayed for newly register user post kill and relaunch the ZEE5 App instead home landing screen should be displated");
			System.out.println(
					"[TC_AND_VI_SUB_058]  - Verify that blocker screen shouldn't be displayed for newly register user post kill and relaunch the ZEE5 App instead home landing screen should be displated");

			relaunch(false);
			waitTime(4000);
			if (verifyElementIsNotDisplayed(AMDViPage.objLaunchViMoviesTV)) {
				logger.info(
						"Blocker screen is not displayed for newly register user post kill and relaunch the ZEE5 App");
				extentLogger("",
						"Blocker screen is not displayed for newly register user post kill and relaunch the ZEE5 App");
			} else {
				logger.info("Blocker screen is displayed for newly register user post kill and relaunch the ZEE5 App");
				extentLoggerPass("",
						"Blocker screen is displayed for newly register user post kill and relaunch the ZEE5 App");
			}

			if (verifyElementDisplayed(AMDHomePage.HomeIcon)) {
				logger.info("Home screen is displayed When ever click on Back Button ");
				extentLoggerPass("", "Home screen is displayed When ever click on Back Button ");
			} else {
				logger.info("Home screen is not displayed When ever click on Back Button ");
				extentLogger("", "Home screen is not displayed When ever click on Back Button ");
			}

			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_059]  - Verify that Telco More menu options should not be displayed for newly Registered user instead complete More Menu should be displayed");
			System.out.println(
					"[TC_AND_VI_SUB_059]  - Verify that Telco More menu options should not be displayed for newly Registered user instead complete More Menu should be displayed");

			waitTime(2000);
			navigateBackToHomeLandingScreen();
			click(AMDHomePage.MoreMenuIcon, "More Menu tab");
			waitTime(2000);
			verifyElementPresent(AMDMoreMenu.objBuySubscription, "Buy plans Option");
			verifyElementPresent(AMDMoreMenu.objMySubscription, "My Subscription Option");
			verifyElementPresent(AMDMoreMenu.objMyTransactions, "My Transaction Option");
			verifyElementPresent(AMDMoreMenu.objWatchlist, "Watchlist Option");
			verifyElementPresent(AMDMoreMenu.objSettings, "Settings Option");
			verifyElementPresent(AMDMoreMenu.objInviteAFriend, "Invite a friend Option");
			verifyElementPresent(AMDMoreMenu.objAboutUs, "About us Option");
			verifyElementPresent(AMDMoreMenu.objHelpCentre, "Help centre Option");
			verifyElementPresent(AMDMoreMenu.objHaveaPrepaidCode, "Have a prepaid code  Option");
			Swipe("UP", 1);
			verifyElementPresent(AMDMoreMenu.objLogout, "Logout Option");
			verifyElementPresent(AMDMoreMenu.objTermsOfUse, "Terms of use option");
			verifyElementPresent(AMDMoreMenu.objPrivacyPolicy, "Privacy option");
			verifyElementPresent(AMDMoreMenu.objBuildVersion, "Build version section");
			verifyElementPresent(AMDMoreMenu.objGrievanceRedressalOption, "Grievance Redressal Option");
			// Verify all menu are tappable
			allMenuTappable();
			// Verify Buy plan CTA displayed for Classic user
			buyPlanCTALandingScreenHeader(userType);
			BuyPlanCTAcarousel(userType);
			buyPlanButtonBelowThePlayer(userType);
			buyPlanCTAOnThePlayer(userType);

		}
	}
/**
 * @note this method is used to verify that all More menu options are tappable for newly register user from blocker screen.
 * @throws Exception
 */
	public void allMenuTappable() throws Exception {
		extent.HeaderChildNode(
				"[TC_AND_VI_SUB_060]  - Verify that all More menu options are tappable for newly register user from blocker screen");
		System.out.println(
				"[TC_AND_VI_SUB_060]  - Verify that all More menu options are tappable for newly register user from blocker screen");
//		navigateBackToHomeLandingScreen();
//		click(AMDHomePage.MoreMenuIcon, "More Menu tab");
		waitTime(2000);
		Swipe("DOWN", 1);
		if (verifyElementPresentAndClick(AMDMoreMenu.objBuySubscription, "Buy plans Option")) {
			verifyElementPresent(AMDMySubscriptionPage.objBuyPremiumText, "Buy premium text");
			Back(1);
		}
		if (verifyElementPresentAndClick(AMDMoreMenu.objHaveaPrepaidCode, "Have a prepaid code Option")) {
			verifyElementPresent(AMDMoreMenu.objPrepaidCodePopUp, "Have a prepaid code pop up");
			Back(1);
		}

		if (verifyElementPresentAndClick(AMDMoreMenu.objProfile, "Profile option")) {
			verifyElementPresent(AMDMoreMenu.objProfilePic, "User Profile");
			Back(1);
		}
		waitTime(6000);

		if (verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Setting option")) {
			Swipe("UP", 1);
			verifyElementPresent(AMDSettingsScreen.objAuthenticateDevice, "Authenticate option");
			Back(1);
		}
	}
/**
 * @note this method is used to Verify that Buy Plan cta displayed in Landing screen header after register the app
 * @param userType
 * @throws Exception
 */
	public void buyPlanCTALandingScreenHeader(String userType) throws Exception {

		extent.HeaderChildNode(
				"(TC_AND_VI_SUB_061),Verify that Buy Plan cta displayed in Landing screen header after register the app");
		System.out.println(
				"(TC_AND_VI_SUB_061),Verify that Buy Plan cta displayed in Landing screen header after register the app");
		navigateBackToHomeLandingScreen();
		waitTime(2000);
		if (verifyElementDisplayed(AMDHomePage.objSubscribeIcon)) {
			logger.info("Buy Plan tag is displayed  in Landing screen header");
			extentLoggerPass("Buy Plan Tag", "Buy Plan tag is displayed  in Landing screen header");
		} else {
			logger.error("Buy Plan tag is not displayed in Landing screen header");
			extentLoggerFail("Get premium Tag", "Buy Plan tag is not displayed in Landing screen header");
		}

	}
//			public void BuyPlanCTAcarousel(String userType) throws Exception {
//				extent.HeaderChildNode("(TC_AND_VI_SUB_062),Verify thet Buy Plan cta displayed in Carousel banner for Premium contents after register the app");
//				System.out.println("(TC_AND_VI_SUB_062),Verify thet Buy Plan cta displayed in Carousel banner for Premium contents after register the app");
//				
//				if (verifyElementDisplayed(AMDHomePage.objPremiumBtn)) {
//					logger.info("Buy Plan tag is displayed in Carousel banner");
//					extentLoggerPass("Buy Plan Tag", "Buy Plan tag is displayed in Carousel banner");
//				} else {
//					logger.error("Buy Plan tag is not displayed in Carousel banner");
//					extentLoggerFail("Get premium Tag", "Buy Plan tag is not displayed in Carousel banner");
//				}
//				
//			}
//			

//			public void buyPlanButtonBelowThePlayer(String userType) throws Exception {
//				extent.HeaderChildNode("(TC_AND_VI_SUB_063), Verify thet Buy Plan cta displayed below the Player for premium contents");
//				System.out.println("(TC_AND_VI_SUB_063), Verify thet Buy Plan cta displayed below the Player for premium contents");
//				
//				click(AMDHomePage.objPlayBtn,"Play CTA");
//				waitTime(5000);
//				if(verifyElementPresent(AMDPlayerScreen.objBuyNowCTABelowThePlayer, "BuyPlan CTA Below the player")) {
//					logger.info("Buy Plan tag is displayed  Below the player");
//					extentLoggerPass("Buy Plan Tag", "Buy Plan tag is displayed  Below the player");
//				} else {
//					logger.error("Buy Plan tag is not displayed  Below the player");
//					extentLoggerFail("Get premium Tag", "Buy Plan tag is not displayed  Below the player");
//				}
//				
//				
//			}
//			
//			public void buyPlanCTAOnThePlayer(String userType) throws Exception {
//				extent.HeaderChildNode("(TC_AND_VI_SUB_064), Verify that Buy Plan cta displayed on Player for premium contents which doesnot have trailer");
//				System.out.println("(TC_AND_VI_SUB_064), Verify that Buy Plan cta displayed on Player for premium contents which doesnot have trailer");
//				
//				waitForElementDisplayed(AMDPlayerScreen.objBuyPlanOnThePlayer, 160);
//				if(verifyElementPresent(AMDPlayerScreen.objBuyPlanOnThePlayer, "BuyPlan CTA ON the player")) {
//					logger.info("Buy Plan tag is displayed  ON the player");
//					extentLoggerPass("Buy Plan Tag", "Buy Plan tag is displayed  ON the player");
//				} else {
//					logger.error("Buy Plan tag is not displayed  ON the player");
//					extentLoggerFail("Get premium Tag", "Buy Plan tag is not displayed  ON the player");
//				}
//				
//				
//				
//			}
//	
/**
 * @note this method is used to verify that Vi user is able to Play the premium contents
 * @param searchcontent
 * @throws Exception
 */
	public void vi_PackOverride(String searchcontent) throws Exception {
		if (userType.equalsIgnoreCase("ClassicUser")) {
			extent.HeaderChildNode("[TC_AND_VI_SUB_049]  - Verify that Vi user is able to Play the premium contents");
			loginVi(userType, "14 Phere");
			waitTime(20000);
			if (checkElementExist(AMDPlayerScreen.objPlayerScreen, "Player screen")) {
				logger.info("Vi user is able to play premium content");
				extent.extentLoggerPass("Player", "Vi user is able to play premium content");
			} else {
				logger.info("Vi user is not able to play premium content");
				extent.extentLoggerFail("Player", "Vi user is not able to play premium content");
			}

			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_047]  - Verify that If any existing signed in user on ZEE5,comes Via Vi app, the Vi pack gets attached and the \r\n"
							+ " existing session gets overridden by Vi session.");
			Back(1);
			navigateBackToHomeLandingScreen();
			click(AMDHomePage.MoreMenuIcon, "More Menu tab");
			waitTime(2000);
			verifyElementPresent(AMDMoreMenu.objProfile, "Profile");
			String user = getText(AMDMoreMenu.objProfileHeader);
			System.out.println(user);
			System.out.println(FirstName + " " + LastName);
			if (user.contains(FirstName + " " + LastName)) {
				logger.info("Existing session is not getting overridden by Vi session");
				extent.extentLoggerFail("Player", "Existing session is not getting overridden by Vi session");
			} else {
				logger.info("Existing session is getting overridden by Vi session");
				extent.extentLoggerPass("Player", "Existing session is getting overridden by Vi session");
			}

		}
	}
/**
 * @note this method is used to verify search functionality as a VI user
 * @param searchcontent
 * @throws Exception
 */
	public void vi_Search(String searchcontent) throws Exception {

		verifyElementPresentAndClick(AMDViPage.objSearchIcon, "Search Icon ");

		verifyElementPresentAndClick(AMDViPage.objSearchBox, "Search Box");

		type(AMDViPage.objSearchBox, searchcontent + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDViPage.objFirstSearchResult1(searchcontent), "Search result");
		waitTime(2000);
		if (verifyElementDisplayed(AMDViPage.objFirstEpisode)) {
			waitTime(2000);
			click(AMDViPage.objFirstEpisode, "First Episode");
		}

	}
/**
 * @note this method is used for Moremenu validation fro VI user.
 * @param userType
 * @throws Exception
 */
	public void vi_ZEEMoreMenuValidation(String userType) throws Exception {
		if (userType.equalsIgnoreCase("VIPUser") || userType.equalsIgnoreCase("ClassicUser")) {
			vi_PlaybackInitiated(userType);
			vi_ZeeAppMenuValidation(userType);
			vi_BuyPlan_Visibility(userType);
			vi_HaveAPrepaidCodeOption(userType);
			vi_LogoutVisibility(userType);
			vi_AuthenticateOption(userType);
			vi_Profile_Visibility(userType);
			vi_MySubscription(userType);
			Vi_MySubscriptionHidden(userType);
			vi_MyTransactionsOption(userType);
			// Vi_ParentalControlPopupPinValidation(userType);

		}
	}
/**
 * @note this method is used to verify the content playback after login
 * @param userType
 * @throws Exception
 */
	public void vi_PlaybackInitiated(String userType) throws Exception {
		waitTime(10000);
		if (userType.equalsIgnoreCase("VIPUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_016] -Verify that post clicking the Zee5 content on Vi MTV app ZEE5 app gets launched with SSO & playback must be initiated");
			System.out.println(
					"[TC_AND_VI_SUB_016] -Verify that post clicking the Zee5 content on Vi MTV app ZEE5 app gets launched with SSO & playback must be initiated");
		}
		if (userType.equalsIgnoreCase("ClassicUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_077] -Verify that post clicking the Zee5 content on Vi MTV app ZEE5 app gets launched with SSO & playback must be initiated");
			System.out.println(
					"[TTC_AND_VI_SUB_077] -Verify that post clicking the Zee5 content on Vi MTV app ZEE5 app gets launched with SSO & playback must be initiated");
		}
		if (checkElementExist(AMDPlayerScreen.objPlayerScreen, "Player screen")) {
			logger.info("Content playback is initiated after accessing a content from Vi app");
			extent.extentLoggerPass("Player", "Content playback is initiated after accessing a content from Vi app");
		} else {
			logger.info("Content playback is not initiated after accessing a content from Vi app");
			extent.extentLoggerFail("Player",
					"Content playback is not initiated after accessing a content from Vi app");
		}
	}
/**
 * @note this method is used for More menu items validation
 * @param userType
 * @throws Exception
 */
	public void vi_ZeeAppMenuValidation(String userType) throws Exception {

		if (userType.equalsIgnoreCase("VIPUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_091] - Verify that when user tap on the More menu should able to see below options\r\n"
							+ " 1)My Subscription\r\n" + " 2)My Transactions\r\n" + " 3)Watchlist\r\n"
							+ " 4)Settings\r\n" + " 5)Invite a Friend\r\n" + " 6)About Us\r\n" + " 7)Help Center\r\n"
							+ " 8)Logout\r\n" + " 9)Terms of use and privacy policy links\r\n" + " 10)Build version");
			System.out.println(
					"[TC_AND_VI_SUB_091] - Verify that when user tap on the More menu should able to see below options\\r\\n\"\r\n"
							+ "					+ \" 1)My Subscription\\r\\n\"\r\n"
							+ "					+ \" 2)My Transactions\\r\\n\"\r\n"
							+ "					+ \" 3)Watchlist\\r\\n\"\r\n"
							+ "					+ \" 4)Settings\\r\\n\"\r\n"
							+ "					+ \" 5)Invite a Friend\\r\\n\"\r\n"
							+ "					+ \" 6)About Us\\r\\n\"\r\n"
							+ "					+ \" 7)Help Center\\r\\n\"\r\n"
							+ "					+ \" 8)Logout\\r\\n\"\r\n"
							+ "					+ \" 9)Terms of use and privacy policy links\\r\\n\"\r\n"
							+ "					+ \" 10)Build version");
		}
		if (userType.equalsIgnoreCase("ClassicUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_030] - Verify that when user tap on the More menu should able to see below options\r\n"
							+ " 1)My Subscription\r\n" + " 2)My Transactions\r\n" + " 3)Watchlist\r\n"
							+ " 4)Settings\r\n" + " 5)Invite a Friend\r\n" + " 6)About Us\r\n" + " 7)Help Center\r\n"
							+ " 8)Logout\r\n" + " 9)Terms of use and privacy policy links\r\n" + " 10)Build version");
			System.out.println(
					"[TC_AND_VI_SUB_030] - Verify that when user tap on the More menu should able to see below options\\r\\n\"\r\n"
							+ "					+ \" 1)My Subscription\\r\\n\"\r\n"
							+ "					+ \" 2)My Transactions\\r\\n\"\r\n"
							+ "					+ \" 3)Watchlist\\r\\n\"\r\n"
							+ "					+ \" 4)Settings\\r\\n\"\r\n"
							+ "					+ \" 5)Invite a Friend\\r\\n\"\r\n"
							+ "					+ \" 6)About Us\\r\\n\"\r\n"
							+ "					+ \" 7)Help Center\\r\\n\"\r\n"
							+ "					+ \" 8)Logout\\r\\n\"\r\n"
							+ "					+ \" 9)Terms of use and privacy policy links\\r\\n\"\r\n"
							+ "					+ \" 10)Build version");
		}
		waitTime(2000);
		Back(1);
		navigateBackToHomeLandingScreen();
		click(AMDHomePage.MoreMenuIcon, "More Menu tab");
		waitTime(2000);
		verifyElementPresent(AMDMoreMenu.objMySubscription, "My Subscription Option");
		verifyElementPresent(AMDMoreMenu.objMyTransactions, "My Transaction Option");
		verifyElementPresent(AMDMoreMenu.objWatchlist, "Watchlist Option");
		verifyElementPresent(AMDMoreMenu.objSettings, "Settings Option");
		verifyElementPresent(AMDMoreMenu.objInviteAFriend, "Invite a friend Option");
		verifyElementPresent(AMDMoreMenu.objAboutUs, "About us Option");
		verifyElementPresent(AMDMoreMenu.objHelpCentre, "Help centre Option");
		waitTime(2000);
		Swipe("UP", 1);
		verifyElementPresent(AMDMoreMenu.objLogout, "Logout Option");
		verifyElementPresent(AMDMoreMenu.objTermsOfUse, "Terms of use option");
		verifyElementPresent(AMDMoreMenu.objPrivacyPolicy, "Privacy option");
		verifyElementPresent(AMDMoreMenu.objBuildVersion, "Build version section");
		waitTime(2000);

	}
/**
 * @note this method is used for parental pin pop up vlidation as a vi user.
 * @param loc
 * @param text
 * @throws Exception
 */
	public void vi_ParentalPinPopupValidation(By loc, String text) throws Exception {

		navigateBackToHomeLandingScreen();
		click(AMDHomePage.MoreMenuIcon, "More Menu tab");
		waitTime(2000);
		click(AMDMoreMenu.objSettings, "Settings option");
		waitTime(5000);
		Swipe("UP", 1);
		verifyElementPresentAndClick(AMDMoreMenu.objParentalControl, "Parental Control");
		waitTime(2000);
		click(loc, text);
		waitTime(2000);
		click(AMDMoreMenu.objContinueBtn, "Continue Button");
		waitTime(5000);
		if (text.contains("No Restrict Content")) {
			click(AMDMoreMenu.objParentalLockDone, "Done Button");
		} else {
			if (verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin")) {
				logger.info("Parental Pin is SET");
				extent.extentLoggerPass("Parental Pin", "Parental Pin is SET");
				waitTime(2000);
				verifyElementExist(AMDMoreMenu.objSetPin, "Set Pin");
				type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin2, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin3, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin4, "1", "ParentalLockPin");
				hideKeyboard();
				waitTime(4000);
				click(AMDMoreMenu.objSetPinContinueBtn, "Continue Button");
				waitTime(2000);
				click(AMDMoreMenu.objParentalLockDone, "Done Button");
			} else {
				logger.info("Parental Pin Popup is NOT displayed");
				extent.extentLoggerFail("Parental Pin", "Parental Pin Popup is NOT displayed");
			}
		}
	}
/**
 * @note this method is used for parental pin pop up functionality validation.
 * @throws Exception
 */
	public void vi_ParentalPopupValidation() throws Exception {
		waitTime(10000);
		boolean checkParentalPopUp = verifyElementPresent(AMDPlayerScreen.objParentalPinPopUp, "Parental Pin Popup");
		if (checkParentalPopUp) {
			logger.info("Parental Pin Popup is displayed");
			extentLoggerPass("Parental Pin Popup", "Parental Pin Popup is displayed in Landscape mode");
			waitTime(3000);
			if (verifyIsElementDisplayed(AMDPlayerScreen.objParentalPinPopUp)) {
				type(AMDMoreMenu.objParentalLockPin1, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin2, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin3, "1", "ParentalLockPin");
				hideKeyboard();
				type(AMDMoreMenu.objParentalLockPin4, "1", "ParentalLockPin");
				hideKeyboard();
				waitTime(4000);
				click(AMDPlayerScreen.objParentalPinContinue, "Continue Button");

			} else {
				logger.info("Parental Pin Popup is NOT displayed");
				extentLoggerFail("Parental Pin Popup", "Parental Pin Popup is NOT displayed in Landscape mode");
			}
			waitTime(2000);
		}
	}
/**
 * @note this method is used for validating  BUY plan cta
 * @param UseTyper
 * @throws Exception
 */
	public void vi_BuyPlan_Visibility(String UseTyper) throws Exception {
		if (userType.equalsIgnoreCase("VIPUser") || userType.equalsIgnoreCase("ClassicUser")) {
			if (userType.equalsIgnoreCase("VIPUser")) {
				extent.HeaderChildNode("TC_AND_VI_SUB_034] - Verify that Buy Plan is Hidden for Vi user");
				System.out.println("TC_AND_VI_SUB_034] - Verify that Buy Plan is Hidden for Vi user");
			}
			if (userType.equalsIgnoreCase("ClassicUser")) {
				extent.HeaderChildNode("TC_AND_VI_SUB_095] - Verify that Buy Plan is Hidden for Vi user");
				System.out.println("TC_AND_VI_SUB_095] - Verify that Buy Plan is Hidden for Vi user");
			}

			navigateBackToHomeLandingScreen();
			// Back(1);
			click(AMDHomePage.MoreMenuIcon, "More Menu tab");
			waitTime(2000);
			if (verifyElementIsNotDisplayed(AMDMoreMenu.objBuySubscription)) {
				logger.info("Buy plan is hidden for Vi User");
				extent.extentLoggerPass("Buy Plan", "Buy plan is hidden for Vi User");
			} else {
				logger.error("Buy plan is not hidden for Vi User");
				extent.extentLoggerFail("Buy Plan", "Buy plan is not hidden for Vi User");

			}
			waitTime(2000);
		}
	}
/**
 * @note this method is used for My subscription scrren validation
 * @param Keyword
 * @throws Exception
 */
	public void vi_MySubscription(String Keyword) throws Exception {// 2

		if (userType.equalsIgnoreCase("VIPUser") || userType.equalsIgnoreCase("ClassicUser")) {
			if (userType.equalsIgnoreCase("VIPUser")) {
				extent.HeaderChildNode("[TC_AND_VI_SUB_096] - Verify that Vi user should get 'My Subscription' \r\n"
						+ " option under More screen With limited data like\r\n" + " 1. Pack name on top\r\n"
						+ " 2. Date fo purchase\r\n" + " 3. Status, Pack Country and Auto Renewal\r\n"
						+ " 4. Watch Ad-free on 3 devices at a time text is able to display.");
				System.out.println("[TC_AND_VI_SUB_096] - Verify that Vi user should get 'My Subscription' \\r\\n\"\r\n"
						+ "						+ \" option under More screen With limited data like\\r\\n\"\r\n"
						+ "						+ \" 1. Pack name on top\\r\\n\"\r\n"
						+ "						+ \" 2. Date fo purchase\\r\\n\"\r\n"
						+ "						+ \" 3. Status, Pack Country and Auto Renewal\\r\\n\"\r\n"
						+ "						+ \" 4. Watch Ad-free on 3 devices at a time text is able to display.");
			}
			if (userType.equalsIgnoreCase("ClassicUser")) {
				extent.HeaderChildNode("[TC_AND_VI_SUB_035] - Verify that Vi user should get 'My Subscription' \r\n"
						+ " option under More screen With limited data like\r\n" + " 1. Pack name on top\r\n"
						+ " 2. Date fo purchase\r\n" + " 3. Status, Pack Country and Auto Renewal\r\n"
						+ " 4. Watch Ad-free on 3 devices at a time text is able to display.");
				System.out.println("[TC_AND_VI_SUB_035] - Verify that Vi user should get 'My Subscription' \\r\\n\"\r\n"
						+ "						+ \" option under More screen With limited data like\\r\\n\"\r\n"
						+ "						+ \" 1. Pack name on top\\r\\n\"\r\n"
						+ "						+ \" 2. Date fo purchase\\r\\n\"\r\n"
						+ "						+ \" 3. Status, Pack Country and Auto Renewal\\r\\n\"\r\n"
						+ "						+ \" 4. Watch Ad-free on 3 devices at a time text is able to display.");
			}
			waitTime(2000);
			click(AMDMoreMenu.objMySubscription, "My Subscription Screen");
			waitTime(2000);
			verifyElementPresent(AMDMySubscriptionPage.objActivePackName, "Pack Name");
			verifyElementPresent(AMDMySubscriptionPage.objDateOfPurchase, "Date of purchase");
			verifyElementPresent(AMDMySubscriptionPage.objActiveStatus, "Pack Status");
			verifyElementPresent(AMDMySubscriptionPage.objPackCountry, "Pack Country");
			verifyElementPresent(AMDMySubscriptionPage.objAutoRenewal, "Auto Renewal");
			verifyElementPresent(AMDMySubscriptionPage.objWatchFreeText, "Watch Ad Free");

		}
	}
/**
 * @note this method is used for validating My subscription screen as a VIP user.
 * @param Keyword
 * @throws Exception
 */
	public void Vi_MySubscriptionHidden(String Keyword) throws Exception {// 2

		if (userType.equalsIgnoreCase("VIPUser") || userType.equalsIgnoreCase("ClassicUser")) {
			if (userType.equalsIgnoreCase("VIPUser")) {
				extent.HeaderChildNode(
						"[TC_AND_VI_SUB_097] - Verify that for Vi user following fields must be hidden in My Subscription\r\n"
								+ " 1. Plan Price to be hidden; The space will remain blank on screen\r\n"
								+ " 2. Payment mode to be hidden\r\n"
								+ " 3. Plan Expiry date should be hidden; User should not see the line item on plan card\r\n"
								+ " 4. 'Browse All Packs' should be hidden");
				System.out.println(
						"[TC_AND_VI_SUB_097] - Verify that for Vi user following fields must be hidden in My Subscription\r\n"
								+ " 1. Plan Price to be hidden; The space will remain blank on screen\r\n"
								+ " 2. Payment mode to be hidden\r\n"
								+ " 3. Plan Expiry date should be hidden; User should not see the line item on plan card\r\n"
								+ " 4. 'Browse All Packs' should be hidden");
			}
			if (userType.equalsIgnoreCase("ClassicUser")) {
				extent.HeaderChildNode(
						"[TC_AND_VI_SUB_036] - Verify that for Vi user following fields must be hidden in My Subscription\r\n"
								+ " 1. Plan Price to be hidden; The space will remain blank on screen\r\n"
								+ " 2. Payment mode to be hidden\r\n"
								+ " 3. Plan Expiry date should be hidden; User should not see the line item on plan card\r\n"
								+ " 4. 'Browse All Packs' should be hidden");
				System.out.println(
						"[TC_AND_VI_SUB_036] - Verify that for Vi user following fields must be hidden in My Subscription\r\n"
								+ " 1. Plan Price to be hidden; The space will remain blank on screen\r\n"
								+ " 2. Payment mode to be hidden\r\n"
								+ " 3. Plan Expiry date should be hidden; User should not see the line item on plan card\r\n"
								+ " 4. 'Browse All Packs' should be hidden");
			}

			waitTime(5000);
			click(AMDMoreMenu.objMySubscription, "My Subscription Screen");
			if (verifyElementIsNotDisplayed(AMDMySubscriptionPage.objPaymentText)) {
				logger.info("Plan Price Text is Not displayed for Vi user");
				extent.extentLoggerPass("Plan Price ", "Plan Price Text is Not displayed for Vi user");
			} else {
				logger.error("Plan Price Text is displayed for Vi user");
				extent.extentLoggerFail("Plan price", "Plan Price Text is displayed for Vi user");

			}
			if (verifyElementIsNotDisplayed(AMDMySubscriptionPage.objPaymentMode)) {
				logger.info("Plan Price Text is Not displayed for Vi user");
				extent.extentLoggerPass("Plan Price ", "Plan Price Text is Not displayed for Vi user");
			} else {
				logger.error("Plan Price Text is displayed for Vi user");
				extent.extentLoggerFail("Plan price", "Plan Price Text is displayed for Vi user");

			}
			if (verifyElementIsNotDisplayed(AMDMySubscriptionPage.objExpiryInfo)) {
				logger.info("Pack Expiry is Not displayed for Vi user");
				extent.extentLoggerPass("Pack Expiry", "Pack Expiry is Not displayed for Vi user");
			} else {
				logger.error("Pack Expiryt is displayed for Vi user");
				extent.extentLoggerFail("Pack Expiry", "Pack Expiry is displayed for Vi user");

			}
			if (verifyElementIsNotDisplayed(AMDMySubscriptionPage.objBrowseAllPack)) {
				logger.info("Browse All Pack is Not displayed for Vi user");
				extent.extentLoggerPass("Browse All Pack", "Browse All Pack is Not displayed for Vi user");
			} else {
				logger.error("Browse All Pack is displayed for Vi user");
				extent.extentLoggerFail("Browse All Pack", "Browse All Pack is displayed for Vi user");

			}
			waitTime(2000);

			Back(1);
		}
	}
/**
 * @note this method is used for validating mY transaction screen 
 * @param Keyword
 * @throws Exception
 */
	public void vi_MyTransactionsOption(String Keyword) throws Exception {

		if (userType.equalsIgnoreCase("VIPUser") || userType.equalsIgnoreCase("ClassicUser")) {
			if (userType.equalsIgnoreCase("VIPUser")) {
				extent.HeaderChildNode(
						"[TC_AND_VI_SUB_098] - Verify that Vi user should get 'My Transactions' option under More screen with Blank Payment mode & '0' pack price");
				System.out.println(
						"[TC_AND_VI_SUB_098] - Verify that Vi user should get 'My Transactions' option under More screen with Blank Payment mode & '0' pack price");
			}
			if (userType.equalsIgnoreCase("ClassicUser")) {
				extent.HeaderChildNode(
						"[TC_AND_VI_SUB_037] - Verify that Vi user should get 'My Transactions' option under More screen with Blank Payment mode & '0' pack price");

				System.out.println(
						"[TC_AND_VI_SUB_037] - Verify that Vi user should get 'My Transactions' option under More screen with Blank Payment mode & '0' pack price");
			}

			waitTime(2000);
			verifyElementPresentAndClick(AMDMoreMenu.objMyTransactions, "My Transaction Screen");
			String mode = getText(AMDMySubscriptionPage.objMyTransPaymentMode);
			if (mode.contains("-") || mode.contains(" ")) {
				logger.info("Payment mode in My Transaction screen is blank for Vi User");
				extent.extentLoggerPass("Have a Prepaid Code",
						"Payment mode in My Transaction screen is blank for Vi User");
			} else {
				logger.error("Payment mode in My Transaction screen is not blank for Vi User");
				extent.extentLoggerFail("Have a Prepaid Code",
						"Payment mode in My Transaction screen is not blank for Vi User");
			}
			String plan = getText(AMDMySubscriptionPage.objMyTransPlanPrice);
			if (plan.contains("0")) {
				logger.info("Payment mode in My Transaction screen is blank for Vi User");
				extent.extentLoggerPass("Have a Prepaid Code",
						"Payment mode in My Transaction screen is blank for Vi User");
			} else {
				logger.error("Payment mode in My Transaction screen is not blank for Vi User");
				extent.extentLoggerFail("Have a Prepaid Code",
						"Payment mode in My Transaction screen is not blank for Vi User");
			}

		}
	}
/**
 * @note this methos is used for validating Have a prepaid code option.
 * @param Keyword
 * @throws Exception
 */
	public void vi_HaveAPrepaidCodeOption(String Keyword) throws Exception {
		if (userType.equalsIgnoreCase("VIPUser") || userType.equalsIgnoreCase("ClassicUser")) {
			if (userType.equalsIgnoreCase("VIPUser")) {
				extent.HeaderChildNode(
						"TC_AND_VI_SUB_099] -Verify that Vi user should not get 'Have a Prepaid Code' option under More screen");
				System.out.println(
						"TC_AND_VI_SUB_099] - Verify that Vi user should not get 'Have a Prepaid Code' option under More screen");
			}
			if (userType.equalsIgnoreCase("ClassicUser")) {
				extent.HeaderChildNode(
						"TC_AND_VI_SUB_038] -Verify that Vi user should not get 'Have a Prepaid Code' option under More screen");
				System.out.println(
						"TC_AND_VI_SUB_038] -Verify that Vi user should not get 'Have a Prepaid Code' option under More screen");
			}
			waitTime(2000);
			if (verifyElementIsNotDisplayed(AMDMoreMenu.objHaveaPrepaidCode)) {
				logger.info("Have a Prepaid code is hidden for Vi User");
				extent.extentLoggerPass("Have a Prepaid Code", "Have a Prepaid code is hidden for Vi User");
			} else {
				logger.error("Have a Prepaid code is displayed for Vi User");
				extent.extentLoggerFail("Have a Prepaid Code", "Have a Prepaid code is displayed for Vi User");
			}
			waitTime(2000);
		}
	}
/**
 * @note this method is used to verify Logout option in more menu
 * @param Keyword
 * @throws Exception
 */
	public void vi_LogoutVisibility(String Keyword) throws Exception {

		if (userType.equalsIgnoreCase("VIPUser") || userType.equalsIgnoreCase("ClassicUser")) {
			if (userType.equalsIgnoreCase("VIPUser")) {
				extent.HeaderChildNode(
						"[TC_AND_VI_SUB_100] - Verify that Vi user should get 'Logout' option under More screen");
				System.out.println(
						"[TC_AND_VI_SUB_100] - Verify that Vi user should get 'Logout' option under More screen");
			}
			if (userType.equalsIgnoreCase("ClassicUser")) {
				extent.HeaderChildNode(
						"[TC_AND_VI_SUB_039] - Verify that Vi user should get 'Logout' option under More screen");
				System.out.println(
						"[TC_AND_VI_SUB_039] - Verify that Vi user should get 'Logout' option under More screen");
			}

			Swipe("UP", 2);
			verifyElementPresent(AMDMoreMenu.objLogout, "Logout option");

		}
	}
/**
 * @note this method is used to Verify that Authenticate option is hidden for Vi user both in More & Settings screen.
 * @param Keyword
 * @throws Exception
 */
	public void vi_AuthenticateOption(String Keyword) throws Exception {// 2
		if (userType.equalsIgnoreCase("VIPUser") || userType.equalsIgnoreCase("ClassicUser")) {
			if (userType.equalsIgnoreCase("VIPUser")) {
				extent.HeaderChildNode(
						"TC_AND_VI_SUB_102] - Verify that Authenticate option is hidden for Vi user both in More & Settings screen");
				System.out.println(
						"TC_AND_VI_SUB_102] - Verify that Authenticate option is hidden for Vi user both in More & Settings screen");
			}
			if (userType.equalsIgnoreCase("ClassicUser")) {
				extent.HeaderChildNode(
						"TC_AND_VI_SUB_041] -Verify that Authenticate option is hidden for Vi user both in More & Settings screen");
				System.out.println(
						"TC_AND_VI_SUB_041] -Verify that Authenticate option is hidden for Vi user both in More & Settings screen");
			}
			Swipe("UP", 1);
			if (verifyElementIsNotDisplayed(AMDSettingsScreen.objAuthenticateScreen)) {
				logger.info("Authentication screen  is not displayed in Moremenu");
				extent.extentLoggerPass("Authentication screen", "Authentication screen  is not displayed in Moremenu");
			} else {
				logger.error("Authentication screen  is displayed in Moremenu for Vi User");
				extent.extentLoggerFail("Authentication screen", "Have a Prepaid code is displayed for Vi User");

			}

			click(AMDMoreMenu.objSettings, "Settings option");
			waitTime(5000);
			Swipe("UP", 1);
			if (verifyElementIsNotDisplayed(AMDSettingsScreen.objAuthenticateScreen)) {
				logger.info("Authentication screen  is not displayed in Settings Screen");
				extent.extentLoggerPass("Authentication screen",
						"Authentication screen  is not displayed in Settings Screen");
			} else {
				logger.error("Authentication screen  is displayed in Settings screen for Vi User");
				extent.extentLoggerFail("Authentication screen",
						"Authentication screen  is displayed in Settings screen for Vi User");

			}
			Back(1);
		}
	}
/**
 * @note this method is used to Verify that Vi user Profile must be Visible and Non-tappable,
 * @param Keyword
 * @throws Exception
 */
	public void vi_Profile_Visibility(String Keyword) throws Exception {// 2
		if (userType.equalsIgnoreCase("VIPUser") || userType.equalsIgnoreCase("ClassicUser")) {
			if (userType.equalsIgnoreCase("VIPUser")) {
				extent.HeaderChildNode(
						"[TC_AND_VI_SUB_101] [TC_AND_VI_SUB_094] - Verify that Vi user Profile must be Visible and Non-tappable, Verify that Vi user Profile must be Visible and Non-tappable , Verify that there is no Set Password, Change Password and Forgot Password option displayed in My Profile for VIP user");
				System.out.println(
						"[TC_AND_VI_SUB_101] [TC_AND_VI_SUB_094] - Verify that Vi user Profile must be Visible and Non-tappable, Verify that Vi user Profile must be Visible and Non-tappable , Verify that there is no Set Password, Change Password and Forgot Password option displayed in My Profile for VIP user");
			}
			if (userType.equalsIgnoreCase("ClassicUser")) {
				extent.HeaderChildNode(
						"[TC_AND_VI_SUB_033] [TC_AND_VI_SUB_040] - Verify that Vi user Profile must be Visible and Non-tappable, Verify that Vi user Profile must be Visible and Non-tappable , Verify that there is no Set Password, Change Password and Forgot Password option displayed in My Profile for VIP user");
				System.out.println(
						"[TC_AND_VI_SUB_033] [TC_AND_VI_SUB_040] - Verify that Vi user Profile must be Visible and Non-tappable, Verify that Vi user Profile must be Visible and Non-tappable , Verify that there is no Set Password, Change Password and Forgot Password option displayed in My Profile for VIP user");
			}
			Swipe("DOWN", 1);
			verifyElementPresent(AMDMoreMenu.objProfile, "Profile section");
			click(AMDMoreMenu.objProfile, "Profile Section");

			if (verifyElementIsNotDisplayed(AMDProfileScreen.objChangePwdBtn)) {
				logger.info("Profile screen is Non tappable");
				extent.extentLoggerPass("Parental Pin", "Profile screen is Non tappable");
			} else {
				logger.error("Profile screen is tappable");
				extent.extentLoggerFail("Parental Pin", "Profile screen is tappable");
			}
		}
	}
/**
 * @note this method is used for verifying the PC feature as a VI user.
 * @param userType
 * @throws Exception
 */
	public void vi_ParentalControlPopupPinValidation(String userType) throws Exception {
		if (userType.equalsIgnoreCase("VIPUser") || userType.equalsIgnoreCase("ClassicUser")) {
			if (userType.equalsIgnoreCase("VIPUser")) {
				extent.HeaderChildNode(
						"[TC_AND_VI_SUB_092] - Verify that Vi user is able to set & use all the Parental Control feature");
				System.out.println(
						"[TC_AND_VI_SUB_092] - Verify that Vi user is able to set & use all the Parental Control feature");
			}
			if (userType.equalsIgnoreCase("ClassicUser")) {
				extent.HeaderChildNode(
						"[TC_AND_VI_SUB_031] - Verify that Vi user is able to set & use all the Parental Control feature");
				System.out.println(
						"[TC_AND_VI_SUB_031] - Verify that Vi user is able to set & use all the Parental Control feature");
			}

			vi_ParentalPinPopupValidation(AMDMoreMenu.Restrict18PlusAboveContent, "Restrict A 18+ Content");
			Utilities.relaunch = true; // Clear App Data on First Launch
			new CommandBase("Vodafone");
			init();
			waitTime(20000);
			vi_Search("Auto Shankar");
			vi_ParentalPopupValidation();

			vi_ParentalPinPopupValidation(AMDMoreMenu.Restrict16AboveContent, "Restrict A 16+ Content");
			relaunch(false);
			waitTime(10000);
			click(AMDViPage.objLaunchViMoviesTV, "Launch Vi");
			waitTime(20000);
			vi_Search("Bebaakee");
			vi_ParentalPopupValidation();

			vi_ParentalPinPopupValidation(AMDMoreMenu.Restrict13PlusAboveContent, "Restrict A 13+ Content");
			relaunch(false);
			waitTime(10000);
			click(AMDViPage.objLaunchViMoviesTV, "Launch Vi");
			waitTime(20000);
			vi_Search("Dhoop Ki Dheewar");
			vi_ParentalPopupValidation();

			vi_ParentalPinPopupValidation(AMDMoreMenu.Restrict7AboveContent, "Restrict A 7+ Content");
			relaunch(false);
			waitTime(10000);
			click(AMDViPage.objLaunchViMoviesTV, "Launch Vi");
			waitTime(20000);
			vi_Search("Hero No. 1");
			vi_ParentalPopupValidation();

			vi_ParentalPinPopupValidation(AMDMoreMenu.objRestrictAllContent, "Restrict All Content");
			relaunch(false);
			waitTime(10000);
			click(AMDViPage.objLaunchViMoviesTV, "Launch Vi");
			waitTime(20000);
			vi_Search("Gattimela");
			vi_ParentalPopupValidation();
		}
	}
/**
 * @note this method is used for Login to Vodafone app
 * @param userType
 * @param searchcontent
 * @throws Exception
 */
	public void loginVi(String userType, String searchcontent) throws Exception {
		extent.HeaderChildNode("Login to Vodafone app");
		waitTime(20000);

		verifyElementPresentAndClick(AMDViPage.objSearchIcon, "Search Icon ");

		verifyElementPresentAndClick(AMDViPage.objSearchBox, "Search Box");

		type(AMDViPage.objSearchBox, searchcontent + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDViPage.objFirstSearchResult1(searchcontent), "Search result");

		verifyElementPresentAndClick(AMDViPage.objEnterYourMobileNumberTextbox, "Enter Your Mobile Number Text box");

		type(AMDViPage.objEnterYourMobileNumberTextbox, "9620001568", "Search box");

		click(AMDViPage.objContinue, "Continue Button");
		waitTime(20000);

//		getSugarBoxOTP();

	}
/**
 * @note this method is used for deeplink validation as  a VI user
 * @param pDeeplink
 */
	public void deepLink_Vi(String pDeeplink) {

//		String appPackageName = getParameterFromXML("appPackageName");
		String appPackageName = "com.graymatrix.did";
		try {
			getDriver().close();
			waitTime(5000);
			String command = null;
			Instant startTime = Instant.now();
			logger.info("Start time: " + startTime);
			extent.extentLogger("Start Time", "Start time: " + startTime);
			if (pDeeplink.equalsIgnoreCase("ClassicUser")) {
				command = "adb shell am start -W -a android.intent.action.VIEW -d  \"https://www.zee5.com/zee5originals/details/abhay/0-6-1298/ep-1-brain-soup/0-1-387043?tag=e063b92223855d88315250f998517fef\"";
			} else if (pDeeplink.equalsIgnoreCase("VIPUser")) {
				command = "adb shell am start -W -a android.intent.action.VIEW -d  \"https://www.zee5.com/zee5originals/details/abhay/0-6-1298/ep-2-one-legged-skeleton/0-1-387070\"";

			}
			Process process = Runtime.getRuntime().exec(command);
			new BufferedReader(new InputStreamReader(process.getInputStream()));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
/**
 * @note this method is used for verifying login with configured deeplink.
 * @param userType
 * @throws Exception
 */
	public void vi_Deeplink(String userType) throws Exception {
		if (userType.equalsIgnoreCase("VIPUser") || userType.equalsIgnoreCase("ClassicUser")) {
			if (userType.equalsIgnoreCase("VIPUser")) {
				extent.HeaderChildNode(
						"[TC_AND_VI_SUB_76]- Verify that Classic user is able to login with configured custom Deeplinks");
				System.out.println(
						"[TC_AND_VI_SUB_76]- Verify that Classic user is able to login with configured custom Deeplinks");
			}
			if (userType.equalsIgnoreCase("ClassicUser")) {
				extent.HeaderChildNode(
						"[TC_AND_VI_SUB_15]- Verify that Classic user is able to login with configured custom Deeplinks");
				System.out.println(
						"[TC_AND_VI_SUB_15]- Verify that Classic user is able to login with configured custom Deeplinks");
			}
			waitTime(5000);
			navigateBackToHomeLandingScreen();
			deepLink_Vi(userType);

		}
	}
/**
 * @note this method is used for Verifying that Vi user is able to Login to Vi app with a valid Vi number
 * @param userType
 * @param searchcontent
 * @throws Exception
 */
	public void loginViAppWithValidViNumber(String userType, String searchcontent) throws Exception {

		if (userType.equalsIgnoreCase("VIPUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_074]Verify that Vi user is able to Login to Vi app with a valid Vi number");
			System.out.println(
					"[TC_AND_VI_SUB_074]Verify that Vi user is able to Login to Vi app with a valid Vi number");
		} else if (userType.equalsIgnoreCase("ClassicUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_013] Verify that Vi user is able to Login to Vi app with a valid Vi number");
			System.out.println(
					"[TC_AND_VI_SUB_013] Verify that Vi user is able to Login to Vi app with a valid Vi number");
		}
		waitTime(20000);

		verifyElementPresentAndClick(AMDViPage.objSearchIcon, "Search Icon ");

		verifyElementPresentAndClick(AMDViPage.objSearchBox, "Search Box");

		type(AMDViPage.objSearchBox, searchcontent + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDViPage.objFirstSearchResult1(searchcontent), "Search result");
		String vipUser = getParameterFromXML("VIPUserMobileNumber");

		verifyElementPresentAndClick(AMDViPage.objEnterYourMobileNumberTextbox, "Enter Your Mobile Number Text box");
//		9072461731
		type(AMDViPage.objEnterYourMobileNumberTextbox, vipUser, "Search box");

		click(AMDViPage.objContinue, "Continue Button");
		waitForElementDisplayed(AMDPlayerScreen.objcontentTitleInconsumptionPage, 60);
		verifyElementPresent(AMDPlayerScreen.objcontentTitleInconsumptionPage, "Content Title In consumption Page");

	}
/**
 * @note this method is used for verifying that Vi user sees an “Back to Vi Movies & TV\\\" CTA below the player when Vi user navigates from Vi app only
 * @param userType
 * @throws Exception
 */
	public void backtoVimovieCTAValidation(String userType) throws Exception {

		if (userType.equalsIgnoreCase("VIPUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_080], Verify that Vi user sees an “Back to Vi Movies & TV\\\" CTA below the player when Vi user navigates from Vi app only");
			System.out.println(
					"[TC_AND_VI_SUB_080], Verify that Vi user sees an “Back to Vi Movies & TV\\\\\\\" CTA below the player when Vi user navigates from Vi app only");
		} else if (userType.equalsIgnoreCase("ClassicUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_019], Verify that Vi user sees an “Back to Vi Movies & TV\\\\\\\" CTA below the player when Vi user navigates from Vi app only");
			System.out.println(
					"[TC_AND_VI_SUB_019], Verify that Vi user sees an “Back to Vi Movies & TV\\\\\\\\\\\\\\\" CTA below the player when Vi user navigates from Vi app only");
		}
		if (verifyElementPresent(AMDViPage.objBackToViMovie, "Back To Vi Movie & TV")) {
			logger.info("Back To Vi Movie & TV Option is displayed");
			extentLoggerPass("Back To Vi Movie & TV", "Back To Vi Movie & TV Option is displayed");
		} else {
			logger.info("Back To Vi Movie & TV Option is not displayed");
			extentLogger("Back To Vi Movie & TV", "Back To Vi Movie & TV Option is not displayed");
		}

		if (userType.equalsIgnoreCase("VIPUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_081], Verify that tapping on “Back to Vi Movies & TV\" CTA below the player, Vi user is redirected to Vi MTV app");
			System.out.println(
					"[TC_AND_VI_SUB_081], Verify that tapping on “Back to Vi Movies & TV\" CTA below the player, Vi user is redirected to Vi MTV app");
		} else if (userType.equalsIgnoreCase("ClassicUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_020], Verify that tapping on “Back to Vi Movies & TV\" CTA below the player, Vi user is redirected to Vi MTV app");
			System.out.println(
					"[TC_AND_VI_SUB_020], Verify that tapping on “Back to Vi Movies & TV\\\" CTA below the player, Vi user is redirected to Vi MTV app");
		}
		click(AMDViPage.objBackToViMovie, "Back To Vi Movie & TV ");

		if (verifyElementPresent(AMDViPage.objViLoGO, "Vi LoGo")) {
			logger.info("Vi movie & tv Logo is displayed when ever click on Back To Vi Movie & TV Option");
			extentLoggerPass("", "Vi movie & tv Logo is displayed when ever click on Back To Vi Movie & TV Option");
		} else {
			logger.info("Vi movie & tv Logo is not displayed when ever click on Back To Vi Movie & TV Option");
			extentLogger("", "Vi movie & tv Logo is not displayed when ever click on Back To Vi Movie & TV Option");
		}
	}
/**
 * @note this method is used to verify navigation from Zee5 app to vi app.
 * @param userType
 * @throws Exception
 */
	public void LaunchViAndTvZee5App(String userType) throws Exception {

		if (userType.equalsIgnoreCase("VIPUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_084], Verify that tapping on “Launch Vi Movies & TV\\\" CTA from the Blocker screen, Vi user is redirected to Vi MTV app");
			System.out.println(
					"[TC_AND_VI_SUB_084], Verify that tapping on “Launch Vi Movies & TV\" CTA from the Blocker screen, Vi user is redirected to Vi MTV app");
		} else if (userType.equalsIgnoreCase("ClassicUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_023], Verify that tapping on “Launch Vi Movies & TV\\\" CTA from the Blocker screen, Vi user is redirected to Vi MTV app");
			System.out.println(
					"[TC_AND_VI_SUB_023], Verify that tapping on “Launch Vi Movies & TV\\\\\\\" CTA from the Blocker screen, Vi user is redirected to Vi MTV app");
		}
		relaunch(false);
		if (verifyElementDisplayed(AMDViPage.objLaunchViMoviesTV)) {
			logger.info("Launch Vi Movies & TV is displayed when ever ReLaunch Zee5 App");
			extentLoggerPass("", "Launch Vi Movies & TV is displayed when ever ReLaunch Zee5 App");
		} else {
			logger.info("Launch Vi Movies & TV is not displayed when ever  ReLaunch Zee5 App");
			extentLogger("", "Launch Vi Movies & TV is not displayed when ever  ReLaunch Zee5 App");
		}
		click(AMDViPage.objLaunchViMoviesTV, "Launch Vi Movies & TV");
		if (verifyElementDisplayed(AMDViPage.objViLoGO)) {
			logger.info("Vi movie & tv Logo is displayed when ever click on Back To Vi Movie & TV Option");
			extentLoggerPass("", "Vi movie & tv Logo is displayed when ever click on Back To Vi Movie & TV Option");
		} else {
			logger.info("Vi movie & tv Logo is not displayed when ever click on Back To Vi Movie & TV Option");
			extentLogger("", "Vi movie & tv Logo is not displayed when ever click on Back To Vi Movie & TV Option");
		}
	}
/**
 * @note this method is used to verify that tapping on other content Back to Vi Movies & TV banner below player should not be displayed.
 * @param userType
 * @param searchcontent
 * @throws Exception
 */
	public void backToViMoviesTVCTAWillNoLongerBeAvailable(String userType, String searchcontent) throws Exception {

		if (userType.equalsIgnoreCase("VIPUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_083], Verify that tapping any other content than the existing one, the direct back option “Back to Vi Movies & TV\\\" CTA will no longer be available");
			System.out.println(
					"[TC_AND_VI_SUB_083], Verify that tapping any other content than the existing one, the direct back option “Back to Vi Movies & TV\" CTA will no longer be available");
		} else if (userType.equalsIgnoreCase("ClassicUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_022], Verify that tapping any other content than the existing one, the direct back option “Back to Vi Movies & TV\\\" CTA will no longer be available");
			System.out.println(
					"[TC_AND_VI_SUB_022], Verify that tapping any other content than the existing one, the direct back option “Back to Vi Movies & TV\\\\\\\" CTA will no longer be available");
		}
		verifyElementPresentAndClick(AMDViPage.objSearchIcon, "Search Icon ");

		verifyElementPresentAndClick(AMDViPage.objSearchBox, "Search Box");

		type(AMDViPage.objSearchBox, searchcontent + "\n", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDViPage.objFirstSearchResult1(searchcontent), "Search result");
		verifyElementPresentAndClick(AMDPlayerScreen.objcontentCard, "Content card");
		waitTime(3000);
		if (verifyElementIsNotDisplayed(AMDViPage.objBackToViMovie)) {
			logger.info("Back To Vi Movie & TV Option is not displayed");
			extentLogger("Back To Vi Movie & TV", "Back To Vi Movie & TV Option is not displayed");

		} else {
			logger.info("Back To Vi Movie & TV Option is displayed");
			extentLoggerPass("Back To Vi Movie & TV", "Back To Vi Movie & TV Option is displayed");
		}

	}
/**
 * @note this method is used for validating the exit mechanism for VI user.
 * @param userType
 * @throws Exception
 */
	public void clickingONBackButtonHomeScreenVerification(String userType) throws Exception {

		if (userType.equalsIgnoreCase("VIPUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_086], Verify that tapping device back button from the existing one, than Vi user should be navigated to Home screen");
			System.out.println(
					"[TC_AND_VI_SUB_086], Verify that tapping device back button from the existing one, than Vi user should be navigated to Home screen");
		} else if (userType.equalsIgnoreCase("ClassicUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_025], Verify that tapping device back button from the existing one, than Vi user should be navigated to Home screen");
			System.out.println(
					"[TC_AND_VI_SUB_025], Verify that tapping device back button from the existing one, than Vi user should be navigated to Home screen");
		}
		Back(1);
		if (verifyElementDisplayed(AMDHomePage.HomeIcon)) {
			logger.info("Home screen is displayed When ever click on Back Button ");
			extentLoggerPass("", "Home screen is displayed When ever click on Back Button ");
		} else {
			logger.info("Home screen is not displayed When ever click on Back Button ");
			extentLogger("", "Home screen is not displayed When ever click on Back Button ");
		}

		if (userType.equalsIgnoreCase("VIPUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_088], Verify that tapping device back button from Home screen should not get Exit popup");
			System.out.println(
					"[TC_AND_VI_SUB_088], Verify that tapping device back button from Home screen should not get Exit popup");
		} else if (userType.equalsIgnoreCase("ClassicUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_027], Verify that tapping device back button from Home screen should not get Exit popup");
			System.out.println(
					"[TC_AND_VI_SUB_027], Verify that tapping device back button from Home screen should not get Exit popup");
		}
		Back(1);
		if (verifyElementIsNotDisplayed(AMDHomePage.objAreYouSureYouWantExitZee5)) {
			logger.info(" Tapping device back button from Home screen should not get Exit popu ");
			extentLogger("", " Tapping device back button from Home screen should not get Exit popu ");

		} else {
			logger.info(" Tapping device back button from Home screen should get Exit popu ");
			extentLoggerPass("", " Tapping device back button from Home screen should get Exit popu ");
		}

		if (userType.equalsIgnoreCase("VIPUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_087], Verify that tapping device back button from Home screen should be navigated to Vi app");
			System.out.println(
					"[TC_AND_VI_SUB_088], Verify that tapping device back button from Home screen should be navigated to Vi app");
		} else if (userType.equalsIgnoreCase("ClassicUser")) {
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_026], Verify that tapping device back button from Home screen should be navigated to Vi app");
			System.out.println(
					"[TC_AND_VI_SUB_026], Verify that tapping device back button from Home screen should be navigated to Vi app");
		}
		waitForElementDisplayed(AMDViPage.objViLoGO, 60);
		if (verifyElementPresent(AMDViPage.objViLoGO, "Vi LoGo")) {
			logger.info("Vi movie & tv Logo is displayed when ever click on Back To Vi Movie & TV Option");
			extentLoggerPass("", "Vi movie & tv Logo is displayed when ever click on Back To Vi Movie & TV Option");
		} else {
			logger.info("Vi movie & tv Logo is not displayed when ever click on Back To Vi Movie & TV Option");
			extentLogger("", "Vi movie & tv Logo is not displayed when ever click on Back To Vi Movie & TV Option");
		}
	}
/**
 * @note this method is used for relaunching the application for verifying blocker screen.
 * @param userType
 * @throws Exception
 */
	public void relaunchZee5AppAndVerifyBlockerScreen(String userType) throws Exception {
		extent.HeaderChildNode(
				"(TC_AND_VI_SUB_054), Verify that blocker screen is displayed post kill and relaunch the ZEE5 App.");
		System.out.println(
				"(TC_AND_VI_SUB_054), Verify that blocker screen is displayed post kill and relaunch the ZEE5 App.");

		relaunch(false);
		if (verifyElementDisplayed(AMDViPage.objLaunchViMoviesTV)) {
			logger.info("Launch Vi Movies & TV is displayed when ever ReLaunch Zee5 App");
			extentLoggerPass("", "Launch Vi Movies & TV is displayed when ever ReLaunch Zee5 App");
		} else {
			logger.info("Launch Vi Movies & TV is not displayed when ever  ReLaunch Zee5 App");
			extentLogger("", "Launch Vi Movies & TV is not displayed when ever  ReLaunch Zee5 App");
		}
	}
/**
 * @note this method is used for verification of blocker screen for newly registered user 
 * @param userType
 * @throws Exception
 */
	public void killAndRelaunchBlockerScreenHomescreenShouldBeDisplayed(String userType) throws Exception {

		extent.HeaderChildNode(
				"(TC_AND_VI_SUB_058), (TC_AND_VI_SUB_069), Verify that blocker screen shouldn't be displayed for newly register user post kill and relaunch the ZEE5 App instead home landing screen should be displated");
		System.out.println(
				"(TC_AND_VI_SUB_058),Verify that blocker screen shouldn't be displayed for newly register user post kill and relaunch the ZEE5 App instead home landing screen should be displated");

		relaunch(false);

		if (verifyElementIsNotDisplayed(AMDViPage.objLaunchViMoviesTV)) {
			logger.info("Launch Vi Movies & TV is not displayed when ever Kill and  Launch Zee5 App");
			extentLogger("", "Launch Vi Movies & TV is not displayed when ever Kill and Launch Zee5 App");
		} else {
			logger.info("Launch Vi Movies & TV is displayed when ever Kill and Launch Zee5 App");
			extentLoggerPass("", "Launch Vi Movies & TV is displayed when ever Kill and Launch Zee5 App");

		}

		if (verifyElementDisplayed(AMDHomePage.HomeIcon)) {
			logger.info("Home screen is displayed When ever click on Back Button ");
			extentLoggerPass("", "Home screen is displayed When ever click on Back Button ");
		} else {
			logger.info("Home screen is not displayed When ever click on Back Button ");
			extentLogger("", "Home screen is not displayed When ever click on Back Button ");
		}

	}
/**
 * @note this method is used for verifying navigation to make payment screen. 
 * @param userType
 * @throws Exception
 */
	public void makePaymentScreen(String userType) throws Exception {
		extent.HeaderChildNode(
				"(TC_AND_VI_SUB_072),Verify that user is navigating to Make Payment screen after registering the app.");
		System.out.println(
				"(TC_AND_VI_SUB_072),Verify that user is navigating to Make Payment screen after registering the app.");

		verifyElementPresentAndClick(AMDHomePage.objSubscribeIcon, "Buyplan CTA");
		waitTime(3000);
		verifyElementPresentAndClick(AMDSubscibeScreen.objContinueBtn, "Continue Icon");
		waitTime(10000);
		waitForElementDisplayed(AMDPlayerScreen.objMakePayment, 120);
		if (verifyElementExist(AMDPlayerScreen.objMakePayment, "Payment Page")) {
			logger.info("Payment screen is displayed");
			extentLoggerPass("", "Payment screen is displayed");
		} else {
			logger.info("Payment screen is not displayed");
			extentLogger("", "Payment screen is not displayed");
		}
	}

//public void BuyPlanCTALandingScreenHeader(String userType) throws Exception {
//	
//extent.HeaderChildNode("(TC_AND_VI_SUB_061),Verify that Buy Plan cta displayed in Landing screen header after register the app");
//System.out.println("(TC_AND_VI_SUB_061),Verify that Buy Plan cta displayed in Landing screen header after register the app");
//
//	
//	if (verifyElementDisplayed(AMDHomePage.objSubscribeIcon)) {
//		logger.info("Buy Plan tag is displayed  in Landing screen header");
//		extentLoggerPass("Buy Plan Tag", "Buy Plan tag is displayed  in Landing screen header");
//	} else {
//		logger.error("Buy Plan tag is not displayed in Landing screen header");
//		extentLoggerFail("Get premium Tag", "Buy Plan tag is not displayed in Landing screen header");
//	}
//
//}
	/**
	 * @note this method is used for verifying the Buy Plan cta on carousel banner after registering to the app.
	 * @param userType
	 * @throws Exception
	 */
	public void BuyPlanCTAcarousel(String userType) throws Exception {
		extent.HeaderChildNode(
				"(TC_AND_VI_SUB_062),Verify thet Buy Plan cta displayed in Carousel banner for Premium contents after register the app");
		System.out.println(
				"(TC_AND_VI_SUB_062),Verify thet Buy Plan cta displayed in Carousel banner for Premium contents after register the app");

		if (verifyElementDisplayed(AMDHomePage.objPremiumBtn)) {
			logger.info("Buy Plan tag is displayed in Carousel banner");
			extentLoggerPass("Buy Plan Tag", "Buy Plan tag is displayed in Carousel banner");
		} else {
			logger.error("Buy Plan tag is not displayed in Carousel banner");
			extentLoggerFail("Get premium Tag", "Buy Plan tag is not displayed in Carousel banner");
		}

	}
/**
 * @note this method is used for verifying Buy plan cta below player in consumption screen for newly registered user.
 * @param userType
 * @throws Exception
 */
	public void buyPlanButtonBelowThePlayer(String userType) throws Exception {
		extent.HeaderChildNode(
				"(TC_AND_VI_SUB_063), Verify thet Buy Plan cta displayed below the Player for premium contents");
		System.out.println(
				"(TC_AND_VI_SUB_063), Verify thet Buy Plan cta displayed below the Player for premium contents");

		click(AMDHomePage.objPlayBtn, "Play CTA");
		waitTime(5000);
		if (verifyElementPresent(AMDPlayerScreen.objBuyNowCTABelowThePlayer, "BuyPlan CTA Below the player")) {
			logger.info("Buy Plan tag is displayed  Below the player");
			extentLoggerPass("Buy Plan Tag", "Buy Plan tag is displayed  Below the player");
		} else {
			logger.error("Buy Plan tag is not displayed  Below the player");
			extentLoggerFail("Get premium Tag", "Buy Plan tag is not displayed  Below the player");
		}

	}
/**
 * @note this method is used for verifying thr SVOD contents playback when premium user loggs into via blocker screen.
 * @param userType
 * @throws Exception
 */
	public void svodContentsShouldBePlayed(String userType) throws Exception {
		extent.HeaderChildNode(
				"[TC_AND_VI_SUB_067], Verify that all svod contents should be played for premium logged in user from blocker screen");
		System.out.println(
				"(TC_AND_VI_SUB_063), Verify thet Buy Plan cta displayed below the Player for premium contents");

		verifyElementExist(AMDHomePage.objPlayBtn, "Play CTA");
		click(AMDHomePage.objPlayBtn, "Play CTA");
		waitTime(20000);
		if (checkElementExist(AMDPlayerScreen.objPlayerScreen, "Player screen")) {
			logger.info("Vi user is able to play premium content");
			extent.extentLoggerPass("Player", "Vi user is able to play premium content");
		} else {
			logger.info("Vi user is not able to play premium content");
			extent.extentLoggerFail("Player", "Vi user is not able to play premium content");
		}

		if (verifyElementPresent(AMDPlayerScreen.objBuyNowCTABelowThePlayer, "BuyPlan CTA Below the player")) {
			logger.info("Buy Plan tag is displayed  Below the player");
			extentLoggerPass("Buy Plan Tag", "Buy Plan tag is displayed  Below the player");
		} else {
			logger.error("Buy Plan tag is not displayed  Below the player");
			extentLoggerFail("Get premium Tag", "Buy Plan tag is not displayed  Below the player");
		}

	}
/**
 * @note this method is used for verifying the BUY Plan cta displayed on the player for premium contents which doesnt have trailer.
 * @param userType
 * @throws Exception
 */
	public void buyPlanCTAOnThePlayer(String userType) throws Exception {
		extent.HeaderChildNode(
				"(TC_AND_VI_SUB_064), Verify that Buy Plan cta displayed on Player for premium contents which doesnot have trailer");
		System.out.println(
				"(TC_AND_VI_SUB_064), Verify that Buy Plan cta displayed on Player for premium contents which doesnot have trailer");

		waitForElementDisplayed(AMDPlayerScreen.objBuyPlanOnThePlayer, 160);
		if (verifyElementPresent(AMDPlayerScreen.objBuyPlanOnThePlayer, "BuyPlan CTA ON the player")) {
			logger.info("Buy Plan tag is displayed  ON the player");
			extentLoggerPass("Buy Plan Tag", "Buy Plan tag is displayed  ON the player");
		} else {
			logger.error("Buy Plan tag is not displayed  ON the player");
			extentLoggerFail("Get premium Tag", "Buy Plan tag is not displayed  ON the player");
		}

	}
/**
 * @note this method is used for setting parental control
 * @param userTYpe
 * @throws Exception
 */
	public void parntalControl(String userTYpe) throws Exception {
		relaunch(false);
		loginThrowEmail(userType);
		String Password = null;
		Password = getParameterFromXML("ParentalControlPassword");
		verifyElementPresentAndClick(AMDHomePage.objMoreMenuBtn, "More Menu");
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings");
		verifyElementPresent(AMDSettingsScreen.objParentalControloption, "Parental Control option");

		Swipe("UP", 1);

		verifyElementPresentAndClick(AMDSettingsScreen.objParentalControloption, "Parental Control option");
		verifyElementPresentAndClick(AMDSettingsScreen.objPasswordfield, "Password field");
		waitTime(5000);
		type(AMDSettingsScreen.objPasswordfield, Password, "Enter Password");
		hideKeyboard();
		verifyElementPresentAndClick(AMDSettingsScreen.objContinueCTAVerifyAccount, "Continue Button Set PIN page");
		waitTime(5000);
		verifyElementPresentAndClick(AMDSettingsScreen.objRestrictAllContent, "Restrict All Content");
		verifyElementPresentAndClick(AMDSettingsScreen.objContinueCTA, "Continue CTA");

		verifyElementPresentAndClick(AMDSettingsScreen.objSetPIN, "Set PIN Popup");
		verifyElementPresentAndClick(AMDSettingsScreen.objEnterPINTextFeiled, "Enter PIN");
		type(AMDSettingsScreen.objEnterPINTextFeiled, "1122", "Enter PIN");
		hideKeyboard();
		verifyElementPresentAndClick(AMDSettingsScreen.objContinueButtonSetPINpage, "Continue Button Set PIN page");
		if (verifyElementExist(AMDSettingsScreen.objParentalControlSettingsAppliedSuccessfully,
				"Parental control settings applied successfully")) {
			logger.info("Continue CTA is functional and user is able to set parental pin successfully");
			extent.extentLoggerPass("", "Continue CTA is functional and user is able to set parental pin successfully");
		} else {
			logger.error("Continue CTA is NOT functional and user is Unable to set parental pin successfully");
			extent.extentLoggerFail("",
					"Continue CTA is NOT functional and user is Unable to set parental pin successfully");
		}
		verifyElementPresentAndClick(AMDSettingsScreen.objDoneButton, "Done Button on Success page");

		verifyElementPresentAndClick(AMDSettingsScreen.objBackButton, "Back Button");
		verifyElementPresentAndClick(AMDHomePage.objHomeTab, "Home tab");
		verifyElementPresentAndClick(AMDHomePage.objPlayBtn, "Play Button on carousel");
		if (checkElementExist(AMDConsumptionScreen.objEnterYour4DigitPIN)) {
			logger.info("Enter your 4-digit PIN parental pop up is displayed on playing the content");
			extent.extentLoggerPass("", "Enter your 4-digit PIN parental pop up is displayed on playing the content");
		} else {
			logger.error("Enter your 4-digit PIN parental pop up is NOT displayed on playing the content");
			extent.extentLoggerFail("",
					"Enter your 4-digit PIN parental pop up is NOT displayed on playing the content");
		}

	}
/**
 * @note this method is used for verifying the existing user is able to login from blocker screen.
 * @param userType
 * @throws Exception
 */
	public void loginThrowEmail(String userType) throws Exception {

		extent.HeaderChildNode("(TC_AND_VI_SUB_066),Verify that existing user is able to login from Blocker screen");
		System.out.println("(TC_AND_VI_SUB_066),Verify that existing user is able to login from Blocker screen");
//	relaunch(false);
		click(AMDViPage.obJLoginCTAVi, "Login CTA");
		waitTime(3000);

		verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
		type(AMDLoginScreen.objEmailIdField, "nagakartheek.dasareddy@gmail.com", "Email Field");
		verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
		verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
		type(AMDLoginScreen.objPasswordField, "123456", "Password field");
		hideKeyboard();
		verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
		waitTime(3000);

	}
/**
 * @note this methos is used for verifying the more options for premium logged in User
 * @param userType
 * @throws Exception
 */
	public void moreMenuShouldBeDisplayed(String userType) throws Exception {

		extent.HeaderChildNode(
				"[TC_AND_VI_SUB_068]  - Verify that telco More menu options should not be displayed for Premium logged in user instead complete More Menu should be displayed\r\n"
						+ "");
		System.out.println(
				"[TC_AND_VI_SUB_068]  - Verify that telco More menu options should not be displayed for Premium logged in user instead complete More Menu should be displayed\\r\\n");

		waitTime(2000);
		navigateBackToHomeLandingScreen();
		click(AMDHomePage.MoreMenuIcon, "More Menu tab");
		waitTime(2000);
		verifyElementPresent(AMDMoreMenu.objBuySubscription, "Buy plans Option");
		verifyElementPresent(AMDMoreMenu.objMySubscription, "My Subscription Option");
		verifyElementPresent(AMDMoreMenu.objMyTransactions, "My Transaction Option");
		verifyElementPresent(AMDMoreMenu.objWatchlist, "Watchlist Option");
		verifyElementPresent(AMDMoreMenu.objSettings, "Settings Option");
		verifyElementPresent(AMDMoreMenu.objInviteAFriend, "Invite a friend Option");
		verifyElementPresent(AMDMoreMenu.objAboutUs, "About us Option");
		verifyElementPresent(AMDMoreMenu.objHelpCentre, "Help centre Option");
		verifyElementPresent(AMDMoreMenu.objHaveaPrepaidCode, "Have a prepaid code  Option");
		Swipe("UP", 1);
		verifyElementPresent(AMDMoreMenu.objLogout, "Logout Option");
		verifyElementPresent(AMDMoreMenu.objTermsOfUse, "Terms of use option");
		verifyElementPresent(AMDMoreMenu.objPrivacyPolicy, "Privacy option");
		verifyElementPresent(AMDMoreMenu.objBuildVersion, "Build version section");
		verifyElementPresent(AMDMoreMenu.objGrievanceRedressalOption, "Grievance Redressal Option");

	}
/**
 * @note this method is used for ZEE5Vivalidation
 * @param userType
 * @throws Exception
 */
	public void zee5ViValidation(String userType) throws Exception {

		if (userType.equalsIgnoreCase("VIPUser") || userType.equalsIgnoreCase("ClassicUser")) {

			zeeApplicasterLoginVi(userType, "14 Phere");
			backtoVimovieCTAValidation(userType);
			LaunchViAndTvZee5App(userType);
			backToViMoviesTVCTAWillNoLongerBeAvailable(userType, "Dial 100");
			clickingONBackButtonHomeScreenVerification(userType);
		}

	}
/**
 * @note this method is used for content playback for clasic user
 * @param userType
 * @throws Exception
 */
	public void ViClassicuser(String userType) throws Exception {
		if (userType.equalsIgnoreCase("ClassicUser")) {
			relaunchZee5AppAndVerifyBlockerScreen(userType);
			loginThrowEmail(userType);
			svodContentsShouldBePlayed(userType);
			moreMenuShouldBeDisplayed(userType);
			killAndRelaunchBlockerScreenHomescreenShouldBeDisplayed(userType);
			makePaymentScreen(userType);

		}

	}
/**
 * @note this method is used for verifying VI user login with valid credential
 * @param LoginMethod
 * @param searchcontent
 * @throws Exception
 */
	public void zeeApplicasterLoginVi(String LoginMethod, String searchcontent) throws Exception {
		System.out.println("\nLogin to the App");

		switch (LoginMethod) {
		case "BasicDefaultUser":
//			extent.HeaderChildNode("Logged in as <b>BasicDefaultUser</b> User");
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_001] Verify that Vi user is able to Login to Vi app with a valid Vi number");
			System.out.println(
					"[TC_AND_VI_SUB_001] Verify that Vi user is able to Login to Vi app with a valid Vi number");

			verifyElementPresentAndClick(AMDViPage.objSearchIcon, "Search Icon ");

			verifyElementPresentAndClick(AMDViPage.objSearchBox, "Search Box");
			String basic = getParameterFromXML("DefaultUserMobileNumber");
			type(AMDViPage.objSearchBox, searchcontent + "\n", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDViPage.objFirstSearchResult1(searchcontent), "Search result");

			verifyElementPresentAndClick(AMDViPage.objEnterYourMobileNumberTextbox,
					"Enter Your Mobile Number Text box");

			type(AMDViPage.objEnterYourMobileNumberTextbox, basic, "Search box");

			click(AMDViPage.objContinue, "Continue Button");
			waitTime(20000);
			verifyElementPresent(AMDPlayerScreen.objcontentTitleInconsumptionPage, "Content Title In consumption Page");
//		
			break;

		case "ClassicUser":
//			extent.HeaderChildNode("Login as Classic User");
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_013] Verify that Vi user is able to Login to Vi app with a valid Vi number");
			System.out.println(
					"[TC_AND_VI_SUB_013] Verify that Vi user is able to Login to Vi app with a valid Vi number");

			verifyElementPresentAndClick(AMDViPage.objSearchIcon, "Search Icon ");

			verifyElementPresentAndClick(AMDViPage.objSearchBox, "Search Box");
			String clissic = getParameterFromXML("ClassicUserMobileNumber");

			type(AMDViPage.objSearchBox, searchcontent + "\n", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDViPage.objFirstSearchResult1(searchcontent), "Search result");

			verifyElementPresentAndClick(AMDViPage.objEnterYourMobileNumberTextbox,
					"Enter Your Mobile Number Text box");

			type(AMDViPage.objEnterYourMobileNumberTextbox, clissic, "Search box");

			click(AMDViPage.objContinue, "Continue Button");
			waitTime(20000);
			verifyElementPresent(AMDPlayerScreen.objcontentTitleInconsumptionPage, "Content Title In consumption Page");

			break;

		case "VIPUser":
//			extent.HeaderChildNode("Login as VIP User");
			extent.HeaderChildNode(
					"[TC_AND_VI_SUB_074]Verify that Vi user is able to Login to Vi app with a valid Vi number");
			System.out.println(
					"[TC_AND_VI_SUB_074]Verify that Vi user is able to Login to Vi app with a valid Vi number");

			verifyElementPresentAndClick(AMDViPage.objSearchIcon, "Search Icon ");

			verifyElementPresentAndClick(AMDViPage.objSearchBox, "Search Box");

			type(AMDViPage.objSearchBox, searchcontent + "\n", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDViPage.objFirstSearchResult1(searchcontent), "Search result");

			verifyElementPresentAndClick(AMDViPage.objEnterYourMobileNumberTextbox,
					"Enter Your Mobile Number Text box");
			String vip = getParameterFromXML("VIPUserMobileNumber");

			type(AMDViPage.objEnterYourMobileNumberTextbox, vip, "Search box");

			click(AMDViPage.objContinue, "Continue Button");
			waitTime(20000);
			verifyElementPresent(AMDPlayerScreen.objcontentTitleInconsumptionPage, "Content Title In consumption Page");

			break;
		}
	}
/**
 * @note this method is used for ActivateDevice screen validation
 * @param userType
 * @throws Exception
 */
	public void activateDevice(String userType) throws Exception {
		extent.HeaderChildNode("ActivateDevice screen validation");
		logger.info("ActivateDevice screen validation");
		if (!userType.equalsIgnoreCase("Guest")) {
			waitTime(3000);
			click(AMDHomePage.objMoreMenu, "More");
			click(AMDMoreMenu.objActivateDevice, "Activate Device");
			waitForElementDisplayed(AMDActivateDevicePage.objActivateDeviceTitle, 40);
			if (verifyElementDisplayed(AMDActivateDevicePage.objActivateDeviceTitle)) {
				logger.info("User navigated to Activate ZEE5 on your TV screen post taping on Activate Device");
				extent.extentLoggerPass("Activate Device",
						"User navigated to Activate ZEE5 on your TV screen post taping on Activate Device");
			} else {
				logger.error("User is not navigated to My Reminder screen post taping on My Reminders");
				extent.extentLoggerFail("Activate Device",
						"User not navigated to Activate ZEE5 on your TV screen post taping on Activate Device");
			}
			if (verifyElementDisplayed(AMDActivateDevicePage.objActivationDescription)) {
				logger.info("Enter the Activation Code displayed on your TV scree message is displayed");
				extent.extentLoggerPass("Activate Device screen Description",
						"Enter the Activation Code displayed on your TV scree message is displayed");
			} else {
				logger.error("Enter the Activation Code displayed on your TV scree message is not displayed");
				extent.extentLoggerFail("Activate Device screen Description",
						"Enter the Activation Code displayed on your TV scree message is not displayed");
			}
			if (verifyElementDisplayed(AMDActivateDevicePage.objActivateScreencloseButton)) {
				logger.info("Close Button is displayed on Activate Device Screen");
				extent.extentLoggerPass("Activate Device Screen Close Button",
						"Close Button is displayed on Activate Device Screen");
			} else {
				logger.error("Close Button is not displayed on Activate Device Screen");
				extent.extentLoggerFail("Activate Device Screen Close Button",
						"Close Button is not displayed on Activate Device Screen");
			}
			if (verifyElementDisplayed(AMDActivateDevicePage.objInputField1)) {
				logger.info("Input Filed is displayed");
				extent.extentLoggerPass("Activate Device Screen Input Field", "Input Filed is displayed");
			} else {
				logger.error("Input Filed is not displayed");
				extent.extentLoggerFail("Activate Device Screen Input Field", "Input Filed is not displayed");
			}
			if (verifyElementDisplayed(AMDActivateDevicePage.objActivateCTA)) {
				logger.info("Activate CTA is displayed in Activate Device Screen");
				extent.extentLoggerPass("Activate CTA", "Activate CTA is displayed in Activate Device Screen");

				if (verifyElementDisplayed(AMDActivateDevicePage.objActivateCTADisabled)) {
					logger.info("Activate CTA is displayed in disabled state by default in Activate Device Screen");
					extent.extentLoggerPass("Activate CTA Disabled state",
							"Activate CTA is displayed in disabled state by default in Activate Device Screen");
				} else {
					logger.error("Close Button is not displayed on Activate Device Screen");
					extent.extentLoggerFail("Activate CTA Disabled state",
							"Activate CTA is displayed in enabled state by default in Activate Device Screen");
				}

			} else {
				logger.error("Activate CTA is not displayed in Activate Device Screen");
				extent.extentLoggerFail("Activate CTA", "Activate CTA is not displayed in Activate Device Screen");
			}
			if (verifyElementDisplayed(AMDActivateDevicePage.objInputField1)) {
				logger.info("Input Field is displayed in Activate Device Screen");
				extent.extentLoggerPass("Input Field", "Input Field is displayed in Activate Device Screen");
				verifyElementPresentAndClick(AMDActivateDevicePage.objInputField1, "Input Field");
				waitTime(2000);
				type(AMDActivateDevicePage.objInputField1, "A", "Input Field");
				hideKeyboard();
				type(AMDActivateDevicePage.objInputField2, "3", "Input Field");
				hideKeyboard();
				type(AMDActivateDevicePage.objInputField3, "3", "Input Field");
				hideKeyboard();
				type(AMDActivateDevicePage.objInputField4, "5", "Input Field");
				hideKeyboard();
				type(AMDActivateDevicePage.objInputField5, "F", "Input Field");
				hideKeyboard();
				type(AMDActivateDevicePage.objInputField6, "T", "Input Field");
				hideKeyboard();
				waitTime(2000);

				if (verifyElementDisplayed(AMDActivateDevicePage.objActivateCTAEnabled)) {
					logger.info("Activate CTA is enabled on entering Device code");
					extent.extentLoggerPass("Activate CTA Enabled state",
							"Activate CTA is enabled on entering Device code");
				} else {
					logger.error("Activate CTA is not enabled on entering Device code");
					extent.extentLoggerFail("Activate CTA Disabled state",
							"Activate CTA is not enabled on entering Device code");
				}
				verifyElementPresentAndClick(AMDActivateDevicePage.objActivateCTAEnabled, "Activate CTA");
				if (verifyElementDisplayed(AMDActivateDevicePage.objInvalidCode)) {
					logger.info("Device with code Not Found error message is displayed");
					extent.extentLoggerPass("Invalid Device code",
							"Device with code Not Found error message is displayed");
				} else {
					logger.error("Device with code Not Found error message is not displayed");
					extent.extentLoggerFail("Invalid Device code",
							"Device with code Not Found error message is not displayed");
				}
				verifyElementPresentAndClick(AMDActivateDevicePage.objActivateScreencloseButton, "Close Button");
				waitTime(2000);
				if (verifyElementDisplayed(AMDHomePage.objMoreMenuBtn)) {
					logger.info("User is navigated to More Menu on tapping Close button");
					extent.extentLoggerPass("Close Button", "User is navigated to More Menu on tapping Close button");
				} else {
					logger.error("User is not navigated to More Menu on tapping Close button");
					extent.extentLoggerFail("Close Button",
							"User is not navigated to More Menu on tapping Close button");
				}

			} else {
				logger.error("Activate CTA is not displayed in Activate Device Screen");
				extent.extentLoggerFail("Activate CTA", "Activate CTA is not displayed in Activate Device Screen");
			}

		} else {
			logger.info("Activate Device" + " Not applicable for " + userType + "user");
			extent.extentLogger("Activate Device", " Not applicable for " + userType);
		}
	}
/**
 * @note this method is used for validating the video consumption page for ZeePlex content
 * @param pContentName
 * @throws Exception
 */
	public void guest_VideoConsumptionPageForPLEXContent(String pContentName) throws Exception {
		extent.HeaderChildNode("Validate video consumption page for ZeePlex content");
		selectTopNavigationTab("Music");
		waitForElementAndClickIfPresent(AMDHomePage.objCarouselContentTitleCard(pContentName), 60,
				"Carousel content: " + pContentName);
		waitTime(3000);
		// Rent Now CTA below the player
		if (verifyElementDisplayed(AMDTVODComboOffer.objRentNowCTABelowPlayer)) {
			String text = findElement(AMDTVODComboOffer.objRentNowCTABelowPlayer).getText();
			extentLoggerPass("", text + " CTA is displayed below the player");
			click(AMDTVODComboOffer.objRentNowCTABelowPlayer, text + " CTA Below the Player");
			if (verifyElementDisplayed(AMDTVODComboOffer.obComboOfferScreen)) {
				logger.info("Combo offer page is displayed on clicking " + text + " CTA Below the player");
				extent.extentLoggerPass("Consumption Screen",
						"Combo offer page is displayed on clicking " + text + " CTA Below the player");
				Back(1);
			} else {
				logger.error("Combo offer page is not displayed on clicking Rent Now CTA Below the player");
				extent.extentLoggerFail("Consumption Screen",
						"Combo offer page is not displayed on clicking Rent Now CTA Below the player");
			}
		}

		// Rent Now CTA on The player

		if (verifyElementDisplayed((AMDTVODComboOffer.objRentNowCTAOnPlayer))) {
			String Renttext = findElement(AMDTVODComboOffer.objRentNowCTAOnPlayer).getText();
			extentLoggerPass("", Renttext + " CTA is displayed on the player");
			click(AMDTVODComboOffer.objRentNowCTAOnPlayer, Renttext + " CTA on the Player");
			if (verifyElementDisplayed(AMDTVODComboOffer.obComboOfferScreen)) {
				logger.info("Combo offer page is displayed on clicking Rent Now CTA on the player");
				extent.extentLoggerPass("Consumption Screen",
						"Combo offer page is displayed on clicking Rent Now CTA on the player");
				verifyElementExist(AMDTVODComboOffer.objUpgradeTextOnComboOfferPage, "Upgrade Text");
				verifyElementExist(AMDTVODComboOffer.objUpgradeSubTextOnComboOfferPage, "Upgrade Subtext");
				Back(1);
			} else {
				logger.error("Combo offer page is not displayed on clicking Rent Now CTA on the player");
				extent.extentLoggerFail("Consumption Screen",
						"Combo offer page is not displayed on clicking Rent Now CTA on the player");
			}
		}

		// Login CTA on player
		if (verifyElementDisplayed(AMDConsumptionScreen.objLoginCTA)) {
			logger.info("Login CTA is displayed on player for Guest user");
			extent.extentLoggerPass("Consumption Screen", "Login CTA is displayed on player for Guest user");
			click(AMDConsumptionScreen.objLoginCTA, "Login CTA");
			if (verifyElementDisplayed(AMDLoginScreen.objLoginOrRegisterPageTitle)) {
				logger.info("User navigated to login or register screen post taping Login CTA");
				extent.extentLoggerPass("Watchlist", "User navigated to Login/Register screen post taping Login CTA");
			} else {
				logger.error("User is not navigated to Login/Register screen post taping Login CTA");
				extent.extentLoggerFail("Watchlist",
						"User is not navigated to login or register screen post taping Login CTA");
			}
			Back(1);

		} else {
			logger.error("Login CTA is NOT displayed on player for Guest user");
			extent.extentLoggerFail("Consumption Screen", "Login CTA is NOT displayed on player for Guest user");
		}

		if (verifyElementDisplayed(AMDTVODComboOffer.objAvailabilityTextOnPlayer)) {
			String validitytext = findElement(AMDTVODComboOffer.objAvailabilityTextOnPlayer).getText();
			logger.error("[AMA2-18103] " + validitytext + " Rent Expiry text is displayed for Live VOD content");
			extent.extentLoggerFail("Consumption Screen",
					"[AMA2-18103] " + validitytext + " Rent Expiry text is displayed for Live VOD content");
		} else {
			logger.info("Rent Expiry text is not displayed for Live VOD content - Expected behaviour");
			extent.extentLoggerPass("Watchlist",
					"Rent Expiry text is not displayed for Live VOD content - Expected behaviour");
		}
	}
/**
 * @note this method is used to validate User is redirected to the consumption screen of PLEX content on tapping Back button from 'You have it all' page
 * @throws Exception
 */
	public void verifyConsumptionScreen_AfterClickingBack() throws Exception {
		extent.HeaderChildNode(
				"Verify User is redirected to the consumption screen of PLEX content on tapping Back button from 'You have it all' page");
		Back(1);
		if (verifyElementDisplayed(AMDConsumptionScreen.objContentName)) {
			logger.info("User is navigated to Consumption screen on clicking Back button ");
			extent.extentLoggerPass("Consumption Screen",
					"User is navigated to Consumption screen on clicking Back button");
		} else {
			logger.error("User Fails navigate to Consumption screen on clicking Back button ");
			extent.extentLoggerFail("Carousel", "User Fails navigate to Consumption screen on clicking Back button");
		}
		click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now");
	}
/**
 * @note this method is used to validate watchlist icon for Live VOD
 * @throws Exception
 */
	public void watchListForLiveVOD() throws Exception {
		extent.HeaderChildNode("Validate watchlist icon for Live VOD");
		boolean value = verifyElementIsNotDisplayed(AMDConsumptionScreen.objWatchlistBtn);
		if (value) {
			logger.info("Watchlist icon is not displayed for Live VOD content - Expected behaviour");
			extent.extentLoggerPass("rails",
					"Watchlist icon is not displayed for Live VOD content - Expected behaviour");
		} else {
			logger.error("Watchlist icon is not displayed for Live VOD content - Expected behaviour");
			extent.extentLoggerFail("rails",
					"Watchlist icon is not displayed for Live VOD content - Expected behaviour");
		}
		Back(1);
		click(AMDHomePage.objHomeBottomBtn, "Home icon");
	}
/**
 * @note thid method is used to validate Adding content to watchlist
 * @throws Exception
 */
	public void addtoWatchList() throws Exception {
		extent.HeaderChildNode("Adding content to watchlist");
		waitTime(3000);
		verifyElementExist(AMDConsumptionScreen.objWatchlistBtn, "Watchlist icon");
		click(AMDConsumptionScreen.objWatchlistBtn, "Watchlist icon");
		waitTime(3000);
		Back(1);

	}
/**
 * @note thid method is sed for validating the Watchlist screen for Zeeplex content
 * @param userType
 * @param contentTitle
 * @throws Exception
 */
	public void watchlistEntryPoint(String userType, String contentTitle) throws Exception {
		extent.HeaderChildNode("Validate Watchlist screen for Zeeplex content");
		click(AMDHomePage.MoreMenuIcon, "More Menu tab");
		waitTime(2000);
		click(AMDMoreMenu.objWatchlist, "Watchlist option");
		String selectedTab = findElement(AMDWatchlistPage.objSelectedTab).getText();

		if (verifyIsElementDisplayed(AMDWatchlistPage.objWatchlistTitle)) {
			logger.info("User navigated to my Watchlist screen");
			extent.extentLoggerPass("watchlist", "User navigated to my Watchlist screen");
		} else {
			logger.error("User not navigated to my Watchlist screen");
			extent.extentLoggerFail("watchlist", "User not navigated to my Watchlist screen");
		}

		boolean watchlistFlag = false;
		if (verifyIsElementDisplayed(AMDWatchlistPage.objNoReminderIcon)) {
			logger.info("Watchlist screen displayed with Empty Watchlist icon");
			extent.extentLoggerPass("Watchlist", "Watchlist screen displayed with Empty Watchlist icon");
			verifyElementPresent(AMDWatchlistPage.objNoReminderIcon, "No watchlist Icon");
			verifyElementPresent(AMDWatchlistPage.objNoReminderTxt, "No watchlist Text");
		} else {
			watchlistFlag = true;
			logger.info("Watchlist has some content cards added in Watchlist");
			extent.extentLoggerPass("watchlist", "Watchlist has some content cards added in Watchlist");
		}

		if (selectedTab.equalsIgnoreCase("Videos")) {
			logger.info("Zeeplex contents are displayed in videos tab after adding to watchlist");
			extent.extentLoggerPass("Watchlist",
					"Zeeplex contents are displayed in videos tab after adding to watchlist");
		} else {
			logger.error("Zeeplex contents are not displayed in videos tab after adding to watchlist");
			extent.extentLoggerFail("watchlist",
					"Zeeplex contents are not displayed in videos tab after adding to watchlist");
		}
		for (int i = 1; i <= findElements(AMDWatchlistPage.objContentThumbnail).size(); i++) {
			String title = findElement(AMDWatchlistPage.objContentName(i)).getText();
			String duration = findElement(AMDWatchlistPage.objIterateEpisode(i)).getText();

			logger.info(title + " is displayed in watchlist tab: " + selectedTab);
			extent.extentLoggerPass("Watchlist", title + " is displayed in watchlist tab: " + selectedTab);
			logger.info("Duration of " + i + "st title is: " + duration);
			extent.extentLoggerPass("watchlist", "Duration of " + i + "st title is: " + duration);
		}
	}
/**
 * @note this method is used to validate the watchnow cta/button functionality  of the You have it all' screen
 * @param contentTitle
 * @throws Exception
 */
	public void validateWatchNow(String contentTitle) throws Exception {
		extent.HeaderChildNode("Verify Watch now CTA in 'You have it all' screen");
		verifyElementPresent(AMDTVODComboOffer.objWatchNowCalloutCTA, "Watch Now CTA");
		click(AMDTVODComboOffer.objWatchNowCalloutCTA, "Watch Now CTA");
		if (verifyElementDisplayed(AMDConsumptionScreen.objContentName)) {
			logger.info("User is navigated to Consumption screen on clicking Watch Now CTA " + contentTitle);
			extent.extentLoggerPass("Consumption Screen",
					"User is navigated to Consumption screen on clicking Watch Now CTA" + contentTitle);
		} else {
			logger.error("User Fails navigate to Consumption screen on clicking Watch Now CTA " + contentTitle);
			extent.extentLoggerFail("Carousel",
					"User Fails navigate to Consumption screen on clicking Watch Now CTA" + contentTitle);
		}

		String text = findElement(AMDTVODComboOffer.objResumeCTAonPlayer).getText();
		System.out.println(text);
		extentLogger("", "CTA on player : " + text);
		if (text.equalsIgnoreCase("Resume")) {
			logger.info("Resume CTA on Player is displayed as user viewed the movie");
			extentLoggerPass("Bottom Sheet", "Resume CTA on Player is displayed as user viewed the movie");
		}

		if (text.equalsIgnoreCase("Watch now")) {
			logger.info("Watch wow CTA on Player is displayed as user NOT viewed the movie");
			extentLoggerPass("Bottom Sheet", "Watch now CTA on Player is displayed as user NOT viewed the movie");
		}

	}

	public void validateBuyPremium() throws Exception {
		extent.HeaderChildNode("Verify Buy Premium CTA in 'You have it all' screen");
		verifyElementPresent(AMDTVODComboOffer.objBuyPremiumCalloutCTA, "Buy Premium CTA");
		click(AMDTVODComboOffer.objBuyPremiumCalloutCTA, "Buy Premium CTA");
		waitTime(5000);
		if (checkElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe Screen")) {
			logger.info("User is navigated to Subscribe screen on clicking Buy Premium CTA");
			extent.extentLoggerPass("Home", "User is navigated to Subscribe screen on clicking Buy Premium CTA");
		} else {
			logger.error("User is NOT navigated to Subscribe screen on clicking Buy Premium CTA");
			extent.extentLoggerFail("Home", "User is NOT navigated to Subscribe screen on clicking Buy Premium CTA");
			Back(1);
		}

	}
/**
 * @note this method is used to validate the Guest checkout-Login with 99 premium user with Active Supermoon
 * @param email
 * @param password
 * @param contentTitle
 * @param tabName
 * @throws Exception
 */
	public void guest_premiumUser_99_WithActiveSupermoon(String email, String password, String contentTitle,
			String tabName) throws Exception {
		extent.HeaderChildNode("Guest checkout-Login with 99 premium user with Active Supermoon");
		loginWithSupermoonActive(email, password, contentTitle, tabName, "99");
		verifyConsumptionScreen_AfterClickingBack();
		validateWatchNow(contentTitle);
		relaunch(true);
		selectTopNavigationTab(tabName);
		waitForElementAndClickIfPresent(AMDHomePage.objCarouselContentTitleCard(contentTitle), 60,
				"Carousel content: " + contentTitle);
		waitTime(3000);
		click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA");
		waitTime(3000);
		click(AMDTVODComboOffer.objBuyRadheComboCTA, "Buy Supermoon Combo CTA");
		waitTime(2000);
		verifyElementPresent(AMDTVODComboOffer.objPaymentStep2, "Payment Step indicator");
		type(AMDTVODComboOffer.objEmailIdfield, email, "Email Id");
		hideKeyboard();
		click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
		click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
		type(AMDTVODComboOffer.objPasswordfield, password, "Password");
		hideKeyboard();
		click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
		click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
		waitTime(4000);
		validateExplorePremium();
	}
/**
 * @note this method is used to validate the Guest checkout-Login functionality  with 299 premium user with Active Supermoon 
 * @param email
 * @param password
 * @param contentTitle
 * @param tabName
 * @throws Exception
 */
	public void guest_premiumUser_299_WithActiveSupermoon(String email, String password, String contentTitle,
			String tabName) throws Exception {
		extent.HeaderChildNode("Guest checkout-Login with 299 premium user with Active Supermoon");
		loginWithSupermoonActive(email, password, contentTitle, tabName, "299");
		verifyConsumptionScreen_AfterClickingBack();
		validateWatchNow(contentTitle);
		relaunch(true);
		selectTopNavigationTab(tabName);
		waitForElementAndClickIfPresent(AMDHomePage.objCarouselContentTitleCard(contentTitle), 60,
				"Carousel content: " + contentTitle);
		waitTime(3000);
		click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA");
		waitTime(3000);
		click(AMDTVODComboOffer.objBuyRadheComboCTA, "Buy Supermoon Combo CTA");
		waitTime(2000);
		verifyElementPresent(AMDTVODComboOffer.objPaymentStep2, "Payment Step indicator");
		type(AMDTVODComboOffer.objEmailIdfield, email, "Email Id");
		hideKeyboard();
		click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
		click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
		type(AMDTVODComboOffer.objPasswordfield, password, "Password");
		hideKeyboard();
		click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
		click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
		waitTime(4000);
		validateExplorePremium();

	}
/**
 * @note this method is used to verify the Guest checkout-Login with RSVOD 49 premium user with Active Supermoon
 * @param email
 * @param password
 * @param contentTitle
 * @param tabName
 * @throws Exception
 */
	public void guest_premiumUser_RSVOD49_WithActiveSupermoon(String email, String password, String contentTitle,
			String tabName) throws Exception {
		extent.HeaderChildNode("Guest checkout-Login with RSVOD 49 premium user with Active Supermoon");
		loginWithSupermoonActive(email, password, contentTitle, tabName, "RSVOD 49");
		verifyConsumptionScreen_AfterClickingBack();
		validateWatchNow(contentTitle);
		relaunch(true);
		selectTopNavigationTab(tabName);
		waitForElementAndClickIfPresent(AMDHomePage.objCarouselContentTitleCard(contentTitle), 60,
				"Carousel content: " + contentTitle);
		waitTime(3000);
		click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA");
		waitTime(3000);
		click(AMDTVODComboOffer.objBuyRadheComboCTA, "Buy Supermoon Combo CTA");
		waitTime(2000);
		verifyElementPresent(AMDTVODComboOffer.objPaymentStep2, "Payment Step indicator");
		type(AMDTVODComboOffer.objEmailIdfield, email, "Email Id");
		hideKeyboard();
		click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
		click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
		type(AMDTVODComboOffer.objPasswordfield, password, "Password");
		hideKeyboard();
		click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
		click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
		waitTime(4000);
		validateExplorePremium();

	}
/**
 * @note this method is used to validate the Guest checkout-Login functionality with RSVOD 499 premium user with Active Supermoon
 * @param email
 * @param password
 * @param contentTitle
 * @param tabName
 * @throws Exception
 */
	public void guest_premiumUser_RSVOD499_WithActiveSupermoon(String email, String password, String contentTitle,
			String tabName) throws Exception {
		extent.HeaderChildNode("Guest checkout-Login with RSVOD 499 premium user with Active Supermoon");
		loginWithSupermoonActive(email, password, contentTitle, tabName, "RSVOD 499");
		verifyConsumptionScreen_AfterClickingBack();
		validateWatchNow(contentTitle);
		relaunch(true);
		selectTopNavigationTab(tabName);
		waitForElementAndClickIfPresent(AMDHomePage.objCarouselContentTitleCard(contentTitle), 60,
				"Carousel content: " + contentTitle);
		waitTime(3000);
		click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA");
		waitTime(3000);
		click(AMDTVODComboOffer.objBuyRadheComboCTA, "Buy Supermoon Combo CTA");
		waitTime(2000);
		verifyElementPresent(AMDTVODComboOffer.objPaymentStep2, "Payment Step indicator");
		type(AMDTVODComboOffer.objEmailIdfield, email, "Email Id");
		hideKeyboard();
		click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
		click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
		type(AMDTVODComboOffer.objPasswordfield, password, "Password");
		hideKeyboard();
		click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
		click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
		waitTime(4000);
		validateExplorePremium();

	}
/**
 * @note this method is used for the validating the 'You have it all' bottom sheet displayed for plan active premium users. 
 * @param pEmailId
 * @param pPassword
 * @param pContentName
 * @param tabName
 * @param pPack
 * @throws Exception
 */
	public void loginWithSupermoonActive(String pEmailId, String pPassword, String pContentName, String tabName,
			String pPack) throws Exception {
		extent.HeaderChildNode(" Validate 'You have it all' bottom sheet displayed for " + pPack + " premium user");
		System.out.println("\nValidate 'You have it all' bottom sheet  displayed for SubscribedUser");
		selectTopNavigationTab(tabName);
		waitForElementAndClickIfPresent(AMDHomePage.objCarouselContentTitleCard(pContentName), 60,
				"Carousel content: " + pContentName);
		waitTime(3000);
		click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA");
		waitTime(3000);
		click(AMDTVODComboOffer.objBuyRadheComboCTA, "Buy Supermoon Combo CTA");
		waitTime(2000);
		if (verifyElementPresent(AMDTVODComboOffer.objAccountInfoLabel, "Account Info overlay")) {
			logger.info("Account Info widget is displayed");
			extentLoggerPass("Account Info widget", "Account Info widget is displayed");
			verifyElementPresent(AMDTVODComboOffer.objPaymentStep2, "Payment Step indicator");
			waitTime(5000);
			type(AMDTVODComboOffer.objEmailIdfield, pEmailId, "Email Id");
			hideKeyboard();
			waitTime(5000);
			click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
			waitTime(5000);
			click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
			waitTime(5000);
			type(AMDTVODComboOffer.objPasswordfield, pPassword, "Password");
			hideKeyboard();
			waitTime(5000);
			click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
			waitTime(5000);
			click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
			waitTime(6000);
			if (verifyIsElementDisplayed(AMDTVODComboOffer.objBottomImg)) {

				if (verifyIsElementDisplayed(AMDTVODComboOffer.objAlreadyActive)) {
					logger.info("'You have it all' bottom sheet is displayed since user already has active plan");
					extentLoggerPass("You have it all",
							"<b>'You have it all'</b> bottom sheet is displayed since user already has active plan");

					verifyElementPresent(AMDTVODComboOffer.objBottomSheetTitle,
							getText(AMDTVODComboOffer.objBottomSheetTitle));
					verifyElementPresent(AMDTVODComboOffer.objBottomSheetSubTitle,
							getText(AMDTVODComboOffer.objBottomSheetSubTitle));
					verifyElementPresent(AMDTVODComboOffer.objActivePlanMsg2, "You have already rented this content");
					verifyElementPresent(AMDTVODComboOffer.objWatchNowCalloutCTA, "Watch Now CTA");
					verifyElementPresent(AMDTVODComboOffer.objExplorePremiumCTA, "Explore Premium CTA");
				} else {
					logger.info(getText(AMDTVODComboOffer.objBottomSheetTitle)
							+ " message in bottom sheet is displayed even though user already has active plan");
					extentLoggerFail("You have it all", getText(AMDTVODComboOffer.objBottomSheetTitle)
							+ " message in bottom sheet is displayed even though user already has active plan");

					verifyElementPresent(AMDTVODComboOffer.objBottomSheetTitle,
							getText(AMDTVODComboOffer.objBottomSheetTitle));
					verifyElementPresent(AMDTVODComboOffer.objBottomSheetSubTitle,
							getText(AMDTVODComboOffer.objBottomSheetSubTitle));
					verifyElementPresent(AMDTVODComboOffer.objBottomSheetCTA,
							getText(AMDTVODComboOffer.objBottomSheetSubTitle));
				}
			} else {
				logger.info("'You have it all' screen is not displayed");
				extentLoggerFail("Bottom Sheet", "<b>'You have it all'</b> screen is not displayed ");
			}
		} else {
			logger.info("Account info screen is not displayed");
			extentLoggerFail("Account info", "Account info screen is not displayed ");
		}
	}
/**
 * @note this method is used to Verify Explore Premium CTA in 'You have it all' screen
 * @throws Exception
 */
	public void validateExplorePremium() throws Exception {
		extent.HeaderChildNode("Verify Explore Premium CTA in 'You have it all' screen");
		verifyElementPresent(AMDTVODComboOffer.objExplorePremiumCTA, "Explore Premium CTA");
		click(AMDTVODComboOffer.objExplorePremiumCTA, "Explore Premium CTA");

		if (checkElementExist(AMDHomePage.objHomeBtn, "Home tab")) {
			logger.info("User is navigated to Home Page on clicking Explore Premium CTA");
			extent.extentLoggerPass("Home", "User is navigated to Home Page on clicking Explore Premium CTA");
		} else {
			logger.error("User is NOT navigated to Home Page on clicking Explore Premium CTA");
			extent.extentLoggerFail("Home", "User is NOT navigated to Home Page on clicking Explore Premium CTA");
			Back(1);
		}

	}
/**
 * @note this method is used to Validate 'You have it all' bottom sheet displayed for SubscribedUser
 * @param pEmailId
 * @param pPassword
 * @param pContentName
 * @param tabName
 * @throws Exception
 */
	public void verifyRentalPlanAsSubscribedUser(String pEmailId, String pPassword, String pContentName, String tabName)
			throws Exception {
		extent.HeaderChildNode(" Validate 'You have it all' bottom sheet displayed for SubscribedUser");
		System.out.println("\nValidate 'You have it all' bottom sheet  displayed for SubscribedUser");
		selectTopNavigationTab(tabName);
		waitForElementAndClickIfPresent(AMDHomePage.objCarouselContentTitleCard(pContentName), 60,
				"Carousel content: " + pContentName);
		waitTime(3000);
//		waitForElementDisplayed(AMDTVODComboOffer.objPlayCTAonCarouselforContent(pContentName), 15);
//		verifyElementPresentAndClick(AMDTVODComboOffer.objPlayCTAonCarouselforContent(pContentName),
//				"Play button from Carousel");
		click(AMDTVODComboOffer.objRentNowCTABelowPlayer, "Rent Now CTA");
		waitTime(3000);
		comboOfferPlanCard_OnlyRentMoviePlanCard_Validation();
		click(AMDTVODComboOffer.objBuyRadheComboCTA, "Buy Supermoon Combo CTA");
		waitTime(2000);

		if (verifyElementPresent(AMDTVODComboOffer.objAccountInfoLabel, "Account Info overlay")) {
			logger.info("Account Info widget is displayed");
			extentLoggerPass("Account Info widget", "Account Info widget is displayed");
			verifyElementPresent(AMDTVODComboOffer.objPaymentStep2, "Payment Step indicator");
			type(AMDTVODComboOffer.objEmailIdfield, pEmailId, "Email Id");
			hideKeyboard();
			click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
			click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
			type(AMDTVODComboOffer.objPasswordfield, pPassword, "Password");
			hideKeyboard();
			click(AMDTVODComboOffer.objHeadingBottomSheet, "HideKeyboard");
			click(AMDTVODComboOffer.objContinueBtn, "Continue Button");
			waitTime(4000);
			if (verifyIsElementDisplayed(AMDTVODComboOffer.objBottomImg)) {

				if (verifyIsElementDisplayed(AMDTVODComboOffer.objAlreadyActive)) {
					logger.info("'You have it all' bottom sheet is displayed since user already has active plan");
					extentLoggerPass("You have it all",
							"<b>'You have it all'</b> bottom sheet is displayed since user already has active plan");

					verifyElementPresent(AMDTVODComboOffer.objBottomSheetTitle,
							getText(AMDTVODComboOffer.objBottomSheetTitle));
					verifyElementPresent(AMDTVODComboOffer.objBottomSheetSubTitle,
							getText(AMDTVODComboOffer.objBottomSheetSubTitle));
					verifyElementPresent(AMDTVODComboOffer.objActivePlanMsg2,
							"You have already rented this ZEEPLEX movie");
					verifyElementPresent(AMDTVODComboOffer.objWatchNowCalloutCTA, "Watch Now CTA");
					verifyElementPresent(AMDTVODComboOffer.objExplorePremiumCTA, "Explore Premium CTA");
				} else {
					logger.info(getText(AMDTVODComboOffer.objBottomSheetTitle)
							+ " message in bottom sheet is displayed even though user already has active plan");
					extentLoggerFail("You have it all", getText(AMDTVODComboOffer.objBottomSheetTitle)
							+ " message in bottom sheet is displayed even though user already has active plan");

					verifyElementPresent(AMDTVODComboOffer.objBottomSheetTitle,
							getText(AMDTVODComboOffer.objBottomSheetTitle));
					verifyElementPresent(AMDTVODComboOffer.objBottomSheetSubTitle,
							getText(AMDTVODComboOffer.objBottomSheetSubTitle));
					verifyElementPresent(AMDTVODComboOffer.objBottomSheetCTA,
							getText(AMDTVODComboOffer.objBottomSheetSubTitle));
				}
			} else {
				logger.info("'You have it all' screen is not displayed");
				extentLoggerFail("Bottom Sheet", "<b>'You have it all'</b> screen is not displayed ");
			}
		} else {
			logger.info("Account info screen is not displayed");
			extentLoggerFail("Account info", "Account info screen is not displayed ");
		}
	}

	// -------------------------------------------------------VMAX--------------------------------------------------------------

	/**
	 * Function to Relaunch the driver
	 */
	public void relaunchVmax(boolean clearData) throws Exception {
		HeaderChildNode("Relaunch the app");
		logger.info("Relaunching the application");
		extent.extentLogger("Relaunch", "Relaunching the application");
		waitTime(10000);
		getDriver().quit();
		relaunch = clearData;
		new Zee5ApplicasterBusinessLogic("zeeVmax");
		if (userType != "Guest" & clearData == false) {
			System.out.println("Navigates to Landing Sccreen..");
		}
	}
/**
 * @note this method is used for accepting App alert
 * @throws Exception
 */
	public void acceptAlertVmax() throws Exception {
		extent.HeaderChildNode("Access App Alert");

		waitForElementDisplayed(AMDOnboardingScreen.AcceptVmaxAppAlert, 60);

		if (verifyIsElementDisplayed(AMDOnboardingScreen.AcceptVmaxAppAlert, "App Alert")) {
			verifyElementPresentAndClick(AMDOnboardingScreen.AcceptVmaxAppAlert, "App Alert");
			waitTime(10000);
		} else {
			System.out.println("App Alert Not displayed");
		}
	}
/**
 * @note this method is used for verifying skip functionality.
 * @throws Exception
 */
	public void zeeSkip() throws Exception {
		extent.HeaderChildNode("Skip");
		if (verifyIsElementDisplayed(AMDOnboardingScreen.zeeSkip, "Zee Skip")) {
			verifyElementPresentAndClick(AMDOnboardingScreen.zeeSkip, "Zee Skip");
			waitTime(10000);
		} else {
			System.out.println("zeeSkip Not displayed");
		}
		waitTime(10000);
	}
/**
 * @note this method is used for verifying the login functionality of zee5 app for verifying VMAX module
 * @param LoginMethod
 * @throws Exception
 */
	public void zee5AppLoginVMAX(String LoginMethod) throws Exception {
		extent.HeaderChildNode("Login Functionality");
		waitTime(8000);
		String UserType = getParameterFromXML("userType");
		if (UserType.equals("Guest")) {
			extent.extentLogger("userType", "UserType : Guest");
		}

//		verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Login link");
//		waitTime(3000);

		switch (LoginMethod) {
		case "Guest":
			extent.HeaderChildNode("Guest User");
			extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");
			waitTime(5000);
//			hideKeyboard();
//			verifyElementPresentAndClick(AMDLoginScreen.objLoginLnk, "Skip link");

			waitTime(8000);
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as NonSubscribed User");

			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");

			verifyElementPresentAndClick(AMDVMAXAPP.objZeeMoreButton, "More button");

			verifyElementPresentAndClick(AMDVMAXAPP.objZeeLoginRegisterLink, "Login/Register Link");

			verifyElementPresentAndClick(AMDVMAXAPP.objEmailIdField, "Email field");
			type(AMDVMAXAPP.objEmailIdField, Username, "Email Field");
			verifyElementPresentAndClick(AMDVMAXAPP.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDVMAXAPP.objPasswordField, "Password Field");
			type(AMDVMAXAPP.objPasswordField, Password, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDVMAXAPP.objLoginBtn, "Login Button");
			waitTime(10000);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User");

			String SubscribedUsername = getParameterFromXML("SubscribedUserName");
			String SubscribedPassword = getParameterFromXML("SubscribedPassword");

			verifyElementPresentAndClick(AMDVMAXAPP.objZeeMoreButton, "More button");

			verifyElementPresentAndClick(AMDVMAXAPP.objZeeLoginRegisterLink, "Login/Register Link");

			verifyElementPresentAndClick(AMDVMAXAPP.objEmailIdField, "Email field");
			type(AMDVMAXAPP.objEmailIdField, SubscribedUsername, "Email Field");
			verifyElementPresentAndClick(AMDVMAXAPP.objProceedBtn, "Proceed Button");
			verifyElementPresentAndClick(AMDVMAXAPP.objPasswordField, "Password Field");
			type(AMDVMAXAPP.objPasswordField, SubscribedPassword, "Password field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDVMAXAPP.objLoginBtn, "Login Button");
			waitTime(10000);
			break;
		}
	}
/**
 * @note this method is used for Validation of Vmax : Ad Pod Video Ads.
 * @param userType
 * @param SearchContent
 * @throws Exception
 */
	public void validatePlaybackVMAXAds(String userType, String SearchContent) throws Exception {
		extent.HeaderChildNode("Validation of Vmax : Ad Pod Video Ads");
		verifyElementPresent(AMDVMAXAPP.objHomeBottomBtn, "Home Button");
		waitTime(10000);

		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {

			waitTime(10000);
			waitTime(10000);
			waitTime(10000);

			click(AMDVMAXAPP.objSearchIcon, "Search icon");
			waitTime(10000);
			click(AMDVMAXAPP.objSearchEditBox, "Search Box");
			waitTime(10000);
			type(AMDVMAXAPP.objSearchBoxBar, SearchContent + "\n", "Search bar");
			waitTime(10000);
			hideKeyboard();
			waitTime(4000);
			waitForElementDisplayed(AMDVMAXAPP.objAllTab, 10);
			waitTime(4000);
			click(AMDVMAXAPP.objShowsTab, "Shows tab");
			waitTime(10000);
			click(AMDVMAXAPP.objSearchResultContainsText(SearchContent), "Search Result");

			// PRE-ROLL
			waitForElementDisplayed(AMDVMAXAPP.objAd, 20);
			boolean adPreroll = verifyIsElementDisplayed(AMDVMAXAPP.objAd);
			if (adPreroll == true) {
				logger.info("PreRoll Vmax Ad play in progress");
				extentLoggerPass("Ad", "PreRoll Vmax Ad play in progress");
				// waitForAdToFinishInAmdVMAX1(AMDVMAXAPP.objAd,"Vmax PreRoll");
			} else {
				logger.info("PreRoll Vmax Ad is not available for the content");
				extent.extentLogger("Ad", "PreRoll Vmax Ad is not available for the content");
			}

			if (verifyIsElementDisplayed(AMDVMAXAPP.objSubscribeLink)) {
				extent.extentLoggerPass("", "Subscribe Deeplink is displayed");
			} else {
				extent.extentLogger("", "Subscribe Deeplink is not displayed");
			}

			if (verifyIsElementDisplayed(AMDVMAXAPP.objSkipCTA)) {
				extent.extentLoggerPass("", "SkipCTA is displayed");
			} else {
				extent.extentLogger("", "SkipCTA is not displayed");
			}

			String AdTime = getAttributValue("text", AMDVMAXAPP.objAdProgressTime);
			waitForElementDisplayed(AMDVMAXAPP.objAd1, timeToSec(AdTime));

			boolean adPreroll1 = verifyIsElementDisplayed(AMDVMAXAPP.objAd1);
			if (adPreroll1 == true) {
				logger.info("PreRoll Bumper Ad play in progress");
				extentLoggerPass("Ad", "PreRoll Bumper Ad play in progress");
				waitForAdToFinishInAmdVMAX2(AMDVMAXAPP.objAd1, "Vmax PreRoll Bumper");
			} else {
				logger.info("PreRoll Bumper Ad is not available for the content");
				extent.extentLogger("Ad", "PreRoll Bumper Ad is not available for the content");
			}

			waitTime(10000);
			waitTime(10000);
			System.out.println(userType);
			if (userType.equalsIgnoreCase("Guest")) {
				registerPopUpClose();
			} else {

			}

			if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				completeProfilePopUpClose();
			} else {

			}

			waitTime(10000);
			waitTime(10000);

			if (verifyIsElementDisplayed(AMDVMAXAPP.objPause, "pause icon")) {
				scrubProgressBarToMid1VMAX(AMDVMAXAPP.objProgressBar);
			} else {
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
				click(AMDVMAXAPP.objPause, "Pause Icon");
				scrubProgressBarToMid1VMAX(AMDVMAXAPP.objProgressBar);
			}

			waitTime(5000);
			click(AMDVMAXAPP.objPlay, "Play Icon");
			waitTime(4000);

			// MID-ROLL1
			boolean adMidRoll = verifyIsElementDisplayed(AMDVMAXAPP.objAd);
			if (adMidRoll) {
				logger.info("Mid roll1 Ad play in progress");
				extent.extentLoggerPass("Ad", "Mid roll1 Ad played in Midroll");
				waitForAdToFinishInAmdVMAX1(AMDVMAXAPP.objAd, "Vmax midRoll1");
			} else {
				logger.info("Mid roll1 Ad is not available for the content");
				extent.extentLogger("Ad", "Mid roll1 Ad is not available for the content");
			}
//			boolean adMidRoll1 = verifyIsElementDisplayed(AMDVMAXAPP.objAd1);
//			if (adMidRoll1) {
//				logger.info("Mid roll Ad play in progress");
//				extent.extentLoggerPass("Ad", "Mid roll Ad played in Midroll");
//				waitForAdToFinishInAmdVMAX2(AMDVMAXAPP.objAd,"Vmax MidRoll");
//			} else {
//				logger.info("Mid roll Ad is not available for the content");
//				extent.extentLogger("Ad", "Mid roll Ad is not available for the content");
//			}

			waitTime(10000);
			if (verifyIsElementDisplayed(AMDVMAXAPP.objPause, "pause icon")) {
				scrubProgressBarToMid2VMAX(AMDVMAXAPP.objProgressBar);
			} else {
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
				click(AMDVMAXAPP.objPause, "Pause Icon");
				scrubProgressBarToMid2VMAX(AMDVMAXAPP.objProgressBar);
			}

			waitTime(5000);
			click(AMDVMAXAPP.objPlay, "Play Icon");
			waitTime(4000);

			// MID-ROLL2
			boolean adMidRoll2 = verifyIsElementDisplayed(AMDVMAXAPP.objAd);
			if (adMidRoll2) {
				logger.info("Mid roll2 Ad play in progress");
				extent.extentLoggerPass("Ad", "Mid roll2 Ad played in Midroll");
				waitForAdToFinishInAmdVMAX1(AMDVMAXAPP.objAd, "Vmax midRoll2");
			} else {
				logger.info("Mid roll2 Ad is not available for the content");
				extent.extentLogger("Ad", "Mid roll2 Ad is not available for the content");
			}

			waitTime(15000);
			if (verifyIsElementDisplayed(AMDVMAXAPP.objPause, "pause icon")) {
				scrubProgressBarToMid3VMAX(AMDVMAXAPP.objProgressBar);
			} else {
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
				click(AMDVMAXAPP.objPause, "Pause Icon");
				scrubProgressBarToMid3VMAX(AMDVMAXAPP.objProgressBar);
			}

			waitTime(5000);
			click(AMDVMAXAPP.objPlay, "Play Icon");
			waitTime(4000);

			// MID-ROLL3
			boolean adMidRoll3 = verifyIsElementDisplayed(AMDVMAXAPP.objAd);
			if (adMidRoll3) {
				logger.info("Mid roll3 Ad play in progress");
				extent.extentLoggerPass("Ad", "Mid roll3 Ad played in Midroll");
				waitForAdToFinishInAmdVMAX1(AMDVMAXAPP.objAd, "Vmax midRoll3");
			} else {
				logger.info("Mid roll3 Ad is not available for the content");
				extent.extentLogger("Ad", "Mid roll3 Ad is not available for the content");
			}

		} else {

			extent.extentLogger("", "No Ads for Subscribed user");

		}
	}
/**
 * @note this method is used to validate bumper ads.
 * @param userType
 * @param SearchContent
 * @throws Exception
 */
	public void ValidatePlaybackVMAXAds2(String userType, String SearchContent) throws Exception {
		extent.HeaderChildNode("Validation of Vmax : Back to Back Video Ads");
		verifyElementPresent(AMDVMAXAPP.objHomeBottomBtn, "Home Button");
		waitTime(10000);

		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {

			waitTime(10000);
			waitTime(10000);
			waitTime(10000);

			click(AMDVMAXAPP.objSearchIcon, "Search icon");
			waitTime(10000);
			click(AMDVMAXAPP.objSearchEditBox, "Search Box");
			waitTime(10000);
			type(AMDVMAXAPP.objSearchBoxBar, SearchContent + "\n", "Search bar");
			waitTime(10000);
			hideKeyboard();
			waitTime(4000);
			waitForElementDisplayed(AMDVMAXAPP.objAllTab, 10);
			waitTime(4000);
			waitTime(10000);
			click(AMDVMAXAPP.objSearchResultContainsText(SearchContent), "Search Result");

			// PRE-ROLL
			waitForElementDisplayed(AMDVMAXAPP.objAd, 20);
			boolean adPreroll = verifyIsElementDisplayed(AMDVMAXAPP.objAd);
			if (adPreroll == true) {
				logger.info("PreRoll Vmax Ad play in progress");
				extentLoggerPass("Ad", "PreRoll Vmax Ad play in progress");
				waitForAdToFinishInAmdVMAX1(AMDVMAXAPP.objAd, "Vmax PreRoll");
			} else {
				logger.info("PreRoll Vmax Ad is not available for the content");
				extent.extentLogger("Ad", "PreRoll Vmax Ad is not available for the content");
			}
			boolean adPreroll1 = verifyIsElementDisplayed(AMDVMAXAPP.objAd1);
			if (adPreroll1 == true) {
				logger.info("PreRoll Bumper Ad play in progress");
				extentLoggerPass("Ad", "PreRoll Bumper Ad play in progress");
				waitForAdToFinishInAmdVMAX2(AMDVMAXAPP.objAd1, "Vmax PreRoll Bumper");
			} else {
				logger.info("PreRoll Bumper Ad is not available for the content");
				extent.extentLogger("Ad", "PreRoll Bumper Ad is not available for the content");
			}

			waitTime(10000);
			waitTime(10000);
			System.out.println(userType);
			if (userType.equalsIgnoreCase("Guest")) {
				registerPopUpClose();
			} else {

			}

			if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				completeProfilePopUpClose();
			} else {

			}

			waitTime(10000);
			waitTime(10000);

			if (verifyIsElementDisplayed(AMDVMAXAPP.objPause, "pause icon")) {
				scrubProgressBarToMidRollVMAX(AMDVMAXAPP.objProgressBar);
			} else {
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
				click(AMDVMAXAPP.objPause, "Pause Icon");
				scrubProgressBarToMidRollVMAX(AMDVMAXAPP.objProgressBar);
			}

			waitTime(5000);
			click(AMDVMAXAPP.objPlay, "Play Icon");
			waitTime(4000);

			// MID-ROLL
			boolean adMidRoll = verifyIsElementDisplayed(AMDVMAXAPP.objAd);
			if (adMidRoll) {
				logger.info("Mid roll Ad play in progress");
				extent.extentLoggerPass("Ad", "Mid roll Ad played in Midroll");
				// waitForAdToFinishInAmdVMAX1(AMDVMAXAPP.objAd,"Vmax midRoll");
			} else {
				logger.info("Mid roll Ad is not available for the content");
				extent.extentLogger("Ad", "Mid roll Ad is not available for the content");
			}

			if (verifyIsElementDisplayed(AMDVMAXAPP.objKnowMoreLink)) {
				extent.extentLoggerPass("", "Know More Link is displayed");
			} else {
				extent.extentLogger("", "Know More Link is not displayed");
			}

			if (verifyIsElementDisplayed(AMDVMAXAPP.objSkipCTA)) {
				extent.extentLoggerPass("", "Skip CTA is displayed");
			} else {
				extent.extentLogger("", "Skip CTA is not displayed");
			}

			String AdTime = getAttributValue("text", AMDVMAXAPP.objAdProgressTime);
			waitForElementDisplayed(AMDVMAXAPP.objAd1, timeToSec(AdTime));

			boolean adMidRoll1 = verifyIsElementDisplayed(AMDVMAXAPP.objAd1);
			if (adMidRoll1) {
				logger.info("Mid roll Ad play in progress");
				extent.extentLoggerPass("Ad", "Mid roll Ad played in Midroll");
				// waitForAdToFinishInAmdVMAX2(AMDVMAXAPP.objAd,"Vmax MidRoll");
			} else {
				logger.info("Mid roll Ad is not available for the content");
				extent.extentLogger("Ad", "Mid roll Ad is not available for the content");
			}

			if (verifyIsElementDisplayed(AMDVMAXAPP.objKnowMoreLink)) {
				extent.extentLoggerPass("", "Know More Link is displayed");
			} else {
				extent.extentLogger("", "Know More Link is not displayed");
			}

			if (verifyIsElementDisplayed(AMDVMAXAPP.objSkipCTA)) {
				extent.extentLoggerPass("", "Skip CTA is displayed");
			} else {
				extent.extentLogger("", "Skip CTA is not displayed");
			}

		} else {

			extent.extentLogger("", "No Ads for Subscribed user");

		}
	}
/**
 * @note this method is used to validate the Vmax : Back to Back Companion + Video - Companion ads.
 * @param userType
 * @param SearchContent
 * @throws Exception
 */
	public void validatePlaybackVMAXAds3(String userType, String SearchContent) throws Exception {
		extent.HeaderChildNode("Validation of Vmax : Back to Back Companion + Video - Companion");
		verifyElementPresent(AMDVMAXAPP.objHomeBottomBtn, "Home Button");
		waitTime(10000);

		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {

			waitTime(10000);
			waitTime(10000);
			waitTime(10000);

			click(AMDVMAXAPP.objSearchIcon, "Search icon");
			waitTime(10000);
			click(AMDVMAXAPP.objSearchEditBox, "Search Box");
			waitTime(10000);
			type(AMDVMAXAPP.objSearchBoxBar, SearchContent + "\n", "Search bar");
			waitTime(10000);
			hideKeyboard();
			waitTime(4000);
			waitForElementDisplayed(AMDVMAXAPP.objAllTab, 10);
			waitTime(4000);
			click(AMDVMAXAPP.objShowsTab, "Shows tab");
			waitTime(10000);
			click(AMDVMAXAPP.objSearchResultContainsText(SearchContent), "Search Result");

			// PRE-ROLL
			waitForElementDisplayed(AMDVMAXAPP.objAd, 20);
			boolean adPreroll = verifyIsElementDisplayed(AMDVMAXAPP.objAd);
			if (adPreroll == true) {
				logger.info("PreRoll Vmax Ad play in progress");
				extentLoggerPass("Ad", "PreRoll Vmax Ad play in progress");
				// waitForAdToFinishInAmdVMAX1(AMDVMAXAPP.objAd,"Vmax PreRoll");
			} else {
				logger.info("PreRoll Vmax Ad is not available for the content");
				extent.extentLogger("Ad", "PreRoll Vmax Ad is not available for the content");
			}

			if (verifyIsElementDisplayed(AMDVMAXAPP.objVisitAdvertiserLink)) {
				extent.extentLoggerPass("", "VisitAdvertiser Deeplink is displayed");
			} else {
				extent.extentLogger("", "VisitAdvertiser Deeplink is not displayed");
			}

			if (verifyIsElementDisplayed(AMDVMAXAPP.objCompanionAdTitle)) {
				extent.extentLoggerPass("", "Companion Ad Displayed");
				extent.extentLogger("", "Companion Ad : " + getAttributValue("text", AMDVMAXAPP.objCompanionAdTitle));
			} else {
				extent.extentLogger("", "Companion Ad is not displayed");
			}

			String AdTime = getAttributValue("text", AMDVMAXAPP.objAdProgressTime);
			waitForElementDisplayed(AMDVMAXAPP.objAd1, timeToSec(AdTime));

			boolean adPreroll1 = verifyIsElementDisplayed(AMDVMAXAPP.objAd1);
			if (adPreroll1 == true) {
				logger.info("PreRoll Bumper Ad play in progress");
				extentLoggerPass("Ad", "PreRoll Bumper Ad play in progress");
				// waitForAdToFinishInAmdVMAX2(AMDVMAXAPP.objAd1,"Vmax PreRoll Bumper");
			} else {
				logger.info("PreRoll Bumper Ad is not available for the content");
				extent.extentLogger("Ad", "PreRoll Bumper Ad is not available for the content");
			}

			if (verifyIsElementDisplayed(AMDVMAXAPP.objVisitAdvertiserLink)) {
				extent.extentLoggerPass("", "VisitAdvertiser Deeplink is displayed");
			} else {
				extent.extentLogger("", "VisitAdvertiser Deeplink is not displayed");
			}

			if (verifyIsElementDisplayed(AMDVMAXAPP.objCompanionAdTitle)) {
				extent.extentLoggerPass("", "Companion Ad Displayed");
				extent.extentLogger("", "Companion Ad : " + getAttributValue("text", AMDVMAXAPP.objCompanionAdTitle));
			} else {
				extent.extentLogger("", "Companion Ad is not displayed");
			}

			waitForAdToFinishInAmdVMAX2(AMDVMAXAPP.objAd1, "Vmax PreRoll Bumper");

			waitTime(10000);
			waitTime(10000);
			System.out.println(userType);
			if (userType.equalsIgnoreCase("Guest")) {
				registerPopUpClose();
			} else {

			}

			if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				completeProfilePopUpClose();
			} else {

			}

			waitTime(10000);
			waitTime(10000);

			if (verifyIsElementDisplayed(AMDVMAXAPP.objPause, "pause icon")) {
				scrubProgressBarToMidRollVMAX(AMDVMAXAPP.objProgressBar);
			} else {
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
				click(AMDVMAXAPP.objPause, "Pause Icon");
				scrubProgressBarToMidRollVMAX(AMDVMAXAPP.objProgressBar);
			}

			waitTime(5000);
			click(AMDVMAXAPP.objPlay, "Play Icon");
			waitTime(4000);

			// MID-ROLL
			boolean adMidRoll = verifyIsElementDisplayed(AMDVMAXAPP.objAd);
			if (adMidRoll) {
				logger.info("Mid roll Ad play in progress");
				extent.extentLoggerPass("Ad", "Mid roll Ad played in Midroll");
				// waitForAdToFinishInAmdVMAX1(AMDVMAXAPP.objAd,"Vmax midRoll");
			} else {
				logger.info("Mid roll Ad is not available for the content");
				extent.extentLogger("Ad", "Mid roll Ad is not available for the content");
			}

			if (verifyIsElementDisplayed(AMDVMAXAPP.objVisitAdvertiserLink)) {
				extent.extentLoggerPass("", "VisitAdvertiser Deeplink is displayed");
			} else {
				extent.extentLogger("", "VisitAdvertiser Deeplink is not displayed");
			}

			if (verifyIsElementDisplayed(AMDVMAXAPP.objCompanionAdTitle)) {
				extent.extentLoggerPass("", "Companion Ad Displayed");
				extent.extentLogger("", "Companion Ad : " + getAttributValue("text", AMDVMAXAPP.objCompanionAdTitle));
			} else {
				extent.extentLogger("", "Companion Ad is not displayed");
			}

			String AdTime1 = getAttributValue("text", AMDVMAXAPP.objAdProgressTime);
			waitForElementDisplayed(AMDVMAXAPP.objAd1, timeToSec(AdTime1));

			boolean adMidRoll1 = verifyIsElementDisplayed(AMDVMAXAPP.objAd1);
			if (adMidRoll1) {
				logger.info("Mid roll Ad play in progress");
				extent.extentLoggerPass("Ad", "Mid roll Ad played in Midroll");
				// waitForAdToFinishInAmdVMAX2(AMDVMAXAPP.objAd,"Vmax MidRoll");
			} else {
				logger.info("Mid roll Ad is not available for the content");
				extent.extentLogger("Ad", "Mid roll Ad is not available for the content");
			}

			if (verifyIsElementDisplayed(AMDVMAXAPP.objVisitAdvertiserLink)) {
				extent.extentLoggerPass("", "VisitAdvertiser Deeplink is displayed");
			} else {
				extent.extentLogger("", "VisitAdvertiser Deeplink is not displayed");
			}

			if (verifyIsElementDisplayed(AMDVMAXAPP.objCompanionAdTitle)) {
				extent.extentLoggerPass("", "Companion Ad Displayed");
				extent.extentLogger("", "Companion Ad : " + getAttributValue("text", AMDVMAXAPP.objCompanionAdTitle));
			} else {
				extent.extentLogger("", "Companion Ad is not displayed");
			}

			waitForAdToFinishInAmdVMAX2(AMDVMAXAPP.objAd1, "Vmax Mid roll");

			waitTime(10000);

		} else {

			extent.extentLogger("", "No Ads for Subscribed user");

		}
	}
/**
 * @note this method is used for Ad to finish
 * @param locator
 * @param str
 */
	public void waitForAdToFinishInAmdVMAX1(By locator, String str) {
		// waitTime(20000);

		for (int i = 0; i <= 50; i++) {
			if (verifyIsElementDisplayed(locator)) {
				System.out.println(str + " Ad is Playing");
			} else {
				System.out.println("Ad completed");
				break;
			}
		}

	}
/**
 * @note this method is used for waiting till back to back  Vmax ads completion. 
 * @param locator
 * @param str
 */
	public void waitForAdToFinishInAmdVMAX2(By locator, String str) {
		// waitTime(20000);

		for (int i = 0; i <= 50; i++) {
			if (verifyIsElementDisplayed(locator)) {
				System.out.println(str + " Ad is Playing");
			} else {
				System.out.println("Ad completed");
				break;
			}
		}

	}
/**
 * @note this method is used for scrubbing the seek bar till midroll configured ad que point.
 * @param byLocator1
 * @throws Exception
 */
	public void scrubProgressBarToMidRollVMAX(By byLocator1) throws Exception {

		// click(AMDPlayerScreen.objPauseIcon, "Pause");
		WebElement element = getDriver().findElement(byLocator1);
		Dimension size = element.getSize();
		Point point = element.getLocation();

		int getX = point.getX();
		int getY = point.getY();
		int height = (int) (size.getHeight());
		int width = (int) (size.getWidth());

		// System.out.println(getX);
		// System.out.println(getY);
		// System.out.println(height);
		// System.out.println(width);

		float midOfWidth = (float) (width * 0.5);
		int pointX = (int) (getX + midOfWidth);
		// System.out.println(pointX);
		float midOfHeight = (float) (height / 2);
		int pointY = (int) (getY + midOfHeight);
		// System.out.println(pointY);

		AndroidTouchAction touch = new AndroidTouchAction(getDriver());
		touch.longPress(LongPressOptions.longPressOptions().withElement(ElementOption.element(element)))
				.waitAction(WaitOptions.waitOptions(Duration.ofMillis(3000))).moveTo(PointOption.point(pointX, pointY))
				.release().perform();

	}

	public void scrubProgressBarToMid1VMAX(By byLocator1) throws Exception {

		// click(AMDPlayerScreen.objPauseIcon, "Pause");
		WebElement element = getDriver().findElement(byLocator1);
		Dimension size = element.getSize();
		Point point = element.getLocation();

		int getX = point.getX();
		int getY = point.getY();
		int height = (int) (size.getHeight());
		int width = (int) (size.getWidth());

		// System.out.println(getX);
		// System.out.println(getY);
		// System.out.println(height);
		// System.out.println(width);

		float midOfWidth = (float) (width * 0.3);
		int pointX = (int) (getX + midOfWidth);
		// System.out.println(pointX);
		float midOfHeight = (float) (height / 2);
		int pointY = (int) (getY + midOfHeight);
		// System.out.println(pointY);

		AndroidTouchAction touch = new AndroidTouchAction(getDriver());
		touch.longPress(LongPressOptions.longPressOptions().withElement(ElementOption.element(element)))
				.waitAction(WaitOptions.waitOptions(Duration.ofMillis(3000))).moveTo(PointOption.point(pointX, pointY))
				.release().perform();

	}

	public void scrubProgressBarToMid2VMAX(By byLocator1) throws Exception {

		// click(AMDPlayerScreen.objPauseIcon, "Pause");
		WebElement element = getDriver().findElement(byLocator1);
		Dimension size = element.getSize();
		Point point = element.getLocation();

		int getX = point.getX();
		int getY = point.getY();
		int height = (int) (size.getHeight());
		int width = (int) (size.getWidth());

		// System.out.println(getX);
		// System.out.println(getY);
		// System.out.println(height);
		// System.out.println(width);

		float midOfWidth = (float) (width * 0.6);
		int pointX = (int) (getX + midOfWidth);
		// System.out.println(pointX);
		float midOfHeight = (float) (height / 2);
		int pointY = (int) (getY + midOfHeight);
		// System.out.println(pointY);

		AndroidTouchAction touch = new AndroidTouchAction(getDriver());
		touch.longPress(LongPressOptions.longPressOptions().withElement(ElementOption.element(element)))
				.waitAction(WaitOptions.waitOptions(Duration.ofMillis(3000))).moveTo(PointOption.point(pointX, pointY))
				.release().perform();

	}

	public void scrubProgressBarToMid3VMAX(By byLocator1) throws Exception {

		// click(AMDPlayerScreen.objPauseIcon, "Pause");
		WebElement element = getDriver().findElement(byLocator1);
		Dimension size = element.getSize();
		Point point = element.getLocation();

		int getX = point.getX();
		int getY = point.getY();
		int height = (int) (size.getHeight());
		int width = (int) (size.getWidth());

		// System.out.println(getX);
		// System.out.println(getY);
		// System.out.println(height);
		// System.out.println(width);

		float midOfWidth = (float) (width * 0.8);
		int pointX = (int) (getX + midOfWidth);
		// System.out.println(pointX);
		float midOfHeight = (float) (height / 2);
		int pointY = (int) (getY + midOfHeight);
		// System.out.println(pointY);

		AndroidTouchAction touch = new AndroidTouchAction(getDriver());
		touch.longPress(LongPressOptions.longPressOptions().withElement(ElementOption.element(element)))
				.waitAction(WaitOptions.waitOptions(Duration.ofMillis(3000))).moveTo(PointOption.point(pointX, pointY))
				.release().perform();

	}
/**
 * @ModifiedBy Madhav
 * @Note this method is used to verify the user default selected Display Language.
 * @param userType
 * @throws Exception
 */
	public void verifyDisplayLanguage(String userType) throws Exception {
		extent.HeaderChildNode("Display Language Validation from Settings");
		if (userType.equalsIgnoreCase("Guest")) {
			logger.info("Display Language Validation from Settings");
			waitTime(5000);
			click(AMDHomePage.MoreMenuIcon, "More Menu");
			verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings Option");
			swipeUntilFindElement(AMDLoginScreen.objDisplayLang, "Up");
			String lang = findElement(AMDLoginScreen.objDisplayLang).getText();
			if (lang.equalsIgnoreCase("English")) {
				logger.info("Selected Display language for Guest is : " + lang);
				extentLoggerPass("Display Languages", "Selected Display language for Guest is : " + lang);
			} else {
				logger.info("Selected Display language for Guest is not English, instead : " + lang);
				extentLoggerFail("Display Languages",
						"Selected Display language for Guest is not English, instead : " + lang);
			}
			navigateBackToHomeLandingScreen();
		} else {
			logger.info("Not applicable for " + userType);
			extentLogger("Display Languages", "Not applicable for " + userType);
		}
	}

	/**
	 * @implNote This method will add the content to watchlist
	 * @param userType
	 * @param searchKeyword 
	 * @throws Exception
	 */
	public void AddToWatchlist(String userType, String searchKeyword) throws Exception {
			extent.HeaderChildNode("Validation of Availability and Functionality of Watchlist icon");
			if (!(userType.equalsIgnoreCase("Guest"))) {
				waitTime(3000);
				click(AMDSearchScreen.objSearchIcon, "Search icon");
				click(AMDSearchScreen.objSearchEditBox, "Search Box");
				type(AMDSearchScreen.objSearchBoxBar, searchKeyword,"Search bar");
				waitTime(3000);
				click(AMDSearchScreen.objSearchkeypad, "search icon in keypad");
				hideKeyboard();
				click(AMDSearchScreen.objContentNameInPlayer(searchKeyword), "Search result");
				//click(AMDSearchScreen.objSearchResultContainsText(searchKeyword), "Search result");
				waitTime(8000);
				if (userType.equals("Guest"))
					registerPopUpClose();
				if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
					waitForAdToFinishInAmd();
				}
				boolean value = verifyElementDisplayed(AMDConsumptionScreen.objWatchlistBtn);
				if (value) {
					logger.info("'Watchlist' icon is displayed in Consumption screen");
					extent.extentLoggerPass("Downloads Screen", "'Watchlist' icon is displayed in Consumption screen");
					click(AMDConsumptionScreen.objWatchlistBtn, "Watchlist icon");
				} else {
					logger.error("'Watchlist' icon is NOT displayed in Consumption screen");
					extent.extentLoggerFail("Downloads Screen", "'Watchlist' icon is NOT displayed in Consumption screen");
				}
				BackToLandingScreen();
			} else {
				logger.info("Not applicable for " + userType);
				extent.extentLogger("Watchlist", "Not applicable for " + userType);
			}
		}
	/**
	 * @note this method is used for payment screen validation
	 * @throws Exception
	 */
	public void paymentGatwayValidation() throws Exception {
		HeaderChildNode("payment screen validation");
		waitTime(3000);
		verifyElementPresentAndClick(AMDHomePage.objBuyPlanCTA, "Buy Plan CTA");
		waitTime(3000);
		click(AMDSubscibeScreen.objContinueBtn, "Continue button");
		waitTime(2000);
		click(AMDSubscibeScreen.objEmailID, "Email id");
		type(AMDSubscibeScreen.objEmailID, "luckyigscon0074@gmail.com", "Email ID");
		hideKeyboard();
		verifyElementPresentAndClick(AMDSubscibeScreen.objContinueBtn, "Continue button");
		click(AMDSubscibeScreen.objEnterPassword, "Password");
		type(AMDSubscibeScreen.objEnterPassword, "vasilucky@123", "Password");
		hideKeyboard();
		verifyElementPresentAndClick(AMDSubscibeScreen.objContinueBtn, "Continue button");
		waitTime(2000);
		verifyElementPresentAndClick(AMDSubscibeScreen.objEntercardnumber, "Enter Card Number");
		if (verifyElementPresent(AMDSubscibeScreen.objAddCreditDebitCard, "Add a Credit/Dbit Card screen")) {
			logger.info("Add a Credit/Dbit Card screen is displayed");
			extent.extentLoggerPass("Downloads Screen", "Add a Credit/Dbit Card screen is displayed");
		} else {
			logger.info("Add a Credit/Dbit Card screen is not displayed");
			extent.extentLoggerFail("Downloads Screen", "Add a Credit/Dbit Card screen is not displayed");
		}
		hideKeyboard();
		Back(1);
		waitTime(2000);
		verifyElementPresentAndClick(AMDSubscibeScreen.objUPI, "UPI");

		if (verifyElementDisplayed(AMDSubscibeScreen.objPhonepeChk)) {
			verifyElementPresentAndClick(AMDSubscibeScreen.objPhonepeChk, "Phonepe check box");
			verifyElementPresentAndClick(AMDSubscibeScreen.objPayNow, "Pay Now");
			waitTime(1000);
			if (verifyElementPresent(AMDSubscibeScreen.objPhonePeScreen, "PhonePe Payment Screen")) {
				logger.info("Navigated to payment screen");
				extent.extentLoggerPass("Downloads Screen", "Navigated to payment screen");
				Back(1);
				verifyElementPresentAndClick(AMDSubscibeScreen.objYes, "Yes CTA on PhonePe");
				waitTime(4000);
				Back(1);
				verifyElementPresentAndClick(AMDSubscibeScreen.objContinueBtn, "Continue button");
			} else {
				logger.info("Payment failed pop up");
				extent.extentLoggerFail("Downloads Screen", "Payment failed pop up");
				Back(1);
				verifyElementPresentAndClick(AMDSubscibeScreen.objContinueBtn, "Continue button");
			}
		} else {
			logger.info("Preconditions not met PhonePe App is not installed in the device");
			hideKeyboard();
			Back(1);
		}
		loopBank("Airtel Payments Bank");
		loopBank("CityUnion");
		loopBank("Dhanalaxmi Bank");
		loopBank("Federal Bank");
		loopBank("IDFC FIRST Bank");

		loopBank("Indian Bank ");
		loopBank("Indian Overseas Bank");
		loopBank("IndusInd Bank");
		scroll = true;
		loopBank("Industrial Development Bank of India");
		loopBank("Jammu and Kashmir Bank");
		loopBank("Karur Vysya ");

		loopBank("Kotak Bank");
		loopBank("Paytm Payments Bank Limited");
		loopBank("Punjab National Bank");
		scroll = true;
		scroll = true;
		loopBank("Punjab and Sind Bank");
		loopBank("Shamrao Vithal Coop Bank");
		scroll = true;
		loopBank("South Indian Bank");
		loopBank("Yes Bank");
	}
/**
 * @note this method is used for verifying bank names
 * 
 * @param BankName
 * @throws Exception
 */
	public void loopBank(String BankName) throws Exception {
		verifyElementPresentAndClick(AMDSubscibeScreen.objNetbanking, "Net Banking");

		boolean value = verifyElementDisplayed(AMDSubscibeScreen.objBank(BankName));

		if (!value) {
			scroll = true;
			if (scroll) {
				waitTime(2000);
				Swipe("UP", 1);
			}
			if (!value) {
				scroll = true;
				if (scroll) {
					waitTime(2000);
					Swipe("UP", 1);
				}
			}
		}
		verifyElementPresentAndClick(AMDSubscibeScreen.objBank(BankName), BankName);
		verifyElementPresentAndClick(AMDSubscibeScreen.objPayNow, "Pay Now");
		bankScreen(BankName);
		cancelTransaction();
	}
/**
 * @note this method is used for verifying the bank options in netbanking screen.
 * @param BankName
 * @throws Exception
 */
	public void bankScreen(String BankName) throws Exception {
		switch (BankName) {
		case "Airtel Payments Bank":
			if (verifyElementDisplayed(AMDSubscibeScreen.objAirtelBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "CityUnion":
			if (verifyElementDisplayed(AMDSubscibeScreen.objCityUnionBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "Dhanalaxmi Bank":
			if (!verifyElementDisplayed(AMDSubscibeScreen.objPaymentfailed)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "Federal Bank":
			if (verifyElementDisplayed(AMDSubscibeScreen.objFederalBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "IDFC FIRST Bank":
			if (verifyElementDisplayed(AMDSubscibeScreen.objIDFCFirstBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "Indian Bank":
			if (verifyElementDisplayed(AMDSubscibeScreen.objIndianBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "Indian Overseas Bank":
			if (verifyElementDisplayed(AMDSubscibeScreen.objIndianOverseasBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "IndusInd Bank":
			if (verifyElementDisplayed(AMDSubscibeScreen.objIndusIndBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "Industrial Development Bank of India":
			if (verifyElementDisplayed(AMDSubscibeScreen.objIndustrialDevelopmentBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "Jammu and Kashmir Bank":
			if (verifyElementDisplayed(AMDSubscibeScreen.objJammuAndKashmirBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "Karur Vysya":
			if (verifyElementDisplayed(AMDSubscibeScreen.objKarurVysyaBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "Kotak Bank":
			if (verifyElementDisplayed(AMDSubscibeScreen.objKotakBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "Paytm Payments Bank Limited":
			if (verifyElementDisplayed(AMDSubscibeScreen.objPaytmPaymentsBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "Punjab National Bank":
			if (verifyElementDisplayed(AMDSubscibeScreen.objPunjabNationalBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "Punjab and Sind Bank":
			if (verifyElementDisplayed(AMDSubscibeScreen.objPunjabAndSindBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "Shamrao Vithal Coop Bank":
			if (verifyElementDisplayed(AMDSubscibeScreen.objShamraoVithalBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "South Indian Bank":
			if (verifyElementDisplayed(AMDSubscibeScreen.objSouthIndianBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;
		case "Yes Bank":
			if (verifyElementDisplayed(AMDSubscibeScreen.objYesBankScreen)) {
				logger.info("Navigated to " + BankName + " bank screen");
				extent.extentLoggerPass("Screen", "Navigated to " + BankName + " bank screen");
			} else {
				logger.info("Not Navigated to " + BankName + " bank screen");
				extent.extentLoggerFail("Screen", "Not Navigated to " + BankName + " bank screen");
			}
			break;

		}
	}
/**
 * @note this method is used for cancelling the transaction.
 * @throws Exception
 */
	public void cancelTransaction() throws Exception {
		Back(1);
		verifyElementPresentAndClick(AMDSubscibeScreen.objCancelTransaction, "Cancel transacion");
		verifyElementPresentAndClick(AMDSubscibeScreen.objOk, "Ok");
		waitTime(2000);
		Back(1);
		verifyElementPresentAndClick(AMDSubscibeScreen.objContinueBtn, "Continue button");
	}
/**
 * @note this method is used for validating aMA2_18154 ticket.
 * @throws Exception
 */
	public void aMA2_18154() throws Exception {
		verifyElementPresentAndClick(AMDHomePage.objKnowMore, "Know more");
		if (verifyElementPresent(AMDHomePage.objLearningPage, "Learnig Page")) {

		}
		Back(1);
		verifyElementPresentAndClick(AMDHomePage.objcarouselBanner, "Know more");
		if (verifyElementPresent(AMDHomePage.objLearningPage, "Know more")) {

		}
	}
/**
 * @note this method is used for verifying user navigation to login/register screen from more menu
 * @throws Exception
 */
	public void verifyOfLoginScreenThroughLoginOrRegisterButton() throws Exception {
		HeaderChildNode(
				"Verifing that user is navigated to Login  screen post tapping on Login/Register button available on More Menu");
		relaunch(false);
		waitTime(2000);
		click(AMDHomePage.objMoreMenu, "More Menu");
		verifyElementPresentAndClick(AMDLoginScreen.objProfileIcon, "Login/Register Button");
		if (verifyIsElementDisplayed(AMDLoginScreen.objLoginPage)) {
			logger.info(
					"User is navigated to Login Screen Tapping on the Login/Register button present in the More Screen");
			extentLoggerPass("Login/Register Screen",
					"User is navigated to Login Screen Tapping on the Login/Register button present in the More Screen");
		} else {
			logger.error(
					"User is not navigated to Login Screen Tapping on the Login/Register button present in the More Screen");
			extentLoggerFail("Login/Register Screen",
					"User is not navigated to Login Screen Tapping on the Login/Register button present in the More Screen");
		}
	}
/**
 * @note this method is used for verifying User is navigated to Login Screen Tapping on the My Subscription button present in the More Screen
 * @throws Exception
 */
	public void verifyOfLoginScreenThroughMySubscriptionButton() throws Exception {
		HeaderChildNode(
				"Verifing that user is navigated to Login screen post tapping on My Subscription button available on More Menu");
		relaunch(false);
		waitTime(2000);
		click(AMDHomePage.objMoreMenu, "More Menu");
		verifyElementPresentAndClick(AMDMoreMenu.objMySubscription, "My Subscription Button");
		if (verifyIsElementDisplayed(AMDLoginScreen.objLoginPage)) {
			logger.info(
					"User is navigated to Login Screen Tapping on the My Subscription button present in the More Screen");
			extentLoggerPass("Login/Register Screen",
					"User is navigated to Login Screen Tapping on the My Subscription button present in the More Screen");
		} else {
			logger.error(
					"User is not navigated to Login Screen Tapping on the My Subscription button present in the More Screen");
			extentLoggerFail("Login/Register Screen",
					"User is not navigated to Login Screen Tapping on the My Subscription button present in the More Screen");
		}
	}
/**
 * @note this smethod is used for Verifing that user is navigated to Login screen post tapping on My Transaction button available on More Menu
 * @throws Exception
 */
	public void verifyOfLoginScreenThroughMyTransactionButton() throws Exception {
		HeaderChildNode(
				"Verifing that user is navigated to Login screen post tapping on My Transaction button available on More Menu");
		relaunch(false);
		waitTime(2000);
		click(AMDHomePage.objMoreMenu, "More Menu");
		verifyElementPresentAndClick(AMDMoreMenu.objMyTransactions, "My Transaction Button");
		if (verifyIsElementDisplayed(AMDLoginScreen.objLoginPage)) {
			logger.info(
					"User is navigated to Login Screen Tapping on the My Transaction button present in the More Screen");
			extentLoggerPass("Login/Register Screen",
					"User is navigated to Login Screen Tapping on the My Transaction button present in the More Screen");
		} else {
			logger.error(
					"User is not navigated to Login Screen Tapping on the My Transaction button present in the More Screen");
			extentLoggerFail("Login/Register Screen",
					"User is not navigated to Login Screen Tapping on the My Transaction button present in the More Screen");
		}
	}
/**
 * @note this method is used for Verifing that user is navigated to Login screen post tapping on Watchlist button available on More Menu
 * @throws Exception
 */
	public void verifyOfLoginScreenThroughWatchlistButton() throws Exception {
		HeaderChildNode(
				"Verifing that user is navigated to Login screen post tapping on Watchlist button available on More Menu");
		relaunch(false);
		waitTime(2000);
		click(AMDHomePage.objMoreMenu, "More Menu");
		verifyElementPresentAndClick(AMDMoreMenu.objWatchlist, "Watchlist Button");
		if (verifyIsElementDisplayed(AMDLoginScreen.objLoginPage)) {
			logger.info("User is navigated to Login Screen Tapping on the Watchlist button present in the More Screen");
			extentLoggerPass("Login/Register Screen",
					"User is navigated to Login Screen Tapping on the Watchlist button present in the More Screen");
		} else {
			logger.error(
					"User is not navigated to Login Screen Tapping on the Watchlist button present in the More Screen");
			extentLoggerFail("Login/Register Screen",
					"User is not navigated to Login Screen Tapping on the Watchlist button present in the More Screen");
		}
	}
/**
 * @note this method is used for Verifing that user is navigated to Login  screen post tapping on Watchlist button available in Consumption screen
 * @throws Exception
 */
	public void verifyOfLoginScreenThroughWatchlistButtonFromConsumptionPage() throws Exception {
		HeaderChildNode(
				"Verifing that user is navigated to Login  screen post tapping on Watchlist button available in Consumption screen");
		relaunch(false);
		waitTime(2000);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, "Bhinna", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objFirstSearchResult, "Search result");
		waitTime(5000);
		verifyElementPresentAndClick(AMDConsumptionScreen.objWatchlistBtn, "Watchlist Button");
		if (verifyIsElementDisplayed(AMDLoginScreen.objLoginPage)) {
			logger.info(
					"User is navigated to Login Screen Tapping on the Watchlist button available in Consumption screen");
			extentLoggerPass("Login/Register Screen",
					"User is navigated to Login Screen Tapping on the Watchlist button available in Consumption screen");
		} else {
			logger.error(
					"User is not navigated to Login Screen Tapping on the Watchlist button available in Consumption screen");
			extentLoggerFail("Login/Register Screen",
					"User is not navigated to Login Screen Tapping on the Watchlist button available in Consumption screen");
		}
	}
/**
 * @note this method is used for Verifing that user is navigated to Login  screen post tapping on Download button available in Consumption screen
 * @throws Exception
 */
	public void verifyOfLoginScreenThroughDownloadButtonFromConsumptionPage() throws Exception {
		HeaderChildNode(
				"Verifing that user is navigated to Login  screen post tapping on Download button available in Consumption screen");
		relaunch(false);
		waitTime(2000);
		click(AMDHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, "Bhinna", "Search box");
		hideKeyboard();
		waitTime(6000);
		click(AMDSearchScreen.objFirstSearchResult, "Search result");
		waitTime(5000);
		verifyElementPresentAndClick(AMDConsumptionScreen.objDownloadBtn, "Download Button");
		if (verifyIsElementDisplayed(AMDLoginScreen.objLoginPage)) {
			logger.info(
					"User is navigated to Login Screen Tapping on the Download button available in Consumption screen");
			extentLoggerPass("Login/Register Screen",
					"User is navigated to Login Screen Tapping on the Download button available in Consumption screen");
		} else {
			logger.error(
					"User is not navigated to Login Screen Tapping on the Download button available in Consumption screen");
			extentLoggerFail("Login/Register Screen",
					"User is not navigated to Login Screen Tapping on the Download button available in Consumption screen");
		}
	}
/**
 * @note this method is used for Verifing that user is navigated to Login screen post tapping on deeplinking URL
 * @param tabName
 * @throws Exception
 */
	public void verifyOfLoginScreenThroughDeepLinks(String tabName) throws Exception {
		HeaderChildNode("Verifing that user is navigated to Login screen post tapping on deeplinking URL");
		relaunch(false);
		try {
			waitTime(5000);
			String cmd3 = "adb shell am start -W -a android.intent.action.VIEW -d  \"https://www.zee5.com/" + tabName
					+ "\" com.graymatrix.did";
			System.out.println(cmd3);
			Process process = Runtime.getRuntime().exec(cmd3);
			new BufferedReader(new InputStreamReader(process.getInputStream()));
			waitTime(12000);
			verifyElementExist(AMDLoginScreen.objLoginLnk, "Login/Register Screen");
		} catch (Exception e) {
			logger.error("Failed to execute the deeplink for " + tabName);
			extent.extentLoggerFail("", "Failed to execute the deeplink for " + tabName);
		}
	}
/**
 * @note this method is used for Verifying that User is allowed to enter registered  Email ID/Mobile number in Enter Email ID or Mobile number field
 * @param RegisteredEmail
 * @throws Exception
 */
	public void verifyEmailIDFieldInLoginOrRegisterScreen(String RegisteredEmail) throws Exception {
		HeaderChildNode(
				"Verifing that User is allowed to enter registered  Email ID/Mobile number in Enter Email ID or Mobile number field");
		relaunch(false);
		waitTime(2000);
		click(AMDHomePage.objMoreMenu, "More Menu");
		verifyElementPresentAndClick(AMDLoginScreen.objProfileIcon, "Profile icon");
		click(AMDLoginScreen.objEmailIdField, "Email Field");
		type(AMDLoginScreen.objEmailIdField, RegisteredEmail, "Email Field");
		hideKeyboard();
		click(AMDLoginScreen.objProceedBtn, "Proceed button");
		waitTime(5000);
		if (verifyIsElementDisplayed(AMDLoginScreen.objPasswordField, "Password field")) {
			logger.info(
					"User is allowed to enter registered  Email ID/Mobile number in Enter Email ID or Mobile number field");
			extentLoggerPass("Login Screen",
					"User is allowed to enter registered  Email ID/Mobile number in Enter Email ID or Mobile number field");
		} else {
			logger.error(
					"User is not allowed to enter registered  Email ID/Mobile number in Enter Email ID or Mobile number field");
			extentLoggerFail("Login Screen",
					"User is not allowed to enter registered  Email ID/Mobile number in Enter Email ID or Mobile number field");
		}
	}
/**
 * @note this method is used for Verifing that Password field is displayed when user enters a valid email id in enter email id or number field
 * @param RegisteredEmail
 * @throws Exception
 */
	public void verifyPasswordField(String RegisteredEmail) throws Exception {
		HeaderChildNode(
				"Verifying that Password field is displayed when user enters a valid email id in enter email id or number field");
		relaunch(false);
		waitTime(2000);
		click(AMDHomePage.objMoreMenu, "More Menu");
		verifyElementPresentAndClick(AMDLoginScreen.objProfileIcon, "Profile icon");
		click(AMDLoginScreen.objEmailIdField, "Email Field");
		type(AMDLoginScreen.objEmailIdField, RegisteredEmail, "Email Field");
		hideKeyboard();
		click(AMDLoginScreen.objProceedBtn, "Proceed button");
		waitTime(5000);
		verifyElementExist(AMDLoginScreen.objPasswordField, "Password field");
	}
/**
 * @note this method is used for Verifying that email ID field accept the email id enter in standard email id format
 * @param RegisteredEmail
 * @throws Exception
 */
	public void verifyEmailIDInStandardFormat(String RegisteredEmail) throws Exception {
		HeaderChildNode("Verifying that email ID field accept the email id enter in standard email id format");
		relaunch(false);
		waitTime(2000);
		click(AMDHomePage.objMoreMenu, "More Menu");
		verifyElementPresentAndClick(AMDLoginScreen.objProfileIcon, "Profile icon");
		click(AMDLoginScreen.objEmailIdField, "Email Field");
		type(AMDLoginScreen.objEmailIdField, RegisteredEmail, "Email Field");
		hideKeyboard();
		String getEmailID = getText(AMDLoginScreen.objEmailIdField);
		if (getEmailID.length() > 1) {
			boolean isEmailValid = emailValidator(getEmailID);
			System.out.println(isEmailValid);
			if (isEmailValid) {
				extent.extentLoggerPass("Verify EmailID", "Email ID: " + getEmailID + " displayed is standard format");
				logger.info("Email ID: " + getEmailID + " is in standard format");
			} else {
				extent.extentLoggerFail("Verify EmailID",
						"Email ID: " + getEmailID + " is not displayed in standard format");
				logger.error("Email ID: " + getEmailID + " is not displayed in standard format");
			}
		}
	}
/**
 * @note this method is used for verifying conviva content playback verification
 * @param userType
 * @param ipaddress
 * @throws Exception
 */
	public void convivaVerification(String userType, String ipaddress) throws Exception {
		String firstContentID = "0-0-103559";
		String firstContentName = "Robin Hood Forever Enemies";
		String firstContentMetaInSearch = "English";
		ArrayList<String> firstContentdata = new ArrayList<String>();
		firstContentdata.add(firstContentID);
		firstContentdata.add(firstContentName);
		firstContentdata.add(firstContentMetaInSearch);
		// Initial Conviva setup
		WebDriver driverForWeb = initialSetUpForConviva(ipaddress);
		ArrayList<Integer> playerTapDetails = setFilterForConviva(driverForWeb, firstContentdata);
		// TC1 Attempts, TC2 Concurrent Plays, TC4 VST, TC5 Avg Percent Complete, TC6
		// Pause video, TC11 Average Frame Rate
		verifyConvivaAttemptsConcurrentPlaysVST(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC9 T37 exitBeforeVideoStarts
		verifyConvivaExitBeforeVideoStarts(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC13 Click on progress bar
		verifyConvivaClickOnProgressBar(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC14 Drag on progress bar
		verifyConvivaDragOnProgressBar(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC15 Forward on progress bar
		verifyConvivaForwardOnProgressBar(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC16 Background
		verifyConvivaAppPutToBackground(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC17 Device sleep
		verifyConvivaPhoneLockUnlock(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC19 Landscape
		verifyConvivaLandscapePlayer(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC20 Session Close
		verifyConvivaSessionClose(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC21 Session End
		verifyConvivaOnEndOfSession(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC27 Session after Midroll
		verifyConvivaAfterMidRoll(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC28 Session after Postroll
		verifyConvivaAfterPostRoll(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC29 Seek past midroll
		verifyConvivaAfterMidRollThroughSeek(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC30 Background during Ad Play
		verifyConvivaOnBackgroundDuringAdPlay(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC31 Ad Click
		verifyConvivaOnAdClick(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC32 Video Replay
		verifyConvivaOnContentReplay(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC33 Multiple video play
		verifyConvivaOnMultipleContentPlay(userType, driverForWeb, firstContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(firstContentID, 1, "");
		// TC34 End of stream to next playlist item
		String episodeContentID = "0-1-manual-65mhjdvejur0";
		String episodeName = "Rhea and Siddharth Evade Arrest";
		String episodeNameInSearch = "Kumkum Bhagya - Episode 1900 - Jul 19, 2021";
		String episodeMeta = "Hindi";
		String audioLanguage = "Hindi";
		String category = "TV Show";
		String contentType = "episode";
		String episodeNumber = "Episode 1900";
		String genre = "Drama";
		String rootID = "1900";
		String show = "Kumkum Bhagya";
		String contentAccessType = "advertisement_downloadable";
		ArrayList<String> episodeContentdata = new ArrayList<String>();
		episodeContentdata.add(episodeContentID);
		episodeContentdata.add(episodeName);
		episodeContentdata.add(episodeNameInSearch);
		episodeContentdata.add(episodeMeta);
		episodeContentdata.add(audioLanguage);
		episodeContentdata.add(category);
		episodeContentdata.add(contentType);
		episodeContentdata.add(episodeNumber);
		episodeContentdata.add(genre);
		episodeContentdata.add(rootID);
		episodeContentdata.add(show);
		episodeContentdata.add(contentAccessType);
		verifyConvivaOnUpnextContentPlay(userType, driverForWeb, episodeContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(episodeContentID, 1, "");
		// TC35 Skip to next playlist item
		verifyConvivaOnSkipContentAndPlayAnother(userType, driverForWeb, episodeContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(episodeContentID, 1, "");
		// TC42 CDN, TC43 Meta data in session, TC45 Device Tags, TC46 Required Tags,
		// TC47 Custom Tags
		verifyConvivaMetaDataAndCDN(userType, driverForWeb, episodeContentdata, playerTapDetails);
		ResponseInstance.updateWatchHistory(episodeContentID, 1, "");
	}
/**
 * 
 * @param ipaddress
 * @return
 * @throws Exception
 */
	public WebDriver initialSetUpForConviva(String ipaddress) throws Exception {
		extent.HeaderChildNode("Conviva launch, login and initial setup");
		System.out.println("------------------- Conviva launch, login and initial setup -------------------");
		extent.extentLogger("", "<b>---------- Launch Conviva ----------</b>");
		String phonePublicIP = ipaddress;
//		System.setProperty("webdriver.chrome.driver",
//				"C:\\Users\\User\\.m2\\repository\\webdriver\\chromedriver\\win32\\90.0.4430.24\\chromedriver.exe");
//		WebDriverManager.chromedriver().version(DriverInstance.getDriverVersion()).setup();
        WebDriverManager.chromedriver().cachePath("Drivers").setup();
		WebDriver driverForWeb = new ChromeDriver();
		driverForWeb.navigate().to("https://pulse.conviva.com/");
		logger.info("Launched Conviva website on Chrome");
		extent.extentLogger("", "Launched Conviva website on Chrome");
		driverForWeb.manage().window().maximize();
		logger.info("Maximized Chrome window");
		extent.extentLogger("", "Maximized Chrome window");
		waitTime(3000);
		extent.extentLogger("", "<b>---------- Login to Conviva ----------</b>");
		String userID = "murali.appadi@zee.esselgroup.com";
		String userPassword = "Ch@ng3m3!!";
		driverForWeb.findElement(PWAConvivaPage.objUserNameField).sendKeys(userID);
		driverForWeb.findElement(PWAConvivaPage.objNextButton).click();
		logger.info("Entered User ID : " + userID);
		extent.extentLogger("", "Entered User ID : " + userID);
		waitTime(5000);
		driverForWeb.findElement(PWAConvivaPage.objPasswordField).sendKeys(userPassword);
		logger.info("Entered Password : " + userPassword);
		extent.extentLogger("", "Entered Password : " + userPassword);
		driverForWeb.findElement(PWAConvivaPage.objSignInButton).click();
		logger.info("Logged in to Conviva");
		extent.extentLogger("", "Logged in to Conviva");
		waitTime(12000);
		extent.extentLogger("", "<b>---------- Select Admin User ----------</b>");
		driverForWeb.findElement(PWAConvivaPage.objUserTypeDropdown).click();
		logger.info("Clicked User dropdown");
		extent.extentLogger("", "Clicked User dropdown");
		waitTime(3000);
		driverForWeb.findElement(PWAConvivaPage.objAdminUser).click();
		logger.info("Clicked Admin user from dropdown");
		extent.extentLogger("", "Clicked Admin user from dropdown");
		waitTime(7000);
		extent.extentLogger("",
				"<b>---------- Register IP Address of Test Device for Device Validation ----------</b>");
		driverForWeb.get("https://pulse.conviva.com/device_validation/manage");
		logger.info("Opened https://pulse.conviva.com/device_validation/manage");
		extent.extentLogger("", "Opened https://pulse.conviva.com/device_validation/manage");
		waitTime(3000);
		JavascriptExecutor js = (JavascriptExecutor) driverForWeb;
		js.executeScript("window.scrollBy(0,300)", "");
		driverForWeb.findElement(PWAConvivaPage.objManageIPSortButton("For_Automation")).click();
		logger.info("Clicked on 'For_Automation' field in Manage IPs");
		extent.extentLogger("", "Clicked on 'For_Automation' field in Manage IPs");
		waitTime(2000);
		driverForWeb.findElement(PWAConvivaPage.objEditIP("For_Automation")).click();
		logger.info("Clicked on 'For_Automation' Edit button");
		extent.extentLogger("", "Clicked on 'For_Automation' Edit button");
		driverForWeb.findElement(PWAConvivaPage.objIPAddressField).clear();
		logger.info("Cleared IP Address field");
		extent.extentLogger("", "Cleared IP Address field");
		waitTime(3000);
		driverForWeb.findElement(PWAConvivaPage.objIPAddressField).sendKeys(phonePublicIP.trim());
		logger.info("Entered device public address : " + phonePublicIP.trim());
		extent.extentLogger("", "Entered device public address : " + phonePublicIP.trim());
		driverForWeb.findElement(PWAConvivaPage.objUpdateButton).click();
		logger.info("Clicked on Update button");
		extent.extentLogger("", "Clicked on Update button");
		return driverForWeb;
	}
	/**
	 * @note this method is used for payment screen validation
	 * @throws Exception
	 */
	public void subscribptionValidation() throws Exception {
		HeaderChildNode("payment screen validation");
		String pNewPassword = "123456";
		String newEmailId = "Auto" + generateRandomString(4) + "@ZEE.com";
		waitTime(3000);
		verifyElementPresentAndClick(AMDHomePage.objBuyPlanCTA, "Buy Plan CTA");
		waitTime(3000);
		click(AMDSubscibeScreen.objContinueBtn, "Continue button");
		waitTime(2000);
		click(AMDSubscibeScreen.objEmailID, "Email id");
		type(AMDSubscibeScreen.objEmailID, newEmailId, "Email ID");
		hideKeyboard();
		verifyElementPresentAndClick(AMDSubscibeScreen.objContinueBtn, "Continue button");
		click(AMDSubscibeScreen.objEnterPassword, "Password");
		type(AMDSubscibeScreen.objEnterPassword, pNewPassword, "Password");
		hideKeyboard();
		verifyElementPresentAndClick(AMDSubscibeScreen.objContinueBtn, "Continue button");
		waitTime(2000);
		verifyElementPresentAndClick(AMDSubscibeScreen.objEntercardnumber, "Enter Card Number");
	}
	/**
	 * @note this method is used for Learning Landing Page validation
	 * @param userType
	 * @throws Exception
	 */
	
	public void learningLandingPage(String userType) throws Exception {
		extent.HeaderChildNode("Learning Landing Page validation");
		System.out.println("------------------   Learning Screen validation   -------------------");
		selectTopNavigationTab("Learning");
		waitTime(5000);
		String text = getText(AMDLearningScreen.objCompleteLearningCourseText);		
		if(verifyElementDisplayed(AMDLearningScreen.objCompleteLearningCourseText)) {
			System.out.println(text);
			logger.info(text + " text is displayed in Learning Page");
			extent.extentLoggerPass("", text + " text is displayed in Learning Page");			
		} else {
			logger.error("Text is not displayed");
			extent.extentLoggerFail("", "Text is not displayed");	
		}
		
		if(!userType.contentEquals("SubscribedUser")) {
		PartialSwipe("UP", 1);
		if(verifyElementDisplayed(AMDLearningScreen.objBuyPlanCTAInWidget) & verifyElementDisplayed(AMDLearningScreen.objPremiumIconInBuyCTAWidget)) {
			logger.info("Buy Plan CTA with Premium icon inside the widget is displayed on Learning Page");
			extent.extentLoggerPass("",  " Buy Plan CTA with Premium icon inside the widget is displayed on Learning Page");
			click(AMDLearningScreen.objBuyPlanCTAInWidget, "Buy Plan CTA ");
			waitTime(5000);
			if(verifyElementDisplayed(AMDSubscibeScreen.objNewSubscribePopup)) {
				logger.info("Subscribe screen is displayed on clicking BUY PLAN CTA inside the widget on Learning Page");
				extent.extentLoggerPass("",  " Subscribe screen is displayed on clicking BUY PLAN CTA inside the widget on Learning Page");
			}else {
				logger.error("Subscribe screen is NOT displayed on clicking BUY PLAN CTA inside the widget on Learning Page");
				extent.extentLoggerFail("",  " Subscribe screen is NOT displayed on clicking BUY PLAN CTA inside the widget on Learning Page");
			}
			Back(1);		
			
		} else {
			logger.error("Buy Plan CTA with Premium icon inside the widget is NOT displayed on Learning Page");
			extent.extentLoggerFail("", "Buy Plan CTA with Premium icon inside the widget is NOT displayed on Learning Page");	
		}
				
		Swipe("DOWN", 1);
		}
	}
		
	/**
	 * @note this method is used for verifying the Learning Cosnumption Page and Subscription Screen validation
	 * @param userType
	 * @throws Exception
	 */
	public void verifyBuyPlan_on_ConsumptionPage_SubscriptionScreen(String userType) throws Exception {
			extent.HeaderChildNode("Learning Cosnumption Page and Subscription Screen validation");
	if(!userType.contentEquals("SubscribedUser")) {		
		checkElementExist(AMDHomePage.objPlayBtn, "Play icon");
		click(AMDHomePage.objPlayBtn, "Play icon");
		waitTime(5000);
		verifyElementExist(AMDPlayerScreen.objBuyNowCTABelowThePlayer, "Buy Plan CTA below the Player");
		click(AMDPlayerScreen.objBuyNowCTABelowThePlayer, "Buy Plan CTA below the Player");
		waitTime(5000);
		if(verifyElementDisplayed(AMDSubscibeScreen.objNewSubscribePopup)) {
			logger.info("Subscribe screen is displayed on clicking BUY PLAN CTA below the player");
			extent.extentLoggerPass("",  " Subscribe screen is displayed on clicking BUY PLAN CTA below the player");
		}else {
			logger.error("Subscribe screen is NOT displayed on clicking BUY PLAN CTA below the player");
			extent.extentLoggerFail("",  " Subscribe screen is NOT displayed on clicking BUY PLAN CTA below the player");
		}
		}
			}

 /**
  * @note this method is used to validate Subscription Page for Eduauraa content
  * @param userType
  * @throws Exception
  */
 	public void validationOfSubscriptionScreen_EduauraaContent(String userType) throws Exception {
 		extent.HeaderChildNode("Subscription Page validation for Eduauraa content");
 		if(!userType.contentEquals("SubscribedUser")) {	
 			boolean value = verifyElementDisplayed(AMDLearningScreen.objLearningmoduleTextInSubscriptionScreen);
 			if(value) {
 				String text1 = getText(AMDLearningScreen.objLearningmoduleTextInSubscriptionScreen);
 				verifyElementExist(AMDLearningScreen.objLearningmoduleTextInSubscriptionScreen, text1 + " text");
 				click(AMDLearningScreen.objLearningmoduleTextInSubscriptionScreen, text1 + " text");
 				waitTime(2000);
 				if(verifyElementDisplayed(AMDLearningScreen.objBottomDrawerPopup)) {
 					logger.info("Bottom drawer popup is displayed on tapping Learning courses in Subscription page");
 					extent.extentLoggerPass("",  "Bottom drawer popup is displayed on tapping Learning courses in Subscription page");
 					if(verifyElementDisplayed(AMDLearningScreen.subText1)) {
 						logger.info(getText(AMDLearningScreen.subText1)+ " text is displayed in popup");
 						extentLogger("",getText(AMDLearningScreen.subText1)+ " text is displayed in popup");					   
 					}
 					if(verifyElementDisplayed(AMDLearningScreen.subText2)) {
 						logger.info(getText(AMDLearningScreen.subText2)+ " text is displayed in popup");
 						extentLogger("",getText(AMDLearningScreen.subText2)+ " text is displayed in popup");					   
 					}
 					if(verifyElementDisplayed(AMDLearningScreen.subText3)) {
 						logger.info(getText(AMDLearningScreen.subText3)+ " text is displayed in popup");
 						extentLogger("",getText(AMDLearningScreen.subText3)+ " text is displayed in popup");					   
 					}
				
			 	}
 				else {
 					logger.error("Bottom drawer popup is displayed on tapping Learning courses in Subscription page");
 					extent.extentLoggerFail("",  "Bottom drawer popup is displayed on tapping Learning courses in Subscription page"); 
			 	}
		 	} 
 			else {
 				logger.info("Learning courses from Eduauraa benifits in Subscription page is NOT displayed");
				extent.extentLoggerWarning("",  "Learning courses from Eduauraa benifits in Subscription page is NOT displayed"); 
		 	}
	 	}	 
 	}
/**
 * @note this method is used to validate the Functionality of Keep Learning CTA
 * @throws Exception
 */
 	public void keepLearningCTAsValidation() throws Exception{	 
	 extent.HeaderChildNode("Validating the Functionality of Keep Learning CTA");
	 selectTopNavigationTab("Learning");
	 PartialSwipe("UP", 1);
		if(verifyElementDisplayed(AMDLearningScreen.objKeepLearningCTA)) {
			logger.info("Keep Learning CTA inside the widget is displayed on Learning Page for subscribed user");
			extent.extentLoggerPass("",  "Keep Learning CTA inside the widget is displayed on Learning Page for subscribed user");
			click(AMDLearningScreen.objKeepLearningCTA, "Keep Learning CTA ");
			waitTime(5000);
			if(verifyElementDisplayed(AMDLearningScreen.objExitZee5Popup)) {
				logger.info("Exit Zee5 popup is displayed on tapping Keep Learning CTA inside the widget");
				extent.extentLoggerPass("",  " Exit Zee5 popup is displayed on tapping Keep Learning CTA inside the widget");
			}else {
				logger.error("Exit Zee5 popup is NOT displayed on tapping Keep Learning CTA inside the widget");
				extent.extentLoggerFail("",  "Exit Zee5 popup is NOT displayed on tapping Keep Learning CTA inside the widget");
			}
			Back(1);
		}else {
			logger.info("Keep Learning CTA the widget is NOT displayed on Learning Page for subscribed user");
			extent.extentLoggerPass("",  "Keep Learning CTA the widget is NOT displayed on Learning Page for subscribed user");
		}
		Swipe("DOWN",1);
		checkElementExist(AMDHomePage.objPlayBtn, "Play icon");
		click(AMDHomePage.objPlayBtn, "Play icon");
		waitTime(5000);
		verifyElementExist(AMDLearningScreen.objKeepLearningCTABelowPlayer, "Keep Learning CTA below the Player");
		click(AMDLearningScreen.objKeepLearningCTABelowPlayer, "Keep Learning CTA below the Player");
		waitTime(5000);
		if(verifyElementDisplayed(AMDLearningScreen.objExitZee5Popup)) {
			logger.info("Exit Zee5 Pop up is displayed on Tapping Keep Learning CTA below the player in consumption page");
			extent.extentLoggerPass("",  "Exit Zee5 Pop up is displayed on Tapping Keep Learning CTA below the player in consumption page");
			click(AMDLearningScreen.objCancelCTAOnExitPopup,"Cancel CTA on Exit popup");
			waitTime(3000);
			if(checkElementExist(AMDLearningScreen.objKeepLearningCTABelowPlayer)) {
				logger.info("On clicking Cancel CTA in exit popup, User stayed on sampe Page");
				extent.extentLoggerPass("",  "On clicking Cancel CTA in exit popup, User stayed on sampe Page");
			}else {
				logger.error("On clicking Cancel CTA in exit popup, User FAILED to stay on sampe Page");
				extent.extentLoggerFail("",  "On clicking Cancel CTA in exit popup, User FAILED to stay sampe Page");
			}			
			
		}else {
			logger.error("Exit Zee5 Pop up is displayed on Tapping Keep Learning CTA below the player in consumption page");
			extent.extentLoggerFail("",  "Exit Zee5 Pop up is displayed on Tapping Keep Learning CTA below the player in consumption page");
		}
		
		click(AMDLearningScreen.objKeepLearningCTABelowPlayer, "Keep Learning CTA below the Player");
		verifyElementExist(AMDLearningScreen.objConfirmCTAOnExitPopup, "Confirm CTA");
		click(AMDLearningScreen.objConfirmCTAOnExitPopup, "Confirm CTA");
		waitTime(8000);
		if(verifyElementExist(AMDConsumptionScreen.objWelcomeToEduauraaPage, "Welcome to Eduauraa page")) {
			logger.info("On clicking Confirm CTA in exit popup, User is navigated to Web page");
			extent.extentLoggerPass("",  "On clicking Confirm CTA in exit popup, User is navigated to Web page");
			Back(1);
		}else {
			logger.info("On clicking Confirm CTA in exit popup, User FAILED to navigate to web page");
			extent.extentLoggerWarning("",  "On clicking Confirm CTA in exit popup, User FAILED to navigate to web page");
				}
		
 }
 
/**
 * @note this method is used to validate Zee5 Exit Popup
 * @throws Exception
 */
 	public void validateExitZee5Popup() throws Exception {
	 extent.HeaderChildNode("Validation of Zee5 Exit Popup");
	    selectTopNavigationTab("Learning");
	    PartialSwipe("UP", 1);
		waitTime(5000);	
		click(AMDLearningScreen.objKeepLearningCTA, "Keep Learning CTA");
		waitTime(5000);
		
		extent.HeaderChildNode("UI/UX of Exit ZEE5 Popup");
		String title = getText(AMDLearningScreen.objExitZee5Popup);
		logger.info("Title: " + title + " is displayed");
		extent.extentLoggerPass("",  "Title: " + title + " is displayed");
		verifyElementExist(AMDLearningScreen.objZeeLogoInExitPopup, "Zee5 Logo");
		verifyElementExist(AMDLearningScreen.objExitPopupDesc, "Exit Zee5 description in popup");
		verifyElementExist(AMDLearningScreen.objCancelCTAOnExitPopup, "Cancel CTA on Exit popup");
		verifyElementExist(AMDLearningScreen.objConfirmCTAOnExitPopup, "Confirm CTA on Exit popup");
		verifyElementExist(AMDLearningScreen.objHorizontalDividerLineInExitPopup, "Horizontal Divider Line on Exit popup");
		
		extent.HeaderChildNode("Validate that user is able to dismiss the Exit ZEE5 popup by tapping device back button");
		Back(1);
		if (!(verifyIsElementDisplayed(AMDLearningScreen.objExitZee5Popup))) {
			logger.info("Exit Zee5 Popup closes by tapping on the device Back button");
			extent.extentLoggerPass("Landing Screen", "Exit Zee5 Popup closes by tapping on the device Back button");
		} else {
			logger.error("Exit Zee5 Popup not closed by tapping on the device Back button");
			extent.extentLoggerFail("Landing Screen", "Exit Zee5 Popup not closed by tapping on the device Back button");
		}
		
		extent.HeaderChildNode("Validate that user is able to dismiss the Exit ZEE5 popup by sliding the popup.");
		click(AMDLearningScreen.objKeepLearningCTA, "Keep Learning CTA");
		SwipeDownOnExitpopUp("DOWN");
		if (!(verifyIsElementDisplayed(AMDLearningScreen.objExitZee5Popup))) {
			logger.info("Exit Zee5 Popup closes by sliding down the popup");
			extent.extentLoggerPass("Landing Screen", "Exit Zee5 Popup closes by sliding down the popup");
		} else {
			logger.error("Exit Zee5 Popup not closed by sliding down the popup");
			extent.extentLoggerFail("Landing Screen", "Exit Zee5 Popup not closed by sliding down the popup");
		}
		
		extent.HeaderChildNode("Validate that user is able to dismiss the Exit ZEE5 popup by tapping on minus symbol.");
		click(AMDLearningScreen.objKeepLearningCTA, "Keep Learning CTA");		
		verifyElementPresentAndClick(AMDLearningScreen.objHorizontalDividerLineInExitPopup, "ExitPopup Divider Minus Line");
		waitTime(2000);
		if (!(verifyIsElementDisplayed(AMDLearningScreen.objExitZee5Popup))) {
			logger.info("Exit Popup closes by tapping on the Horizontal Line Bar");
			extent.extentLoggerPass("Landing Screen", "Exit Popup closes by tapping on the Horizontal Line Bar");
		} else {
			logger.error("Exit Popup closes by tapping on the Horizontal Line Bar");
			extent.extentLoggerFail("Landing Screen", "Exit Popup closes by tapping on the Horizontal Line Bar");
		}
 	}
 	/**
 	 * @note this method is used for validating the Learning tab screen
 	 * @param UserType
 	 * @throws Exception
 	 */
 	public void eduauraaTabScreen(String UserType) throws Exception {

		extent.HeaderChildNode("Verifying Learning tab screen");
		System.out.println("Verifying Learning tab screen");

		// Selecting Marathi language as content language
		if (UserType.contains("Guest")) {
			selectContentLang_MoreMenu2("Marathi");
		}

		// Verify user is navigated to Premium tab
		selectTopNavigationTab("Learning");
		// closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000);
		String activeTab = getText(AMDHomePage.objSelectedTab);
		if (activeTab.equalsIgnoreCase("Learning")) {
			extent.extentLoggerPass("Verify user is navigated to Learning tab",
					"User is navigated to Eduauraa tab on clicking Learning tab");
			logger.info("User is navigated to Eduauraa tab on clicking Learning tab");
		} else {
			extent.extentLoggerFail("Verify user is navigated to Learning tab",
					"Failed to navigate to Eduauraa tab on clicking Learning tab");
			logger.info("Failed to navigate to Eduauraa tab on clicking Learning tab");
		}

		// Verify Subscribe icon is displayed
		if (UserType.contains("SubscribedUser")) {
			extent.extentLoggerPass("Subscribe Icon", "Buy Plan Icon is not displayed for " + UserType);
			logger.info("Buy Plan Icon is not displayed for " + UserType);
		} else {
			verifyElementPresent(AMDHomePage.objSubscribeIcon, "Buy Plan icon in Kids tab");
		}

		if (verifyElementDisplayed(AMDHomePage.objZee5Logo)) {
			logger.info("Zee5 logo is dislayed");
			extent.extentLoggerPass("Zee5 logo", "Zee5 logo is dislayed");
		} else {
			logger.error("Zee5 logo is not dislayed");
			extent.extentLoggerFail("Zee5 logo", "Zee5 logo is NOT dislayed");
		}

		if (userType.contentEquals("SubscribedUser")) {
			if (verifyElementIsNotDisplayed(AMDHomePage.objContinueWatchingTray)) {
				logger.info("Continue watching tray is NOT displayed for Learning tab");
				extent.extentLoggerPass("Continue watching",
						"Continue watching tray is NOT displayed for Learning tab");
			} else {
				logger.error("Continue watching tray is displayed for Learning tab");
				extent.extentLoggerFail("Continue watching", "Continue watching tray is displayed for Learning tab");
			}
		}

		// Verify Trending on ZEE5 tray is displayed
		// verifyElementPresent(AMDHomePage.objTrendingOnZee5Tray, "Trending on Zee5");
		// Verify Play icon is displayed
		String carouselContent = getText(AMDHomePage.objCarouselTitle1);
		carouselValidation(UserType, "Learning", carouselContent);
		if (UserType.contains("Guest")) {
			resetSettings();
		}
	} 
 /**
  * @note this method is used for Validation of Demo vidoes
  * @throws Exception
  */
 	public void demoVideo_Validation() throws Exception {
	 extent.HeaderChildNode("Validation of Demo vidoes");
	 selectTopNavigationTab("Learning");
	 findParticularTray(AMDLearningScreen.objCmptvExamRail, "For Competitive Exams");
	 click(AMDLearningScreen.objViewAllIcon,"More icon");
	 waitTime(3000);
	 verifyElementExist(AMDLearningScreen.objCollectionScreen, "Respective Listing screen");
	 click(AMDLearningScreen.objFirstContentCardInListingScreen,"First content card");
	 waitTime(3000);
	 String railname = getText(AMDLearningScreen.objFirstRailInCourseListingScreen);
	 verifyElementExist(AMDLearningScreen.objFirstRailInCourseListingScreen, railname + " tray");
	 click(AMDLearningScreen.objViewAllIcon,"More icon");
	 String ListingScreentitle = getText(AMDLearningScreen.objCollectionScreen);
	 if(railname.contentEquals(ListingScreentitle)) {
		 logger.info("User is navigated to Respective " + railname + " subject collection screen");
		extent.extentLoggerPass("", "User is naviagted to Respective " + railname + " subject collection screen");
	 }else {
		 logger.error("Failed to navigate to respective subject collection screen");
		 extent.extentLoggerFail("", "Failed to navigate to respective subject collection screen");
	 } 	 
	 
	 int total = getDriver().findElements(AMDLearningScreen.objVideosUnderSubject).size();
	 for (int i = 1; i <= total; i++) {
				String videoname = getDriver().findElement(By.xpath("(//*[@id='cell_bottom_container']//child::*[1])[" + i + "]")).getText();
				logger.info(i + " :" + videoname + " video is displayed under " + railname + " subject listing screen" );
				extent.extentLoggerPass("",i + " :" + videoname + " video is displayed under " + railname + " subject listing screen" );				
			}
	 waitTime(3000);
	 click(AMDLearningScreen.objFirstContentCardUnderSubjectListingScreen,"First content");
	 waitTime(3000);
	 boolean value1 = verifyElementExist(AMDLearningScreen.objDemoVideoTextInPlayerScreen,"Demo video description in Player screen");
	 boolean value2 = verifyElementExist(AMDLearningScreen.objTitleInConsumptionScreen,"Title of the content");
	 if(value1 | value2) {
		 logger.info("Demo videos are tappable and User is able to navigate to consumption screen on clicking demo video");
		extent.extentLoggerPass("", "Demo videos are tappable and User is able to navigate to consumption screen on clicking demo video");
	 }else {
		 logger.error("Demo videos are Non-tappable and User is Unable to navigate to consumption screen on clicking demo video");
		extent.extentLoggerFail("", "Demo videos are Non-tappable and User is Unable to navigate to consumption screen on clicking demo video"); 
	 }
	 
 }  
/**
 * @note this method is used for Upcoming Content Validation With API Data
 * @param userType
 * @throws Exception
 */
    public void upcomingContentValidationWithAPIData(String userType) throws Exception {

		extent.HeaderChildNode("Upcoming Content Validation With API Data");
		waitForElementDisplayed(AMDHomePage.objHomeTab, 10);
		verifyElementPresentAndClick(AMDHomePage.objUpcoming, "Upcoming tab");
		Response resp = ResponseInstance.getResponseForUpcomingPage(userType);
		List<String> apiTitle = new LinkedList<String>();
		List<String> apiMetadata = new LinkedList<String>();
		List<String> contentList = resp.jsonPath().getList("buckets[0].items");
		System.out.println(contentList.size());

		for (int i = 0; i < contentList.size(); i++) {
			String title = resp.jsonPath().getString("buckets[0].items[" + i + "].title");
			System.out.println("Show Title : " + title);

			apiTitle.add(title);

			String metadata = resp.jsonPath().getString("buckets[0].items[" + i + "].description");
			System.out.println("API Metadata : " + metadata);
			apiMetadata.add(metadata);

			String contentName = apiTitle.get(i);
			// System.out.println(contentName);

			String convertedXpath = titleToXpath(contentName);
			System.out.println(convertedXpath);

			String contentDescription = apiMetadata.get(i);
			String convertedXpath1 = titleToXpath(contentDescription);
			System.out.println(convertedXpath1);

			String UIMetadata = getDriver().findElement(AMDUpcomingPage.objTitle(convertedXpath1)).getText();

			// System.out.println(UIMetadata);

			if (checkElementExist(AMDUpcomingPage.objTitle(convertedXpath), "Show Title : " + title)) {
				logger.info("Title of the content card matches with Api data");
				extent.extentLoggerPass("Title", "Title of the content card matches with Api data");
			} else {
				logger.info("Title of the content card does not match with Api data");
				extent.extentLoggerFail("Title", "Title of the content card does not match with Api data");
			}

			if (UIMetadata.contains(contentDescription)) {
				logger.info("Metadata of the content card matches with Api data");
				extent.extentLogger("Metadata", "Metadata of the content : " + UIMetadata);
				extent.extentLoggerPass("Metadata", "Metadata of the content card matches with Api data");
			} else {
				logger.error("Metadata of the content card does not match with Api data");
				extent.extentLoggerFail("Metadata", "Metadata of the content card does not match with Api data");
			}

			String genre1 = getDriver().findElement(AMDUpcomingPage.objGenre(convertedXpath)).getText();
			System.out.println(genre1);
			String genre[] = genre1.split(" ");
			logger.info("Content Genre : " + genre[0]);
			extent.extentLoggerPass("Genre", "Content Genre : " + genre[0]);

			String certificate[] = genre1.split(" • ");

			logger.info("Content Certificate : " + certificate[1]);
			extent.extentLoggerPass("Certificate", "Content Certificate : " + certificate[1]);

//			String certificate = getDriver().findElementByXPath(AMDUpcomingPage.objContentCertificate(convertedXpath))
//					.getText();

			String releaseDate = resp.jsonPath().getString("buckets[0].items[" + i + "].release_date");

			if (releaseDate == null) {
				logger.info("Release Date : Coming Soon");
				extent.extentLoggerPass("Release Date", "Release Date : Coming Soon");

			} else {
				String[] releaseDateSplit = releaseDate.split("T");

				System.out.println("Release Date " + releaseDateSplit[0]);
				logger.info("Release Date " + releaseDateSplit[0]);
				extent.extentLoggerPass("Release Date", "Release Date " + releaseDateSplit[0]);

				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				Date upcomingReleaseDate = sdf.parse(releaseDateSplit[0]);
				Date dateToday = sdf.parse(date());

				if (upcomingReleaseDate.compareTo(dateToday) <= 0) {
					logger.error("Previously released content is listed in the upcoming section");
					extent.extentLoggerFail("Release Date",
							"Previously released content is listed in the upcoming section");

				} else {
					logger.info("Previously released content is not listed in the upcoming section");
					extent.extentLoggerPass("Release Date",
							"Previously released content is not listed in the upcoming section");
				}
			}

			// swipeByElements(findElement(AMDUpcomingPage.objGenre(convertedXpath)),findElement(AMDHomePage.objUpcoming));
		//	swipeByElements(findElement(AMDUpcomingPage.objGenre(convertedXpath)),findElement(AMDUpcomingPage.objBuyPlanInUpcomingScreen));
			Swipe("UP",1);
			waitTime(3000);
		}
	}
/**
 * @note this method is used for learning tab Carousel validation
 * @param UserType
 * @param tabName
 * @throws Exception
 */
	public void carouselValidationforShowsAndNews(String UserType, String tabName) throws Exception {
		extent.HeaderChildNode("Carousel validation");
		System.out.println("\nCarousel validation");

		waitForElementDisplayed(AMDHomePage.objCarouselDots, 10);
		if (!UserType.equalsIgnoreCase("SubscribedUser")) {
			waitTime(10000);
		}

//	if ((verifyElementIsNotDisplayed(AMDHomePage.objBannerAd))) {
//		verifyElementPresent(AMDHomePage.objCarouselUnitwhenNomastHeadAdbanner,
//				"Carousel unit as first unit on " + tabName + " screen");
//	} else {
//		verifyElementPresent(AMDHomePage.objCarouselUnitwithmastHeadAdbanner,
//				"Carousel unit as first unit on " + tabName + " screen");
//	}

		// Validating Carousel manual swipe
		String width = getAttributValue("width", AMDHomePage.objCarouselConetentCard);

		String bounds = getAttributValue("bounds", AMDHomePage.objCarouselConetentCard);
		String b = bounds.replaceAll(",", " ").replaceAll("]", " ");
		String height = b.split(" ")[1];
		// System.out.println(height);
		waitTime(4000);

		carouselCardsSwipe("RIGHT", 1, width, height);
		String Carouseltitle1 = getText(AMDHomePage.objCarouselTitle2);
		logger.info(Carouseltitle1);
		extentLoggerPass("Carousel Title", Carouseltitle1);

		carouselCardsSwipe("LEFT", 1, width, height);
		String Carouseltitle2 = getText(AMDHomePage.objCarouselTitle2);
		logger.info(Carouseltitle2);
		extentLoggerPass("Carousel Title", Carouseltitle2);

		carouselCardsSwipe("RIGHT", 1, width, height);
		String Carouseltitle3 = getText(AMDHomePage.objCarouselTitle2);
		logger.info(Carouseltitle3);
		extentLoggerPass("Carousel Title", Carouseltitle3);

		// Verifying if the carousel banneer can be manually swipe
		if (!Carouseltitle1.equalsIgnoreCase(Carouseltitle2)) {
			logger.info(UserType + " is able to manually swipe banners from right to left or vice versa.");
			extent.extentLoggerPass("Carousel swipe",
					UserType + " is able to manually swipe banners from right to left or vice versa.");
		} else if (Carouseltitle3.equalsIgnoreCase(Carouseltitle1)) {
			logger.info(UserType + " is able to manually swipe banners from right to left or vice versa.");
			extent.extentLoggerPass("Carousel swipe",
					UserType + " is able to manually swipe banners from right to left or vice versa.");
		} else {
			logger.error(UserType + " is not able to manually swipe banners from right to left or vice versa.");
			extent.extentLoggerFail("Carousel swipe",
					UserType + " is NOT able to manually swipe banners from right to left or vice versa.");
		}

		// Validating Pagination dot, Play icon and GetPremium on Carousel
		int noofCarouselContents = findElements(By.xpath(
				"(//*[@resource-id='com.graymatrix.did:id/cell_top_container'])[1]/parent::*/parent::*/parent::*/following-sibling::*/child::*"))
						.size();
		for (int i = 1; i <= noofCarouselContents; i++) {
			logger.info(getText(AMDHomePage.objCarouselTitle1));

			// To Verify PAGINATION DOT displayed
			if (checkElementExist(AMDHomePage.objCarouselDots, "Pagination dot")) {
				logger.info("Pagination dot is displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
				extent.extentLoggerPass("Pagination dot",
						"Pagination dot is displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
			} else {
				logger.error(
						"Pagination dot is NOT displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
				extent.extentLoggerFail("Pagination dot",
						"Pagination dot is NOT displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
			}
			// To Verify PLAY ICON displayed
			if (checkElementExist(AMDHomePage.objPlayBtn, "Play icon")) {
				logger.info("Play icon is displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
				extent.extentLoggerPass("Play icon",
						"Play icon is displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
			} else {
				logger.error("Play icon is NOT displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
				extent.extentLoggerFail("Play icon",
						"Play icon is NOT displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
			}
			carouselCardsSwipe("LEFT", 1, width, height);
		}
		// navigation to consumption screen of selected content

		waitForElementDisplayed(AMDHomePage.objCarouselTitle1, 60);
		String CarouselTitle = getText(AMDHomePage.objCarouselTitle1);
		waitForElementAndClickIfPresent(AMDHomePage.objContentTitle(CarouselTitle), 70, "Carousel content");
		
		waitTime(5000);
		if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
			Back(1);
			// click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
		}
		verifyElementPresent(AMDHomePage.objConsumptionScreenTitle, "Consumption screen");
		String consumptionScreenTitle = getText(AMDHomePage.objConsumptionScreenTitle);
		String contentinfo = getText(AMDPlayerScreen.objcontentRating);
		System.out.println("\n" + CarouselTitle);
		System.out.println(consumptionScreenTitle);

		if (!(tabName.equalsIgnoreCase("News"))) {
			if (consumptionScreenTitle.contains(CarouselTitle) | contentinfo.contains(CarouselTitle) ) {
				logger.info("Consumption Screen is displayed for the selected content");
				extent.extentLoggerPass("Consumption screen",
						"Consumption Screen is displayed for the selected content");
			} else {
				logger.error("Consumption Screen is not displayed for the selected content");
				extent.extentLoggerFail("Consumption screen",
						"Consumption Screen is not displayed for the selected content");
			}
		}
		if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
			Back(1);
			// click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
		}
		Back(1);
		Swipe("DOWN", 1);
		// Validating Carousel Auto scroll
		String title1 = getText(AMDHomePage.objCarouselTitle1);
		logger.info(title1);
		extentLoggerPass("Carousel Title", title1);
		waitTime(4000);
		String title2 = getText(AMDHomePage.objCarouselTitle2);
		logger.info(title2);
		extentLoggerPass("Carousel Title", title2);
		waitTime(4000);
		String title3 = getText(AMDHomePage.objCarouselTitle3);
		logger.info(title3);
		extentLoggerPass("Carousel Title", title3);

		if (!(title1.equalsIgnoreCase(title2))) {
			if (!(title2.equalsIgnoreCase(title3))) {
				logger.info(
						"Banners available in feature carousel unit rotates from right to left at a fixed time interval");
				extentLoggerPass("Carousel unit Autorotation",
						"Banners available in feature carousel unit rotate from right to left at a fixed time interval");
			} else {
				logger.error(
						"Banners available in feature carousel unit are not rotating from right to left at a fixed time interval");
				extentLoggerFail("Carousel unit Autorotation",
						"Banners available in feature carousel unit are not rotating from right to left at a fixed time interval");
			}
		} else {
			logger.error(
					"Banners available in feature carousel unit are not rotating from right to left at a fixed time interval");
			extentLoggerFail("Carousel unit Autorotation",
					"Banners available in feature carousel unit are not rotating from right to left at a fixed time interval");
		}
	}
/**
 * @note this method is used for verifying the Web series Landing screen and verifing the subscribe icon
 * @param userType
 * @param tabName
 * @throws Exception
 */
	public void zee5OriginalsLandingScreen(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("Navigating to Web series screen and verifing the Subscribe icon");
		System.out.println("Web series Landing screen and verifing the subscribe icon");
//		 swipeByElements(findElement(AMDHomePage.objNewsTab),
//		 findElement(AMDHomePage.objHomeTab));
		waitTime(2000);
		selectTopNavigationTab(tabName);
		// verifyElementPresentAndClick(AMDHomePage.objZee5OriginalsTab, tabName + "
		// Tab");
		String activeTab = getText(AMDHomePage.objSelectedTab);
		if (activeTab.equalsIgnoreCase(tabName)) {
			logger.info("User is able to navigate to " + tabName + " screen by tapping on " + tabName
					+ " tab displayed in the top navigation bar");
			extent.extentLoggerPass(tabName + " Tab", "User is able to navigate to " + tabName
					+ " screen by tapping on " + tabName + " tab displayed in the top navigation bar");
		} else {
			logger.error("User is not able to navigate to " + tabName + " screen by tapping on " + tabName
					+ " tab displayed in the top navigation bar");
			extent.extentLoggerFail(tabName + " Tab", "User is not able to navigate to " + tabName
					+ " screen by tapping on " + tabName + " tab displayed in the top navigation bar");
		}
		waitTime(10000);
		// closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000);
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			if (verifyElementDisplayed(AMDHomePage.objSubscribeTeaser)) {
				logger.info("Buy Plan icon is displayed");
				extent.extentLoggerPass("Subscribe icon", "Buy Plan icon is displayed");
			} else {
				logger.error("Buy Plan icon is not displayed");
				extent.extentLoggerFail("Subscribe icon", "Buy Plan icon is not displayed");
			}
		} else {
			if (verifyElementIsNotDisplayed(AMDHomePage.objSubscribeTeaser)) {
				logger.info("Buy Plan icon is not displayed");
				extent.extentLoggerPass("Subscribe icon", "Buy Plan icon is not displayed");

			} else {
				logger.error("Buy Plan icon is displayed");
				extent.extentLoggerFail("Subscribe icon", "Buy Plan icon is displayed");
			}
		}

		if (verifyElementDisplayed(AMDHomePage.objZee5Logo)) {
			logger.info("Zee5 logo is dislayed");
			extent.extentLoggerPass("Zee5 logo", "Zee5 logo is dislayed");
		} else {
			logger.error("Zee5 logo is not dislayed");
			extent.extentLoggerFail("Zee5 logo", "Zee5 logo is NOT dislayed");
		}
		String courselContentTitle = zeeOriginalsCarouselValidationWithApi(userType, "zeeoriginals");
		carouselValidationForWebseries(userType, tabName, courselContentTitle);
		verifyElementPresentAndClick(AMDHomePage.objContentTitle(courselContentTitle), "Carousel content");
		waitTime(5000);
		if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
//			Back(1);
			click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
		} 
		if (userType.equalsIgnoreCase("Guest")) {
			if (verifyIsElementDisplayed(AMDHomePage.objWatchTrailerIconOnPlayerscreen)) {
				if (verifyIsElementDisplayed(AMDHomePage.objLoginButtonOnPlayerscreen)) {
					logger.error(
							"Content playback is not initiated for the user post tapping on premium content which is having trailer");
					extentLoggerFail("Trailer",
							"Content playback is not initiated for the user post tapping on premium content which is having trailer");
				} else {
					logger.info(
							"Content playback is initiated for the user post tapping on premium content which is having trailer");
					extentLoggerPass("Trailer",
							"Content playback is initiated for the user post tapping on premium content which is having trailer");
				}
			} else {
				if (verifyIsElementDisplayed(AMDHomePage.objLoginButtonOnPlayerscreen)) {
					logger.info(
							"Content playback is not initiated for the user post tapping on premium content which is not having trailer");
					extentLoggerPass("Trailer",
							"Content playback is not initiated for the user post tapping on premium content which is not having trailer");
				} else {
					logger.error(
							"Content playback is initiated for the user post tapping on premium content which is not having trailer");
					extentLoggerFail("Trailer",
							"Content playback is initiated for the user post tapping on premium content which is not having trailer");
				}
			}
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(AMDHomePage.objWatchTrailerIconOnPlayerscreen)) {
				if (verifyIsElementDisplayed(AMDShowsScreen.objSubscribeNowlink)) {
					logger.error(
							"Content playback is not initiated for the user post tapping on premium content which is having trailer");
					extentLoggerFail("Trailer",
							"Content playback is not initiated for the user post tapping on premium content which is having trailer");
				} else {
					logger.info(
							"Content playback is initiated for the user post tapping on premium content which is having trailer");
					extentLoggerPass("Trailer",
							"Content playback is initiated for the user post tapping on premium content which is having trailer");
				}
			} else {
				if (verifyIsElementDisplayed(AMDShowsScreen.objSubscribeNowlink)) {
					logger.info(
							"Content playback is not initiated for the user post tapping on premium content which is not having trailer");
					extentLoggerPass("Trailer",
							"Content playback is not initiated for the user post tapping on premium content which is not having trailer");
				} else {
					logger.error(
							"Content playback is initiated for the user post tapping on premium content which is not having trailer");
					extentLoggerFail("Trailer",
							"Content playback is initiated for the user post tapping on premium content which is not having trailer");
				}
			}
		} else {
			logger.info("Content playback is initiated for the SubscribedUser post tapping on Premium Content");
			extentLoggerPass("Trailer",
					"Content playback is initiated for the SubscribedUser post tapping on Premium Content");
		}
		Back(1);
		extent.HeaderChildNode("Verifying the availability of trays in the screen");
		findingTrayInscreen(2, AMDHomePage.objTrayTitle("Best of ZEE5 Originals"), AMDHomePage.objCarouselDots,
				"Best of ZEE5 Originals", "MastheadCarousel", userType, tabName);
		// PartialSwipe("UP", 1);
		findingTrayInscreen(25, AMDHomePage.objTrayTitle("ZEE5 Original Music"), AMDHomePage.objCarouselDots,
				"ZEE5 Original Music tray", "Mastheadcarousel", userType, tabName);
	}
/**
 * @note this method is used for Verifying the  Buy Plan CTA in Upcoming screen
 * @param userType
 * @throws Exception
 */
	public void ValidateBuyPlanCTA(String userType) throws Exception {
		extent.HeaderChildNode("Verify Buy Plan CTA in Upcoming screen");
		if(!userType.contentEquals("SubscribedUser")) {
			
			if(verifyElementDisplayed(AMDUpcomingPage.objBuyPlanInUpcomingScreen)) {
				logger.info("Buy Plan CTA in Upcoming screen is displayed for " + userType);
				extent.extentLoggerPass("Release Date","Buy Plan CTA in Upcoming screen is displayed for " + userType);
				click(AMDUpcomingPage.objBuyPlanInUpcomingScreen,"Buy plan CTA");
				waitTime(4000);
				if(verifyElementDisplayed(AMDSubscibeScreen.objNewSubscribePopup)) {
					logger.info("User is redirected to Subscription Screen on clicking Buy plan CTA in Upcoming screen");
					extent.extentLoggerPass("Release Date","User is redirected to Subscription Screen on clicking Buy plan CTA in Upcoming screen");
					Back(1);
					if (verifyElementDisplayed(AMDHomePage.objUpcoming)) {
						logger.info("User is redirected to Upcoming screen on pressing device Back from Subscription screen");
						extent.extentLoggerPass("Title", "User is redirected to Upcoming screen on pressing device Back from Subscription screen");
					} else {
						logger.error("User is failed to navigate to Upcoming screen on pressing device Back from Subscription screen");
						extent.extentLoggerFail("Title", "User is failed to navigate to Upcoming screen on pressing device Back from Subscription screen");
					}		
										
				}else {
					logger.error("User is failed to navigate to Subscription Screen on clicking Buy plan CTA in Upcoming screen");
					extent.extentLoggerFail("Release Date","User is failed to navigate to Subscription Screen on clicking Buy plan CTA in Upcoming screen");
				}
				
			}else {
				logger.info("Buy Plan CTA in Upcoming screen is displayed for " + userType);
				extent.extentLoggerPass("Release Date","Buy Plan CTA in Upcoming screen is displayed for " + userType);
			}					
		}
		
		if(userType.contentEquals("SubscribedUser")) {
			
			if(verifyElementIsNotDisplayed(AMDUpcomingPage.objBuyPlanInUpcomingScreen)) {
				logger.info("Buy Plan CTA in Upcoming screen is not displayed for " + userType + " - Expected");
				extent.extentLoggerPass("Release Date","Buy Plan CTA in Upcoming screen is not displayed for " + userType + " - Expected");
			}else {
				logger.info("Buy Plan CTA in Upcoming screen is displayed for " + userType );
				extent.extentLoggerPass("Release Date","Buy Plan CTA in Upcoming screen is displayed for " + userType );
			}
			
		}
		
	}
	/**
	 * @note this method is used for carousel banner validation for given input tab.
	 * @param UserType
	 * @param tabName
	 * @param contentTitle
	 * @throws Exception
	 */
	public void carouselValidationForWebseries(String UserType, String tabName, String contentTitle) throws Exception {

		extent.HeaderChildNode("Carousel validations for tab :" + tabName + "\"");
		waitForElementDisplayed(AMDHomePage.objCarouselDots, 10);
		waitTime(10000);
		// Validating Carousel manual swipe
		String width = getAttributValue("width", AMDHomePage.objCarouselConetentCard);

		String bounds = getAttributValue("bounds", AMDHomePage.objCarouselConetentCard);
		String b = bounds.replaceAll(",", " ").replaceAll("]", " ");
		String height = b.split(" ")[1];

		waitTime(3000);
		String Carouseltitle1 = getText(AMDHomePage.objCarouselTitle2);
		logger.info(Carouseltitle1);
		extentLoggerPass("Carousel Title", Carouseltitle1);
		carouselCardsSwipe("LEFT", 1, width, height);

		String Carouseltitle2 = getText(AMDHomePage.objCarouselTitle2);
		logger.info(Carouseltitle2);
		extentLoggerPass("Carousel Title", Carouseltitle2);
		carouselCardsSwipe("RIGHT", 1, width, height);

		String Carouseltitle3 = getText(AMDHomePage.objCarouselTitle2);
		logger.info(Carouseltitle3);
		extentLoggerPass("Carousel Title", Carouseltitle3);

		if (!Carouseltitle1.equalsIgnoreCase(Carouseltitle2)) {
			logger.info(UserType + " is able to manually swipe banners from right to left or vice versa.");
			extent.extentLoggerPass("Carousel swipe",
					UserType + " is able to manually swipe banners from right to left or vice versa.");
		} else if (Carouseltitle3.equalsIgnoreCase(Carouseltitle1)) {
			logger.info(UserType + " is able to manually swipe banners from right to left or vice versa.");
			extent.extentLoggerPass("Carousel swipe",
					UserType + " is able to manually swipe banners from right to left or vice versa.");
		} else {
			logger.error(UserType + " is not able to manually swipe banners from right to left or vice versa.");
			extent.extentLoggerFail("Carousel swipe",
					UserType + " is NOT able to manually swipe banners from right to left or vice versa.");
		}

		// Validating Pagination dot, Play icon and GetPremium on Carousel
		int noofCarouselContents = findElements(By.xpath(
				"(//*[@resource-id='com.graymatrix.did:id/cell_top_container'])[1]/parent::*/parent::*/parent::*/following-sibling::*/child::*"))
						.size();
		for (int i = 1; i <= noofCarouselContents; i++) {
			logger.info(getText(AMDHomePage.objCarouselTitle1));

			// To Verify PAGINATION DOT displayed
			if (checkElementExist(AMDHomePage.objCarouselDots, "Pagination dot")) {
				logger.info("Pagination dot is displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
				extent.extentLoggerPass("Pagination dot",
						"Pagination dot is displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
			} else {
				logger.error(
						"Pagination dot is NOT displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
				extent.extentLoggerFail("Pagination dot",
						"Pagination dot is NOT displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
			}
			// To Verify PLAY ICON displayed
			if (checkElementExist(AMDHomePage.objPlayBtn, "Play icon")) {
				logger.info("Play icon is displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
				extent.extentLoggerPass("Play icon",
						"Play icon is displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
			} else {
				logger.error("Play icon is NOT displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
				extent.extentLoggerFail("Play icon",
						"Play icon is NOT displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
			}
			carouselCardsSwipe("LEFT", 1, width, height);
		}

		if ((UserType.equalsIgnoreCase("Guest")) | (UserType.equalsIgnoreCase("NonSubscribedUser"))) {
			boolean var = false;
			for (int i = 1; i <= noofCarouselContents; i++) {

				if (tabName.equals("Music")) {
					extent.extentLogger("Verify Buy Plan tag",
							"Buy Plan tag is not configured for " + tabName + " tab");
					logger.info("Buy Plantag is not configured for " + tabName + " tab");
					break;

				} else {
					var = verifyIsElementDisplayed(AMDHomePage.objPremiumBtn,
							"Buy Plan tag for carousal content " + i + ": ");
					carouselCardsSwipe("LEFT", 1, width, height);
				}
			}
			var = waitForElementAndClickIfPresent(AMDHomePage.objPremiumBtn, 60, "Buy Plan tag");
			if (var == true) {
				verifyElementPresent(AMDSubscibeScreen.objSubscribeHeader, "Subscription screen");
				waitTime(5000);
				Back(1);
				waitTime(5000);
				//Swipe("Down", 1);
			}
		} else {
			for (int i = 1; i <= noofCarouselContents; i++) {

				System.out.println(getText(AMDHomePage.objCarouselTitle1));
				if (verifyElementIsNotDisplayed(AMDHomePage.objPremiumBtn)) {
					logger.info("Buy Plan tag is NOT displayed");
					extentLoggerPass("Buy Plan Tag", "Buy Plan tag is NOT displayed");
				} else {
					logger.error("Buy Plan tag is displayed");
					extentLoggerFail("Get premium Tag", "Buy Plan tag is displayed");
				}
				carouselCardsSwipe("LEFT", 1, width, height);
			}
		}

		// navigation to consumption screen of selected content

		waitForElementAndClickIfPresent(AMDHomePage.objContentTitle(contentTitle), 70, "Carousel content");
		waitTime(5000);
		if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
			Back(1);
			// click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
		}

		verifyElementPresent(AMDHomePage.objConsumptionScreenTitle, "Consumption screen");
		String consumptionScreenTitle = getText(AMDHomePage.objConsumptionScreenTitle);
		String contentinfo = getText(AMDPlayerScreen.objcontentRating);

		if (!(tabName.equalsIgnoreCase("Home") || tabName.equalsIgnoreCase("Premium")
				|| tabName.equalsIgnoreCase("ZEE5 Originals"))) {
			if (contentTitle.contains(consumptionScreenTitle) | contentinfo.contains("Episode") ) {
				logger.info("Consumption Screen is displayed for the selected content");
				extent.extentLoggerPass("Consumption screen",
						"Consumption Screen is displayed for the selected content");
			} else {
				logger.error("Consumption Screen is not displayed for the selected content");
				extent.extentLoggerFail("Consumption screen",
						"Consumption Screen is not displayed for the selected content");
			}
		}

		if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
			Back(1);
			// click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
		}
		Back(1);

		// Validating Carousel Auto scroll
		String title1 = getText(AMDHomePage.objCarouselTitle1);
		logger.info(title1);
		extentLoggerPass("Carousel Title", title1);
		waitTime(4000);
		String title2 = getText(AMDHomePage.objCarouselTitle2);
		logger.info(title2);
		extentLoggerPass("Carousel Title", title2);
		waitTime(4000);
		String title3 = getText(AMDHomePage.objCarouselTitle3);
		logger.info(title3);
		extentLoggerPass("Carousel Title", title3);

		if (!(title1.equalsIgnoreCase(title2))) {
			if (!(title2.equalsIgnoreCase(title3))) {
				logger.info(
						"Banners available in feature carousel unit rotates from right to left at a fixed time interval");
				extentLoggerPass("Carousel unit Autorotation",
						"Banners available in feature carousel unit rotate from right to left at a fixed time interval");
			} else {
				logger.error(
						"Banners available in feature carousel unit are not rotating from right to left at a fixed time interval");
				extentLoggerFail("Carousel unit Autorotation",
						"Banners available in feature carousel unit are not rotating from right to left at a fixed time interval");
			}
		} else {
			logger.error(
					"Banners available in feature carousel unit are not rotating from right to left at a fixed time interval");
			extentLoggerFail("Carousel unit Autorotation",
					"Banners available in feature carousel unit are not rotating from right to left at a fixed time interval");
		}
	}
	
	
	/**
	 * @note this method is used for Validation of Carousal and Consumption page
	 * @param contentTitle
	 * @throws Exception
	 */
	public void validationOfConsumptionPageForTVODContent(String contentTitle)
			throws Exception {
		extent.HeaderChildNode("Validation of Carousal and Consumption page");
		System.out.println("\nValidation of Carousal and Consumption page");
		waitTime(10000);
			// Rent Now CTA below the player
			if (verifyElementDisplayed(AMDTVODComboOffer.objRentNowCTABelowPlayer)) {
				String text = findElement(AMDTVODComboOffer.objRentNowCTABelowPlayer).getText();
				extentLoggerPass("", text + " CTA is displayed below the player");
				click(AMDTVODComboOffer.objRentNowCTABelowPlayer, text + " CTA Below the Player");
				if (verifyElementDisplayed(AMDTVODComboOffer.obComboOfferScreen)) {
					logger.info("Combo offer page is displayed on clicking " + text + " CTA Below the player");
					extent.extentLoggerPass("Consumption Screen",
							"Combo offer page is displayed on clicking " + text + " CTA Below the player");
					Back(1);
				} else {
					logger.error("Combo offer page is not displayed on clicking Rent Now CTA Below the player");
					extent.extentLoggerFail("Consumption Screen",
							"Combo offer page is not displayed on clicking Rent Now CTA Below the player");
				}
			}

			waitTime(5000);
			if (verifyElementDisplayed(AMDTVODComboOffer.objRentNowTextOnPlayer)) {
				String OnPlayertext = findElement(AMDTVODComboOffer.objRentNowTextOnPlayer).getText();
				extentLogger("", OnPlayertext + " text is displayed player");
				if (OnPlayertext.contains("Watch full content by renting it now")) {
					logger.info(OnPlayertext + " text is displayed on the player");
					extent.extentLoggerPass("Consumption Screen", OnPlayertext + " text is displayed on the player");
					} else {
					logger.error(OnPlayertext + " text is NOT displayed on the player");
					extent.extentLoggerFail("Consumption Screen", OnPlayertext + " text is NOT displayed on the player");
				}
			}

			// Rent Now CTA on The player

			if (verifyElementDisplayed((AMDTVODComboOffer.objRentNowCTAOnPlayer))) {
				String Renttext = findElement(AMDTVODComboOffer.objRentNowCTAOnPlayer).getText();
				extentLoggerPass("", Renttext + " CTA is displayed on the player");
				click(AMDTVODComboOffer.objRentNowCTAOnPlayer, Renttext + " CTA on the Player");
				if (verifyElementDisplayed(AMDTVODComboOffer.obComboOfferScreen)) {
					logger.info("Combo offer page is displayed on clicking Rent Now CTA on the player");
					extent.extentLoggerPass("Consumption Screen",
							"Combo offer page is displayed on clicking Rent Now CTA on the player");
					verifyElementExist(AMDTVODComboOffer.objUpgradeTextOnComboOfferPage, "Upgrade Text");
					verifyElementExist(AMDTVODComboOffer.objUpgradeSubTextOnComboOfferPage, "Upgrade Subtext");
					Back(1);
				} else {
					logger.error("Combo offer page is not displayed on clicking Rent Now CTA on the player");
					extent.extentLoggerFail("Consumption Screen",
							"Combo offer page is not displayed on clicking Rent Now CTA on the player");
				}
			}

			
			if(userType.equals("Guest")) {
				//login cTA
			}
			
	}
	

/**
 * @note this method is used for validating Combo offer page,Payment screen
 * @param subText
 * @param CTAName
 * @param subText2
 * @param email
 * @param password
 * @throws Exception
 */
	public void validationOfComboOfferPage_PaymentPage(String subText, String CTAName,String subText2, String email, String password) throws Exception {
		extent.HeaderChildNode("Validation of Combo offer page,Payment screen");
		System.out.println("\nValidation of Combo offer page, Payment screen");
		click(AMDTVODComboOffer.objRentNowCTABelowPlayer," Rent Now CTA Below the Player");
		if (verifyElementExist(AMDTVODComboOffer.objPosterOfMovieContent, "Poster of Movie Content")) {
			verifyElementExist(AMDTVODComboOffer.objUpgradeTextOnComboOfferPage, "Premium text");
			verifyElementExist(AMDTVODComboOffer.objUpgradeSubTextOnComboOfferPage, "Premium subtext");
			String upgradeSubtext = getText(AMDTVODComboOffer.objUpgradeSubTextOnComboOfferPage);
			if (upgradeSubtext.contains(subText)) {
				logger.info(upgradeSubtext + " is displayed");
				extentLoggerPass("subText", upgradeSubtext + " is displayed");
			} else {
				logger.info(upgradeSubtext + " is not displayed");
				extentLoggerFail("subText", upgradeSubtext + " is not displayed");
			}
			verifyElementExist(AMDTVODComboOffer.objComboOfferPlan, "Combo offer plan");
			Swipe("UP", 1);
			verifyElementExist(AMDTVODComboOffer.objOnlyRentMoviePlan, "Only Rent Movie plan");
			Swipe("DOWN", 1);
			comboOfferPlanCard_OnlyRentMoviePlanCard_Validation();
			Swipe("DOWN", 2);
			boolean value = findElement(AMDTVODComboOffer.objComboOfferPlan).isEnabled();
			if (value) {
				logger.info("Premium combo plan is selected by default");
				extent.extentLoggerPass("Combo offer Screen", "Premium combo plan is selected by default");
				String cta = getText(AMDTVODComboOffer.objCTABelowTheComboOfferPage);
				if (cta.equalsIgnoreCase(CTAName)) {
					logger.info(CTAName + " CTA is displayed when Premium combo plan is selected");
					extentLoggerPass("Upgrade CTA",
							CTAName + " CTA is displayed when Premium combo plan is selected");
				} else {
					logger.info("[AMA2-18102] " + cta
							+ " CTA is displayed when Premium combo plan is selected instead of " + CTAName);
					extentLoggerFail("Upgrade CTA", "[AMA2-18102] " + cta
							+ " CTA is displayed when Premium combo plan is selected instead of " + CTAName);
				}
				click(AMDTVODComboOffer.objCTABelowTheComboOfferPage, cta + " CTA");
				waitTime(2000);
				verifyElementPresent(AMDTVODComboOffer.objPaymentStep2, "Payment Step indicator");

				if (verifyElementPresent(AMDTVODComboOffer.objAccountInfoLabel, "Account Info overlay")) {
					logger.info("Account Info widget is displayed");
					extentLoggerPass("Account Info widget", "Account Info widget is displayed");
					loginFromAccountInfoScreen(email, password);
					waitTime(2000);
					if (verifyElementPresent(AMDTVODComboOffer.objUpgradeBottomSheet, "Upgrade bottom sheet")) {
						String text = getText(AMDTVODComboOffer.objUpgradeBottomSheetText);
						if (text.contains("Upgrade") | text.contains("Rent Content")) {
							logger.info(text + " is displayed");
							extentLoggerPass("Upgrade", text + " is displayed");
						} else {
							logger.info("[AMA2-18084] " + text + " is displayed instead 'Rent Content for text'");
							extentLoggerFail("Upgrade",
									"[AMA2-18084] " + text + " is displayed instead 'Rent Content for text'");
						}

						String subtext = getText(AMDTVODComboOffer.objUpgradeBottomSheetSubText);
						if (subtext.contains(subText2)) {
							logger.info(subtext + " is displayed");
							extentLoggerPass("Upgrade", subtext + " is displayed");
						} else {
							logger.info(subtext + " is not displayed");
							extentLoggerFail("Upgrade", subtext + " is not displayed");
						}
						if (verifyElementDisplayed(AMDTVODComboOffer.objUpgradeBottomSheetCTA)) {
							String upgradebottomsheetcta = getText(AMDTVODComboOffer.objUpgradeBottomSheetCTA);
							if (upgradebottomsheetcta.contains("Upgrade")
									| upgradebottomsheetcta.contains("Rent Content")) {
								logger.info(upgradebottomsheetcta + " is displayed");
								extentLoggerPass("Upgrade", upgradebottomsheetcta + " is displayed");
							} else {
								logger.info("[AMA2-18084] " + upgradebottomsheetcta
										+ " is displayed instead 'Rent Content CTA'");
								extentLoggerFail("Upgrade", "[AMA2-18084] " + upgradebottomsheetcta
										+ " is displayed instead 'Rent Content CTA'");
							}
						}
						click(AMDTVODComboOffer.objUpgradeBottomSheetCTA, "Upgrade bottom sheet CTA");
						paymentScreenVerification();
						Back(1);
					}
				}
				Back(1);
			} else {
				logger.error("Supermoon combo plan is NOT selected by default");
				extent.extentLoggerFail("Combo offer Screen", "Supermoon combo plan is NOT selected by default");
			}
		} else {
			logger.info("Combo offer page is not displayed");
			extentLoggerWarning("Combo offer page", "Combo offer page is not displayed");
		}
	}
		
	/**
	 * @Note This method is used for user login for Non subscribed and Subscribed user.
	 * @param LoginMethod(UserType)
	 * @throws Exception
	 */
	public void zeeApplicasterLogin(String LoginMethod) throws Exception {
		System.out.println("\nLogin to the App");

		switch (LoginMethod) {
		case "Guest":
			extent.HeaderChildNode("Logged in as <b>Guest</b> User");

			extent.extentLogger("Accessing the application as Guest user",
					"Accessing the application as <b>Guest</b> user");
			verifyElementPresent(AMDHomePage.objHomeBottomBtn, "Home screen");
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as NonSubscribed User");

			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");
                        waitTime(3000);
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			waitTime(5000);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			waitTime(5000);
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");

			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			waitTime(5000);
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			waitTime(5000);
			type(AMDLoginScreen.objEmailIdField, Username, "Email Field");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			waitTime(5000);
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			waitTime(5000);
			type(AMDLoginScreen.objPasswordField, Password, "Password field");
			waitTime(5000);
			hideKeyboard();
			waitTime(5000);
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(5000);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User");

			String SubscribedUsername = getParameterFromXML("SubscribedUserName");
			String SubscribedPassword = getParameterFromXML("SubscribedPassword");
                        waitTime(5000);
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			waitTime(5000);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			waitTime(5000);
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			waitTime(4000);
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			waitTime(4000);
			verifyElementPresentAndClick(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SubscribedUsername, "Email Field");
			waitTime(4000);
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed Button");
			waitTime(6000);
			verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
			waitTime(6000);
			type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
			waitTime(6000);
			hideKeyboard();
			waitTime(4000);
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			waitTime(3000);
			break;
		}
		
	}
/**
 * @note this method is used for validating the on boarding screens availability 
 * @param userType
 * @param ScreenName
 * @throws Exception
 */
	public void checkScreenAfterRelaunch(String userType, String ScreenName) throws Exception {
		extent.HeaderChildNode("Validating that " + ScreenName + "is not present when app is relaunched");
		verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
		waitTime(4000);
		verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
		waitTime(4000);
		verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
		// Verify user is navigated to Login/Register screen post tapping Login/Register
		// link
		click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");

		if (userType.equals("NonSubscribedUser")) {
			click(AMDLoginScreen.objEmailIdField, "Email field");
			verifyElementExist(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, NonsubscribedUserName, "Email field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed button");
			waitTime(2000);
			type(AMDLoginScreen.objPasswordField, NonsubscribedPassword, "Password field");
			hideKeyboard();

		} else if (userType.equals("SubscribedUser")) {
			click(AMDLoginScreen.objEmailIdField, "Email field");
			verifyElementExist(AMDLoginScreen.objEmailIdField, "Email field");
			type(AMDLoginScreen.objEmailIdField, SubscribedUserName, "Email field");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed button");
			waitTime(2000);
			type(AMDLoginScreen.objPasswordField, SubscribedPassword, "Password field");
			hideKeyboard();
		}

		if (userType.equalsIgnoreCase("Guest")) {
			verifyElementPresentAndClick(AMDLoginScreen.objSkipBtn, "Skip button");
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
		} else {
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login button");
		}

		verifyElementExist(AMDHomePage.objHomeTab, "Home tab");
		relaunch(false);
		waitTime(2000);

		if (userType.contains("Guest")) {
			if (checkElementExist(AMDHomePage.objHomeTab, "Home tab")) {
				logger.info("When " + userType + " relaunch the app " + ScreenName + " screen is skipped");
				extent.extentLoggerPass("Relaunch",
						"When " + userType + " relaunch the app " + ScreenName + " screen is skipped");
			} else {
				logger.error("When " + userType + " relaunch the app " + ScreenName + " screen is displayed");
				extent.extentLoggerFail("Relaunch",
						"When " + userType + " relaunch the app " + ScreenName + " screen is displayed");
			}
		} else if (checkElementExist(AMDHomePage.objHomeTab, "Home tab")) {
			logger.info("When " + userType + " relaunch the app Content language screen is skipped");
			extent.extentLoggerPass("Relaunch",
					"When " + userType + " relaunch the app Content language screen is skipped");
		} else {
			logger.error("When " + userType + " relaunch the app user is not redirected to Home page");
			extent.extentLoggerFail("Relaunch",
					"When " + userType + " relaunch the app user is not redirected to Home page");
		}
	}
/**
 * @note this method is used for UI/UX of Login feature.
 * @throws Exception
 */
	public void verifyLoginPage() throws Exception {
		extent.HeaderChildNode(
				"Validating the Navigation to Login or Register Screen Tapping on the Login link available in Menu Screen");
		System.out.println(
				"\nValidating the Navigation to Login or Register Screen Tapping on the Login link available in Menu Screen");

		if (pUserType.equalsIgnoreCase("Guest")) {
			waitTime(5000);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			waitTime(4000);
			verifyElementPresent(AMDLoginScreen.objProfileIcon, "Login Button");
			click(AMDLoginScreen.objProfileIcon, "Login Button");
			if (verifyIsElementDisplayed(AMDLoginScreen.objLoginPage)) {
				logger.info(
						"User is navigated to Login/register Screen Tapping on the Login link present in the Menu Screen");
				extent.extentLoggerPass("Login/Register Screen",
						"User is navigated to Login/register Screen Tapping on the Login link present in the Menu Screen");
			} else {

				logger.error(
						"User not  navigated to Login/register Screen Tapping on the Login link present in the Menu Screen");
				extent.extentLoggerFail("Login/Register Screen",
						"User not navigated to Login/register Screen Tapping on the Login link present in the Menu Screen");
			}

			extent.HeaderChildNode("Validating UI/UX of Login Page");
			System.out.println("\nValidating UI/UX of Login Page");

			WebElement element = findElement(AMDLoginScreen.objLoginOrRegisterPageTitle);
			int leftX = element.getLocation().getX();
			int rightX = leftX + element.getSize().getWidth();
			int middleX = (rightX + leftX) / 2;
			Dimension size = getDriver().manage().window().getSize();
			if (middleX == Integer.valueOf((size.width) / 2)) {
				logger.info("Login/Register screen title is displayed at center of the screen");
				extent.extentLoggerPass("Screen Title",
						"Login/Register screen title is displayed at center of the screen");
			} else {
				logger.error("Login/Register screen title is not displayed at center of the screen");
				extent.extentLoggerFail("Screen Title",
						"Login/Register screen title is not displayed at center of the screen");
			}

			WebElement elementBackBtn = findElement(AMDLoginScreen.objBackBtn);
			int BackBtnleftX = elementBackBtn.getLocation().getX();
			int BAckBtnrightX = BackBtnleftX + elementBackBtn.getSize().getWidth();
			int BackBtnmiddleX = (BAckBtnrightX + BackBtnleftX) / 2;

			if (BackBtnmiddleX <= 200) {
				logger.info("Back button is displayed at top left of the screen");
				extent.extentLoggerPass("Back button", "Back button is displayed at top left of the screen");
			} else {
				logger.error("Back button is not displayed at top left of the screen");
				extent.extentLoggerFail("Back button", "Back button is not displayed at top left of the screen");
			}

			WebElement elementSkipBtn = findElement(AMDLoginScreen.objLoginLnk);
			int SkipBtnRightX = elementSkipBtn.getLocation().getX();
			System.out.println(SkipBtnRightX);
			Dimension sizee = getDriver().manage().window().getSize();
			System.out.println(sizee.getWidth());
			int sizeee = sizee.getWidth() - 300;
			System.out.println(sizeee);

			if (SkipBtnRightX >= sizeee) {
				logger.info("Skip button is displayed at top right of the screen");
				extent.extentLoggerPass("Skip button", "Skip button is displayed at top right of the screen");
			} else {
				logger.error("Skip button is not displayed at top right of the screen");
				extent.extentLoggerFail("Skip button", "Skip button is not displayed at top right of the screen");
			}

			verifyElementPresent(AMDLoginScreen.objGoogleBtn, "Google Button");
			verifyElementPresent(AMDLoginScreen.objfbBtn, "Facebook Button");
			verifyElementPresent(AMDLoginScreen.objtwitterBtn, "Twitter Button");

			extent.HeaderChildNode("Validating EmailID/Mobile No field is displayed on Login/Register screen");
			System.out.println("\nValidating EmailID/Mobile No field is displayed on Login/Register screen");
			if (verifyElementPresent(AMDLoginScreen.objEmailIdField, "Email Field")) {
				logger.info("EmailID/Mobile No. field is dispalyed");
				extent.extentLoggerPass("Login/Register Screen", "EmailID/Mobile No. field is dispalyed");
			} else {
				logger.error("EmailID/Mobile No. field is not dispalyed");
				extent.extentLoggerFail("Login/Register Screen", "EmailID/Mobile No. field is not dispalyed");
			}

			extent.HeaderChildNode("Validating usen can enter EmailID or Mobile NO");
			System.out.println("\nValidating usen can enter EmailID or Mobile NO");
			click(AMDLoginScreen.objEmailIdField, "Email Field");
			hideKeyboard();

			type(AMDLoginScreen.objEmailIdField, "zeetest123@gmail.com", "Email Field");
			if (verifyIsElementDisplayed(AMDLoginScreen.objProceedBtn)) {
				logger.info("Proceed button is displayed , user entered the correct EmailID format");
				extent.extentLoggerPass("Login/Register Screen",
						"Proceed button is displayed , user entered the correct EmailID format");
			} else {
				logger.error("Proceed button is not displayed , user not entered the correct EmailID format");
				extent.extentLogger("Login/Register Screen",
						"Proceed button is not displayed , user not entered the correct EmailID format");

			}

			// Check Proceed Button in highlighted

			if (getAttributValue("clickable", AMDRegistrationScreen.objProceedBtn).equals("true")) {
				logger.info("Proceed CTA is displayed and is highlated");
				extent.extentLoggerPass("Proceed button", "Proceed CTA is displayed and is highlighted");
			} else {
				logger.error("Proceed CTA is not activated");
				extent.extentLoggerFail("Proceed button", "Proceed CTA is not activated");
			}

			extent.HeaderChildNode("Validating UI/UX of Login Page post changing the Display Language");
			System.out.println("\nValidating UI/UX of Login Page post changing the Display Language");
			waitTime(4000);
			click(AMDLoginScreen.objBackBtn, "Back Button");
			click(AMDLoginScreen.objSettings, "Settings Button");
			swipeUntilFindElement(AMDLoginScreen.objDisplayLang, "Up");
			click(AMDLoginScreen.objDisplayLang, "Display Language");
			waitTime(3000);
			click(AMDLoginScreen.objLangHindi, "Display Language Hindi");
			click(AMDLoginScreen.objLanguageContinueBtn, "Display Language Continue");
			waitTime(2000);
			click(AMDLoginScreen.objBackBtn, "Back Button");
			waitTime(8000);
			click(AMDLoginScreen.objMenuHindi, "Menu icon");
			waitTime(4000);
			click(AMDLoginScreen.objProfileIcon, "Profile Icon");
			waitTime(3000);

			verifyElementPresent(AMDLoginScreen.objLoginTextChanged, "Login Text in other language");

			Dimension size1 = getDriver().manage().window().getSize();
			if (middleX == Integer.valueOf((size1.width) / 2)) {
				logger.info("Login/Register screen title is displayed at center of the screen");
				extent.extentLoggerPass("Screen Title",
						"Login/Register screen title is displayed at center of the screen");
			} else {
				logger.error("Login/Register screen title is not displayed at center of the screen");
				extent.extentLoggerFail("Screen Title",
						"Login/Register screen title is not displayed at center of the screen");
			}

			WebElement elementBackBtn1 = findElement(AMDLoginScreen.objBackBtn);
			int BackBtnleftX1 = elementBackBtn1.getLocation().getX();
			int BAckBtnrightX1 = BackBtnleftX1 + elementBackBtn1.getSize().getWidth();
			int BackBtnmiddleX1 = (BAckBtnrightX1 + BackBtnleftX1) / 2;

			if (BackBtnmiddleX1 <= 200) {
				logger.info("Back button is displayed at top left of the screen");
				extent.extentLoggerPass("Back button", "Back button is displayed at top left of the screen");
			} else {
				logger.error("Back button is not displayed at top left of the screen");
				extent.extentLoggerFail("Back button", "Back button is not displayed at top left of the screen");
			}

			WebElement elementSkipBtn1 = findElement(AMDLoginScreen.objLoginLnk);
			int SkipBtnRightX1 = elementSkipBtn1.getLocation().getX();
			System.out.println(SkipBtnRightX1);
			Dimension sizee1 = getDriver().manage().window().getSize();
			System.out.println(sizee1.getWidth());
			int sizeee1 = sizee1.getWidth() - 300;
			System.out.println(sizeee1);

			if (SkipBtnRightX1 >= sizeee1) {
				logger.info("Skip button is displayed at top right of the screen");
				extent.extentLoggerPass("Skip button", "Skip button is displayed at top right of the screen");
			} else {
				logger.error("Skip button is not displayed at top right of the screen");
				extent.extentLoggerFail("Skip button", "Skip button is not displayed at top right of the screen");
			}
			verifyElementPresent(AMDLoginScreen.objGoogleBtn, "Google Button");
			verifyElementPresent(AMDLoginScreen.objfbBtn, "Facebook Button");
			verifyElementPresent(AMDLoginScreen.objtwitterBtn, "Twitter Button");

			click(AMDLoginScreen.objBackBtn, "Back Button");
			click(AMDLoginScreen.objSettingsHindi, "Settings Button");
			swipeUntilFindElement(AMDLoginScreen.objDisplayLangHindi, "Up");
			click(AMDLoginScreen.objDisplayLangHindi, "Display Language");
			waitTime(3000);
			click(AMDLoginScreen.objLangEnglish, "Display Language English");
			click(AMDLoginScreen.objLanguageContinueBtn, "Display Language Continue");
			waitTime(2000);
			click(AMDLoginScreen.objBackBtn, "Back Button");
		} else {
			logger.info("Login/Register Screen is NOT applicable for " + pUserType);
			extent.extentLoggerPass("Login/Register Screen",
					"Login/Register Screen is NOT applicable for " + pUserType);
		}
	}
/**
 * @note this method is used for ui?UX of display language screen.
 * @param displayLanguageSelection1
 * @param displayLanguageSelection2
 * @throws Exception
 */
	public void displayLanguagePopUpValidation(String displayLanguageSelection1, String displayLanguageSelection2)
			throws Exception {

		extent.HeaderChildNode("Display Language PopUp Validation from Settings");
		logger.info("Display Language PopUp Validation from Settings");
		waitTime(5000);

		click(AMDHomePage.MoreMenuIcon, "More Menu");
		waitTime(5000);
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings Option");
		swipeUntilFindElement(AMDLoginScreen.objDisplayLang, "Up");
		click(AMDLoginScreen.objDisplayLang, "Display Language");

		verifyElementPresent(AMDLoginScreen.objDisplayLanguageScreenTitle, "Display language screen Header");
		verifyElementPresent(AMDLoginScreen.objPageTitle, "Display language page title");
		verifyElementPresent(AMDOnboardingScreen.objDiplay_ContinueBtn, "Continue button");
		verifyElementPresent(AMDOnboardingScreen.objBackBtn, "Back button");

		// To validate the selected display language, there is no unique indetifier
		// (checked in New design change DNA-Build 32.82703110.0)

		/*
		 * verifyElementPresent(AMDLoginScreen.objSelectedDisplayLanguage,
		 * "Selected display language");
		 * verifyElementPresent(AMDLoginScreen.objSelectedDisplayLanguage,
		 * "Tick mark is appeared for selected display language"); String
		 * selectedlanguage = getText(AMDLoginScreen.objSelectedDisplayLanguage); if
		 * (selectedlanguage != null) { logger.info(selectedlanguage +
		 * " language is selected by Default"); extentLoggerPass("Selected language",
		 * selectedlanguage + " language is selected by Default"); } //
		 * click(AMDOnboardingScreen.objSelectDisplayLang(displayLanguageSelection2),
		 * "language"); SelectDisplayLanguage(displayLanguageSelection2);
		 * 
		 * verifyElementPresent(AMDLoginScreen.objSelectedDisplayLanguage,
		 * "Selected display language"); int totalSelectedLanguages =
		 * getDriver().findElements(AMDLoginScreen.objSelectedDisplayLanguage).size();
		 * 
		 * if (totalSelectedLanguages == 1) { logger.
		 * info("User is able to select only one language from the display language list"
		 * ); extentLoggerPass("Select one language",
		 * "User is able to select only one language from the display language list"); }
		 * // click(AMDOnboardingScreen.objSelectDisplayLang(displayLanguageSelection1),
		 * "English language");
		 * 
		 */
		SelectDisplayLanguage(displayLanguageSelection1);

		String pos1 = getAttributValue("bounds", AMDOnboardingScreen.objSelectDisplayLang(displayLanguageSelection1));
		String pos2 = null;

		HashSet<String> h = new HashSet<String>();

		for (int i = 0; i < 3; i++) {
			int totallangs = getDriver().findElements(By.xpath("//*[@id='display_language_content']")).size();
			for (int j = 1; j <= totallangs; j++) {
				String lang = getDriver().findElement(By.xpath("(//*[@id='display_language_content'])[" + j + "]"))
						.getText();
				h.add(lang);
			}
			Swipe("UP", 1);
			pos2 = getAttributValue("bounds", AMDOnboardingScreen.objSelectDisplayLang(displayLanguageSelection1));
		}
		System.out.println(h.size());
		if (h.size() == 11) {
			logger.info("Display language screen is displayed with all the display languages");
			extentLoggerPass("Display Languages",
					"Display language screen is displayed with all the display languages");
		} else {
			logger.info("Display language screen is not displayed with all the display languages");
			extentLoggerFail("Display Languages",
					"Display language screen is not displayed with all the display languages");
		}
		if (pos1 != pos2) {
			logger.info("User is able to scroll up and down in the language list");
			extentLoggerPass("Swipe", "User is able to scroll up and down in the language list");
		} else {
			logger.info("User is not able to scroll up and down in the language list");
			extentLoggerFail("Swipe", "User is not able to scroll up and down in the language list");
		}
		click(AMDOnboardingScreen.objDiplay_ContinueBtn, "Continue button");
	}
/**
 * @note this method is used for validating the UI/UX of Login/Registration screen
 * @param inValidPhnNo
 * @param validPhnNo
 * @param loginThrough
 * @param userType
 * @throws Exception
 */
	public void loginOrRegisterScreen(String inValidPhnNo, String validPhnNo, String loginThrough, String userType)
			throws Exception {
		extent.HeaderChildNode("Validating Login/Registration screen");
		System.out.println("\nValidating Login/Registration screen");
		verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
		waitTime(5000);
		verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
		waitTime(5000);
		verifyElementPresentAndClick(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
		// verifyElementPresentAndClick(AMDOnboardingScreen.objBrowseForFreeBtn, "Browse
		// for Free");
		if (userType.equalsIgnoreCase("Guest")) {
			WebElement element = findElement(AMDLoginScreen.objLoginOrRegisterPageTitle);
			int leftX = element.getLocation().getX();
			int rightX = leftX + element.getSize().getWidth();
			int middleX = (rightX + leftX) / 2;
			Dimension size = getDriver().manage().window().getSize();
			if (middleX == Integer.valueOf((size.width) / 2)) {
				logger.info("Login/Register screen title is displayed at center of the screen");
				extent.extentLoggerPass("Screen Title",
						"Login/Register screen title is displayed at center of the screen");
			} else {
				logger.error("Login/Register screen title is not displayed at center of the screen");
				extent.extentLoggerFail("Screen Title",
						"Login/Register screen title is not displayed at center of the screen");
			}

			WebElement elementBackBtn = findElement(AMDLoginScreen.objBackBtn);
			int BackBtnleftX = elementBackBtn.getLocation().getX();
			int BAckBtnrightX = BackBtnleftX + elementBackBtn.getSize().getWidth();
			int BackBtnmiddleX = (BAckBtnrightX + BackBtnleftX) / 2;

			if (BackBtnmiddleX <= 200) {
				logger.info("Back button is displayed at top left of the screen");
				extent.extentLoggerPass("Back button", "Back button is displayed at top left of the screen");
			} else {
				logger.error("Back button is not displayed at top left of the screen");
				extent.extentLoggerFail("Back button", "Back button is not displayed at top left of the screen");
			}

			WebElement elementSkipBtn = findElement(AMDLoginScreen.objLoginLnk);
			int SkipBtnRightX = elementSkipBtn.getLocation().getX();
			System.out.println(SkipBtnRightX);
			Dimension sizee = getDriver().manage().window().getSize();
			System.out.println(sizee.getWidth());
			int sizeee = sizee.getWidth() - 300;
			System.out.println(sizeee);

			if (SkipBtnRightX >= sizeee) {
				logger.info("Skip button is displayed at top right of the screen");
				extent.extentLoggerPass("Skip button", "Skip button is displayed at top right of the screen");
			} else {
				logger.error("Skip button is not displayed at top right of the screen");
				extent.extentLoggerFail("Skip button", "Skip button is not displayed at top right of the screen");
			}

			verifyElementPresent(AMDLoginScreen.objGoogleBtn, "Goole icon");
			verifyElementPresent(AMDLoginScreen.objfbBtn, "Facebook icon");
			verifyElementPresent(AMDLoginScreen.objtwitterBtn, "Twitter icon");

			type(AMDLoginScreen.objEmailIdField, inValidPhnNo, "Email Id or Mobile Number field");
			hideKeyboard();
			verifyElementPresent(AMDLoginScreen.objErrorTxt, "Invalid Mobile number error message");

//			int ele=findElements(AMDLoginScreen.objProceedBtn).size();
			if (verifyElementPresent(AMDLoginScreen.objContinueWithTxt, "Continue with social login")) {
				logger.info("Proceed button is not displayed when user enters invalid mobile number");
				extentLoggerPass("Proceed button",
						"Proceed button is not displayed when user enters invalid mobile number");
			}
			clearField(AMDLoginScreen.objEmailIdField, "Email Id");

			type(AMDLoginScreen.objEmailIdField, validPhnNo, "Email Id or Mobile Number field");
			hideKeyboard();
			verifyElementPresent(AMDLoginScreen.objProceedBtn, "Proceed button");

			boolean proceedbtn = getDriver().findElement(AMDLoginScreen.objProceedBtn).isEnabled();

			if (proceedbtn == true) {
				logger.info("Proceed button is highlighted when user enter valid Mobile number");
				extentLoggerPass("ProceedButton", "Proceed button is highlighted when user enter valid Mobile number");
			}
			click(AMDLoginScreen.objProceedBtn, "Proceed button");
			if (verifyIsElementDisplayed(AMDLoginScreen.objLoginScreenTitle)) {
				logger.info("Proceed button is functional");
				extentLoggerPass("Proceed button functionality", "Proceed button is functional");
			} else if (verifyElementDisplayed(AMDLoginScreen.objRegistrationScreenTitle)) {
				logger.info("Proceed button is functional");
				extentLoggerPass("Proceed button functionality", "Proceed button is functional");
			} else {
				logger.info("Proceed button is not functional");
				extentLoggerFail("Proceed button functionality", "Proceed button is not functional");
			}
		} else {
			logger.info("Validation of Login/Registration screen is NOT applicable for " + userType);
			extentLoggerPass("Login/Registration",
					"Validation of Login/Registration screen is NOT applicable for " + userType);
		}
	}
/**
 * @Note this method is used validate Login/register profile is present in More screen.
 * @param loginThrough
 * @throws Exception
 */
	public void navigateToRegisterScreen(String loginThrough) throws Exception {
		System.out.println("\nVerify Login/Register screen is displayed");

		verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
		waitTime(5000);
		verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
		waitTime(5000);
		verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
		click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");

		if (verifyIsElementDisplayed(AMDLoginScreen.objLoginLnk)) {
			logger.info("Login/Register Screen is displayed");
			extent.extentLoggerPass("Login/Register Screen", "Login/Register Screen is displayed");
		} else {
			logger.error("Login/Register Screen is not displayed");
			extent.extentLoggerFail("Login/Register Screen", "Login/Register Screen is not displayed");
		}
	}
/**
 * @note this method is used for logging into app with the Email ID.
 * @param pUserName
 * @param pPassword
 * @throws Exception
 */
	public void verifyLoginWithEmailId(String pUserName, String pPassword) throws Exception {
		extent.HeaderChildNode("Login With Email-ID");

		String pUserType = getParameterFromXML("userType");
		if (pUserType.contains("Guest")) {

			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			waitTime(5000);			
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			waitTime(5000);
			verifyElementPresentAndClick(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			verifyElementPresent(AMDGenericObjects.objScreenTitleName("Login/Register"), "Login/Register");
			type(AMDLoginScreen.objEmailIdField, pUserName, "Email-ID");
			verifyElementPresentAndClick(AMDLoginScreen.objProceedBtn, "Proceed button");
			if (getText(AMDLoginScreen.objEmailIdField).equalsIgnoreCase(pUserName)) {
				extent.extentLoggerPass("Email-Id Retained", "Email Id is retained in Login screen EmailId Field");
				logger.info("Email Id is retained in Login screen EmailId Field");
			} else {
				extent.extentLoggerFail("Email-Id Retained",
						"Email Id failed to retained in Login screen EmailId Field");
				logger.error("Email Id failed to retained in Login screen EmailId Field");
			}
			String getPropertyValue = getAttributValue("enabled", AMDLoginScreen.objEmailIdField);
			if (getPropertyValue.equalsIgnoreCase("false")) {
				extent.extentLoggerPass("EmailId field is disabled/grayed out", " User cannot edit emailid field");
				logger.info("EmailId field is disabled/grayed out and user cannot edit emailid field");
			} else {
				extent.extentLoggerFail("EmailId field is not grayed out", " User is able to edit emailid field");
				logger.error("EmailId field is not grayed out and user is able to edit emailid field");
			}
			verifyLoginScreenUIFunctionality();

			verifyElementPresent(AMDLoginScreen.objPasswordField, "Password field");
			type(AMDLoginScreen.objPasswordField, "xcvzc", "Password");
			verifyElementPresent(AMDLoginScreen.objErrorTxtMsg, "Password must be a minimum of 6 characters");
			clearField(AMDLoginScreen.objPasswordField, "Password");
			type(AMDLoginScreen.objPasswordField, pPassword, "Password");
			hideKeyboard();
			verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
			Wait(2000);
			if (verifyElementPresent(AMDHomePage.objHomeTab, "Home page")) {
				extent.extentLoggerPass("Login with EmailId", pUserName + " : is logged in successfully");
				logger.info(pUserName + " is logged in  successfully");
			} else {
				extent.extentLoggerFail("Login with EmailId", pUserName + " failed to login");
				logger.error(pUserName + " failed to login");
			}
		} else {
			boolean landingPage = verifyIsElementDisplayed(AMDHomePage.HomeIcon);
			if (landingPage) {
				logger.info("Intro screen is skipped for " + pUserType);
				extent.extentLoggerPass("Intro Skipped", "Intro screen is skipped and User landed in Home screen");
			} else {
				logger.info("Intro screen is Not skipped for " + pUserType);
				extent.extentLoggerFail("Intro Skipped", "Intro screen is NOT skipped for " + pUserType);
			}
		}
	}
/**
 * @note this method is used for Social login verifiaction for HLS.
 * @param loginThrough
 * @param usertype
 * @throws Exception
 */
	public void socialLoginValidation(String loginThrough, String usertype) throws Exception {
		extent.HeaderChildNode("Social Login Validation");
		if (usertype.equalsIgnoreCase("Guest")) {
			waitTime(3000);
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home tab");
			waitTime(5000);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
			waitTime(5000);
			verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
			// Verify user is navigated to Login/Register screen post tapping Login/Register
			// link
			click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
			verifyElementPresentAndClick(AMDLoginScreen.objGoogleBtn, "Gmail icon");

			if (checkElementExist(AMDLoginScreen.objGmailSignIn, "Gmail Sign In")) {
				verifyElementPresentAndClick(AMDLoginScreen.objGmailEmailField, "Email Field");
				type(AMDLoginScreen.objGmailEmailField, "zeetest55@gmail.com", "Email Field");
				verifyElementPresentAndClick(AMDLoginScreen.objGmailNextBtn, "Next Button");
				verifyElementPresentAndClick(AMDLoginScreen.objGmailPasswordField, "Password Field");
				type(AMDLoginScreen.objGmailPasswordField, "zeetest123", "Password Field");
				verifyElementPresentAndClick(AMDLoginScreen.objGmailNextBtn, "Next Button");

				if (checkElementExist(AMDLoginScreen.objGmailAddPhoneNumber, "Add Phone Number")) {
					verifyElementPresentAndClick(AMDLoginScreen.objSkipBtn, "Skip Button");
				}
				if (checkElementExist(AMDLoginScreen.objAgreeBtn, "Agree Button")) {
					click(AMDLoginScreen.objAgreeBtn, "Agree Button");
				}

				if (checkElementExist(AMDLoginScreen.objAcceptBtn, "Accept Button")) {
					click(AMDLoginScreen.objAcceptBtn, "Accept Button");
				}
			}

			if (checkElementExist(AMDLoginScreen.objGmailAccount, "Gmail Account")) {
				click(AMDLoginScreen.objGmailAccount, "Gmail Account");
				waitTime(5000);
			}
			if (checkElementExist(AMDOnboardingScreen.objTellUsMore, "More info Screen")) {
				if (checkElementExist(AMDLoginScreen.objEmailIdField, "Email Id field")) {
					type(AMDLoginScreen.objEmailIdField, "zeetest@gmail.com", "Email Id field");
				}
				verifyElementPresentAndClick(AMDLoginScreen.objDOB, "Date of Birth");
				verifyElementPresentAndClick(AMDLoginScreen.objDate, "Date");
				verifyElementPresentAndClick(AMDLoginScreen.objDateOK, "OK button");
				verifyElementPresentAndClick(AMDLoginScreen.objGender, "Gender Field");
				verifyElementPresentAndClick(AMDLoginScreen.objGenderMale, "Male");
				verifyElementExist(AMDLoginScreen.objSubmitButton, "Submit Button");
				Back(1);
			}

			if (checkElementExist(AMDHomePage.objHome, "Home Tab")) {
				logger.info("Google login is successfull");
				extent.extentLoggerPass("Login", "Google login is successfull");
				waitTime(5000);
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
				waitTime(5000);
				swipeUntilFindElement(AMDMoreMenu.objLogout, "UP");
				verifyElementPresentAndClick(AMDMoreMenu.objLogout, "Logout");
				verifyElementPresentAndClick(AMDMoreMenu.objLogoutBtn, "Logout Button");
				waitTime(5000);
				Swipe("DOWN", 2);
				verifyElementPresentAndClick(AMDMoreMenu.objProfile, "Login/Register");
				waitTime(5000);

			} else {
				logger.info("Pre conditions not met, Account is not logged In");
				extentLogger("Gmail", "Pre conditions not met, Account is not logged In");
				for (int i = 0; i < 5; i++) {
					if (verifyIsElementDisplayed(AMDLoginScreen.objtwitterBtn)) {
						break;
					} else {
						Back(1);
					}
				}

			}

			verifyElementPresentAndClick(AMDLoginScreen.objtwitterBtn, "Twitter icon");
			waitTime(5000);

			if (checkElementExist(AMDLoginScreen.objTwitterAutorizeAllowBtn, "Authorize app")) {
				logger.info("twitter Page is displayed");
				extent.extentLoggerPass("twitter", "twitter Page is displayed");
				click(AMDLoginScreen.objTwitterAutorizeAllowBtn, "Authorize app");
			}

//			if (checkElementExist(AMDLoginScreen.objTwitterEmail, "Email Id field")) {
//				click(AMDLoginScreen.objTwitterEmail, "Email Id field");
//				type(AMDLoginScreen.objTwitterEmail, "zee5latest@gmail.com", "Email Id field");
//				verifyElementPresentAndClick(AMDLoginScreen.objTwitterPassword, "Password Field");
//				type(AMDLoginScreen.objTwitterPassword, "User@123", "Password field");
//				verifyElementPresentAndClick(AMDLoginScreen.objTwitterLoginBtn, "Login Button");
//				waitTime(5000);
//				if (checkElementExist(AMDHomePage.objHome, "Home Tab")) {
//					logger.info("User logged in successfully");
//					extent.extentLoggerPass("Login", "User logged in successfully");
//					verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
//					Swipe("UP", 2);
//					verifyElementPresentAndClick(AMDMoreMenu.objLogout, "Logout");
//					verifyElementPresentAndClick(AMDMoreMenu.objLogoutBtn, "Logout Button");
//					waitTime(5000);
//					Swipe("Down", 2);
//					verifyElementPresentAndClick(AMDMoreMenu.objProfile, "Login/Register");
//				}
//			}
			//
//			if (checkElementExist(AMDOnboardingScreen.objTellUsMore, "More info Screen")) {
//				if (checkElementExist(AMDLoginScreen.objEmailIdField, "Email Id field")) {
//					type(AMDLoginScreen.objEmailIdField, "zeetest@gmail.com", "Email Id field");
//				}
//				verifyElementPresentAndClick(AMDLoginScreen.objDOB, "Date of Birth");
//				verifyElementPresentAndClick(AMDLoginScreen.objDate, "Date");
//				verifyElementPresentAndClick(AMDLoginScreen.objDateOK, "OK button");
//				verifyElementPresentAndClick(AMDLoginScreen.objGender, "Gender Field");
//				verifyElementPresentAndClick(AMDLoginScreen.objGenderMale, "Male");
//				verifyElementExist(AMDLoginScreen.objSubmitButton, "Submit Button");
//			}
			if (checkElementExist(AMDHomePage.objHome, "Home Tab")) {
				logger.info("User logged in successfully");
				extent.extentLogger("Login", "User logged in successfully");
				waitTime(5000);
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
				waitTime(5000);
				Swipe("UP", 2);
				verifyElementPresentAndClick(AMDMoreMenu.objLogout, "Logout");
				verifyElementPresentAndClick(AMDMoreMenu.objLogoutBtn, "Logout Button");
				waitTime(5000);
				Swipe("Down", 2);
				verifyElementPresentAndClick(AMDMoreMenu.objProfile, "Login/Register");
			} else {
				logger.info("Pre conditions not met, Account is not logged In");
				extentLogger("Twitter", "Pre conditions not met, Account is not logged In");
				for (int i = 0; i < 5; i++) {
					if (verifyIsElementDisplayed(AMDLoginScreen.objtwitterBtn)) {
						break;
					} else {
						Back(1);
					}
				}
			}

			verifyElementPresentAndClick(AMDLoginScreen.objfbBtn, "Facebook icon");
			waitTime(5000);
			if (checkElementExist(AMDLoginScreen.objFbPage)) {
				logger.info("facebook Page is displayed");
				extent.extentLoggerPass("FB", "facebook Page is displayed");
			} else {
				logger.error("facebook Page is not displayed");
				extent.extentLoggerFail("Login", "User logged in not successfully");
			}
//			if (checkElementExist(AMDLoginScreen.objFBLogIntoAnotherAccount, "Log Into Another Account")) {
//				click(AMDLoginScreen.objFBLogIntoAnotherAccount, "Log Into Another Account");
//				if (checkElementExist(AMDLoginScreen.objFBEmail, "Email Id field")) {
//					click(AMDLoginScreen.objFBEmail, "Email Id field");
//					type(AMDLoginScreen.objFBEmail, "igszeefive@gmail.com", "Email Id field");
//					verifyElementPresentAndClick(AMDLoginScreen.objFBPassword, "Password Field");
//					type(AMDLoginScreen.objFBPassword, "zeefive@igs", "Password field");
//					verifyElementPresentAndClick(AMDLoginScreen.objFBLoginBtn, "Login Button");
//				}
//			} else if (checkElementExist(AMDLoginScreen.objFBEmail, "Email Id field")) {
//				click(AMDLoginScreen.objFBEmail, "Email Id field");
//				type(AMDLoginScreen.objFBEmail, "igszeefive@gmail.com", "Email Id field");
//				verifyElementPresentAndClick(AMDLoginScreen.objFBPassword, "Password Field");
//				type(AMDLoginScreen.objFBPassword, "zeefive@igs", "Password field");
//				verifyElementPresentAndClick(AMDLoginScreen.objFBLoginBtn, "Login Button");
//			}
			if (checkElementExist(AMDHomePage.objHome, "Home Tab")) {
				logger.info("User logged in successfully");
				extent.extentLoggerPass("Login", "User logged in successfully");
				waitTime(5000);
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More Menu");
				waitTime(5000);
				Swipe("UP", 1);

				verifyElementPresentAndClick(AMDMoreMenu.objLogout, "Logout");
				verifyElementPresentAndClick(AMDMoreMenu.objLogoutBtn, "Logout Button");
				waitTime(5000);
				Swipe("Down", 2);
				verifyElementPresentAndClick(AMDMoreMenu.objProfile, "Login/Register");
			} else {
				logger.info("Pre conditions not met, Account is not logged In");
				extentLogger("Facebook", "Pre conditions not met, Account is not logged In");
				for (int i = 0; i < 5; i++) {
					if (verifyIsElementDisplayed(AMDLoginScreen.objtwitterBtn)) {
						break;
					} else {
						Back(1);
					}
				}
			}
//			if (checkElementExist(AMDOnboardingScreen.objTellUsMore, "More info Screen")) {
//				if (checkElementExist(AMDLoginScreen.objEmailIdField, "Email Id field")) {
//					type(AMDLoginScreen.objEmailIdField, "zeetest@gmail.com", "Email Id field");
//				}
//				verifyElementPresentAndClick(AMDLoginScreen.objDOB, "Date of Birth");
//				verifyElementPresentAndClick(AMDLoginScreen.objDate, "Date");
//				verifyElementPresentAndClick(AMDLoginScreen.objDateOK, "OK button");
//				verifyElementPresentAndClick(AMDLoginScreen.objGender, "Gender Field");
//				verifyElementPresentAndClick(AMDLoginScreen.objGenderMale, "Male");
//				verifyElementExist(AMDLoginScreen.objSubmitButton, "Submit Button");
//				Back(1);
//			}
		} else {
			logger.info("Social Login is NOT Applicable for Registered Users");
			extentLogger("Registered User", "Social Login is NOT Applicable for Registered Users");
		}
	}
/**
 * @note this method is used for Selecting the CL in CL screen.
 * @param planguage
 * @throws Exception
 */
	public void selectContentLang_MoreMenu(String planguage) throws Exception {

		click(AMDHomePage.HomeIcon, "Home button");
		click(AMDHomePage.MoreMenuIcon, "More Menu");
		Swipe("UP", 1);
		verifyElementPresentAndClick(AMDMoreMenu.objSettings, "Settings CTA");
		verifyElementPresent(AMDGenericObjects.objScreenTitleName("Settings"), "Settings Screen");
		Swipe("UP", 1);
		verifyElementPresentAndClick(AMDMoreMenu.objContentLang, "Content language");
		verifyElementPresent(AMDGenericObjects.objScreenTitleName("Content Language"), "Content language screen");

		// ****** UnSelecting default content languages ******
		if (pUserType.contains("Guest")) {
			click(AMDOnboardingScreen.objSelectContentLang("English"), "English");
			PartialSwipe("UP", 2);
			waitTime(1000);
			click(AMDOnboardingScreen.objSelectContentLang("Kannada"), "Kannada");
			Swipe("DOWN", 1);
		}

		// ****** Selecting required language ******
		if (planguage.contains(",")) {
			Swipe("DOWN", 1);
			String[] pLanguages = planguage.split(",");
			int n = pLanguages.length;
			for (int i = 0; i < n; i++) {
				int totalLanguages = getCount(AMDOnboardingScreen.objContentLangBtns);
				for (int j = 1; j <= totalLanguages; j++) {
					String visibleLang = getText(AMDOnboardingScreen.objgetContentLangName(j));
					if (pLanguages[i].equalsIgnoreCase(visibleLang)) {
						verifyElementPresentAndClick(AMDOnboardingScreen.objSelectContentLang(pLanguages[i]),
								pLanguages[i]);
					}
				}
				PartialSwipe("UP", 1);
			}
		} else {
			outerLoop: for (int i = 1; i <= 4; i++) {
				int totalLanguages = getCount(AMDOnboardingScreen.objContentLangBtns);
				for (int j = 1; j <= totalLanguages; j++) {
					String visibleLang = getText(AMDOnboardingScreen.objgetContentLangName(j));
					if (planguage.equalsIgnoreCase(visibleLang)) {
						verifyElementPresentAndClick(AMDOnboardingScreen.objSelectContentLang(planguage), planguage);
						break outerLoop;
					}
				}
				PartialSwipe("UP", 1);
			}
		}

		waitTime(1000);
		verifyElementPresentAndClick(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button");
		waitTime(3000);
	//    verifyElementExist(AMDGenericObjects.objBackBtn, "Back button");
	 //   click(AMDGenericObjects.objBackBtn, "Back button");
	//	Back(1);
	//	click(AMDHomePage.HomeIcon, "Home button");
		BackToLandingScreen();
	}
/**
 * @note this method is used for disselecting the user CL and selecting the default languages.
 * @param planguage
 * @throws Exception
 */
	public void deselectContentLang_MoreMenuAndSelectDefaultLanguage(String planguage) throws Exception {

		click(AMDHomePage.HomeIcon, "Home button");
		click(AMDHomePage.MoreMenuIcon, "More Menu");
		Swipe("UP", 1);
		click(AMDMoreMenu.objSettings, "Settings CTA");
		verifyElementDisplayed(AMDGenericObjects.objScreenTitleName("Settings"));
		Swipe("UP", 1);
		click(AMDMoreMenu.objContentLang, "Content language");
		verifyElementDisplayed(AMDGenericObjects.objScreenTitleName("Content Language"));

		// ***** deSelecting selected language *****
		if (planguage.contains(",")) {
			Swipe("DOWN", 1);
			String[] pLanguages = planguage.split(",");
			int n = pLanguages.length;
			System.out.println(n);
			for (int i = 0; i < n; i++) {
				int totalLanguages = getCount(AMDOnboardingScreen.objContentLangBtns);
				for (int j = 1; j <= totalLanguages; j++) {
					String visibleLang = getText(AMDOnboardingScreen.objgetContentLangName(j));
					if (pLanguages[i].equalsIgnoreCase(visibleLang)) {
						click(AMDOnboardingScreen.objSelectContentLang(pLanguages[i]), pLanguages[i]);
					}
				}
				PartialSwipe("UP", 3);
			}
		} else {
			outerLoop: for (int i = 1; i <= 4; i++) {
				int totalLanguages = getCount(AMDOnboardingScreen.objContentLangBtns);
				for (int j = 1; j <= totalLanguages; j++) {
					String visibleLang = getText(AMDOnboardingScreen.objgetContentLangName(j));
					if (planguage.equalsIgnoreCase(visibleLang)) {
						click(AMDOnboardingScreen.objSelectContentLang(planguage), planguage);
						break outerLoop;
					}
				}
				PartialSwipe("UP", 1);
			}
		}

		// ***** Selecting default content languages *****
		if (pUserType.contains("Guest")) {
			Swipe("DOWN", 4);
			click(AMDOnboardingScreen.objSelectContentLang("English"), "English");
			PartialSwipe("UP", 2);
			waitTime(1000);
			click(AMDOnboardingScreen.objSelectContentLang("Kannada"), "Kannada");
			Swipe("DOWN", 1);
		}
		waitTime(1000);
		click(AMDOnboardingScreen.objContent_ContinueBtn, "Continue button");
		waitTime(1000);
//	click(AMDGenericObjects.objBackBtn, "Back button");
	//	Back(1);
	//	click(AMDHomePage.HomeIcon, "Home button");
		BackToLandingScreen();
	}
/**
 * @note this method is used for Account Details Validation
 * @param userType
 * @throws Exception
 */
	public void accountDetailsGuestUser(String userType) throws Exception {

		extent.HeaderChildNode("Account Details Validation for User type : " + userType);
		System.out.println("\nAccount Details Validation for User type : " + userType);
		waitTime(6000);
		click(AMDHomePage.MoreMenuIcon, "More icon");
		// Verify Login/Register for better experience is displayed in Profile screen
		verifyElementPresent(AMDMoreMenu.objLoginRegisterText, "Login/Register for best experience text");
		// Verify user is navigated to Login/Register screen post tapping Login/Register
		// link
		click(AMDMoreMenu.objLoginRegisterText, "Login/Registet link");
		String header = getText(AMDGenericObjects.objgetScreenTitle);
		if (header.equals("Login/Register")) {
			extent.extentLoggerPass("Verify navigation", "User is navigated to " + header
					+ " screen post tapping Login/Register link from more menu screen ");
			logger.info("User is navigated to " + header
					+ " screen post tapping Login/Register link from more menu screen");
		} else {
			extent.extentLoggerFail("Verify navigation",
					"User is not navigated to Login/Register screen post tapping Login/Register link from more menu screen ");
			logger.info(
					"User is not navigated to Login/Register screen post tapping Login/Register link from more menu screen");
		}

		// Verify user is navigated back to previous screen on clicking back button
		// click back button
		click(AMDGenericObjects.objBackBtn, "Back button");
		waitTime(2000);
		Swipe("DOWN", 1);
		if (verifyElementExist(AMDMoreMenu.objProfile, "Profile icon")) {
			extent.extentLoggerPass("Verify navigation",
					"User is navigate back to the previous screen post tapping back button from Login/Register screen");
			logger.info(
					"User is navigate back to the previous screen post tapping back button from Login/Register screen");
		} else {
			extent.extentLoggerFail("Verify navigation",
					"User is not navigated back to the previous screen post tapping back button from Login/Register screen");
			logger.info(
					"User is not navigated back to the previous screen post tapping back button from Login/Register screen");
		}
	}
/**
 * @note this method is used for validating UI/UX of More Menu - Profile validations
 * @param userType
 * @throws Exception
 */
	public void accountDetailsLoggedInUser(String userType) throws Exception {
		extent.HeaderChildNode("More Menu - Profile validations for user type : " + userType);
		System.out.println("\nMore Menu - Profile validations for user type : " + userType);
		waitTime(6000);
		// Verify that Profile details are displayed
		click(AMDMoreMenu.objMoreMenuIcon, "More tab screen");

		// Verify user name is displayed
		boolean userName = verifyIsElementDisplayed(AMDMoreMenu.objUserName);
		if (userName) {
			String profileName = getText(AMDMoreMenu.objUserName);
			extent.extentLoggerPass("Verify profile name is displayed",
					"Profile name for the logged in user is :" + profileName);
			logger.info("Profile name for the logged in user is :" + profileName);
		} else {
			extent.extentLoggerFail("Verify profile name is displayed",
					"Profile name is not displayed for the logged in user");
			logger.info("Profile name is not diaplayed for the logged in user");
		}
		// Verify Email id displayed
		boolean registerLogin = verifyIsElementDisplayed(AMDMoreMenu.objLoginRegisterText);
		if (registerLogin) {
			String EmailID = getText(AMDMoreMenu.objLoginRegisterText);
			extent.extentLoggerPass("Verify Email ID is displayed", "Email ID for the logged in user is :" + EmailID);
			logger.info("Email ID for the logged in user is :" + EmailID);
		} else {
			extent.extentLoggerFail("Verify Email ID is displayed", "Email ID is not displayed for the logged in user");
			logger.info("Emial ID is not diaplayed for the logged in user");
		}
		
		/*
		// click on profile
		verifyElementPresentAndClick(AMDMoreMenu.objLoginRegisterText, "Profile Icon");
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("Plan Info unit validations for" + userType);
			// verify plan info unit is displayed
			boolean accessPackDetails = verifyIsElementDisplayed(AMDMyProfileScreen.aobjAccessPackDetailsInfo);
			if (accessPackDetails) {
				extent.extentLoggerPass("Verify access details pack unit",
						"Plan Info unit is displayed for the Subscribed user");
				logger.info("Plan Info unit is displayed for the Subscribed user");

				// Verify Plan Info unit
				String planType = getText(AMDMyProfileScreen.objPlanType);
				String duration = getText(AMDMyProfileScreen.objPlanDuration);
				String price = getText(AMDMyProfileScreen.objPlanPrice);
				String validity = getText(AMDMyProfileScreen.objPackStatus);

				if (planType.length() > 1) {
					extent.extentLoggerPass("Verify the plan type", "The Paln type :" + planType);
					logger.info("The Paln type :" + planType);
				}
				if (duration.length() > 1) {
					extent.extentLoggerPass("Verify the plan duration", "The  duration of the Paln  :" + duration);
					logger.info("The  duration of the Paln  : " + duration);
				}
				if (price.length() > 1) {
					extent.extentLoggerPass("Verify the plan price", "The Paln price :" + price);
					logger.info("The Paln price :" + price);
				}
				if (validity.length() > 1) {
					extent.extentLoggerPass("Verify the plan validity", "The Paln validity :" + validity);
					logger.info("The Paln validity :" + validity);
				}

				// Verify Details CTA
				verifyElementPresentAndClick(AMDMyProfileScreen.objDetailsCTA, "Details CTA");
				// Verify user is navigated to My subscription page
				String header = getText(AMDGenericObjects.objgetScreenTitle);
				if (header.equals("My Subscriptions")) {
					extent.extentLoggerPass("Verify Navigation", "User is navigated to  screen : " + header);
					logger.info("User is navigated to  screen : " + header);
				} else {
					extent.extentLoggerFail("Verify Navigation",
							"User is navigated not navigated to My Subscription screen");
					logger.error("User is navigated not navigated to My Subscription screen");
				}

			} else {
				extent.extentLoggerFail("Verify access details pack unit",
						"Plan Info unit is not displayed for the Subscribed user");
				logger.info("Plan Info unit is  not displayed for the Subscribed user");
			}
			if (userType.equals("SubscribedUser")) {
				int PacksName = getDriver().findElements(AMDProfileScreen.objPackName).size();
				if (PacksName == 1) {
					String Pack = getText(AMDProfileScreen.objPackName(1));
					if (Pack.equalsIgnoreCase("Premium Pack")) {
						extent.extentLoggerPass("Pack Name", "Only Premium pack is activated for the logged in user");
						logger.info("Only Premium pack is activated for the logged in user");
					} else {
						extent.extentLogger("Pack Name", "Only RSVOD pack is activated for the logged in user");
						logger.info("Only RSVOD pack is activated for the logged in user");
					}
					Back(1);
				} else {
					for (int i = 1; i <= PacksName; i++) {
						String Pack = getText(AMDProfileScreen.objPackName(i));
						extent.extentLoggerPass("PackName", "Pack Name : " + Pack);
						logger.info("Pack Name : " + Pack);
					}
					Back(1);
					String packNameInAccountDetails = getText(AMDProfileScreen.objSubsPlanNameTxt);
					if (packNameInAccountDetails.contains("Premium Pack")) {
						extent.extentLoggerPass("Priority",
								"Premium pack is displayed over RSVOD pack in Account details screen");
						logger.info("Premium pack is displayed over RSVOD pack in Account details screen");
					} else {
						extent.extentLoggerFail("Priority",
								"Premium pack is not displayed over RSVOD pack in Account details screen");
						logger.info("Premium pack is not displayed over RSVOD pack in Account details screen");
					}
				}
			}
		}
		ChangePasswordScreen();
		mobileAndOTPScreenValidations();
		Back(1);
		Swipe("Down", 1);
		*/
		
		
		myProfileScreen(userType);
		
		/*
		EditProfileScreen(userType);
		socialLoginValidationsForEditProfileScreen(userType);
		*/
		
		BackToLandingScreen();
//		click(AMDHomePage.objMoreMenu, "More");
//		swipeUntilFindElement(AMDHomePage.objLogout, "UP");
//		verifyElementPresentAndClick(AMDHomePage.objLogout, "Logout");
//		verifyElementPresentAndClick(AMDHomePage.objLogoutPopUpLogoutButton, "Logout button");
//		swipeUntilFindElement(AMDMoreMenu.objLoginRegisterText, "DOWN");
//		click(AMDMoreMenu.objLoginRegisterText, "Login/Register link");
//		if (userType.equals("NonSubscribedUser")) {
//			loginWithEmailID(NonsubscribedUserName, NonsubscribedPassword);
//		} else if (userType.equals("SubscribedUser")) {
//			loginWithEmailID(SubscribedUserName, SubscribedPassword);
//		}
		click(AMDMoreMenu.objMoreMenuIcon, "More tab screen");
	}
/**
 * @note this method is used for validation of logout option for logged in users.
 * @param userType
 * @throws Exception
 */
	public void logoutValidation(String userType) throws Exception {
		extent.HeaderChildNode("Validation of Logout option as " + userType);
		System.out.println("\nValidation of Logout option as " + userType);
		Back(1);
		waitTime(8000);
		click(AMDHomePage.objMoreMenu, "More menu");
		waitTime(1000);
		if (userType.contentEquals("Guest")) {
			if (verifyElementIsNotDisplayed(AMDMoreMenu.objLogout)) {
				logger.info("Logout option is NOT displayed for " + userType + "user");
				extent.extentLoggerPass("Log out", "Logout option is NOT displayed for " + userType + "user");
			} else {
				logger.error("Logout option is displayed for " + userType + "user");
				extent.extentLoggerFail("Log out", "Logout option is displayed for " + userType + "user");
			}
		}
		if (userType.contentEquals("NonSubscribedUser") || userType.contentEquals("SubscribedUser")) {
			swipeUntilFindElement(AMDMoreMenu.objLogout, "UP");
			verifyElementPresentAndClick(AMDMoreMenu.objLogout, "Logout option in More menu");
			verifyElementPresent(AMDMoreMenu.objLogoutPopup, "Logout Confirmation Popup");
			verifyElementPresent(AMDMoreMenu.objCancelButton, "Cancel button");
			verifyElementPresent(AMDMoreMenu.objLogoutButton, "Logout button");
			String getPropertyValue = getAttributValue("enabled", AMDMoreMenu.objCancelButton);
			if (getPropertyValue.equalsIgnoreCase("true")) {
				logger.info("Cancel button is by default highlighted");
				extent.extentLoggerPass("Cancel button", "Cancel button is by default highlighted");
			} else {
				logger.error("Cancel button is not  highlighted by default");
				extent.extentLoggerFail("Cancel button", "Cancel button is not highlighted by default");
			}
			click(AMDMoreMenu.objCancelButton, "Cancel button");
			//String getPropertyValue2 = getAttributValue("enabled", AMDHomePage.objMoreMenu);
			if (checkElementExist(AMDMoreMenu.objLogout)) {
				logger.info("Cancel button is tappable and functional");
				extent.extentLoggerPass("Cancel button", "Cancel button is tappable and functional");
			} else {
				logger.error("Cancel button is NOT tappable and NOT functional");
				extent.extentLoggerFail("Cancel button", "Cancel button is NOT tappable and NOT functional");
			}
			click(AMDMoreMenu.objLogout, "Logout option in More menu");
			click(AMDMoreMenu.objLogoutButton, "Logout button");
			Swipe("DOWN", 1);
			swipeUntilFindElement(AMDMoreMenu.objProfileHeader, "DOWN");
			String value = getText(AMDMoreMenu.objProfileHeader);
			if (value.equalsIgnoreCase("Guest")) {
				logger.info("Logout button is tappable and user is logged out successfully");
				extent.extentLoggerPass(" Logout button",
						"Logout button is tappable and user is logged out successfully");
			} else {
				logger.error("Logout button is NOT tappable and user is unable to logout");
				extent.extentLoggerFail(" Logout button", "Logout button is NOT tappable and user is unable to logout");
			}
		}
	}
/**
 * @note this method is used for the verifying terma of use screen.
 * @param userType
 * @throws Exception
 */
	public void termsOfUseScreen(String userType) throws Exception {
		extent.HeaderChildNode("Verifying Terms of Use screen as " + userType);
		System.out.println("\nVerifying Terms of Use screen as " + userType);
		Back(1);
		waitTime(5000);
		verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
		waitTime(2000);
		Swipe("UP", 2);
		verifyElementPresentAndClick(AMDMoreMenu.objTermsOfUse, "Terms of Use option in More menu");
		verifyElementPresent(AMDMoreMenu.objTermsOfUseHeader, "Terms Of Use Header");
		if (verifyIsElementDisplayed(AMDMoreMenu.objTermsOfUseHeader)) {
			logger.info("User is navigated to Terms of Use screen");
			extent.extentLoggerPass("Terms of Use", "User is navigated to Terms of Use screen");
		} else {
			logger.error("User is unable to navigate to Terms of Use screen");
			extent.extentLoggerFail("Terms of Use", "User is unable to navigate to Terms of Use screen");
		}
		verifyElementPresent(AMDMoreMenu.objcloseButton, "Close button in Terms of Use Screen");
		verifyElementPresent(AMDMoreMenu.objTermsDescription,
				"Breif information of the Application in Terms Of Use Screen");
		Swipe("UP", 10);
		swipeUntilFindElement(AMDMoreMenu.objsupportHyperlinkInTermsOfUse, "UP");
		// hyperlink 1
		String str1 = getElementPropertyToString("content-desc", AMDMoreMenu.objsupportHyperlinkInTermsOfUse,
				"Hyper link");
		System.out.println(str1);
		verifyElementPresent(AMDMoreMenu.objsupportHyperlinkInTermsOfUse, str1 + " Hyperlink");
		click(AMDMoreMenu.objsupportHyperlinkInTermsOfUse, "Hyperlink " + str1);
		waitTime(2000);
		if (verifyIsElementDisplayed(AMDMoreMenu.objInternetErrormsg)) {
			logger.error("On clicking the Hyperlink " + str1
					+ "[AMA2-5711] - User is unable to navigate to the respective page of Hyperlink");
			extent.extentLoggerFail("HyperLink", "[AMA2-5711] - On clicking the Hyperlink " + str1
					+ " User is unable to navigate to the respective page of Hyperlink");
		} else {
			logger.info("User is navigated to the respective page of the Hyperlink " + str1);
			extent.extentLoggerPass("Hyperlink", "User is navigated to the respective page of the Hyperlink " + str1);
		}
		Back(1);
		/*
		 * Swipe("UP", 7); // hyperlink 2 //String str2 =
		 * getText(AMDMoreMenu.objfeedbackLinkInTermsOfUse); String str2 =
		 * getElementPropertyToString("content-desc",
		 * AMDMoreMenu.objfeedbackLinkInTermsOfUse, "Feedback Link");
		 * System.out.println(str2);
		 * verifyElementPresent(AMDMoreMenu.objfeedbackLinkInTermsOfUse, str2 +
		 * " Hyperlink"); click(AMDMoreMenu.objfeedbackLinkInTermsOfUse, "Hyperlink " +
		 * str2); if (verifyIsElementDisplayed(AMDMoreMenu.objInternetErrormsg)) {
		 * logger.error("On clicking the Hyperlink " + str2 +
		 * " User is unable to navigate to the respective page of Hyperlink");
		 * extent.extentLoggerFail("HyperLink", "On clicking the Hyperlink " + str2 +
		 * " User is unable to navigate to the respective page of Hyperlink"); } else {
		 * logger.info("User is navigated to the respective page of the Hyperlink " +
		 * str2); extent.extentLogger("Hyperlink",
		 * "User is navigated to the respective page of the Hyperlink " + str2); }
		 * Back(1); // hyper link 3 Swipe("UP", 49); String str3 =
		 * getElementPropertyToString("content-desc",AMDMoreMenu.
		 * objsubscribelinkInTermsofUse, "Subscribe link");
		 * 
		 * System.out.println(str3);
		 * verifyElementExist(AMDMoreMenu.objsubscribelinkInTermsofUse, str3 +
		 * " Hyperlink"); click(AMDMoreMenu.objsubscribelinkInTermsofUse, "Hyperlink " +
		 * str3); if (verifyIsElementDisplayed(AMDSubscibeScreen.objSubscribeHeader)) {
		 * logger.info("On clicking the Hyperlink " + str3 +
		 * " User is navigated succesfully to the respective page: " +
		 * getText(AMDSubscibeScreen.objSubscribeHeader));
		 * extent.extentLogger("HyperLink", "On clicking the Hyperlink " + str3 +
		 * " User is navigated succesfully to the respective page: " +
		 * getText(AMDSubscibeScreen.objSubscribeHeader)); } else { logger.
		 * error("User is unable to navigate to the respective page of the Hyperlink " +
		 * str3); extent.extentLoggerFail("Hyperlink",
		 * "User is unable to navigate to the respective page of the Hyperlink " +
		 * str3); } Back(1); // hyper link 4 String str4 =
		 * getText(AMDMoreMenu.objzee5HyperlinkinTermsOfUse); System.out.println(str4);
		 * verifyElementExist(AMDMoreMenu.objzee5HyperlinkinTermsOfUse, str4 +
		 * " Hyperlink"); click(AMDMoreMenu.objzee5HyperlinkinTermsOfUse, "Hyperlink " +
		 * str4); if (verifyIsElementDisplayed(AMDHomePage.objHomeTab)) {
		 * logger.info("On clicking the Hyperlink " + str4 +
		 * " User is navigated succesfully to the respective page: " +
		 * getText(AMDHomePage.objHomeTab)); extent.extentLogger("HyperLink",
		 * "On clicking the Hyperlink " + str4 +
		 * " User is navigated succesfully to the respective page: " +
		 * getText(AMDHomePage.objHomeTab)); } else { logger.
		 * error("User is unable to navigate to the respective page of the Hyperlink " +
		 * str4); extent.extentLoggerFail("Hyperlink",
		 * "User is unable to navigate to the respective page of the Hyperlink " +
		 * str4); }
		 */
		Back(1);
	}
/**
 * @note this method is used for validation of Privacy Policy Screen
 * @param userType
 * @throws Exception
 */
	public void privacyPolicyScreen(String userType) throws Exception {
		extent.HeaderChildNode("Validation of Privacy Policy Screen as " + userType);
		System.out.println("\nValidation of Privacy Policy Screen as " + userType);
		Back(1);
		waitTime(5000);
		click(AMDHomePage.objMoreMenu, "More menu");
		Swipe("UP", 2);
		swipeUntilFindElement(AMDMoreMenu.objPrivacyPolicy, "UP");
		verifyElementPresentAndClick(AMDMoreMenu.objPrivacyPolicy, "Privacy Policy option in More menu");
		waitTime(4000);
		verifyElementPresent(AMDMoreMenu.objPrivacyPolicyHeader, "Privacy Policy Header");
		if (verifyIsElementDisplayed(AMDMoreMenu.objPrivacyPolicyHeader)) {
			logger.info("User is navigated to Privacy Policy screen");
			extent.extentLoggerPass("Privacy Policy", "User is navigated to Privacy Policy screen");
		} else {
			logger.error("User is unable to navigate to Privacy Policy screen");
			extent.extentLoggerFail("Privacy Policy", "User is unable to navigate to Privacy Policy screen");
		}
		verifyElementPresent(AMDMoreMenu.objcloseButton, "Close button in Privacy Policy Screen");
		verifyElementPresent(AMDMoreMenu.objPrivacyDescription,
				"Breif Description about the Application in Privacy Policy Screen");
		verifyElementPresent(AMDMoreMenu.objHyperlinkInPrivacyPolicy, "Hyper link in Privacy Policy");
		String str1 = getElementPropertyToString("content-desc", AMDMoreMenu.objHyperlinkInPrivacyPolicy, "Hyper Link");
		System.out.println(str1);
		verifyElementExist(AMDMoreMenu.objHyperlinkInPrivacyPolicy, str1 + " Hyperlink");
		click(AMDMoreMenu.objHyperlinkInPrivacyPolicy, "Hyperlink " + str1);
		if (verifyIsElementDisplayed(AMDMoreMenu.objPrivacyPolicyPageWithinbrowser)) {
			logger.info("On clicking the Hyperlink " + str1 + " , User is able to navigate to the respective page");
			extent.extentLoggerPass("HyperLink",
					"On clicking the Hyperlink " + str1 + " , User is able to navigate to the respective page");
		} else {
			logger.error("User is unable to navigate to the respective page of the Hyperlink [AMA2-5711] " + str1);
			extent.extentLoggerFail("Hyperlink",
					"[AMA2-5711] - User is unable to navigate to the respective page of the Hyperlink" + str1);
		}
		waitTime(2000);
		Back(1);
		/*
		 * Swipe("UP", 23); String str2 =
		 * getElementPropertyToString("content-desc",AMDMoreMenu.
		 * objsupportlinkInprivacypolicy,"Support link"); System.out.println(str2);
		 * verifyElementPresent(AMDMoreMenu.objsupportlinkInprivacypolicy, str2 +
		 * " Hyperlink"); waitTime(2000);
		 * click(AMDMoreMenu.objsupportlinkInprivacypolicy, "Hyperlink " + str2); //
		 * defect if (verifyIsElementDisplayed(AMDMoreMenu.objInternetErrormsg)) {
		 * logger.error("On clicking the Hyperlink " + str2 +
		 * " User is unable to navigate to the respective page of Hyperlink");
		 * extent.extentLoggerFail("HyperLink", "On clicking the Hyperlink " + str2 +
		 * " User is unable to navigate to the respective page of Hyperlink"); } else {
		 * logger.info("User is navigated to the respective page of the Hyperlink " +
		 * str2); extent.extentLogger("Hyperlink",
		 * "User is navigated to the respective page of the Hyperlink " + str2); }
		 * Back(1);
		 */
		click(AMDMoreMenu.objcloseButton, "Close button");
		// click(AMDHomePage.HomeIcon, "Home icon");
	}
/**
 * @note this method is used for Static Page Verification in selected language
 * @throws Exception
 */
	public void staticPagesInDisplayLanguage() throws Exception {
		extent.HeaderChildNode("Static Page Verification in selected language");
		System.out.println("\nStatic Page Verification in selected language");
		Back(1);
		waitTime(5000);

		String pDisplayLanguage = "Kannada";
		click(AMDHomePage.objMoreMenu, "More menu");
		waitTime(2000);
		swipeUntilFindElement(AMDMoreMenu.objSettings, "UP");
		click(AMDMoreMenu.objSettings, "Settings");
		Swipe("UP", 2);
		swipeUntilFindElement(AMDMoreMenu.objDisplayLang, "UP");
		click(AMDMoreMenu.objDisplayLang, "Display Language");
		click(AMDOnboardingScreen.objSelectDisplayLang(pDisplayLanguage), "Kannada language");
		click(AMDOnboardingScreen.objDiplay_ContinueBtn, "[Display Language] Continue Button");
		click(AMDMoreMenu.objBackbtnInSettings, "Back button");
		click(AMDHomePage.objMoreMenu, "More menu");
		waitTime(1000);
		Swipe("UP", 2);
		waitTime(2000);
		// About Us
		boolean aboutUsInKannada = verifyElementPresentAndClick(AMDMoreMenu.objAboutUsInKannada,
				"About Us option is in Kannada");
		if (aboutUsInKannada) {
			logger.info("About Us option is displayed in " + pDisplayLanguage + " language script");
			extent.extentLoggerPass("About Us",
					"About Us option is displayed in " + pDisplayLanguage + " language script");
		} else {
			logger.error("About Us option is NOT displayed in " + pDisplayLanguage + " language script");
			extent.extentLoggerFail("About Us",
					"About Us option is NOT displayed in " + pDisplayLanguage + " language script");
		}

		if (checkElementExist(AMDMoreMenu.objTextInAboutUsScreen)) {
			logger.error("Content of the About Us Page is not according to the display language set by user");
			extent.extentLoggerFail("About Us",
					"[ZNA-8890] - Content of the About Us Page is not according to the display language set by user");
		} else {
			logger.info("Content of the About Us page is according to display language set by user");
			extent.extentLoggerPass("About Us",
					"Content of the About Us page is according to display language set by user");
		}
		click(AMDMoreMenu.objcloseButton, "Close button");
		Swipe("UP", 1);
		// Check for Help Center option in selected language
		verifyElementPresentAndClick(AMDMoreMenu.objHelpCenterInKannada, "Help Center option in Kannada");
		waitTime(3000);
		String title = getText(AMDMoreMenu.objHelpCenterHeader);
		if (title.contains("Help Center")) {
			logger.info("Title of the page displayed: " + title);
			extent.extentLogger("pagetitle", "Title of the page displayed: " + title);
			logger.error(
					"[ZNA-8890] - Content of Help Center page is not according to the display language set by user");
			extent.extentLoggerFail("Help Center",
					"[ZNA-8890] - Content of Help Center page is not according to the display language set by user");
		} else {
			logger.info("Content of the Help Center page is according to display language set by user");
			extent.extentLoggerPass("About Us",
					"Content of the Help Center page is according to display language set by user");
		}
		click(AMDMoreMenu.objcloseButton, "Close button");
		Swipe("UP", 1);
		// Terms of Use
		verifyElementPresentAndClick(AMDMoreMenu.objTermsInKannada, "Terms of Use option in Kannada");
		waitTime(2000);
		String title2 = getText(AMDMoreMenu.objTermsOfUseHeader);
		if (title2.contains("Terms of Use")) {
			logger.info("Title of the page displayed: " + title2);
			extent.extentLogger("pagetitle", "Title of the page displayed: " + title2);
			logger.error(
					"[ZNA-8890] - Content of the Terms of Use page is not according to the display language set by user");
			extent.extentLoggerFail("Terms of Use",
					"[ZNA-8890] - Content of the Terms of Use page is not according to the display language set by user");
		} else {
			logger.info("Content of the Terms of Use page is according to display language set by user");
			extent.extentLoggerPass("About Us",
					"Content of the Terms of Use page is according to display language set by user");
		}
		click(AMDMoreMenu.objcloseButton, "Close button");
		// Privacy Policy
		verifyElementPresentAndClick(AMDMoreMenu.objPrivacyPolicyInKannada, "Privacy Policy option in Kannada");
		String title3 = getText(AMDMoreMenu.objPrivacyPolicyHeader);
		if (title3.contains("Privacy Policy")) {
			logger.info("Title of the page displayed: " + title3);
			extent.extentLogger("pagetitle", "Title of the page displayed: " + title3);
			logger.error(
					"[ZNA-8890] - Content of the Privacy Policy page is according to display language set by user");
			extent.extentLoggerFail("Privacy Policy",
					"[ZNA-8890] - Content of the Privacy Policy page is according to display language set by user");
		} else {
			logger.info("Content of the Privacy Policy page is not according to the display language set by user");
			extent.extentLoggerPass("Privacy Policy",
					"Content of the Privacy Policy page is not according to the display language set by user");
		}
		click(AMDMoreMenu.objcloseButton, "Close button");
		// Changing to English
		click(AMDMoreMenu.objSettingsInKannada, "Settings");
		Swipe("UP", 1);
		swipeUntilFindElement(AMDMoreMenu.objDisplayLang, "UP");
		click(AMDMoreMenu.objDisplayLang, "Display Language");
		click(AMDOnboardingScreen.objSelectDisplayLang("English"), "English language");
		click(AMDOnboardingScreen.objDiplay_ContinueBtn, "[Display Language] Continue Button");
		Back(1);
	}
	
	/**
	 * @note this method is used for selecting the tab in top navigation bar
	 * @param pTabname
	 * @throws Exception
	 */
	public void selectTopNavigationTab(String pTabname) throws Exception {
		System.out.println("\nSelecting " + pTabname + " from Top navigation tabs");
		waitTime(6000);
		verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home button");
		int noOfTabs = getCount(AMDHomePage.objTitle);
		System.out.println("\nTop Navigation Tabs: " + noOfTabs);
		for (int k = 1; k <= noOfTabs; k++) {
			if (verifyIsElementDisplayed(AMDGenericObjects.objPageTitle(pTabname))) {
				waitTime(6000);
				click(AMDGenericObjects.objPageTitle(pTabname), pTabname);
				waitTime(6000);
				break;
			} else {
				List<WebElement> element = getDriver().findElements(By.xpath("//*[@id='homeTabLayout']/*/child::*"));
				waitTime(6000);
				element.get(noOfTabs - 1).click();
				waitTime(6000);
			}
		}
	}


	public void carouselValidation(String UserType, String tabName, String contentTitle) throws Exception {

		extent.HeaderChildNode("Carousel validations for tab :" + tabName + "\"");
		waitForElementDisplayed(AMDHomePage.objCarouselDots, 10);
		waitTime(10000);

//		if (verifyElementDisplayed(AMDHomePage.objBannerAd)) {
//			verifyElementPresent(AMDHomePage.objCarouselUnitwithmastHeadAdbanner,
//					"Carousel unit as first unit on " + tabName + " screen");
//		} else {
//			verifyElementPresent(AMDHomePage.objCarouselUnitwhenNomastHeadAdbanner,
//					"Carousel unit as first unit on " + tabName + " screen");
//		}

		// Validating Carousel manual swipe
		String width = getAttributValue("width", AMDHomePage.objCarouselConetentCard);

		String bounds = getAttributValue("bounds", AMDHomePage.objCarouselConetentCard);
		String b = bounds.replaceAll(",", " ").replaceAll("]", " ");
		String height = b.split(" ")[1];

		waitTime(3000);
		String Carouseltitle1 = getText(AMDHomePage.objCarouselTitle2);
		logger.info(Carouseltitle1);
		extentLoggerPass("Carousel Title", Carouseltitle1);
		carouselCardsSwipe("LEFT", 1, width, height);

		String Carouseltitle2 = getText(AMDHomePage.objCarouselTitle2);
		logger.info(Carouseltitle2);
		extentLoggerPass("Carousel Title", Carouseltitle2);
		carouselCardsSwipe("RIGHT", 1, width, height);

		String Carouseltitle3 = getText(AMDHomePage.objCarouselTitle2);
		logger.info(Carouseltitle3);
		extentLoggerPass("Carousel Title", Carouseltitle3);

		if (!Carouseltitle1.equalsIgnoreCase(Carouseltitle2)) {
			logger.info(UserType + " is able to manually swipe banners from right to left or vice versa.");
			extent.extentLoggerPass("Carousel swipe",
					UserType + " is able to manually swipe banners from right to left or vice versa.");
		} else if (Carouseltitle3.equalsIgnoreCase(Carouseltitle1)) {
			logger.info(UserType + " is able to manually swipe banners from right to left or vice versa.");
			extent.extentLoggerPass("Carousel swipe",
					UserType + " is able to manually swipe banners from right to left or vice versa.");
		} else {
			logger.error(UserType + " is not able to manually swipe banners from right to left or vice versa.");
			extent.extentLoggerFail("Carousel swipe",
					UserType + " is NOT able to manually swipe banners from right to left or vice versa.");
		}

		// Validating Pagination dot, Play icon and GetPremium on Carousel
		int noofCarouselContents = findElements(By.xpath(
				"(//*[@resource-id='com.graymatrix.did:id/cell_top_container'])[1]/parent::*/parent::*/parent::*/following-sibling::*/child::*"))
						.size();
		for (int i = 1; i <= noofCarouselContents; i++) {
			logger.info(getText(AMDHomePage.objCarouselTitle1));

			// To Verify PAGINATION DOT displayed
			if (checkElementExist(AMDHomePage.objCarouselDots, "Pagination dot")) {
				logger.info("Pagination dot is displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
				extent.extentLoggerPass("Pagination dot",
						"Pagination dot is displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
			} else {
				logger.error(
						"Pagination dot is NOT displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
				extent.extentLoggerFail("Pagination dot",
						"Pagination dot is NOT displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
			}
			// To Verify PLAY ICON displayed
			if (checkElementExist(AMDHomePage.objPlayBtn, "Play icon")) {
				logger.info("Play icon is displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
				extent.extentLoggerPass("Play icon",
						"Play icon is displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
			} else {
				logger.error("Play icon is NOT displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
				extent.extentLoggerFail("Play icon",
						"Play icon is NOT displayed for carousel card: " + getText(AMDHomePage.objCarouselTitle1));
			}
			carouselCardsSwipe("LEFT", 1, width, height);
		}

		if ((UserType.equalsIgnoreCase("Guest")) | (UserType.equalsIgnoreCase("NonSubscribedUser"))) {
			boolean var = false;
			for (int i = 1; i <= noofCarouselContents; i++) {

				if (tabName.equals("Music")) {
					extent.extentLogger("Verify Buy Plan tag",
							"Buy Plan tag is not configured for " + tabName + " tab");
					logger.info("Buy Plantag is not configured for " + tabName + " tab");
					break;

				} else {
					var = verifyIsElementDisplayed(AMDHomePage.objPremiumBtn,
							"Buy Plan tag for carousal content " + i + ": ");
					carouselCardsSwipe("LEFT", 1, width, height);
				}
			}
			waitTime(3000);
			var = waitForElementAndClickIfPresent(AMDHomePage.objPremiumBtn, 75, "Buy Plan tag");
			if (var == true) {
				verifyElementPresent(AMDSubscibeScreen.objSubscribeHeader, "Subscription screen");
				waitTime(5000);
				Back(1);
				waitTime(5000);
				//Swipe("Down", 1);
			}
		} else {
			for (int i = 1; i <= noofCarouselContents; i++) {

				System.out.println(getText(AMDHomePage.objCarouselTitle1));
				if (verifyElementIsNotDisplayed(AMDHomePage.objPremiumBtn)) {
					logger.info("Buy Plan tag is NOT displayed");
					extentLoggerPass("Buy Plan Tag", "Buy Plan tag is NOT displayed");
				} else {
					logger.error("Buy Plan tag is displayed");
					extentLoggerFail("Get premium Tag", "Buy Plan tag is displayed");
				}
				carouselCardsSwipe("LEFT", 1, width, height);
			}
		}

		// navigation to consumption screen of selected content

		waitForElementAndClickIfPresent(AMDHomePage.objContentTitle(contentTitle), 75, "Carousel content");
		waitTime(5000);
		if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
			Back(1);
			// click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
		}

		verifyElementPresent(AMDHomePage.objConsumptionScreenTitle, "Consumption screen");
		String consumptionScreenTitle = getText(AMDHomePage.objConsumptionScreenTitle);
		String contentinfo = getText(AMDPlayerScreen.objcontentRating);

		if (!(tabName.equalsIgnoreCase("Home") || tabName.equalsIgnoreCase("Premium")
				|| tabName.equalsIgnoreCase("ZEE5 Originals"))) {
			if (contentTitle.contains(consumptionScreenTitle) | contentinfo.contains(contentTitle) ) {
				logger.info("Consumption Screen is displayed for the selected content");
				extent.extentLoggerPass("Consumption screen",
						"Consumption Screen is displayed for the selected content");
			} else {
				logger.error("Consumption Screen is not displayed for the selected content");
				extent.extentLoggerFail("Consumption screen",
						"Consumption Screen is not displayed for the selected content");
			}
		}

		if (verifyIsElementDisplayed(AMDHomePage.objSubscribePopup)) {
			Back(1);
			// click(AMDGenericObjects.objPopUpDivider, "Pop Up divider");
		}
		Back(1);

		// Validating Carousel Auto scroll
		String title1 = getText(AMDHomePage.objCarouselTitle1);
		logger.info(title1);
		extentLoggerPass("Carousel Title", title1);
		waitTime(4000);
		String title2 = getText(AMDHomePage.objCarouselTitle2);
		logger.info(title2);
		extentLoggerPass("Carousel Title", title2);
		waitTime(4000);
		String title3 = getText(AMDHomePage.objCarouselTitle3);
		logger.info(title3);
		extentLoggerPass("Carousel Title", title3);

		if (!(title1.equalsIgnoreCase(title2))) {
			if (!(title2.equalsIgnoreCase(title3))) {
				logger.info(
						"Banners available in feature carousel unit rotates from right to left at a fixed time interval");
				extentLoggerPass("Carousel unit Autorotation",
						"Banners available in feature carousel unit rotate from right to left at a fixed time interval");
			} else {
				logger.error(
						"Banners available in feature carousel unit are not rotating from right to left at a fixed time interval");
				extentLoggerFail("Carousel unit Autorotation",
						"Banners available in feature carousel unit are not rotating from right to left at a fixed time interval");
			}
		} else {
			logger.error(
					"Banners available in feature carousel unit are not rotating from right to left at a fixed time interval");
			extentLoggerFail("Carousel unit Autorotation",
					"Banners available in feature carousel unit are not rotating from right to left at a fixed time interval");
		}
	}
	
	/**
	 * @Note This method is used to Downloaded content playback (video quality option has been removed/Hidden currently for Player and rewrite build).
	 * @param userType(Guest,Non Subscribed,Subscribed)
	 *@author Madhav
	 */
	public void downloadsContentPlayBackValidation(String userType, String Quality, boolean checkAlwaysAskOption)
			throws Exception {

		extent.HeaderChildNode("Downloading content and Content Play back of Downloaded content Validation");

		boolean value = verifyElementDisplayed(AMDHomePage.objDownloadBtn);
		if (value) {
			logger.info("'Downloads' option is displayed in Bottom navigation bar menu of Home page");
			extent.extentLoggerPass("Downloads Screen",
					"'Downloads' option is displayed in Bottom navigation bar menu of Home page");
		} else {
			logger.error("'Downloads' option is NOT displayed in Bottom navigation bar menu of Home page");
			extent.extentLoggerFail("Downloads Screen",
					"'Downloads' option is NOT displayed in Bottom navigation bar menu of Home page");
		}

		if (!(userType.equalsIgnoreCase("Guest"))) {
			waitTime(10000);
			click(AMDHomePage.objSearchBtn, "Search button");
			waitTime(2000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, "Chamak 14 Phere", "Search box");
			click(AMDSearchScreen.objSearchkeypad, "Search icon in keypad");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objContentNameInPlayer("Chamak"), "Search result");
			waitTime(5000);
			verifyElementPresentAndClick(AMDDownloadPage.objDownloadIcon, "Download button");
			waitTime(2000);
			downloadVideoQualityPopUp(Quality, checkAlwaysAskOption);
			waitTime(3000);
			Back(1);
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			click(AMDDownloadPage.objvideostab, "Videos tab in Downloads landing screen");
			waitTime(8000);
		//	waitForElementAndClickIfPresent(AMDDownloadPage.objDownloadCompleteIcon, 3000, "downloadCompleteIcon");
			click(AMDDownloadPage.objDownloadCompleteIcon, "Download complete icon");
			verifyElementPresentAndClick(AMDDownloadPage.objPlayDownloadedContent, "Play Call-out");
			waitTime(6000);
			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
				waitTime(2000);
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			}
			click(AMDDownloadPage.objPauseIconOnPlayer, "Pause Icon");
			verifyElementExist(AMDDownloadPage.objBackinPlayer, "Back icon");		
			verifyElementExist(AMDPlayerScreen.objProgressBar, "Progress bar");
			WebElement element = getDriver().findElement(AMDPlayerScreen.objProgressBar);
			String xDuration = getAttributValue("x", AMDPlayerScreen.objTotalDuration);
			int endX = Integer.parseInt(xDuration) - 30;
			SwipeAnElement(element, endX, 0);
			waitTime(2000);
			verifyElementExist(AMDPlayerScreen.objTimer, "Start Time");
			verifyElementExist(AMDPlayerScreen.objTotalDuration, "Total time duration of video");
			verifyElementPresentAndClick(AMDPlayerScreen.objspeed, "Play back rate");
			verifyElementExist(AMDPlayerScreen.objplaybackrateoption, "Play back rate options");
			click(AMDPlayerScreen.objCloseIcon,"Close");	
								
			waitTime(3000);
			click(AMDDownloadPage.objBackinPlayer, "Back icon");
			if ((findElement(AMDDownloadPage.objvideostab)).isEnabled() == true) {
				logger.info("On tapping back icon on player, user by default navigates to Videos tab");
				extent.extentLoggerPass("Downloads Screen",
						"On tapping back icon on player, user by default navigates to Videos tab");
			} else {
				logger.error("On tapping back icon on player, user by default fails to navigates to Videos tab");
				extent.extentLoggerFail("Downloads Screen",
						"On tapping back icon on player, user by default fails to navigates to Videos tab");
			}
			click(AMDHomePage.objHomeBtn, "Home");

		} else {
			logger.info("Downloads Content Playback is not applicable for " + userType);
			extent.extentLogger("Downloads", "Downloads Content Playback is not applicable for " + userType);
		}
	}	
	
	/**
	 * @note : this method is used to play downloaded content playback in offline mode(currently the video quality option has been removed/hidden in player rewrite build).
	 * @param userType(Guest/NonSubscribed/Subscribed)
	 * @Author Madhav
	 */
	public void PlayDownloadedContentOffline_And_PlayBackValidation(String userType) throws Exception {
		extent.HeaderChildNode("Play Downloaded content and validate play back in OFFLINE");
		if (!(userType.equalsIgnoreCase("Guest"))) {
			click(AMDHomePage.objDownloadBtn, "Downloads tab");
			waitTime(2000);
			click(AMDDownloadPage.objDownloadedContent, "Downloaded content");
			waitTime(2000);
			TurnOFFWifi();
			if (getOEMName.equalsIgnoreCase("Sony")) {
				wifi_TurnOFFnON();
			}
			waitTime(4000);
			verifyElementPresentAndClick(AMDDownloadPage.objPlayDownloadedContent, "Play Call-out");
			waitTime(5000);
			click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			if (verifyElementDisplayed(AMDDownloadPage.objPauseIconOnPlayer)) {
				logger.info("Playback of downloaded content is initiated in offline");
				extent.extentLoggerPass("Downloads Screen", "Playback of downloaded content is initiated in offline");
			} else {
				logger.error("Playback of downloaded content is NOT initiated in offline");
				extent.extentLoggerFail("Downloads Screen",
						"Playback of downloaded content is NOT initiated in offline");
			}
			waitTime(5000);

			if (verifyElementIsNotDisplayed(AMDPlayerScreen.objNextIcon)) {
				waitTime(2000);
				click(AMDPlayerScreen.objPlayerScreen, "Player screen");
			}

			verifyElementPresentAndClick(AMDDownloadPage.objPauseIconOnPlayer, "Pause Icon");
			verifyElementExist(AMDDownloadPage.objBackinPlayer, "Back icon");

			verifyElementExist(AMDPlayerScreen.objProgressBar, "Progress bar");
			verifyElementExist(AMDPlayerScreen.objTimer, "Start Time");
			verifyElementExist(AMDPlayerScreen.objTotalDuration, "Total time duration of video");

				verifyElementPresentAndClick(AMDPlayerScreen.objspeed, "Play back rate");
				verifyElementExist(AMDPlayerScreen.objplaybackrateoption, "Play back rate options");
				click(AMDPlayerScreen.objCloseIcon,"Close");	
			Back(1);

			TurnONWifi();
			if (getOEMName.equalsIgnoreCase("Sony")) {
				wifi_TurnOFFnON();
			}
			waitTime(2000);
			BackToLandingScreen();
			click(AMDHomePage.objHomeBtn, "Home");
		} else {
			logger.info(" Not applicable for " + userType);
			extent.extentLogger("VerifyOTP", "Not applicable for " + userType);
		}

	}
	
	/**
	 * @note This method is used to validate the Prepaid/Promo code.
	 * @param userType
	 * @throws Exception
	 */
	public void subscriptionValidationHLSForValidPrepaidCode(String userType) throws Exception {
	//	zeeApplicasterLogin(userType);
		extent.HeaderChildNode("Verify valid Prepaid/Promo code journey from Subscription screen");
		System.out.println("\nVerify valid Prepaid/Promo code journey from Subscription screen");

		String prepaidcode = "zee5scb";
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			verifyElementPresent(AMDHomePage.objSubscribeTeaser, "Buy plan CTA on landing screen");
			waitTime(2000);
			verifyElementPresent(AMDHomePage.objGetPremiumCTAOnCarousel, "Buy Plan CTA on carousel");

			click(AMDHomePage.objGetPremiumCTAOnCarousel, "Buy Plan CTA on landing screen");
			waitTime(5000);

			Swipe("UP", 2);
			click(AMDSubscibeScreen.objHaveACodeCTA, "Have a code");
			waitTime(2000);
			getDriver().getKeyboard().sendKeys(prepaidcode);
			hideKeyboard();
			click(AMDSubscibeScreen.objApplyOnHaveACodescreen, "Apply button");

//-------Have a code flow has been changed
			/*-------if (userType.equals("Guest")) {
						boolean objAccountinfo = verifyIsElementDisplayed(AMDSubscibeScreen.objAccountInfoText1);
						if (objAccountinfo) {
							logger.info(
									"User is navigated to Account info screen on tapping apply button after entering prepaid code");
							extent.extentLoggerPass("Account info",
									"User is navigated to Account info screen on tapping apply button after entering prepaid code");
						} else {
							logger.error("User is unable to navigate to Account info screen");
							extent.extentLoggerFail("Account info", "User is unable to navigate to Account info screen");
						}
			
						click(AMDSubscibeScreen.objEmailID, "Email field");
						type(AMDSubscibeScreen.objEmailID, "zee5latest@gmail.com", "Email field");
						hideKeyboard();
						click(AMDSubscibeScreen.objProceedBtn, "Proceed button");
						click(AMDSubscibeScreen.objPasswordTextField, "Password field");
						// type(AMDSubscibeScreen.objPasswordTextField, "User@123"+"\n", "Password
						// field");
						getDriver().getKeyboard().sendKeys("User@123" + "\n");
			
						hideKeyboard();
						click(AMDSubscibeScreen.objProceedPWDScreen, "Proceed button");----------*/
			if (verifyIsElementDisplayed(AMDSubscibeScreen.objApplyPromoCodeappliedText)) {
				logger.info("Discounted price is displayed after promo code is applied");
				extent.extentLoggerPass("Promo", "Discounted price is displayed after promo code is applied");
			} else {
				logger.error("Discounted price is not displayed after promo code is applied");
				extent.extentLoggerFail("Promo", "Discounted price is not displayed after promo code is applied");
			}

			verifyElementExist(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
			if (userType.equalsIgnoreCase("Guest")) {
				verifyElementExist(AMDSubscibeScreen.objAccountInfoScreen, "Account info screen");
				loginFromAccountInfoScreen(NonsubscribedUserName, NonsubscribedPassword);
				waitTime(2000);
			}
			verifyElementExist(AMDSubscibeScreen.objMakePaymentScreen, "Make payment screen");
			waitTime(2000);
			BackToLandingScreen();
			if (userType.equalsIgnoreCase("Guest")) {
				zNALogoutMethod();
			}

		} else {
			logger.info("Not applicable for " + userType);
			extentLogger("Login", "Not applicable for " + userType);
		}
	}
/**
 * @Note This method is used to validate the invalid Prepaid/Promo code
 * @param userType
 * @param contentWithoutTrailer
 * @throws Exception
 */
	@SuppressWarnings("deprecation")
	public void subscriptionValidationHLSForInvalidPrepaidCode(String userType, String contentWithoutTrailer)
			throws Exception {
		waitTime(15000);
		extent.HeaderChildNode("Verify invalid Prepaid/Promo code from Subscription screen");
		System.out.println("\nVerify invalid Prepaid/Promo code from Subscription screen");
		String prepaidCode = "Z56MSK93rJGDyi";
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			waitTime(15000);
			click(AMDHomePage.objSearchBtn, "Search button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, contentWithoutTrailer, "Search box");
			click(AMDSearchScreen.objSearchkeypad, "Search in keyboard");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objContentNameInPlayer(contentWithoutTrailer), "Search result");
			waitTime(5000);
			verifyIsElementDisplayed(AMDConsumptionScreen.objContentName);
			waitTime(6000);
			click(AMDPlayerScreen.objSubscribeButtonBelowThePlayer, "Buy Plan CTA below the player");
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe screen");
			Swipe("UP", 2);
			click(AMDSubscibeScreen.objHaveACodeCTA, "Prepaid code");
			waitTime(2000);
			getDriver().getKeyboard().sendKeys(prepaidCode);
			hideKeyboard();
			click(AMDSubscibeScreen.objApplyOnHaveACodescreen, "Apply button");
			waitTime(3000);
			verifyElementExist(AMDSubscibeScreen.objInvalidPromoCodeText, "Invalid promo code error message");
			BackToLandingScreen();
		} else {
			logger.info("Not applicable for " + userType);
			extentLogger("Login", "Not applicable for " + userType);
		}
	}
/**
 * @Note Subscription pack validation for subscribed user
 * @param userType
 * @throws Exception
 */
	public void subscriptionValidationForSubscribedUser(String userType) throws Exception {
		extent.HeaderChildNode("Subscribed user with All Access pack validations");
		if (userType.equals("SubscribedUser")) {
			click(AMDHomePage.objMoreMenu, "More menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");

			if (verifyIsElementDisplayed(AMDHomePage.objEditProfile)) {
				logger.info("User is logged in successfully");
				extent.extentLoggerPass("Edit", "User is logged in successfully");
			} else {
				logger.error("User is not logged in successfully");
				extent.extentLoggerFail("Edit", "User is not logged in successfully");
			}
			Back(1);
			click(AMDHomePage.objHomeBtn, "Home tab");
			waitTime(4000);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuBtn, "More Menu");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuOptions("My Subscription"), "My Subscription");
			verifyElementExist(AMDHomePage.objPackAmount, "Purchased pack details");
			verifyElementExist(AMDHomePage.objCancelRenewal, "Cancel Renewal option");
			verifyElementPresentAndClick(AMDHomePage.objBrowseAllPack, "Browse all packs button");
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
			Back(1);
			waitTime(2000);
			Back(1);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuOptions("Buy Plan"), "Buy Plan");
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe header in subscription page");
			verifyElementExist(AMDSubscibeScreen.objSubscribePageBackButton, "Back button in subscribe page");
			verifyElementExist(AMDSubscibeScreen.objPlanName, "Available plan in subscribe page");
			verifyElementExist(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button in subscribe page");
			if (getDriver().findElement(AMDSubscibeScreen.objContinueOnSubscribePopup).isEnabled()) {
				logger.info("Continue button is highlighted");
				extent.extentLoggerPass("Highlighted", "Continue button is highlighted");
			}
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
			if (checkElementExist(AMDHomePage.objHomeBtn, "Home tab")) {
				logger.info(
						"Subscribed user with all access pack is navigated to home page after tapping on buy subscription continue button");
				extent.extentLoggerPass("Home",
						"Subscribed user with all access pack is navigated to home page after tapping on buy subscription continue button");
			} else {
				logger.error(
						"Subscribed user with all access pack is not navigated to home page after tapping on buy subscription continue button");
				extent.extentLoggerFail("Home",
						"Subscribed user with all access pack is not navigated to home page after tapping on buy subscription continue button");
				Back(1);
			}
		} else {
			logger.info("This is NOT applicable for " + userType);
			extentLoggerPass("Login", "This is NOT applicable for " + userType);
		}
	}
	/**
	 * @note this method is used to verify the Subscription entry points.
	 * @param userType
	 * @throws Exception
	 */
	public void subscribeEntryPointsValidations(String userType) throws Exception {

		if (userType.equals("Guest")) {
			HeaderChildNode("Entry points");
			waitTime(10000);
			verifyElementExist(AMDHomePage.objGetPremiumCTAOnCarosel, "Buy Plan CTA on carosel");
			click(AMDHomePage.objGetPremiumCTAOnCarosel, "Buy Plan CTA on carosel");
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
			Back(1);
			waitTime(5000);
			click(AMDHomePage.objShowsTab, "Shows Tab");
			waitTime(5000);
//			closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000); // INTERSTITIAL AD - HANDLED HERE
			// Swipe("UP", 2);
			findTray(AMDHomePage.objBeforeTVTray);
			// waitTime(5000);
			boolean beforTV = verifyIsElementDisplayed(AMDHomePage.objBeforeTVTray);
			if (beforTV) {
				waitTime(5000);
				String beforeTVtrayName = findElement(AMDHomePage.objBeforeTVTray).getText();
				click(AMDGenericObjects.objViewAllBtn(beforeTVtrayName), "View All_Before TV Show");
				waitTime(4000);
				click(AMDHomePage.objBeforeTVContent, "BeforeTV content");
				waitTime(5000);
				verifyElementPresentAndClick(AMDSubscibeScreen.objGetPremiumCTA, "Buy Plan icon");
				verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe screen");
				Swipe("UP", 1);
				click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
				verifyElementExist(AMDSubscibeScreen.objAccountInfoScreen, "Account info screen");
				Back(3);

			} else {
				logger.info("Before TV tray is not displayed");
				extent.extentLoggerWarning("TV", "Before TV tray is not displayed");
				click(AMDHomePage.HomeIcon, "Home Tab");
			}

			waitTime(3000);
			click(AMDHomePage.HomeIcon, "Home Tab");
			click(AMDHomePage.MoreMenuIcon, "More Menu");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuOptions("Buy Plan"), "Buy Plan");
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe page");
			subscribePageValidation();
			passwordScenario("Registered");
			unRegisteredEmailSubscribe();
			subscribeFLowMobileNumber();
			waitTime(10000);
			Back(2);
			HeaderChildNode("Entry points");
			click(AMDHomePage.objSearchBtn, "Search button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, "Shivaji Surathkal\n", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objFirstSearchResult, "Search result");
			waitTime(5000);
			verifyIsElementDisplayed(AMDConsumptionScreen.objContentName);
			waitTime(30000);
			verifyElementExist(AMDConsumptionScreen.objGetPremiumOnPlayer, "Buy Plan CTA");
			// Swipe("UP", 1);
			click(AMDConsumptionScreen.objGetPremiumOnPlayer, "Buy Plan CTA");
			waitTime(3000);
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe page");
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
			verifyElementExist(AMDSubscibeScreen.objAccountInfoScreen, "Account info screen");
			Back(1);
			waitTime(3000);
			Back(1);
			click(AMDHomePage.HomeIcon, "Home Tab");
			click(AMDSearchScreen.objFirstSearchResult, "Search result");
			waitTime(6000);
			verifyElementExist(AMDConsumptionScreen.objContentName, "Content name below the player");
			waitTime(3000);
			verifyElementExist(AMDConsumptionScreen.objGetPremiumCTA, "Buy Plan CTA below the player");
			click(AMDConsumptionScreen.objGetPremiumCTA, "Buy Plan CTA below the player");
			waitTime(3000);
			// Swipe("UP", 1);
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
			verifyElementExist(AMDSubscibeScreen.objAccountInfoScreen, "Account info screen");

		}

		else if (userType.equals("NonSubscribedUser")) {
			HeaderChildNode("Entry points");
			verifyElementExist(AMDHomePage.objHomeBtn, "Home button");
			click(AMDHomePage.objMoreMenu, "More menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");

			if (verifyIsElementDisplayed(AMDHomePage.objEditProfile)) {
				logger.info("User is logged in successfully");
				extent.extentLoggerPass("Edit", "User is logged in successfully");
			} else {
				logger.error("User is not logged in successfully");
				extent.extentLoggerFail("Edit", "User is not logged in successfully");
			}
			Back(1);
			click(AMDHomePage.objHomeBtn, "Home tab");
			waitTime(4000);
			verifyElementExist(AMDHomePage.objGetPremiumCTAOnCarosel, "Buy Plan CTA on carosel");
			click(AMDHomePage.objGetPremiumCTAOnCarosel, "Buy Plan CTA on carosel");
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe page");
			Back(1);
			waitTime(5000);
			click(AMDHomePage.objShowsTab, "Shows Tab");
			waitTime(5000);
//			closeInterstitialAd(AMDGenericObjects.objCloseInterstitialAd, 2000); // INTERSTITIAL AD - HANDLED HERE
			// Swipe("UP", 1);
			// waitTime(5000);
			findTray(AMDHomePage.objBeforeTVTray);
			boolean beforTV = verifyIsElementDisplayed(AMDHomePage.objBeforeTVTray);
			if (beforTV) {
				waitTime(5000);
				String beforeTVtrayName = findElement(AMDHomePage.objBeforeTVTray).getText();
				click(AMDGenericObjects.objViewAllBtn(beforeTVtrayName), "View All_Before TV Show");
				waitTime(4000);
				click(AMDHomePage.objBeforeTVContent, "BeforeTV content");
				waitTime(5000);
				verifyElementPresentAndClick(AMDSubscibeScreen.objGetPremiumCTA, "Buy Plan icon");
				verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe screen");
				Swipe("UP", 1);
				click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
				waitForElementDisplayed(AMDSubscibeScreen.objPlanName, 5);
				Back(3);

			} else {
				logger.info("Before TV tray is not displayed");
				extent.extentLoggerWarning("TV", "Before TV tray is not displayed");
				click(AMDHomePage.HomeIcon, "Home Tab");
			}
			waitTime(3000);
			click(AMDHomePage.HomeIcon, "Home Tab");
			click(AMDHomePage.objHomeBtn, "Home Tab");
			click(AMDHomePage.objMoreMenuBtn, "More Menu");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuOptions("Buy Plan"), "Buy Plan");
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
			Back(1);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuOptions("My Subscription"), "My Subscription");
			verifyElementPresentAndClick(AMDHomePage.objSubscribeNowInMySubscription, "Buy Plan CTA");
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
			Back(1);
			waitTime(3000);
//			Back(1);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuOptions("My Transactions"), "My Transactions");
			waitTime(3000);
			if (verifyIsElementDisplayed(AMDHomePage.objSubscribeNowInMyTransaction, "Buy Plan CTA")) {
				click(AMDHomePage.objSubscribeNowInMyTransaction, "Buy Plan CTA");
				verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
				Back(1);
			} else {
				logger.info("There is an InActive Subscription pack details");
				extent.extentLogger("My Transactions", "There is an InActive Subscription pack details");
			}
			waitTime(3000);
			Back(1);
			HeaderChildNode("Subscription flow");
			click(AMDHomePage.objHomeBtn, "Home Tab");
			
		//	click(AMDHomePage.objSubscribeTeaser, "Subscribe button");
			click(AMDHomePage.objMoreMenuBtn, "More Menu");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuOptions("Buy Plan"), "Buy Plan");
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
			
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe header in subscription page");
			verifyElementExist(AMDSubscibeScreen.objSubscribePageBackButton, "Back button in subscribe page");
			// verifyElementExist(AMDSubscibeScreen.objAdbanner, "Carosual in subscription
			// page");
			Swipe("UP", 1);
			verifyElementExist(AMDSubscibeScreen.objHaveACodeCTA, "Have a code in subscribe page");
			click(AMDSubscibeScreen.objHaveACodeCTA, "Have a code in subscribe page");
			// verifyElementPresent(AMDSubscibeScreen.objApply, "Apply button is subscribe
			// page");
			if (verifyElementIsNotDisplayed(AMDSubscibeScreen.objApplyOnHaveACodescreen)) {
				logger.info("Apply button is not highlighted by default");
				extent.extentLoggerPass("Highlighted", "Apply button is not highlighted by default");
			}
			click(AMDSubscibeScreen.objEnterACodeEditFiled, "Promo");
			type(AMDSubscibeScreen.objEnterACodeEditFiled, PromoCode, "Promo code");
			hideKeyboard();
			click(AMDSubscibeScreen.objApplyOnHaveACodescreen, "Apply button");
			verifyElementExist(AMDSubscibeScreen.objApplyPromoCodeappliedText, "Promo code applied text");
			if (checkElementExist(AMDSubscibeScreen.objApplyPromoCodeappliedText, "Promo")) {
				logger.info("Discounted price is displayed after promo code is applied");
				extent.extentLoggerPass("Promo", "Discounted price is displayed after promo code is applied");
			} else {
				logger.error("Discounted price is not displayed after promo code is applied");
				extent.extentLoggerFail("Promo", "Discounted price is not displayed after promo code is applied");
			}
			click(AMDSubscibeScreen.objChangeCodebutton, "Change promo");
			click(AMDSubscibeScreen.objEnterACodeEditFiled, "Promo");
			type(AMDSubscibeScreen.objEnterACodeEditFiled, "zee5flat5000", "Promo code");
			hideKeyboard();
			click(AMDSubscibeScreen.objApplyOnHaveACodescreen, "Apply button");
			verifyElementExist(AMDSubscibeScreen.objInvalidPromoCodeText, "Invalid promo code error message");
//			Swipe("UP", 2);
//			PartialSwipe("UP", 2);
//			verifyElementExist(AMDSubscibeScreen.objDescriptionText, "Premium Description in subscribe page");
//			Swipe("DOWN", 1);
//			verifyElementExist(AMDSubscibeScreen.objPremiumTab, "Premium pack tab");
//			verifyElementExist(AMDSubscibeScreen.objClubTab, "Club pack tab");
//			Swipe("UP", 1);
//			int size = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).size();
//			for (int i = 0; i < size; i++) {
//				boolean isDisplayed = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).isDisplayed();
//				if (isDisplayed) {
//					String pack = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).getText();
//					extent.extentLoggerPass("Packs", "Available Pack " + i + " : " + pack);
//					logger.info("Available Pack " + i + " : " + pack);
//				} else {
//					extent.extentLoggerFail("Packs", "No Packs are available");
//					logger.info("No Packs are available");
//				}
//			}
//			Swipe("UP", 1);
			Back(1);
			verifyElementExist(AMDSubscibeScreen.objContinueBtn, "Continue button in subscribe page");
			if (getDriver().findElement(AMDSubscibeScreen.objContinueBtn).isEnabled()) {
				logger.info("Continue button is highlighted");
				extent.extentLoggerPass("Highlighted", "Continue button is highlighted");
			}
//			Swipe("DOWN", 1);
//			click(AMDSubscibeScreen.objRSVODPremiumPack, "RSVOD Pack tab");
//			verifyElementPresentAndClick(AMDSubscibeScreen.objRSVODPack1, "RSVOD Plan for 30 days");
//			PartialSwipe("UP", 2);
//			verifyElementExist(AMDSubscibeScreen.objRSVODPack2, "RSVOD Plan for 365 days");
//			int size3 = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).size();
//			for (int i = 0; i < size3; i++) {
//				boolean isDisplayed = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).isDisplayed();
//				if (isDisplayed) {
//					String pack = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).getText();
//					extent.extentLoggerPass("Packs", "Available Pack " + i + " : " + pack);
//					logger.info("Available Pack " + i + " : " + pack);
//				} else {
//					extent.extentLoggerFail("Packs", "No Packs are available");
//					logger.info("No Packs are available");
//				}
//			}
			// Swipe("Down", 1);
			verifyElementExist(AMDSubscibeScreen.objPlanName, "Available plan in subscribe page");
			// Swipe("Up", 2);
			if (getDriver().findElement(AMDSubscibeScreen.objContinueBtn).isEnabled()) {
				logger.info("Continue button is highlighted");
				extent.extentLoggerPass("Highlighted", "Continue button is highlighted");
			}
			click(AMDSubscibeScreen.objContinueBtn, "Continue button");
			verifyElementExist(AMDSubscibeScreen.objMakePaymentScreen, "Payment page");
			// verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe header in
			// Payment page");
			// verifyElementExist(AMDSubscibeScreen.objSubscribePageBackButton, "Back button
			// in Payment page");
			Back(1);
			waitTime(3000);
			Back(1);
			click(AMDHomePage.HomeIcon, "Home Tab");
			waitTime(5000);
			click(AMDHomePage.objSearchBtn, "Search button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, "Shivaji Surathkal\n", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objFirstSearchResult, "Search result");
			waitTime(5000);
			verifyIsElementDisplayed(AMDConsumptionScreen.objContentName);
			waitTime(30000);
			verifyElementExist(AMDConsumptionScreen.objGetPremiumOnPlayer, "Buy Plan CTA");
			// Swipe("UP", 1);
			click(AMDConsumptionScreen.objGetPremiumOnPlayer, "Buy Plan CTA");
			waitTime(3000);
			verifyElementExist(AMDSubscibeScreen.objNewSubscribePopup, "Subscribe page");
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue");
			verifyElementExist(AMDSubscibeScreen.objMakePaymentScreen, "Payment page");
			Back(1);
			waitTime(3000);
			Back(2);
			click(AMDSearchScreen.objFirstSearchResult, "Search result");
			waitTime(6000);
			verifyElementExist(AMDConsumptionScreen.objContentName, "Content name below the player");
			waitTime(3000);
			verifyElementExist(AMDConsumptionScreen.objGetPremiumCTA, "Buy Plan CTA below the player");
			click(AMDConsumptionScreen.objGetPremiumCTA, "Buy Plan CTA below the player");
			waitTime(3000);
			// Swipe("UP", 1);
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
			verifyElementExist(AMDSubscibeScreen.objMakePaymentScreen, "Payment page");

		}

		if (userType.equals("SubscribedUser")) {

			extent.HeaderChildNode("Subscribed user with All Access pack validations");
			click(AMDHomePage.objMoreMenu, "More menu");
			click(AMDHomePage.objMyProfileIcon, "profile icon");

			if (verifyIsElementDisplayed(AMDHomePage.objEditProfile)) {
				logger.info("User is logged in successfully");
				extent.extentLoggerPass("Edit", "User is logged in successfully");
			} else {
				logger.error("User is not logged in successfully");
				extent.extentLoggerFail("Edit", "User is not logged in successfully");
			}
			Back(1);
			click(AMDHomePage.objHomeBtn, "Home tab");
			waitTime(4000);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuBtn, "More Menu");
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuOptions("My Subscription"), "My Subscription");
			verifyElementExist(AMDHomePage.objPackAmount, "Purchased pack details");
			verifyElementExist(AMDHomePage.objCancelRenewal, "Cancel Renewal option");
			verifyElementPresentAndClick(AMDHomePage.objBrowseAllPack, "Browse all packs button");
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
			Back(1);
			waitTime(2000);
			Back(1);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenuOptions("Buy Plan"), "Buy Plan");
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
			verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe header in subscription page");
			verifyElementExist(AMDSubscibeScreen.objSubscribePageBackButton, "Back button in subscribe page");
			// verifyElementExist(AMDSubscibeScreen.objAdbanner, "Carosual in subscription
			// page");
			// Have a code CTA has been removed in the subscribe page for Subscribed user
//			Swipe("UP",1);
//			verifyElementExist(AMDSubscibeScreen.objHaveACodeCTA, "Have a code in subscribe page");
//			click(AMDSubscibeScreen.objHaveACodeCTA, "Have a code in subscribe page");
			// verifyElementPresent(AMDSubscibeScreen.objApply, "Apply button is subscribe
			// page");
//			if (verifyElementIsNotDisplayed(AMDSubscibeScreen.objApplyOnHaveACodescreen)) {
//				logger.info("Apply button is not highlighted by default");
//				extent.extentLoggerPass("Highlighted", "Apply button is not highlighted by default");
//			}
//			click(AMDSubscibeScreen.objEnterACodeEditFiled, "Promo");
//			type(AMDSubscibeScreen.objEnterACodeEditFiled, "zee5flat5000", "Promo code");
//			hideKeyboard();
//			click(AMDSubscibeScreen.objApplyOnHaveACodescreen, "Apply button");
//			verifyElementExist(AMDSubscibeScreen.objInvalidPromoCodeText,"Invalid promo code text");
//			Back(1);
//			Swipe("UP", 1);
//			PartialSwipe("UP", 1);
//			verifyElementExist(AMDSubscibeScreen.objDescriptionText, "Premium Description in subscribe page");
//			verifyElementExist(AMDSubscibeScreen.objPremiumTab, "Premium pack tab");
//			verifyElementExist(AMDSubscibeScreen.objClubTab , "Club pack tab");
//			Swipe("UP", 1);
//			verifyElementExist(AMDSubscibeScreen.obj30daysPack, "30 days premium plan tab");
//			verifyElementExist(AMDSubscibeScreen.obj180daysPack, "180 days premium plan tab");
//			verifyElementExist(AMDSubscibeScreen.obj365daysPack, "365 days premium plan tab");
//			int size = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).size();
//			for (int i = 0; i < size; i++) {
//				boolean isDisplayed = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).isDisplayed();
//				if (isDisplayed) {
//					String pack = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).getText();
//					extent.extentLoggerPass("Packs", "Available Pack " + i + " : " + pack);
//					logger.info("Available Pack " + i + " : " + pack);
//				} else {
//					extent.extentLoggerFail("Packs", "No Packs are available");
//					logger.info("No Packs are available");
//				}
//			}
			verifyElementExist(AMDSubscibeScreen.objPlanName, "Available plan in subscribe page");
			verifyElementExist(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button in subscribe page");
			if (getDriver().findElement(AMDSubscibeScreen.objContinueOnSubscribePopup).isEnabled()) {
				logger.info("Continue button is highlighted");
				extent.extentLoggerPass("Highlighted", "Continue button is highlighted");
			}
			click(AMDSubscibeScreen.objContinueOnSubscribePopup, "Continue button");
			if (checkElementExist(AMDHomePage.objHomeBtn, "Home tab")) {
				logger.info(
						"Subscribed user with all access pack is navigated to home page after tapping on buy subscription continue button");
				extent.extentLoggerPass("Home",
						"Subscribed user with all access pack is navigated to home page after tapping on buy subscription continue button");
			} else {
				logger.error(
						"Subscribed user with all access pack is not navigated to home page after tapping on buy subscription continue button");
				extent.extentLoggerFail("Home",
						"Subscribed user with all access pack is not navigated to home page after tapping on buy subscription continue button");
				Back(1);
			}
			click(AMDHomePage.objMoreMenu, "More menu");
			Swipe("UP", 3);
			click(AMDHomePage.objLogout, "Logout");
			click(AMDHomePage.objLogoutPopUpLogoutButton, "Logout button");
			Swipe("Down", 2);
		//	click(AMDMoreMenu.objProfile, "Profile");
			extent.HeaderChildNode("RSVOD user Validations");
			loginWithEmailID(RSVODUser, RSVODPassword);
			waitTime(5000);
			click(AMDHomePage.objSearchBtn, "Search button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, RSVODContent, "Search field");
			hideKeyboard();
			waitTime(7000);
			click(AMDSearchScreen.objContentNameInPlayer(RSVODContent), "Search result");
			waitTime(5000);
			verifyElementExist(AMDSearchScreen.objContentNameInPlayer(RSVODContent), "Content name in player");
			waitTime(80000);
			waitForElementDisplayed(AMDHomePage.objGetClubInConsumptionScreen, 160);
			if (verifyElementExist(AMDHomePage.objGetClubInConsumptionScreen, "Upgrade button")) {
				click(AMDHomePage.objGetClubInConsumptionScreen, "Upgrade button");
//				verifyElementExist(AMDSearchScreen.objUpgradePopup, "Upgrade popup for RSVOD user");
//				verifyElementExist(AMDSearchScreen.objUpgradePopupDescription, "Upgrade popup description");
//				logger.info(getText(AMDSearchScreen.objUpgradePopupDescription));
//				int size4 = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).size();
//				for (int i = 0; i < size4; i++) {
//					boolean isDisplayed = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i)
//							.isDisplayed();
//					if (isDisplayed) {
//						String pack = getDriver().findElements(AMDSubscibeScreen.objRSVODPack2).get(i).getText();
//						extent.extentLoggerPass("Packs", "Available Pack " + i + " : " + pack);
//						logger.info("Available Pack " + i + " : " + pack);
//					} else {
//						extent.extentLoggerFail("Packs", "No Packs are available");
//						logger.info("No Packs are available");
//					}
//				}
				verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
				verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe header in subscription page");
				verifyElementExist(AMDSubscibeScreen.objSubscribePageBackButton, "Back button in subscribe page");
				verifyElementExist(AMDSubscibeScreen.objPlanName, "Available plan in subscribe page");
				if (getDriver().findElement(AMDSubscibeScreen.objContinueBtn).isEnabled()) {
					logger.info("Upgrage button is highlighted");
					extent.extentLoggerPass("Highlighted", "Upgrade button is highlighted");
				}
				click(AMDSubscibeScreen.objContinueBtn, "Upgrade button");
				verifyElementExist(AMDSubscibeScreen.objMakePaymentScreen, "Payment page");
//				Swipe("UP", 1);
//				PartialSwipe("UP", 1);
//				verifyElementExist(AMDSearchScreen.objTermsOfUse, "Terms of use link");
//				verifyElementExist(AMDSearchScreen.objPrivacyPolicy, "Privacy policy");
//				if (findElement(AMDSearchScreen.objUpgradePopupProceedButton).isEnabled()) {
//					logger.info("Proceed button is enebled when user select any pack in upgrade popup");
//					extent.extentLoggerPass("Proceed",
//							"Proceed button is enebled when user select any pack in upgrade popup");
//				}
//				click(AMDSearchScreen.objUpgradePopupProceedButton, "Proceed");
//				verifyElementExist(AMDSubscibeScreen.objSubscribeHeader, "Subscribe page");
//				Swipe("DOWN", 1);
				verifyElementExist(AMDSearchScreen.objPlanPrice, "Plan price detials in Subscribe page");
				verifyElementExist(AMDSearchScreen.objDiscount, "Discount price detials in Subscribe page");
				verifyElementExist(AMDSearchScreen.objRoundoff, "Round off price detials in Subscribe page");
				verifyElementExist(AMDSearchScreen.objTotalPayableAmount,
						"Total payable price detials in Subscribe page");
				verifyElementExist(AMDSearchScreen.objRevisedBillingInfo, "Revised billing cycle information");

				verifyElementExist(AMDSearchScreen.objAccountInfo, "Account info detials in Subscribe page");
//				Swipe("UP", 1);
//				verifyElementExist(AMDSearchScreen.objYouWillBeChargedInfo, "Recurring amount detials in Subscribe page");
			} else {
				logger.info("Upgrade button is not displayed");
				extent.extentLoggerFail("Upgrade button", "Upgrade button is not displayed");
			}
		}
	}

	/**
	 * @implNote This method will validate the functionality of Video Quality on Player
	 * @param userType
	 * @param searchKeyword11 
	 * @throws Exception
	 */
	public void settings_DefaultVideoStreamingQualityInPlayer(String userType, String searchKeyword11)
			throws Exception {
		extent.HeaderChildNode("Validation of Settings - Default Video Streaming quality In Player as " + userType);
		System.out.println("\n Validation of Settings for Video Streaming and Autoplay In Player as " + userType);
		click(AMDHomePage.objHomeBtn, "Home icon");
		waitTime(6000);
		click(AMDHomePage.objSearchBtn, "Search button");
		click(AMDSearchScreen.objSearchEditBox, "Search box");
		type(AMDSearchScreen.objSearchBoxBar, searchKeyword11, "Search bar");
		waitTime(3000);
		click(AMDSearchScreen.objSearchkeypad, "search icon in keypad");
		hideKeyboard();
		waitTime(5000);
     	click(AMDSearchScreen.objContentNameInPlayer(searchKeyword11), "Search result");
		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			waitTime(4000);
			completeProfilePopUpClose(userType);
			waitForAdToFinishInAmd();
				}
		waitTime(5000);
		click(AMDPlayerScreen.objPlayerScreen, "Player screen");
		click(AMDPlayerScreen.objPauseIcon, "Pause icon");
		click(AMDPlayerScreen.objFullscreenIcon, "Maximize Icon");
		waitTime(6000);
	//	 click(AMDPlayerScreen.objPlayerScreen, "Player Screen");
		
		String getQualityValue = findElement(AMDSettingsScreen.objQualityOptionOnPlayer).getText();
		verifyElementExist(AMDSettingsScreen.objQualityOptionOnPlayer,
				"Video quality on player settings " + getQualityValue.toUpperCase());
		if (getQualityValue.contains(getRuntimeValue)) {
			logger.info(
					"Default video quality on player settings is as per the selection in Select video quality settings : "
							+ getQualityValue);
			extent.extentLoggerPass("Settings",
					"Default video quality on player settings is as per the selection in Select video quality settings : "
							+ getQualityValue);
		} else {
			logger.error(
					"Default video quality on player settings is NOT as per the selection in Select video quality settings : "
							+ getQualityValue);
			extent.extentLoggerFail("Settings",
					"Default video quality on player settings is NOT as per the selection in Select video quality settings : "
							+ getQualityValue);
		}
			click(AMDSettingsScreen.objQualityOptionOnPlayer, "Video Quality");	
		
		String videoOption = findElement(AMDSettingsScreen.objoptionsInVideoQuality).getText();
		System.out.println(videoOption);
		verifyElementPresentAndClick(AMDSettingsScreen.objoptionsInVideoQuality, "Data Saver");
		waitTime(3000);
		click(AMDSettingsScreen.objCloseIconOnQualityOptionInPlayer,"Close icon");		
		if (verifyElementDisplayed(AMDSettingsScreen.objoptionsInVideoQuality)) {
			logger.info("Video Quality is Functional in the player");
			extent.extentLoggerPass("Settings", "Video Quality is Functional in the player");
		} else {
			logger.error("Video Quality is NOT Functional in the player");
			extent.extentLoggerFail("Settings", "Video Quality is NOT Functional in the player");
		}
		String DefaultOption = findElement(AMDSettingsScreen.objoptionsInVideoQuality).getText();
		System.out.println(DefaultOption);
		waitTime(5000);
		Back(3);
		click(AMDHomePage.objHomeBtn,"Home btn");
		click(AMDHomePage.objMoreMenu, "More menu");
		waitTime(3000);
		click(AMDMoreMenu.objSettings, "Settings button");
		String getVideoQuality = findElement(AMDSettingsScreen.objVideoQualityDefaultvalue).getText();
		if (DefaultOption.contains(getVideoQuality) == false) {
			logger.info(
					"Settings changed from the player does not change the video settings set in the 'Select Video Quality' Settings screen.");
			extent.extentLoggerPass("Settings",
					"Settings changed from the player does not change the video settings set in the 'Select Video Quality' Settings screen");
		} else {
			logger.error(
					"Settings changed from the player changes the video settings set in the 'Select Video Quality' Settings screen.");
			extent.extentLoggerFail("Settings",
					"Settings changed from the player changes the video settings set in the 'Select Video Quality' Settings screen");
		}
		verifyElementExist(AMDSettingsScreen.objAutoPlayToggleSwitch, "Autoplay Toggle Switch");
		String getAutoPlayToggle = findElement(AMDSettingsScreen.objAutoPlayToggleON).getText();
		System.out.println(getAutoPlayToggle);
		boolean autoPlayON = findElement(AMDSettingsScreen.objAutoPlayToggleON).isDisplayed();
		if (autoPlayON) {
			logger.info("Autoplay toggle switch is " + getAutoPlayToggle);
			extent.extentLoggerPass("Settings", "Autoplay toggle switch is " + getAutoPlayToggle);
		} else {
			click(AMDSettingsScreen.objAutoPlayToggleSwitch, "Autoplay Toggle Switch");
			logger.info("Autoplay toggle switch is " + getAutoPlayToggle);
			extent.extentLogger("Settings", "Autoplay toggle switch is " + getAutoPlayToggle);
		}
		
		navigateBackToHomeLandingScreen();
	}
	
	/**
	Method will be verifying the content descriptor displayed on player for the searched content
	@Paramters used - Usertype, Video content, Content type
	@Throws - NoSuchElementException 
	*/
	public void contentDescriptionValidation(String userType, String searchcontent, String contentType)
				throws Exception {
			extent.HeaderChildNode("Content Descriptor validation");
			System.out.println("\nContent Descriptor validation");
			verifyElementPresentAndClick(AMDHomePage.objHomeBottomBtn, "Home Button");
			waitTime(5000);
			verifyElementPresentAndClick(AMDHomePage.objSearchBtn, "Search Button");
			waitTime(5000);
			click(AMDSearchScreen.objSearchEditBox, "Search box");
			type(AMDSearchScreen.objSearchBoxBar, searchcontent + "\n", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(AMDSearchScreen.objFirstSearchResult1(searchcontent), "Search result");
			boolean value = verifyElementDisplayed(AMDPlayerScreen.objContentDescOnPlayer);
			System.out.println(value);
			if (value) {
				logger.info("Content Descriptor is displayed for " + contentType + " " + searchcontent);
				extentLoggerPass("", "Content Descriptor is displayed for " + contentType + " " + searchcontent);
			} else {
				logger.error("Content Descriptor is NOT displayed for " + contentType + " " + searchcontent);
				extentLoggerFail("", "Content Descriptor is NOT displayed for " + contentType + " " + searchcontent);
			}

			Back(1);
			click(AMDSearchScreen.objFirstSearchResult1(searchcontent), "Search result");

			boolean AgeRatevalue = verifyElementDisplayed(AMDPlayerScreen.objAgeRatedOnPlayer);
			System.out.println(AgeRatevalue);
			if (AgeRatevalue == true) {
				logger.info("Age Rated is displayed for " + contentType + " " + searchcontent);
				extentLoggerPass("", "Age Rated is displayed for " + contentType + " " + searchcontent);
			} else {
				logger.error("Age Rated is NOT displayed for " + contentType + " " + searchcontent);
				extentLoggerFail("", "Age Rated is NOT displayed for " + contentType + " " + searchcontent);
			}
			BackToLandingScreen();
		}

	/**
	Method will be verifying the contents present on watchlist screen on clicking My watchlist from More menu
	@Paramters used - Usertype
	@Throws - NoSuchElementException 
	*/
	public void myWatchList(String userType) throws Exception {
			HeaderChildNode("Validate My Watchlist screen");
			System.out.println("\nValidate My Watchlist screen");

			switch (userType) {
			case "Guest":
				verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home button");
				waitTime(5000);
				verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
				waitTime(1000);
				click(AMDMoreMenu.objWatchlist, "My Watchlist");
				if (verifyElementDisplayed(AMDLoginScreen.objLoginOrRegisterPageTitle)) {
					logger.info("User navigated to login or register screen post taping on my watchlist");
					extent.extentLoggerPass("Watchlist",
							"User navigated to Login/Register screen post taping on my watchlist");
				} else {
					logger.error("User is not navigated to Login/Register screen post taping on my watchlist");
					extent.extentLoggerFail("Watchlist",
							"User is not navigated to login or register screen post taping on my watchlist");
				}
				hideKeyboard();
				verifyElementPresentAndClick(AMDLoginScreen.objBackBtn, "Back button");
				if (verifyElementDisplayed(AMDMoreMenu.objWatchlist)) {
					logger.info("User is navigate back to more menu");
					extent.extentLoggerPass("Watchlist", "User is navigate back to more menu");
				} else {
					logger.error("User is not navigate back to more menu");
					extent.extentLoggerFail("Watchlist", "User is not navigate back to more menu");
				}
				break;
			case "NonSubscribedUser":
				verifyWatchListScreen(userType);
				break;
			case "SubscribedUser":
				verifyWatchListScreen(userType);
				break;
			}
		}
		
	/**
	Method will be validating the Transactions present on Transaction Screen on clicking My Transactions from More menu
	@Paramters used - Usertype
	@Throws - NoSuchElementException 
	*/
	public void MyTransactionsGuestUser(String userType) throws Exception {
			extent.HeaderChildNode("My Transactions screen validations for user type : " + userType);
			// Verify User is navigated to Login/Register screen post tapping My
			// Transactions
			verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home button");
			waitTime(5000);
			click(AMDHomePage.objMoreMenu, "More Menu");
			waitTime(3000);

			verifyElementPresentAndClick(AMDMoreMenu.objMyTransactions, "My Transactions");
			String header = getText(AMDGenericObjects.objgetScreenTitle);
			if (header.equals("Login/Register")) {
				extent.extentLoggerPass("Verify navigation",
						"User is navigated to " + header + " screen post tapping My Transactions from more menu screen ");
				logger.info(
						"User is navigated to " + header + " screen post tapping My Transactions from more menu screen");
			} else {
				extent.extentLoggerFail("Verify navigation",
						"User is not navigated to Login/Register screen post tapping My Transactions from more menu screen ");
				logger.info(
						"User is not navigated to Login/Register screen post tapping My Transactions from more menu screen");
			}

			// Verify user is navigated back to More menu screen on clicking back button
			// click back button
			verifyElementPresentAndClick(AMDGenericObjects.objBackBtn, "Back button");
			if (checkElementExist(AMDMoreMenu.objProfile, "Profile icon")) {
				extent.extentLoggerPass("Verify navigation",
						"User is navigate back to the More menu screen post tapping back button from Login/Register screen");
				logger.info(
						"User is navigate back to the More menu screen post tapping back button from Login/Register screen");
			} else {
				extent.extentLoggerFail("Verify navigation",
						"User is not navigated back to the More menu screen post tapping back button from Login/Register screen");
				logger.info(
						"User is not navigated back to the More menu screen post tapping back button from Login/Register screen");
			}
		}


	/**
	Method will be validating the Subscriptions if any on My Subscription Screen from More menu
	@Paramters used - Usertype
	@Throws - NoSuchElementException 
	*/
	public void MySubscriptionGuestUser(String userType) throws Exception {
		extent.HeaderChildNode("My Subscription screen validations for user type : " + userType);
		// Verify User is navigated to Login/Register screen post tapping My
		// Subscription
		extent.HeaderChildNode("My Subscription screen");
		verifyElementPresentAndClick(AMDHomePage.objHomeBtn, "Home button");
		waitTime(5000);
		click(AMDHomePage.objMoreMenu, "More Menu");
		waitTime(3000);
		verifyElementPresentAndClick(AMDMoreMenu.objMySubscription, "My Subscription");
		String header = getText(AMDGenericObjects.objgetScreenTitle);
		if (header.equals("Login/Register")) {
			extent.extentLoggerPass("Verify navigation",
					"User is navigated to " + header + " screen post tapping My Subscription from more menu screen ");
			logger.info(
					"User is navigated to " + header + " screen post tapping My Subscription from more menu screen");
		} else {
			extent.extentLoggerFail("Verify navigation",
					"User is not navigated to Login/Register screen post tapping My Subscription from more menu screen ");
			logger.info(
					"User is not navigated to Login/Register screen post tapping My Subscription from more menu screen");
		}

		// Verify user is navigated back to More menu screen on clicking back button
		// click back button
		verifyElementPresentAndClick(AMDGenericObjects.objBackBtn, "Back button");
		if (checkElementExist(AMDMoreMenu.objProfile, "Profile icon")) {
			extent.extentLoggerPass("Verify navigation",
					"User is navigate back to the More menu screen post tapping back button from Login/Register screen");
			logger.info(
					"User is navigate back to the More menu screen post tapping back button from Login/Register screen");
		} else {
			extent.extentLoggerFail("Verify navigation",
					"User is not navigated back to the More menu screen post tapping back button from Login/Register screen");
			logger.info(
					"User is not navigated back to the More menu screen post tapping back button from Login/Register screen");
		}
	}
	/**
	 * @note this method is used for email registration validation
	 * @param userType
	 * @param newEmailPassword
	 * @throws Exception
	 */
	    public void emailRegistrationValidation(String userType, String newEmailPassword) throws Exception {
	        if (userType.equalsIgnoreCase("Guest")) {
	            explicitWaitVisibility(AMDHomePage.objHomeBtn, 10);
	            verifyElementExist(AMDHomePage.objHomeBtn, "Landing screen");
	            verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
	            verifyElementPresentAndClick(AMDMoreMenu.objGuestUserAccount, "Login/Register button");
	            explicitWaitVisibility(AMDLoginScreen.objEmailIdField, 5);
	            type(AMDSubscibeScreen.objEmailID, RandomStringGenerator(5) + "@gmail.com", "Email");
	            hideKeyboard();
	            click(AMDLoginScreen.objProceedBtn, "Proceed button");
	            verifyElementPresentAndClick(AMDRegistrationScreen.objDOBTxtField, "Age Field");
	            type(AMDRegistrationScreen.objDOBTxtField, "25", "Age field");
	            hideKeyboard();
	            verifyElementPresentAndClick(AMDRegistrationScreen.objGederTxtField, "Gender field");
	            verifyElementPresentAndClick(AMDRegistrationScreen.objMale, "Gender male");
	            verifyElementPresentAndClick(AMDRegistrationScreen.objPasswordTxtField, "Password Field");
	            type(AMDRegistrationScreen.objPasswordTxtField, newEmailPassword, "Password Field");
	            hideKeyboard();
	            explicitWaitVisibility(AMDRegistrationScreen.objRegisterBtn, 10);
	            verifyElementPresentAndClick(AMDRegistrationScreen.objRegisterBtn, "Register button");
	            explicitWaitVisibility(AMDHomePage.objHomeBtn, 10);
	            verifyElementExist(AMDHomePage.objHomeBtn, "Landing screen");
	        } else {
	            logger.info("Email registration is NOT Applicable for Registered Users");
	            extentLogger("Email registration", "Email registration is NOT Applicable for Registered Users");
	        }
	    }
	/**
	 * @note this method is used for email login validation
	 * @param userType
	 * @param registeredEmail
	 * @param registeredEmailPassword
	 * @throws Exception
	 */
	    public void emailLoginFlowValidation(String userType, String registeredEmail, String registeredEmailPassword) throws Exception {
	        if (userType.equalsIgnoreCase("Guest")) {
	            explicitWaitVisibility(AMDHomePage.objHomeBtn, 10);
	            verifyElementExist(AMDHomePage.objHomeBtn, "Landing screen");
	            verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
	            verifyElementPresentAndClick(AMDMoreMenu.objGuestUserAccount, "Login/Register button");
	            explicitWaitVisibility(AMDLoginScreen.objEmailIdField, 5);
	            type(AMDLoginScreen.objEmailIdField, registeredEmail, "Email Id or Mobile Number field");
	            hideKeyboard();
	            click(AMDLoginScreen.objProceedBtn, "Proceed button");
	            verifyElementPresentAndClick(AMDLoginScreen.objPasswordField, "Password Field");
	            explicitWaitVisibility(AMDLoginScreen.objPasswordField, 10);
	            type(AMDLoginScreen.objPasswordField, registeredEmailPassword, "Password field");
	            hideKeyboard();
	            explicitWaitVisibility(AMDLoginScreen.objLoginBtn, 10);
	            verifyElementPresentAndClick(AMDLoginScreen.objLoginBtn, "Login Button");
	            explicitWaitVisibility(AMDHomePage.objHomeBtn, 10);
	            verifyElementExist(AMDHomePage.objHomeBtn, "Landing screen");
	        } else {
	            logger.info("Email login is NOT Applicable for Registered Users");
	            extentLogger("Email login", "Email login is NOT Applicable for Registered Users");
	        }
	    }
	/**
	 * @note this method is used for mobile num login validation.
	 * @param userType
	 * @param registeredMobile
	 * @param registeredMobilePassword
	 * @throws Exception
	 */
	    public void mobileLoginValidation(String userType, String registeredMobile, String registeredMobilePassword) throws Exception {
	        if (userType.equalsIgnoreCase("Guest")) {
	            verifyElementExist(AMDHomePage.objHomeBtn, "Landing screen");
	            verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
	            verifyElementPresentAndClick(AMDMoreMenu.objGuestUserAccount, "Login/Register button");
	            clearField(AMDLoginScreen.objEmailIdField, "EmailId/Phone field");
	            type(AMDLoginScreen.objEmailIdField, registeredMobile, "Mobile number field");
	            click(AMDLoginScreen.objProceedBtn, "Proceed button");
	            explicitWaitVisibility(AMDLoginScreen.objPasswordField, 10);
	            type(AMDLoginScreen.objPasswordField, registeredMobilePassword, "Password field");
	            hideKeyboard();
	            click(AMDLoginScreen.objLoginBtn, "Login button");
	            verifyElementExist(AMDHomePage.objHomeTab, "Home tab");
	            click(AMDHomePage.objMoreMenu, "More Menu");
	            swipeUntilFindElement(AMDHomePage.objLogout, "UP");
	            click(AMDHomePage.objLogout, "Logout");
	            click(AMDHomePage.objLogoutPopUpLogoutButton, "Logout button");
	            click(AMDHomePage.objHome, "Home tab");
	        } else {
	            logger.info("Mobile login is NOT Applicable for Registered Users");
	            extentLogger("Mobile login", "Mobile login is NOT Applicable for Registered Users");
	        }
	    }

	    /**
	     * Author: Anusha P R
	     * Validates myTransaction page for all 3 types of users
	     */
	    public void myTransactionPageValidation(String userType) throws Exception {
	        explicitWaitVisibility(AMDHomePage.objHomeBtn, 10);
	        verifyElementExist(AMDHomePage.objHomeBtn, "Landing screen");
	        verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
	        click(AMDMoreMenu.objMyTransactions, "My TransactionsOption");
	        switch (userType) {
	            case "SubscribedUser":
	                explicitWaitVisibility(AMDMoreMenu.objMyTransactionsHeader, 10);
	                if (verifyIsElementDisplayed(AMDMoreMenu.objMyTransactionsHeader)) {
	                    logger.info("User navigated to My Transactions Page on tapping My Transactions");
	                    extent.extentLoggerPass("MyTransactions Screen",
	                            "User navigated to My Transactions Page on tapping My Transactions");
	                } else {
	                    logger.info("User not navigated to My Transactions Page on tapping My Transactions");
	                    extent.extentLoggerFail("MyTransactions Screen",
	                            "User not navigated to My Transactions Page on tapping My Transactions");
	                }
	                myTransactionsWithDetails();
	                click(AMDMoreMenu.objDownloadInvoice1, "Download invoice");
	                Back(3);
	                verifyElementPresentAndClick(AMDSearchScreen.objHomeOption, "Bottom bar Home Option");
	                zNALogoutMethod();
	                break;

	            case "NonSubscribedUser":
	                if (verifyIsElementDisplayed(AMDMoreMenu.objNoTransaction)) {
	                    logger.info("User navigated to My Transactions Page on tapping My Transactions");
	                    extent.extentLoggerPass("MyTransactions Screen",
	                            "User navigated to My Transactions Page on tapping My Transactions");
	                } else {
	                    logger.info("User not navigated to My Transactions Page on tapping My Transactions");
	                    extent.extentLoggerFail("MyTransactions Screen",
	                            "User not navigated to My Transactions Page on tapping My Transactions");
	                }
	                Back(2);
	                verifyElementPresentAndClick(AMDSearchScreen.objHomeOption, "Bottom bar Home Option");
	                zNALogoutMethod();
	                break;

	            case "Guest":
	                if (verifyIsElementDisplayed(AMDLoginScreen.objEmailIdField)) {
	                    logger.info("Guest user navigated to login Page on tapping My Transactions");
	                    extent.extentLoggerPass("login screen",
	                            "Guest user navigated to login Page on tapping My Transactions");
	                } else {
	                    logger.info("Guest user not navigated to login Page on tapping My Transactions");
	                    extent.extentLoggerFail("login page",
	                            "Guest user not navigated to login Page on tapping My Transactions");
	                }
	                Back(2);
	                verifyElementPresentAndClick(AMDSearchScreen.objHomeOption, "Bottom bar Home Option");

	            default:
	                break;
	        }
	    }

	    /**
	     * Author: Anusha P R
	     * validates mySubscription screen for all 3 types of users
	     */
	    public void mySubscriptionPageValidation(String userType) throws Exception {
	        explicitWaitVisibility(AMDHomePage.objHomeBtn, 10);
	        verifyElementExist(AMDHomePage.objHomeBtn, "Landing screen");
	        verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
	        extent.HeaderChildNode("Verify My Subscription Screen");
	        System.out.println("\nVerify My Subscription Screen");
	        explicitWaitVisibility(AMDMoreMenu.objMySubscription, 10);
	        verifyElementPresentAndClick(AMDMoreMenu.objMySubscription, "My Subscription");
	        switch (userType){
	            case "SubscribedUser":
	                explicitWaitVisibility(AMDMoreMenu.objMySubscriptionsHeader, 10);
	                if (verifyIsElementDisplayed(AMDMoreMenu.objMySubscriptionsHeader)) {
	                    logger.info("User navigated to My Subscriptions Page on tapping My Subscriptions");
	                    extent.extentLoggerPass("MySubscriptions Screen",
	                            "User navigated to My Subscriptions Page on tapping My Subscriptions");
	                } else {
	                    logger.info("User is not navigated to My Subscriptions Page on tapping My Subscriptions");
	                    extent.extentLoggerFail("MySubscriptions Screen",
	                            "User is not navigated to My Subscriptions Page on tapping My Subscriptions");
	                }

	                String SubscriptionPackStatus = getDriver().findElement(AMDMoreMenu.objsubscriptionPackStatus).getText();
	                if (verifyIsElementDisplayed(AMDMoreMenu.objsubscriptionPackStatus)) {
	                    logger.info(
	                            SubscriptionPackStatus + " : My Subscription pack Status details is displayed for the " + userType);
	                    extent.extentLoggerPass("MySubscription Screen",
	                            SubscriptionPackStatus + " : My Subscription pack Status details is displayed for the " + userType);
	                } else {
	                    logger.info(" SubscriptionPackStatus details is not displayed for the " + userType);
	                    extent.extentLoggerFail("MySubscription Screen",
	                            "SubscriptionPackStatus details is not displayed for the " + userType);
	                }

	                String SubscriptionPackPrice = getDriver().findElement(AMDMoreMenu.objSubscriptionPackPrice).getText();
	                if (checkElementExist(AMDMoreMenu.objSubscriptionPackPrice, "My subscription Pack Price")) {
	                    logger.info(SubscriptionPackPrice + " : My Subscription pack price is displayed for the " + userType);
	                    extent.extentLoggerPass("MySubscription Screen",
	                            SubscriptionPackPrice + " : My Subscription pack price is displayed for the " + userType);
	                } else {
	                    logger.info(SubscriptionPackPrice + " : My Subscription pack price is displayed for the " + userType);
	                    extent.extentLoggerFail("MySubscription Screen",
	                            SubscriptionPackPrice + " : My Subscription pack price is displayed for the " + userType);
	                }
	                String SubscriptionPackDuration = getDriver().findElement(AMDMoreMenu.objSubscriptionPackDuration).getText();
	                if (checkElementExist(AMDMoreMenu.objSubscriptionPackDuration, "My subscription Pack Duration")) {
	                    logger.info(SubscriptionPackDuration + " : My Subscription pack duration is displayed for the " + userType);
	                    extent.extentLoggerPass("MySubscription Screen",
	                            SubscriptionPackDuration + " : My Subscription pack duration is displayed for the " + userType);
	                } else {
	                    logger.info(SubscriptionPackDuration + " : My Subscription pack duration is displayed for the " + userType);
	                    extent.extentLoggerFail("MySubscription Screen",
	                            SubscriptionPackDuration + " : My Subscription pack duration is displayed for the " + userType);
	                }

	                Swipe("Up", 1);
	                String SubscriptionPackExpiryDate = getDriver().findElement(AMDMoreMenu.objSubscriptionPackExpiryDate)
	                        .getText();
	                if (checkElementExist(AMDMoreMenu.objSubscriptionPackExpiryDate, "My subscription Pack Expiry Date")) {
	                    logger.info(SubscriptionPackExpiryDate + " : My Subscription pack expiry date is displayed for the "
	                            + userType);
	                    extent.extentLoggerPass("MySubscription Screen",
	                            SubscriptionPackExpiryDate + " : My Subscription pack expiry date is displayed for the" + userType);
	                } else {
	                    logger.info(SubscriptionPackExpiryDate + " : My Subscription pack expiry date is displayed for the "
	                            + userType);
	                    extent.extentLoggerFail("MySubscription Screen", SubscriptionPackExpiryDate
	                            + " : My Subscription pack expiry date is displayed for the " + userType);
	                }

	                Swipe("DOWN", 1);
	                String SubscriptionPackCountryDetails = getDriver().findElement(AMDMoreMenu.objSubscriptionPackCountry)
	                        .getText();
	                if (checkElementExist(AMDMoreMenu.objSubscriptionPackCountry, "My subscription Pack Country")) {
	                    logger.info(SubscriptionPackCountryDetails + " : My Subscription pack Country details is displayed for the "
	                            + userType);
	                    extent.extentLoggerPass("MySubscription Screen", SubscriptionPackCountryDetails
	                            + " : My Subscription pack Country details is displayed for the " + userType);
	                } else {
	                    logger.info(SubscriptionPackCountryDetails + " : My Subscription pack Country details is displayed for the "
	                            + userType);
	                    extent.extentLoggerFail("MySubscription Screen", SubscriptionPackCountryDetails
	                            + " : My Subscription pack Country details is displayed for the " + userType);
	                }
	                String SubscriptionPackPaymentMode = getDriver().findElement(AMDMoreMenu.objSubscriptionPackPaymentMode)
	                        .getText();
	                if (checkElementExist(AMDMoreMenu.objSubscriptionPackPaymentMode, "My subscription Pack Payment Mode")) {
	                    logger.info(SubscriptionPackPaymentMode + " : My Subscription pack payment mode is displayed for the "
	                            + userType);
	                    extent.extentLoggerPass("MySubscription Screen", SubscriptionPackPaymentMode
	                            + " : My Subscription pack payment mode is displayed for the " + userType);
	                } else {
	                    logger.info(SubscriptionPackPaymentMode + " : My Subscription pack payment mode is displayed for the "
	                            + userType);
	                    extent.extentLoggerFail("MySubscription Screen", SubscriptionPackPaymentMode
	                            + " : My Subscription pack payment mode is displayed for the " + userType);
	                }

	                String SubscriptionPackOfferings = getDriver().findElement(AMDMoreMenu.objSubscriptionPackOfferings).getText();
	                if (checkElementExist(AMDMoreMenu.objSubscriptionPackOfferings, "My subscription pack Offerings")) {
	                    logger.info(
	                            SubscriptionPackOfferings + " : My Subscription pack offerings is displayed for the " + userType);
	                    extent.extentLoggerPass("MySubscription Screen",
	                            SubscriptionPackOfferings + " : My Subscription pack offerings is displayed for the " + userType);
	                } else {
	                    logger.info(
	                            SubscriptionPackOfferings + " : My Subscription pack offerings is displayed for the" + userType);
	                    extent.extentLoggerFail("MySubscription Screen",
	                            SubscriptionPackOfferings + " : My Subscription pack offerings is displayed for the" + userType);
	                }
	                Back(2);
	                verifyElementPresentAndClick(AMDSearchScreen.objHomeOption, "Bottom bar Home Option");
	                zNALogoutMethod();
	                break;

	            case "NonSubscribedUser":
	                if (verifyIsElementDisplayed(AMDMoreMenu.objNoSubscription)) {
	                    logger.info("User navigated to My subscription Page on tapping My subscription");
	                    extent.extentLoggerPass("MySubscription Screen",
	                            "User navigated to My subscription Page on tapping My subscription");
	                } else {
	                    logger.info("User not navigated to My subscription Page on tapping My subscription");
	                    extent.extentLoggerFail("MySubscription Screen",
	                            "User not navigated to My subscription Page on tapping My subscription");
	                }
	                Back(2);
	                verifyElementPresentAndClick(AMDSearchScreen.objHomeOption, "Bottom bar Home Option");
	                zNALogoutMethod();
	                break;

	            case "Guest":
	                if (verifyIsElementDisplayed(AMDLoginScreen.objEmailIdField)) {
	                    logger.info("Guest user navigated to login Page on tapping My Subscription");
	                    extent.extentLoggerPass("login screen",
	                            "Guest user navigated to login Page on tapping My Subscription");
	                } else {
	                    logger.info("Guest user not navigated to login Page on tapping My Subscription");
	                    extent.extentLoggerFail("login page",
	                            "Guest user not navigated to login Page on tapping My Subscription");
	                }
	                Back(2);
	                verifyElementPresentAndClick(AMDSearchScreen.objHomeOption, "Bottom bar Home Option");

	            default:
	                break;
	        }
	    }

	    /**
	     * Author: Anusha P R
	     * Validates myProfile screen for all the 3 types of users
	     */
	    public void myProfileValidation(String userType) throws Exception {
	        if (!userType.equalsIgnoreCase("Guest")) {
	            explicitWaitVisibility(AMDHomePage.objHomeBtn, 10);
	            verifyElementExist(AMDHomePage.objHomeBtn, "Landing screen");
	            verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More menu");
	            click(AMDMoreMenu.objLoginRegisterText, "Profile");

	            String headerTitle = getText(AMDGenericObjects.objgetScreenTitle);
	            if (headerTitle.equals("My Profile")) {
	                extent.extentLoggerPass("Verify Navigation",
	                        "User is navigated to " + headerTitle + " post tapping profile form more menu");
	                logger.info("User is navigated to " + headerTitle + " post tapping profile form more menu");
	            } else {
	                extent.extentLoggerFail("Verify Navigation",
	                        "User is not navigated to My Profile screen post tapping profile form more menu");
	                logger.info("User is not navigated to My Profile screen post tapping profile form more menu");
	            }

	            String profileName = getText(AMDMyProfileScreen.objUserName);
	            if (verifyElementDisplayed(AMDMyProfileScreen.objUserName)) {
	                extent.extentLoggerPass("Verify Profile Name is displayed",
	                        "Profile Name :" + profileName + " is displayed for the logged in user");
	                logger.info("Profile Name :" + profileName + " is displayed for the logged in user");
	            } else {
	                extent.extentLoggerFail("Verify Profile Name is displayed",
	                        "Profile Name is not displayed for logged in user");
	                logger.info("Profile Name is not displayed for logged in user");
	            }

	            String userID = getText(AMDMyProfileScreen.objUserID);
	            if (verifyElementDisplayed(AMDMyProfileScreen.objUserID)) {
	                extent.extentLoggerPass("Verify User ID is displayed",
	                        "User ID :" + userID + " is displayed for the logged in user");
	                logger.info("User ID :" + userID + " is displayed for the logged in user");
	            } else {
	                extent.extentLoggerFail("Verify User ID is displayed", "User ID is not displayed for logged in user");
	                logger.info("User ID is not displayed for logged in user");
	            }
	            if (verifyElementDisplayed(AMDMyProfileScreen.objEditProfileButton)) {
	                extent.extentLoggerPass("Verify Edit CTA", "Edit CTA is displayed in My Profile screen");
	                logger.info("Edit CTA is displayed in My Profile screen");
	            } else {
	                extent.extentLoggerFail("Verify Edit CTA", "Edit CTA is not displayed in My Profile screen");
	                logger.info("Edit CTA is  not displayed in My Profile screen");
	            }

	            click(AMDMyProfileScreen.objEditProfileButton, "Edit CTA button");
	            String headerName = getText(AMDGenericObjects.objgetScreenTitle);
	            if (headerName.equals("Edit Profile")) {
	                extent.extentLoggerPass("Verify User navigation", "User is navigated to " + headerName + " screen");
	                logger.info("User is navigated to " + headerName + " screen");
	                click(AMDGenericObjects.objBackBtn, "Back Button");
	            } else {
	                extent.extentLoggerFail("Verify User navigation", "User is not navigated screen");
	                logger.info("User is not navigated to Edit Profile screen");
	            }
	            Back(2);
	            verifyElementPresentAndClick(AMDSearchScreen.objHomeOption, "Bottom bar Home Option");
	            zNALogoutMethod();
	        } else {
	            logger.info("My Profile page validation is not Applicable for guest Users");
	            extentLogger("My Profile page validation ", "My Profile page validation is not Applicable for guest Users");
	        }
	    }

	    /**
	     * Author: Anusha P R
	     * validates metadata in consumption screen
	     */
	    public void metaDataValidationInConsumption(String searchKeyword) throws Exception {
	        explicitWaitVisibility(AMDHomePage.objHomeBtn,10);
	        verifyElementExist(AMDHomePage.objHomeBtn, "Landing screen");
	        waitTime(5000);
	        verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
	        verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
	        type(AMDSearchScreen.objSearchBoxBar, searchKeyword + "\n", "Search bar");
	        hideKeyboard();
	        waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
	        verifyElementPresentAndClick(AMDSearchScreen.objSearchResultContainsText(searchKeyword), "Search result");
	        explicitWaitVisibility(AMDNewsPage.objNewsConsumptionSrnDescription, 10);
	        verifyMetaDataOfConsumptionScreen();
	    }

	    /**
	     * Author: Anusha P R
	     * validates player in consumption screen
	     */
	    public void playerValidation(String searchKeyword, String usertype) throws Exception {
	        extent.HeaderChildNode("Player controllers validation");
	        verifyElementExist(AMDHomePage.objHomeBtn, "Landing screen");
	        waitTime(5000);
	        verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
	        verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
	        type(AMDSearchScreen.objSearchBoxBar, searchKeyword + "\n", "Search bar");
	        hideKeyboard();
	        waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
	        verifyElementPresentAndClick(AMDSearchScreen.objSearchResultContainsText(searchKeyword), "Search result");
	        waitTime(5000);
	        if (!(usertype.equalsIgnoreCase("SubscribedUser"))) {
	            waitForAdToFinishInAmd();
	        }
	        if (userType.equals("Guest"))
	            registerPopUpClose();
	        waitTime(4000);
	        click(AMDPlayerScreen.objPlayerScreen, "Player screen");
	        waitTime(1000);
	        click(AMDPlayerScreen.objPauseIcon, "Pause icon");
	        scrubVideoToBegining(AMDPlayerScreen.objProgressBar);
	        waitTime(4000);
	        click(AMDPlayerScreen.objPlay, "Play icon");
	        extent.HeaderChildNode("Potrait icons validation");
	        click(AMDPlayerScreen.objPause, "Pause icon");
	        verifyElementPresent(AMDPlayerScreen.objPlay, "Play icon");
	        waitTime(5000);
	        extent.HeaderChildNode("Elapsed and Total Duration");
	        click(AMDPlayerScreen.objPlay, "Play icon");
	        click(AMDPlayerScreen.objPauseIcon, "Pause icon");
	        String time1 = getText(AMDPlayerScreen.objElapsedTime);
	        logger.info("Elapsed time displayed : " + time1);
	        extentLogger("", "Elapsed time displayed : " + time1);
	        int elapsedTime = timeToSec(time1);
	        String time2 = getText(AMDPlayerScreen.objTotalDuration);
	        String[] Time2 = time2.split("-");
	        System.out.println(Time2[1]);
	        String[] Time = Time2[1].split(" ");
	        System.out.println(Time[1]);
	        logger.info("Total time displayed : " + Time[1]);
	        extentLogger("", "Total time displayed : " + Time[1]);
	        int totalTime = timeToSec(Time[1]);
	        if (elapsedTime < totalTime) {
	            logger.info("Elapsed time is lesser than Total time, expected behavior");
	            extentLoggerPass("", "Elapsed time is lesser than Total time, expected behavior");
	        } else {
	            logger.info("Elapsed time is not lesser than Total time");
	            extentLoggerFail("", "Elapsed time is not lesser than Total time");
	        }
	        waitTime(5000);
	        WebElement elementElapsedBtn = findElement(AMDPlayerScreen.objElapsedTime);
	        int etimeBtnleftX = elementElapsedBtn.getLocation().getX();
	        int etimeBtnrightX = etimeBtnleftX + elementElapsedBtn.getSize().getWidth();
	        int etimemiddleX = (etimeBtnrightX + etimeBtnleftX) / 2;
	        Dimension sizee = getDriver().manage().window().getSize();
	        int screenmid = sizee.getWidth() / 2;
	        if (etimemiddleX < screenmid) {
	            logger.info("Elapsed timer is displayed on left corner as expected");
	            extent.extentLoggerPass("Elapsed time", "Elapsed timer is displayed on left corner as expected");
	        } else {
	            logger.error("Elapsed timer is not displayed on left corner");
	            extent.extentLoggerFail("Elapsed timer", "Elapsed timer is not displayed on left corner");
	        }

	        WebElement elementTotDur = findElement(AMDPlayerScreen.objTotalDuration);
	        int eleTotDurRightX = elementTotDur.getLocation().getX();
	        int sizeee = sizee.getWidth() - 500;
	        if (eleTotDurRightX >= sizeee) {
	            logger.info("Content duration is displayed on right corner as expected");
	            extent.extentLoggerPass("Content duration", "Content duration is displayed on right corner as expected");
	        } else {
	            logger.error("Content duration is not displayed on right corner");
	            extent.extentLoggerFail("Content duration", "Content duration is not displayed on right corner");
	        }
	        extent.HeaderChildNode("Chromecast icon presence");
	        waitTime(4000);
	        if (findElement(AMDPlayerScreen.objChromeCastIcon).isEnabled() == false) {
	            logger.info("Chrome cast icon is displayed in disabled state");
	            extent.extentLoggerPass("Chrome cast", "Chrome cast icon is displayed in disabled state");
	        } else {
	            logger.error("Chrome cast icon is not displayed in disabled state");
	            extent.extentLoggerFail("Chrome cast", "Chrome cast icon is not displayed in disabled state");
	        }
	        click(AMDPlayerScreen.objPlay, "Play icon");
	        if (verifyElementDisplayed(AMDPlayerScreen.objForward)) {
	            logger.info("10 sec forward icon is displayed");
	            extent.extentLoggerPass("10 sec forward", "10 sec forward icon is displayed");
	        } else {
	            logger.error("10 sec forward icon is not displayed");
	            extent.extentLoggerFail("10 sec forward", "forward icon is not displayed");
	        }
	        if (verifyElementDisplayed(AMDPlayerScreen.objRewind)) {
	            logger.info("10 sec rewind icon is displayed");
	            extent.extentLoggerPass("10 sec rewind", "10 sec rewind icon is displayed");
	        } else {
	            logger.error("10 sec rewind icon is not displayed");
	            extent.extentLoggerFail("10 sec rewind", "rewind icon is not displayed");
	        }

	        if (verifyElementDisplayed(AMDPlayerScreen.objFullscreenIcon)) {
	            logger.info("full screen icon is displayed");
	            extent.extentLoggerPass("full screen icon", "full screen icon is displayed");
	        } else {
	            logger.error("full screen icon is not displayed");
	            extent.extentLoggerFail("full screen", "full screen is not displayed");
	        }
	        verifyElementPresentAndClick(AMDPlayerScreen.objFullscreenIcon, "Maximize Icon");
	        waitTime(2000);
	        GetAndVerifyOrientation("Landscape");
	        click(AMDPlayerScreen.objPlayerScreen, "Player screen");
	        verifyElementPresentAndClick(AMDPlayerScreen.objQuality, "Player Quality option");
	        String quality = getText(AMDPlayerScreen.DefaultQualityOption);
	        if (quality.contains("Auto")) {
	            logger.info("Video Quality is set to " + quality + " by default");
	            extent.extentLoggerPass("Video Quality", "Video Quality is set to " + quality + " by default");

	        } else {
	            logger.error(" AMA2-11935 : Video Quality is not set to Auto by default");
	            extent.extentLoggerFail(" AMA2-11935 : Video Quality", "Video Quality is not set to Auto by default");
	        }
	        click(AMDPlayerScreen.objCloseIcon, "Close icon");
	        Back(2);
	    }
	    /**
		 * @note this method is a demographic feature 
		 * @param userType
		 * @throws Exception
		 */
		public void demographicFeature(String userType) throws Exception
		{
			if (!(userType.equalsIgnoreCase("Guest"))) {
				verifyElementPresentAndClick(AMDHomePage.objCarouselConetentCard, "carousel banner");
				if (verifyElementDisplayed(AMDHomePage.objDemograpyGenderPopUp)) {
					verifyElementExist(AMDHomePage.objDemograpyGenderPopUp, "Gender Demographic pop up");
					verifyElementPresentAndClick(AMDHomePage.objMaleOptionInDemograpy,"Male option");
					verifyElementExist(AMDHomePage.objDemograpyGenderPopUpSuccess, "Success pop up");
				}
				Back(1);
				verifyElementPresentAndClick(AMDHomePage.objCarouselConetentCard, "carousel banner");
				
				if(verifyElementDisplayed(AMDHomePage.objAgepopUpdemography))
				{
					verifyElementExist(AMDHomePage.objAgepopUpdemography, "Age pop ");
					verifyElementPresentAndClick(AMDHomePage.objAge18To24, "18-24 option");
					verifyElementExist(AMDHomePage.objthankYou, "Success pop up");
				}
				Back(1);
				waitTime(2000);
				} 
		}
		/**
		 * @author Madhav
		 * @note this method is used for retriving the otp from the inbox
		 * @throws IOException
		 */
		public static String getZee5OTP() throws IOException {

			String getOTP = null;
			String SMSCommand = "adb shell content query --uri content://sms --projection address,body | grep ZEEOTT | grep 0";

			Process process = Runtime.getRuntime().exec(SMSCommand);
			BufferedReader Result = new BufferedReader(new InputStreamReader(process.getInputStream()));

			try {
				getOTP = Result.readLine().split(" ")[6].trim();
				System.out.println(getOTP.length());
				System.out.println(getOTP);
			} catch (Exception e) {
				System.out.println("Failed to fetch the OTP " + e);
				//logger.info("Failed to fetch the OTP " + e);
			}
		
			return getOTP;
		}
		/**
		 * @note this method is used to verify onboarding with  Truecaller feature.
		 * @param phoneNumber
		 * @throws Exception
		 */
		public void newOnboarding(boolean TruecallerFlag,String phoneNumber,String userType) throws Exception {
			extent.HeaderChildNode("New  Onboarding Login");
			System.out.println("\nOnboarding login ");
			  waitTime(5000);
			 System.out.println("Current True caller Flag status is "+TruecallerFlag);
			 extent.extentLoggerPass("","Current True caller Flag status is "+TruecallerFlag);
			  if (TruecallerFlag==true) {
				extent.extentLoggerPass("", "New onboarding with True caller feature enabled");
				//Remove the below if else 
				if (verifyElementDisplayed(AMDHomePage.objTruecallerPopUps)) {
					//this code  
				} else {
					verifyElementPresentAndClick(AMDHomePage.objMoreMenuBtn, "More menu");
					waitTime(2000);
					Back(1);
				}
			if (verifyElementDisplayed(AMDHomePage.objMobileNumPopUp)) {
				logger.info("User doesnt have trucaller app and mobile num login pop up displayed");
				extent.extentLogger("", "User doesnt have trucaller and mobile num login pop up displayed");
				if (verifyElementDisplayed(AMDHomePage.objeditMobileNum)) {
					click(AMDHomePage.objeditMobileNum, "Mobile num field");
					type(AMDSugarbox.objMobNumField, phoneNumber, "Mobile field");
					click(AMDHomePage.objSendOtp, "Send OTP");
				/*
				 Commenting this line as Auto OTP feature is enabled
				 
					// ### Hard wait for a min to receive the latest OTP for Sugarbox login
					waitTime(35000);
					waitForElementDisplayed(AMDHomePage.objOtpverification, 15);
					
					String OTP = getZee5OTP();

					if (verifyElementDisplayed(AMDHomePage.objOtpverification)) {
						if (OTP != null) {
							logger.info("OTP is recieved: " + OTP);
							extent.extentLoggerPass("OTP Recieved", "OTP is recieved: " + OTP);
							for (int i = 0, j = 1; i < OTP.length()-1; i++, j++) {
								String digit = Character.toString(OTP.charAt(i));
								String index = convertToString(j);
								click(AMDHomePage.objOTPField(index), "Pin box"+j);
							//	type(byLocator, input, FieldName);
								type(AMDHomePage.objOTPField(index), digit, "OTP Field");
							}
							waitTime(2000);
							click(AMDHomePage.objVerifyOtp, "Verify OTP");
						}
					}
					*/
				
		}
			} else {
					verifyElementExist(AMDHomePage.objTruecallerPopUp, "TruecallerLogin Pop up");
					logger.info("User has true caller and pop up is displayed");
					extent.extentLogger("", "User has true caller and pop up is displayed");
					verifyElementPresentAndClick(AMDHomePage.objUseNumButton, "USE xx Number button");
					
			}
			waitTime(2000);
			verifyElementPresentAndClick(AMDHomePage.objMoreMenu, "More hamberger");
			if (verifyElementDisplayed(AMDMoreMenu.objProfileHeader)) {
				logger.info("User is Successfully logged in");
				extent.extentLoggerPass("", "User succesfully logged in");
				Back(1);
			} else {
				logger.info("User fials to login");
				extent.extentLoggerFail("", "User fails to login");
				
			}
			  } 
			  else {
				  zeeApplicasterLogin(userType);
				}
			  demographicFeature(userType);	
		}

        public void playerOnSearch(String searchKeyword, String usertype ) throws Exception {
            extent.HeaderChildNode("Player screen validation on search result");
            verifyElementExist(AMDHomePage.objHomeBtn, "Landing screen");
            waitTime(5000);
            verifyElementPresentAndClick(AMDSearchScreen.objSearchIcon, "Search icon");
            verifyElementPresentAndClick(AMDSearchScreen.objSearchEditBox, "Search Box");
            type(AMDSearchScreen.objSearchBoxBar, searchKeyword + "\n", "Search bar");
            hideKeyboard();
            waitForElementDisplayed(AMDSearchScreen.objAllTab, 10);
            verifyElementPresentAndClick(AMDSearchScreen.objSearchResultContainsText(searchKeyword), "Search result");
            waitTime(5000);
            if (!(usertype.equalsIgnoreCase("SubscribedUser"))) {
                waitForAdToFinishInAmd();
            }
            if (userType.equals("Guest"))
                registerPopUpClose();
            waitTime(4000);
            verifyElementExist(AMDPlayerScreen.objPlayerScreen, "Player screen");
        }
}