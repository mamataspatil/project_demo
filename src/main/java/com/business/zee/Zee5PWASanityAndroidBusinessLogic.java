package com.business.zee;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.ScreenOrientation;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Reporter;
import org.testng.asserts.SoftAssert;
import com.utility.LoggingUtils;
import com.utility.Utilities;
import com.zee5.PWAPages.*;
import com.driverInstance.CommandBase;
import com.emailReport.GmailInbox;
import com.extent.ExtentReporter;
import com.metadata.ResponseInstance;
import com.metadata.getResponseUpNextRail;
import com.propertyfilereader.*;
import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.AndroidElement;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.restassured.response.Response;

public class Zee5PWASanityAndroidBusinessLogic extends Utilities {

	public Zee5PWASanityAndroidBusinessLogic(String Application) throws InterruptedException {
		new CommandBase(Application);
		init();
	}

	Process execute;

	private int timeout;

	/** Retry Count */
	private int retryCount;

	ExtentReporter extent = new ExtentReporter();

	private SoftAssert softAssert = new SoftAssert();

	/** The Constant logger. */
//	final static Logger logger = Logger.getLogger("rootLogger");

	static LoggingUtils logger = new LoggingUtils();

	/** The Android getDriver(). */
	public AndroidDriver<AndroidElement> androidDriver;

	/** The Android driver. */
	public IOSDriver<WebElement> iOSDriver;

	Set<String> hash_Set = new HashSet<String>();
	GmailInbox gmail = new GmailInbox();
	@SuppressWarnings("unused")
	private String LacationBasedLanguge;

	List<String> LocationLanguage = new ArrayList<String>();

	List<String> DefaultLanguage = new ArrayList<String>();

	List<String> SelectedCONTENTLanguageInWelcomscreen = new ArrayList<String>();

	List<String> SelectedCONTENTLanguageInHamburgerMenu = new ArrayList<String>();

	String NonSubUsername = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("NonsubscribedUserName");
	String NonSubPassword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("NonsubscribedPassword");

	String SubUsername = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("SubscribedUserName");
	String SubPassword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("SubscribedPassword");

	Response resp;
	String PresentTitle;
	String AdValue = "AdnotPlayed";
	ArrayList<String> MastheadTitleApi = new ArrayList<String>();

	public static boolean relaunchFlag = false;
	public static boolean appliTools = false;
	public static boolean PopUp = false;

	public int getTimeout() {
		return timeout;
	}

	public void setTimeout(int timeout) {
		this.timeout = timeout;
	}

	public int getRetryCount() {
		return retryCount;
	}

	public void setRetryCount(int retryCount) {
		this.retryCount = retryCount;
	}

	/**
	 * Initiate Property File.
	 *
	 * @param byLocator the by locator
	 */

	public void init() {

		PropertyFileReader handler = new PropertyFileReader("properties/Execution.properties");
		setTimeout(Integer.parseInt(handler.getproperty("TIMEOUT")));
		setRetryCount(Integer.parseInt(handler.getproperty("RETRY_COUNT")));
		logger.info(
				"Loaded the following properties" + " TimeOut :" + getTimeout() + " RetryCount :" + getRetryCount());
	}

	/**
	 * Wait until Player Loading is not displayed.
	 */

	public void LoadingInProgress(By locator) throws Exception {
		verifyElementNotPresent(locator, 60);
	}

	/**
	 * Generic function to click on the Player.
	 */

	public void playerClick(By byLocator, String validationtext) throws Exception {
		try {
			WebElement element = findElement(byLocator);
			element.click();
			logger.info("Clicked on the" + validationtext);
			extent.extentLogger("click", "Clicked on the " + " " + validationtext);
		} catch (Exception e) {
			logger.error(e);
		}
	}

	/**
	 * The method s for element and clicks if present. Returns no error if not
	 * present. Implemented for random popups
	 */
	public boolean waitForElementAndClickIfPresent(By locator, int seconds, String message)
			throws InterruptedException {
		for (int time = 0; time <= seconds; time++) {
			try {
				getDriver().findElement(locator).click();
				logger.info("Clicked element " + message);
				extent.extentLogger("clickedElement", "Clicked element " + message);
				return true;
			} catch (Exception e) {
				Thread.sleep(1000);
			}
		}
		return false;
	}

	/**
	 * Function to quit the driver
	 */
	public void tearDown() {
		getDriver().quit();
	}

	/** ==================SHREENIDHI - MENU SETTINGS======================= */

	public void verificationsOfExploreOptions() throws Exception {
		extent.HeaderChildNode("Verifications of Explore dropdown options");
		waitTime(15000);
		Swipe("UP", 1);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		waitTime(2000);
		if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreBtn, "Explore option")) {
			click(PWAHamburgerMenuPage.objExploreBtn, "Explore option");
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Movies"), "Movies option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Shows"), "Shows option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("News"), "News option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Club"), "Club");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Premium"), "Premium option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Play"), "Play option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Kids"), "Kids option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Music"), "Music option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Live TV"), "Live TV option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Stories"), "Stories option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions(" ZEE5 Originals"),
					"ZEE5 Originals option");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objCloseHamburgerMenu, "Hamburger close button");
		} else {
			Swipe("DOWN", 1);
			click(PWAHamburgerMenuPage.objExploreBtn, "Explore option");
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Movies"), "Movies option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Shows"), "Shows option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("News"), "News option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Club"), "Club");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Premium"), "Premium option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Play"), "Play option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Kids"), "Kids option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Music"), "Music option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Live TV"), "Live TV option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Stories"), "Stories option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions("Videos"), "Videos option");
			waitTime(1000);
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreOptions(" ZEE5 Originals"),
					"ZEE5 Originals option");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objCloseHamburgerMenu, "Hamburger close button");
		}

	}

	public void navigationsFromPlanSection() throws Exception {
		extent.HeaderChildNode("Functionality of MyPlan options");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objPlanInHamburger, "Plan option");
//		verifyElementPresentAndClick(PWAHamburgerMenuPage.objPlanInsideItemsBtn("Buy Subscription"),
//				"Buy Subscription option in Plan section");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objPlanInsideItemsBtn("Buy Plan"),
				"Buy Plan option in Plan section");
		waitTime(3000);
		if (verifyIsElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription")) {
			logger.info("User is navigated to subscription page");
			extent.extentLogger("subscription page", "User is navigated to subscription page");
			click(PWAHomePage.objZeeLogo, "zee logo");
			waitTime(4000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPlanInsideItemsBtn("Have a prepaid code ?"),
					"Have a prepaid code ? option in Plan section");
			waitTime(3000);
			if (verifyIsElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription")) {
				logger.info("User is navigated to subscription page");
				extent.extentLogger("subscription page", "User is navigated to subscription page");
				click(PWAHomePage.objZeeLogo, "zee logo");
			}
		}

	}

	public void parentControlFunctionality(String UserType) throws Exception {
		extent.HeaderChildNode("Parent Control Functionality");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "ParentalControl");
		verifyIsElementDisplayed(PWALoginPage.objPasswordField, "Password field");
		String password = "";
		if (UserType.equals("NonSubscribedUser")) {
			password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("NonsubscribedPassword");
		} else if (UserType.equals("SubscribedUser")) {
			password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("SubscribedPassword");
		}
		type(PWALoginPage.objPasswordField, password, "Password field");
		hideKeyboard();
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
		waitTime(2000);
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objNoRestrictionSelected, "No Restrictions option");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objRestrictAll, "Restricted option");
		verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1, "Set Lock Field");
		type(PWAHamburgerMenuPage.objParentalLockPin1, "1", "ParentalLockPin");
		hideKeyboard();
		type(PWAHamburgerMenuPage.objParentalLockPin2, "2", "ParentalLockPin");
		hideKeyboard();
		type(PWAHamburgerMenuPage.objParentalLockPin3, "3", "ParentalLockPin");
		hideKeyboard();
		type(PWAHamburgerMenuPage.objParentalLockPin4, "4\n", "ParentalLockPin");
		hideKeyboard();
		waitTime(4000);
		directClickReturnBoolean(PWAHamburgerMenuPage.objSetParentalLockButton, "Set Parental lock button");
		waitTime(2000);
		verifyIsElementDisplayed(PWAHomePage.objZeeLogo, "Zee logo");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		verifyIsElementDisplayed(PWAHomePage.objSearchField, "Search field");
		// handle mandatory pop up
		mandatoryRegistrationPopUp(UserType);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("consumptionsFreeContent");
		type(PWAHomePage.objSearchField, keyword + "\n", "Search");
		verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(10000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(6000);
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objParentalLockPopUpInPlayer, "Parent control Popup");
		type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
		hideKeyboard();
		type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
		hideKeyboard();
		type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
		hideKeyboard();
		type(PWAHamburgerMenuPage.objParentalLockPin4player, "4\n", "ParentalLockPin");
		hideKeyboard();
		waitTime(5000);
		waitForPlayerAdToComplete("Video Player");
		playerTap();
		if (verifyIsElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
			logger.info("Playback is played after entering parental lock");
			extent.extentLogger("Playback", "Playback is played after entering parental lock");
		} else {
			logger.error("Playback is not started after entering parental lock");
			extent.extentLoggerFail("Playback", "Playback is not started after entering parental lock");
		}
		click(PWAHomePage.objZeeLogo, "zee logo");
		waitTime(5000);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "ParentalControl");
		verifyIsElementDisplayed(PWALoginPage.objPasswordField, "password field");
		type(PWALoginPage.objPasswordField, password, "Password field");
		hideKeyboard();
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
		waitTime(2000);
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page");
		click(PWAHamburgerMenuPage.objParentalLockNoRestrictionOption, "No restriction option");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objNoRestrictionSelected, "No restricted option selected");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Set Parental lock button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
	}

	public void activateFunctionality() throws Exception {
		extent.HeaderChildNode("Activate Functionality");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
	//	verifyElementPresentAndClick(PWAHamburgerMenuPage.objAuthenticationOption, "Authentication option");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objActivatedevice, "Activate device");
		waitTime(3000);
		checkElementExist(PWAHamburgerMenuPage.objAuthenticationText, "Activation Page");
		if (getDriver().findElement(PWAHamburgerMenuPage.objAuthenticationButtonHighlighted).isEnabled() == false) {
			logger.info("Activate button is not highlighted by default");
			extent.extentLogger("Activate", "Activate button is not highlighted by default");
		}
		type(PWAHamburgerMenuPage.objAuthenticationField, "abcdef", "ActivateField");
		hideKeyboard();
		String AuthenticationField = getText(PWAHamburgerMenuPage.objAuthenticationField);
		if (AuthenticationField != null) {
			logger.info("User is able to enter the value in ActivateField");
			extent.extentLogger("ActivateField", "User is able to enter the value in ActivateField");
		}

		if (getDriver().findElement(PWAHamburgerMenuPage.objAuthenticationButtonHighlighted).isEnabled()) {
			logger.info("Activate button is highlighted after entering the input in ActivationField");
			extent.extentLogger("Activate",
					"Activate button is highlighted after entering the input in ActivationField");
		}

		click(PWAHamburgerMenuPage.objAuthenticationButtonHighlighted, "Activate button");
		try {
			Boolean ExpiredToastMessage = getDriver().findElement(By.xpath("//*[@class='toastMessage']")).isDisplayed();
			if (ExpiredToastMessage == true) {
				extent.extentLogger("Toast", "Expired Toast message displayed");
				logger.info("Expired Toast message displayed");
			} else {
				extent.extentLogger("Toast", "Expired Toast message not displayed");
				logger.info("Expired Toast message not displayed");
			}
			getDriver().findElement(PWAHamburgerMenuPage.objAuthenticationField).clear();
			Wait(3000);
			type(PWAHamburgerMenuPage.objAuthenticationField, "&!@#$%", "ActivateField");
			hideKeyboard();
			waitTime(2000);
			click(PWAHamburgerMenuPage.objAuthenticationButtonHighlighted, "Activate button");
			Boolean NotfounfToastMessage = getDriver().findElement(By.xpath("//*[@class='toastMessage']"))
					.isDisplayed();
			if (NotfounfToastMessage == true) {
				extent.extentLogger("Toast", "Not found Toast message displayed");
				logger.info("Not found Toast message displayed");
			} else {
				extent.extentLogger("Toast", "Not found Toast message not displayed");
				logger.info("Not found Toast message not displayed");
			}
		} catch (Exception e) {
			System.out.println("Toast message is not displayed");
		}
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
	}

	public void MenuOrSettingScenarios(String userType) throws Exception {
		switch (userType) {
		case "Guest":
			extent.HeaderChildNode("Menu or Settings verification");
			extent.extentLogger("Accessing as Guest User", "Accessing as Guest User");
			logger.info("Accessing as Guest User");
			verificationsOfExploreOptions();
			navigationsFromPlanSection();
			resetToDefault();
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Menu or Settings verification");
			extent.extentLogger("Accessing as NonSubscribedUser User", "Accessing as NonSubscribedUser User");
			logger.info("Accessing as NonSubscribedUser User");
			resetToDefault();
			parentControlFunctionality("NonSubscribedUser");
			activateFunctionality();
			verificationsOfExploreOptions();
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Menu or Settings verification");
			extent.extentLogger("Accessing as SubscribedUser User", "Accessing as SubscribedUser User");
			logger.info("Accessing as SubscribedUser User");
			verificationsOfExploreOptions();
			resetToDefault();
			parentControlFunctionality("SubscribedUser");
			activateFunctionality();
		}
	}

	@SuppressWarnings("rawtypes")
	public void playerTap() {
		int deviceWidth = getDriver().manage().window().getSize().width;
		int deviceHeight = getDriver().manage().window().getSize().height;
		int x = deviceWidth / 2;
		int y = deviceHeight / 4;
		TouchAction act = new TouchAction(getDriver());
		act.tap(PointOption.point(x, y)).perform();
		extent.extentLogger("playerTap", "Tapped on the Player");
		logger.info("Tapped on the Player");
	}

	public void ZeePWALogin(String LoginMethod, String userType) throws Exception {
		String url = getParameterFromXML("url");
		extent.HeaderChildNode("User-Type : " + userType + ", Environment: " + url);
		// Get the email and password from properties
		String email = "";
		String password = "";
		dismissAllPopUps();
		if (userType.equalsIgnoreCase("Guest")) {
			extent.extentLogger("Guest", "Accessing the application as Guest user");
		} else if (userType.equalsIgnoreCase("SubscribedUser")) {
			extent.extentLogger("Subscribed", "Accessing the application as Subscribed user");
			email = getParameterFromXML("SubscribedUserName");
			password = getParameterFromXML("SubscribedPassword");
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.extentLogger("Non-Subscribed", "Accessing the application as Non-Subscribed user");
			email = getParameterFromXML("NonsubscribedUserName");
			password = getParameterFromXML("NonsubscribedPassword");
		} else if (userType.equalsIgnoreCase("ClubUser")) {
			extent.extentLogger("Club", "Accessing the application as Club user");
			email = getParameterFromXML("ClubUserName");
			password = getParameterFromXML("ClubPassword");
		}
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("ClubUser")) {
			if (!checkElementDisplayed(PWALoginPage.objLoginBtn, "Login Button")) {
				verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
			}
			waitTime(3000);
			click(PWALoginPage.objLoginBtn, "Login button");
			waitTime(3000);
			HeaderChildNode("Login - Method" + LoginMethod);
			switch (LoginMethod) {

			case "E-mail":
				dismissAppInstallPopUp();
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
				waitTime(10000);
				type(PWALoginPage.objEmailField, email, "Email Field");
				hideKeyboard();
				waitTime(3000);
				dismissSystemPopUp();
				verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, password + "\n", "Password field");
				hideKeyboard();
				waitTime(5000);
				directClickReturnBoolean(PWALoginPage.objLoginBtnLoginPage, "Login Button");
				waitTime(5000);
				break;

			case "Mobile":
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
				type(PWALoginPage.objEmailField, "8792396107\n", "Email Field");
				hideKeyboard();
				verifyElementPresentAndClick(PWALoginPage.objLoginBtn, "Login butotn");
				waitTime(3000);
				hideKeyboard();
				waitTime(5000);
				verifyElementPresentAndClick(PWALoginPage.objpasswordphno, "Password field");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objPasswordField, "password-field");
				type(PWALoginPage.objPasswordField, "tanisha19\n", "password-field");
				hideKeyboard();
				waitTime(2000);
				click(PWALoginPage.objproceedphno, "Proceed button");
				waitTime(5000);
				break;

			case "Facebook":
				extent.HeaderChildNode("Login through Facebook");
				verifyElementPresentAndClick(PWALoginPage.objFacebookIcon, "Facebook Icon");
				System.out.println(getDriver().getCurrentUrl());
				System.out.println(getDriver().getWindowHandles());
				getDriver().switchTo().window("CDwindow-1");
				waitTime(7000);
				if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger")) {
					click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					verifyElementPresent(PWAHamburgerMenuPage.objProfilePageIcon, "Profile icon");
					logger.info("User Logged in Successfully");
					extent.extentLogger("Logged in", "User Logged in Successfully");
				}

				else if (verifyIsElementDisplayed(PWALoginPage.objFacebookPageVerification, "Facebook page")) {
					verifyElementPresent(PWALoginPage.objFacebookPageVerification, "Facebook page");
					verifyElementPresent(PWALoginPage.objFacebookLoginEmail, " Email Field");
					type(PWALoginPage.objFacebookLoginEmail, "igszeetesttest@gmail.com", "Emial Field");
					verifyElementPresent(PWALoginPage.objFacebookLoginpassword, " Password Field");
					type(PWALoginPage.objFacebookLoginpassword, "Igs$123Zee\n", "Password Field");
					verifyElementPresentAndClick(PWALoginPage.objFacebookLoginButtonInFbPage, " Login Button");
					waitTime(9000);
					getDriver().switchTo().window("CDwindow-0");
					verifyIsElementDisplayed(PWALoginPage.objFbCountinueBtn, "Continue button");
					if (verifyIsElementDisplayed(PWASignupPage.objSignUpTxt, "SignUp")) {
						regestrationfromSocialMedia();
						verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
						click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
						verifyElementPresent(PWAHamburgerMenuPage.objProfilePageIcon, "Profile icon");
						logger.info("User Logged in Successfully");
						extent.extentLogger("Logged in", "User Logged in Successfully");
					} else {
						waitTime(3000);
						verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
						click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
						verifyElementPresent(PWAHamburgerMenuPage.objProfileIcon, "Profile icon");
						logger.info("User Logged in Successfully");
						extent.extentLogger("Logged in", "User Logged in Successfully");
					}

				} else if (verifyElementPresent(PWALoginPage.objFbCountinueBtn, "Continue button") == true) {
					click(PWALoginPage.objFbCountinueBtn, "Continue fb");
					if (verifyElementPresent(PWASignupPage.objSignUpTxt, "SignUp") == true) {
						regestrationfromSocialMedia();
						verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
						click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
						verifyElementPresent(PWAHamburgerMenuPage.objProfilePageIcon, "Profile icon");
						logger.info("User Logged in Successfully");
						extent.extentLogger("Logged in", "User Logged in Successfully");
					} else {
						waitTime(7000);
						verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
						click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
						verifyElementPresent(PWAHamburgerMenuPage.objProfilePageIcon, "Profile icon");
						logger.info("User Logged in Successfully");
						extent.extentLogger("Logged in", "User Logged in Successfully");
					}
				}

				break;

			case "Gmail":
				extent.HeaderChildNode("Login through Gmail");
				System.out.println(getDriver().getCurrentUrl());
				System.out.println(getDriver().getWindowHandles());
				verifyElementPresentAndClick(PWALoginPage.objGoogleIcon, "Google Icon");
				getDriver().switchTo().window("CDwindow-1");
				waitTime(4000);
				if (verifyIsElementDisplayed(PWALoginPage.objGmailEmailField, " Email Field")) {
					type(PWALoginPage.objGmailEmailField, "Zee5latest@gmail.com", "Emial Field");
					hideKeyboard();
					verifyElementPresentAndClick(PWALoginPage.objGmailNextButton, "clicked on next button");
					waitTime(3000);
					verifyElementPresent(PWALoginPage.objGmailPasswordField, " Password Field");
					type(PWALoginPage.objGmailPasswordField, "User@123\n", "Password Field");
					hideKeyboard();
					verifyElementPresentAndClick(PWALoginPage.objGmailNextButton, "clicked on next button");
					waitTime(5000);
					getDriver().switchTo().window("CDwindow-0");
					if (verifyIsElementDisplayed(PWASignupPage.objSignUpTxt, "signup")) {
						regestrationfromSocialMedia();
					}
					waitTime(5000);
					verifyElementPresent(PWAHomePage.objZeeLogo, "Zee logo");
					logger.info("User is Logged in successfully");
					extent.extentLogger("Logged in", "User is Logged in successfully");
				} else {
					waitTime(10000);
					verifyElementPresent(PWAHomePage.objZeeLogo, "Zee logo");
					logger.info("User is Logged in successfully");
					extent.extentLogger("Logged in", "User is Logged in successfully");
				}

				break;

			case "Twitter":
				extent.HeaderChildNode("Login through Twitter");
				verifyElementPresentAndClick(PWALoginPage.objTwitterIcon, "Twitter icon");
				waitTime(7000);
				System.out.println(getDriver().getWindowHandles());
				System.out.println(getDriver().getCurrentUrl());
				getDriver().switchTo().window("CDwindow-1");

				waitTime(5000);
				System.out.println(getDriver().getCurrentUrl());

				if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger")) {
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					verifyElementPresent(PWAHamburgerMenuPage.objProfilePageIcon, "Profile icon");
					logger.info("User Logged in Successfully");
					extent.extentLogger("Logged in", "User Logged in Successfully");
				}

				else if (verifyIsElementDisplayed(PWALoginPage.objTwitterAuthorizeButton, "Authorize app")) {
					click(PWALoginPage.objTwitterAuthorizeButton, "Authorize app");
					regestrationfromSocialMedia();
				} else if (verifyIsElementDisplayed(PWALoginPage.objTwitterEmaildField, "Twitter Email field")) {

					type(PWALoginPage.objTwitterEmaildField, "Zee5latest@gmail.com", "Email Field");
					hideKeyboard();
					verifyElementPresentAndClick(PWALoginPage.objTwitterPasswordField, "Twitter Password field");
					type(PWALoginPage.objTwitterPasswordField, "User@123\n", "Password field");
					click(PWALoginPage.objTwitterSignInButton, "Sign in button");
					waitTime(5000);
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					click(PWAHamburgerMenuPage.objLoginBtn, "Login");
					verifyElementPresentAndClick(PWALoginPage.objTwitterIcon, "Twitter icon");
				}

				if (verifyIsElementDisplayed(PWALoginPage.objTwitterAuthorizeButton, "Authorize")) {
					click(PWALoginPage.objTwitterAuthorizeButton, "Authorize");
					waitTime(7000);
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					verifyElementPresent(PWAHamburgerMenuPage.objProfilePageIcon, "Profile icon");
					logger.info("User Logged in Successfully");
					extent.extentLogger("Logged in", "User Logged in Successfully");
				}
				break;
			}
		}
		dismissAppInstallPopUp();
	}

	public void regestrationfromSocialMedia() throws Exception {
		extent.HeaderChildNode("Regestration Screen");
		click(PWASignupPage.objDayPickerTab, "Day Tab");
		verifyElementPresentAndClick(PWASignupPage.objDayPickerTabValue, "Day option");
		verifyElementPresentAndClick(PWASignupPage.objMonthPickerTab, "Month Tab");
		verifyElementPresentAndClick(PWASignupPage.objMonthPickerTabValue, "Month option");
		verifyElementPresentAndClick(PWASignupPage.objYearPickerTab, "year Tab");
		verifyElementPresentAndClick(PWASignupPage.objYearPickerTabValue, "year option");
		verifyElementPresentAndClick(PWASignupPage.objGenderMaleBtn, "Gender tab");
		verifyElementPresentAndClick(PWALoginPage.objSignUpBtn, "signUp button");
		waitTime(10000);
		verifyElementPresent(PWAHomePage.objZeeLogo, "Zee logo");
		logger.info("User Logged in Successfully");
		extent.extentLogger("Logged in", "User Logged in Successfully");
	}

	public void dismissDisplayContentLanguagePopUp() throws Exception {
		try {
			WebElement displayContentLang = (new WebDriverWait(getDriver(), 60))
					.until(ExpectedConditions.presenceOfElementLocated(PWAHomePage.objContinueDisplayContentLangPopup));
			if (displayContentLang.isDisplayed() == true) {
				click(PWAHomePage.objContinueDisplayContentLangPopup, "Continue on Display Language Pop Up");
				dismissSystemPopUp();
				waitForElementAndClickIfPresent(PWAHomePage.objContinueDisplayContentLangPopup, 10,
						"Continue on Content Language Pop Up");
			}
		} catch (Exception e) {

		}
	}

	public void dismissAppInstallPopUp() throws Exception {
		directClickReturnBoolean(PWAHomePage.objAppInstallPopUpClose, "Close in App Install Pop Up");
	}

	public void dismissStayTundedPopUp() throws Exception {
		directClickReturnBoolean(PWAHomePage.objStayTunedPopUpClose, "Close in Stay Tuned Pop Up");
	}

	/** ===================SUSHMA - SEARCH===================================== */

	public void landingOnSearchScreen() throws Exception {
		// handle mandatory pop up
		String userType = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(userType);
		extent.HeaderChildNode("User: " + userType + ": Validating that user lands on search landing screen");
		waitTime(3000);
		verifyIsElementDisplayed(PWAHomePage.objSearchBtn, "Search icon");
		click(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		if (verifyIsElementDisplayed(PWASearchPage.objSearchEditBox, "Search Edit Box")) {
			logger.info("User landed on Search landing screen post tapping on search icon");
			extent.extentLogger("Search landingscreen",
					"User landed on Search landing screen post tapping on search icon");
		}
		// from gaps
		extent.HeaderChildNode("Validating the placeholder text in search box");
		String placeHolderText = findElement(PWASearchPage.objSearchPlaceHolderText).getAttribute("placeholder")
				.toString();
		String expectedPlaceHolderText = "Search for Movies, Shows, Channels etc.";
		if (placeHolderText.equals(expectedPlaceHolderText)) {
			logger.info("Verified that placeholder text is: " + placeHolderText);
			extent.extentLogger("", "Verified that placeholder text is: " + placeHolderText);
		} else {
			logger.error("Placeholder text displayed is: '" + placeHolderText + "' instead of '"
					+ expectedPlaceHolderText + "'");
			extent.extentLoggerFail("", "Placeholder text displayed is: '" + placeHolderText + "' instead of '"
					+ expectedPlaceHolderText + "'");
		}
		// from gaps
		extent.HeaderChildNode("Validating the back button functionality in search page");
		verifyElementPresentAndClick(PWASearchPage.objBackButton, "Back in Search box");
		if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo")) {
			logger.info("Verified app Back button functionality");
			extent.extentLogger("", "Verified app Back button functionality");
		} else {
			logger.error("App Back button functionality verification failed");
			extent.extentLoggerFail("", "App Back button functionality verification failed");
		}
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		Back(1);
		if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo")) {
			logger.info("Verified system Back button functionality");
			extent.extentLogger("", "Verified system Back button functionality");
		} else {
			logger.error("System Back button functionality verification failed");
			extent.extentLoggerFail("", "System Back button functionality verification failed");
		}
		// from gaps
		extent.HeaderChildNode("Validating the presence of footer in search page");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		if (verifyIsElementDisplayed(PWASearchPage.objSearchPageFooter, "Footer menu")) {
			logger.info("Verified presence of Footer menu in Search Page");
			extent.extentLogger("", "Verified presence of Footer menu in Search Page");
		} else {
			logger.error("Failed to verify presence of Footer menu in Search Page");
			extent.extentLoggerFail("", "Failed to verify presence of Footer menu in Search Page");
		}
	}

	public void movieSearchResult(String title) throws Exception {
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		extent.HeaderChildNode("Validating that user is able to search Movie");
		verifyElementPresentAndClick(PWASearchPage.objSearchEditBox, "Search bar");
		type(PWASearchPage.objSearchEditBox, title + "\n", "Search bar");
		waitTime(4000);
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
		List<WebElement> tabs = getDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		tabs.size();
		// for (int i = 1; i <= tabs.size(); i++) {
		for (int i = 1; i <= 1; i++) {
			try {
				WebElement eleTab = getDriver()
						.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
				String tabName = eleTab.getText();
				eleTab.click();
				logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
				extent.extentLogger("Related search results",
						tabName + " tab is displayed and clicked on " + tabName + " tab");
				if (getDriver().findElements(By.xpath(
						"(//div[@class='listingGrid']//div[@class='metaData']//h3[contains(@class,'cardTitle')]//span[@class='highLight'])"))
						.size() > 0) {
					logger.info("Related search results are displayed");
					extent.extentLogger("Related search results", "Related search results are displayed");

				} else {
					logger.error("Related search results are not displayed");
					extent.extentLoggerFail("Related search results", "Related search results are not displayed");
				}
			} catch (Exception e) {
				logger.error("Related search results are not displayed");
				extent.extentLoggerFail("Related search results", "Related search results are not displayed");
			}
		}

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
		verifyElementPresentAndClick(PWASearchPage.objBackButton, "Back in Search box");
	}

	public void partlySpeltSearchResult(String title) throws Exception {

		extent.HeaderChildNode("Validating that user is able to search Partly spelt asset name");

		waitTime(3000);
		type(PWASearchPage.objSearchEditBox, title + "\n", "Search bar");

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");

			if (getDriver().findElements(By.xpath(
					"(//div[@class='listingGrid']//div[@class='metaData']//h3[contains(@class,'cardTitle')]//span[@class='highLight'])"))
					.size() > 0) {
				logger.info("Related search results are displayed");
				extent.extentLogger("Related search results", "Related search results are displayed");

			} else {
				logger.info("Related search results are not displayed");
				extent.extentLogger("Related search results", "Related search results are not displayed");
			}
		}

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
		verifyElementPresentAndClick(PWASearchPage.objBackButton, "Back in Search box");
	}

	public void emptystateScreen() throws Exception {
		extent.HeaderChildNode("Validating Empty state screen");
		click(PWAHomePage.objSearchBtn, "Search icon");
		waitTime(3000);
		type(PWASearchPage.objSearchEditBox, "Natasaarvabhowma\n", "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
		List<WebElement> tabs = getDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();
			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");
			if (getDriver().findElements(By.xpath(
					"(//div[@class='listingGrid']//div[@class='metaData']//h3[contains(@class,'cardTitle')]//span[@class='highLight'])"))
					.size() > 0) {
				logger.info("Related search results are displayed");
				extent.extentLogger("Related search results", "Related search results are displayed");
			} else if (getDriver().findElements(By.xpath("//h3[contains(@class,'cardTitle')]")).size() > 0) {
				logger.info("Search results are displayed");
				extent.extentLogger("Search results", "Search results are displayed");
			} else {
				verifyIsElementDisplayed(PWASearchPage.objEmptyStateScreenErrormsg, "Empty state screen");
				try {
					String text = getText(PWASearchPage.emptyStateScreenText);
					if (text.equals("")) {
						logger.error("No error text is displayed in Empty State Screen");
						extent.extentLoggerFail("", "No error text is displayed in Empty State Screen");
					} else {
						logger.info("Error displayed: " + text);
						extent.extentLogger("", "Error displayed: " + text);
					}
				} catch (Exception e) {
					logger.error("Failed to fetch error text in Empty State Screen");
					extent.extentLoggerFail("", "Failed to fetch error text in Empty State Screen");
				}
			}
		}
		verifyElementPresentAndClick(PWASearchPage.objBackButton, "Back in Search box");
	}

	/**
	 * Validating that user is able search Live channel
	 */
	public void searchLiveTvChannels() throws Exception {
		extent.HeaderChildNode("Fetch Live TV Channel from Live TV tab and verify Search");
		String Channel = fetchLiveChannelname();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, Channel + "\n", "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
		verifyElementPresent(PWALiveTVPage.objrelatedChannel(Channel), "Live TV Channel " + Channel);
		verifyElementPresent(PWALiveTVPage.objrelatedChannelLiveLogo(Channel), "LIVE Logo for " + Channel);
		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
	}

	/*
	 * Validating that user is able to search content by Language
	 */
	public void searchLanguage(String language) throws Exception {
		extent.HeaderChildNode("Validating that user is able to search content by Language");

		waitTime(3000);
		verifyElementPresentAndClick(PWASearchPage.objSearchEditBox, "Search bar");
		type(PWASearchPage.objSearchEditBox, language + "\n", "Search bar");

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		// tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");
			int k = 1;
			for (k = 1; k <= 3; k++) {
				List<WebElement> AssetMetadata = getDriver().findElements(
						By.xpath("(//div[@class='clickWrapper'])[" + k + "]/child::div[@class='dateTime']/child::*"));
				// System.out.println(AssetMetadata.size());

				for (int j = 1; j <= AssetMetadata.size(); j++) {
					String metadata = getDriver().findElement(By.xpath("((//div[@class='clickWrapper'])[" + k
							+ "]/child::div[@class='dateTime']/child::*)[" + j + "]")).getText();
					// System.out.println(metadata);
					if (metadata.contains(language)) {
						logger.info("User can search a content by language");
						extent.extentLogger("Language search", "User can search a content by language");
					}

				}
			}

		}

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");

		clearField(PWASearchPage.objSearchEditBox, "Search Bar");

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
	}

	public void searchGenre(String genre) throws Exception {
		extent.HeaderChildNode("Validating that user is able to search content by Genre");

		waitTime(3000);
		type(PWASearchPage.objSearchEditBox, genre + "\n", "Search bar");

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		// tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");
			int k = 1;
			for (k = 1; k <= 3; k++) {
				List<WebElement> AssetMetadata = getDriver().findElements(
						By.xpath("(//div[@class='clickWrapper'])[" + k + "]/child::div[@class='dateTime']/child::*"));
				// System.out.println(AssetMetadata.size());

				for (int j = 1; j <= AssetMetadata.size(); j++) {
					String metadata = getDriver().findElement(By.xpath("((//div[@class='clickWrapper'])[" + k
							+ "]/child::div[@class='dateTime']/child::*)[" + j + "]")).getText();
					if (metadata.contains(genre)) {
						logger.info("User can search a content by Genre");
						extent.extentLogger("Genre search", "User can search a content by Genre");
					}
				}
			}
		}

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");

		clearField(PWASearchPage.objSearchEditBox, "Search Bar");

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
	}

	/**
	 * Function to fetch Live content from Live TV menu
	 */
	public String fetchLiveContent() throws Exception {
		navigateToAnyScreen("Live TV");
		if (waitforLiveTabToLoad()) {
			waitForElementDisplayed(PWAHomePage.objHighlightedTab("Live TV"), 10);
			waitTime(10000);
			String liveTVContentName = "";
			try {
				liveTVContentName = getText(PWALiveTVPage.objCardTitle);
			} catch (Exception e) {
				waitTime(10000);
				try {
					liveTVContentName = getText(PWALiveTVPage.objCardTitle);
				} catch (Exception e1) {
				}
			}
			logger.info("Live Show fetched from Live TV : " + liveTVContentName);
			extent.extentLogger("", "Live Show fetched from Live TV : " + liveTVContentName);
			return liveTVContentName;
		} else
			return "";
	}

	public String fetchLiveChannelname() throws Exception {
		navigateToAnyScreen("Live TV");
		waitforLiveTabToLoad();
		waitForElementDisplayed(PWAHomePage.objHighlightedTab("Live TV"), 10);
		waitTime(10000);
		String liveChannelName = "";
		try {
			liveChannelName = getText(PWALiveTVPage.objLiveChannelnameaboveCard);
		} catch (Exception e) {
			waitTime(10000);
			try {
				liveChannelName = getText(PWALiveTVPage.objLiveChannelnameaboveCard);
			} catch (Exception e1) {
			}
		}
		logger.info("Live Channel fetched from Live TV : " + liveChannelName);
		extent.extentLogger("", "Live Channel fetched from Live TV : " + liveChannelName);
		return liveChannelName;
	}

	/** =====================VINAY-LANGUAGE-MODULE======================== */

	public void LanguageModule(String userType) throws Exception {
		extent.HeaderChildNode("Verify Display Screen on tapping Language option");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		// Validate language selection option is displayed
		// click on hamburger menu
		click(PWAHomePage.objHamburgerMenu, "Humburger Menu");
		// Click on language option
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language option");
		// Verify display language screen is displayed
		waitForElementDisplayed(PWAHamburgerMenuPage.objDisplayLang, 10);
		if (getElementPropertyToString("class", PWAHamburgerMenuPage.objDisplayLang, "Display language")
				.contains("headerSelected")) {
			extent.extentLogger("Verify Display language screen is displayed",
					"Display screen is displayed on tapping language option");
			logger.info("Display screen is displayed on tapping language option");
		} else {
			extent.extentLoggerFail("Verify Display language screen is displayed",
					"Display screen is nt displayed on tapping language option");
			logger.error("Display screen is not displayed on tapping language option");
		}

		// Verify that default display language is English
		extent.HeaderChildNode("Verify default display language is English");
		String defaultLang = getElementPropertyToString("class", PWALanguageSettingsPage.objSelectedLang,
				"Default Language");
		if (defaultLang.contains("checkedHighlight")) {
			String selectedLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("English"), "Language");
			if (selectedLang.equals("English")) {
				extent.extentLogger("Verify default language", "English is selected by defalut");
				logger.info(selectedLang + " language is selected by default");
			} else {
				extent.extentLoggerFail("Verify default language", "English is selected by defalut");
				logger.error("By default " + selectedLang + " is displayed");
			}
		}

		// Verify user can select desired display language
		extent.HeaderChildNode("Verify user can select desired display language");
		// Verify user can Hindi language
		click(PWALanguageSettingsPage.objLanguage("Hindi"), "Hindi display language");
		// Verify selected language
		String HindiLang = getElementPropertyToString("class", PWALanguageSettingsPage.objSelectedLang,
				"Default Language");
		if (HindiLang.contains("checkedHighlight")) {
			String selectedDisplayLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("Hindi"), "Language");
			extent.extentLogger("Selected display language", selectedDisplayLang + " is selected in display screen ");
			logger.info(selectedDisplayLang + " is selected from display screen");
		} else {
			extent.extentLoggerFail("Select display language", "Unable to select the display language");
			logger.info("Unable to select the display language");
		}
		// Verify user can Marathi language
		click(PWALanguageSettingsPage.objLanguage("Marathi"), "Marathi display language");
		// Verify selected language
		String MaratiLang = getElementPropertyToString("class", PWALanguageSettingsPage.objSelectedLang,
				"Default Language");
		if (MaratiLang.contains("checkedHighlight")) {
			String selectedDisplayLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("Marathi"), "Language");
			extent.extentLogger("Selected display language", selectedDisplayLang + " is selected in display screen ");
			logger.info(selectedDisplayLang + " is selected from display screen");
		} else {
			extent.extentLoggerFail("Select display language", "Unable to select the display language");
			logger.info("Unable to select the display language");
		}
		// Verify user can Telugu language
		click(PWALanguageSettingsPage.objLanguage("Telugu"), "Telugu display language");
		// Verify selected language
		getElementPropertyToString("class", PWALanguageSettingsPage.objSelectedLang, "Default Language");
		if (MaratiLang.contains("checkedHighlight")) {
			String selectedDisplayLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("Telugu"), "Language");
			extent.extentLogger("Selected display language", selectedDisplayLang + " is selected in display screen ");
			logger.info(selectedDisplayLang + " is selected from display screen");
		} else {
			extent.extentLoggerFail("Select display language", "Unable to select the display language");
			logger.info("Unable to select the display language");
		}

		// Verify user can select only one Display language
		extent.HeaderChildNode("Verify user can select only one Display language");
		// Verify selected Display language is applied
		// Select Kannada display language
		click(PWALanguageSettingsPage.objLanguage("Kannada"), "Kannada display language");
		// Verify selected language
		String selectedLangInDisplayScreen = getElementPropertyToString("class",
				PWALanguageSettingsPage.objSelectedLang, "Default Language");
		if (selectedLangInDisplayScreen.contains("checkedHighlight")) {
			String selectedDisplayLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("Kannada"), "Language");
			extent.extentLogger("Selected display language", selectedDisplayLang + " is selected in display screen ");
			logger.info(selectedDisplayLang + " is selected from display screen");
		} else {
			extent.extentLoggerFail("Select display language", "Unable to select the display language");
			logger.info("Unable to select the display language");
		}

		// Verify the selected language is applied in home page
		extent.HeaderChildNode("Verify the selected language is applied in home page");
		click(PWALanguageSettingsPage.objApplyBtn, "Apply button in Display Language screen");
		click(PWALanguageSettingsPage.objApplyBtn, "Apply button in Content Language screen");

		for (int i = 0; i < 10; i++) {
			try {
				waitTime(5000);
				String trayHeader = getElementPropertyToString("class", PWALanguageSettingsPage.objTrayHeader,
						"Tray header");
				if (trayHeader.contains("kn_regionalLang")) {
					extent.extentLogger(" Verify selected display Languge",
							"The selected display langguage is applied successfully");
					logger.info("The selected display language is applied successfully");
					break;
				} else {
					extent.extentLoggerFail(" Verify selected display Languge",
							"The selected display langguage is not applied successfully");
					logger.error("The selected display language is not applied successfully");
				}
			} catch (StaleElementReferenceException e) {
			}
		}
		// Click on Humburger menu
		click(PWAHomePage.objHamburgerMenu, "Humburger Menu");
		// Click on language option
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language option");
		waitTime(2000);
		// Select English
		click(PWALanguageSettingsPage.objEnglishLang, "English language");
		click(PWALanguageSettingsPage.objApplyBtn, "Apply button in Display Language screen");
		click(PWALanguageSettingsPage.objApplyBtn, "Apply button in Content Language screen");
		for (int i = 0; i < 10; i++) {
			try {
				waitTime(5000);
				click(PWAHomePage.objHamburgerMenu, "Humburger Menu");
				break;
			} catch (StaleElementReferenceException e) {
			}
		}
		extent.HeaderChildNode("Content screen is displayed on tapping Content language option");
		// Click on Hamburger menu
		// click(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
		// Click on language option
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language option");
		// Click on Content language button
		waitForElementDisplayed(PWAHamburgerMenuPage.objContentLanguage, 10);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objContentLanguage, "Content language");
		// Verify user is navigated to Content Language screen post tapping content
		// language option
		if (getElementPropertyToString("class", PWAHamburgerMenuPage.objContentLanguage, "Content language")
				.contains("headerSelected")) {
			extent.extentLogger("Verify Content language screen is displayed",
					"Content screen is displayed on tapping Content language option");
			logger.info("Content screen is displayed on tapping Content language option");
		} else {
			extent.extentLoggerFail("Verify Content language screen is displayed",
					"Content language screen is not displayed on tapping content language option");
			logger.info("Content language screen is not displayed on tapping Content language option");
		}
		click(PWALanguageSettingsPage.objSelectedLang, "Selected language");
		Thread.sleep(2000);
		click(PWALanguageSettingsPage.objSelectedLang, "Selected language");

		// Verify user can select multiple Content languages
		extent.HeaderChildNode("Verify user can select multiple Content languages");
		for (int i = 1; i <= 2; i++) {
			String language = getElementPropertyToString("innerText", PWALanguageSettingsPage.objAllLangByindex(i),
					"Language");
			click(PWALanguageSettingsPage.objAllLangByindex(i), language + " Language");
		}
		int size = getDriver().findElements(PWALanguageSettingsPage.objSelectedLang).size();
		if (size > 1) {
			extent.extentLogger("Selected content languages : ", +size + "");
			extent.extentLogger("Verify user can select multiple content languages",
					"User can select multiple Content languages");
			logger.info("User can select multiple Content languages");
		} else {
			extent.extentLoggerFail("Verify user can select multiple content languages",
					"User can not select multiple Content languages");
			logger.error("User can not select multiple Content languages");
		}

		// Verify user should not be able to apply the changes if he deselect all the
		extent.HeaderChildNode("Verify apply button disabled if deselect all");
		// language.
		int selectedlang = getDriver().findElements(PWALanguageSettingsPage.objSelectedLang).size();
		for (int i = 1; i <= selectedlang; i++) {
			click(PWALanguageSettingsPage.objSelectedLang, "Selected language");

		}
		// Verify apply button is disabled
		String disabledApplyBtn = getElementPropertyToString("class", PWALanguageSettingsPage.objDisabledApplyButton,
				"Apply button");
		if (disabledApplyBtn.contains("disable")) {
			extent.extentLogger("Verify Content language screen",
					"User can not apply changes if he deselect all the content languages");
			logger.info("User can not apply changes if he deselect all the content languages");
		} else {
			extent.extentLoggerFail("Verify Content language screen",
					"User can apply changes if he deselect all the content languages");
			logger.error("User can apply changes if he deselect all the content languages");
		}

		// Verify User able to Switch to Content Language section from Display Language
		extent.HeaderChildNode("Verify navigation to content language screen");
		// and Content language
		// click on Display language
		click(PWAHamburgerMenuPage.objDisplayLang, "Display language");
		// Verify user is navigated to content language screen post tapping content
		// language screen
		click(PWAHamburgerMenuPage.objContentLanguage, "Content language");
		if (getElementPropertyToString("class", PWAHamburgerMenuPage.objContentLanguage, "Content language")
				.contains("headerSelected")) {
			extent.extentLogger("Verify Content language screen is displayed",
					"Content screen is displayed on tapping Content language option");
			logger.info("Content screen is displayed on tapping Content language option");
		} else {
			extent.extentLoggerFail("Verify Content language screen is displayed",
					"Content language screen is not displayed on tapping content language option");
			logger.error("Content language screen is not displayed on tapping Content language option");
		}
		click(PWAHamburgerMenuPage.objDisplayLang, "Display language");
		scrollLanguagePopUpsVerification("Display language Popup");
		click(PWAHamburgerMenuPage.objContentLanguage, "Content language");
		scrollLanguagePopUpsVerification("Content Language Popup");
		// Click on cancel button
		click(PWALanguageSettingsPage.objCancelBtn, "Cancel button");
	}

	public void scrollLanguagePopUpsVerification(String popup) throws Exception {
		extent.HeaderChildNode("Scroll Up/Down functionality in " + popup);
		// Scroll Up Check
		verifyElementPresent(PWALanguageSettingsPage.objEnglishLangInDLPopUp, "English radio button");
		WebElement english = getDriver().findElement(PWALanguageSettingsPage.objEnglishLangInDLPopUp);
		int beforeScrollX = english.getLocation().x;
		int beforeScrollY = english.getLocation().y;
		logger.info("Current x coordinate of English radio button: " + beforeScrollX);
		extent.extentLogger("beforeScroll", "Current x coordinate of English radio button: " + beforeScrollX);
		logger.info("Current y coordinate of English radio button: " + beforeScrollY);
		extent.extentLogger("beforeScroll", "Current y coordinate of English radio button: " + beforeScrollY);
		popUpSwipe("UP", 2);
		english = getDriver().findElement(PWALanguageSettingsPage.objEnglishLangInDLPopUp);
		int afterScrollX = english.getLocation().x;
		int afterScrollY = english.getLocation().y;
		logger.info("x coordinate of English radio button after Scroll Up: " + afterScrollX);
		extent.extentLogger("afterScroll", "x coordinate of English radio button after Scroll Up: " + afterScrollX);
		logger.info("y coordinate of English radio button after Scroll Up: " + afterScrollY);
		extent.extentLogger("afterScroll", "y coordinate of English radio button after Scroll Up: " + afterScrollY);
		if (afterScrollY < beforeScrollY) {
			logger.info("User is able to scroll up on " + popup);
			extent.extentLogger("scrollPass", "User is able to scroll up on " + popup);
		} else {
			logger.error("Scrolling Up is failed in " + popup);
			extent.extentLoggerFail("scrollFail", "Scrolling Up is failed in " + popup);
		}
		// Scroll Down check
		waitTime(2000);
		verifyElementPresent(PWALanguageSettingsPage.objEnglishLangInDLPopUp, "English radio button");
		english = getDriver().findElement(PWALanguageSettingsPage.objEnglishLangInDLPopUp);
		beforeScrollX = english.getLocation().x;
		beforeScrollY = english.getLocation().y;
		logger.info("Current x coordinate of English radio button: " + beforeScrollX);
		extent.extentLogger("beforeScroll", "Current x coordinate of English radio button: " + beforeScrollX);
		logger.info("Current y coordinate of English radio button: " + beforeScrollY);
		extent.extentLogger("beforeScroll", "Current y coordinate of English radio button: " + beforeScrollY);
		popUpSwipe("DOWN", 2);
		english = getDriver().findElement(PWALanguageSettingsPage.objEnglishLangInDLPopUp);
		afterScrollX = english.getLocation().x;
		afterScrollY = english.getLocation().y;
		logger.info("x coordinate of English radio button after Scroll Down: " + afterScrollX);
		extent.extentLogger("afterScroll", "x coordinate of English radio button after Scroll Down: " + afterScrollX);
		logger.info("y coordinate of English radio button after Scroll Down: " + afterScrollY);
		extent.extentLogger("afterScroll", "y coordinate of English radio button after Scroll Down: " + afterScrollY);
		if (afterScrollY > beforeScrollY) {
			logger.info("User is be able to scroll up on " + popup);
			extent.extentLogger("scrollPass", "User is be able to scroll up on " + popup);
		} else {
			logger.error("Scrolling Up is failed in " + popup);
			extent.extentLoggerFail("scrollFail", "Scrolling Up is failed in " + popup);
		}
	}

	@SuppressWarnings("rawtypes")
	public void popUpSwipe(String direction, int count) throws Exception {
		touchAction = new TouchAction(getDriver());
		String dire = direction;
		try {
			if (dire.equalsIgnoreCase("UP")) {
				for (int j = 0; j < count; j++) {
					Dimension size = getDriver().manage().window().getSize();
					int starty = (int) (size.height * 0.6);
					int endy = (int) (size.height * 0.4);
					int startx = size.width / 2;
					touchAction.press(PointOption.point(startx, starty))
							.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
							.moveTo(PointOption.point(startx, endy)).release().perform();
					logger.info("Swiping screen in " + dire + " direction" + " " + (j + 1) + " times");
					extent.extentLogger("SwipeUp",
							"Swiping screen in " + " " + dire + " direction" + " " + (j + 1) + " times");
				}
			} else if (dire.equalsIgnoreCase("DOWN")) {
				for (int j = 0; j < count; j++) {
					Dimension size = getDriver().manage().window().getSize();
					int starty = (int) (size.height * 0.6);
					int endy = (int) (size.height * 0.4);
					int startx = size.width / 2;
					touchAction.press(PointOption.point(startx, endy))
							.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
							.moveTo(PointOption.point(startx, starty)).release().perform();
					logger.info("Swiping screen in " + " " + dire + " direction" + " " + (j + 1) + " times");
					extent.extentLogger("SwipeDown",
							"Swiping screen in " + " " + dire + " direction" + " " + (j + 1) + " times");
				}
			}

		} catch (Exception e) {
			logger.error(e);
		}
	}

	/**
	 * Generic function to Logout.
	 */
	public void logout() throws Exception {
		extent.HeaderChildNode("Logout");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		waitTime(2000);
		click(PWAHamburgerMenuPage.objDownArrow("My Account"), "Expander button");
		PartialSwipe("UP", 1);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objExploreItemBtn("Logout"), "Logout option");
		waitTime(10000);
		// verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger
		// menu");
		if (verifyIsElementDisplayed(PWALoginPage.objNotificationPopUp, "Notification PopUp")) {
			click(PWALoginPage.objNotificationPopUp, "Notification PopUp");
			logger.info("Push notification is clicked on successfully");
			extent.extentLogger("Push Notification", "Push notification is clicked on successfully");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		if (verifyIsElementDisplayed(PWALoginPage.objLoginBtn, "Login button")) {
			logger.info("User is logged out successfully");
			extent.extentLogger("Logged out", "User is logged out successfully");
		}
		click(PWAHamburgerMenuPage.objCloseHamburgerMenu, "Close button");
	}

	public void Zee5NewsScreen(String UserType) throws Exception {

		switch (UserType) {

		case "Guest":
			extent.HeaderChildNode("Guest user");
			extent.extentLogger("Accessing as Guest User", "Accessing as Guest User");
			logger.info("Accessing as Guest User");
			Zee5PWANewsValidation();
			Zee5PWANewsViewAll();
			Zee5PWANewsTraysValidation();
			Zee5PWANewsPlayerValidation();
			Zee5PWANewsAutoplayValidation();
			Zee5PWANewsNonLiveLandscapeDisplay();

			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("NonSubscribedUser");
			extent.extentLogger("Accessing as NonSubscribedUser User", "Accessing as NonSubscribedUser User");
			logger.info("Accessing as NonSubscribedUser User");
			ZeePWALogin("Mobile", "NonSubscribedUser");
			Zee5PWANewsValidation();
			Zee5PWANewsViewAll();
			Zee5PWANewsTraysValidation();
			Zee5PWANewsPlayerValidation();
			Zee5PWANewsAutoplayValidation();
			Zee5PWANewsNonLiveLandscapeDisplay();

			break;

		case "SubscribedUser":
			extent.HeaderChildNode("SubscribedUser");
			extent.extentLogger("Accessing as SubscribedUser User", "Accessing as SubscribedUser User");
			logger.info("Accessing as SubscribedUser User");
//				dismissDisplayContentLanguagePopUp();
			ZeePWALogin("E-mail", "SubscribedUser");
			Zee5PWANewsValidation();
			Zee5PWANewsViewAll();
			Zee5PWANewsTraysValidation2();
			Zee5PWANewsPlayerValidation();
			Zee5PWANewsAutoplayValidation();
			Zee5PWANewsNonLiveLandscapeDisplay();
		}
	}

	/*
	 * Verify whether user is able to navigateNews landing page when user tap on
	 * News from Categories listed in Home page and it is highlighted.
	 */
	public void Zee5PWANewsValidation() throws Exception {
		extent.HeaderChildNode("News Tab");
		verifyElementPresentAndClick(PWAHomePage.objPWANews, "News tab in Home_page");
		waitTime(3000);
		if (verifyElementPresent(PWAHomePage.objHighlightedTab("News"), "Highlated News Tab")) {
			logger.info("User is navigated to News landing page");
			extent.extentLogger("News landing Page", "User is navigated News page");
		}
		waitTime(3000);
	}

	/*
	 * view all button functionality.
	 */
	public void Zee5PWANewsViewAll() throws Exception {
		extent.HeaderChildNode("ViewAll landing page");

		verifyElementPresentAndClick(PWANewsPage.objViewAll, "View all arrow");
		waitTime(3000);
//		System.out.println(getDriver().getCurrentUrl());

		if ((getDriver().getCurrentUrl()).contains("live") == true) {
			System.out.println("ViewAll Wrap page displayed");
			logger.info("User navigate to ViewAll Wrap page after clicking on ViewAll");
			extent.extentLogger("News landing Page", "User navigated to ViewAll wrap");
		} else {
			System.out.println("ViewAll Wrap page not displayed");
			logger.info("User didn't navigate to ViewAll Wrap page after clicking on ViewAll");
			extent.extentLogger("News landing Page", "User didn't navigated to ViewAll wrap");
		}

		Back(1);

	}

	/*
	 * Verify the trays displayed in the "News" page. (for example): -Live News -VOD
	 */

	public void Zee5PWANewsTraysValidation() throws Exception {
		extent.HeaderChildNode("Verifing the trays displayed in News Tab");
		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);

		Response resp = ResponseInstance.getResponseForPages("News", languageSmallText);

		List<String> apiTitleList = new LinkedList<String>();

		List<String> apitotaltrays = resp.jsonPath().getList("buckets");
		System.out.println(apitotaltrays.size());
		for (int i = 1; i < apitotaltrays.size(); i++) {
			String traytitle = resp.jsonPath().getString("buckets[" + i + "].title");
			apiTitleList.add(traytitle);
		}

		List<String> uiTitleList = new LinkedList<String>();

		List<WebElement> uitotaltrays = findElements(By.xpath("//div[@class='trayHeader']"));

		for (int j = 0; j < uitotaltrays.size() - 1; j++) {
			String trayTitle = findElement(By.xpath("(//div[@class='trayHeader'])[" + (j + 1) + "]")).getText();
			uiTitleList.add(trayTitle);
			PartialSwipe("UP", 1);

			if (apiTitleList.get(j).equalsIgnoreCase(uiTitleList.get(j))) {
				logger.info("API title: " + apiTitleList.get(j) + " is verified with UI title: " + uiTitleList.get(j));
				extent.extentLogger("Tray validation",
						"API title: " + apiTitleList.get(j) + " is verified with UI title: " + uiTitleList.get(j));

			}
		}
		System.out.println("UI: " + uiTitleList);
		waitTime(3000);
	}
	// ---------------

	public void Zee5PWANewsTraysValidation2() throws Exception {
		extent.HeaderChildNode("Verifing the trays displayed in News Tab");
		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);

		Response resp = ResponseInstance.getResponseForPages("News", languageSmallText);

		List<String> apiTitleList = new LinkedList<String>();

		List<String> apitotaltrays = resp.jsonPath().getList("buckets");
		System.out.println(apitotaltrays.size());
		for (int i = 1; i < apitotaltrays.size(); i++) {
			String traytitle = resp.jsonPath().getString("buckets[" + i + "].title");
			apiTitleList.add(traytitle);
		}

		System.out.println("api: " + apiTitleList);

		String Content_Title = resp.jsonPath().getString("buckets[1].items[0].title");
		for (int i = 1; i < Content_Title.length(); i++) {
			System.out.println("Content Title is " + Content_Title + "");
			waitTime(3000);
			if (verifyIsElementDisplayed(TitleTextToXpath(Content_Title), Content_Title)) {
				System.out.println("Content title Found");
				verifyElementPresent(TitleTextToXpath(Content_Title), "Playable Content");
			}
			System.out.println("api: " + Content_Title);

		}

		List<String> uiTitleList = new LinkedList<String>();
		List<String> uiContent = new LinkedList<String>();

		List<WebElement> uitotaltrays = findElements(By.xpath("//div[@class='trayHeader']"));
		System.out.println(uitotaltrays.size());

		for (int j = 0; j < uitotaltrays.size() - 1; j++) {
			String trayTitle = findElement(By.xpath("(//div[@class='trayHeader'])[" + (j + 1) + "]")).getText();
			uiTitleList.add(trayTitle);
			PartialSwipe("UP", 1);

			if (apiTitleList.get(j).equalsIgnoreCase(uiTitleList.get(j))) {
				logger.info("API title: " + apiTitleList.get(j) + " is verified with UI title: " + uiTitleList.get(j));
				extent.extentLogger("Tray validation",
						"API title: " + apiTitleList.get(j) + " is verified with UI title: " + uiTitleList.get(j));

			}
		}
		// content validation
		List<WebElement> uiContenttray = findElements(By.xpath("//div[@class='trayContentWrap']"));

		for (int j = 0; j < uiContenttray.size() - 1; j++) {
			String trayContent = findElement(By.xpath("(//div[@class='trayContentWrap'])[" + (j + 1) + "]")).getText();
			uiContent.add(trayContent);
			PartialSwipe("UP", 1);

			if (Content_Title.equalsIgnoreCase(uiContent.get(j))) {
				logger.info("API Content title: " + apiTitleList.get(j) + " is verified with UI content: "
						+ uiContent.get(j));
				extent.extentLogger("Tray validation",
						"API content: " + apiTitleList.get(j) + " is verified with UI content: " + uiContent.get(j));

			}
		}
		waitTime(3000);
	}

	/*
	 * Verify the player control given on News landing page: Play/Pause button is
	 * shown on player 10 sec backword/forward buttons are not shown "LIVE" in red
	 * box shown near setting Setting optinon is given Full screen mode is given
	 */

	public void Zee5PWANewsPlayerValidation() throws Exception {

		extent.HeaderChildNode("NewsPage Player Validation");
		// click(PWAHomePage.objTabName("News"), "News tab");

		verifyElementPresentAndClick(PWANewsPage.objContent, "First content in the carousel");
		waitForElementDisplayed(PWANewsPage.ContentPlayer, 30);
		waitTime(5000);
		playerTap();
		waitTime(2000);
		verifyElementPresentAndClick(PWAPlayerPage.pauseBtn, "Pause icon on player screen");
		playerTap();
		waitTime(2000);
		verifyElementPresent(PWAPlayerPage.playBtn, "Play icon on player screen");
		playerTap();
		waitTime(2000);
		verifyElementNotPresent(PWAPlayerPage.rewind10SecBtn, 10);
		playerTap();
		waitTime(2000);
		verifyElementNotPresent(PWAPlayerPage.forward10SecBtn, 10);
		playerTap();
		waitTime(2000);
		verifyElementPresent(PWANewsPage.objLive, "Live mark on player");
		playerTap();
		waitTime(2000);
		verifyElementPresent(PWAPlayerPage.settingsBtn, "Settings option on player screen");
		playerTap();
		waitTime(2000);
		verifyElementPresent(PWANewsPage.objFullScreen, "Fullscreen icon");
		waitTime(2000);
		if (verifyIsElementDisplayed(PWANewsPage.objLive, "Live mark")) {
			System.out.println("Player control validation on Live News is complete");
			logger.info("User successfully validated the player controls");
			extent.extentLogger("News Player screen", "User successfully validates player controls");
		} else {
			System.out.println("Player control validation on Live News is not complete");
			logger.info("User didn't navigate to ViewAll Wrap page after clicking on ViewAll");
			extent.extentLoggerFail("News Player screen", "User failed to validates player controls");
		}
		Back(1);
	}

	// Verify whether user is navigate to consumption page with News autoplaying
	// when user tap on content in Listed collection.

	public void Zee5PWANewsAutoplayValidation() throws Exception {
		extent.HeaderChildNode("Autoplaying of content on consumption page");
		click(PWAHomePage.objTabName("News"), "News tab");

		waitTime(2000);
		verifyElementPresentAndClick(PWANewsPage.objNonLiveNews, "NonLive news content");
		waitTime(5000);
		waitForPlayerAdToComplete("Video Player");
		waitTime(12000);
		playerTap();
		waitTime(2000);

		try {
			waitTime(2000);
			verifyElementPresent(PWANewsPage.objSeekbar, "Seek bar on NonLiveNews");
			waitTime(2000);
			getPlayerDuration();
			System.out.println("Autoplaying functionality checked");
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Some error occured");
		}
		if (verifyIsElementDisplayed(PWANewsPage.objSeekbar, "Seekbar verification")) {

			logger.info("Successfully Autoplaying of content on consumption page is validated");
			extent.extentLogger("News consumption screen", "User successfully validated the autoplay functionality");
		} else {

			logger.info("Failed to validate autoplaying");
			extent.extentLoggerFail("News consumption screen", "User failed to validate the autoplay functionality");
		}
		Back(1);
	}

	public By TitleTextToXpath(String Title) throws Exception {
		return By.xpath("//*[@title='" + Title + "']");

	}

	public void getPlayerDuration() {
		String duration = getElementPropertyToString("innerText", PWAPlayerPage.objPlayerCurrentDuration,
				"Player Current Duration").toString();
		if (duration != null) {
			extent.extentLogger("contentDuration", "Successfully played content till " + duration);
			logger.info("Successfully played content till " + duration);
		} else {
			extent.extentLoggerFail("durationFailed", "Failed to get Current Duration");
			logger.error("Failed to get Current Duration");
		}
	}

	// Verify News in landscape mode is playing without any error.

	public void Zee5PWANewsNonLiveLandscapeDisplay() throws Exception {
		extent.HeaderChildNode("Landscape mode display of VODNews");
		// click(PWAHomePage.objTabName("News"), "News tab");

		waitTime(2000);
		verifyElementPresentAndClick(PWANewsPage.objNonLiveNews, "NonLive news content");

		if (verifyIsElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Sign Up Pop Up ")) {
			click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Sign Up Pop Up close button");
		}
//		waitForPlayerLoaderToComplete();
		waitTime(8000);
		waitForPlayerAdToComplete("Video Player");
		waitTime(12000);
		click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		verifyElementPresentAndClick(PWAPlayerPage.maximizeBtn, "Maximize window icon");
		waitTime(15000);
		if (getDriver().findElement(PWAPlayerPage.maximizeBtn).isDisplayed() == false) {
			logger.info("Content playing in landscape mode");
			extent.extentLogger("News consumption screen", "User successfully validated the Landscape display");
		} else {
			logger.info("Content is not playing in landscape mode");
		}
		waitTime(8000);
		verifyElementPresentAndClick(PWAPlayerPage.minimizeBtn, "Minimize window icon");
		waitTime(3000);
	}

	/**
	 * =================HITESH - MUSIC PAGE========================
	 * 
	 * @throws Exception
	 */

	public void musicPageTrayValidation(String tabName) throws Exception {
		extent.HeaderChildNode("Verifing the Trays displayed in Music Page");
		navigateToAnyScreen(tabName);
		String languageSmallText = allSelectedLanguages();
		Response resp = ResponseInstance.getResponseForPages("music", languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		List<String> apitotaltrays = resp.jsonPath().getList("buckets");
		System.out.println(apitotaltrays.size());
		for (int i = 1; i < apitotaltrays.size(); i++) {
			String traytitle = resp.jsonPath().getString("buckets[" + i + "].title");
			apiTitleList.add(traytitle);
		}
		logger.info("Trays from API: " + apiTitleList);
		extent.extentLogger("", "Trays from API: " + apiTitleList);
		for (int j = 0; j < apiTitleList.size(); j++) {
			String apititle = apiTitleList.get(j);
			try {
				findElement(By.xpath("(//div[@class='trayHeader'])//h2[.='" + apititle + "']")).getText();
				logger.info("Located Tray " + apititle + " in UI");
				extent.extentLogger("", "Located Tray " + apititle + " in UI");
			} catch (Exception e) {
				PartialSwipe("UP", 1);
				try {
					findElement(By.xpath("(//div[@class='trayHeader'])//h2[.='" + apititle + "']")).getText();
					logger.info("Located Tray " + apititle + " in UI");
					extent.extentLogger("", "Located Tray " + apititle + " in UI");
				} catch (Exception e1) {
					logger.error("Failed to locate Tray " + apititle + " in UI");
					extent.extentLoggerFail("", "Failed to locate Tray " + apititle + " in UI");
				}
			}
		}
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee5 Logo");
	}

	public void navigateToMusicTab(String userType) throws Exception {
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		HeaderChildNode("Verification of Subscribe Pop Up");
		navigateToAnyScreen("Music");
		if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
			findElements(PWAMusicPage.objPremiumTag).get(1).click();
			verifyElementPresent(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe pop up");
			verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");
			if (verifyIsElementDisplayed(PWAMusicPage.objRecommendedTrayHeader, "Recommended tray")) {
				logger.info("Recommended tray is displayed in Music consumption page");
				extent.extentLogger("Recommended tray", "Recommended tray is displayed in Music consumption page");
			} else {
				logger.info("Recommended videos is not displayed in Music consumption page");
				extent.extentLogger("Recommended tray",
						"Recommended videos is not displayed in Music consumption page");
			}
			Back(1);
		} else {
			logger.info("There are no Premium contents available in Music Page");
			extent.extentLogger("", "There are no Premium contents available in Music Page");
		}
		HeaderChildNode("Verification of navigation after tapping on Music Card");
		String Title = "", ConsumptionTitle = "";
		try {
			Title = getText(PWAMusicPage.objMusicCardTitleInMusicTab);
			logger.info("Title of the card fetched from Music Page: " + Title);
			extent.extentLogger("", "Title of the card fetched from Music Page: " + Title);
		} catch (Exception e) {
			logger.error("Failed to fetch Title of the card from Music Page");
			extent.extentLoggerFail("", "Failed to fetch Title of the card from Music Page");
		}
		boolean clickedasset = false;
		for (int i = 0; i < 5; i++) {
			if (directClickReturnBoolean(PWAMusicPage.objMusicCardImageInMusicTab, "Music Card")) {
				clickedasset = true;
				break;
			} else {
				Swipe("UP", 1);
				waitTime(2000);
			}
		}
		if (clickedasset == true) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Sign Up pop up")) {
				click(PWAMusicPage.objWEBCloseBtnLoginPopup, "Sign Up Pop up close button");
			}
			try {
				ConsumptionTitle = getElementPropertyToString("innerText", PWAMusicPage.objConsumptionPageTitle1,
						"Music Consumptions Title").toString();
				logger.info("Title of the card fetched from Music Consumptions Page: " + ConsumptionTitle);
				extent.extentLogger("", "Title of the card fetched from Music Consumptions Page: " + ConsumptionTitle);
			} catch (Exception e) {
				logger.error("Failed to fetch Title of the card from Music Consumptions Page");
				extent.extentLoggerFail("", "Failed to fetch Title of the card from Music Consumptions Page");
			}
			if (Title.contains(ConsumptionTitle)) {
				logger.info("Successfuly navigated to the right Consumptions page");
				extent.extentLogger("Consumption page", "Successfuly navigated to the right Consumptions page");
				// Verify Recommended trays in consumptions page
				if (verifyIsElementDisplayed(PWAMusicPage.objRecommendedTrayHeader, "Recommended Videos tray")) {
					logger.info("Verified that Recommended Videos tray is displayed in Music Consumptions page");
					extent.extentLogger("Recommended tray",
							"Verified that Recommended Videos tray is displayed in Music Consumptions page");
				} else {
					logger.error("Recommended Videos is not displayed in Music Consumptions page");
					extent.extentLoggerFail("Recommended tray",
							"Recommended Videos is not displayed in Music Consumptions page");
				}
			} else {
				logger.error("Failed to navigate to the right Consumptions page");
				extent.extentLoggerFail("Consumption page", "Failed to navigate to the right Consumptions page");
			}
			if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
				click(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up close icon");
			}
		} else {
			logger.error("Failed to click on Music card from tray");
			extent.extentLoggerFail("Consumption page", "Failed to click on Music card from tray");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

	}

//	=========================================================================================

	public void GetAndVerifyPWAOrientaion(String Value) {
		ScreenOrientation orientation = getDriver().getOrientation();
		String ScreenOrientation = orientation.toString();
		try {
			logger.info("The screen Orientation is " + ScreenOrientation);
			extent.extentLogger("Screen Orientation", "The screen Orientation is " + ScreenOrientation);
		} catch (Exception e) {
			logger.error("The screen Orientation is not " + ScreenOrientation);
			extent.extentLoggerFail("Screen Orientation", "The screen Orientation is not " + ScreenOrientation);
		}
	}

	/**
	 * Validation of Profile Functionality according user types.
	 */
	public void myProfileScenarios(String userType) throws Exception {

		switch (userType) {
		case "NonSubscribedUser":
			extent.HeaderChildNode("Profile Scenarios");
			extent.extentLogger("Accessing as Non-Subscribed User", "Profile Scenarios for Non-Subscribed User");
			logger.info("Profile Scenarios for Non-Subscribed User");
			profileFunctionalitySanity(userType);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Profile Scenarios");
			extent.extentLogger("Accessing as Subscribed User", "Profile Scenarios for Subscribed User");
			logger.info("Profile Scenarios for Subscribed User");
			profileFunctionalitySanity(userType);
		}
	}

	/**
	 * Function for Navigation to MyWatchlist .
	 */
	public void NavigationsToMyWatchlist() throws Exception {
		extent.HeaderChildNode("My Watchlist");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objExploreItemBtn("My Watchlist"), "My watchlist");
		waitTime(4000);
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Watchlist"), "My Watchlist page");
		Back(1);
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		waitTime(2000);
	}

	/**
	 * Function for Navigation to MyReminders .
	 */
	public void NavigationsToMyReminders() throws Exception {
		extent.HeaderChildNode("My Reminders");
		click(PWAHamburgerMenuPage.myAccount, "Expander button");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objExploreItemBtn("My Reminders"), "My Reminders");
		waitTime(4000);
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Reminders"), "My Reminders page");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objMyAccountOptionsText("My Reminders"), "My Reminders");
		Back(1);
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		waitTime(2000);
	}

	/**
	 * Function for Navigation to MySubscription.
	 */
	public void NavigationsToMySubsccription(String userType) throws Exception {
		extent.HeaderChildNode("My subscriptions");
		click(PWAHamburgerMenuPage.objDownArrow("My Account"), "expander button");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objExploreItemBtn("My Subscription"), "My Subscriptions");
		waitTime(7000);
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Subscription"), "My Subscriptions page");
		if (userType.equals("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objSubscribitionPageActivePlan, "My Subscription")) {
				logger.error("My Subscription is displayed for Non Subscribed User");
				extent.extentLoggerFail("Plan", "My Subscription is displayed for Non Subscribed User");
			} else {
				logger.info("My Subscription is not displayed for Non Subscribed User");
				extent.extentLogger("Plan", "My Subscription is not displayed for Non Subscribed User");
			}
			if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objNoTranscationText, "No Transaction")) {
				logger.info("No Active plan is displayed for Non Subscribed User");
				extent.extentLogger("Plan", "No Active plan is displayed for Non Subscribed User");
			} else {
				logger.error("Active plan is displayed for Non Subscribed User");
				extent.extentLoggerFail("Plan", "Active plan is displayed for Non Subscribed User");
			}
		}
		if (userType.equals("SubscribedUser")) {
			if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objSubscribitionPageActivePlan, "My Subscription")) {
				logger.info("My Subscription is displayed for Subscribed User");
				extent.extentLogger("Plan", "My Subscription is displayed for Subscribed User");
			} else {
				logger.error("My Subscription is not displayed for Subscribed User");
				extent.extentLoggerFail("Plan", "My Subscription is not displayed for Subscribed User");
			}
			if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objNoTranscationText, "No Transaction")) {
				logger.error("No Active plan is displayed for Subscribed User");
				extent.extentLoggerFail("Plan", "No Active plan is displayed for Subscribed User");
			} else {
				logger.info("Active plan is displayed for Subscribed User");
				extent.extentLogger("Plan", "Active plan is displayed for Subscribed User");
			}
		}
		Back(1);
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		waitTime(2000);
	}

	/**
	 * Function for Navigation to MyTransaction.
	 */
	public void NavigationsToMyTransactions() throws Exception {
		extent.HeaderChildNode("My Transactions");
		click(PWAHamburgerMenuPage.objDownArrow("My Account"), "expander button");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objExploreItemBtn("My Transactions"), "My Transactions");
		waitTime(7000);
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Transactions"), "My Transactions page");
		String userType = getParameterFromXML("userType");
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objNoTranscationText, "No Transaction text")) {
				logger.info("No transaction text is displayed for Guest/Non Subscribed user, expected behavior");
				extent.extentLogger("Transaction",
						"No transaction text is displayed for Guest/Non Subscribed user, expected behavior");
			} else {
				logger.error("No transaction text should be displayed for Guest/Non Subscribed user");
				extent.extentLoggerFail("Transaction",
						"No transaction text should be displayed for Guest/Non Subscribed user");
			}
		} else {
			if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objTransactionPageGrid, "Transaction details")) {
				logger.info("Transaction details are displayed");
				extent.extentLogger("Transaction", "Transaction details are displayed");
			} else {
				logger.error("Transaction details are not displayed for Club/Subscribed user");
				extent.extentLoggerFail("Transaction",
						"Transaction details are not displayed for Club/Subscribed user");
			}
		}

		Back(1);
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		waitTime(2000);
	}

	/** ====================SUSHMA LIVETV========================== */

	public void LiveTvScreen(String UserType) throws Exception {
		liveLandingPage();
		live();
		premiumPopUp();
		// navigateToAnyScreen("Live TV");
		ChannelGuide(UserType);
	}

	public void remainderOptionOnUpcomingShow() throws Exception {
		// Click on date
		click(PWALiveTVPage.objTomorrowDate, "Tomorrow date");
		FilterLanguage("Bengali");
		// Verify Share and Reminder option is available
		click(PWALiveTVPage.objBanglaShow1, "Show detail");
		verifyElementPresent(PWALiveTVPage.objShareOption, "Share option");
		verifyElementPresent(PWALiveTVPage.objRemainderButton, "Remainder option for upcoming show ");
		// Check if reminder is already active
		if (getDriver().findElement(PWALiveTVPage.objRemainderButton).getAttribute("class").contains("btnIconActive")) {
			extent.extentLogger("", "Reminder option is already selected");
			logger.info("Reminder option is already selected");
			JSClick(PWALiveTVPage.objRemainderButton, "Reminder option");
			extent.extentLogger("", "Deselected Reminder");
			logger.info("Deselected Reminder");
		}
		// Verify user can click on remainder option
		// click on Remainder option
		JSClick(PWALiveTVPage.objRemainderButton, "Reminder option");
		if (getDriver().findElement(PWALiveTVPage.objRemainderButton).getAttribute("class").contains("btnIconActive")) {
			extent.extentLogger("", "User can click on Reminder option");
			logger.info("User can click on Reminder option");
		} else {
			extent.extentLoggerFail("", "User can not click on Reminder option");
			logger.error("User can not click on Reminder option");
		}
		JSClick(PWALiveTVPage.objRemainderButton, "Reminder option");
		extent.extentLogger("", "Deselected Reminder");
		logger.info("Deselected Reminder");

		// Click on close button
		click(PWALiveTVPage.objPopupCloseButton, "Close button");
	}

	public void FilterLanguage() throws Exception {
		click(PWALiveTVPage.objFilterLanguageChannelGuide, "Filter language");
		int size = findElements(PWALiveTVPage.objSelectedlang).size();
		for (int i = 1; i <= size; i++) {
			click(PWALiveTVPage.objSelectedlang, "Selected language");
		}
		click(PWALiveTVPage.objKannadaLang, "Kannada language");
		click(PWALiveTVPage.objApplyBtn, "Apply button");
//		click(PWALiveTVPage.objApplyBtn,"Apply button");
	}

	public boolean navigateToAnyScreen(String screen) throws Exception {
		for (int i = 0; i < 3; i++) {
			try {
				if (verifyElementPresentAndClick(PWAHomePage.objTabName(screen), "Tab : " + screen))
					return true;
			} catch (Exception e) {
				try {
					swipeOnTab("Left");
					if (verifyElementPresentAndClick(PWAHomePage.objTabName(screen), "Tab : " + screen)) {
						waitTime(5000);
						return true;
					}
				} catch (Exception exc) {
					swipeOnTab("Right");
				}
			}
		}
		return false;
	}

	@SuppressWarnings("rawtypes")
	public void swipeOnTab(String dire) throws InterruptedException {
		extent.HeaderChildNode("Swipping on tab");
		touchAction = new TouchAction(getDriver());
		Dimension size = getDriver().findElement(PWAHomePage.objTabContBar).getSize();
		if (dire.equalsIgnoreCase("Left")) {
			int startx = (int) (size.width * 0.5);
			int endx = (int) (size.width * 0.1);
			int starty = size.height / 2;
			touchAction.press(PointOption.point(startx, starty))
					.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
					.moveTo(PointOption.point(endx, starty)).release().perform();
		} else if (dire.equalsIgnoreCase("Right")) {
			int startx = (int) (size.width * 0.5);
			int endx = (int) (size.width * 0.9);
			int starty = size.height / 2;
			touchAction.press(PointOption.point(startx, starty))
					.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
					.moveTo(PointOption.point(endx, starty)).release().perform();
		}
	}

	public void waitForElementAndClick(By locator, int seconds, String message) throws InterruptedException {
		main: for (int time = 0; time <= seconds; time++) {
			try {
				getDriver().findElement(locator).click();
				logger.info("Clicked element " + message);
				extent.extentLogger("clickedElement", "Clicked element " + message);
				break main;
			} catch (Exception e) {
				Thread.sleep(1000);
				if (time == seconds) {
					logger.error("Failed to click element " + message);
					extent.extentLoggerFail("failedClickElement", "Failed to click element " + message);
				}
			}
		}
	}

	/** =========================SUSHMA-MOVIES MODULE==================== */
	public void swipeTumbnailToLeft(String str) throws InterruptedException {
		WebElement sourceLocator = getDriver().findElement(By.xpath("((((//div[.='" + str
				+ "']//parent::*//parent::*//parent::*)//child::*[@class='movieTrayWrapper'])//child::*[1][@class='noSelect clickWrapper'])[4])"));
		WebElement targetLocator = getDriver().findElement(By.xpath("((((//div[.='" + str
				+ "']//parent::*//parent::*//parent::*)//child::*[@class='movieTrayWrapper'])//child::*[1][@class='noSelect clickWrapper'])[2])"));

		Thread.sleep(4000);

		Actions action = new Actions(getDriver());
		action.dragAndDrop(sourceLocator, targetLocator).build().perform();
//		action.clickAndHold(sourceLocator).moveToElement(targetLocator).build().perform();
	}

	public void clickByElement(WebElement ele, String validationtext) throws Exception {
		try {
			WebElement element = ele;
			element.click();
			logger.info("Clicked on the " + validationtext);
			extent.extentLogger("click", "Clicked on the <b> " + validationtext);
		} catch (Exception e) {
			logger.error(e);
		}
	}

	/**
	 * =======================SHREENIDHI MandatoryRegistration ==================
	 */
	/**
	 * Validation of Sign Up Pop Up Functionality
	 */
	@SuppressWarnings("unused")
	public void registerPopUpFunctionality() throws Exception {
		extent.HeaderChildNode("Verification of Subscribe Pop Up");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		// mandatoryRegistrationPopUp(user);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovie2");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Premium content: " + keyword);
		waitTime(7000);
		if (checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
				"'You're watching a trailer' message on the player")) {
			logger.info("Subscribe Pop up is not displayed for Premium content because trailer is playing");
			extent.extentLogger("Subscribe Pop pup",
					"Subscribe Pop up is not displayed for Premium content because trailer is playing");
		} else {
			logger.error("Premium content is played with no Subscribe Pop Up displayed");
			extent.extentLogger("", "Premium content is played with no Subscribe Pop Up displayed");
		}

		extent.HeaderChildNode("Verification of Sign Up Pop Up: Entering mobile number of new Registered User");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		checkElementExist(PWAHomePage.objSearchField, "Search field");
		String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie2");
		type(PWAHomePage.objSearchField, keyword1, "Search");
		verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(10000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword1), "Search Result");
		waitTime(6000);
		if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Sign Up Pop Up")) {
			logger.info("Sign Up Pop Up is verifed in portrait mode");
			extent.extentLogger("Popup", "Sign Up Pop Up is verifed in portrait mode");
//			checkElementDisplayed(PWAHomePage.objPopUpMobileField, "Mobile Number field");
			verifyElementPresentAndClick(PWAHomePage.objPopUpMobileField, "Mobile Number field");
			type(PWAHomePage.objPopUpMobileField, "9964955239", "Mobile Number field");
			hideKeyboard();
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objSendOtp, "Send OTP button");
			if (checkElementDisplayed(PWALoginPage.objFacebookIcon, "Facebook icon") == false) {
				logger.info("Social media login is not displayed in Sign Up Pop Up");
				extent.extentLogger("Social media icon", "Social media login is not displayed in Sign Up Pop Up");
			} else {
				logger.error("Social media login is displayed in Sign Up Pop Up");
				extent.extentLoggerFail("Social media icon", "Social media login is displayed in Sign Up Pop Up");
			}
			if (checkElementDisplayed(PWAHomePage.objverifyNumberPopup, "PopUp")) {
				logger.info("Otp screen is displayed");
				extent.extentLogger("Popup", "Otp screen is displayed");
			}
			click(PWASearchPage.objCloseRegisterDialog, "Close button");
			click(PWAHomePage.objZeeLogo, "Zee logo");
			changeLanguageAndVerifyPopUp();
		} else {
			logger.info("Sign Up Pop Up is not displayed");
			extent.extentLogger("Popup", "Sign Up Pop Up is not displayed");
		}
	}

	/**
	 * Validation of Sign Up Pop Up Functionality after changing the display
	 * language
	 */
	public void changeLanguageAndVerifyPopUp() throws Exception {
		extent.HeaderChildNode("Change language and verification of pop up");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language button");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objkannadalanguage, "Kannada Display Language");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply buttton");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply buttton");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		checkElementExist(PWAHomePage.objSearchField, "Search field");
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie2");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResultChangedLanguage(keyword), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResultChangedLanguage(keyword), "Search Result");
		waitTime(6000);
		if (checkElementDisplayed(PWASearchPage.objRegisterDialogAfterchangedLanguage, "Sign Up Pop Up")) {
			logger.info("Sign Up Popup is validated after changing language");
			extent.extentLogger("Pop-Up", "Sign Up Popup is validated after changing language");
			click(PWASearchPage.objCloseRegisterDialog, "Close button");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		PartialSwipe("UP", 1);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMoreSettingInKannada, "More setting");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objResetSettingsToDefault, "Reset Settings to Default");
		waitTime(5000);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
	}

	public void simpleTest(String UserType) {
		boolean isIconDisplayed = false;
		String languageSmallText = "en,kn";
		List<String> allMetaTitleOnCarouselAPI = ResponseInstance.traysTitleCarousel("home", languageSmallText);
		System.out.println("API Data : " + allMetaTitleOnCarouselAPI);
		for (int i = 0; i < allMetaTitleOnCarouselAPI.size(); i++) {
			String carouselTitleAPI = allMetaTitleOnCarouselAPI.get(i);
			for (int j = 0; j < 7; j++) {
				try {
					WebElement mastHeadEle = (new WebDriverWait(getDriver(), 30)).until(ExpectedConditions
							.presenceOfElementLocated(PWAHomePage.objContTitleWithPlayIconCarousel(carouselTitleAPI)));
					isIconDisplayed = mastHeadEle.isDisplayed();
					if (isIconDisplayed == true) {
						System.out.println("Content " + carouselTitleAPI + ": Play icon position for X : "
								+ mastHeadEle.getLocation().x);
						System.out.println("Content " + carouselTitleAPI + ": Play icon position for Y : "
								+ mastHeadEle.getLocation().y);
						break;
					} else {
						swipeCarouselContents(1);
					}
				} catch (Exception e) {
					System.out.println("Exception : " + e.getMessage());
				}
			}
		}
	}

	/**
	 * Validation of Complete Profile Popup Functionality
	 */
	public void completeProfilePopup() throws Exception {
		extent.HeaderChildNode("Complete profile popup functionality");
		logout();
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWALoginPage.objLoginBtn, "Login button");
		waitTime(3000);
		extent.HeaderChildNode("Login through incomplete profile account");
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "indaus24@gmail.com", "Email Field");
		hideKeyboard();
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "123456\n", "Password field");
		hideKeyboard();
		directClickReturnBoolean(PWALoginPage.objLoginBtn, "Login Button");
		waitTime(8000);
		click(PWALoginPage.objNotificationPopUp, "Notification PopUp");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		checkElementExist(PWAHomePage.objSearchField, "Search field");
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie2");
		type(PWAHomePage.objSearchField, keyword + "\n", "Search");
		verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(10000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(6000);
		if ((checkElementDisplayed(CompleteYourProfilePopUp.objCompleteYourProfileTxt,
				"Complete Your Profile") == true)) {
			extent.HeaderChildNode("Verification of complete profile popup in potrait mode");
			logger.info("PopUp is verifed in portrait mode");
			extent.extentLogger("Popup", "PopUp is verifed in portrait mode");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objFullName, "Full name Field");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objDOBField, "DOB Field");
			type(CompleteYourProfilePopUp.objDOBField, "15101997", "DOB Field");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objGenderDropDown, "Gender drop down");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objGenderfemale, "Female option");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objMobileNo, "Mobile Number");
			type(CompleteYourProfilePopUp.objMobileNo, "95839633299", "Mobile Number");
			hideKeyboard();
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objCloseBtn, "Close button in OTP Pop Up");
			click(PWAHomePage.objZeeLogo, "Zee logo");
		} else {
			logger.info("Complete Profile pop up is not displayed");
			extent.extentLogger("Complete Profile pop up", "Complete Profile pop up is not displayed");
		}
		logout();
	}
	
	/**
	 * Validation of Upgrage Popup Functionality for RSVOD user
	 */
	public void rsvodPopup() throws Exception {
		extent.HeaderChildNode("Functionality of Upgarde popup for RSVOD user");
		logout();
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWALoginPage.objLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objEmailField, "Login page");
		extent.HeaderChildNode("Login through RSVOD User");
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "pwate44@mailnesia.com\n", "Email Field");
		hideKeyboard();
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "1234567\n", "Password field");
		hideKeyboard();
		waitTime(5000);
		click(PWALoginPage.objLoginBtn, "Login Button");
		waitTime(10000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovie");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Field");
		waitTime(3000);
		click(PWASearchPage.objSearchResultPremiumContent, "Premium content");
		if (verifyIsElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Popup") == false) {
			logger.info("Sign Up Pop Up is not displayed for premium user");
			extent.extentLogger("Popup", "Sign Up Pop Up is not displayed for premium user");
		}
		waitTime(20000);
		if (verifyIsElementDisplayed(PWASearchPage.objUpgradePopup, "Popup")) {
			extent.HeaderChildNode("Upgrade PopUp Funtionality");
			logger.info("Upgrade popup is displayed for RSVOD user");
			extent.extentLogger("Popup", "Upgrade popup is displayed for RSVOD user");
			extent.HeaderChildNode("Verification of popup in portrait mode");
			logger.info("PopUp is verifed in portrait mode");
			extent.extentLogger("Popup", "PopUp is verifed in portrait mode");
			click(PWASearchPage.objUpgradePopupCloseButton, "Close button");
			logout();
		}
	}

	public void registerPopUpScenarios(String userType) throws Exception {
		switch (userType) {
		case "Guest":
			extent.HeaderChildNode("Mandatory Registration pop up scenarios for Guest user");
			extent.extentLogger("Accessing as Guest User", "Accessing as Guest User");
			logger.info("Accessing as Guest User");
			registerPopUpFunctionality();
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Mandatory Registration pop up scenarios for Non Subscribed user");
			extent.extentLogger("Accessing as NonSubscribedUser User", "Accessing as NonSubscribedUser User");
			logger.info("Accessing as NonSubscribedUser User");
			completeProfilePopup();
			ZeePWALogin("E-mail", userType);
			break;

		case "SubscribedUser":// RSVOD tcs are no more applicable
			/*
			 * extent.
			 * HeaderChildNode("Mandatory Registration pop up scenarios for Subscribed user"
			 * ); extent.extentLogger("Accessing as SubscribedUser User",
			 * "Accessing as SubscribedUser User");
			 * logger.info("Accessing as SubscribedUser User"); rsvodPopup();
			 * ZeePWALogin("E-mail", userType);
			 */
		}
	}

	public By TextToXpath(String text) throws Exception {
		return By.xpath("//div[contains(@class,'trayContentWrap')]//*[contains(text(),'" + text + "')]");
	}

	/**
	 * ==============================SHREENIDHI NETWORK
	 * INTERUPTION==================================
	 */

	/**
	 * Validation of Naviation,playback functionality when data is turned off and on
	 */

	public void networkInterruption(String userType) throws Exception {
		extent.HeaderChildNode("Network Interpution functionality");
		// "adb shell svc data enable"
		// "adb shell svc data disable"
		// "adb shell svc wifi enable"
		// "adb shell svc wifi disable"
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		waitTime(2000);
		Runtime.getRuntime().exec("adb shell svc wifi disable");
		if (userType.equals("Guest")) {
			verifyElementPresentAndClick(PWALoginPage.objLoginBtn, "Login button");
			extent.HeaderChildNode("Validating page loading functionality when data is turned off and on");
			if (verifyIsElementDisplayed(PWALoginPage.objSpinnerInLogin, "Spinner")) {
				logger.info("Login page is not loaded when internet is turned off");
				extent.extentLogger("Login", "Login page is not loaded when internet is turned off");
			}
			Runtime.getRuntime().exec("adb shell svc wifi enable");
			waitTime(5000);
			getDriver().navigate().refresh();
			waitTime(5000);
			if (verifyIsElementDisplayed(PWALoginPage.objEmailField, "Login text")) {
				logger.info("Login page is loaded when interent is turned on");
				extent.extentLogger("Login", "Login page is loaded when interent is turned on");
			}
		} else if (userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("Validating page loading functionality when data is turned off and on");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIcon, "Profile icon");
			if (checkElementExist(PWALoginPage.objSpinnerInLogin, "Spinner")) {
				logger.info("Profile page is not loaded when internet is turned off");
				extent.extentLogger("Profile", "Profile page is not loaded when internet is turned off");
			}
			Runtime.getRuntime().exec("adb shell svc wifi enable");
			waitTime(5000);
			getDriver().navigate().refresh();
			waitTime(5000);
			if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objProfilePageTitleTxt, "Profile text")) {
				logger.info("Profile page is loaded when interent is turned on");
				extent.extentLogger("Profile", "Profile page is loaded when interent is turned on");
			}
		} else if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("Validating page loading functionality when data is turned off and on");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIcon, "Profile icon");
			if (verifyIsElementDisplayed(PWALoginPage.objSpinnerInLogin, "Spinner")) {
				logger.info("Profile page is not loaded when internet is turned off");
				extent.extentLogger("Profile", "Profile page is not loaded when internet is turned off");
			}
			Runtime.getRuntime().exec("adb shell svc wifi enable");
			waitTime(5000);
			getDriver().navigate().refresh();
			waitTime(5000);
			if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objProfilePageTitleTxt, "Profile text")) {
				logger.info("Profile page is loaded when interent is turned on");
				extent.extentLogger("Profile", "Profile page is loaded when interent is turned on");
			}
		}
		Back(1);
		waitTime(4000);
		extent.HeaderChildNode("Validating playback functionality when data is turned off and on");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		verifyIsElementDisplayed(PWAHomePage.objSearchField, "Search field");
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("consumptionsFreeContent");
		type(PWAHomePage.objSearchField, keyword + "\n", "Search");
		verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(10000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(6000);
		if (verifyIsElementDisplayed(PWASearchPage.objCloseRegisterDialog)) {
			click(PWASearchPage.objCloseRegisterDialog, "Close icon in popup");
		}
		waitTime(4000);
		waitForPlayerAdToComplete("Video Player");
		Runtime.getRuntime().exec("adb shell svc wifi disable");
		waitTime(5000);
		if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objPlaybackErrorMessage, "Error message")) {
			logger.info("Something went wrong error message is displayed when internet is turned off");
			extent.extentLogger("Error", "Something went wrong error message is displayed when internet is turned off");
		}
		Runtime.getRuntime().exec("adb shell svc wifi enable");
		waitTime(10000);
		waitForPlayerAdToComplete("Video Plyaer");
		waitTime(5000);
		playerTap();
		if (verifyIsElementDisplayed(PWAPlayerPage.forward10SecBtn, "Player control")) {
			logger.info("Playback is continued when internet is turned on");
			extent.extentLogger("Playback", "Playback is continued when internet is turned on");
		}
		extent.HeaderChildNode("Validating playback functionality when user switch the app");
		logger.info("Switching app from ZEE5PWA to mobile home screen");
		extent.extentLogger("App", "Switching app from ZEE5PWA to mobile home screen");
		playerTap();
		getDriver().runAppInBackground(Duration.ofSeconds(7));
		logger.info("Switching app from mobile home screen to ZEE5PWA");
		extent.extentLogger("App", "Switching app from mobile home screen to ZEE5PWA");
		String Duration1 = getText(PWAPlayerPage.objcurrenttime);
		waitTime(10000);
		playerTap();
		String Duration2 = getText(PWAPlayerPage.objcurrenttime);
		if (!Duration1.equals(Duration2)) {
			logger.info("Playback is continued when user comes out of zee5 and navigate back to zee5 after some time");
			extent.extentLogger("Zee5",
					"Playback is continued when user comes out of zee5 and navigate back to zee5 after some time");
		}
		click(PWAHomePage.objZeeLogo, "zee logo");
		waitTime(5000);
		extent.HeaderChildNode("Verification of navigation in offline mode");
		if (verifyIsElementDisplayed(PWAHomePage.objCarousel, "Carousel")) {
			logger.info("Carosusel contents are displayed in home page");
			extent.extentLogger("Naviagtion", "Carosusel contents are displayed in home page");
		}
		click(PWAHomePage.objTabName("Shows"), "Shows page");
		waitTime(3000);
		if (verifyIsElementDisplayed(PWAHomePage.objPageHighlighted("Shows"), "Shows page")) {
			logger.info("User is navigated to shows page");
			extent.extentLogger("Naviagtion", "User is navigated to shows page");
		}
		Runtime.getRuntime().exec("adb shell svc wifi disable");
		waitTime(3000);
		click(PWAHomePage.objTabName("Home"), "Home page");
		waitTime(3000);
		if (verifyIsElementDisplayed(PWAHomePage.objCarousel, "carousel")) {
			logger.info("Pre loaded content are verified in offline navigation");
			extentLogger("Preloaded", "Pre loaded content are verified in offline navigation");
		} else {
			logger.info("Pre loaded content are not verified in offline navigation");
			extentLogger("Preloaded", "Pre loaded content are not verified in offline navigation");
		}
		Runtime.getRuntime().exec("adb shell svc wifi enable");
		waitTime(3000);
		click(PWAHomePage.objZeeLogo, "zee logo");
	}

	public void networkInterruptionScenarios(String userType) throws Exception {
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		switch (userType) {
		case "Guest":
			extent.HeaderChildNode("Validation of Network Interruption flow for Guest user");
			networkInterruption(userType);
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("Validation of Network Interruption flow for Non Subscribed user");
			networkInterruption(userType);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Validation of Network Interruption flow for Subscribed user");
			networkInterruption(userType);
		}
	}

	@SuppressWarnings("unused")
	public boolean waitForPlayerAdToComplete(String playerType) throws Exception {
		boolean adDisplayed = false;
		boolean playerDisplayed = false;
		int confirmCount = 0;
		waitTime(5000);
		main: for (int trial = 0; trial < 200; trial++) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objAd)) {
				adDisplayed = true;
				if (trial == 5) {
					logger.info("Ad play in progress");
					extent.extentLogger("AdPlayInProgress", "Ad play in progress");
				}
				if (Math.floorMod(trial, 40) == 0)
					System.out.println("Ad play in progress");
				Thread.sleep(1000);
			} else {
				try {
					getDriver().findElement(PWAPlayerPage.objPlayerSettings);
					playerDisplayed = true;
					Thread.sleep(1000);
					confirmCount++;
					// System.out.println(confirmCount);
					if (confirmCount == 2) {
						if (adDisplayed == false) {
							logger.info("Ad did not play");
							extent.extentLogger("AdDidNotPlay", "Ad did not play");
							return false;
						} else {
							logger.info("Ad play complete");
							extent.extentLogger("AdPlayComplete", "Ad play complete");
							return true;
						}
					}
				} catch (Exception e1) {
					waitTime(2000);
				}
			}
		}
		if (playerDisplayed == false && adDisplayed == false) {
			logger.info("Ad play failure");
			extent.extentLogger("failedAd", "Ad play failure");
		}
		return false;
	}

	/**
	 * ====================SATISH - SUBSCRIPTION POPUP
	 * SCENARIOS==========================
	 */

	/**
	 * Search For Content And Click On First Result
	 */
	public void zeeSearchForContentAndClickOnFirstResult(String contentName) throws Exception {
		waitTime(3000);
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		type(PWASearchPage.objSearchEditBox, contentName + "\n", "Search bar");
		hideKeyboard();
		waitForElementDisplayed(PWASearchPage.objFirstSearchedAssetTitle, 20);
		waitTime(3000);
		String FirstSearchedAssetTitle = findElement(PWASearchPage.objFirstSearchedAssetTitle).getText();
		System.out.println("First Asset Title of the Search Result is: " + FirstSearchedAssetTitle);
		click(PWASearchPage.objFirstSearchedAssetTitle, "First Searched Asset Title");
	}

	/**
	 * Verify Subscription popup after trailer is played for 20 seconds
	 */
	public void zeePWAVerifySubscriptionPopupAfterTrailerPlaybackIsComplete(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			HeaderChildNode(
					"Verify Subscription Popup After Completion Of Trailer Playback Is Complete for non-logged in User");
			System.out.println(
					"Verify Subscription Popup After Completion Of Trailer Playback Is Complete for non-logged in User");
			click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieWithTrailer");
			zeeSearchForContentAndClickOnFirstResult(keyword);

			// waitForElement(PWASubscriptionPages.objSubscribePopupTitle, 30, "Subscribe
			// Pop up Title");

			waitExplicitlyForElementPresence(PWAPlayerPage.objGetPremiumInline, 30, "Get Premium IN Line");

			// if (verifyElementPresent(PWASubscriptionPages.objSubscribePopupTitle,
			// "Subscribe Pop up Title"))

			if (verifyElementPresent(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line")) {
				click(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line");

				// click(PWASubscriptionPages.objPopupCloseButton, "Popup Close Button");

				verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Unlock ZEE5Subscription page");

				waitTime(2000);
				click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
			}
		}
	}

	/**
	 * Navigate to Subscription Flow From Subscription Popup full screen player
	 */
	public void zeePWAVerifyNavigationToSubscriptionFlowFromSubscriptionPopupFullscreenPlayer(String userType)
			throws Exception {
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			HeaderChildNode("Navigate to Subscription Flow From Subscription Popup in full screen player");
			System.out.println("Navigate to Subscription Flow From Subscription Popup in full screen player");
			reloadHome();
			// handle mandatory pop upPhoneNumber Field
			mandatoryRegistrationPopUp(userType);
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieWithTrailer2");
			zeeSearchForContentAndClickOnFirstResult(keyword);
			// waitTime(10000);
			// waitForPlayerAdToComplete();
			pausePlayer();
			verifyElementPresentAndClick(PWAPlayerPage.maximizeBtn, "Maximize window icon");
			waitTime(4000);
			verifyElementPresent(PWAPlayerPage.minimizeBtn, "Minimize window icon");
			verifyElementPresentAndClick(PWAPlayerPage.playBtn, "Play button");
			for (int trial = 0; trial < 3; trial++) {

				// waitExplicitlyForElementPresence(PWASubscriptionPages.objSubscribePopupTitle,
				// 60,
				// "Subscribe Pop up Title");

				waitExplicitlyForElementPresence(PWAPlayerPage.objGetPremiumInline, 60, "Get Premium IN Line");
			}

			// if (verifyElementPresent(PWASubscriptionPages.objSubscribePopupTitle,
			// "Subscribe Pop up Title"))
			if (verifyElementPresent(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line")) {
				click(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line");

				verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");

				// verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default
				// Selected Package");
				// verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "Popup
				// Proceed button");
				// waitForElement(PWASubscriptionPages.objAccountInfoHighlighted, 10, "Account
				// Info Section");

			}
			// verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	/**
	 * The method will wait for the element to be located for a maximum of given
	 * seconds. The method terminates immediately once the element is located. The
	 * method throws error if the element could not be located within the given
	 * seconds
	 */
	public boolean waitForElement(By locator, int seconds, String message) throws InterruptedException {
		for (int time = 0; time <= seconds; time++) {
			try {
				getDriver().findElement(locator);
				logger.info("Located element " + message);
				extent.extentLogger("locatedElement", "Located element " + message);
				return true;
			} catch (Exception e) {
				Thread.sleep(1000);
				if (time == seconds) {
					logger.error("Failed to locate element " + message);
					extent.extentLoggerFail("failedLocateElement", "Failed to locate element " + message);
				}
			}
		}
		return false;
	}

	/**
	 * ==========================SHREENIDHI
	 * ONBOARDING====================================
	 */

	/*
	 * Validation of SignUp screen using Phone number
	 */
	/*
	 * Validation of SignUp screen using Phone number
	 */
	public void phoneNumberRegistration() throws Exception {
		extent.HeaderChildNode("Phone Number Registration");
		click(PWALoginPage.objSignUpBtn, "Sign up button");
		waitTime(4000);
		// checkElementDisplayed(PWALoginPage.objEmailField, "Email/PhoneNo Field");

		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email/PhoneNo Field");

		waitTime(2000);

		type(PWALoginPage.objEmailField, "789221521\n", "PhoneNumber Field");
		hideKeyboard();
		waitTime(3000);
		String PhoneNumberField = getText(PWALoginPage.objEmailField);
		if (PhoneNumberField != null) {
			logger.info("User is allowed to enter PhoneNumber");
			extentLogger("PhoneNumber", "User is allowed to enter PhoneNumber in PhoneNumber Field");
		}
		if (checkElementDisplayed(PWALoginPage.objIncorrectPhoneNumberMessage, "PhoneNumber Error Message") == false) {
			logger.info("When User Enter Invalid PhoneNumber Error Message is displayed");
			extent.extentLogger("Error Message", "When User Enter Invalid PhoneNumber Error Message is displayed");
		}
		if (checkElementDisplayed(PWALoginPage.objIncorrectPhoneNumberMessage, "PhoneNumber Error Message") == false) {
			logger.info("User is allowed to enter valid PhoneNumber");
			extent.extentLogger("PhoneNumber", "User is allowed to enter valid PhoneNumber");
		}

		checkElementExist(PWALoginPage.objCountryCode, "Country code field");
		click(PWALoginPage.objCountryCode, "Country code field");
		checkElementExist(PWALoginPage.objCountryCodeDropDown, "Drop down of country code");
		click(PWALoginPage.objCountryCodeAlgeria, "Algeria country code");
		click(PWALoginPage.objCountryCode, "Country code field");
		click(PWALoginPage.objCountryCodeAndoora, "Andoora country code");
		click(PWALoginPage.objCountryCode, "Country code field");
		click(PWALoginPage.objCountryCodeIndia, "India country code");

		if (getDriver().findElement(PWASignupPage.objSendOTPButtonDisabled).isDisplayed()) {
			logger.info("Send OTP button is disabled because incorrect mobile number is entered");
			extent.extentLogger("", "Send OTP button is disabled because incorrect mobile number is entered");
		} else {
			logger.error("Send OTP button is enabled even though incorrect mobile number is entered");
			extent.extentLoggerFail("", "Send OTP button is enabled even though incorrect mobile number is entered");
		}

		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email/PhoneNo Field");
		waitTime(2000);
		type(PWALoginPage.objEmailField, "4", "PhoneNumber Field");
		hideKeyboard();
		waitTime(5000);
		JSClick(PWASignupPage.objSendOTPButtonEnabled, "Send OTP Button");
		waitTime(7000);
		verifyElementPresentAndClick(PWASignupPage.objChangeNumberLink, "Change Number Option");
		waitTime(4000);
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email/PhoneNo Field");
		waitTime(2000);
		type(PWALoginPage.objEmailField, "7892215214", "PhoneNumber Field");
		hideKeyboard();
		waitTime(5000);
		JSClick(PWASignupPage.objSendOTPButtonEnabled, "Send OTP Button");
		waitTime(2000);
		hideKeyboard();
		checkElementDisplayed(PWASignupPage.objOTPTimer, "OTP timer");
		String OtpTimer1 = getText(PWASignupPage.objOTPTimer);
		waitTime(6000);
		String OtpTimer2 = getText(PWASignupPage.objOTPTimer);
		boolean Time = OtpTimer1.equals(OtpTimer2);
		if (Time == false) {
			logger.info("The Otp timer is in reverse order");
			extentLogger("OtpTimer", "The Otp timer is in reverse order");
		}
		if (getDriver().findElement(PWASignupPage.objResendOtpOption).isEnabled() == false) {
			logger.info("ResendOtp option is not active");
			extent.extentLogger("ResendOtp", "ResendOtp option is not active");
			waitTime(60000);
		}
		if (getDriver().findElement(PWASignupPage.objResendOtpOption).isEnabled() == true) {
			logger.info("ResendOtp option is active after 60seconds");
			extent.extentLogger("ResendOtp", "ResendOtp option is active after 60seconds");
		}

		type(PWASignupPage.objOTP1, "a", "OTP box1");
		type(PWASignupPage.objOTP2, "b", "OTP box2");
		type(PWASignupPage.objOTP3, "c", "OTP box3");
		type(PWASignupPage.objOTP4, "d\n", "OTP box4");
		hideKeyboard();
		waitTime(2000);
		if (getDriver().findElement(PWASignupPage.objVerifyButtonDisabled).isDisplayed()) {
			logger.info("Verify Button is disabled because non numeric value in otp section is entered");
			extent.extentLogger("Verify",
					"Verify Button is disabled because non numeric value in otp section is entered");
		} else {
			logger.error("Verify Button is enabled even though non numeric value in otp section is entered");
			extent.extentLoggerFail("Verify",
					"Verify Button is enabled eventhough non numeric value in otp section is entered");
		}
		type(PWASignupPage.objOTP1, "1", "OTP box1");
		type(PWASignupPage.objOTP2, "2", "OTP box2");
		type(PWASignupPage.objOTP3, "3", "OTP box3");
		type(PWASignupPage.objOTP4, "4\n", "OTP box4");
		hideKeyboard();
		waitTime(3000);

		if (getDriver().findElement(PWASignupPage.objVerifyButtonEnabled).isDisplayed()) {
			logger.info("Verify Button is highlighted");
			extent.extentLogger("Verify", "Verify Button is highlighted");
			click(PWASignupPage.objVerifyButtonEnabled, "Verify Button");
			try {
				Boolean ExpiredToastMessage = getDriver().findElement(By.xpath("//*[@class='toastMessage']"))
						.isDisplayed();
				if (ExpiredToastMessage == true) {
					extent.extentLogger("Toast", "Expired Toast message displayed");
					logger.info("Expired Toast message displayed");
				}
			} catch (Exception e) {
				System.out.println("Toast message is not displayed");
			}
		}
		reloadHome();
	}

//------------------------------------------------------------------------------------------------------------------------	
	/**
	 * Validation of SignUp screen using Email-id
	 */
	public void emailRegistration() throws Exception {
		extent.HeaderChildNode("Email-Registration");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		click(PWALoginPage.objSignUpBtn, "Sign up button");
		waitTime(4000);
		verifyIsElementDisplayed(PWALoginPage.objSignUpHeaderInSignUpPage, "SignUp Page");
		verifyIsElementDisplayed(PWALoginPage.objEmailField, "Email/PhoneNo Field");

		if (verifyIsElementDisplayed(PWALoginPage.objPasswordField, "Password field") == false) {
			logger.info("Password field is not displayed when email field is empty");
			extent.extentLogger("Password Field", "Password field is not displayed when email field is empty");
		}

		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email/PhoneNo Field");
		waitTime(2000);

		type(PWALoginPage.objEmailField, "zee5latest@gmail.com", "Email field");
		hideKeyboard();
		if (verifyIsElementDisplayed(PWALoginPage.objPasswordField, "Password field") == true) {
			logger.info("Password field is displayed when user enter email-id");
			extent.extentLogger("Password Field", "Password field is displayed when user enter email-id");
		}

		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password field");
		waitTime(2000);

		type(PWALoginPage.objPasswordField, "abc", "password field");
		click(PWALoginPage.objShowPasswordButton, "Show Password icon");
		hideKeyboard();
		click(PWASignupPage.objSignUpButtonNotHighlighted, "SignUp Button");
		verifyIsElementDisplayed(PWASignupPage.objPasswordErrorMessage, "Password error message");
		try {
			getDriver().findElement(PWALoginPage.objPasswordFieldFilled).clear();
			System.out.println("Cleared password field");
		} catch (Exception e) {
		}
		waitTime(5000);

		verifyElementPresentAndClick(PWALoginPage.objPasswordFieldFilled, "Password field");
		waitTime(1000);

		type(PWALoginPage.objPasswordFieldFilled, "user@123", "password field");
		hideKeyboard();
		if (verifyIsElementDisplayed(PWASignupPage.objPasswordHiddenField, "Password field")) {
			logger.info("Password field is hidden before tapping on password icon");
			extentLogger("Password", "Password field is hidden before tapping on password icon");
		}
		click(PWASignupPage.objPasswordIcon, "Show Password icon");
		if (verifyIsElementDisplayed(PWASignupPage.objPasswordFieldShow, "Password")) {
			logger.info("Password field is shown when user taps on password icon");
			extent.extentLogger("Password", "Password field is shown when user taps on password icon");
		}
		click(PWASignupPage.objPasswordIcon, "Show Password icon");

		calenderFunctionality();
		String SelectedDate = getText(PWALoginPage.objDateOfBirthField);
		if (SelectedDate != null) {
			logger.info("Value in date of field is entered correctly");
			extent.extentLogger("DateOfField", "Value in date of field is entered correctly");
		}

		if (getDriver().findElement(PWASignupPage.objSignUpButtonNotHighlighted).isEnabled() == false) {
			logger.info("SignUp button is not highlighted");
			extent.extentLogger("Continue button", "SignUp button is not highlighted");
		}
		click(PWASignupPage.objGenderMaleBtn, "Gender Option");

		if (getDriver().findElement(PWASignupPage.objSignUpButtonHighlighted).isEnabled()) {
			logger.info("SignUp button is highlighted");
			extent.extentLogger("Continue button", "SignUp button is highlighted");
		}
		Back(1);
	}

	// -----------------------------------------------------------------
	/**
	 * Validation of Forgot password screen using Email-id
	 */
	public void forgotPasswordEmailSanity() throws Exception {
		extent.HeaderChildNode("Verifications in Forgot Password for email id");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWALoginPage.objLoginBtn, "Login button");
		verifyIsElementDisplayed(PWALoginPage.objGoogleIcon, "Google icon");
		verifyIsElementDisplayed(PWALoginPage.objFacebookIcon, "Facebook icon");
		verifyIsElementDisplayed(PWALoginPage.objTwitterIcon, "Twitter icon");
		verifyElementPresentAndClick(PWALoginPage.objForgotPasswordTxt, "Forgot password");
		Back(1);
		waitTime(5000);
		if (verifyIsElementDisplayed(PWALoginPage.objEmailField, "Login")) {
			logger.info("User is redirected to login page");
			extent.extentLogger("Login", "User is redirected to login page");
		}
		verifyElementPresentAndClick(PWALoginPage.objForgotPasswordTxt, "Forgot password");
		waitTime(2000);
		// verifyIsElementDisplayed(PWALoginPage.objEmailField, "Email field");

		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		waitTime(2000);

		type(PWALoginPage.objEmailField, "s\n", "Email field");
		hideKeyboard();
		if (getDriver().findElement(PWASignupPage.objPasswordResetLinkDisabled).isDisplayed()) {
			logger.info("Password Reset Link is not enabled when user enters invalid email id");
			extent.extentLogger("Continue button",
					"Password Reset Link is not enabled when user enters invalid email id");
		} else {
			logger.error("Password Reset Link is enabled eventhough when user enters invalid email id");
			extent.extentLoggerFail("Continue button",
					"Password Reset Link is enabled even though user enters invalid email id");
		}
		getDriver().findElement(PWALoginPage.objEmailField).clear();
		waitTime(4000);

		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		waitTime(2000);

		type(PWALoginPage.objEmailField, "hreenidhi080@gmail.com", "Email field");
		hideKeyboard();
		if (checkElementDisplayed(PWALoginPage.objForgotPasswordMessage, "Message")) {
			logger.info("Supporting description is displayed");
			extent.extentLogger("Forgot password", "Supporting description is displayed");
		}
		if (getDriver().findElement(PWASignupPage.objPasswordResetLinkEnabled).isDisplayed()) {
			logger.info("Password Reset Link is enabled when user enters valid email id");
			extent.extentLogger("Continue button", "Password Reset Link is enabled when user enters valid email id");
		}
		click(PWASignupPage.objPasswordResetLinkEnabled, "Continue button");
		try {
			Boolean ExpiredToastMessage = getDriver().findElement(By.xpath("//*[@class='toastMessage']")).isDisplayed();
			if (ExpiredToastMessage == true) {
				extent.extentLogger("Toast", "No user found Toast message displayed");
				logger.info("No user found Toast message displayed");
			}
		} catch (Exception e) {
			System.out.println("Toast message is not displayed");
		}
		Back(2);
	}

	// ----------------------------------------------------------------------------------------------------
	/**
	 * Validation of Forgot password screen using Phone number
	 */
	public void forgotPasswordMobileNumberSanity() throws Exception {
		extent.HeaderChildNode("Verifications in Forgot Password for Mobile Number");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWALoginPage.objLoginBtn, "Login button");
		verifyElementPresentAndClick(PWALoginPage.objForgotPasswordTxt, "Forgot password");
		waitTime(2000);

		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		waitTime(1000);

		type(PWALoginPage.objEmailField, "789221\n", "Email field");
		hideKeyboard();
		if (getDriver().findElement(PWASignupPage.objForgotPasswordContinueDisabled).isDisplayed()) {
			logger.info("Continue button is not enabled when user enters invalid mobile number");
			extent.extentLogger("Continue button",
					"Continue button is not enabled when user enters invalid mobile number");
		} else {
			logger.error("Continue button  is enabled eventhough when user enters invalid mobile number");
			extent.extentLoggerFail("Continue button",
					"Continue button is enabled even though user enters invalid mobile number");
		}
		getDriver().findElement(PWALoginPage.objEmailField).clear();

		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		waitTime(2000);

		type(PWALoginPage.objEmailField, "5214", "Email field");
		hideKeyboard();
		if (checkElementDisplayed(PWALoginPage.objForgotPasswordMessage, "Message")) {
			logger.info("Supporting description is displayed");
			extent.extentLogger("Forgot password", "Supporting description is displayed");
		}
		click(PWASignupPage.objForgotPasswordContinueEnabled, "Continue button");
		waitTime(3000);
		// checkElementDisplayed(PWALoginPage.objNewPasswordField, "New password page");

		verifyElementPresentAndClick(PWALoginPage.objNewPasswordField, "New password page");
		waitTime(2000);

		type(PWALoginPage.objNewPasswordField, "User@123\n", "Password field");
		hideKeyboard();

		verifyElementPresentAndClick(PWALoginPage.objConfirmNewPasswordField, "Confirm Password field");
		waitTime(2000);

		type(PWALoginPage.objConfirmNewPasswordField, "User@123\n", "Confirm Password field");
		hideKeyboard();
		click(PWALoginPage.objForgotPasswordLinkButton, "Continue button");
		if (checkElementDisplayed(PWALoginPage.objOTPVerifyPage, "OTP verification page")) {
			logger.info("User is redirected to verify otp page");
			extent.extentLogger("OTP", "User is redirected to verify otp page");
		}
		Back(4);
	}


	/**
	 * Login through Gmail
	 */
	public void gmailLogin() throws Exception {
		extent.HeaderChildNode("Login through Gmail");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWALoginPage.objLoginBtn, "Login button");
		System.out.println(getDriver().getCurrentUrl());
		System.out.println(getDriver().getWindowHandles());
		verifyIsElementDisplayed(PWALoginPage.objGoogleIcon, "Google Icon");
		Actions act = new Actions(getDriver());
		act.click(getDriver().findElement(By.id("gbtn"))).build().perform();
		waitTime(1000);
		act.click(getDriver().findElement(By.id("gbtn"))).build().perform();
		waitTime(3000);
		System.out.println(getDriver().getWindowHandles());
		getDriver().switchTo().window("CDwindow-2");
		waitTime(4000);
		if (verifyIsElementDisplayed(PWALoginPage.objGmailEmailField, " Email Field")) {
			type(PWALoginPage.objGmailEmailField, "newzee5igs@gmail.com", "Emial Field");
			hideKeyboard();
			verifyElementPresentAndClick(PWALoginPage.objGmailNextButton, "clicked on next button");
			waitTime(3000);

			verifyElementPresentAndClick(PWALoginPage.objGmailPasswordField, " Password Field");
			waitTime(2000);

			type(PWALoginPage.objGmailPasswordField, "User@123\n", "Password Field");
			hideKeyboard();
			verifyElementPresentAndClick(PWALoginPage.objGmailNextButton, "clicked on next button");
			waitTime(7000);
			getDriver().switchTo().window("CDwindow-0");
			String url = getDriver().getCurrentUrl();
			System.out.println(url);
			if (url.contains("https://accounts.google.com")) {
				getDriver().switchTo().window("CDwindow-0");
				logger.info("Google verification page displayed");
				extent.extentLogger("Otp", "Google verification page displayed");
				Back(1);
			} else {
				getDriver().switchTo().window("CDwindow-0");
				waitTime(2000);
				if (verifyIsElementDisplayed(PWALoginPage.objLoginTxt, "Login text")) {
					logger.info("Google verification page displayed");
					extent.extentLogger("Login", "Google verification page displayed");
					Back(1);
					verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIcon, "Profile icon")) {
						logger.info("User Logged in Successfully");
						extent.extentLogger("Logged in", "User Logged in Successfully");
						click(PWAHamburgerMenuPage.objCloseHamburgerMenu, "Close button");
						logout();
					}
				} else {
					verifyElementPresent(PWAHomePage.objZeeLogo, "Zee logo");
					verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIcon, "Profile icon")) {
						logger.info("User Logged in Successfully");
						extent.extentLogger("Logged in", "User Logged in Successfully");
						click(PWAHamburgerMenuPage.objCloseHamburgerMenu, "Close button");
						logout();
					}

				}
			}
		}
	}

	/**
	 * Login through Twitter
	 */
	public void twitterLogin() throws Exception {
		extent.HeaderChildNode("Login through Twitter");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWALoginPage.objLoginBtn, "Login button");
		waitTime(5000);
		verifyElementPresentAndClick(PWALoginPage.objTwitterIcon, "Twitter icon");
		waitTime(7000);
		System.out.println(getDriver().getWindowHandles());
		System.out.println(getDriver().getCurrentUrl());
		getDriver().switchTo().window("CDwindow-3");

		waitTime(5000);
		System.out.println(getDriver().getCurrentUrl());

		if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
			verifyElementPresent(PWAHamburgerMenuPage.objProfilePageIcon, "Profile icon");
			logger.info("User Logged in Successfully");
			extent.extentLogger("Logged in", "User Logged in Successfully");
		}

		else if (verifyIsElementDisplayed(PWALoginPage.objTwitterEmaildField, "Twitter Email field")) {

			verifyElementPresentAndClick(PWALoginPage.objTwitterEmaildField, "Email Field");
			waitTime(2000);

			type(PWALoginPage.objTwitterEmaildField, "Zee5latest@gmail.com", "Email Field");
			hideKeyboard();
			verifyElementPresentAndClick(PWALoginPage.objTwitterPasswordField, "Twitter Password field");
			type(PWALoginPage.objTwitterPasswordField, "User@123\n", "Password field");
			click(PWALoginPage.objTwitterSignInButton, "Sign in button");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
			click(PWAHamburgerMenuPage.objLoginBtn, "Login");
			verifyElementPresentAndClick(PWALoginPage.objTwitterIcon, "Twitter icon");
			waitTime(8000);
		}

		if (verifyIsElementDisplayed(PWALoginPage.objTwitterAuthorizeButton, "Authorize")) {
			click(PWALoginPage.objTwitterAuthorizeButton, "Authorize");
			waitTime(7000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
			if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIcon, "Profile icon")) {
				logger.info("User Logged in Successfully");
				extent.extentLogger("Logged in", "User Logged in Successfully");
			}
		} else {
			waitTime(8000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIcon, "Profile icon")) {
				logger.info("User Logged in Successfully");
				extent.extentLogger("Logged in", "User Logged in Successfully");
				click(PWAHamburgerMenuPage.objCloseHamburgerMenu, "Close button");

			}
		}
		System.out.println(getDriver().getCurrentUrl());
		logout();
	}

	/*
	 * Validation of Calender and selecting DOB
	 */
	public void calenderFunctionality() throws Exception {
		extent.HeaderChildNode("Calender Functionality");
		if (verifyIsElementDisplayed(PWASignupPage.objYearPickerTab, "Year")) {
			click(PWASignupPage.objDayPickerTab, "Day picker");
			click(PWASignupPage.objDayPickerTabValue, "Day picker value");
			click(PWASignupPage.objMonthPickerTab, "Month Picker");
			click(PWASignupPage.objMonthPickerTabValue, "Month Picker value");
			click(PWASignupPage.objYearPickerTab, "Year Picker");
			if (verifyIsElementDisplayed(PWASignupPage.objYearPickerTabValueNotActive, "Further year") == false) {
				logger.info("User is not allowed to select future date/year in calender tab");
				extent.extentLogger("Calender", "User is not allowed to select future date/year in calender tab");
			}
			click(PWASignupPage.objYearPickerTabValue, "Year Picker value");
		} else {
			click(PWALoginPage.objDateOfBirthField, "Date Of Birth Field");
			verifyIsElementDisplayed(PWALoginPage.objCalenderPopUp, "Calender PopUp");
			click(PWALoginPage.objSelectDateInCalender, "Date in Calender");
		}
	}

	/** ===================BINDU ZEE%ORIGINALS ============================ */

	public void Zee5LandingPage() throws Exception {
		extent.HeaderChildNode("Validating user navigated to Zee5Originals landing page");
		waitTime(3000);
		navigateToAnyScreen("ZEE5 Originals");
		waitTime(3000);
		if (verifyElementPresent(PWAZee5OriginalPage.objHighlightedTab("ZEE5 Originals"), "Zee5 Originals")) {
			logger.info("Zee5 Originals is Heighlighted, User is navigated to Zee5 Originals Tab");
			extent.extentLogger("Zee5 Originals landing Page",
					"Zee5 Originals is Heighlighted, User is navigated to Zee5 Originals Tab");

		}
	}

	// ** Validating the trays present in the Zee5 landing Page **//

	public void zee5originalstrayvalidation() throws Exception {
		extent.HeaderChildNode("Verifing the trays displayed in zee5originals Tab");
		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);

		Response resp = ResponseInstance.getResponseForPages("zeeoriginals", languageSmallText);

		List<String> apiTitleList = new LinkedList<String>();

		List<String> apitotaltrays = resp.jsonPath().getList("buckets");
		System.out.println(apitotaltrays.size());
		for (int i = 1; i < apitotaltrays.size(); i++) {
			String traytitle = resp.jsonPath().getString("buckets[" + i + "].title");
			apiTitleList.add(traytitle);
		}

		System.out.println("api: " + apiTitleList);

		List<String> uiTitleList = new LinkedList<String>();

		List<WebElement> uitotaltrays = findElements(By.xpath("//div[@class='trayHeader']"));
		System.out.println(uitotaltrays.size());

		for (int j = 0; j < uitotaltrays.size() - 1; j++) {
			String trayTitle = findElement(By.xpath("(//div[@class='trayHeader'])[" + (j + 1) + "]")).getText();
			uiTitleList.add(trayTitle);
			PartialSwipe("UP", 1);

			if (apiTitleList.get(j).equalsIgnoreCase(uiTitleList.get(j))) {
				logger.info("API title: " + apiTitleList.get(j) + " is verified with UI title: " + uiTitleList.get(j));
				extent.extentLogger("Tray validation",
						"API title: " + apiTitleList.get(j) + " is verified with UI title: " + uiTitleList.get(j));

			}
		}
		System.out.println("UI: " + uiTitleList);
	}

	public String allSelectedLanguages() throws Exception {
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language button");
		waitTime(2000);
		waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2, "Content languages");
		waitTime(2000);
		List<WebElement> allSelectedLanguages = getDriver().findElements(PWAHamburgerMenuPage.objSelectedLanguages);
		String langtext = "";
		for (int i = 0; i < allSelectedLanguages.size(); i++) {
			// System.out.println(i);
			langtext = allSelectedLanguages.get(i).getAttribute("for").replace("content_", "") + "," + langtext;
			// System.out.println(langtext.replaceAll(",$",""));
		}
		String finalLangString = langtext.replaceAll(",$", "");
		waitForElementAndClick(PWAHamburgerMenuPage.objCancelBtnOnLangPp, 2, "cancel language Popup");
		return finalLangString;
	}

	// ** Navigating to top of screen by tapping down bottom arrow without scrolling
	// **//

	public void VerifyTrayScrollingToTheTop() throws Exception {
		extent.HeaderChildNode("Validating tray scrolling to the top of the page");
		Swipe("UP", 1);
		Swipe("UP", 1);
		Swipe("UP", 1);
		waitForElementDisplayed(PWAZee5OriginalPage.objNavigateToTop, 3);
		click(PWAZee5OriginalPage.objNavigateToTop, "Back to Top Arrow");
		waitForElementDisplayed(PWAZee5OriginalPage.objTrayTitle, 5);
		if (verifyIsElementDisplayed(PWAZee5OriginalPage.objTrayTitle, "First Tray")) {
			logger.info("On tapping of 'Right side bottom arrow' user is navigated to top of screen without scrolling");
			extent.extentLogger("Right side bottom arrow",
					"On tapping of 'Right side bottom arrow' user is navigated to top of screen without scrolling");
		}
	}

	// ** Validating to watch promo of the prremium content **//
	public void ValidatingPremiumTag() throws Exception {
		extent.HeaderChildNode("Validating Premium Tag on the Premium Content card");
		waitTime(3000);
		if (verifyIsElementDisplayed(PWAZee5OriginalPage.objPremiumCard, "Premium Card"))
		// waitTime(5000);
		{
			verifyElementPresent(PWAZee5OriginalPage.objPremiumTag, "Premium Tag of Premium card");
			waitTime(3000);
			click(PWAZee5OriginalPage.objPremiumCard, "Premium card");
			waitTime(5000);
			if (verifyIsElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Sign Up Pop Up")) {
				waitTime(3000);
				click(PWAPlayerPage.objCloseRegisterDialog, "Sign Up Pop Up close icon");
			}

			waitTime(2000);
			if (verifyIsElementDisplayed(PWAPlayerPage.objPromo, "Watch Promo icon")) {
				click(PWAPlayerPage.objPromo, "Watch Promo icon");
				verifyIsElementDisplayed(PWAPlayerPage.objPlayerPromoMetadata, "Promo Content");
				logger.info("User can able to watch Promo from the selected content");
				extent.extentLogger("Popup Screen", "User can able to watch Promo from the selected content");
				Back(1);
			}
			Back(1);
		}
	}

	// ** Validate Subscription popup is displayed after some interval of time **//

	public void Subscriptionpopup(String tab) throws Exception {
		String user = getParameterFromXML("userType");
		// handle mandatory pop up
		extent.HeaderChildNode("Validating the Subscribe CTA with Club Icon");
		mandatoryRegistrationPopUp(user);
		// navigateToAnyScreen(tab);
		waitTime(4000);
		if (tab.equalsIgnoreCase("club")) {
			if (verifyIsElementDisplayed(PWAZee5OriginalPage.objClubCard, "Club Card")) {
				click(PWAZee5OriginalPage.objClubCard, "Club Card");
			}
		} else {
			if (verifyIsElementDisplayed(PWAZee5OriginalPage.objPremiumCard, "Premium Card")) {
				click(PWAZee5OriginalPage.objPremiumCard, "Premium Card");
			}
		}
		if (verifyIsElementDisplayed(PWAShowsPage.objShowsTitle, "Shows Details page")) {// Show details
			click(PWALandingPages.objTrayClubOrPremiumCardInShowDetails, "Premium/Club card");
		}
		if (verifyIsElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
			if (tab.equalsIgnoreCase("club")) {
				if (!user.equals("SubscribedUser")) {
					verifyElementPresent(PWAPlayerPage.objSubscribeCTAWithClubIcon,
							"Subscribe CTA with Club Icon for Guest/Non Subscribed user");
				} else {
					if (verifyIsElementDisplayed(PWAPlayerPage.objSubscribeCTAWithClubIcon,
							"Subscribe CTA with Club Icon for Subscribed User")) {
						logger.error("Subscribe CTA with Club Icon should not be displayed for Subscribed user");
						extent.extentLoggerFail("",
								"Subscribe CTA with Club Icon should not be displayed for Subscribed user");
					}
				}
			} else {
				if (!user.equals("SubscribedUser")) {
					verifyElementPresent(PWAPlayerPage.objGetPremium,
							"Subscribe CTA with Premium Icon for Guest/Non Subscribed user");
				} else {
					if (verifyIsElementDisplayed(PWAPlayerPage.objGetPremium,
							"Subscribe CTA with Premium Icon for Subscribed User")) {
						logger.error("Subscribe CTA with Premium Icon should not be displayed for Subscribed user");
						extent.extentLoggerFail("",
								"Subscribe CTA with Premium Icon should not be displayed for Subscribed user");
					}
				}
			}
			extent.HeaderChildNode("Validating the Subscription Popup");
			if (!user.equals("SubscribedUser")) {
				// waitExplicitlyForElementPresence(PWASubscriptionPages.objSubscribePopupTitle,
				// 60, "Subscribe Pop Up");
				waitTime(10000);
				if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
					logger.info("Verified that Subscribe Pop up is displayed for Premium/Club content");
					extent.extentLogger("Subscription Popup",
							"Verified that Subscribe Pop up is displayed for Premium/Club content");
					click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
					Back(1);
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
				} else {
					pausePlayer();
					try {
						String totalduration = getText(PWAPlayerPage.totalDurationTime);
						if (!totalduration.equals("")) {
							logger.info("Trailer is playing with total duration of " + totalduration);
							extent.extentLogger("", "Trailer is playing with total duration of " + totalduration);
							logger.info(
									"Subscribe Pop up is not displayed for Premium/Club Show, second content because trailer is still playing");
							extent.extentLogger("Subscribe Pop pup",
									"Subscribe Pop up is not displayed for Premium/Club Show, second content because trailer is still playing");
						} else {
							logger.info("Failed to get trailer total duration");
							extent.extentLogger("", "Failed to get trailer total duration");
						}
					} catch (Exception e) {
						logger.error("Failed to get trailer total duration");
						extent.extentLogger("", "Failed to get trailer total duration");
					}
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
				}

			} else {
				if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
					logger.error("Subscribe Pop up is displayed for Premium/Club Show for Subscribed User");
					extent.extentLoggerFail("",
							"Verified that Subscribe Pop up is displayed for Premium/Club Show for Subscribed User");
					click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
				} else {
					logger.info(
							"Subscribe Pop up is not displayed for Premium/Club Show for Subscribed User, expected behavior");
					extent.extentLogger("Subscribe Pop pup",
							"Subscribe Pop up is not displayed for Premium/Club Show for Subscribed User, expected behavior");
				}
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			}
		}
	}

	/** ===============BHAVANA - SHOWS MODULE================================ */
	/*
	 * Function to verify Shows Landing page
	 */
	public void showsLandingPage() throws Exception {
		verifyElementPresentAndClick(PWAShowsPage.objShows, "TV Shows tab");
		waitTime(3000);
		if (verifyElementPresent(PWAHomePage.objHighlightedTab("Shows"), "Shows Tab Highlighted")) {
			logger.info("User is navigated to Shows landing page");
			extent.extentLogger("Shows landing Page", "User is navigated to Shows page");
		}
	}

	/*
	 * Function to verify View All in Shows landing page
	 */

	public void ViewAllValidtaion() throws Exception {
		extent.HeaderChildNode("ViewAll landing page");
		waitTime(6000);
		verifyElementPresentAndClick(PWAShowsPage.objViewAll, "View all arrow of Top Zee Kannada Shows");
		waitTime(8000);
		logger.info("Current URL is " + getDriver().getCurrentUrl());
		extent.extentLogger("version", "Current URL is " + getDriver().getCurrentUrl());
		waitTime(3000);
		String url = getDriver().getCurrentUrl();
		waitTime(5000);
		if (url.contains("top-zee-kannada-shows")) {
			System.out.println("ViewAll Wrap page displayed");
			logger.info("User is navigated to ViewAll Wrap page after clicking on ViewAll");
			extent.extentLogger("Shows landing Page", "User is navigated to Top Zee Kannada Shows ViewAll wrap");
		} else {
			System.out.println("ViewAll Wrap page not displayed");
			logger.info("User didn't navigate to ViewAll Wrap page after clicking on ViewAll");
			extent.extentLogger("Shows landing Page", "User didn't navigated to Top Zee Kannada Shows ViewAll wrap");
		}
		waitTime(3000);
		Back(1);
	}

	public void LinksValidation(String userType) throws Exception {
		InternalLinksValidation();
		ExternalLinksValidation();
	}

	public By TextToXpathusingclass(String text) throws Exception {
		return By.xpath("//*[@class='" + text + "']");
	}

	public void ContinuewatchingTray(String UserType) throws Exception {
		extent.HeaderChildNode("Landing page module: Continue watching tray");
		Navigate_to_HomeScreen_using_Zee5Logo();
		if (UserType == "Guest") {
			waitTime(6000);
			verifyElementNotPresent(Text_To_Xpath("Continue Watching"), 20);
		} else {
			waitTime(6000);
			Swipe_till_Text("Continue Watching");
		}
	}

	public void Navigate_to_HomeScreen_using_Zee5Logo() throws Exception {
		extent.HeaderChildNode("Navigate to HomeScreen using Zee5 Logo");
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee5 Logo");
		waitForElementDisplayed(PWAHomePage.objContTitleOnCarousel, 20);
		verifyElementPresent(PWAHomePage.objContTitleOnCarousel, "Carousal content title");
	}

	public By Text_To_Xpath(String text) throws Exception {
		return By.xpath("//*[contains(@text,'" + text + "')][@onScreen='true'][@top='true'][@visible='true']");
	}

	public void Swipe_till_Text(String text) throws Exception {
		waitTime(6000);
		for (int i = 0; i <= 5; i++) {
			if (verifyIsElementDisplayed(Text_To_Xpath(text), text)) {
				System.out.println("" + text + " found");
				break;
			} else {
				PartialSwipe("up", 1);
			}
		}
	}

	public By TextToXpathusingclasswithindex(String text, int i) throws Exception {
		return By.xpath("(//*[@class='" + text + "'])[" + i + "]");
	}

	/**
	 * ================================BASAVARAJ VIL
	 * MODULE==================================
	 */
	public void verifyingVodafoneNativeApp() throws Exception {
		String vodafonePhoneNumber = "8095760130";
		extent.HeaderChildNode("VodafonePlayFunctionFromNativeApp");
		// Click on Hamburger
		// waitForElement(NativeVodafonePlayPage.HamburgerBtn, 5, "Search");
		Thread.sleep(3000);
		click(NativeVodafonePlayPage.HamburgerBtn, "HamburgerBtn");
		Thread.sleep(3000);
		Swipe("UP", 1);
		Thread.sleep(3000);
		// Click on ZEE5 Icon
		verifyElementPresentAndClick(NativeVodafonePlayPage.Zee5IconinList, "Zee5 Option");
		Thread.sleep(3000);
		// Click on SearchIcon
		verifyElementPresentAndClick(NativeVodafonePlayPage.ChannelSearchIcon, "search icon");
		Thread.sleep(3000);
		// Click on Search Textbox
		verifyElementPresentAndClick(NativeVodafonePlayPage.SearchTextBox, "Search TextBox");
		Thread.sleep(3000);
		// Send Value for Saerch
		type(NativeVodafonePlayPage.SearchTextBox, "Simmba\n", "Search TextBox");
		Thread.sleep(3000);
		hideKeyboard();
		// Click on Searched Data
		verifyElementPresentAndClick(NativeVodafonePlayPage.searchedData("Simmba"), "Searched Data");
		waitTime(2000);
		if (verifyIsElementDisplayed(NativeVodafonePlayPage.VILPlayIcon, "playicon")) {
			click(NativeVodafonePlayPage.VILPlayIcon, "playicon");
		}
		// NAVIGATION TO ZEE5 PWA
		Thread.sleep(7000);
		if (verifyIsElementDisplayed(NativeVodafonePlayPage.EnterYourNumber, "EnterNumber")) {
			verifyElementPresentAndClick(NativeVodafonePlayPage.NumberTextBox, "Number text");
			type(NativeVodafonePlayPage.NumberTextBox, vodafonePhoneNumber + "\n", "Number field");
			hideKeyboard();
			Thread.sleep(5000);
			verifyElementPresentAndClick(NativeVodafonePlayPage.continueBtn, "ContinueBtn");
			Thread.sleep(5000);
			verifyIsElementDisplayed(NativeVodafonePlayPage.EnterOTPText, "OTP Text");
			verifyElementPresentAndClick(NativeVodafonePlayPage.OTPTextField, "OTP text field");
			Thread.sleep(10000);
			type(NativeVodafonePlayPage.NumberTextBox, vodafonePhoneNumber + "\n", "Number field");
			hideKeyboard();
			Thread.sleep(5000);
			verifyElementPresentAndClick(NativeVodafonePlayPage.OTPgoBtn, "GoBtn");
			Thread.sleep(8000);
		}
		Thread.sleep(7000);

		if (verifyIsElementDisplayed(PWAPlayerPage.objPlayer, "Player")) {
			System.out.println("Navigated to Consumption Page");
			System.out.println("Player title :" + getText(By.xpath("//div[@class='consumptionMetaDiv']//h1")));
		}

		System.out.println(getDriver().getContext());
		Thread.sleep(2000);
		getDriver().context("WEBVIEW_1");
		Thread.sleep(2000);
		System.out.println(getDriver().getContext());
		String str = getCurrentActivity();
		if (str.contains("chrome")) {
			System.out.println("Navigated ZEE PWA in Browser and not in Zee5 Lite app");
			logger.info("Navigated ZEE PWA in Browser and not in Zee5 Lite app");
			extent.extentLogger("<b>" + "Navigated ZEE PWA in Browser and not in Zee5 Lite app",
					"Navigated ZEE PWA in Browser and not in Zee5 Lite app");
		}
		// Navigated URL
		waitTime(2000);
		waitForElement(PWAVodafonePlayPage.HamburgerBtn, 5, "Hamburger");
		click(PWAVodafonePlayPage.HamburgerBtn, "Zee5 Hamburger");
		Thread.sleep(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyAccount, "My Account");
		if (verifyIsElementDisplayed(PWAVodafonePlayPage.MySubscription, "MySubscription") == false) {
			System.out.println("User has no option to purchase the plans");
			logger.info("User has no option to purchase the plans");
			extent.extentLogger("<b>" + "User has no option to purchase the plans",
					"User has no option to purchase the plans");
		} else {
			logger.info("User has option to purchase the plans");
			extent.extentLoggerFail("<b>" + "User has option to purchase the plans",
					"User has option to purchase the plans");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objCloseIcon, "Close Icon");
		waitTime(2000);
		// playFreeContent
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		verifyElementPresentAndClick(PWASearchPage.objSearchTextBox, "Search Text Box");
		waitTime(5000);
		Keyevent(32);
		Keyevent(43);
		Keyevent(32);
		Keyevent(32);
		Keyevent(41);
		Keyevent(29);
		Keyevent(42);
		Keyevent(33);
		Keyevent(62);
		Keyevent(36);
		Keyevent(49);
		Keyevent(32);
		Keyevent(35);
		Keyevent(29);
//		type(PWASearchPage.objSearchEditBox, "Doddmane ", "Search Field");
//		waitTime(2000);
//		type(PWASearchPage.objSearchEditBox, "Hudga", "Search Field");
		waitTime(5000);
		hideKeyboard();
		waitTime(3000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie2");
		click(PWASearchPage.objSpecificSearch(keyword), "Searched Content");
		waitTime(10000);
		if (verifyIsElementDisplayed(PWAPlayerPage.objPlayer, "Player")) {
			System.out.println("Navigated to Consumption Page");
			System.out.println("Player title :" + getText(By.xpath("//div[@class='consumptionMetaDiv']//h1")));
		}
		waitTime(2000);
		// playFreeContent
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		verifyElementPresentAndClick(PWASearchPage.objSearchTextBox, "Search Text Box");
		waitTime(5000);
		Keyevent(30);
		Keyevent(36);
		Keyevent(37);
		Keyevent(42);
		Keyevent(42);
		Keyevent(29);
//		type(PWASearchPage.objSearchEditBox, "Bhi", "Search Field");
//		waitTime(2000);
//		type(PWASearchPage.objSearchEditBox, "nna", "Search Field");
		waitTime(5000);
		hideKeyboard();
		waitTime(3000);
		String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovie2");
		click(PWASearchPage.objSpecificSearch(keyword1), "Searched Show");
		waitTime(10000);
		if (verifyIsElementDisplayed(PWAPlayerPage.objPlayer, "Player")) {
			System.out.println("Navigated to Consumption Page");
			System.out.println("Player title :" + getText(By.xpath("//div[@class='consumptionMetaDiv']//h1")));
		}
		// Click on Zee5 Hamburger
		verifyElementPresentAndClick(PWAVodafonePlayPage.HamburgerBtn, "Zee5 Hamburger");
		Thread.sleep(5000);
		// Click on Zee5 Profile
		verifyElementPresentAndClick(PWAVodafonePlayPage.userProfileName, "Zee5 UserProfileName");
		Thread.sleep(3000);
		Boolean popup = verifyIsElementDisplayed(PWAVodafonePlayPage.popupCloseBtn, "Zee5 Popup");
		// getDriver().findElement(PWAVodafonePlayPage.popupCloseBtn).isDisplayed();
		if (popup == true) {
			getDriver().findElement(PWAVodafonePlayPage.popupCloseBtn).click();
		}
		Thread.sleep(3000);
		// Validating Phone number
		System.out.println("ProfileNumber : " + getDriver().findElement(PWAVodafonePlayPage.userPhoneNumber).getText());
		String profileNumber = getDriver().findElement(PWAVodafonePlayPage.userPhoneNumber).getText();
		if (profileNumber.contains(vodafonePhoneNumber)) {
			System.out.println("Logged in to Zee5 using VodafonePlay Phonenumber");
			logger.info("Logged in to Zee5 using VodafonePlay Phonenumber");
			extent.extentLogger("<b>" + "Logged in to Zee5 using VodafonePlay Phonenumber",
					"Logged in to Zee5 using VodafonePlay Phonenumber");
		}
	}

	public void Keyevent(int n) throws Exception {
		Runtime.getRuntime().exec("adb shell input keyevent " + n + "");
		Thread.sleep(2000);
	}

	public String getCurrentActivity() throws Exception {
		String cmd = "adb shell \"dumpsys window windows | grep 'mCurrentFocus'\"";
		Process process = Runtime.getRuntime().exec(cmd);
		BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
		String str = br.readLine();
		return str;
	}

	public void swipeLIVETVTumbnailToLeft(String str) throws InterruptedException {
		try {
			WebElement sourceLocator = getDriver().findElement(
					By.xpath("(((((((//div[@class='trayContentWrap']//div[@class='trayHeader']//h2[.='" + str
							+ "']))//parent::*//parent::*)//child::*[2])//child::*//div[@class='slick-track'])//child::*//div[@class='clickWrapper']//figure//div[@class='noSelect content'])[3])"));
			WebElement targetLocator = getDriver().findElement(
					By.xpath("(((((((//div[@class='trayContentWrap']//div[@class='trayHeader']//h2[.='" + str
							+ "']))//parent::*//parent::*)//child::*[2])//child::*//div[@class='slick-track'])//child::*//div[@class='clickWrapper']//figure//div[@class='noSelect content'])[2])"));
			Thread.sleep(4000);
			Actions action = new Actions(getDriver());
			action.dragAndDrop(sourceLocator, targetLocator).build().perform();
		} catch (Exception e) {
			System.out.println("No trays to swipe");
		}
//		action.clickAndHold(sourceLocator).moveToElement(targetLocator).build().perform();
	}

	public String checkPremiumORFreeFromLIVETVPageTrayAndSelect(String str, String premiumORfree) throws Exception {
		try {
			ScrollToTheElement(TextToXpath(str));
			waitTime(5000);
			ScrollToTheElement(TextToXpath(str));
			waitTime(8000);
		} catch (Exception e) {
			Swipe("UP", 1);
			waitTime(8000);
			ScrollToTheElement(TextToXpath(str));
		}
		String ValueOfPremiumTumbnail = null;
		logger.info("Check premium and select");
		List<WebElement> tumnails = getDriver()
				.findElements(By.xpath("(((((//div[@class='trayContentWrap']//div[@class='trayHeader']//h2[.='" + str
						+ "']))//parent::*//parent::*)//child::*[2])//child::*//div[@class='slick-track'])//child::*//div[@class='clickWrapper']"));
		System.out.println("Number of Tumbnails : " + tumnails.size());
		boolean flag = false;
		for (int j = 1; j <= 5; j++) {
			for (int i = 1; i <= tumnails.size(); i++) {
				WebElement specificTumbnail = getDriver().findElement(
						By.xpath("(((((((//div[@class='trayContentWrap']//div[@class='trayHeader']//h2[.='" + str
								+ "']))//parent::*//parent::*)//child::*[2])//child::*//div[@class='slick-track'])//child::*//div[@class='clickWrapper']//figure//a[@class='noSelect content'])["
								+ i + "])"));
				if (verifyIsElementDisplayed(PWAHomePage.objLIVETVIsPremiumTumbnail(str, i), "Premium") == true) {
					System.out.println("premium Tumbnail");
					// System.out.println(getAttributValue("title",
					// PWAHomePage.objTumbnailTitle(str, i)));
					ValueOfPremiumTumbnail = getAttributValue("title", PWAHomePage.objLIVETvTumbnailTitle(str, i));
					System.out.println("Premium LIVETV Thumbnail Title : " + ValueOfPremiumTumbnail);
					if (premiumORfree.equals("PREMIUM")) {
						clickByElement(specificTumbnail, "Specific Thumbnail from Premium");
						flag = true;
						break;
					}
				} else if (verifyIsElementDisplayed(PWAHomePage.objLIVETVIsPremiumTumbnail(str, i),
						"Premium") == false) {
					System.out.println("No premium Thumbnail");
					ValueOfPremiumTumbnail = getAttributValue("title", PWAHomePage.objLIVETvTumbnailTitle(str, i));
					System.out.println("Non-Premium LIVETV Thumbnail Title : " + ValueOfPremiumTumbnail);
					if (premiumORfree.equals("FREE")) {
						clickByElement(specificTumbnail, "Specific Thumbnail from Free");
						flag = true;
						break;
					}
				}
			}
			if (flag == true) {
				break;
			}
			swipeLIVETVTumbnailToLeft(str);
		}
		return ValueOfPremiumTumbnail;
	}

	/**
	 * ===============================BASAVARAJ CONTENT
	 * DETAILS============================
	 */

	@SuppressWarnings("rawtypes")
	public void ContentDetails(String userType) throws Exception {
		extent.HeaderChildNode("Verification of Episode Dropdown in Show Details Page");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		mandatoryRegistrationPopUp(userType);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("consumptionsShow");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
		hideKeyboard();
		click(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(10000);
		extent.extentLogger("Navigated to tab", "Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
		logger.info("Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
		waitTime(5000);
		if (verifyIsElementDisplayed(PWAShowsPage.objShowdeatilPlayIcon, "Show Details Page")) {
			extent.extentLogger("Navigated to ShowdetailPage", "Navigated to Show Details Page");
			logger.info("Navigated to Show Details Page");
		}
		if (verifyIsElementDisplayed(PWAShowsPage.objEpisodeTrayinShowdetailPage,
				"Episode Tray below Feature carousel")) {
			extent.extentLogger("Episode Tray below Feature carousel is present",
					"Episode Tray below Feature carousel is present");
			logger.info("Episode Tray below Feature carousel is present");
		}
		if (verifyIsElementDisplayed(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown")) {
			click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
			List<WebElement> objShowDetailEpisodeDropdownValuesSize = getDriver().findElements(By.xpath(
					"(((//div[@class='AllEpisodesListDiv']//div[@class='allEpisodeSelect']//div)[6])[@aria-expanded='true']//div)//span"));
			waitTime(3000);
			extent.extentLogger("", "Drop Down Size : " + objShowDetailEpisodeDropdownValuesSize.size());
			logger.info("Drop Down Size : " + objShowDetailEpisodeDropdownValuesSize.size());
			ArrayList<String> Listofepisode = new ArrayList<String>();
			if (objShowDetailEpisodeDropdownValuesSize.size() >= 1) {
				for (int i = 1; i < objShowDetailEpisodeDropdownValuesSize.size(); i++) {
					Listofepisode
							.add(getAttributValue("aria-label", PWAShowsPage.objShowDetailEpisodeDropdownValues(i)));
				}
				extent.extentLogger("Episode list present in Episode Dropdown",
						"Episode list in Episode Dropdown: " + Listofepisode);
				logger.info("Episodes list present in Dropdown: " + Listofepisode);
			} else {
				extent.extentLoggerFail("Episode list not present in Episode Dropdown",
						"Episode list not present in Episode Dropdown");
				logger.info("Empty Episode List");
			}
		}
		List<WebElement> objShowDetailEpisodeDropdownValuesSize = getDriver().findElements(By.xpath(
				"(((//div[@class='AllEpisodesListDiv']//div[@class='allEpisodeSelect']//div)[6])[@aria-expanded='true']//div)//span"));
		if (objShowDetailEpisodeDropdownValuesSize.size() > 6) {
			touchAction = new TouchAction(getDriver());
			touchAction.press(PointOption.point(350, 840)).waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
					.moveTo(PointOption.point(350, 530)).release().perform();
		}
		extent.extentLogger("Selected Episode",
				"Selected Episode Set: " + getText(PWAShowsPage.objSelectedEpisodeinDropdown));
		logger.info("Selected Episode Set: " + getText(PWAShowsPage.objSelectedEpisodeinDropdown));
		List<WebElement> objShowDetailNonSelectedEpisodeDropdownValues = getDriver().findElements(By.xpath(
				"((((//div[@class='AllEpisodesListDiv']//div[@class='allEpisodeSelect']//div)[6])[@aria-expanded='true']//div)//span[@aria-selected='false'])"));
		waitTime(3000);
		ArrayList<String> ListofNonSelectedEpisode = new ArrayList<String>();
		for (int i = 1; i < objShowDetailNonSelectedEpisodeDropdownValues.size(); i++) {
			ListofNonSelectedEpisode
					.add(getAttributValue("aria-label", PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(i)));
		}
		String nonselected = getText(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1));
		click(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1),
				"Non-Selected Episode Set: " + nonselected);
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		String selected = getText(PWAShowsPage.objSelectedEpisodeinDropdown);
		extent.extentLogger("", "Selected Episode : " + selected);
		logger.info("Selected Episode : " + selected);
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		// gaps covered
		// Verify if the episode tray gets updated bases on the slected dropdown set
		boolean match = false;
		String dropdownStartEpisode = selected.replace("Episodes", "");
		dropdownStartEpisode = dropdownStartEpisode.split("-")[0].trim();
		logger.info("Start Episode from dropdown: " + dropdownStartEpisode);
		extent.extentLogger("", "Start Episode from dropdown: " + dropdownStartEpisode);
		try {
			List<WebElement> cardmeta = findElements(
					By.xpath("//div[@data-index='0']//div[@class='showDuration']//span"));
			for (int i = 0; i < cardmeta.size(); i++) {
				String cardStartEpisode = cardmeta.get(i).getText();
				if (cardStartEpisode.contains(dropdownStartEpisode)) {
					logger.info("Episode tray first card displays metadata: " + cardStartEpisode);
					extent.extentLogger("", "Episode tray first card displays metadata: " + cardStartEpisode);
					logger.info("Episode tray updated successfully on selecting Episode Set from dropdown");
					extent.extentLogger("", "Episode tray updated successfully on selecting Episode Set from dropdown");
					match = true;
					break;
				}
			}
		} catch (Exception e) {
			extent.extentLoggerFail("", "Failed to fetch Card metadata under Episodes tray");
			logger.error("Failed to fetch Card metadata under Episodes tray");
		}
		if (match == false) {
			logger.info("Episode tray failed to update after selecting Episode set from dropdown");
			extent.extentLogger("", "Episode tray failed to update after selecting Episode set from dropdown");
		}
		scrolltillBackToArrowAppears();
		if (verifyIsElementDisplayed(PWAShowsPage.objShowdeatilPlayIcon, "ShowDetailPage")) {
			extent.extentLogger("Navigated to Top of page", "Navigated to Top of page");
			logger.info("Navigated to Top");
		}
		extent.HeaderChildNode("Verification of Share Functionality in Show Details Page");
		click(PWAShowsPage.objShareIcon, "Share icon");
		waitTime(2000);
		// facebookshare
		getDriver().context("NATIVE_APP");
		Dimension dim = getDriver().manage().window().getSize();
		int startx = (int) (dim.width * 0.6);
		int starty = (int) (dim.height * 0.7);
		int endx = (int) (startx * 0.1);
		int endy = starty;
		for (int i = 0; i < 2; i++) {
			try {
				getDriver().findElement(PWAShowsPage.objFacebookApp).click();
				break;
			} catch (Exception e) {
				TouchAction act = new TouchAction(getDriver());
				act.press(PointOption.point(startx, starty))
						.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
						.moveTo(PointOption.point(endx, endy)).release().perform();
				waitTime(2000);
			}
		}
		waitTime(3000);
		waitForElementAndClick(PWAShowsPage.objFacebookPostBtn, 10, "POST button in Facebook App");
		waitTime(5000);
		getDriver().context("CHROMIUM");
		// twittershare
		click(PWAShowsPage.objShareIcon, "Share icon");
		waitTime(2000);
		getDriver().context("NATIVE_APP");
		waitTime(5000);
		for (int i = 0; i < 2; i++) {
			try {
				getDriver().findElement(PWAShowsPage.objTwitterApp).click();
				break;
			} catch (Exception e) {
				TouchAction act = new TouchAction(getDriver());
				act.press(PointOption.point(startx, starty))
						.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
						.moveTo(PointOption.point(endx, endy)).release().perform();
				waitTime(2000);
			}
		}
		waitTime(5000);
		waitForElementAndClick(PWAShowsPage.objTwitterPostBtn1, 10, "Tweet button in Twitter App");
		if (verifyIsElementDisplayed(PWAShowsPage.objTwitterPostBtn1, "Tweet button in Twitter App")) {
			extent.extentLoggerFail("", "Twitter posting was unsuccessful due to character limit");
			logger.error("Twitter posting was unsuccessful due to character limit");
			directClickReturnBoolean(PWAShowsPage.objTwitterCloseBtn, "Twitter Close");
			directClickReturnBoolean(PWAShowsPage.objTwitterDeletePost, "Delete Post");
		}
		waitTime(5000);
		getDriver().context("CHROMIUM");
		extent.HeaderChildNode(
				"Verification of backend data and comparison with frontend meta data in Show Details Page");
		String contentID = verifyShowsDetailsMetaData();
		extent.HeaderChildNode("Verification of Reco Trays in Show Details Page");
		Response recoResp = ResponseInstance.getRecoTraysInDetailsPage(userType, contentID);
		ArrayList<String> recoTraysInDetailsPage = getAllRecoTraysFromDetails(recoResp);
		Swipe("DOWN", 2);
		scrolltillBackToArrowAppears();
		System.out.println(recoTraysInDetailsPage.size());
		for (int tray = 0; tray < recoTraysInDetailsPage.size(); tray++) {
			String trayTitleAPI = recoTraysInDetailsPage.get(tray);
			System.out.println("TrayTitle from API : " + trayTitleAPI);
			swipeTillTray(10, trayTitleAPI, "\"" + trayTitleAPI + "\" tray");
		}
		scrolltillBackToArrowAppears();
	}

	public String verifyShowsDetailsMetaData() throws Exception {
		// Watchhistory is showing at back-end response properly
		String contentURL = getDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		logger.info("ContentID fetched from URL: " + contentID);
		extent.extentLogger("", "ContentID fetched from URL: " + contentID);
		Response resp = ResponseInstance
				.getResponse("https://gwapi.zee5.com/content/tvshow/" + contentID + "?translation=en&country=IN");
		extent.extentLogger("BackEnd data : ", "Backend data fetched: ");
		logger.info("Backend data fetched: ");
		String show = resp.jsonPath().getString("original_title");
		String id = resp.jsonPath().getString("id");
		String subtype = resp.jsonPath().getString("asset_subtype");
		String genre = resp.jsonPath().getString("genre[0].value");
		String totalSeasons = resp.jsonPath().getString("total_seasons");
		String totalEpisodes = resp.jsonPath().getString("seasons[0].total_episodes");
		String releaseDate = resp.jsonPath().getString("release_date");
		String ageRating = resp.jsonPath().getString("age_rating");
		extent.extentLogger("", "Show : " + show);
		logger.info("Show : " + show);
		extent.extentLogger("", "id : " + id);
		logger.info("Content ID : " + id);
		extent.extentLogger("", "Asset Type : " + subtype);
		logger.info("Asset Type : " + subtype);
		extent.extentLogger("", "Total Seasons : " + totalSeasons);
		logger.info("Total Seasons : " + totalSeasons);
		extent.extentLogger("", "Total Episodes : " + totalEpisodes);
		logger.info("Total Episodes : " + totalEpisodes);
		extent.extentLogger("", "Age Rating : " + ageRating);
		logger.info("Age Rating : " + ageRating);
		extent.extentLogger("", "Release Date : " + releaseDate);
		logger.info("Release Date : " + releaseDate);
		extent.extentLogger("", "Genre : " + genre);
		logger.info("Genre : " + genre);
		// Verification on front end
		String titleui = findElement(PWAPlayerPage.objContentShowTitle).getText();
		if (titleui.equals(show)) {
			extent.extentLogger("", "API Show Title: " + show + " is displayed in UI");
			logger.info("API Show Title: " + show + " is displayed in UI");
		} else {
			extent.extentLoggerFail("", "API fetched show title is " + show + " and UI displays title " + titleui);
			logger.info("API fetched show title is " + show + " and UI displays title " + titleui);
		}
		List<WebElement> meta = findElements(PWAShowsPage.metainfolist);
		ArrayList<String> metalist = new ArrayList<String>();
		for (int i = 0; i < meta.size(); i++) {
			metalist.add(meta.get(i).getText());
		}
		extent.extentLogger("", "Meta data fetched from front end : " + metalist);
		logger.info("Meta data fetched from front end : " + metalist);
		for (int i = 0; i < meta.size(); i++) {
			String currentmeta = meta.get(i).getText();
			if (i == 0) {
				if (currentmeta.contains(totalEpisodes)) {
					extent.extentLogger("", "Total Episodes : " + currentmeta + " is displayed in UI");
					logger.info("Total Episodes : " + currentmeta + " is displayed in UI");
				} else {
					extent.extentLoggerFail("",
							"API fetched number of episodes is " + totalEpisodes + " and UI displays " + currentmeta);
					logger.info(
							"API fetched number of episodes is " + totalEpisodes + " and UI displays " + currentmeta);
				}
			} else if (i == 1) {
				if (releaseDate.contains(currentmeta)) {
					extent.extentLogger("", "Release Year : " + currentmeta + " is displayed in UI");
					logger.info("Release Year : " + currentmeta + " is displayed in UI");
				} else {
					extent.extentLoggerFail("",
							"API fetched release year is " + releaseDate + " and UI displays " + currentmeta);
					logger.info("API fetched release year is " + releaseDate + " and UI displays " + currentmeta);
				}
			} else if (i == 2) {
				if (genre.contains(currentmeta)) {
					extent.extentLogger("", "Genre : " + currentmeta + " is displayed in UI");
					logger.info("Genre : " + currentmeta + " is displayed in UI");
				} else {
					extent.extentLoggerFail("", "API fetched genre is " + genre + " and UI displays " + currentmeta);
					logger.info("API fetched genre is " + genre + " and UI displays " + currentmeta);
				}
			}
		}
		if (metalist.contains(ageRating)) {
			extent.extentLogger("", "Age Rating : " + ageRating + " is displayed in UI");
			logger.info("Age Rating : " + ageRating + " is displayed in UI");
		} else {
			extent.extentLoggerFail("", "API fetched Age Rating is " + ageRating + " is not displayed in UI");
			logger.info("API fetched Age Rating is " + ageRating + " is not displayed in UI");
		}

		return contentID;
	}

	public void scrolltillBackToArrowAppears() throws Exception {
		PartialSwipe("UP", 3);
		for (int i = 1; i <= 10; i++) {
			Swipe("UP", 1);
			if (verifyIsElementDisplayed(PWAShowsPage.objBackToTopArrow, "Back to Top Arrow")) {
				waitTime(2000);
				click(PWAShowsPage.objBackToTopArrow, "BackToTop Arrow");
				break;
			}
		}
	}

	public void checkDurationandProgressVideo(String userType) throws Exception {
		extent.HeaderChildNode("Check video Duration and Progress");
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("timedAnchorMovie");
		String currentDuration = "", currentDuration1 = "", totalDuration = "", totalDuration1 = "";
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Field");
		verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(5000);
		hideKeyboard();
		waitTime(3000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		if (!userType.equals("SubscribedUser")) {
			waitForElementAndClickIfPresent(PWASubscriptionPages.objPopupCloseButton, 5, "Close in Pop Up");
		}
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		// Content elapsed time should update with the content playback
		currentDuration = getText(PWAPlayerPage.objcurrenttime);
		extent.extentLogger("currentitme", "Current time: " + currentDuration);
		logger.info("Current time: " + currentDuration);
		totalDuration = getText(PWAPlayerPage.objtotaltime);
		extent.extentLogger("totalDuration", "Total duration: " + totalDuration);
		logger.info("Total duration: " + totalDuration);
		String progress = null;
		if (verifyIsElementDisplayed(PWAPlayerPage.objprogressBar, "ProgressBar")) {
			progress = getAttributValue("style", PWAPlayerPage.objprogressProgress);
			extent.extentLogger("progress", "Progress : " + progress);
			logger.info("Progress : " + progress);
		}
		Thread.sleep(5000);
		verifyElementPresentAndClick(PWAPlayerPage.forward10SecBtn, "10 sec forward");
		verifyElementPresentAndClick(PWAPlayerPage.playBtn, "Play btn");
		// Waiting for some time
		Thread.sleep(10000);
		Thread.sleep(10000);
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		currentDuration1 = getText(PWAPlayerPage.objcurrenttime);
		extent.extentLogger("currentitme", "Current time: " + currentDuration1);
		logger.info("Current time: " + currentDuration1);
		totalDuration1 = getText(PWAPlayerPage.objtotaltime);
		extent.extentLogger("totalDuration", "Total duration: " + totalDuration1);
		logger.info("Total duration: " + totalDuration1);
		String progress1 = getAttributValue("style", PWAPlayerPage.objprogressProgress);
		logger.info("Progress : " + progress1);
		extent.extentLogger("", "Progress : " + progress1);
		// Validate the availabilty and functionality of progress bar button
		if (!progress.equals(progress1)) {
			extent.extentLogger("Progress Bar is functional", "Progress Bar is functional");
			logger.info("Progress Bar is functional");
		} else {
			extent.extentLoggerFail("Progress Bar is not functional", "Progress Bar is not functional");
			logger.info("Progress Bar is not functional");
		}
		// Content duration should be static on the player
		if (totalDuration.contains(totalDuration1)) {
			extent.extentLogger("Content duration is static", "Content duration is static");
			logger.info("Content duration is static");
		} else {
			extent.extentLoggerFail("Content duration is not static", "Content duration is not static");
			logger.info("Content duration is not static");
		}
	}

	@SuppressWarnings("rawtypes")
	public boolean pausePlayer() throws InterruptedException {
		waitTime(5000);
		int deviceWidth = getDriver().manage().window().getSize().width;
		int deviceHeight = getDriver().manage().window().getSize().height;
		int x = deviceWidth / 2;
		int y = deviceHeight / 4;
		boolean charmboardpresent = false;
		boolean playerPaused = false;
		TouchAction act = new TouchAction(getDriver());
		act.tap(PointOption.point(x, y)).perform();
		// charm board presence
		/*
		 * try { getDriver().findElement(PWAPlayerPage.charmBoardPresence);
		 * charmboardpresent = true; System.out.println("Charmboard is present"); }
		 * catch (Exception e) { System.out.println("Charmboard is not present");
		 * charmboardpresent = false; }
		 */
		for (int trial = 0; trial <= 20; trial++) {
			try {
				act.tap(PointOption.point(x, y)).perform();
				System.out.println("Tapped on the Player to access player controls");
				if (charmboardpresent == true) {
					try {
						getDriver().findElement(PWAPlayerPage.charmBoardPause).click();
						String time = getText(PWAPlayerPage.objcurrenttime);
						extent.extentLogger("playerPaused", "Paused the Player " + time);
						logger.info("Paused the Player " + time);
						playerPaused = true;
						break;
					} catch (Exception e) {
					}
				} else {
					try {
						getDriver().findElement(PWAPlayerPage.pauseBtn).click();
						try {
							if (verifyElementDisplayed(PWAPlayerPage.objPlayButtonOfPausedPlayer)) {
								String time = getText(PWAPlayerPage.objcurrenttime);
								extent.extentLogger("playerPaused", "Paused the Player " + time);
								logger.info("Paused the Player " + time);
								playerPaused = true;
								break;
							}
						} catch (Exception e) {
							if (trial == 20) {
								extent.extentLogger("errorOccured", "Player not paused");
								logger.info("Player not paused");
							}
						}
					} catch (Exception e) {
						try {
							if (verifyElementDisplayed(PWAPlayerPage.objPlayButtonOfPausedPlayer)) {
								String time = getText(PWAPlayerPage.objcurrenttime);
								extent.extentLogger("playerPaused", "Paused the Player " + time);
								logger.info("Paused the Player " + time);
								playerPaused = true;
								break;
							}
						} catch (Exception e1) {
							if (trial == 20) {
								extent.extentLogger("errorOccured", "Player not paused");
								logger.info("Player not paused");
							}
						}
					}
				}
			} catch (Exception e) {
				Thread.sleep(1000);
				if (trial == 4) {
					extent.extentLogger("errorOccured", "Player not paused");
					logger.info("Player not paused");
				}
			}
		}
		return playerPaused;
	}

	@SuppressWarnings("rawtypes")
	public boolean pauseLiveTVPlayer() throws InterruptedException {
		int deviceWidth = getDriver().manage().window().getSize().width;
		int deviceHeight = getDriver().manage().window().getSize().height;
		int x = deviceWidth / 2;
		int y = deviceHeight / 3;
		boolean playerPaused = false;
		for (int trial = 0; trial <= 20; trial++) {
			try {
				TouchAction act = new TouchAction(getDriver());
				act.tap(PointOption.point(x, y)).perform();
				System.out.println("Tapped on the Player to access player controls");
				try {
					getDriver().findElement(PWAPlayerPage.pauseBtn).click();
					try {
						getDriver().findElement(PWAPlayerPage.playBtn);
						extent.extentLogger("playerPaused", "Paused the Player");
						logger.info("Paused the Player");
						playerPaused = true;
						break;
					} catch (Exception e) {
						if (trial == 20) {
							extent.extentLogger("errorOccured", "Player not paused");
							logger.info("Player not paused");
						}
					}
				} catch (Exception e) {
					try {
						getDriver().findElement(PWAPlayerPage.playBtn);
						extent.extentLogger("playerPaused", "Paused the Player");
						logger.info("Paused the Player");
						playerPaused = true;
						break;
					} catch (Exception e1) {
						if (trial == 20) {
							extent.extentLogger("errorOccured", "Player not paused");
							logger.info("Player not paused");
						}
					}
				}
			} catch (Exception e) {
				Thread.sleep(1000);
				if (trial == 4) {
					extent.extentLogger("errorOccured", "Player not paused");
					logger.info("Player not paused");
				}
			}
		}
		return playerPaused;
	}

	public void checkDurationInLivetv() throws Exception {
		extent.HeaderChildNode("checkDurationInLivetv");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		String keyword = getParameterFromXML("livetv");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Field");
		waitTime(5000);
		hideKeyboard();
		waitTime(3000);
		click(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(10000);
		waitForPlayerAdToComplete("Live Player");
		pauseLiveTVPlayer();
		if (verifyIsElementDisplayed(PWAPlayerPage.objcurrenttime, "Current time")) {
			extent.extentLoggerFail("Current time is displayed", "Current time is displayed for Live TV");
			logger.error("Current time is displayed for Live TV");
		} else {
			extent.extentLogger("Current time is not displayed", "Live TV Current time is not displayed is expected");
			logger.info("Live TV Current time is not displayed is expected");
		}
		if (verifyIsElementDisplayed(PWAPlayerPage.objtotaltime, "Total time")) {
			extent.extentLoggerFail("Total time is displayed", "Total time is displayed for Live TV");
			logger.error("Total time is displayed for Live TV");
		} else {
			extent.extentLogger("Total time is not displayed", "Live TV Total time is not displayed is expected");
			logger.info("Live TV Total time is not displayed is expected");
		}
	}

//	TIMED ANCHORS

	/**
	 * ================================BASAVARAJ TIMED
	 * ANCHORS==================================
	 * 
	 */

	public void TimedAnchors(String userType) throws Exception {
		boolean execute = true;
		extent.HeaderChildNode("Timed Anchors Functionality");
		extent.extentLogger("Timed Anchors", "Timed Anchors");
		waitTime(3000);
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie2");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		String currenturl = getDriver().getCurrentUrl();
		String timedurl = currenturl + "?t=60";
		getDriver().get(timedurl);
		System.out.println("Hit URL : " + timedurl);
		extent.extentLogger("", "Hit URL : " + timedurl);
		// getDriver().get("https://newpwa.zee5.com/movies/details/doddmane-hudga/0-0-2677?t=60");
		waitTime(10000);
		if (userType.equals("Guest")) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Sign Up pop up")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Sign Up Pop Up close button");
			}
		}
		if (userType.equals("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objCompleteProfile, "Complete Profile popup ")) {
				click(PWAPlayerPage.objCompleteProfileCloseIcon, "Complete Profile Pop up close button");
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
				System.out.println("The content is a Premium Content");
				extent.extentLogger("", "The content is a Premium Content");
				logger.error(
						"Timed Anchors Functionality could not be tested because no free timed anchor content is available");
				extent.extentLoggerFail("",
						"Timed Anchors Functionality could not be tested because no free timed anchor content is available");
				execute = false;
			}
		}
		if (execute) {
			waitForPlayerAdToComplete("Video Player");
			System.out.println("pause");
			pausePlayer();
			String currentDuration = getText(PWAPlayerPage.objcurrenttime);
			System.out.println("Current time: " + currentDuration);
			List<WebElement> anchors = getDriver().findElements(By.xpath("(//div[@playermarkertag='timer']//div)"));
			// Verify whether important segments are marked in player for Logged In user
			if (verifyIsElementDisplayed(PWAPlayerPage.objtimedanchors, "TimedAnchor")) {
				System.out.println("TimedAnchor Present");
				System.out.println("Number of Timed Anchors segments present :" + anchors.size());
				extent.extentLogger("", "Number of Timed Anchors segments present :" + anchors.size());
				if (anchors.size() >= 2) {
					click(PWAPlayerPage.objtimedAnchor(2), "Individual timed anchor");
					Thread.sleep(7000);
					System.out.println("Clicked on Timed Anchor at position : "
							+ getAttributValue("style", PWAPlayerPage.objtimedAnchor(2)));
					extent.extentLogger("", "Clicked on Timed Anchor at position : "
							+ getAttributValue("style", PWAPlayerPage.objtimedAnchor(2)));
					String currentTime1 = getText(PWAPlayerPage.objcurrenttime);
					System.out.println(
							"Current time after clicking on the TimedAnchor :" + getText(PWAPlayerPage.objcurrenttime));
					extent.extentLogger("",
							"Current time after clicking on the TimedAnchor :" + getText(PWAPlayerPage.objcurrenttime));
					if (!getAttributValue("style", PWAPlayerPage.objtimedAnchor(1))
							.equals(getAttributValue("style", PWAPlayerPage.objtimedAnchor(2)))) {
						System.out.println("Navigated to the TimeAnchor ");
						extent.extentLogger("Navigated to the TimeAnchor ", "Navigated to the TimeAnchor ");
					} else {
						System.out.println("Not Navigated to the TimeAnchor ");
						extent.extentLoggerFail("Not Navigated to the TimeAnchor ", "Not Navigated to the TimeAnchor ");
					}
					System.out.println(getText(PWAPlayerPage.objcurrenttime));
					if (!currentDuration.equals(currentTime1)) {
						System.out.println("Clicked on TimedAnchor and Time is changed");
						extent.extentLogger("Clicked on TimedAnchor and Time is changed",
								"Clicked on TimedAnchor and Time is changed");
					} else {
						System.out.println("Clicked on TimedAnchor and Time is not changed");
						extent.extentLoggerFail("Clicked on TimedAnchor and Time is not changed",
								"Clicked on TimedAnchor and Time is not changed");
					}

					waitForPlayerAdToComplete("Video Player");
					System.out.println("pause");

					pausePlayer();

					click(PWAPlayerPage.objPlayerPlay, "Play btn");

					waitForPlayerAdToComplete("Video Player");

					if (AdValue.equals("AdPlayed")) {
						System.out.println("Ad Played as it was present before TimedAnchor");
						extent.extentLogger("Ad Played as it was present before TimedAnchor",
								"Ad Played as it was present before TimedAnchor");
					} else {
						System.out.println("Ad not played as it was not present before TimedAnchor");
						extent.extentLogger("Ad not played as it was not present before TimedAnchor",
								"Ad not played as it was not present before TimedAnchor");
					}

					System.out.println("pause");
					pausePlayer();

					if (!currentTime1.equals(getText(PWAPlayerPage.objcurrenttime))) {
						System.out.println("Content Played after click on the TimedAnchor");
						extent.extentLogger("Content Played after click on the TimedAnchor",
								"Content Played after click on the TimedAnchor");
					} else {
						System.out.println("Content not Played after click on the TimedAnchor");
						extent.extentLoggerFail("Content not Played after click on the TimedAnchor",
								"Content not Played after click on the TimedAnchor");
					}
				}
			} else {
				System.out.println("TimedAnchor is not present");
			}
		}
	}

	public void ShowsTimeperiodProvided(String userType) throws Exception {
		/*
		 * Verify whether playback for content(wrt shows) starts playing based on the
		 * timeperiod provided in the URL
		 */
		extent.HeaderChildNode(
				"Verify whether playback for content(wrt shows) starts playing based on the timeperiod provided in the URL");
		int timeperiod = 35;
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("timedAnchorEpisode");
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Edit box: " + keyword);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(7000);
		String currenturl = getDriver().getCurrentUrl();
		String timedurl = currenturl + "?t=" + timeperiod + "";
		System.out.println("Appending time period");
		extent.extentLogger("timeperiod", "Appending time period");
		getDriver().get(timedurl);
		System.out.println("Hit URL : " + timedurl);
		extent.extentLogger("", "Hit URL : " + timedurl);
		// getDriver().get("https://newpwa.zee5.com/tvshows/details/paaru/0-6-1179/paarvathi-kisses-aditya-paaru/0-1-manual_1dr9c5e034t0?t="+timeperiod+"");
		waitTime(5000);

		if (userType.equals("Guest")) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Sign Up pop up")) {
				click(PWASubscriptionPages.objPopupCloseButton, "Sign Up Pop Up close button");
			}
		}

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		waitForPlayerAdToComplete("Video Player");
		if (userType.equals("Guest")) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Sign Up pop up")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Sign Up Pop Up close button");

			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		Thread.sleep(6000);
		PresentTitle = getDriver().findElement(By.xpath("(//div[@class='consumptionMetaDiv']//h1)")).getText();

		System.out.println("Show Title : " + PresentTitle);
		String currentDuration1 = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time after appending timedperiod in URL : " + currentDuration1);

		if (timeToSec(currentDuration1) >= timeperiod) {
			System.out.println("Playback started from Appended time");
			extent.extentLogger("Playback started from Appended time", "Playback started from Appended time");
		} else {
			System.out.println("Playback not started from Appended time.");
			extent.extentLoggerFail("Playback not started from Appended time",
					"Playback not started from Appended time");
		}
	}

	public void musicTimeperiodProvided(String userType) throws Exception {
		/*
		 * // Verify whether playback for content(wrt music and music-video) starts
		 * playing based on the timeperiod provided in the URL
		 */
		extent.HeaderChildNode(
				"Verify whether playback for content(wrt music and music-video) starts playing based on the timeperiod provided in the URL");
		int timeperiod2 = 25;
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("timedAnchorMusic");
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		String currenturl = getDriver().getCurrentUrl();
		String timedurl = currenturl + "?t=" + timeperiod2 + "";
		System.out.println("Appending time period");
		extent.extentLogger("timeperiod", "Appending time period");
		getDriver().get(timedurl);
		System.out.println("Hit URL : " + timedurl);
		extent.extentLogger("", "Hit URL : " + timedurl);
		// getDriver().get("https://newpwa.zee5.com/music-videos/details/appa-lyrical-punith-shetty/0-0-manual_15l5jn9il6o8?t="+timeperiod2+"");
		if (userType.equals("Guest")) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Sign Up pop up")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Sign Up Pop Up close button");
			}
		}
		if (userType.equals("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objCompleteProfile, "Complete Profile popup ")) {
				click(PWAPlayerPage.objCompleteProfileCloseIcon, "Complete Profile Pop up close button");

			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		Thread.sleep(6000);
		PresentTitle = getDriver().findElement(By.xpath("(//div[@class='consumptionMetaDiv']//h1)")).getText();

		System.out.println("Show Title : " + PresentTitle);
		String currentDuration2 = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time after appending timedperiod in URL : " + currentDuration2);

		if (timeToSec(currentDuration2) >= timeperiod2) {
			System.out.println("Playback started from Appended time");
			extent.extentLogger("Playback started from Appended time", "Playback started from Appended time");
		} else {
			System.out.println("Playback not started from Appended time.");
			extent.extentLoggerFail("Playback not started from Appended time",
					"Playback not started from Appended time");
		}
	}

	public void moviesTimeperiodProvided(String userType) throws Exception {
		/*
		 * // Verify whether playback for content(wrt movies) starts playing based on
		 * the timeperiod provided in the URL
		 */
		extent.HeaderChildNode(
				"Verify whether playback for content(wrt movies) starts playing based on the timeperiod provided in the URL");
		int timeperiod3 = 120;
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("timedAnchorMovie");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		String currenturl = getDriver().getCurrentUrl();
		String timedurl = currenturl + "?t=" + timeperiod3 + "";
		System.out.println("Appending time period");
		extent.extentLogger("timeperiod", "Appending time period");
		getDriver().get(timedurl);
		System.out.println("Hit URL : " + timedurl);
		extent.extentLogger("", "Hit URL : " + timedurl);
		// getDriver().get("https://newpwa.zee5.com/movies/details/action-film-starring-puneeth-rajkumar/0-0-2677?t="+timeperiod3+"");
		if (userType.equals("Guest")) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Sign Up pop up")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Sign Up Pop Up close button");

			}
		}

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");

			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}

		waitForPlayerAdToComplete("Video Player");
		if (userType.equals("Guest")) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Sign Up pop up")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Sign Up Pop Up close button");

			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		Thread.sleep(3000);

		String PresentTitle = getDriver().findElement(By.xpath("(//div[@class='consumptionMetaDiv']//h1)")).getText();

		String currentDuration3 = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time after appending timedperiod in URL : " + currentDuration3);

		if (timeToSec(currentDuration3) >= timeperiod3) {
			System.out.println("Playback started from Appended time");
			extent.extentLogger("Playback started from Appended time", "Playback started from Appended time");
		} else {
			System.out.println("Playback not started from Appended time.");
			extent.extentLogger("Playback not started from Appended time", "Playback not started from Appended time");
		}

		Thread.sleep(3000);
		extent.HeaderChildNode("Timed Anchor for Maximum time");
		System.out.println("Verifying Timed Anchor for Maximum time");
		extent.extentLogger("", "Verifying Timed Anchor for Maximum time");
		// append max time
		int maxtime = 9000;
		timedurl = currenturl + "?t=" + maxtime + "";
		System.out.println("Appending time period");
		extent.extentLogger("timeperiod", "Appending time period");
		getDriver().get(timedurl);
		System.out.println("Hit URL : " + timedurl);
		extent.extentLogger("", "Hit URL : " + timedurl);
		// getDriver().get("https://newpwa.zee5.com/movies/details/action-film-starring-puneeth-rajkumar/0-0-2677?t=9000");
		if (userType.equals("Guest")) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Sign Up pop up")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Sign Up Pop Up close button");

			}
		}
		waitForPlayerAdToComplete("Video Player");
		if (userType.equals("Guest")) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Sign Up pop up")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Sign Up Pop Up close button");

			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");

			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");

			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objSubscribeNowLink, "Subscriptionlink")) {
				System.out.println("Subscribe now link");
			}
		} else {
			pausePlayer();
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		Thread.sleep(3000);
		String presentTitle2 = getDriver().findElement(By.xpath("(//div[@class='consumptionMetaDiv']//h1)")).getText();

		if (!PresentTitle.equals(presentTitle2)) {
			System.out.println("Navigated to other Player as the time appended is max ");
			extent.extentLogger("Navigated to other Player as the time appended is max ",
					"Navigated to other Player as the time appended is max ");
		} else {
			System.out.println("Not Navigated to other Player");
			extent.extentLogger("Not Navigated to other Player", "Not Navigated to other Player");
		}
		// getDriver().get("https://newpwa.zee5.com/movies/details/doddmane-hudga/0-0-2677?t=60");
		String url = getParameterFromXML("url");
		String urlToHit = url + "kids/kids-movies/robin-hood-enemies-forever/0-0-103560?t=60";
		getDriver().get(urlToHit);
		Thread.sleep(5000);
	}

	public void continueWatchingtrayData(String userType) {
		/*
		 * //Verifying ContinueWatching Tray Data
		 */

		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		if (userType.equals("SubscribedUser") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("Verifying ContinueWatching Tray Data");
			try {
				// ScrollToTheElementWEB(By.xpath("//div[@class='trayHeader']//h2[contains(text(),'Continue
				// Watching')]"));
				Thread.sleep(2000);
				click(PWAHomePage.objspecificTumbnail1("Continue Watching", 1), "Continue watching content");
				if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
					verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton,
							"Subscribe Pop Up Close button");
					extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
				} else {
					extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
				}
				waitForPlayerAdToComplete("Video Player");
				pausePlayer();
				String currentDuration4 = getText(PWAPlayerPage.objcurrenttime);
				System.out.println("Current time  : " + currentDuration4);
				String getUrl = getDriver().getCurrentUrl();
				int timeperiod4 = 120;
				String modifiedURL = getUrl + "?t=" + timeperiod4 + "";
				getDriver().get(modifiedURL);
				waitTime(5000);
				getDriver().findElement(By.xpath("//div[contains(@class,'playkit-spinner')]"));
				waitForPlayerAdToComplete("Video Player");
				pausePlayer();
				String currentDuration5 = getText(PWAPlayerPage.objcurrenttime);
				System.out.println("Current time after appending timedperiod in URL : " + currentDuration5);
				if (timeToSec(currentDuration5) >= timeperiod4) {
					System.out.println("Playback started from Appended time");
					extent.extentLogger("Playback started from Appended time", "Playback started from Appended time");
				} else {
					System.out.println("Playback not started from Appended time.");
					extent.extentLoggerFail("Playback not started from Appended time",
							"Playback not started from Appended time");
				}
			} catch (Exception e) {
				System.out.println("No Continue Watching Tray");
			}
		}
	}

	/** ==========================TANISHA -RECO MODULE========================== */
	/**
	 * Main method for validating Recommendations (Talamoos) module
	 */
	public void verificationOfRecoTalamoos(String userType) throws Exception {
		// playAnyContentAndVerifyTrendingOnZee5Tray();
		// String contentLangs = allSelectedLanguages();
		if (userType.equals("Guest")) {
			// playContentsToTriggerRecoApi(userType);
			extent.HeaderChildNode("Play different contents to trigger Recommendation API");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			selectLanguages();
			playAContentForReco("Music", getParameterFromXML("musicToTriggerReco"), userType);
			playAContentForReco("News", getParameterFromXML("newsToTriggerReco"), userType);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Home", "Trending on Zee5", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Premium", "Trending Now", true);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Shows", "Trending Shows", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Movies", "Trending Movies", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Music", "Recommended for you", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "News", "Recommended for you", false);
		} else if (userType.equals("NonSubscribedUser")) {
			// playContentsToTriggerRecoApi(userType);
			extent.HeaderChildNode("Play different contents to trigger Recommendation API");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			selectLanguages();
			playAContentForReco("Music", getParameterFromXML("musicToTriggerReco"), userType);
			playAContentForReco("News", getParameterFromXML("newsToTriggerReco"), userType);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Home", "Trending on Zee5", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Premium", "Trending Now", true);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Shows", "Trending Shows", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Movies", "Trending Movies", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Music", "Recommended for you", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "News", "Recommended for you", false);
		} else if (userType.equals("SubscribedUser")) {
			playContentsToTriggerRecoApi(userType);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Home", "Trending on Zee5", true);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Home", "You may also like", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Home", "Recommended for you", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Shows", "Recommended for you", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Premium", "Recommended for you", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Movies", "Recommended for you", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Music", "Recommended for you", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "News", "Recommended for you", false);
			verifyRecoTrayAndPlayContentWithoutAPI(userType, "Home", "Because you watched", true);
		} else {
			logger.error("Incorrect userType passed to method");
			extent.extentLogger("incorrectUser", "Incorrect userType passed to method");
		}
	}

	public String convertCamelCase(String string) {
		String[] arr = string.split(" ");
		String finalString = "";
		for (int i = 0; i < arr.length; i++) {
			arr[i] = arr[i].substring(0, 1).toUpperCase() + arr[i].substring(1, arr[i].length()).toLowerCase();
			finalString = finalString + arr[i];
			if (i < arr.length - 1)
				finalString = finalString + " ";
		}
		System.out.println(finalString);
		return "";
	}

	public void playContentsToTriggerRecoApi(String userType) throws Exception {
		extent.HeaderChildNode("Play different contents to trigger Recommendation API");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		selectLanguages();
		playAContentForReco("Music", getParameterFromXML("musicToTriggerReco"), userType);
		playAContentForReco("Movie", getParameterFromXML("movieToTriggerReco"), userType);
		playAContentForReco("Episode", getParameterFromXML("episodeToTriggerReco"), userType);
		playAContentForReco("News", getParameterFromXML("newsToTriggerReco"), userType);
	}

	public void selectLanguages() throws Exception {
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2, "Content Languages");
		waitTime(2000);
		unselectAllContentLanguages();
		clickElementWithLocator(PWAHamburgerMenuPage.objUnselectedKannadaContentLanguage);
		clickElementWithLocator(PWAHamburgerMenuPage.objUnselectedHindiContentLanguage);
		clickElementWithLocator(PWAHamburgerMenuPage.objUnselectedEnglishContentLanguage);
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		waitTime(3000);
	}

	public void selectEnglishContentLanguage() throws Exception {
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2, "Content Languages");
		waitTime(2000);
		unselectAllContentLanguages();
		clickElementWithLocator(PWAHamburgerMenuPage.objUnselectedEnglishContentLanguage);
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		waitTime(3000);

	}

	public void unselectAllContentLanguages() throws Exception {
		List<WebElement> selectedLanguages = getDriver().findElements(PWAHamburgerMenuPage.objSelectedLanguages);
		for (int i = 0; i < selectedLanguages.size(); i++) {
			clickElementWithWebElement(selectedLanguages.get(i));
		}
	}

	public void playAContentForReco(String contentType, String searchKey, String userType) throws Exception {
		logger.info("Playing content to initiate Reco API: " + contentType);
		extent.extentLogger("contentplay", "Playing content to initiate Reco API: " + contentType);
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, searchKey + "\n\n", "Search Edit box");
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(searchKey), 10, "Search Result");
		String contentPlayed = "";

		for (int i = 0; i < 2; i++) {
			try {
				waitTime(5000);
				click(PWASearchPage.objSearchedResult(searchKey), "Search Result");
				break;
			} catch (StaleElementReferenceException e) {
			}
		}

		if (waitForElementPresence(PWAPlayerPage.objContentTitleInConsumptionPage, 30, "Player screen")) {
			contentPlayed = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
			logger.info("Content played: " + contentPlayed);
			extent.extentLogger("contentPlayed", "Content played: " + contentPlayed);
			waitForPlayerAdToComplete("Video Player");
			logger.info("Playing content for some time to trigger Reco API");
			extent.extentLogger("contentPlayed", "Playing content for some time to trigger Reco API");
			waitTime(30000);
			waitTime(30000);
		}
	}

	public void verifyRecoTrayAndPlayContentWithoutAPI1(String userType, String tabName, String recoTrayTitle,
			boolean verifyContentDetails) throws Exception {
		extent.HeaderChildNode(tabName + " tab: Validation of \"" + recoTrayTitle + "\" tray");
		boolean trayFoundInUI = false;
		waitForElementAndClickIfPresent(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, 2, "Back to Top");
		if (navigatetoAnyScreen(tabName)) {
			trayFoundInUI = swipeTillElement(15, PWALandingPages.objTrayTitleInUIContains(recoTrayTitle),
					"\"" + recoTrayTitle + "\" tray");
			if (trayFoundInUI == true) {
				extent.HeaderChildNode(tabName + " tab: Validation of content play in \"" + recoTrayTitle + "\" tray");
				swipeTillElementAndClick(3, PWALandingPages.objFirstAssetInTrayIndex(recoTrayTitle),
						"First Asset in tray");
				String nextPageTitle = "";
				if (waitForElementPresence(PWAShowsPage.objShowsTitle, 2, "Shows Details page")) {
					nextPageTitle = getText(PWAShowsPage.objShowsTitle);
				} else if (waitForElementPresence(PWAPlayerPage.objContentTitleInConsumptionPage, 2, "Player screen")) {
					nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
				}
				if (!nextPageTitle.equals("")) {
					logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
					extent.extentLogger("playerScreen",
							"Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
					waitForElementAndClickIfPresent(PWASubscriptionPages.objPopupCloseButton, 5,
							"Close in Sign Up Pop Up");
					String contentURL = getDriver().getCurrentUrl();
					String[] abc = contentURL.split("/");
					String contentID = abc[abc.length - 1];
					System.out.println("ContentID fetched from URL: " + contentID);
					logger.info("ContentID fetched from URL: " + contentID);
					extent.extentLogger("", "ContentID fetched from URL: " + contentID);
					if (verifyContentDetails)
						verifyRecoTraysFromDetailsPage(userType, contentID);
				} else {
					logger.error("Failed to navigate to consumption/details page: \"" + nextPageTitle + "\"");
					extent.extentLoggerFail("playerScreen",
							"Failed to navigate to consumption/details page: \"" + nextPageTitle + "\"");
				}
			}
		}
	}

	public void verifyRecoTrayAndPlayContentWithoutAPI(String userType, String tabName, String recoTrayTitle,
			boolean verifyContentDetails) throws Exception {
		extent.HeaderChildNode(tabName + " tab: Validation of \"" + recoTrayTitle + "\" tray");
		boolean trayFoundInUI = false;
		if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
			click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
		}
		click(PWAHomePage.objZeeLogo, "Zee logo");
		if (navigatetoAnyScreen(tabName)) {
			int noOfSwipes = 10;
			String trayTitleUI = "";
			boolean foundtrayInPage = false;
			for (int i = 0; i <= noOfSwipes; i++) {
				List<WebElement> trays = findElements(PWALandingPages.objTrayTitle);
				for (int j = 0; j < trays.size(); j++) {
					try {
						trayTitleUI = trays.get(j).getAttribute("innerText");
						if (trayTitleUI.toLowerCase().contains(recoTrayTitle.toLowerCase())) {
							logger.info("Reco tray is present in page");
							extent.extentLogger("recoPresent", "Reco tray is present in page");
							foundtrayInPage = true;
							break;
						}
					} catch (Exception e) {
					}
				}
				if (foundtrayInPage == false) {
					PartialSwipe("UP", 1);
					waitTime(5000);
				} else {
					break;
				}
			}
			if (foundtrayInPage == true) {
				trayFoundInUI = swipeTillElement(15, PWALandingPages.objTrayTitleInUIContains(trayTitleUI),
						"\"" + trayTitleUI + "\" tray");
				if (trayFoundInUI == true) {
					// handle mandatory pop up
					mandatoryRegistrationPopUp(userType);
					extent.HeaderChildNode(
							tabName + " tab: Validation of content play in \"" + trayTitleUI + "\" tray");
					swipeTillElementAndClick(3, PWALandingPages.objFirstAssetInTrayIndex(trayTitleUI),
							"First Asset in tray");
					String nextPageTitle = "";
					waitTime(5000);
					if (verifyIsElementDisplayed(PWAShowsPage.objShowsTitle, "Shows Details page")) {
						nextPageTitle = getText(PWAShowsPage.objShowsTitle);
					} else {
						/*
						 * if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle,
						 * "Subscribe Pop Up")) { click(PWASubscriptionPages.objPopupCloseButton,
						 * "Subscribe Pop Up Close button"); } if(tabName.equalsIgnoreCase("music")) {
						 * System.out.println("ad check for music");
						 * waitForPlayerAdToComplete("Video Player"); }
						 * if(tabName.equalsIgnoreCase("news")) {
						 * System.out.println("ad check for news");
						 * waitForPlayerAdToComplete("Live Player"); } pausePlayer();
						 */
						nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
					}
					if (!nextPageTitle.equals("")) {
						logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
						extent.extentLogger("playerScreen",
								"Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
						String contentURL = getDriver().getCurrentUrl();
						String[] abc = contentURL.split("/");
						String contentID = abc[abc.length - 1];
						// System.out.println("contentID fetched from URL: " + contentID);
						if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
							click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
						}
						if (verifyContentDetails)
							verifyRecoTraysFromDetailsPage(userType, contentID);
					} else {
						logger.error("Failed to navigate to consumption/details page: \"" + nextPageTitle + "\"");
						extent.extentLoggerFail("playerScreen",
								"Failed to navigate to consumption/details page: \"" + nextPageTitle + "\"");
					}
				}
			} else {
				logger.error("Reco tray " + recoTrayTitle + " is not present  in " + tabName + " page");
				extent.extentLoggerFail("trayabsent",
						"Reco tray " + recoTrayTitle + " is not present in " + tabName + " page");
				click(PWAHomePage.objBackToTopArrow, "Back to Top Arrow");
			}
		}
	}

	/**
	 * Validation of Recommendation tray and playing content from recommendation
	 * tray
	 */
	@SuppressWarnings("unused")
	public void verifyRecoTrayAndPlayContent(String userType, String tabName, String recoTrayTitle, String contentLangs,
			boolean verifyContentDetails) throws Exception {
		extent.HeaderChildNode(tabName + " tab: Validation of \"" + recoTrayTitle + "\" tray");
		String trayTitleInUI = "";
		boolean detailsScreenFoundInUI = false;
		String recoTrayTitleAPI = "", firstAssetTitleAPI = "", firstAssetTypeAPI = "", firstAssetID = "";
		ArrayList<Integer> xyOfTray = new ArrayList<Integer>();
		waitTime(10000);
		Response recoResp = ResponseInstance.getRecoDataFromTab(userType, tabName, contentLangs);
		ArrayList<String> trayDetails = returnRecoTrayFirstAssetDetails(recoResp, recoTrayTitle);
		if (trayDetails != null) {
			recoTrayTitleAPI = trayDetails.get(0);
			firstAssetTitleAPI = trayDetails.get(1);
			firstAssetTypeAPI = trayDetails.get(2);
			firstAssetID = trayDetails.get(3);
			waitForElementAndClickIfPresent(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, 2, "Back to Top");
			if (navigatetoAnyScreen(tabName)) {
				trayTitleInUI = swipeTillTray(7, recoTrayTitleAPI, "\"" + recoTrayTitleAPI + "\" tray");
				Swipe("UP", 1);
				Thread.sleep(5000);
			}
		}
		if (!trayTitleInUI.equals("")) {
			extent.HeaderChildNode(tabName + " tab: Validation of content play in \"" + recoTrayTitle + "\" tray");
			if (verifyContentPlayFromRecoTray(userType, trayTitleInUI, firstAssetTitleAPI, firstAssetTypeAPI)) {
				if (verifyContentDetails)
					verifyRecoTraysFromDetailsPage(userType, firstAssetID);
			} else {
				logger.error("Failed to validate the Reco APIs in consumption/details page");
				extent.extentLoggerFail("recoInDetailsFailed",
						"Failed to validate the Reco APIs in consumption/details page");
			}
		}
	}

	public boolean swipeTillElement(int noOfSwipes, By locator, String message) throws Exception {
		for (int i = 0; i <= noOfSwipes; i++) {
			if (waitForElementPresence(locator, 1, message)) {
				return true;
			} else {
				PartialSwipe("UP", 1);
				waitTime(5000);
				if (i == noOfSwipes) {
					logger.error(message + " is not displayed");
					extent.extentLoggerFail("failedToLocate", message + " is not displayed");
				}
			}
		}
		return false;
	}

	public String swipeTillTray(int noOfSwipes, String trayTitle, String message) throws Exception {
		boolean foundTray = false;
		for (int i = 0; i <= noOfSwipes; i++) {
			String Traytitle = trayTitle;
			if (verifyIsElementDisplayed(PWALandingPages.objTrayTitleInUI(Traytitle), Traytitle)) {
				System.out.println(Traytitle + " tray is displayed in show detail page");
				extent.extentLogger("", Traytitle + " tray is displayed in show detail page");
				foundTray = true;
				break;
			} else {
				Swipe("UP", 1);
			}
		}

		if (foundTray == true) {
			extent.extentLogger("", trayTitle + " Reco tray is displayed in show detail page");
			logger.info("Reco tray is displayed in show detail page");
		} else {
			extent.extentLoggerFail("", trayTitle + "Reco tray is not displayed in show detail page");
			logger.error("Reco tray is not displayed in show detail page");
		}
//		main: for (int i = 0; i <= noOfSwipes; i++) {
//			ArrayList<WebElement> trays = new ArrayList<WebElement>();
//			trays = (ArrayList<WebElement>) getDriver().findElements(PWALandingPages.objTrayTitle);
//			for (int j = 0; j < trays.size(); j++) {
//				if (trays.get(j).getAttribute("innerText").equalsIgnoreCase(trayTitle)) {
//					trayTitleInUI = trays.get(j).getText();
//					foundTray = true;
//					break main;
//				}
//			}
//			PartialSwipe("UP", 1);
//			waitTime(2000);
//			if (i == noOfSwipes) {
//				logger.error(message + " is not displayed");
//				extent.extentLoggerFail("failedToLocate", message + " is not displayed");
//			}
//		}
//		if (foundTray == true) {
//			for (int i = 0; i <= noOfSwipes; i++) {
//				if (waitForElementPresence(PWALandingPages.objTrayTitleInUI(trayTitleInUI), 1,
//						trayTitleInUI + " tray")) {
//					return trayTitleInUI;
//				} else {
//					PartialSwipe("UP", 1);
//					waitTime(2000);
//					if (i == noOfSwipes) {
//						logger.error(message + " is not displayed");
//						extent.extentLoggerFail("failedToLocate", message + " is not displayed");
//					}
//				}
//			}
//		}
		return "";
	}

	/**
	 * Function to return reco tray title and first asset title
	 */
	public ArrayList<String> returnRecoTrayFirstAssetDetails(Response response, String requiredTray) {
		ArrayList<String> trayTitleAndFirstContent = new ArrayList<String>();
		boolean found = false;
		int numberOfTrays = 0;
		String trayTitleAPI = "", firstAssetTitleAPI = "", firstAssetTypeAPI = "", firstAssetID = "";
		try {
			numberOfTrays = response.jsonPath().get("buckets.size()");
		} catch (Exception e) {
			logger.error("API error observed");
			extent.extentLoggerFail("apValue", "API error observed");
			return null;
		}
		for (int trays = 0; trays < numberOfTrays; trays++) {
			if (response.jsonPath().get("buckets[" + trays + "].title").toString().toLowerCase()
					.contains(requiredTray.toLowerCase())) {
				trayTitleAPI = response.jsonPath().get("buckets[" + trays + "].title").toString();
				logger.info("Reco Tray fetched from API: \"" + trayTitleAPI + "\"");
				extent.extentLogger("apValue", "Reco Tray fetched from API: \"" + trayTitleAPI + "\"");

				firstAssetTitleAPI = response.jsonPath().get("buckets[" + trays + "].items[0].title").toString();
				logger.info("First Asset Title fetched from API: \"" + firstAssetTitleAPI + "\"");
				extent.extentLogger("apValue", "First Asset Title fetched from API: \"" + firstAssetTitleAPI + "\"");

				firstAssetTypeAPI = response.jsonPath().get("buckets[" + trays + "].items[0].asset_subtype").toString();
				logger.info("First Asset Type fetched from API: \"" + firstAssetTypeAPI + "\"");
				extent.extentLogger("apValue", "First Asset Type fetched from API: \"" + firstAssetTypeAPI + "\"");

				firstAssetID = response.jsonPath().get("buckets[" + trays + "].items[0].id").toString();
				logger.info("First Asset ID fetched from API: \"" + firstAssetID + "\"");
				extent.extentLogger("apValue", "First Asset ID fetched from API: \"" + firstAssetID + "\"");

				found = true;
				break;
			}
		}
		if (found == false) {
			logger.info("Required tray details not present Reco Response");
			extent.extentLogger("apValue", "Required tray details not present Reco Response");
			return null;
		}
		trayTitleAndFirstContent.add(trayTitleAPI);
		trayTitleAndFirstContent.add(firstAssetTitleAPI);
		trayTitleAndFirstContent.add(firstAssetTypeAPI);
		trayTitleAndFirstContent.add(firstAssetID);
		return trayTitleAndFirstContent;
	}

	public void verifyRecoTraysFromDetailsPage(String userType, String firstAssetID) throws Exception {
		extent.HeaderChildNode(
				"Detail/Consumption screen: Validation of Reco trays and playing content from Reco tray");
		Response recoResp = ResponseInstance.getRecoTraysInDetailsPage(userType, firstAssetID);
		ArrayList<String> recoTraysInDetailsPage = getAllRecoTraysFromDetails(recoResp);
		String trayTitleUI = "";
		for (int tray = 0; tray < recoTraysInDetailsPage.size(); tray++) {
			String trayTitleAPI = recoTraysInDetailsPage.get(tray);
			trayTitleUI = swipeTillTray(10, trayTitleAPI, "\"" + trayTitleAPI + "\" tray");
			if (tray == (recoTraysInDetailsPage.size() - 1) && !trayTitleUI.equals("")) {// Verify content play for one
																							// reco tray in content
																							// details
				PartialSwipe("UP", 1);
				String title = getElementPropertyToString("data-minutelytitle",
						PWALandingPages.objFirstAssetInTrayTitle(trayTitleUI), "First Asset title").toString();
				// handle mandatory pop up
				mandatoryRegistrationPopUp(userType);
				waitForElementAndClick(PWALandingPages.objFirstAssetInTrayIndex(trayTitleAPI), 5,
						"First asset " + title);
				String nextPageTitle = "";
				if (waitForElementPresence(PWAShowsPage.objShowsTitle, 2, "Shows Details page")) {
					nextPageTitle = getText(PWAShowsPage.objShowsTitle);
				} else if (waitForElementPresence(PWAPlayerPage.objContentTitleInConsumptionPage, 2, "Player screen")) {
					nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
				}
				if (nextPageTitle.equals(title)) {
					logger.info("Navigated to the correct consumption/details page: \"" + title + "\"");
					extent.extentLogger("playerScreen",
							"Navigated to the correct consumption/details page: \"" + title + "\"");
				} else {
					logger.error("Failed to navigate to consumption/details page: \"" + title + "\"");
					extent.extentLoggerFail("playerScreen",
							"Failed to navigate to consumption/details page: \"" + title + "\"");
				}
				if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe popup")) {
					click(PWASubscriptionPages.objPopupCloseButton, "Close button of Pop Up");
				}
				verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee logo");
			}
		}
	}

	public ArrayList<String> getAllRecoTraysFromDetails(Response response) {
		int numberOfTrays = 0;
		ArrayList<String> recoTrays = new ArrayList<String>();
		try {
			numberOfTrays = response.jsonPath().get("buckets.size()");
		} catch (Exception e) {
			logger.error("API error observed");
			extent.extentLoggerFail("apValue", "API error observed");
			return null;
		}
		for (int tray = 0; tray < numberOfTrays; tray++) {
			recoTrays.add(response.jsonPath().get("buckets[" + tray + "].title").toString());

		}
		logger.info("Reco trays in details page fetched from API: " + recoTrays);
		extent.extentLogger("apValue", "Reco trays in details page fetched from API: " + recoTrays);
		return recoTrays;
	}

	public boolean verifyContentPlayFromRecoTray(String userType, String recoTrayTitleAPI, String firstAssetTitleAPI,
			String firstAssetTypeAPI) throws Exception {
		if (swipeTillElementAndClick(2, PWALandingPages.objFirstAssetInTray(recoTrayTitleAPI, firstAssetTitleAPI),
				"First Asset \"" + firstAssetTitleAPI + "\"")) {
			String nextPageTitle = "";
			if (firstAssetTypeAPI.equals("tvshow")) {
				if (waitForElementPresence(PWAShowsPage.objShowsTitle, 30, "Shows Details page"))
					nextPageTitle = getText(PWAShowsPage.objShowsTitle);
			} else {
				if (waitForElementPresence(PWAPlayerPage.objContentTitleInConsumptionPage, 30, "Player screen"))
					nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
			}
			if (nextPageTitle.equals(firstAssetTitleAPI) && !nextPageTitle.equals("")) {
				logger.info("Navigated to the correct consumption/details page: \"" + nextPageTitle + "\"");
				extent.extentLogger("playerScreen",
						"Navigated to the correct consumption/details page: \"" + nextPageTitle + "\"");
				if (!userType.equals("SubscribedUser")) {
					waitForElementAndClickIfPresent(PWASubscriptionPages.objPopupCloseButton, 5,
							"Close in Subscribe Pop Up");
				}
				return true;
			} else {
				logger.error("Navigated to the incorrect consumption/details page: \"" + nextPageTitle + "\"");
				extent.extentLoggerFail("playerScreen",
						"Navigated to the incorrect consumption/details page: \"" + nextPageTitle + "\"");
				if (!userType.equals("SubscribedUser")) {
					waitForElementAndClickIfPresent(PWASubscriptionPages.objPopupCloseButton, 5,
							"Close in Subscribe Pop Up");
				}
				return false;
			}
		} else
			return false;
	}

	public boolean swipeTillElementAndClick(int noOfSwipes, By locator, String message) throws Exception {
		for (int i = 0; i <= noOfSwipes; i++) {
			if (waitforElementAndClickIfPresent(locator, 5, message))
				return true;
			else {
				Swipe("UP", 1);
				waitTime(3000);
				if (i == noOfSwipes) {
					logger.error("Failed to locate and click on " + message);
					extent.extentLoggerFail("failedToLocate", "Failed to locate and click on " + message);
				}
			}
		}
		return false;
	}

	/**
	 * The method s for element and clicks if present. Returns no error if not
	 * present. Implemented for random popups
	 */
	public boolean waitforElementAndClickIfPresent(By locator, int seconds, String message)
			throws InterruptedException {
		for (int time = 0; time <= seconds; time++) {
			try {
				getDriver().findElement(locator).click();
				logger.info("Clicked on " + message);
				extent.extentLogger("clickedElement", "Clicked on " + message);
				return true;
			} catch (Exception e) {
				Thread.sleep(1000);
			}
		}
		return false;
	}

	public boolean waitForElementPresence(By locator, int seconds, String message) throws InterruptedException {
		for (int i = 0; i <= seconds; i++) {
			try {
				getDriver().findElement(locator).isDisplayed();
				logger.info("" + message + " is displayed");
				extent.extentLogger("elementDisplayed", "" + message + " is displayed");
				return true;
			} catch (Exception e) {
				Thread.sleep(1000);
			}
		}
		return false;
	}

	/**
	 * Function Navigate to landing page of any screen
	 * 
	 * @throws Exception
	 */

	public boolean navigatetoAnyScreen(String screen) throws Exception {
		for (int i = 0; i < 3; i++) {
			try {
				getDriver().findElement(PWAHomePage.objTabName(screen)).click();
				logger.info("Clicked on Tab " + screen);
				extent.extentLogger("tabClick", "Clicked on Tab " + screen);
				return true;
			} catch (Exception e) {
				Actions act = new Actions(getDriver());
				List<WebElement> ele = getDriver().findElements(PWAHomePage.objAllTabs);
				for (int tab = 0; tab < ele.size(); tab++) {
					act.dragAndDropBy(ele.get(tab), 25, 0);
					try {
						getDriver().findElement(PWAHomePage.objTabName(screen)).click();
						logger.info("Clicked on Tab " + screen);
						extent.extentLogger("tabClick", "Clicked on Tab " + screen);
						return true;
					} catch (Exception e1) {
					}
				}
				for (int tab = 0; tab < ele.size(); tab++) {
					act.dragAndDropBy(ele.get(tab), -25, 0);
					try {
						getDriver().findElement(PWAHomePage.objTabName(screen)).click();
						logger.info("Clicked on Tab " + screen);
						extent.extentLogger("tabClick", "Clicked on Tab " + screen);
						return true;
					} catch (Exception e2) {
					}
				}
			}
		}
		logger.error("Failed to click on Tab " + screen);
		extent.extentLoggerFail("tabClick", "Failed to click on Tab " + screen);
		return false;
	}

	/**
	 * ======================================VINAY USER ACTION
	 * MODULE==========================
	 */

	/* =======User Action module ---> My Watchlist section for subscribed user */
	public void MyWatchlistSubscribedUser() throws Exception {
		extent.HeaderChildNode("User Actions : Add To Watchlist functionality validations");
		// Select language
		selectLanguages();
		String episode1 = "Amulya joins the gym - Gattimela";
		String episode2 = "Alia learns about Pragya - Kumkum Bhagya";
		String movie1 = "Robin Hood Forever Enemies";
		String movie2 = "Simba Junior: In New York";
		String video1 = "Kill Marry Hookup with ZEE5 Stars";
		String video2 = "Dance like a man - Trailer";
		// Make sure all watch listed items are removed
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Humburger Menu");
		click(PWAHamburgerMenuPage.objMyAccount, "My Account");
		click(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
		if (verifyIsElementDisplayed(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all button")) {
			click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all button");
			extent.extentLogger("", "Cleared Watchlist tray");
			logger.info("Cleared Watchlist tray");
		} else {
			extent.extentLogger("", "No items in Watchlist tray");
			logger.info("No items in Cleared Watchlist tray");
		}
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		// Episode 1
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, episode1 + "\n", "Search Edit box: " + episode1);
		verifyElementPresentAndClick(PWASearchPage.objSearchEpisodesTab, "Episodes tab");
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(episode1), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(episode1), "Search Result");
		waitTime(3000);
		if (checkElementDisplayed(PWAPlayerPage.watchListBtnNotAdded, "Add to Watchlist")) {
			click(PWAPlayerPage.watchListBtnNotAdded, "Add to Watch list");
		} else {
			if (checkElementDisplayed(PWAPlayerPage.watchListBtnAlreadyAdded, "Added to Watchlist")) {
				extent.extentLogger("", "Content is already added to Watchlist");
				logger.info("Content is already added to Watchlist");
			}
		}
		// Episode 2
		// handle mandatory pop up
		mandatoryRegistrationPopUp(user);
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, episode2 + "\n", "Search Edit box: " + episode2);
		verifyElementPresentAndClick(PWASearchPage.objSearchEpisodesTab, "Episodes tab");
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(episode2), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(episode2), "Search Result");
		waitTime(3000);
		if (verifyIsElementDisplayed(PWAPlayerPage.watchListBtnNotAdded, "Add to Watchlist")) {
			click(PWAPlayerPage.watchListBtnNotAdded, "Add to Watch list");
		} else {
			if (verifyIsElementDisplayed(PWAPlayerPage.watchListBtnAlreadyAdded, "Added to Watchlist")) {
				extent.extentLogger("", "Content is already added to Watchlist");
				logger.info("Content is already added to Watchlist");
			}
		}
		// Movie 1
		// handle mandatory pop up
		mandatoryRegistrationPopUp(user);
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, movie1 + "\n", "Search Edit box: " + movie1);
		verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(movie1), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(movie1), "Search Result");
		waitTime(3000);
		if (verifyIsElementDisplayed(PWAPlayerPage.watchListBtnNotAdded, "Add to Watchlist")) {
			click(PWAPlayerPage.watchListBtnNotAdded, "Add to Watch list");
		} else {
			if (verifyIsElementDisplayed(PWAPlayerPage.watchListBtnAlreadyAdded, "Added to Watchlist")) {
				extent.extentLogger("", "Content is already added to Watchlist");
				logger.info("Content is already added to Watchlist");
			}
		}
		// Movie 2
		// handle mandatory pop up
		mandatoryRegistrationPopUp(user);
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, movie2 + "\n", "Search Edit box: " + movie2);
		verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(movie2), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(movie2), "Search Result");
		waitTime(3000);
		if (verifyIsElementDisplayed(PWAPlayerPage.watchListBtnNotAdded, "Add to Watchlist")) {
			click(PWAPlayerPage.watchListBtnNotAdded, "Add to Watch list");
		} else {
			if (verifyIsElementDisplayed(PWAPlayerPage.watchListBtnAlreadyAdded, "Added to Watchlist")) {
				extent.extentLogger("", "Content is already added to Watchlist");
				logger.info("Content is already added to Watchlist");
			}
		}
		// Video 1
		// handle mandatory pop up
		mandatoryRegistrationPopUp(user);
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, video1 + "\n", "Search Edit box: " + video1);
		verifyElementPresentAndClick(PWASearchPage.objSearchVideosTab, "Videos tab");
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(video1), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(video1), "Search Result");
		waitTime(3000);
		if (verifyIsElementDisplayed(PWAPlayerPage.watchListBtnNotAdded, "Add to Watchlist")) {
			click(PWAPlayerPage.watchListBtnNotAdded, "Add to Watch list");
		} else {
			if (verifyIsElementDisplayed(PWAPlayerPage.watchListBtnAlreadyAdded, "Added to Watchlist")) {
				extent.extentLogger("", "Content is already added to Watchlist");
				logger.info("Content is already added to Watchlist");
			}
		}
		// Video 2
		// handle mandatory pop up
		mandatoryRegistrationPopUp(user);
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, video2 + "\n", "Search Edit box: " + video2);
		verifyElementPresentAndClick(PWASearchPage.objSearchVideosTab, "Videos tab");
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(video2), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(video2), "Search Result");
		waitTime(3000);
		if (verifyIsElementDisplayed(PWAPlayerPage.watchListBtnNotAdded, "Add to Watchlist")) {
			click(PWAPlayerPage.watchListBtnNotAdded, "Add to Watch list");
		} else {
			if (verifyIsElementDisplayed(PWAPlayerPage.watchListBtnAlreadyAdded, "Added to Watchlist")) {
				extent.extentLogger("", "Content is already added to Watchlist");
				logger.info("Content is already added to Watchlist");
			}
		}
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Humburger Menu");
		click(PWAHamburgerMenuPage.objMyAccount, "My Account");
		click(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
		// Verify Episodes
		// Verify My Watchlist header is displayed
		if (verifyIsElementDisplayed(PWAAddToWatchListPage.objMyWatchlistHeader, "My Watchlist") == true) {
			extent.extentLogger("", "My Watchlist header is displayed");
			logger.info("My Watchlist header text is displayed");
		} else {
			extent.extentLoggerFail("", "My Watchlist header is not displayed");
			logger.error("My Watchlist header is not displayed");
		}
		List<WebElement> episodes = findElements(PWAAddToWatchListPage.objWatchlistedItems);
		int episodesno = episodes.size();
		extent.extentLogger("", "Number of items in Episodes tab is " + episodesno);
		logger.info("Number of items in Episodes tab is " + episodesno);
		if (episodesno == 2) {
			extent.extentLogger("", "Verified that only episodes are displayed in episodes fragment");
			logger.info("Verified that only episodes are displayed in episodes fragment");
		} else {
			extent.extentLoggerFail("", "Episodes displayed in that episodes fragment has failed");
			logger.error("Episodes displayed in episodes fragment has failed");
		}
		// Verify watchlisted episode items
		if (!verifyIsElementDisplayed(PWAAddToWatchListPage.objWatchlistedItem(episode1),
				"Watchlisted episode: " + episode1)) {
			extent.extentLoggerFail("", "Add to watchlist functionality for first Episode " + episode1 + " has failed");
			logger.error("Add to watchlist functionality for first Episode " + episode1 + " has failed");
		}
		if (!verifyIsElementDisplayed(PWAAddToWatchListPage.objWatchlistedItem(episode2),
				"Watchlisted episode: " + episode2)) {
			extent.extentLoggerFail("",
					"Add to watchlist functionality for second Episode " + episode2 + " has failed");
			logger.error("Add to watchlist functionality for second Episode " + episode2 + " has failed");
		}
		// Verify single delete functionality
		verifyElementPresentAndClick(PWAAddToWatchListPage.objWatchlistedItemCancel(episode1),
				"Remove icon for " + episode1);
		if (verifyIsElementDisplayed(PWAAddToWatchListPage.objWatchlistedItem(episode1),
				"Watchlisted episode: " + episode1)) {
			extent.extentLoggerFail("",
					"Remove Watchlisted item functionality for first Episode " + episode1 + " has failed");
			logger.error("Remove Watchlisted item functionality for first Episode " + episode1 + " has failed");
		}
		// Verify remove all functionality
		verifyElementPresentAndClick(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all button");
		if (verifyIsElementDisplayed(PWAAddToWatchListPage.objEmptyWatchlistPage,
				"Empty Watchlist page with 'Uh-Oh! Nothing to watch'")) {
			extent.extentLogger("", "Verified Remove All functionality for Episodes tab");
			logger.info("Verified Remove All functionality for Episodes tab");
		} else {
			extent.extentLoggerFail("", "Remove All functionality has failed for Episodes tab");
			logger.error("Remove All functionality has failed for Episodes tab");
		}
		// Verify Movies
		verifyElementPresentAndClick(PWAAddToWatchListPage.objMoviesTab, "Movies tab in Watchlist page");
		List<WebElement> movies = findElements(PWAAddToWatchListPage.objWatchlistedItems);
		int moviesno = movies.size();
		extent.extentLogger("", "Number of items in Movies tab is " + moviesno);
		logger.info("Number of items in Movies tab is " + moviesno);
		if (moviesno == 2) {
			extent.extentLogger("", "Verified that only movies are displayed in movies fragment");
			logger.info("Verified that only movies are displayed in movies fragment");
		} else {
			extent.extentLoggerFail("", "Movies displayed in movies fragment has failed");
			logger.error("Movies displayed in movies fragment has failed");
		}
		// Verify watchlisted movie items
		if (!verifyIsElementDisplayed(PWAAddToWatchListPage.objWatchlistedItem(movie1),
				"Watchlisted movie: " + movie1)) {
			extent.extentLoggerFail("", "Add to watchlist functionality for first Movie " + movie1 + " has failed");
			logger.error("Add to watchlist functionality for first Movie " + movie1 + " has failed");
		}
		if (!verifyIsElementDisplayed(PWAAddToWatchListPage.objWatchlistedItem(movie2),
				"Watchlisted movie: " + movie2)) {
			extent.extentLoggerFail("", "Add to watchlist functionality for second Movie " + movie2 + " has failed");
			logger.error("Add to watchlist functionality for second Movie " + movie2 + " has failed");
		}
		// Verify single delete functionality
		verifyElementPresentAndClick(PWAAddToWatchListPage.objWatchlistedItemCancel(movie1),
				"Remove icon for " + movie1);
		if (verifyIsElementDisplayed(PWAAddToWatchListPage.objWatchlistedItem(movie1),
				"Watchlisted movie: " + movie1)) {
			extent.extentLoggerFail("",
					"Remove Watchlisted item functionality for first Movie " + movie1 + " has failed");
			logger.error("Remove Watchlisted item functionality for first Movie " + movie1 + " has failed");
		}
		// Verify remove all functionality
		verifyElementPresentAndClick(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all button");
		if (verifyIsElementDisplayed(PWAAddToWatchListPage.objEmptyWatchlistPage,
				"Empty Watchlist page with 'Uh-Oh! Nothing to watch'")) {
			extent.extentLogger("", "Verified Remove All functionality for Movies tab");
			logger.info("Verified Remove All functionality for Movies tab");
		} else {
			extent.extentLoggerFail("", "Remove All functionality has failed for Movies tab");
			logger.error("Remove All functionality has failed for Movies tab");
		}
		// Verify Videos
		verifyElementPresentAndClick(PWAAddToWatchListPage.objVideoTab, "Videos tab in Watchlist page");
		List<WebElement> videos = findElements(PWAAddToWatchListPage.objWatchlistedItems);
		int videosno = videos.size();
		extent.extentLogger("", "Number of items in Videos tab is " + videosno);
		logger.info("Number of items in Videos tab is " + videosno);
		if (videosno == 2) {
			extent.extentLogger("", "Verified that only videos are displayed in videos fragment");
			logger.info("Verified that only videos are displayed in videos fragment");
		} else {
			extent.extentLoggerFail("", "Videos displayed in videos fragment has failed");
			logger.error("Videos displayed in videos fragment has failed");
		}
		// Verify watchlisted video items
		if (!verifyIsElementDisplayed(PWAAddToWatchListPage.objWatchlistedItem(video1),
				"Watchlisted video: " + video1)) {
			extent.extentLoggerFail("", "Add to watchlist functionality for first Video " + video1 + " has failed");
			logger.error("Add to watchlist functionality for first Video " + video1 + " has failed");
		}
		if (!verifyIsElementDisplayed(PWAAddToWatchListPage.objWatchlistedItem(video2),
				"Watchlisted video: " + video2)) {
			extent.extentLoggerFail("", "Add to watchlist functionality for second Video " + video2 + " has failed");
			logger.error("Add to watchlist functionality for second Video " + video2 + " has failed");
		}
		// Verify single delete functionality
		verifyElementPresentAndClick(PWAAddToWatchListPage.objWatchlistedItemCancel(video1),
				"Remove icon for " + video1);
		if (verifyIsElementDisplayed(PWAAddToWatchListPage.objWatchlistedItem(video1),
				"Watchlisted video: " + video1)) {
			extent.extentLoggerFail("",
					"Remove Watchlisted item functionality for first Video " + video1 + " has failed");
			logger.error("Remove Watchlisted item functionality for first Video " + video1 + " has failed");
		}
		// Verify remove all functionality
		verifyElementPresentAndClick(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all button");
		if (verifyIsElementDisplayed(PWAAddToWatchListPage.objEmptyWatchlistPage,
				"Empty Watchlist page with 'Uh-Oh! Nothing to watch'")) {
			extent.extentLogger("", "Verified Remove All functionality for Videos tab");
			logger.info("Verified Remove All functionality for Videos tab");
		} else {
			extent.extentLoggerFail("", "Remove All functionality has failed for Videos tab");
			logger.error("Remove All functionality has failed for Videos tab");
		}
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		// handle mandatory pop up
		mandatoryRegistrationPopUp(user);
	}

	/*
	 * My Reminder section for subscribed user
	 */
	@SuppressWarnings("unused")
	public void MyReminder() throws Exception {
		extent.HeaderChildNode("User Actions : My Reminder functionality validations");
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);

		// Verify user is navigate to EPG section from Live TV
		navigateToAnyScreen("Live TV");
		waitTime(2000);
		// Click on Channel guide
		click(PWALiveTVPage.objChannelGuideToggle, "Channel Guide");

		waitTime(10000);
		waitTime(10000);
		if (findElement(PWALiveTVPage.objChannelGuideToggle).getAttribute("class").contains("active")) {
			extent.extentLogger("Verify Navigation", "User is navigated to EPG section post tapping Channel guide");
			logger.info("User is navigated to EPG section post tapping Channel guide");
		} else {
			extent.extentLoggerFail("Verify Navigation",
					"User did not navigated to EPG section post tapping Channel guide");
			logger.error("User did not navigated to EPG section post tapping Channel guide");
		}
		// Verify EPG section contains Title and the description of the respective show
		if (verifyElementDisplayed(PWALiveTVPage.objShowTitle)) {
			String title = getElementPropertyToString("innerText", PWALiveTVPage.objShowTitle, "Show title");
			extent.extentLogger("Verify Show title", "Show title in EPG section is : " + title);
			logger.info("Show title in EPG section is : " + title);
		} else {
			extent.extentLoggerFail("Verify Show title", "The show title in EPG section is not displayed");
			logger.error("The show title in EPG section is not displayed");

		}
		if (verifyElementDisplayed(PWALiveTVPage.objShowTimeInterval)) {
			String title = getElementPropertyToString("innerText", PWALiveTVPage.objShowTimeInterval,
					"Show time interval");
			extent.extentLogger("Verify Show title", "Show time interval in EPG section is : " + title);
			logger.info("Show time interval in EPG section is : " + title);
		} else {
			extent.extentLoggerFail("Verify Show title", "The show time interval in EPG section is not displayed");
			logger.error("The show time interval in EPG section is not displayed");

		}
		// click on any show
		click(PWALiveTVPage.objFutureChannelInfo, "Future Show");
		if (verifyIsElementDisplayed(PWALiveTVPage.objShowDesc, "Future Show description")) {
			String showDesc = getElementPropertyToString("innerText", PWALiveTVPage.objShowDesc,
					"Future Show description");
			extent.extentLogger("Verify descrption of the show", "The description of the show is :" + showDesc);
			logger.info("The description of the show is :" + showDesc);
		} else {
			extent.extentLoggerFail("Verify descrption of the show", "Show description is not displayed");
			logger.error("Show description is not displayed");
		}
		// Click on close button
		click(PWALiveTVPage.objPopupCloseButton, "Close button");
		// Click on date
		click(PWALiveTVPage.objTomorrowDate, "Tomorrow date");
		FilterLanguage("Bengali");
		// Verify Share and Reminder option is available
		click(PWALiveTVPage.objBanglaShow1, "Show detail");
		verifyElementPresent(PWALiveTVPage.objShareOption, "Share option");
		if (verifyElementPresent(PWALiveTVPage.objRemainderButton, "Reminder option for upcoming show")) {
			// Verify user can click on Reminder option
			// click on Reminder option
			click(PWALiveTVPage.objRemainderButton, "Reminder option");
			if (getDriver().findElement(PWALiveTVPage.objRemainderButton).getAttribute("class")
					.contains("btnIconActive")) {
				extent.extentLogger("Verify user can Click on Reminder option", "User can click on Reminder option");
				logger.info("User can click on Reminder option");
			} else {
				extent.extentLoggerFail("Verify user can Click on Reminder option",
						"User can not click on Reminder option");
				logger.error("User can not click on Reminder option");
			}

			// Click on close button
			click(PWALiveTVPage.objPopupCloseButton, "Close button");
			waitTime(3000);
		} else {
			extent.extentLoggerWarning("",
					"Reminder functionality could not be validated because the selected show has no Reminder option");
			logger.info(
					"Reminder functionality could not be validated because the selected show has no Reminder option");
			click(PWALiveTVPage.objCloseLanguagePopuUpBtn, "Close in Pop Up");
			click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
		// Verify user can not add Movies to Reminder
		// Select any movie
		click(PWALiveTVPage.objMovie, "Movie card");
		if (verifyIsElementDisplayed(PWALiveTVPage.objRemainderButton, "Reminder button for Movie card") == false) {
			extent.extentLogger("Verify Movie show don't have Reminder option",
					"Reminder option is not available for Movie card");
			logger.info("Reminder option is not available for Movie card");
		} else {
			extent.extentLoggerFail("Verify Movie show don't have Reminder option",
					"Reminder option is available for Movie card");
			logger.error("Reminder option is available for Movie card");

		}
		// Click on close button
		click(PWALiveTVPage.objPopupCloseButton, "Close button");
		Swipe("Down", 1);
		getDriver().navigate().refresh();
		click(PWALiveTVPage.objTomorrowDate, "Tomorrow date");

		FilterLanguageUnselectOthers("Hindi", "Hindi Movies");
		waitForElement(PWALiveTVPage.objEPG, 60, "Channels");
		waitTime(10000);
		waitTime(10000);
		Swipe("UP", 1);
		waitTime(10000);
		Swipe("UP", 1);
		waitTime(10000);
		Swipe("UP", 1);
		waitTime(10000);
		String show1 = "", show2 = "";
		// First Show
		if (verifyIsElementDisplayed(PWALiveTVPage.objShowZEETVHDShow1ForReminder, "ZEE TV HD Show")) {
			show1 = getElementPropertyToString("innerText", PWALiveTVPage.objShowZEETVHDShow1ForReminder,
					"ZEE TV HD Show");
			click(PWALiveTVPage.objShowZEETVHDShow1ForReminder, "ZEE TV HD Show " + show1);
			verifyElementPresent(PWALiveTVPage.objShareOption, "Share option");
		}
		if (verifyElementPresent(PWALiveTVPage.objRemainderButton, "Reminder Option")) {
			click(PWALiveTVPage.objRemainderButton, "Reminder option");
			if (getDriver().findElement(PWALiveTVPage.objRemainderButton).getAttribute("class")
					.contains("btnIconActive")) {
				extent.extentLogger("", "Reminder option is active, click has been successful");
				logger.info("Reminder option is active, click has been successful");
			} else {
				extent.extentLoggerFail("", "Reminder option is not active, click has failed");
				logger.error("Reminder option is not active, click has failed");
			}
			click(PWALiveTVPage.objPopupCloseButton, "Close button");
			waitTime(3000);
		} else {
			extent.extentLoggerFail("", "Reminder option is not present for the Show");
			logger.error("Reminder option is not present for the Show");
		}
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		navigateToAnyScreen("Home");
		// Verify user is navigated to Reminder screen from Home page
		String activeTab = getDriver().findElement(PWAHomePage.objActiveTab).getText();
		if (activeTab.equals("Home")) {
			extent.extentLogger("Verify current tab", "User is in " + activeTab + " tab");
			logger.info("User is in Home tab");
		} else {
			extent.extentLoggerFail("Verify current tab", "User is not in Home tab");
			logger.error("User is not in Home tab");
		}
		// Click on Hamburger menu
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		// Click on My account
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyAccount, "My account");
		// Click on My Reminders
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyRemainder, "My Reminder");
		// Verify user is navigated to My Reminder screen
		if (verifyIsElementDisplayed(PWAMyRemindersPage.objMyReminderHeader, "My Reminder Header") == true) {
			extent.extentLogger("Verify the Navigation ",
					"User is Navigated to " + getDriver().findElement(PWAMyRemindersPage.objMyReminderHeader).getText()
							+ " screen from " + activeTab + "page");
			logger.info(
					"User is Navigated to " + getDriver().findElement(PWAMyRemindersPage.objMyReminderHeader).getText()
							+ " screen from " + activeTab + "page");
		} else {
			extent.extentLoggerFail("Verify Navigation ",
					"User failed to navigate from Home page to My Reminders screen");
			logger.error("User failed to navigate from Home page to My Reminders screen");
		}
		// Verify that Remove all button is displayed
		if (verifyIsElementDisplayed(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all option") == true) {
			extent.extentLogger("Verify Remove all option is displayed",
					"Remove all option is displayed in Reminder screen");
			logger.info("Remove all option is displayed in Reminder screen");
		} else {
			extent.extentLoggerFail("Verify Remove all option is displayed",
					"Remove all option is not displayed in Reminder screen");
			logger.error("Remove all option is not displayed in Reminder screen");
		}
		// Verify that added reminder contents contains title, start and end time
		// verify title is displayed

		int totalContentsInReminder = getDriver().findElements(PWAMyRemindersPage.objTotalContentsInReminder).size();
		System.out.println(totalContentsInReminder);
		for (int i = 0; i < totalContentsInReminder; i++) {
			if (findElements(PWAMyRemindersPage.objTotalContentsInReminder).get(i).isDisplayed()) {
				extent.extentLogger("Verify title", "The content name at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objTotalContentsInReminder).get(i).getText());
				logger.info("The content name at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objTotalContentsInReminder).get(i).getText());
			} else {
				extent.extentLoggerFail("Verify title", "Content title is not displayed in Reminder screen");
				logger.error("Content title is not displayed in Reminder screen");
			}
		}
		// Verify Start and end time
		int dateTime = getDriver().findElements(PWAMyRemindersPage.objDateTime).size();
		for (int i = 0; i < dateTime; i++) {
			if (findElements(PWAMyRemindersPage.objDateTime).get(i).isDisplayed()) {
				extent.extentLogger("Verify date and time", "The date and time at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objDateTime).get(i).getText());
				logger.info("The date and time at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objDateTime).get(i).getText());
			} else {
				extent.extentLoggerFail("Verify date and time", "Date and time is not displayed in Reminder screen");
				logger.error("Date and time is not displayed in Reminder screen");
			}
		}
		// Verify user is able to delete the content by tapping on cancel button
		int contentsBeforeDeleting = getDriver().findElements(PWAAddToWatchListPage.objCancelBtn).size();
		click(PWAAddToWatchListPage.objCancelBtn(1), " Cancel button");
		int contentsAfterDeleting = getDriver().findElements(PWAAddToWatchListPage.objCancelBtn).size();
		if (contentsAfterDeleting < contentsBeforeDeleting) {
			extent.extentLogger("Verify cancel button", "User successfully deleted the content from Reminder screen");
			logger.info("User Successfully deleted the content from Reminder screen");
		} else {
			extent.extentLoggerFail("Verify cancel button",
					"User can not delete the contents from the reminder screen");
			logger.error("User can not delete the contents from the reminder screen");
		}
		// Verify the Remove all functionality
		// click on Remove all
		click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all");
		// Verify contents are deleted
		if (verifyIsElementDisplayed(PWAMyRemindersPage.objNoReminderMessage, "No Reminder message") == true) {
			extent.extentLogger("Verify Remove all option",
					"User successfully deleted all the contents from the Reminder screen");
			logger.info("User successfully deleted all the contents from the Reminder screen");
		} else {
			extent.extentLoggerFail("Verify Remove all option",
					"User can not delete all the contents from the Reminder screen");
			logger.error("User can not  delete all the contents from the Reminder screen");
		}

		// Verify We have nothing to remind you message is displayed
		if (verifyIsElementDisplayed(PWAMyRemindersPage.objNoReminderMessage, "No Reminder message") == true) {
			extent.extentLogger("Verify No reminder message",
					"The message " + getDriver().findElement(PWAMyRemindersPage.objNoReminderMessage).getText()
							+ " is displayed when there is no contents are available");
			logger.info("The message " + getDriver().findElement(PWAMyRemindersPage.objNoReminderMessage).getText()
					+ " is displayed when there is no contents are available");
		} else {
			extent.extentLoggerFail("Verify No Reminder message",
					"The message We have nothing to remind you message is not displayed");
			logger.error("The message We have nothing to remind you message is not displayed");
		}

		// verify device back button functionality
		// Click on device back button
		getDriver().navigate().back();
		// Verify user is navigated to Home screen
		if (activeTab.equals("Home")) {
			extent.extentLogger("Verify current tab",
					"User is navigated to " + activeTab + " tab after pressing device back button");
			logger.info("User is navigated to previous page after clicking on device back button");
		} else {
			extent.extentLoggerFail("Verify current tab",
					"User did not navigate to previos page after clicking on device back button");
			logger.error("User did not navigate to previos page after clicking on device back button");
		}

	}

	public void MyReminderUpdated() throws Exception {
		extent.HeaderChildNode("User Actions : My Reminder functionality validations");
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		navigateToAnyScreen("Live TV");
		waitTime(2000);
		click(PWALiveTVPage.objChannelGuideToggle, "Channel Guide");
		waitTime(10000);
		waitTime(10000);
		waitTime(10000);
		// Verify EPG section contains Title and the description of the respective show
		String currentTimeSlot = getElementPropertyToString("innerText", PWALiveTVPage.objActiveTimeSlot,
				"Current Time Slot");
		extent.extentLogger("", "Current time slot is : " + currentTimeSlot);
		logger.info("Current time slot is : " + currentTimeSlot);
		if (verifyElementPresent(PWALiveTVPage.objOngoingShow(currentTimeSlot), "Ongoing Show") == true) {
			String title = getElementPropertyToString("innerText", PWALiveTVPage.objShowTitle, "Ongoing Show");
			extent.extentLogger("", "The Ongoing Show title is : " + title);
			logger.info("The Ongoing Show title is : " + title);
		}
		if (verifyElementPresent(PWALiveTVPage.objOngoingShowTiming(currentTimeSlot), "Ongoing Show Timing") == true) {
			String timing = getElementPropertyToString("innerText", PWALiveTVPage.objOngoingShowTiming(currentTimeSlot),
					"Ongoing Show timing");
			extent.extentLogger("", "The Ongoing Show Timing is : " + timing);
			logger.info("The Ongoing Show Timing is : " + timing);
		}
		String upcomingTimeSlot = getElementPropertyToString("innerText", PWALiveTVPage.objUpcominfTimeSlot,
				"Upcoming Time Slot");
		extent.extentLogger("", "Upcoming time slot is : " + upcomingTimeSlot);
		logger.info("Upcoming time slot is : " + upcomingTimeSlot);
		if (verifyElementPresent(PWALiveTVPage.objUpcomingShow(upcomingTimeSlot), "Upcoming Show") == true) {
			String title = getElementPropertyToString("innerText", PWALiveTVPage.objUpcomingShow(upcomingTimeSlot),
					"Upcoming Show title");
			extent.extentLogger("", "The Upcoming Show title is : " + title);
			logger.info("The Upcoming Show title is : " + title);
		}
		if (verifyElementPresent(PWALiveTVPage.objUpcomingShowTiming(upcomingTimeSlot),
				"Upcoming Show Timing") == true) {
			String timing = getElementPropertyToString("innerText",
					PWALiveTVPage.objUpcomingShowTiming(upcomingTimeSlot), "Upcoming Show timing");
			extent.extentLogger("", "The Upcoming Show Timing is : " + timing);
			logger.info("The Upcoming Show Timing is : " + timing);
		}
		JSClick(PWALiveTVPage.objUpcomingShow(upcomingTimeSlot), "Upcoming Show");
		if (verifyElementPresent(PWALiveTVPage.objShowDesc, "Upcoming Show Description") == true) {
			String showDesc = getElementPropertyToString("innerText", PWALiveTVPage.objShowDesc,
					"Upcoming Show Description");
			extent.extentLogger("", "The Upcoming Show Description is :" + showDesc);
			logger.info("The Upcoming Show Description is :" + showDesc);
		}
		click(PWALiveTVPage.objPopupCloseButton, "Close button"); // Click on date
		click(PWALiveTVPage.objTomorrowDate, "Tomorrow date");
		FilterLanguageUnselectOthers("Hindi", "Hindi Movies");
		waitForElement(PWALiveTVPage.objEPG, 60, "Channels");
		waitTime(10000);
		waitTime(10000);
		Swipe("UP", 1);
		waitTime(10000);
		Swipe("UP", 1);
		waitTime(10000);
		Swipe("UP", 1);
		waitTime(10000);
		String show1 = "", show2 = "";
		// First Show
		if (verifyIsElementDisplayed(PWALiveTVPage.objShowZEETVHDShow1ForReminder, "ZEE TV HD Show")) {
			show1 = getElementPropertyToString("innerText", PWALiveTVPage.objShowZEETVHDShow1ForReminder,
					"ZEE TV HD Show");
			click(PWALiveTVPage.objShowZEETVHDShow1ForReminder, "ZEE TV HD Show " + show1);
			verifyElementPresent(PWALiveTVPage.objShareOption, "Share option");
		}
		if (verifyElementPresent(PWALiveTVPage.objRemainderButton, "Reminder Option")) {
			click(PWALiveTVPage.objRemainderButton, "Reminder option");
			if (getDriver().findElement(PWALiveTVPage.objRemainderButton).getAttribute("class")
					.contains("btnIconActive")) {
				extent.extentLogger("", "Reminder option is active, click has been successful");
				logger.info("Reminder option is active, click has been successful");
			} else {
				extent.extentLoggerFail("", "Reminder option is not active, click has failed");
				logger.error("Reminder option is not active, click has failed");
			}
			click(PWALiveTVPage.objPopupCloseButton, "Close button");
			waitTime(3000);
		} else {
			extent.extentLoggerFail("", "Reminder option is not present for the Show");
			logger.error("Reminder option is not present for the Show");
		}
		// Second Show
		if (verifyIsElementDisplayed(PWALiveTVPage.objShowZEETVHDShow2ForReminder, "ZEE TV HD Show")) {
			show2 = getElementPropertyToString("innerText", PWALiveTVPage.objShowZEETVHDShow2ForReminder,
					"ZEE TV HD Show");
			click(PWALiveTVPage.objShowZEETVHDShow2ForReminder, "ZEE TV HD Show " + show2);
			verifyElementPresent(PWALiveTVPage.objShareOption, "Share option");
		}
		if (verifyElementPresent(PWALiveTVPage.objRemainderButton, "Reminder Option")) {
			click(PWALiveTVPage.objRemainderButton, "Reminder option");
			if (getDriver().findElement(PWALiveTVPage.objRemainderButton).getAttribute("class")
					.contains("btnIconActive")) {
				extent.extentLogger("", "Reminder option is active, click has been successful");
				logger.info("Reminder option is active, click has been successful");
			} else {
				extent.extentLoggerFail("", "Reminder option is not active, click has failed");
				logger.error("Reminder option is not active, click has failed");
			}
			click(PWALiveTVPage.objPopupCloseButton, "Close button");
			waitTime(3000);
		} else {
			extent.extentLoggerFail("", "Reminder option is not present for the Show");
			logger.error("Reminder option is not present for the Show");
		}
		// Verify user can not add Movies to Reminder
		// Select any movie
		Swipe("UP", 1);
		waitTime(10000);
		String movie = getElementPropertyToString("title", PWALiveTVPage.objeMovieForReminder, "Movie");
		click(PWALiveTVPage.objMovieShow, "Movie " + movie);
		if (verifyIsElementDisplayed(PWALiveTVPage.objRemainderButton, "Reminder button for movie") == false) {
			extent.extentLogger("", "Verified that Reminder option is not available for Movie");
			logger.info("Verified that Reminder option is not available for Movie");
		} else {
			extent.extentLoggerFail("", "Verified that Reminder option is available for Movie");
			logger.error("Verified that Reminder option is available for Movie");
		}
		// Click on close button
		click(PWALiveTVPage.objPopupCloseButton, "Close button");
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		navigateToAnyScreen("Home"); // Verify user is navigated to Reminder screen from Home page
		String activeTab = getDriver().findElement(PWAHomePage.objActiveTab).getText();
		if (activeTab.equals("Home")) {
			extent.extentLogger("Verify current tab", "User is in " + activeTab + " tab");
			logger.info("User is in Home tab");
		} else {
			extent.extentLoggerFail("Verify current tab", "User is not in Home tab");
			logger.error("User is not in Home tab");
		}
		// Click on Hamburger menu
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		// Click on My account
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyAccount, "My account"); // Click on My Reminders
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyRemainder, "My Reminder"); // Verify user is navigated to
																							// My Reminder screen
		if (verifyIsElementDisplayed(PWAMyRemindersPage.objMyReminderHeader, "My Reminder Header") == true) {
			extent.extentLogger("",
					"User is Navigated to " + getDriver().findElement(PWAMyRemindersPage.objMyReminderHeader).getText()
							+ " screen from " + activeTab + "page");
			logger.info(
					"User is Navigated to " + getDriver().findElement(PWAMyRemindersPage.objMyReminderHeader).getText()
							+ " screen from " + activeTab + "page");
		} else {
			extent.extentLoggerFail("Verify Navigation ",
					"User failed to navigate from Home page to My Reminders screen");
			logger.error("User failed to navigate from Home page to My Reminders screen");
		}
		// Verify that Remove all button is displayed
		if (verifyIsElementDisplayed(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all option") == true) {
			extent.extentLogger("", "Remove all option is displayed in Reminder screen");
			logger.info("Remove all option is displayed in Reminder screen");
		} else {
			extent.extentLoggerFail("", "Remove all option is not displayed in Reminder screen");
			logger.error("Remove all option is not displayed in Reminder screen");
		}
		// Verify that added reminder contents contains title, start and end time
		// verify title is displayed
		int totalContentsInReminder = getDriver().findElements(PWAMyRemindersPage.objTotalContentsInReminder).size();
		extent.extentLogger("", "Total items in Reminder screen: " + totalContentsInReminder);
		logger.info("Total items in Reminder screen: " + totalContentsInReminder);
		for (int i = 0; i < totalContentsInReminder; i++) {
			if (findElements(PWAMyRemindersPage.objTotalContentsInReminder).get(i).isDisplayed()) {
				extent.extentLogger("Verify title", "The content name at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objTotalContentsInReminder).get(i).getText());
				logger.info("The content name at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objTotalContentsInReminder).get(i).getText());
			} else {
				extent.extentLoggerFail("Verify title", "Content title is not displayed in Reminder screen");
				logger.error("Content title is not displayed in Reminder screen");
			}
		}
		// Verify Start and end time
		int dateTime = getDriver().findElements(PWAMyRemindersPage.objDateTime).size();
		for (int i = 0; i < dateTime; i++) {
			if (findElements(PWAMyRemindersPage.objDateTime).get(i).isDisplayed()) {
				extent.extentLogger("Verify date and time", "The date and time at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objDateTime).get(i).getText());
				logger.info("The date and time at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objDateTime).get(i).getText());
			} else {
				extent.extentLoggerFail("", "Date and time is not displayed in Reminder screen");
				logger.error("Date and time is not displayed in Reminder screen");
			}
		}
		// Verify user is able to delete the content by tapping on cancel button
		int contentsBeforeDeleting = getDriver().findElements(PWAAddToWatchListPage.objCancelBtn).size();
		click(PWAAddToWatchListPage.objCancelBtn(1), " Cancel button");
		int contentsAfterDeleting = getDriver().findElements(PWAAddToWatchListPage.objCancelBtn).size();
		if (contentsAfterDeleting < contentsBeforeDeleting) {
			extent.extentLogger("Verify cancel button", "User successfully deleted the content from Reminder screen");
			logger.info("User Successfully deleted the content from Reminder screen");
		} else {
			extent.extentLoggerFail("Verify cancel button",
					"User can not delete the contents from the reminder screen");
			logger.error("User can not delete the contents from the reminder screen");
		}
		// Verify the Remove all functionality
		// click on Remove all
		click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all");
		// Verify contents are deleted
		if (verifyIsElementDisplayed(PWAMyRemindersPage.objNoReminderMessage, "No Reminder message") == true) {
			extent.extentLogger("Verify Remove all option",
					"User successfully deleted all the contents from the Reminder screen");
			logger.info("User successfully deleted all the contents from the Reminder screen");
		} else {
			extent.extentLoggerFail("Verify Remove all option",
					"User can not delete all the contents from the Reminder screen");
			logger.error("User can not  delete all the contents from the Reminder screen");
		}
		// Verify We have nothing to remind you message is displayed
		if (verifyIsElementDisplayed(PWAMyRemindersPage.objNoReminderMessage, "No Reminder message") == true) {
			extent.extentLogger("Verify No reminder message",
					"The message " + getDriver().findElement(PWAMyRemindersPage.objNoReminderMessage).getText()
							+ " is displayed when there is no contents are available");
			logger.info("The message " + getDriver().findElement(PWAMyRemindersPage.objNoReminderMessage).getText()
					+ " is displayed when there is no contents are available");
		} else {
			extent.extentLoggerFail("Verify No Reminder message",
					"The message We have nothing to remind you message is not displayed");
			logger.error("The message We have nothing to remind you message is not displayed");
		}
		// verify device back button functionality
		// Click on device back button
		getDriver().navigate().back();
		// Verify user is navigated to Home screen
		if (activeTab.equals("Home")) {
			extent.extentLogger("Verify current tab",
					"User is navigated to " + activeTab + " tab after pressing device back button");
			logger.info("User is navigated to previous page after clicking on device back button");
		} else {
			extent.extentLoggerFail("Verify current tab",
					"User did not navigate to previos page after clicking on device back button");
			logger.error("User did not navigate to previos page after clicking on device back button");
		}
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/*
	 * ==========================Guest_User_User-Actions_Module====================
	 */

	public void UserActionGuestUser() throws Exception {
		extent.HeaderChildNode("User Action module- Guest user Validataions");
		// Validate Continue watching tray is not displayed for Guest user
		waitTime(3000);
		if (verifyIsElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue Watching tray") == false) {
			extent.extentLogger("Verify Continue Watching tray",
					"Continue watching tray is not displayed for guest user");
			logger.info("Continue watching tray is not displayed for guest user");
		} else {
			extent.extentLoggerFail("Verify Continue Watching tray",
					"Continue watching tray is displaying for guest user");
			logger.info("Continue watching tray is displaying for guest user");
		}
		// Verify Add to Reminder is not displayed for guest user
		// Click on live tv tab
		navigateToAnyScreen("Live TV");
		// click on channel guide
		click(PWALiveTVPage.objChannelGuideToggle, "Channel guide");
		// Verify Reminder option is not available
		// Click on date
		click(PWALiveTVPage.objTomorrowDate, "Tomorrow date");
		FilterLanguage("Bengali");
		waitforChannelGuideToLoad();
		// Verify Share and Reminder option is available
		click(PWALiveTVPage.objBanglaShow1, "Show detail");
		if (verifyIsElementDisplayed(PWALiveTVPage.objRemainderButton, "Reminder option for upcoming show ") == false) {
			extent.extentLogger("Verify Reminder button for guest user ",
					"Reminder button is not displayed for the Guest user");
			logger.info("Reminder button is not displayed for the Guest user");
		} else {
			extent.extentLoggerFail("Verify Reminder button for guest user ",
					"Reminder button is displayed for the Guest user");
			logger.error("Reminder button is displayed for the Guest user");
		}

	}

//	public void FilterLanguage() throws Exception{
//		click(PWALiveTVPage.objFilterLanguageChannelGuide,"Filter language");
//		int size = findElements(PWALiveTVPage.objSelectedlang).size();
//		for(int i=1; i<= size; i++) {
//			click(PWALiveTVPage.objSelectedlang,"Selected language");
//		}
//		waitTime(5000);
//		click(PWALiveTVPage.objKannadaLang,"Kannada language");
//		click(PWALiveTVPage.objApplyBtn,"Apply button");
////		click(PWALiveTVPage.objApplyBtn,"Apply button");
//	}

	// ------------------------------------SMOKE
	// ------------------------------------------
	/*
	 * Function for Onboarding scenarios
	 */
	public void OnboardingScenario(String userType) throws Exception {
		dismissSystemPopUp();
		switch (userType) {
		case "Guest":
			launchCheck(userType);
			navigationToMyPlanFromHome("NewRegister");
			navigationToMyPlanFromHome("Logged in");
			playerInLineLoginCheck();
			navigationToCTAInPlayerFromSearch();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			waitTime(3000);
			if (verifyIsElementDisplayed(PWALoginPage.objLoginBtn, "Login")) {
				extent.extentLogger("Not Logged in", "User is not logged in");
				logger.info("User is not logged in");
				noLogoutOption();
				phoneNumberRegistration();
				// emailRegistration();
				forgotPasswordEmailSanity();
				forgotPasswordMobileNumberSanity();
				extent.HeaderChildNode("Login through Facebook");
				facebookLogin();
				// gmailLogin();
				// forgotPassword();
				logout();
				getDriver().switchTo().window("CDwindow-0");
				String url = getParameterFromXML("url");
				getDriver().get(url);
			}
			break;

		case "NonSubscribedUser":
			dismissSystemPopUp();
			verificationOfLoggedIn();
			myaccountOptionsVerification(userType);
			NavigateToMyProfilePage();
			verificationsInMyProfilePage();
			editProfileFunctionality();
			subscribeCTAFunctionality();
			changePasswordFunctionality();
			break;

		case "SubscribedUser":
			dismissSystemPopUp();
			verificationOfLoggedIn();
			myaccountOptionsVerification(userType);
			NavigateToMyProfilePage();
			verificationsInMyProfilePage();
			editProfileFunctionality();
			myPlanVerification();
			changePasswordFunctionality();
		}
	}

	/**
	 * Generic function Verification Of Options displayed in MyAccount.
	 */
	public void myaccountOptionsVerification(String userType) throws Exception {
		extent.HeaderChildNode("My account options verification");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		click(PWAHamburgerMenuPage.objDownArrow("My Account"), "Expander button");
		// verifications
		NavigationsToMyWatchlist();
		//NavigationsToMyReminders();
		NavigationsToMySubsccription(userType);
		NavigationsToMyTransactions();
	}

	/**
	 * Function for Navigation to MyProfilePage.
	 */
	public void NavigateToMyProfilePage() throws Exception {
		extent.HeaderChildNode("Navigate To My Profile Page");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIcon, "Profile icon");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profile page");
	}

	/**
	 * Function To verify the options present in MyProfilePage.
	 */
	public void verificationsInMyProfilePage() throws Exception {
		extent.HeaderChildNode("Verifications In My Profile Page");
		verifyElementPresent(PWAHamburgerMenuPage.objProfilePageNameTxt, "User name");
		verifyElementPresent(PWAHamburgerMenuPage.objProfilePageUserIdTxt, "User id");
		verifyElementPresent(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		verifyElementPresent(PWAHamburgerMenuPage.objChangePasswordBtn, "Change password button");
	}

	/**
	 * Function To check the Functionality of SubscribeCTA option.
	 */
	public void subscribeCTAFunctionality() throws Exception {
		extent.HeaderChildNode("SubscribeCTAFuncionality");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objSubscritionBtn, "Subscribe cta")) {
			click(PWAHamburgerMenuPage.objSubscritionBtn, "Subscribe cta");
			verifyElementPresent(PWALoginPage.objsubscription, "Subscriptions page");
			getDriver().navigate().back();
			logger.info("Clicked on Back button");
			extent.extentLogger("Back button", "Clicked on Back button");
			verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profile page");
		} else {
			logger.info("Cta is not visible");
			extent.extentLogger("Cta", "Cta is not visible");
		}
	}

	public void myPlanVerification() throws Exception {
		extent.HeaderChildNode("My Plan Verification In My Profile page");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objMyplanText, "My plan column")) {
			verifyElementPresent(PWAHamburgerMenuPage.objMyActivePlan, "My active plan");
			click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger is present");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIcon, "Profile icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profile page");
		} else {
			logger.info("My plan is not displayed");
			extent.extentLogger("My Plan", "My plan is not displayed");
		}
	}

	public void NavigationsToMySubscription() throws Exception {
		extent.HeaderChildNode("My Subscription");
		click(PWAHamburgerMenuPage.objDownArrow("My Account"), "Expander button");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objExploreItemBtn("My Subscription"), "My Subscriptions");
		waitTime(4000);
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Subscription"), "My Subscription page");
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger button");
	}

	/**
	 * Function To check the SignIn page from MyPlans screen.
	 */
	public void navigationToMyPlanFromHome(String UserType) throws Exception {
		extent.HeaderChildNode("Guest user: Validating user navigated to signin screen from my plans screen");
		logger.info("Guest user: Validating user navigated to signin screen from my plans screen");
		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
		waitTime(3000);
		if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
			logger.info("User is navigated to Subscription page");
			extent.extentLogger("Subscription page", "User is navigated to Subscription page");

			if (UserType == "Logged in") {
				navigationToSignInFromMyplans("Logged in");
			}

			if (UserType == "NewRegister") {
				navigationToSignInFromMyplans("NewRegister");
			}
		} else {
			logger.info("User is not navigated to Subscription page");
			extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
		}
	}

	/**
	 * Function To check the SignIn page from MyPlans screen.
	 */

	public void navigationToSignInFromMyplans(String Usertype) throws Exception {
		Swipe("UP", 1);
		if (verifyIsElementDisplayed(PWASubscriptionPages.objadhocPopupArea, "Adoric Popup")) {
			click(PWASubscriptionPages.objadhocPopupSignUpBtn, "Adoric Popup Sign UP Button");
			waitTime(4000);
			verifyElementPresent(PWASubscriptionPages.objadhocPopupRegestrationScreen, "Sign up page");
			waitTime(3000);
			getDriver().navigate().back();
			Swipe("UP", 1);
			verifyElementPresentAndClick(PWASubscriptionPages.objSelectedSubscriptionPlanAmount, "Subscription plan");
			Swipe("UP", 1);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Sign in page");

			if (Usertype == "Logged in") {
				System.out.println("nereg");
				type(PWALoginPage.objEmailField, "zee5latest@gmail.com", "Email");
				hideKeyboard();
				waitTime(2000);

				verifyElementPresent(PWASubscriptionPages.objContinueBtn, "Continue button");
				waitTime(10000);
				click(PWASubscriptionPages.objContinueBtn, "Continue button");

				// click(PWASubscriptionPages.objProceedBtnInSubscriptionPage, "Proceed
				// button");
				waitTime(3000);

				verifyElementPresentAndClick(PWASubscriptionPages.objPasswordPopupInSubscriptionPage, "Password field");
				waitTime(5000);
				type(PWASubscriptionPages.objPasswordField, "User@123\n", "Password");
				hideKeyboard();
				// click(PWASubscriptionPages.objProceedButtonInPassword, "Proceed");
				waitTime(3000);

				// verifyElementPresent(PWASubscriptionPages.objContinueBtnn, "Continue
				// button");
				/// waitTime(3000);

				// click(PWASubscriptionPages.objContinueBtnn, "Continue button");
				// waitTime(10000);

				if (verifyIsElementDisplayed(PWASubscriptionPages.objAccountDetailInSubscription, "Account details")) {
					logger.info("Verified subscribe flow for logged in user");
					extent.extentLogger("Verification", "Verified subscribe flow for logged in user");
				}
			}
			if (Usertype == "NewRegister") {
				System.out.println("nereg");
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email");
				waitTime(2000);
				type(PWALoginPage.objEmailField, RandomStringGenerator(5) + "@gmail.com", "Email");
				hideKeyboard();

				verifyElementPresent(PWASubscriptionPages.objContinueBtnn, "Continue button");
				waitTime(10000);

				click(PWASubscriptionPages.objContinueBtnn, "Continue button");
				waitTime(5000);

				// waitTime(3000);
				verifyElementPresentAndClick(PWASubscriptionPages.objPasswordPopupInSubscriptionPage,
						"Password pop up");
				click(PWASubscriptionPages.objPasswordField, "Password");
				waitTime(5000);
				type(PWASubscriptionPages.objPasswordField, "User@123\n", "Password");
				hideKeyboard();
				waitTime(3000);

				// verifyElementPresent(PWASubscriptionPages.objContinueBtnn, "Continue
				// button");
				// waitTime(10000);

				// click(PWASubscriptionPages.objContinueBtnn, "Continue button");
				// waitTime(10000);

				if (verifyIsElementDisplayed(PWASubscriptionPages.objAccountDetailInSubscription, "Account details")) {
					logger.info("Verified subscribe flow for logged in user");
					extent.extentLogger("Verification", "Verified subscribe flow for logged in user");
				}
			}

			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee logo");
			if (verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Home page")) {
				logger.info("User is navigated to Home page");
				extent.extentLogger("Home page", "User is navigated to Home page");
				logout();
			}
		} else {
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objSelectedSubscriptionPlanAmount, "Subscription plan");
			Swipe("UP", 1);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Sign in page");
			if (Usertype == "Logged in") {
				type(PWALoginPage.objEmailField, "zee5latest@gmail.com", "Email");
				hideKeyboard();

				verifyElementPresent(PWASubscriptionPages.objContinueBtnn, "Continue button");
				waitTime(10000);

				click(PWASubscriptionPages.objContinueBtnn, "Continue button");
				waitTime(5000);

				// click(PWASubscriptionPages.objProceedBtnInSubscriptionPage, "Proceed
				// button");
				// waitTime(3000);
				verifyElementPresentAndClick(PWASubscriptionPages.objPasswordPopupInSubscriptionPage, "Password field");
				click(PWASubscriptionPages.objPasswordField, "Password");
				waitTime(5000);
				type(PWASubscriptionPages.objPasswordField, "User@123\n", "Password");
				hideKeyboard();

				// verifyElementPresent(PWASubscriptionPages.objContinueBtnn, "Continue
				// button");
				// waitTime(10000);

				// click(PWASubscriptionPages.objContinueBtnn, "Continue button");
				waitTime(5000);

				try {
					getDriver().findElement(PWASubscriptionPages.objProceedButtonInPassword).click();
				} catch (Exception e) {
				}
				waitTime(10000);
				if (verifyIsElementDisplayed(PWASubscriptionPages.objAccountDetailInSubscription, "Account details")) {
					logger.info("Verified subscribe flow for logged in user");
					extent.extentLogger("Verification", "Verified subscribe flow for logged in user");
				}
			}

			if (Usertype == "NewRegister") {
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Sign in page");
				waitTime(1000);
				type(PWALoginPage.objEmailField, RandomStringGenerator(5) + "@gmail.com", "Email");
				hideKeyboard();

				verifyElementPresent(PWASubscriptionPages.objContinueBtnn, "Continue button");
				waitTime(10000);

				click(PWASubscriptionPages.objContinueBtnn, "Continue button");
				waitTime(5000);

				// click(PWASubscriptionPages.objProceedBtnInSubscriptionPage, "Proceed
				// button");
				// waitTime(3000);
				verifyElementPresentAndClick(PWASubscriptionPages.objPasswordPopupInSubscriptionPage,
						"Password pop up");
				click(PWASubscriptionPages.objPasswordField, "Password");
				waitTime(5000);
				type(PWASubscriptionPages.objPasswordField, "User@123\n", "Password");
				hideKeyboard();

				// verifyElementPresent(PWASubscriptionPages.objContinueBtnn, "Continue
				// button");
				// waitTime(10000);

				// click(PWASubscriptionPages.objContinueBtnn, "Continue button");
				waitTime(5000);

				if (verifyIsElementDisplayed(PWASubscriptionPages.objAccountDetailInSubscription, "Account details")) {
					logger.info("Verified subscribe flow for New Register user");
					extent.extentLogger("Verification", "Verified subscribe flow for New Register user");
				}
			}
			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee logo");
			if (verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Home page")) {
				logger.info("User is navigated to Home page");
				extent.extentLogger("Home page", "User is navigated to Home page");
				logout();
				waitTime(4000);
			}
		}
	}

	public void playerInLineLoginCheck() throws Exception {
		extent.HeaderChildNode("Login check from Player Inline popup");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovieNoTrailer");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Field");
		hideKeyboard();
		waitTime(3000);
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		click(PWASearchPage.objPremiumSearchResult(keyword), "Premium content");
		waitTime(12000);
		waitTime(12000);
		if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe pop up")) {
			click(PWASubscriptionPages.objPopupCloseButton, "Close button of Pop Up");
		}
//		verifyElementPresentAndClick(PWASubscriptionPages.objLoginLinkInPlayer, "Login link");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objLoginLinkInPlayer, "Login link");
		JSClick(PWASubscriptionPages.objLoginLinkInPlayer, "Login link");
		waitTime(5000);
		if (verifyIsElementDisplayed(PWALoginPage.objEmailField, "Login")) {
			logger.info("User is redirected to login page");
			extent.extentLogger("Login", "User is redirected to login page");
		}
		Back(1);
		waitTime(8000);
		if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe pop up")) {
			// click(PWASubscriptionPages.objGetPremiumPopupCloseButton, "close button");
			click(PWASubscriptionPages.objPopupCloseButton, "Close button of Pop Up");
		}
		click(PWAHomePage.objZeeLogo, "Zee logo");
	}

	/**
	 * Function To check the SignIn page from CTA in playerscreen and Verification
	 * of SubscribePopUP.
	 */
	public void navigationToCTAInPlayerFromSearch() throws Exception {
		extent.HeaderChildNode("Validating Subscribe popup post tapping Cta in player");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovie");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		hideKeyboard();
		waitTime(3000);
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		click(PWASearchPage.objSearchResultPremiumContent2, "Premium content");
		waitTime(10000);
		verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumCTAInPlater, "CTA in player");
		waitTime(5000);// added by Tanisha
		navigationToSignInFromCTAInPlayer();
	}

	/**
	 * Function To check the SignIn page from CTA in playerscreen and Verification
	 * of SubscribePopUP.
	 */
	public void navigationToSignInFromCTAInPlayer() throws Exception {
		extent.HeaderChildNode("CTA In Player");
		// verifyElementPresent(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe
		// popup");

		verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page");
		verifyElementPresentAndClick(PWASubscriptionPages.objSelectedSubscriptionPlanAmount, "Subscription plan");
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");

		// verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupPlan,
		// "Subscribe popup plan");
		// verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopipProceed,
		// "Proceed button in Subscribe popup");
		waitTime(4000);
		verifyElementPresent(PWALoginPage.objEmailField, "Sign in page");
		waitTime(1000);

		verifyElementPresentAndClick(PWAHomePage.objPopUpClose, "Close icon");
		waitTime(2000);

		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee logo");
		if (verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Home page")) {
			logger.info("User is navigated to Home page");
			extent.extentLogger("Home page", "User is navigated to Home page");
		}
	}

	/**
	 * Function To check the Funcionality of ForgotPassword option.
	 */
	public void forgotPassword() throws Exception {
		extent.HeaderChildNode("Forgot password functionality");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWALoginPage.objLoginBtn, "Login button");
		waitTime(2000);
		verifyElementPresent(PWALoginPage.objEmailField, "Login page");
		verifyElementPresentAndClick(PWALoginPage.objForgotPasswordTxt, "Forgot password");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objForgotPassswordPage, "Forgot password page");
		type(PWALoginPage.objEmailField, "zee5latest@gmail.com", "Email field");
		verifyElementPresentAndClick(PWALoginPage.objForgotPasswordLinkButton, "Reset password button");
		waitTime(3000);
		((JavascriptExecutor) getDriver()).executeScript("window.open();");
		waitTime(4000);
		System.out.println(getDriver().getWindowHandles());
		getDriver().switchTo().window("CDwindow-3");
		String url = GmailInbox.readEmail("ZEE5 account password reset request");
		if (!url.isEmpty()) {
			getDriver().get(url);
			waitTime(3000);
			System.out.println(getDriver().getCurrentUrl());
			Thread.sleep(5000);
			verifyElementPresent(PWALoginPage.objForgotNextPageText, "Reset password page");
			type(PWALoginPage.objForgotNextPagePwsswordFielfd, "User@123\n", "Password");
			waitTime(3000);
			type(PWALoginPage.objForgotNextPageConfirmPasswordField, "User@123\n", "Confirm password");
			Wait(10000);
			if (verifyIsElementDisplayed(PWALoginPage.objEmailField, "Login page")) {
				type(PWALoginPage.objEmailField, "zee5latest@gmail.com", "Login");
				hideKeyboard();
				type(PWALoginPage.objPasswordField, "User@123\n", "Password");
				hideKeyboard();
				waitTime(2000);
				click(PWALoginPage.objLoginBtn, "LoginButton");
				waitTime(5000);
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objProfileIcon, "profile icon")) {
				logger.info("User is successfully changed password and logged in");
				extent.extentLogger("Logged in", "User is successfully changed password and logged in");
				click(PWAHamburgerMenuPage.objCloseHamburgerMenu, "Close button");
			} else {
				logger.info("User is not logged in");
				extent.extentLogger("Logged in", "User is not logged in");
			}
		} else {
			logger.info("User is not logged in");
			extent.extentLogger("Logged in", "User is not logged in");
		}
	}

	/**
	 * Function To check That Logout Option is not displayed in Hamburger menu.
	 */
	public void noLogoutOption() throws Exception {
		extent.HeaderChildNode("Checking no Logout option displayed for guest user");
		if (!(verifyIsElementDisplayed(PWAHamburgerMenuPage.objExploreItemBtn("Logout"), "Logout"))) {
			logger.info("Logout option is not displayed for guest user");
			extent.extentLogger("Logout option", "Logout option is not displayed");
		}

	}

	/**
	 * Function To check That user is logged in succesfully and Login,SignUP ption
	 * is not displayed for Logged in user.
	 */
	public void verificationOfLoggedIn() throws Exception {
		extent.HeaderChildNode("Verification of Logged in");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objProfileIcon, "Profile icon")) {
			logger.info("User is logged in successfully");
			extent.extentLogger("Profile icon", "User is logged in successfully");
		}
		if (!(verifyIsElementDisplayed(PWALoginPage.objLoginBtn, "Login"))) {
			logger.info("Login button is not displayed for logged in user");
			extent.extentLogger("Login Button", "Login button is not displayed for logged in user");
		}
		if (!(verifyIsElementDisplayed(PWALoginPage.objSignUpBtn, "SignUp"))) {
			logger.info("SignUp button is not displayed for logged in user");
			extent.extentLogger("Sign Up Button", "SignUp button is not displayed for logged in user");
		}
		click(PWAHamburgerMenuPage.objHamburgerClose, "Close of Hamburger Menu");
	}

	/**
	 * Validation of Landing Pages
	 */
	public void ValidatingLandingPages(String UserType) throws Exception {
		FirstTimeUserTrendingonzee5(UserType);
		dismissSystemPopUp();
		landingpagePropertiesValidation(UserType);
		BackTOTop();
		landingPagesValidation(UserType, "Home");
		extent.HeaderChildNode("Verifing the trays displayed in Home Tab");
		pagesTrayValidation("Home");
	}

	/**
	 * Function to verify landing page properties
	 */
	public void landingpagePropertiesValidation(String userType) throws Exception {
		extent.HeaderChildNode("Landing Page validation");
		verifyElementPresent(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
		verifyElementPresent(PWALandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo");
		verifyElementPresent(PWALandingPages.obj_Pwa_SearchBtn, "Search");
		if (userType.equalsIgnoreCase("SubscribedUser"))
			verifyElementNotPresent(PWALandingPages.obj_Pwa_Subcription_teaser_btn, 5);
		else
			verifyIsElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subscribe button");
	}

	/**
	 * Method to close Adoric pop up
	 */
	public void closeAdoricPopUp() {
		List<WebElement> popUps = getDriver().findElements(PWASubscriptionPages.adoricCloseBtn);
		int size = popUps.size();
		for (int pop = 0; pop < size; pop++) {
			try {
				popUps.get(pop).click();
				System.out.println("clicked " + pop);
			} catch (Exception e) {
				System.out.println("failed " + pop);
			}
		}
	}

	/**
	 * Validation of Trending on Zee 5 tray
	 */
	public void FirstTimeUserTrendingonzee5(String userType) throws Exception {
		extent.HeaderChildNode("Validation of Trending on ZEE5 tray for " + userType + " user");
		PartialSwipe("UP", 1);
		if (verifyIsElementDisplayed(PWALandingPages.obj_Pwa_Trending_On_Zee5, "Trending on Zee5 tray")) {
			System.out.println("Trending on ZEE5 is found for first time user");
			logger.info("Verify for first time user it should show Trending on Zee5 tray is Pass");
			extent.extentLogger("apValue", "Verify for first time user it should show Trending on Zee5 tray is Pass");
		} else {
			System.out.println("Not a first time user");
			Swipe_till_Zee5IsTrending();
		}
	}

	/**
	 * Function to swipe till tray Trending on Zee5
	 */
	public void Swipe_till_Zee5IsTrending() throws Exception {
		waitTime(5000);
		int found = 0;
		for (int i = 0; i <= 2; i++) {
			if (verifyIsElementDisplayed(PWALandingPages.obj_Pwa_Trending_On_Zee5, "Trending on Zee5 tray")) {
				System.out.println("element found");
				logger.info("Verify for first time user it should show Trending on Zee5 tray is Pass");
				extent.extentLogger("apValue",
						"Verify for first time user it should show Trending on Zee5 tray is Pass");
				found = 1;
				break;
			} else {
				Swipe("up", 1);
				waitTime(4000);
			}
			if (found == 0) {
				System.out.println("Trending on Zee5 is not found");
				logger.error("Verify for first time user it should show Trending on Zee5 tray is Fail");
				extent.extentLoggerFail("apValue",
						"Verify for first time user it should show Trending on Zee5 tray is Fail");
			}
		}
	}

	/**
	 * Method to swipe till element
	 */
	public void swipeTillElementLocated(By locator, int swipeCount, String message) throws Exception {
		for (int swipe = 0; swipe <= swipeCount; swipe++) {
			try {
				getDriver().findElement(locator);
				extent.extentLogger("swiped", "Swiped until " + message);
				logger.info("Swiped until " + message);
				break;
			} catch (Exception e) {
				if (swipe == swipeCount) {
					extent.extentLogger("swiped", "Failed to locate " + message);
					logger.info("Failed to locate " + message);
				} else {
					Swipe("UP", 1);
					Thread.sleep(3000);
				}
			}
		}
	}

	/**
	 * Validate navigation from vodafone native app to Zee5 pwa
	 */
	public void ValidateVodafonePlayFunctionFromNativeApp() throws Exception {
		extent.HeaderChildNode("VodafonePlayFunctionFromNativeApp");
		// Click on Hamburger
		verifyElementPresentAndClick(NativeVodafonePlayPage.HamburgerBtn, "VodafonePlay Hamburger");
		Thread.sleep(3000);
		Swipe("UP", 1);
		Thread.sleep(3000);
		// Click on ZEE5 Icon
		verifyElementPresentAndClick(NativeVodafonePlayPage.Zee5Icon, "Zee5 Icon");
		Thread.sleep(3000);
		// Click on SearchIcon
		verifyElementPresentAndClick(NativeVodafonePlayPage.ChannelSearchIcon, "search icon");
		Thread.sleep(3000);
		// Click on Search Textbox
		verifyElementPresentAndClick(NativeVodafonePlayPage.SearchTextBox, "Search TextBox");
		Thread.sleep(3000);
		// Send Value for Saerch
		type(NativeVodafonePlayPage.SearchTextBox, "Commando 3\n", "Search TextBox");
		Thread.sleep(3000);
		hideKeyboard();
		// Click on Searched Data
		verifyElementPresentAndClick(NativeVodafonePlayPage.searchedData("Commando 3"), "Searched Data");
		// NAVIGATION TO ZEE5 PWA
		Thread.sleep(10000);
		System.out.println("Contexts : " + getDriver().getContextHandles());
		// Changing the Context form native to webview
		getDriver().context("WEBVIEW_1");
		// Navigated URL
		System.out.println("Navigated to URL : " + getDriver().getCurrentUrl());
		logger.info("Navigated to URL : " + getDriver().getCurrentUrl());
		extent.extentLogger("<b>" + "Navigated to URL : " + getDriver().getCurrentUrl(), "Navigated to URL");
		// Selected Content title
		System.out.println(getDriver().findElement(PWAVodafonePlayPage.consumptionPageTitle).getText());
		logger.info("Navigated to URL : " + getDriver().getCurrentUrl());
		extent.extentLogger("<b>" + "Navigated to URL : " + getDriver().getCurrentUrl(), "Navigated to URL");
		// TO VERIFY THE BROWSER
		String str = getCurrentActivity();
		if (str.contains("chrome")) {
			System.out.println("Chrome browser is opened");
			logger.info("Chrome Browser is Opened");
			extent.extentLogger("<b>" + "Chrome Browser is Opened", "Chrome Browser is Opened");
		}
		// Click on Zee5 Hamburger
		verifyElementPresentAndClick(PWAVodafonePlayPage.HamburgerBtn, "Zee5 Hamburger");
		Thread.sleep(3000);
		if (verifyIsElementDisplayed(PWAVodafonePlayPage.MySubscription, "MySubscription") == false) {
			System.out.println("User has no option to purchase the plans");
			logger.info("User has no option to purchase the plans");
			extent.extentLogger("<b>" + "User has no option to purchase the plans",
					"User has no option to purchase the plans");
		}
	}

	/**
	 * Method to verify Consumptions screen tapping on any content card
	 * 
	 * @param userType
	 * @param contentType
	 * @param contentTitle
	 * @param devicePin
	 * @throws Exception
	 */
	public void verifyConsumptionsScreenTappingOnCard(String userType, String contentType, String contentTitle)
			throws Exception {
		extent.HeaderChildNode("Verify Consumption Page for Content type: " + contentType);
		String consumptionPageTitle = "";
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		if (contentType.equals("Live TV")) {
			navigateToAnyScreen("Live TV");
			String url = getDriver().getCurrentUrl();
			reloadURL(url);
			if (waitforLiveTabToLoad()) {
				waitTime(4000);
				waitForElement(PWAShowsPage.objFirstAssetTitleLiveTvCard, 30, "Content title");
				contentTitle = getText(PWAShowsPage.objFirstAssetTitleLiveTvCard);
				extent.extentLogger("", "Card Title fetched: " + contentTitle);
				logger.info("Card Title fetched: " + contentTitle);
				verifyElementPresentAndClick(PWAShowsPage.objFirstAssetTitleLiveTvCard, "Live TV Card");
				waitForElement(PWAPlayerPage.objContentTitleLiveTV, 30, "Content title");
				consumptionPageTitle = getText(PWAPlayerPage.objContentTitleLiveTV);
				if (consumptionPageTitle.contains(contentTitle)) {
					extent.extentLogger("correctNavigation",
							"Successfully navigated to the correct Consumption page: " + consumptionPageTitle);
					logger.info("Successfully navigated to the correct Consumption page " + consumptionPageTitle);
					/*
					 * if (contentType.equals("Live TV")) pausePlayerForLiveTV(); else
					 * pausePlayerAndGetLastPlayedTime();
					 */
				} else {
					extent.extentLoggerFail("incorrectNavigation",
							"Navigated to incorrect Consumption page: " + consumptionPageTitle);
					logger.error("Navigated to incorrect Consumption page: " + consumptionPageTitle);
				}
			}
		} else {
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
			waitForElement(PWASearchPage.objSearchedResult(contentTitle), 30, "Search Result");
			verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
			// waitForElementAndClickIfPresent(PWASubscriptionPages.objPopupCloseButton, 5,
			// "Close in Pop Up");
			waitTime(4000);
			// waitForElement(PWAPlayerPage.objContentTitle, 30, "Content title");
			// consumptionPageTitle = getText(PWAPlayerPage.objContentTitle);

			waitForElement(PWAPlayerPage.objContentTitle1, 30, "Content title");
			consumptionPageTitle = getText(PWAPlayerPage.objContentTitle1);

			if (consumptionPageTitle.contains(contentTitle)) {
				extent.extentLogger("correctNavigation",
						"Successfully navigated to the correct Consumption page: " + consumptionPageTitle);
				logger.info("Successfully navigated to the correct Consumption page " + consumptionPageTitle);
				/*
				 * if (contentType.equals("Live TV")) pausePlayerForLiveTV(); else
				 * pausePlayerAndGetLastPlayedTime();
				 */

			} else {
				extent.extentLoggerFail("incorrectNavigation",
						"Navigated to incorrect Consumption page: " + consumptionPageTitle);
				logger.error("Navigated to incorrect Consumption page: " + consumptionPageTitle);
			}
		}
	}

	/**
	 * Method to pause the player and get the duration lapsed
	 * 
	 * @throws Exception
	 */
	public void pausePlayerAndGetLastPlayedTime() throws Exception {
		waitForPlayerAdToComplete("Video Player");
		if (pausePlayer() == true) {
			getPlayerDuration();
			Thread.sleep(4000);
		} else {
			extent.extentLoggerFail("failedToPause", "Failed to pause Player");
			logger.error("Failed to pause Player");
		}
	}

	/**
	 * Pause Player for Live TV
	 * 
	 * @throws Exception
	 */
	@SuppressWarnings("rawtypes")
	public void pausePlayerForLiveTV() throws Exception {
		waitForPlayerAdToComplete("Live Player");
		int deviceWidth = getDriver().manage().window().getSize().width;
		int deviceHeight = getDriver().manage().window().getSize().height;
		int x = deviceWidth / 2;
		System.out.println("x: " + x);
		int y = deviceHeight / 4;
		System.out.println("y: " + y);
		boolean playerPaused = false;
		for (int trial = 0; trial <= 4; trial++) {
			System.out.println("trial :" + trial);
			try {
				TouchAction act = new TouchAction(getDriver());
				act.tap(PointOption.point(x, y)).perform();
				extent.extentLogger("playerTap", "Tapped on Live Player");
				logger.info("Tapped on Live Player");
				try {
					getDriver().findElement(PWAPlayerPage.pauseBtn).click();
					try {
						getDriver().findElement(PWAPlayerPage.playBtn);
						extent.extentLogger("playerPaused", "Paused Live Player");
						logger.info("Paused Live Player");
						playerPaused = true;
						break;
					} catch (Exception e) {
					}
				} catch (Exception e) {
					try {
						getDriver().findElement(PWAPlayerPage.playBtn);
						extent.extentLogger("playerPaused", "Paused Live Player");
						logger.info("Paused Live Player");
						playerPaused = true;
						break;
					} catch (Exception e1) {
					}
				}
			} catch (Exception e) {
				Thread.sleep(1000);
				if (trial == 4) {
					extent.extentLoggerFail("errorOccured", "Error when handling Live Player");
					logger.error("Error when handling Live Player");
				}
			}
		}
		if (playerPaused == true) {
			try {
				getDriver().findElement(PWAPlayerPage.objLivePlayerVolume);
				extent.extentLogger("livePlayerVolume", "Located Live Player Volume");
				logger.info("Located Live Player Volume");
			} catch (Exception e) {
				extent.extentLoggerFail("livePlayerVolume", "Failed to locate Live Player Volume");
				logger.error("Failed to locate Live Player Volume");
			}
		}
	}

	/**
	 * Method to verify the Watch Latest Episode CTA in Show details page
	 * 
	 * @param contentTitle
	 * @throws Exception
	 */
	public void verifyWatchLatestEpisodeCTA(String contentTitle) throws Exception {
		extent.HeaderChildNode("Verify Landscape for Free Content");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementAndClickIfPresent(PWASubscriptionPages.objPopupCloseButton, 10, "Close in Language Pop Up");
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
		waitForElement(PWASearchPage.objSearchNavigationTab("Shows"), 30, "Shows tab");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Shows"), "Shows tab");
		waitForElement(PWASearchPage.objSearchedResult(contentTitle), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
		waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 10, "Close in Sign Up Pop Up");
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
				"Content Title").toString();
		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation", "Successfully navigated to the correct Details page");
			logger.info("Successfully navigated to the correct Details page");
			verifyElementPresent(PWAShowsPage.objWatchLatestCTA, "Watch Latest CTA button");
			String watchLatestCTAText = getElementPropertyToString("innerText", PWAShowsPage.objWatchLatestCTA,
					"Watch Latest CTA button").toString();
			if (watchLatestCTAText.equals("Watch Latest Episode")) {
				extent.extentLogger("correctButtonText", "Correct button text displayed: " + watchLatestCTAText);
				logger.info("Correct button text displayed: " + watchLatestCTAText);
			} else {
				extent.extentLoggerFail("incorrectButtonText",
						"Incorrect button text displayed: " + watchLatestCTAText);
				logger.error("Incorrect button text displayed: " + watchLatestCTAText);
			}
		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Details page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Details page: " + consumptionPageTitle);
		}
	}

	/**
	 * Method to verify no Subscription pop up is displayed for free content
	 * 
	 * @param userType
	 * @param contentType
	 * @param contentTitle
	 * @param devicePin
	 * @throws Exception
	 */
	public void verifyNoSubscriptionPopupForFreeContent(String userType, String contentTitle) throws Exception {
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		extent.HeaderChildNode("Verify No Subscription Popup For Free Content");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
		verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(contentTitle), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
		// if(userType.equals("Guest"))
		// waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 5,
		// "Close in Sign Up Pop Up");
		waitForElement(PWAPlayerPage.objContentTitle, 20, "Content title");
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
				"Content Title").toString();
		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation",
					"Successfully navigated to the correct Consumption page: " + consumptionPageTitle);
			logger.info("Successfully navigated to the correct Consumption page: " + consumptionPageTitle);
			if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle)) {
				extent.extentLogger("", "Subscribe Pop Up is located");
				logger.info("Subscribe Pop Up is located");
				extent.extentLoggerFail("", "Subscribe Pop is getting displayed for free content");
				logger.error("Subscribe Pop is getting displayed for free content");
			} else {
				extent.extentLogger("", "Subscribe Pop Up is not located");
				logger.info("Subscribe Pop Up is not located");
				extent.extentLogger("", "Expected behavior: Subscribe Pop for free content is not displayed");
				logger.info("Expected behavior: Subscribe Pop for free content is not displayed");
			}
		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Consumption page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Consumption page: " + consumptionPageTitle);
		}
	}

	/**
	 * The method will wait for the element to not be located for a maximum of given
	 * seconds. The method terminates immediately once the element is located and
	 * throws error.
	 */
	public void waitForElementAbsence(By locator, int seconds, String message) throws InterruptedException {
		main: for (int time = 0; time <= seconds; time++) {
			try {
				getDriver().findElement(locator);
				logger.error("Located element " + message);
				extent.extentLoggerFail("locatedElement", "Located element " + message);
				break main;
			} catch (Exception e) {
				Thread.sleep(1000);
				if (time == seconds) {
					logger.info("Expected behavior: " + message + " is not displayed");
					extent.extentLogger("failedLocateElement", "Expected behavior: " + message + " is not displayed");
				}
			}
		}
	}

	/**
	 * Method to verify Subscription pop up is displayed for premium content
	 * 
	 * @param userType
	 * @param contentType
	 * @param contentTitle
	 * @param devicePin
	 * @throws Exception
	 */
	public void verifySubscriptionPopupForPremiumContent(String userType, String contentTitle) throws Exception {
		extent.HeaderChildNode("Verify Subscription Popup For Premium Content");
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		typeAndGetSearchResult(PWASearchPage.objSearchEditBox, contentTitle, "Search Edit box");
		waitTime(2000);
		waitForElement(PWASearchPage.objSearchedResult(contentTitle), 45, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
		waitTime(7000);
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			// if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle,
			// "Subscribe Pop Up"))

			if (verifyIsElementDisplayed(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line")) {
				click(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line");
				// click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close
				// button");

				extent.extentLogger("", "Subscription Page  is displayed for Premium Content as expected");
				logger.info("Subscription Page is displayed for Premium Content as expected");
			} else {
				extent.extentLoggerFail("", "Subscription Page failed to display for Premium Content");
				logger.error("Subscription Page failed to display for Premium Content");
			}

			click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");

		} else {
			// if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle,
			// "Subscribe Pop Up"))

			if (verifyIsElementDisplayed(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line")) {
				click(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line");

				// click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close
				// button");

				extent.extentLoggerFail("", "Subscription Page is displayed for Premium Content for Subscribed User");
				logger.error("Subscription Page is displayed for Premium Content for Subscribed User");
			} else {
				extent.extentLogger("",
						"Subscription Page is not displayed for Premium Content for Subscribed user, expected behavior");
				logger.info(
						"Subscription Page is not displayed for Premium Content for Subscribed user, expected behavior");
			}

			click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		}

	}

	/**
	 * Method to verify share functionality and metadata comparison between Show
	 * Details and Consumption page plays in player
	 * 
	 * @param contentTitle
	 * @throws Exception
	 */
	public void verifyCTAandMetaDataInDetailsAndConsumption(String contentTitle) throws Exception {
		extent.HeaderChildNode("Verify Watch Latest Episode CTA");
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);

		waitForElement(PWASearchPage.objSearchNavigationTab("TV Shows"), 30, "TV Shows tab");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows tab");
		waitForElement(PWASearchPage.objSearchedResult(contentTitle), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
				"Content Title").toString();
		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation", "Successfully navigated to the correct Details page");
			logger.info("Successfully navigated to the correct Details page");
			verifyElementPresent(PWAShowsPage.objWatchLatestCTA, "Watch Latest CTA button");
			String watchLatestCTAText = getElementPropertyToString("innerText", PWAShowsPage.objWatchLatestCTA,
					"Watch Latest CTA button").toString();
			if (watchLatestCTAText.equals("WATCH LATEST EPISODE")) {
				extent.extentLogger("correctButtonText", "Correct button text displayed: " + watchLatestCTAText);
				logger.info("Correct button text displayed: " + watchLatestCTAText);
			} else {
				extent.extentLoggerFail("incorrectButtonText",
						"Incorrect button text displayed: " + watchLatestCTAText);
				logger.error("Incorrect button text displayed: " + watchLatestCTAText);
			}
			extent.HeaderChildNode("Verify Metadata in Consumptions page");
			waitTime(3000);
			click(PWAShowsPage.objEpisodesSetTray, "Episode Tray");
			waitTime(2000);
			click(PWAShowsPage.objSecondSetEpisodeTray, "Second Episode set");
			waitTime(3000);
			click(PWAShowsPage.objSecondAssetImageFirstRail, "Second card image from first rail");
			waitTime(3000);
			// Get API details
			String contentURL = getDriver().getCurrentUrl();
			System.out.println(contentURL);
			String[] abc = contentURL.split("/");
			// String contentID = abc[abc.length - 1].split("\\?")[0];
			// https://newpwa.zee5.com/tvshows/details/paaru/0-6-1179/paaru-september-10-2020/0-1-manual_16030f67bgc0
			String contentID = abc[abc.length - 1];
			System.out.println("contentID fetched from URL: " + contentID);
			Response resp = ResponseInstance.getContentDetails(contentID, "content");
			System.out.println(resp.getBody().asString());
			if (resp.getBody().asString().contains("\"error_code\":401")) {
				resp = ResponseInstance.getContentDetails(contentID, "content");
				System.out.println(resp.getBody().asString());
			}
			String titleAPI = resp.jsonPath().get("title").toString().trim();
			extent.extentLogger("apidata", "Episode title fetched from API: " + titleAPI);
			logger.info("Episode title fetched from API: " + titleAPI);

			String showtitleAPI = resp.jsonPath().get("tvshow.title").toString().trim();
			extent.extentLogger("apidata", "Show title fetched from API: " + showtitleAPI);
			logger.info("Show title fetched from API: " + showtitleAPI);

			String episodeNoAPI = resp.jsonPath().get("orderid").toString().trim();
			extent.extentLogger("apidata", "Episode number fetched from API: " + episodeNoAPI);
			logger.info("Episode number fetched from API: " + episodeNoAPI);

			String durationAPI = resp.jsonPath().get("duration").toString().trim();
			extent.extentLogger("apidata", "Duration fetched from API: " + durationAPI);
			logger.info("Duration fetched from API: " + durationAPI);

			String dateAPI = resp.jsonPath().get("hls[0]").toString().trim();
			dateAPI = dateAPI.split("/Seamless")[0];
			String[] a = dateAPI.split("/");
			dateAPI = a[a.length - 1];
			System.out.println(dateAPI);
			extent.extentLogger("apidate", "Episode date fetched from API: " + dateAPI);
			logger.info("Episode date fetched from API: " + dateAPI);
			dateAPI = convertDateFromAPI(dateAPI);
			extent.extentLogger("apidata", "Converted date from API: " + dateAPI);
			logger.info("Converted date from API: " + dateAPI);

			String genreAPI = resp.jsonPath().get("genre[0].value").toString().trim();
			extent.extentLogger("apidata", "Genre fetched from API: " + genreAPI);
			logger.info("Genre fetched from API: " + genreAPI);

			String ageRatingAPI = resp.jsonPath().get("age_rating").toString().trim();
			extent.extentLogger("apidata", "Age Rating fetched from API: " + ageRatingAPI);
			logger.info("Age Rating fetched from API: " + ageRatingAPI);

			waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 5, "Close in Sign Up Pop Up");

			String episode = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle1,
					"Episode title in Consumption Page").toString();
			extent.extentLogger("episode", "Episode title fetched from UI: " + episode);
			logger.info("Episode title fetched from UI: " + episode);
			if (titleAPI.equals(episode)) {
				extent.extentLogger("titleMatch", "Consumption page content Title matched with API");
				logger.info("Consumption page content Title matched with API");
			} else {
				extent.extentLoggerFail("titleMismatch", "Consumption page content Title mismatched with API");
				logger.error("Consumption page content Title mismatched with API");
			}

			String show = getText(PWAPlayerPage.objConsumptionsShowTitle);
			extent.extentLogger("show", "Show title fetched from UI: " + show);
			logger.info("Show title fetched from UI: " + show);
			if (showtitleAPI.equals(show)) {
				extent.extentLogger("showMatch", "Consumption page content Show matched with API");
				logger.info("Consumption page content Show matched with API");
			} else {
				extent.extentLoggerFail("showMismatch", "Consumption page content Show mismatched with API");
				logger.error("Consumption page content Show mismatched with API");
			}

			String episodeNo = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaEpisode,
					"Episode Number in Consumption Page").toString();
			extent.extentLogger("episodeNo", "Episode No fetched from UI: " + episodeNo);
			logger.info("Episode No fetched from UI: " + episodeNo);
//			episodeNo = episodeNo.split("Episode ")[1];
			episodeNo = episodeNo.split("E ")[1];
			if (episodeNoAPI.equals(episodeNo)) {
				extent.extentLogger("episodeMatch", "Consumption page content Episode Number matched with API");
				logger.info("Consumption page content Episode Number matched with API");
			} else {
				extent.extentLoggerFail("episodeMismatch",
						"Consumption page content Episode Number mismatched with API");
				logger.error("Consumption page content Episode Number mismatched with API");
			}

			String episodeDate = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaDate,
					"Episode Date in Consumption Page").toString();
			extent.extentLogger("episodeDate", "Episode Date fetched from UI: " + episodeDate);
			logger.info("Episode Date fetched from UI: " + episodeDate);
			if (dateAPI.equals(episodeDate)) {
				extent.extentLogger("dateMatch", "Consumption page content Episode Date matched with API");
				logger.info("Consumption page content Episode Date matched with API");
			} else {
				extent.extentLoggerFail("dateMismatch", "Consumption page content Episode Date mismatched with API");
				logger.error("Consumption page content Episode Date mismatched with API");
			}

			String duration = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaDuration,
					"Duration in Consumption Page").toString();
			extent.extentLogger("duration", "Duration fetched from UI: " + duration);
			logger.info("Duration fetched from UI: " + duration);
			durationAPI = String.valueOf((Integer.parseInt(durationAPI) / 60));
			duration = duration.split("m")[0];
			if (durationAPI.equals(duration)) {
				extent.extentLogger("durationMatch", "Consumption page content Duration matched with API");
				logger.info("Consumption page content Duration matched with API");
			} else {
				extent.extentLoggerFail("durationMismatch", "Consumption page content Duration mismatched with API");
				logger.error("Consumption page content Duration mismatched with API");
			}

			String genre = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaGenre,
					"Genre in Consumption Page").toString();
			extent.extentLogger("genre", "Genre fetched from UI: " + genre);
			logger.info("Genre fetched from UI: " + genre);
			if (genreAPI.equals(genre)) {
				extent.extentLogger("genreMatch", "Consumption page content Genre matched with API");
				logger.info("Consumption page content Genre matched with API");
			} else {
				extent.extentLoggerFail("genreMismatch", "Consumption page content Genre mismatched with API");
				logger.error("Consumption page content Genre mismatched with API");
			}

			String ageRating = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaAgeRating,
					"Age Rating in Consumption Page").toString();
			extent.extentLogger("ageRating", "Age Rating fetched from UI: " + ageRating);
			logger.info("Age Rating fetched from UI: " + ageRating);
			if (ageRatingAPI.equals(ageRating)) {
				extent.extentLogger("ageRatingMatch", "Consumption page content Age Rating matched with API");
				logger.info("Consumption page content Age Rating matched with API");
			} else {
				extent.extentLoggerFail("ageRatingMismatch", "Consumption page content Age Rating mismatched with API");
				logger.error("Consumption page content Age Rating mismatched with API");
			}

		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Details page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Details page: " + consumptionPageTitle);
		}
	}

	public String convertDateFromAPI(String apiDate) {
		String date = apiDate.substring(0, 2);
		if (date.charAt(0) == '0') {
			date = date.split("")[1];
		}
		System.out.println("date " + date);
		String month = apiDate.substring(2, 4);
		System.out.println("month " + month);
		if (month.equals("01"))
			month = "Jan";
		if (month.equals("02"))
			month = "Feb";
		if (month.equals("03"))
			month = "Mar";
		if (month.equals("04"))
			month = "Apr";
		if (month.equals("05"))
			month = "May";
		if (month.equals("06"))
			month = "Jun";
		if (month.equals("07"))
			month = "Jul";
		if (month.equals("08"))
			month = "Aug";
		if (month.equals("09"))
			month = "Sep";
		if (month.equals("10"))
			month = "Oct";
		if (month.equals("11"))
			month = "Nov";
		if (month.equals("12"))
			month = "Dec";
		String year = apiDate.substring(4, 8);
		System.out.println("year " + year);
		System.out.println(date + " " + month + " " + year);
		return (date + " " + month + " " + year);
	}

	/**
	 * Method to enter device pin
	 * 
	 * @throws Exception
	 */
	public void enterDevicePin(String devicePin) throws Exception {
		boolean devicePinPresent = false;
		// wait and check if device pin box appears
		for (int trial = 0; trial <= 4; trial++) {
			try {
				getDriver().findElement(PWAHomePage.objDevicePin1);
				devicePinPresent = true;
			} catch (Exception e) {
				Thread.sleep(1000);
			}
		}
		if (devicePinPresent == true) {
			for (int trial = 0; trial <= 4; trial++) {
				try {
					getDriver().findElement(By.xpath("//input[@id='parentLockId1']"))
							.sendKeys(devicePin.substring(0, 1));
					getDriver().findElement(By.xpath("//input[@id='parentLockId2']"))
							.sendKeys(devicePin.substring(1, 2));
					getDriver().findElement(By.xpath("//input[@id='parentLockId3']"))
							.sendKeys(devicePin.substring(2, 3));
					getDriver().findElement(By.xpath("//input[@id='parentLockId4']"))
							.sendKeys(devicePin.substring(3, 4));
					logger.info("Entered Device PIN : " + devicePin);
					extent.extentLogger("devicePIN", "Entered Device PIN : " + devicePin);
					break;
				} catch (Exception e) {
					Thread.sleep(2000);
					if (trial == 4) {
						logger.error("Failed to enter device PIN");
						extent.extentLoggerFail("devicePINfail", "Failed to enter device PIN");
					}
				}
			}
		}
	}

	/**
	 * Main Function to verify player validations
	 */
	public void playerValidations(String userType) throws Exception {
		audioTrackSelection();
		extent.HeaderChildNode("Player Validation");
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		verifyIsElementDisplayed(PWAHomePage.objSearchField, "Search field");
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("consumptionsFreeContent");
		type(PWAHomePage.objSearchField, keyword, "Search");
		verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab in Search Results");
		waitTime(10000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(6000);
		// if(userType.equals("Guest"))
		// waitForElementAndClickIfPresent(PWASubscriptionPages.objPopupCloseButton, 30,
		// "Close in Sign Up Pop Up");
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
				"Content Title").toString();
		PlayerIconVaidations();
		// Verify Player controls are not displaying after some time
		Thread.sleep(5000);
		playerControlOperations();
		playerQuality();
		screenOrientation();
		ShareFunctionality();
		AddToWatchList(userType, consumptionPageTitle);
		// WatchTrailer();
	}

	public void audioTrackSelection() throws Exception {
		HeaderChildNode("Validating the Audio Track Selection");
		// String keyword =
		// getParameterFromXML("audioTrackContent");
		String keyword = "Episode 13 - Agent Raghav";
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWAHomePage.objSearchField, keyword, "Search");
		waitTime(5000);
		for (int i = 0; i < 2; i++) {
			try {
				waitTime(5000);
				click(PWASearchPage.objSearchedResult(keyword), "Search Result");
				break;
			} catch (StaleElementReferenceException e) {
			}
		}
		waitTime(5000);
		directClickReturnBoolean(PWAHomePage.objCreateNewAccountPopUpClose, "Close in Sign Up Pop Up");
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		click(PWAPlayerPage.settingsBtn, "Settings icon");
		click(PWAPlayerPage.objPlayerAudioTrackIcon, "Audio Track icon");
		waitTime(5000);
		int size = getDriver().findElements(PWAPlayerPage.objPlayerAudioTracksAvailable).size();
		if (size == 0) {
			logger.info("Audio Tracks unavailable");
			extent.extentLogger("quality", "Audio Tracks unavailable");
		} else {
			for (int i = 1; i <= size; i++) {
				logger.info("Audio Tracks available : "
						+ getAttributValue("innerText", PWAPlayerPage.objAllQualityOptions(i)));
				extent.extentLogger("audio", "Audio Tracks available : "
						+ getAttributValue("innerText", PWAPlayerPage.objAllQualityOptions(i)));
			}
			// Select audio tracks
			List<WebElement> unselected = findElements(PWAPlayerPage.objPlayerUnSelectedAudioTrack);
			ArrayList<String> tracks = new ArrayList<String>();
			for (int i = 0; i < unselected.size(); i++) {
				tracks.add(unselected.get(i).getText());
			}
			for (int i = 0; i < tracks.size(); i++) {
				String selectedTrackBefore = getText(PWAPlayerPage.objPlayerSelectedAudioTrack);
				logger.info("Audio Track before selection: " + selectedTrackBefore);
				extent.extentLogger("quality", "Audio Track before selection: " + selectedTrackBefore);
				String track = tracks.get(i);
				waitTime(5000);
				click(PWAPlayerPage.objPlayerUnSelectedAudioTrack(track), "Audio Track " + track);
				waitTime(5000);
				click(PWAPlayerPage.settingsBtn, "Settings icon");
				click(PWAPlayerPage.objPlayerAudioTrackIcon, "Audio Track icon");
				waitTime(5000);
				String selectedTrackAfter = getElementPropertyToString("innerText",
						PWAPlayerPage.objPlayerSelectedAudioTrack, "Selected Audio Track");
				logger.info("Audio Track after selection : " + selectedTrackAfter);
				extent.extentLogger("quality", "Quality option after selection: " + selectedTrackAfter);
				if (selectedTrackBefore.equals(selectedTrackAfter)) {
					logger.error("Audio Track selection unsuccessful");
					extent.extentLoggerFail("quality", "Audio Track selection unsuccessful");
				} else {
					logger.info("Audio Track selection successful");
					extent.extentLogger("quality", "Audio Track selection successful");
				}
			}
		}
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/**
	 * Method to perform a direct click
	 * 
	 */
	public void directClick(By locator, String element) {
		try {
			getDriver().findElement(locator).click();
			logger.info("Clicked on element: " + element);
			extent.extentLogger("elementClicked", "Clicked on element: " + element);
		} catch (Exception e) {
			logger.error("Failed to click on element: " + element);
			extent.extentLoggerFail("elementClickFailed", "Failed to click on element: " + element);
		}
	}

	/**
	 * Function to verify Watch Trailer functionality
	 */
	public void WatchTrailer() throws Exception {
		waitForElementAndClick(PWAHomePage.objSearchBtn, 60, "Search icon");
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovie2");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		Thread.sleep(5000);
		waitForElement(PWASearchPage.objSearchedResult(keyword), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitForElementAndClickIfPresent(PWASubscriptionPages.objPopupCloseButton, 60, "Close in Subscribe Pop Up");
		verifyElementPresent(PWASearchPage.watchTrailer, "Watch Trailer option");
	}

	/**
	 * Function to add to watchlist
	 */
	public void AddToWatchList(String userType, String consumptionPageTitle) throws Exception {
		extent.HeaderChildNode("Add to Watch List for user: " + userType);
		// Click on Watchlist
		click(PWAPlayerPage.watchListBtn, "Add To WatchList button");
		if (userType.equals("Guest")) {
			// Verify user is Observed Login pop up
			verifyIsElementDisplayed(PWAPlayerPage.objLoginRequiredTxt, "Login Required Pop up");
			// Close the Login Popup
			click(PWAPlayerPage.objCloseBtnLoginPopup, "Close button Login Popup");
		} else {
			// Click on Hamburger menu
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			// Click on My account
			click(PWAHamburgerMenuPage.objMyAccountOption, "My Account");
			waitTime(3000);
			// Click on Watchlist
			click(PWAAddToWatchListPage.objMyWatchList, "Watch list");
			// Click on Movies tab
			Thread.sleep(3000);
			click(PWAAddToWatchListPage.objMoviesTab, "Movies tab");
			// Verify added Item is present in Watchlist
			verifyElementPresent(PWAAddToWatchListPage.objWatchListed(consumptionPageTitle),
					"Watchlisted content: " + consumptionPageTitle);
			click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove watchlist");
			waitTime(3000);
			Back(1);
		}
	}

	/**
	 * Function to verify Share Functionality
	 */
	@SuppressWarnings("rawtypes")
	public void ShareFunctionality() throws Exception {
		extent.HeaderChildNode("Share functionality Validation");
		// Verify Share option
		verifyElementPresent(PWAPlayerPage.shareBtn, "Share option");
		// Click on the Share option
		click(PWAPlayerPage.shareBtn, "Share option");
		// Verify the Share options are visible
		Thread.sleep(3000);
		System.out.println(getDriver().getContextHandles());
		getDriver().context("NATIVE_APP");
		Dimension dim = getDriver().manage().window().getSize();
		int startx = (int) (dim.width * 0.6);
		int starty = (int) (dim.height * 0.7);
		int endx = (int) (startx * 0.1);
		int endy = starty;
		for (int i = 0; i < 2; i++) {
			try {
				getDriver().findElement(PWAShowsPage.objFacebookApp).click();
				break;
			} catch (Exception e) {
				TouchAction act = new TouchAction(getDriver());
				act.press(PointOption.point(startx, starty))
						.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
						.moveTo(PointOption.point(endx, endy)).release().perform();
			}
		}
		waitForElementAndClick(PWAShowsPage.objFacebookPostBtn, 10, "POST button in Facebook App");
		getDriver().context("CHROMIUM");
	}

	/**
	 * Function to verify video quality selected
	 */
	public void playerQuality() throws Exception {
		HeaderChildNode("Validating the Playback Quality");
		Thread.sleep(10000);
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		// Tap on settings Icon
		click(PWAPlayerPage.settingsBtn, "Settings icon");
		// Click on Quality icon
		click(PWAPlayerPage.qualityBtn, "Quality icon");
		waitTime(5000);
		// Select Quality from Quality menu
		int size = getDriver().findElements(PWAPlayerPage.objPlayerQualities).size();
		if (size == 0) {
			logger.info("Quality options unavailable");
			extent.extentLogger("quality", "Quality options unavailable");
		} else {
			for (int i = 1; i <= size; i++) {
				logger.info("Quality option available : "
						+ getAttributValue("innerText", PWAPlayerPage.objAllQualityOptions(i)));
				extent.extentLogger("quality", "Quality option available : "
						+ getAttributValue("innerText", PWAPlayerPage.objAllQualityOptions(i)));
			}

			// Select other qualities
			List<WebElement> unselected = findElements(PWAPlayerPage.objPlayerUnSelectedQuality);
			ArrayList<String> qualities = new ArrayList<String>();
			for (int i = 0; i < unselected.size(); i++) {
				qualities.add(unselected.get(i).getText());
			}
			for (int i = 0; i < qualities.size(); i++) {
				String selectedQualityBefore = getText(PWAPlayerPage.objPlayerSelectedQuality);
				logger.info("Quality option before selection: " + selectedQualityBefore);
				extent.extentLogger("quality", "Quality option before selection: " + selectedQualityBefore);
				String quality = qualities.get(i);
				Thread.sleep(5000);
				click(PWAPlayerPage.objPlayerUnSelectedQuality(quality), "Quality " + quality);
				Thread.sleep(5000);
				click(PWAPlayerPage.settingsBtn, "Settings icon");
				click(PWAPlayerPage.qualityBtn, "Quality icon");
				waitTime(5000);
				String selectedQualityAfter = getElementPropertyToString("innerText",
						PWAPlayerPage.objPlayerSelectedQuality, "Selected Quality");
				logger.info("Quality option after selection : " + selectedQualityAfter);
				extent.extentLogger("quality", "Quality option after selection: " + selectedQualityAfter);
				if (selectedQualityBefore.equals(selectedQualityAfter)) {
					logger.error("Quality selection unsuccessful");
					extent.extentLoggerFail("quality", "Quality selection unsuccessful");
				} else {
					logger.info("Quality selection successful");
					extent.extentLogger("quality", "Quality selection successful");
				}
			}
		}
	}

	/**
	 * Function to validate player rewind and forward functionality
	 */
	/**
	 * Function to validate player rewind and forward functionality
	 */
	public void playerControlOperations() throws Exception {
		HeaderChildNode("Validating rewind 10 seconds, forward 10 seconds and Audio icons");
		Thread.sleep(3000);
		int timeBeforeFmin = 0, timeBeforeFsec = 0, timeBeforeF = 0;
		int timeAfterFmin = 0, timeAfterFsec = 0, timeAfterF = 0;
		int timeBeforeRmin = 0, timeBeforeRsec = 0, timeBeforeR = 0;
		int timeAfterRmin = 0, timeAfterRsec = 0, timeAfterR = 0;
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		// Verify forward
		String currentDuration1 = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"current duration");
		logger.info("Time fetched before forward: " + currentDuration1);
		extent.extentLogger("timeBeforeForward", "Time fetched before forward: " + currentDuration1);
		String[] timeBeforeForward = currentDuration1.split(":");
		try {
			timeBeforeFmin = Integer.parseInt(timeBeforeForward[0]) * 60;
			timeBeforeFsec = Integer.parseInt(timeBeforeForward[1]);
			timeBeforeF = timeBeforeFmin + timeBeforeFsec;
			logger.info("Time fetched before forward in Secs: " + timeBeforeF);
			extent.extentLogger("timeBeforeForward", "Time fetched before forward in Secs: " + timeBeforeF);
		} catch (Exception e) {
			logger.error("Error in time coversion");
			extent.extentLogger("error", "Error in time coversion");
		}
		click(PWAPlayerPage.forward10SecBtn, "Forward 10 seconds");
		Thread.sleep(2000);
		// Get the current time duration after clicking the forward button
		playerTap();
		String currentDuration2 = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"current duration");
		logger.info("Time fetched after forward: " + currentDuration2);
		extent.extentLogger("timeAfterForward", "Time fetched after forward: " + currentDuration2);
		String[] timeAfterForward = currentDuration2.split(":");
		try {
			timeAfterFmin = Integer.parseInt(timeAfterForward[0]) * 60;
			timeAfterFsec = Integer.parseInt(timeAfterForward[1]);
			timeAfterF = timeAfterFmin + timeAfterFsec;
			logger.info("Time fetched after forward in Secs: " + timeAfterF);
			extent.extentLogger("timeBeforeForward", "Time fetched after forward in Secs: " + timeAfterF);

		} catch (Exception e) {
			logger.error("Error in time coversion");
			extent.extentLogger("error", "Error in time coversion");
		}
		if (timeAfterF >= (timeBeforeF + 10) && timeAfterF <= (timeBeforeF + 15)) {
			extent.extentLogger("Verify forward button", "Playback is forwarded by 10 seconds");
			logger.info("Playback is forwarded by 10 seconds");
		} else {
			extent.extentLoggerFail("Verify forward button", "Playback forward by 10 seconds has failed");
			logger.error("Playback forward by 10 seconds has failed");
		}
		// Verify Rewind
		String currentDuration3 = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"current duration");
		logger.info("Time fetched before rewind: " + currentDuration3);
		extent.extentLogger("timeBeforeRewind", "Time fetched before rewind: " + currentDuration3);
		String[] timeBeforeRewind = currentDuration3.split(":");
		try {
			timeBeforeRmin = Integer.parseInt(timeBeforeRewind[0]) * 60;
			timeBeforeRsec = Integer.parseInt(timeBeforeRewind[1]);
			timeBeforeR = timeBeforeRmin + timeBeforeRsec;
			logger.info("Time fetched before rewind in Secs: " + timeBeforeR);
			extent.extentLogger("timeBeforeForward", "Time fetched before rewind in Secs: " + timeBeforeR);
		} catch (Exception e) {
			logger.error("Error in time coversion");
			extent.extentLogger("error", "Error in time coversion");
		}
		click(PWAPlayerPage.rewind10SecBtn, "Rewind 10 seconds");
		waitTime(2000);
		// Get the current time duration after clicking the rewind button
		playerTap();
		String currentDuration4 = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"current duration");
		logger.info("Time fetched after rewind: " + currentDuration4);
		extent.extentLogger("timeAfterRewind", "Time fetched after rewind: " + currentDuration4);
		String[] timeAfterRewind = currentDuration4.split(":");
		try {
			timeAfterRmin = Integer.parseInt(timeAfterRewind[0]) * 60;
			timeAfterRsec = Integer.parseInt(timeAfterRewind[1]);
			timeAfterR = timeAfterRmin + timeAfterRsec;
			logger.info("Time fetched after rewind in Secs: " + timeAfterR);
			extent.extentLogger("timeBeforeForward", "Time fetched after rewind in Secs: " + timeAfterR);
		} catch (Exception e) {
			logger.error("Error in time coversion");
			extent.extentLogger("error", "Error in time coversion");
		}
		if (timeAfterR >= (timeBeforeR - 10) && timeAfterR < (timeBeforeR - 3)) {
			extent.extentLogger("Verify rewind button", "Playback is rewinded 10 seconds");
			logger.info("Playback is rewinded 10 seconds");
		} else {
			extent.extentLoggerFail("Verify rewind button", "Playback rewind by 10 seconds has failed");
			logger.error("Playback rewind by 10 seconds has failed");
		}
		// Verify the mute/unmute
		playerTap();
		verifyElementPresent(PWAPlayerPage.objMuteButton, "Audio Mute button");
		playerTap();
		click(PWAPlayerPage.objMuteButton, "Audio Mute button");
		verifyElementPresent(PWAPlayerPage.objUnmuteButton, "Audio Unmute button");
	}

	/**
	 * Function to verify player icons
	 */
	public void PlayerIconVaidations() throws Exception {
		waitTime(10000);
		waitForPlayerAdToComplete("Video Player");
		playerTap();
		verifyElementPresent(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds icon");
		playerTap();
		verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause icon");
		playerTap();
		verifyElementPresent(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds icon");
		playerTap();
		verifyElementPresent(PWAPlayerPage.progressBar, "Progress bar");
		playerTap();
		verifyElementPresent(PWAPlayerPage.audioBtn, "Audio icon");
		playerTap();
		verifyElementPresent(PWAPlayerPage.totalDurationTime, "Total duration time");
		playerTap();
		verifyElementPresent(PWAPlayerPage.settingsBtn, "Settings icon");
		playerTap();
		verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize window icon");
		playerTap();
		verifyElementPresent(PWAPlayerPage.totalDurationTime, "Total time");
		waitTime(10000);
	}

	/**
	 * Function to verify Play icon functionality
	 * 
	 * @throws Exception
	 */
	public void verifyPlayIconFunctionality(String screen) throws Exception {
		extent.HeaderChildNode("Verifying play icon functionality on carousel for : " + screen);
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		if (navigateToAnyScreen(screen)) {
			waitTime(5000);
			for (int i = 0; i < 10; i++) {
				try {
					waitForElementAndClick(PWAHomePage.objPlayBtn, 20, "Play icon");
					break;
				} catch (Exception e) {
					waitTime(1000);
					if (i == 9)
						logger.info("Failed to click");
				}
			}
			waitTime(2000);
			if (verifyElementPresent(PWAPlayerPage.objPlayerControlScreen, "Player control containing screen")) {
				logger.info("Verify play icon functionality is Pass");
				extent.extentLogger("Play btn validation", "Verify play icon functionality is Pass");
			} else {
				logger.error("Verify play icon functionality is Fail");
				extent.extentLoggerFail("Play btn validation", "Verify play icon functionality is Fail");
			}
			Back(1);
		} else {
			logger.error("Failed to validate play icon functionality on tab : " + screen);
			extent.extentLoggerFail("play", "Failed to validate play icon functionality on tab : " + screen);
		}
		
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		waitTime(3000);
	}

	/**
	 * Function to verify Play icon functionality for users
	 * 
	 * @throws Exception
	 */
	public void verifyPremiumIconFunctionality(String screen, String userType) throws Exception {
		extent.HeaderChildNode("Verifying premium icon functionality On : " + screen + " for " + userType);
		boolean clicked = false;
		if (navigateToAnyScreen(screen)) {
			waitTime(5000);
			if (userType.equalsIgnoreCase("SubscribedUser")) {
				List<WebElement> getPremiumTextList = getDriver().findElements(PWAHomePage.objPlayCarousel);
				if (getPremiumTextList.size() > 0) {
					logger.info("Play button is displayed instead of Subscribe Now button for Subscribed users");
					extent.extentLogger("playbutton",
							"Play button is displayed instead of Subscribe Now button for Subscribed users");
				}
			} else {
				try {
//					(new WebDriverWait(getDriver(), 40))
//							.until(ExpectedConditions.elementToBeClickable(PWAHomePage.objGetPremiumGetClubButton))
//							.click();

					verifyElementPresent(PWAHomePage.objGetPremiumGetClubButton, "GetPremium/GetClub");

					JSClick(PWAHomePage.objGetPremiumGetClubButton, "GetPremium/GetClub");

					logger.info("Clicked on Get Premium/Get Club button");
					extent.extentLogger("premiumbutton", "Clicked on Get Premium/Get Club button");
					clicked = true;
				} catch (Exception e) {
					logger.error("Failed to click on Get Premium/Get Club button");
					extent.extentLoggerFail("premiumbutton", "Failed to click on Get Premium/Get Club button");
				}
			}
			if (clicked) {
				if (userType.equalsIgnoreCase("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
					if (verifyElementPresent(PWAHomePage.objSubscriptionPage, "Subscription page")) {
						logger.info("Get Premium button functionality has Passed for " + screen);
						extent.extentLogger("Premium btn validation",
								"Get Premium button functionality has Passed for " + screen);
						Back(1);
					} else {
						logger.error("Get Premium button functionality has Failed for " + screen);
						extent.extentLoggerFail("Premium btn validation",
								"Get Premium button functionality has Failed for " + screen);
					}
				}
			}
		} else {
			logger.error("Failed to validate premium icon functionality on tab : " + screen);
			extent.extentLoggerFail("play", "Failed to validate premium icon functionality on tab : " + screen);
		}
		
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		waitTime(3000);
	}
	
	
	/**
	 * Method to verify UI of Home page
	 */
	public void verifyUIofHomePage() throws Exception {
		extent.HeaderChildNode("Verify UI of Home Page");
		waitForElementAndClickIfPresent(PWAHamburgerMenuPage.objCloseHamburger, 20, "Close in Sign Up Pop Up");
		waitTime(5000);
		String tab = getText(PWAHomePage.objActiveTab);
		System.out.println(tab);
		if (tab.equalsIgnoreCase("Home")) {
			logger.info("Navigated to Home page");
			extent.extentLogger("Home Page", "Navigated to Home page");
		} else {
			logger.info("Not navigated to Home page");
			extent.extentLogger("Home Page", "Not navigated to Home page");
		}
		verifyElementPresent(PWAHomePage.objZeeLogo, "Zee Logo");
		verifyElementPresent(PWAHomePage.objSearchBtn, "Search button");
		verifyIsElementDisplayed(PWAHomePage.objSubscribeBtn, "Subscribe button");
		verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger menu");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objLoginBtn, "Login button");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objSignUpForFree, "Sign Up for free");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objCloseIcon, "Close Icon");
		waitForElementDisplayed(PWAHomePage.objDownloadIcon, 60);
		verifyIsElementDisplayed(PWAHomePage.objDownloadIcon, "Download icon");
	}

	/**
	 * PWA Subscription Suite
	 */
	public void zeePWASubscriptionSuite(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			ValidatingSubscriptionAndTransaction();
			ValidatingSubscribeLinks();
		} else if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			zeePWASubscriptionScenariosValidation(userType, getPlatform());
			zeePWASubscriptionFlowFromHomePageHeaderSubscribeBtn(userType, getPlatform());
		} else {
			logger.error("Incorrect userType parameter passed to method");
			extent.extentLoggerFail("incorrectUserType", "Incorrect userType parameter passed to method");
		}
	}

	/**
	 * Subscription Flow From Home Page Header Subscribe Btn Line No 89
	 */
	public void zeePWASubscriptionFlowFromHomePageHeaderSubscribeBtn() throws Exception {
		HeaderChildNode("PWA Subscription Flow From Home Page Header Subcribe Btn");
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objSubscribeBtn, "Subscribe Btn in the Header");
		zeePWAGuestUserSubscriptionFlow();

	}

	/**
	 * Guest User Subscription Flow
	 */
	public void zeePWAGuestUserSubscriptionFlow() throws Exception {
		zeePWASelectPackPageValidation();
		zeePWAAccountInfoPageValidation();
		zeePWAPaymentPageValidation();

	}

	/**
	 * Non-Subscribed User Subscription Flow
	 */
	public void zeePWANonSubscribedUserSubscriptionFlow() throws Exception {
		HeaderChildNode("PWA Subscription Flow");
		zeePWASelectPackPageValidation();
		zeePWAPaymentPageValidation();

	}

	/**
	 * Payment Page Validation Validate that user is navigated to Payment options
	 * screen post successful sign in/sign up - Line No. 105
	 */
	public void zeePWAPaymentPageValidation() throws Exception {
		HeaderChildNode("Payment Page Validation and Selection of PayTm Payment option");
		// Scenario no. 103
		waitTime(8000);
		verifyElementPresent(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
		waitTime(3000);

//		zeePWASelectedPackDisplayValidation();

		verifyElementPresent(PWASubscriptionPages.objAccountInfoText, "Account Info Text in Payments Section");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objAccountInfoDetails, "Account Info Details in Payments Section");
		waitTime(3000);
		Swipe("UP", 1);
		waitTime(3000);
		getDriver().context("NATIVE_APP");
		verifyElementPresent(PWASubscriptionPages.objMobileCreditDebitCardOption, "'Credit / Debit Card' option");
		Swipe("UP", 1);
		waitTime(2000);
		// verifyElementPresentAndClick(PWASubscriptionPages.objMobileWalletsOption,
		// "'Wallets' option");
		// verifyElementPresentAndClick(PWASubscriptionPages.objMobilePaytmOption,
		// "Paytm option");
		// verifyElementPresent(PWASubscriptionPages.objMobilePayTMRecurrenceMessage,"Recurrence
		// Message 'You will be charged every billing cycle until you cancel'");
		getDriver().context("CHROMIUM");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/**
	 * Selected Pack Display Validation Validate that selected pack information is
	 * displayed on left side. - Line No. 103
	 */
	public void zeePWASelectedPackDisplayValidation() throws Exception {
		// Scenario no. 103
		// verifyElementPresent(PWASubscriptionPages.objSelectedPackText, "Selected Pack
		// Text");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objSelectedPackName, "Selected Pack Name");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objSelectedPackDuration, "Selected Pack Duration");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objSelectedPackDescription, "Selected Pack Description");
		waitTime(3000);

	}

	/**
	 * Account Info Page Validation Validate that selected pack information is
	 * displayed on left side. - Line No. 103 Validate that guest user is able to
	 * sign in/sign up from account info screen - Line No. 104
	 */
	public void zeePWAAccountInfoPageValidation() throws Exception {
		HeaderChildNode("Account Info Page Validation");
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Section");
		waitTime(3000);

		verifyElementPresentAndClick(PWAHomePage.objPopUpClose, "Close icon");
		waitTime(2000);

		// Scenario no. 103

		//zeePWASelectedPackDisplayValidation();

		// verifyElementPresent(PWASubscriptionPages.objProceedBtnNotHighlighted,
		// "Proceed Btn in Account Info Page Not Highlighted");

		verifyElementPresent(PWASubscriptionPages.objContinueBtn, "Continue button");
		waitTime(3000);
		click(PWASubscriptionPages.objContinueBtn, "Continue button");
		waitTime(3000);

		// Scenario no. 104
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objEmailIDTextField, "Email ID Text Field");
		waitTime(3000);
		String email = RandomStringGenerator(6) + "@c.com";
		type(PWASubscriptionPages.objEmailIDTextField, email, "Email Id");
		hideKeyboard();
		waitTime(3000);

		verifyElementPresent(PWASubscriptionPages.objContinueBtnn, "Continue button");
		waitTime(3000);
		click(PWASubscriptionPages.objContinueBtnn, "Continue button");
		waitTime(3000);

//		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted,
//				"Proceed Btn in Account Info Page Highlighted");

		waitTime(3000);
		// Password Popup
		verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
		waitTime(3000);

		// verifyElementPresent(PWASubscriptionPages.objProceedBtnDisabled, "Disabled
		// Proceed Btn");
		// waitTime(3000);

		verifyElementPresent(PWASubscriptionPages.objContinueBtnn, "Disabled Continue button");
		waitTime(3000);

		verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
		waitTime(3000);
		type(PWASubscriptionPages.objPasswordFieldHidden, "igs@12345", "Password Field");
		getDriver().context("NATIVE_APP");
		hideKeyboard();
		getDriver().context("CHROMIUM");
		waitTime(9000);

		// verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtn, "Enabled
		// Proceed Btn");

		verifyElementPresent(PWASubscriptionPages.objContinueBtnn, "Continue button");
		waitTime(3000);
		click(PWASubscriptionPages.objContinueBtnn, "Continue button");
		waitTime(3000);

		try {
			// getDriver().findElement(PWASubscriptionPages.objProceedBtn).click();

			getDriver().findElement(PWASubscriptionPages.objContinueBtnn).click();

		} catch (Exception e) {
		} // Required for Vivo phone because keyboard shows up
		waitTime(3000);

	}

	/**
	 * Select Pack Page Validation
	 */
	public void zeePWASelectPackPageValidation() throws Exception {
		HeaderChildNode("Select Pack Page Validation");
		verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
		waitTime(3000);

		/*
		 * String selectedPackCategory =
		 * findElement(PWASubscriptionPages.objPackCategoryTabSelected).getText();
		 * System.out.println("Selected Pack Category is: " + selectedPackCategory);
		 * waitTime(3000); String defaultSelectedPlan =
		 * findElement(PWASubscriptionPages.objSelectedSubscriptionPlanAmount).getText()
		 * ; System.out.println("Plan Selected By Default is: " + defaultSelectedPlan);
		 * waitTime(3000);
		 */
		ScrollToElement(PWASubscriptionPages.objContinueBtn, "Continue");
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Btn");
		waitTime(5000);

	}

	/**
	 * Method to scroll to element
	 */
	public void ScrollToElement(By Locator, String validationText) throws Exception {

		for (int i = 1; i <= 10; i++) {
			if (verifyElementPresent(Locator, validationText) == true) {
				break;
			}
			waitTime(2000);
			swipeALittle("up", 1);
		}
	}

	/**
	 * Method to swipe a little
	 */
	public void swipeALittle(String dire, int count) throws Exception {
		if (dire.equalsIgnoreCase("UP")) {

			for (int j = 0; j < count; j++) {
				Dimension size = getDriver().manage().window().getSize();
				int starty = (int) (size.height * 0.40);
				int endy = (int) (size.height * 0.39);
				int startx = size.width / 2;
				// getDriver().swipe(startx, starty, startx, endy, 3000);
				touchAction.press(PointOption.point(startx, starty))
						.waitAction(WaitOptions.waitOptions(Duration.ofMillis(10000)))
						.moveTo(PointOption.point(startx, endy)).release().perform();

				logger.info("Swiping screen in " + " " + dire + " direction" + " " + (j + 1) + " times");
				extent.extentLogger("SwipeUp",
						"Swiping screen in " + " " + dire + " direction" + " " + (j + 1) + " times");

			}
		}
	}

	/**
	 * Subscription Scenarios Validation
	 */
	public void zeePWASubscriptionScenariosValidation(String userType, String platform) throws Exception {
		// Scenario no. 89
		HeaderChildNode("Scenario: Navigate to Subscription Flow From Home Page Header Subcribe Btn");
		waitTime(5000);
		click(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
		waitTime(5000);
		zeeSubscriptionPageValidationAndNavigateToHomePage();
		// Scenario no. 90,98
		HeaderChildNode("Scenario: Navigate to Subscription Flow from Home Page Get Premium CTA On Carousel");
		waitTime(3000);
		for (int i = 0; i < 10; i++) {
			try {
				(new WebDriverWait(getDriver(), 40))
						.until(ExpectedConditions.elementToBeClickable(PWAHomePage.objGetPremiumGetClubButton)).click();
				logger.info("Clicked on Buy Plan button");
				extent.extentLogger("", "Clicked on Buy Plan button");
				break;
			} catch (Exception e) {
				waitTime(1000);
				if (i == 9)
					logger.info("Failed to click");
			}
		}
		waitTime(10000);
		verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
		// Scenario no. 98
		zeePWAPromoCodeValidationInSelectPackPage();
		waitTime(5000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		if (userType.equalsIgnoreCase("Guest")) {
			// Scenario no. 96
			HeaderChildNode(
					"Scenario: Navigate to Subscription Flow From 'Buy Subscription' option under My plans in hamburger menu");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu Btn");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objBuySubscriptionOption,
					"Buy Subscribe Option in Hamburger Menu");
			zeeSubscriptionPageValidationAndNavigateToHomePage();
			// Scenario no. 97
			HeaderChildNode(
					"Scenario: Navigate to Subscription Flow From 'Have a Prepaid code' option under My plans in hamburger menu");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu Btn");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHaveAPrepaidCode,
					"Have A Prepaid Code? Option in Hamburger Menu");
			waitTime(5000);
			zeeSubscriptionPageValidationAndNavigateToHomePage();
		}
		// Scenario no. 91,92,94
		HeaderChildNode(
				"Scenario: Navigate to Subscription Flow From Adoric Popup/Subscribe Pop Up On Playing Premium Content");
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovieNoTrailer2");
		zeeSearchForContentAndClickOnFirstResult(keyword);
		waitTime(5000);
		zeeVerifyGetPremiumPopup();
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeeAccountInfoPageValidationAndNavigateToHomePage();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePaymentPageValidationAndNavigateToHomePage();
		}

		// Scenario no. 93
		HeaderChildNode("Scenario: Navigate to Subscription Flow From Player In-line Subscribe link on Player");
		zeeSearchForContentAndClickOnFirstResult(keyword);
		waitTime(10000);
		/*
		 * verifyElementPresent(PWASubscriptionPages.objSubscribePopupTitle,
		 * "Subscribe Pop up Title"); waitTime(5000);
		 * verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton,
		 * "Popup Close Button"); waitTime(5000);
		 * verifyElementPresentAndClick(PWAPlayerPage.objSubscribeNowLink,
		 * "In-Line Subscribe Link on Player");
		 */
		zeeVerifyGetPremiumPopup();
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeeAccountInfoPageValidationAndNavigateToHomePage();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePaymentPageValidationAndNavigateToHomePage();
		}

		// Scenario no. 95
		HeaderChildNode(
				"Scenario: Navigate to Subscription Flow From Subscription Get premium CTA below the player at consumption screen");
		String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovieWithTrailer");
		zeeSearchForContentAndClickOnFirstResult(keyword1);
		waitTime(5000);
//		waitForElementAndClick(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, 30,
//				"Subscribe button below the Player");
		waitTime(5000);
		zeeVerifyGetPremiumPopup();
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeeAccountInfoPageValidationAndNavigateToHomePage();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePaymentPageValidationAndNavigateToHomePage();
		}
	}

	/**
	 * Promo code Validation in Select Pack Page Subscription Flow using promo codes
	 * to verify if the user is getting discounted price on plans are not - Line No
	 * 98
	 */
	public void zeePWAPromoCodeValidationInSelectPackPage() throws Exception {
		HeaderChildNode("Promo code Validation in Select Pack Page");
		waitTime(3000);

		Swipe("UP", 1);

		verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "'Have A Code?' field");
		waitTime(3000);

		verifyElementPresentAndClick(PWASubscriptionPages.objHaveACodePlaceHolder, "'Enter Code?' field");
		waitTime(3000);

		type(PWASubscriptionPages.objHaveACode, "prein50", "'Have A Code?' field");
		hideKeyboard();
		waitTime(5000);
		click(PWASubscriptionPages.objApplyBtn, "Apply Button");
		waitTime(5000);
		try {
			getDriver().findElement(PWASubscriptionPages.objApply).click();
		} catch (Exception e) {
		} // Added for Vivo phone
		waitTime(5000);

		// verifyElementPresent(PWASubscriptionPages.objAppliedSuccessfullyMessage,
		// "Applied Successfully Message");

		verifyElementPresent(PWASubscriptionPages.objDiscountAppliedMessage, "Discount Applied Successfully Message");

	}

	/**
	 * PWA Subscription Page Validation
	 */
	public void zeeSubscriptionPageValidationAndNavigateToHomePage() throws Exception {
		// HeaderChildNode("PWA Subscription Page Validation and Navigate to Home
		// Page");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
		waitTime(7000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
	}

	/**
	 * PWA Subscription Page Validation
	 */
	public void zeeSubscriptionPageValidationAndNavigateToHomePage(String origin) throws Exception {
		HeaderChildNode("Subscription Page Validation navigation from: " + origin);
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
		waitTime(7000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
	}

	/**
	 * PWA Account Info Page Validation
	 */
	public void zeeAccountInfoPageValidationAndNavigateToHomePage() throws Exception {
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Section");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHomePage.objPopUpClose, "Close icon");
		waitTime(2000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");

	}

	/**
	 * PWA Payment Page Validation
	 */
	public void zeePaymentPageValidationAndNavigateToHomePage() throws Exception {
		HeaderChildNode("PWA Payment Page Validation and Navigate to Home Page");
		waitTime(10000);
		verifyElementPresent(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
		waitTime(5000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");

	}

	/**
	 * Verify Subscribe Pop Up
	 */
	public void zeeVerifyGetPremiumPopup() throws Exception {
		waitTime(10000);
		// verifyElementPresent(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe
		// Pop up Title");

		verifyElementPresentAndClick(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line");

		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");
		waitTime(5000);
		// verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "Popup
		// Proceed Btn");

		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
	}

	/**
	 * Subscription Flow From Home Page Header Subscribe Btn Line No 89
	 */
	public void zeePWASubscriptionFlowFromHomePageHeaderSubscribeBtn(String userType, String platform)
			throws Exception {
		HeaderChildNode("PWA Subscription Flow From Home Page Header Subcribe Btn");
		// Scenario no. 89
		waitTime(5000);
		click(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Btn in the Header");
//		driver.findElement(PWAHomePage.objSubscribeBtn).click();			
		waitTime(5000);
		if (userType.equals("Guest")) {
			zeePWAGuestUserSubscriptionFlow();
		} else if (userType.equals("Non Subscribed User")) {
			zeePWANonSubscribedUserSubscriptionFlow();
		}
		navigateBackFromPayTmWalletAndLogout(platform);

	}

	/**
	 * Navigate back to paytm wallet and logout
	 */
	public void navigateBackFromPayTmWalletAndLogout(String platform) throws Exception {
		waitTime(5000);
		Back(1);
		waitTime(5000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		// logout();
	}

	/**
	 * Subscription Flow From Home Page Get Premium CTA on Carousel Line No 90
	 */
	public void zeePWASubscriptionFlowFromHomePageGetPremiumCTAOnCarousel(String userType, String platform)
			throws Exception {
		HeaderChildNode("PWA Subscription Flow From Home Page Get Premium CTA On Carousel");

		// Scenario no. 90
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objGetPremium, "Get Premium CTA on Carousel");
		clickDirectly(PWAHomePage.objGetPremium, "Get Premium CTA on Carousel");
		waitTime(5000);
		if (userType.equals("Guest")) {
			zeePWAGuestUserSubscriptionFlow();
		} else if (userType.equals("Non Subscribed User")) {
			zeePWANonSubscribedUserSubscriptionFlow();
		}
		navigateBackFromPayTmWalletAndLogout(platform);

	}

	/**
	 * Subscription Flow From Adoric Popup Line No 91 Subscription Flow From
	 * Subcribe Btn On Playing Premium Content Line No 92 Subscription Flow From
	 * Subscribe popup on playing Before TV content Line No 94
	 */
	public void zeePWASubscriptionFlowFromGetPremiumPopupOnPlayingPremiumContent(String userType, String platform)
			throws Exception {
		HeaderChildNode("PWA Subscription Flow From Adoric Popup/Subscribe Pop Up On Playing Premium Content");
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovie2");
		// Scenario no. 91,92,94
		zeeSearchForContentAndClickOnFirstResult(keyword);
		zeeVerifyGetPremiumPopup();
		waitTime(5000);
		if (userType.equals("Guest")) {
			zeePWAGuestUserSubscriptionFlow();
		} else if (userType.equals("Non Subscribed User")) {
			zeePWANonSubscribedUserSubscriptionFlow();
		}
		navigateBackFromPayTmWalletAndLogout(platform);

	}

	/**
	 * Verify Subscription Links
	 */
	public void ValidatingSubscribeLinks() throws Exception {
		HeaderChildNode("Validating Subscription Link");
		Thread.sleep(10000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovie2");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Field");
		waitTime(5000);
		hideKeyboard();
		waitTime(3000);
		click(PWASearchPage.objSearchResultPremiumContent, "Premium content");
		waitTime(10000);
		try {
			waitForElementDisplayed(PWAHamburgerMenuPage.objGetPremiumCTAbelowPlayer, 30);
		} catch (Exception e) {
			System.out.println("GetPremiumCTAbelowPlayer is not displayed");
		}
		// Validating GET PREMIUM CTA BUTTON below Player
		HeaderChildNode("Validating Get Premium CTA below player and Subscribe Pop Up");
		if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objGetPremiumCTAbelowPlayer,
				"GET PREMIUM CTA BELOW PLAYER ") == true) {
			logger.error(
					"Verify the Get premium CTA below the player at consumption screen is not displayed to subscribed user is Fail");
			extent.extentLoggerFail("ctaDisplayed",
					"Verify the Get premium CTA below the player at consumption screen is not displayed to subscribed user is Fail");
			click(PWAHamburgerMenuPage.objGetPremiumCTAbelowPlayer, "GET PREMIUM CTA BELOW PLAYER");
			Thread.sleep(3000);
			verifyElementPresent(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up");
			verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
		}
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Player In-line Subscribe link");
	}

	/**
	 * Verify Subscription and Transaction
	 */
	public void ValidatingSubscriptionAndTransaction() throws Exception {
		extent.HeaderChildNode("Validation of Subscription and Transaction");
		waitTime(5000);
		waitTime(5000);
		waitTime(5000);
		List<WebElement> ele = getDriver().findElements(By.xpath("//*[text()='Get premium']"));
		System.out.println(ele.size());
		if (ele.size() == 0) {
			System.out.println("Get Premium on Carousel is not displayed");
		} else {
			for (int i = 1; i < ele.size(); i++) {
				verifyElementExist1(ele.get(i), "Get Premium on Carousel");
			}
		}
		verifyIsElementDisplayed(PWAHomePage.objSubscribeBtn, "Subscribe Button");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Button");
		Thread.sleep(3000);
		if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objPlans, "My Plans") == true) {
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objBuySubscription, "Buy Subscription");
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objHaveAPrepaidCode, "Have a Prepaid Code");
		}
		boolean myAccountPresent = verifyIsElementDisplayed(PWAHamburgerMenuPage.objMyAccount, "My Account");
		if (myAccountPresent == true) {
			click(PWAHamburgerMenuPage.objMyAccount, "My Account");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "MySubscription");
			Thread.sleep(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objMySubscriptionPage, "MySubscription Page");
			boolean NoSubscriptionActivePresent = verifyIsElementDisplayed(PWAHamburgerMenuPage.objNoActiveSubscription,
					"No Active Subscription");
			if (NoSubscriptionActivePresent == true) {
				verifyIsElementDisplayed(PWAHamburgerMenuPage.objMySubscriptionItem, "MySubscription Item");
				verifyIsElementDisplayed(PWAHamburgerMenuPage.objMySubscriptionPackName, "MySubscription Name");
				verifyIsElementDisplayed(PWAHamburgerMenuPage.objMYSubscriptionActiveStatus, "My Subscription Status");
			} else {
				if (verifyElementPresent(PWAHamburgerMenuPage.objMySubscriptionItem, "MySubscription Item") == true) {
					if (verifyElementPresent(PWAHamburgerMenuPage.objMySubscriptionPackName,
							"MySubscription Name") == true) {
						System.out.println(getText(PWAHamburgerMenuPage.objMySubscriptionPackName));
					}
					if (verifyElementPresent(PWAHamburgerMenuPage.objMYSubscriptionActiveStatus,
							"My Subscription Status") == true) {
						System.out.println(getText(PWAHamburgerMenuPage.objMYSubscriptionActiveStatus));
					}
				}
			}
			getDriver().navigate().back();
			Thread.sleep(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Button");
			Thread.sleep(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyAccount, "My Account");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyTransactions, "MyTransaction");
			Thread.sleep(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionPage, "MyTransaction Page");
			boolean NoTransactionPresent = verifyIsElementDisplayed(PWAHamburgerMenuPage.objNoTransaction,
					"No Transactions");
			if (NoTransactionPresent == true) {
				verifyIsElementDisplayed(PWAHamburgerMenuPage.objMyTransactionDate, "MyTransaction Date");
				verifyIsElementDisplayed(PWAHamburgerMenuPage.objMyTransactionPackName, "MyTransaction Name");
				verifyIsElementDisplayed(PWAHamburgerMenuPage.objMyTransactionPackStatus, "MyTransaction Status");
			} else {
				if (verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionDate, "MyTransaction Date") == true) {
					if (verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionPackName,
							"MyTransaction Name") == true) {
						System.out.println(getText(PWAHamburgerMenuPage.objMyTransactionPackName));
					}
					if (verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionPackStatus,
							"MyTransaction Status") == true) {
						System.out.println(getText(PWAHamburgerMenuPage.objMyTransactionPackStatus));
					}
				}
			}
		}
	}

	/** =====================TEJAS - CAROUSEL MODULE=========================== */
	public void ValidatingCarousalinalltabs(String UserType) throws Exception {

		switch (UserType) {
		case "Guest":
			extent.HeaderChildNode("User Type Guest");
			System.out.println("User Type Guest");
//			enterURLInBrowser("chrome", "https://newpwa.zee5.com");
			carouseldots("carouselDots", "home");
			carouseldots("carouselDots", "kids");
			ContinuewatchingTray(UserType);

			break;

		case "NonSubcribedUser":
			extent.HeaderChildNode("User Type Loggedin User");
			System.out.println("User Type Loggedin User");
//			ZeePWALogin("Mobile", "Nonsubscribed");
			carouseldots("carouselDots", "home");
			carouseldots("carouselDots", "kids");
			ContinuewatchingTray(UserType);
			break;

		case "SubcribedUser":
			extent.HeaderChildNode("User Type Subcribed User");
			System.out.println("User Type Subcribed User");
//			ZeePWALogin("E-mail", "Subscribed");
			carouseldots("carouselDots", "home");
			carouseldots("carouselDots", "kids");
			ContinuewatchingTray(UserType);

		}

	}

	public void newsTrayValidation() throws Exception {
		extent.HeaderChildNode("Verifing the trays displayed in News Tab");
		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);
		Response resp = ResponseInstance.getResponseForPages("news", languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		List<String> apitotaltrays = resp.jsonPath().getList("buckets");
		System.out.println(apitotaltrays.size());
		for (int i = 1; i < apitotaltrays.size(); i++) {
			String traytitle = resp.jsonPath().getString("buckets[" + i + "].title");
			apiTitleList.add(traytitle);
		}
		logger.info("Trays fetched from API: " + apiTitleList);
		extent.extentLogger("apiTrays", "Trays fetched from API: " + apiTitleList);
		for (int j = 0; j < apiTitleList.size(); j++) {
			List<WebElement> trayTitlesUI = findElements(By.xpath("//*[@class='titleLink']"));
			ArrayList<String> trayTitleUIString = new ArrayList<String>();
			for (int i = 0; i < trayTitlesUI.size(); i++) {
				trayTitleUIString.add(trayTitlesUI.get(i).getText());
			}
			if (trayTitleUIString.contains(apiTitleList.get(j))) {
				logger.info("API title: " + apiTitleList.get(j) + " is displayed in UI");
				extent.extentLogger("Tray validation", "API title: " + apiTitleList.get(j) + " is displayed in UI");

			}
			PartialSwipe("UP", 1);
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

	}

	public void staticPagesandFooterSectionValidation(String userType) throws Exception {
		extent.HeaderChildNode("Static Pages and Footer Validation for : " + userType);
		logger.info("Static Pages and Footer Validation for : " + userType);
		extent.extentLogger("static", "Static Pages and Footer Validation for : " + userType);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		if (userType.contentEquals("Guest") || userType.contentEquals("NonSubscribedUser")) {
			AboutUsScreenValidation();
			HelpCenterScreenValidation();
			TermsOfUseValiadtion();
			PrivacyPolicyValidation();
			BuildVersionValidation();
			FooterSectionValidation(userType);
			contentLanguagewithDisplayLanguage();
		} else if (userType.contentEquals("SubscribedUser")) {
			SubscribedUserAboutUsScreenValidation();
			HelpCenterScreenValidation();
			SubscribedUserTermsOfUseValidation();
			SubscribedUserPrivacyPolicyValidation();
			// BuildVersionValidation();
			// FooterSectionValidation(userType);
			// contentLanguagewithDisplayLanguage();
		}
	}

	public void searchScreen(String UserType) throws Exception {
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovie");
		landingOnSearchScreen();
		voiceInput();
		movieSearchResult(keyword);
		liveTv();// Live Show Search from Live TV tab
		searchLiveTvChannels();// Live Channel Search from Live TV tab
		searchLiveFromChannelGuide();// from gaps //Live Show Search from Channel Guide tab
		verifyRecentSearches();// from gaps
		searchLanguage("Kannada");
		searchGenre("Comedy");
		partlySpeltSearchResult("Natas");
		emptystateScreen();
	}

	public void verifyRecentSearches() throws Exception {
		String keywordA = "Punar Vivaha";
		String keywordB = "Gattimela";
		// 4. Validate that Recent search does not appear by only searching a keyword.
		extent.HeaderChildNode("Recent Search: Validate keyword does not get added unless Search result is clicked");
		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		type(PWASearchPage.objSearchEditBox, keywordA, "Search edit box");
		waitTime(4000);
		verifyElementPresent(PWASearchPage.objSearchedResult(keywordA), "Search Result " + keywordA);
		click(PWASearchPage.objBackButton, "Back in Search box");
		click(PWAHomePage.objSearchBtn, "Search icon");
		if (verifyIsElementDisplayed(PWASearchPage.recentSearchItem1, "First Recent Search Item")) {
			if (getText(PWASearchPage.recentSearchItem1).equals(keywordA)) {
				logger.error(keywordA + " is displayed under Recent Searches even though search result wasnt clicked");
				extent.extentLoggerFail("",
						keywordA + " is displayed under Recent Searches even though search result wasnt clicked");
			} else {
				logger.info(keywordA + " is not the first item under Recent Searches");
				extent.extentLogger("", keywordA + " is not the first item under Recent Searches");
				logger.info(
						"Verified that keyword does not get displayed under Recent Search unless Search result is clicked");
				extent.extentLogger("",
						"Verified that keyword does not get displayed under Recent Search unless Search result is clicked");
			}
		} else {
			logger.info(
					"Verified that keyword does not get displayed under Recent Search unless Search result is clicked");
			extent.extentLogger("",
					"Verified that keyword does not get displayed under Recent Search unless Search result is clicked");
		}
		// 1. Validate "Recent Searches" text.
		// 2. Validate "Clear All" text.
		// 5. Validate that Recent Search appears only if we tap on a search result.
		extent.HeaderChildNode(
				"Recent Search: Validate 'Recent Searches' text and 'Clear All' text after tapping on Search Result");
		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		type(PWASearchPage.objSearchEditBox, keywordB, "Search edit box");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchShowsTab, "Shows tab");
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keywordB), "Search Result " + keywordB);
		waitTime(2000);
		click(PWAHomePage.objSearchBtn, "Search icon");
		verifyElementPresent(PWASearchPage.recentSearchsLabel, "Recent Searches tray");
		verifyElementPresent(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text");
		if (verifyIsElementDisplayed(PWASearchPage.recentSearchItem1, "First Recent Search Item")) {
			if (getText(PWASearchPage.recentSearchItem1).equals(keywordB)) {
				logger.info(keywordB + " is displayed under Recent Searches as expected");
				extent.extentLogger("", keywordB + " is displayed under Recent Searches as expected");
			} else {
				logger.error(keywordB + " is not the first item under Recent Searches");
				extent.extentLoggerFail("", keywordB + " is not the first item under Recent Searches");
			}
		} else {
			logger.error("There is no item under Recent Searches");
			extent.extentLoggerFail("", "There is no item under Recent Searches");
		}
		// 6. Validate the order of the Recent Searches for all the 5 keywords. (latest
		// on top and descending order)
		String keyword1 = "Kundali Bhagya";
		String keyword2 = "Kumkum Bhagya";
		String keyword3 = "Paaru";
		String keyword4 = "Robin Hood";
		String keyword5 = "Jothe Jotheyali";
		String keyword6 = "Naaginn";
		extent.HeaderChildNode("Recent Search: Validate only 5 keywords get added and order of keywords");
		ArrayList<String> keywords = new ArrayList<String>();
		keywords.add(keyword1);
		keywords.add(keyword2);
		keywords.add(keyword3);
		keywords.add(keyword4);
		keywords.add(keyword5);
		keywords.add(keyword6);
		for (int i = 0; i <= 5; i++) {
			// handle mandatory pop up
			mandatoryRegistrationPopUp(user);
			String key = keywords.get(i).toString();
			logger.info("Search for keyword " + (i + 1));
			extent.extentLogger("", "Search for keyword " + (i + 1));
			clearField(PWASearchPage.objSearchEditBox, "Search Bar");
			type(PWASearchPage.objSearchEditBox, key, "Search edit box");
			verifyElementPresentAndClick(PWASearchPage.objSearchShowsTab, "Shows tab");
			waitTime(5000);
			verifyElementPresentAndClick(PWASearchPage.objSearchedResult(key), "Search Result " + key);
			waitTime(2000);
			click(PWAHomePage.objSearchBtn, "Search icon");
		}
		waitTime(5000);
		List<WebElement> recentSearchItems = findElements(PWASearchPage.recentSearchItems);
		int size = recentSearchItems.size();
		if (size == 5) {
			logger.info("5 items are displayed under Recent Searches as expected");
			extent.extentLogger("", "5 items are displayed under Recent Searches as expected");
		} else {
			logger.error(size + " items are displayed under Recent Searches instead of 5");
			extent.extentLoggerFail("", size + " items are displayed under Recent Searches instead of 5");
		}
		// verify order
		logger.info("Expected Order Required: " + keyword6 + ", " + keyword5 + ", " + keyword4 + ", " + keyword3 + ", "
				+ keyword2);
		extent.extentLogger("", "Expected Order Required: " + keyword6 + ", " + keyword5 + ", " + keyword4 + ", "
				+ keyword3 + ", " + keyword2);
		String actual = getText(PWASearchPage.recentSearchItem(1));
		String expected = keywords.get(5);
		if (actual.equals(expected)) {
			logger.info("Recent Searches Order is maintained for item 5: " + actual);
			extent.extentLogger("", "Recent Searches Order is maintained for item 5: " + actual);
		} else {
			logger.error(actual + " is displayed instead of " + expected
					+ ", Recent Searches Order not maintained for item 5");
			extent.extentLoggerFail("", actual + " is displayed instead of " + expected
					+ ", Recent Searches Order not maintained for item 5");
		}
		actual = getText(PWASearchPage.recentSearchItem(2));
		expected = keywords.get(4);
		if (actual.equals(expected)) {
			logger.info("Recent Searches Order is maintained for item 4: " + actual);
			extent.extentLogger("", "Recent Searches Order is maintained for item 4: " + actual);
		} else {
			logger.error(actual + " is displayed instead of " + expected
					+ ", Recent Searches Order not maintained for item 4");
			extent.extentLoggerFail("", actual + " is displayed instead of " + expected
					+ ", Recent Searches Order not maintained for item 4");
		}
		actual = getText(PWASearchPage.recentSearchItem(3));
		expected = keywords.get(3);
		if (actual.equals(expected)) {
			logger.info("Recent Searches Order is maintained for item 3: " + actual);
			extent.extentLogger("", "Recent Searches Order is maintained for item 3: " + actual);
		} else {
			logger.error(actual + " is displayed instead of " + expected
					+ ", Recent Searches Order not maintained for item 3");
			extent.extentLoggerFail("", actual + " is displayed instead of " + expected
					+ ", Recent Searches Order not maintained for item 3");
		}
		actual = getText(PWASearchPage.recentSearchItem(4));
		expected = keywords.get(2);
		if (actual.equals(expected)) {
			logger.info("Recent Searches Order is maintained for item 2: " + actual);
			extent.extentLogger("", "Recent Searches Order is maintained for item 2: " + actual);
		} else {
			logger.error(actual + " is displayed instead of " + expected
					+ ", Recent Searches Order not maintained for item 2");
			extent.extentLoggerFail("", actual + " is displayed instead of " + expected
					+ ", Recent Searches Order not maintained for item 2");
		}
		actual = getText(PWASearchPage.recentSearchItem(5));
		expected = keywords.get(1);
		if (actual.equals(expected)) {
			logger.info("Recent Searches Order is maintained for item 1: " + actual);
			extent.extentLogger("", "Recent Searches Order is maintained for item 1: " + actual);
		} else {
			logger.error(actual + " is displayed instead of " + expected
					+ ", Recent Searches Order not maintained for item 1");
			extent.extentLoggerFail("", actual + " is displayed instead of " + expected
					+ ", Recent Searches Order not maintained for item 1");
		}
		// 3. Validate 5 keywords get added. Search for 6 but only 5 recent searches
		// must be present.
		if (!verifyIsElementDisplayed(PWASearchPage.recentSearchItem(keywords.get(0)),
				"First searched keyword " + keywords.get(0))) {
			logger.info("Keyword searched initially is not displayed, FIFO maintained");
			extent.extentLogger("", "Keyword searched initially is not displayed, FIFO maintained");
		} else {
			logger.error(
					"Keyword searched initially is displayed even after searching 5 keywords after that, FIFO not maintained");
			extent.extentLoggerFail("",
					"Keyword searched initially is displayed even after searching 5 keywords after that, FIFO not maintained");
		}
		// 8. Click on a recent search-> the keyword must fill the search edit field and
		// search results must be displayed.
		// 9. Click on a recent search->Click on a search result and navigate back-> The
		// Recent Search keyword order must change and be displayed at the top.
		extent.HeaderChildNode("Recent Search: Validate click on Recent search Keyword functionality");
		String recent0 = getText(PWASearchPage.recentSearchItem(5));
		click(PWASearchPage.recentSearchItem(5), "Recent Searches Bottom most item: " + recent0);
		verifyElementPresentAndClick(PWASearchPage.objSearchShowsTab, "Shows tab");
		waitTime(5000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(recent0), "Search Result " + recent0);
		waitTime(2000);
		click(PWAHomePage.objSearchBtn, "Search icon");
		if (verifyElementDisplayed(PWASearchPage.recentSearchItem(recent0, 1))) {
			logger.info("Recent Searches item " + recent0 + " in top position");
			extent.extentLogger("", "Recent Searches item " + recent0 + " in top position");
			logger.info("Verified the clicked Recent Searches item takes the top most position under Recent Searches");
			extent.extentLogger("",
					"Verified the clicked Recent Searches item takes the top most position under Recent Searches");
		} else {
			logger.error("Clicked Recent Searches item has not taken the top most position, FIFO not maintained");
			extent.extentLoggerFail("",
					"Clicked Recent Searches item has not taken the top most position, FIFO not maintained");
		}
		// 7. Validate Clear All functionality-> Keywords, Recent Searches Text, Clear
		// All must not be displayed after clear all functionality is performed. Only
		// Trending search must be present after clear all functionality.
		click(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text");
		waitTime(2000);
		if (verifyIsElementDisplayed(PWASearchPage.recentSearchsLabel, "Recent Searches tray")) {
			logger.error("Recent Searches tray is displayed even after clicking Clear All text");
			extent.extentLoggerFail("", "Recent Searches tray is displayed even after clicking Clear All text");
		}
		if (verifyIsElementDisplayed(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text")) {
			logger.error("Clear All text is displayed even after clicking Clear All text");
			extent.extentLoggerFail("", "Clear All text is displayed even after clicking Clear All text");
		}
		recentSearchItems = findElements(PWASearchPage.recentSearchItems);
		size = recentSearchItems.size();
		if (size > 0) {
			logger.error(size + "keywords found under Recent Searches");
			extent.extentLoggerFail("", size + "keywords found under Recent Searches");
		} else {
			logger.info("No keywords found under Recent Searches");
			extent.extentLogger("", "No keywords found under Recent Searches");
		}
	}

	public void searchLiveFromChannelGuide() throws Exception {
		extent.HeaderChildNode("Fetch Live Show from Channel Guide and verify Search");
		click(PWASearchPage.objBackButton, "Back in Search box");
		reloadHome();
		navigateToAnyScreen("Live TV");
		waitforLiveTabToLoad();
		verifyElementPresentAndClick(PWALiveTVPage.objChannelGuideToggle, "Channel Guide");
		String liveshow = null;
		boolean foundShow = false;
		waitforChannelGuideToLoad();
		List<WebElement> onGoingShows = findElements(PWALiveTVPage.objOngoingLiveTvShowTitles);
		for (int i = 0; i < onGoingShows.size(); i++) {
			try {
				liveshow = onGoingShows.get(i).getText();
				System.out.println(liveshow);
				if (liveshow != null && !liveshow.equals("")) {
					foundShow = true;
					break;
				}
			} catch (Exception e) {
			}
		}
		if (foundShow == true) {
			logger.info("Live Show title fetched from Channel Guide screen : " + liveshow);
			extent.extentLogger("", "Live Show title fetched from Channel Guide screen : " + liveshow);
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, liveshow + "\n", "Search edit box");
			waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
			verifyElementPresent(PWASearchPage.objSearchedResult(liveshow), "Search Result " + liveshow);
			verifyElementPresent(PWALiveTVPage.objLiveLabel(liveshow), "LIVE Label for Search result " + liveshow);
			verifyElementPresent(PWALiveTVPage.objLiveProgressBar(liveshow),
					"Progress Bar for Search result " + liveshow);
		} else {
			logger.error("No Ongoing Show in Channel Guid screen");
			extent.extentLoggerFail("", "No Ongoing Show in Channel Guid screen");
		}
	}

	/**
	 * Validating Search result screen
	 */
	public void searchResultScreen(String title) throws Exception {
		// gap covered
		extent.HeaderChildNode("Validating search results on entering less than 3 characters");
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, "ze\n", "Search bar");
		waitTime(2000);
		if (verifyIsElementDisplayed(PWASearchPage.objSearchResultScreen, "Search results")) {
			logger.error("Search results are displayed when user enters less than 3 characters");
			extent.extentLoggerFail("Search result screen",
					"Search results are displayed when user enters less than 3 characters");

		} else {
			logger.info("Search results are not displayed when user enters less than 3 characters, expected behavior");
			extent.extentLogger("Search result screen",
					"Search results are not displayed when user enters less than 3 characters, expected behavior");
		}
		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		// gap covered
		extent.HeaderChildNode("Validating search results on entering 3 characters");
		type(PWASearchPage.objSearchEditBox, "mum\n", "Search bar");
		waitTime(4000);
		if (verifyIsElementDisplayed(PWASearchPage.objSearchResultScreen, "Search results")) {
			logger.info("Search results are displayed when user enters 3 characters, expected behavior");
			extent.extentLogger("Search result screen",
					"Search results are displayed when user enters 3 characters, expected behavior");
		} else {
			logger.error("Search results are not displayed when user enters 3 characters");
			extent.extentLoggerFail("Search result screen",
					"Search results are not displayed when user enters 3 characters");
		}
		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		extent.HeaderChildNode("Validating search results on entering more than 3 characters");
		type(PWASearchPage.objSearchEditBox, title + "\n", "Search bar");
		waitTime(3000);
		hideKeyboard();
		Thread.sleep(5000);
		String enteredValue = getAttributValue("value", PWASearchPage.objSearchEditBox);
		if (enteredValue.length() >= 3) {
			if (verifyIsElementDisplayed(PWASearchPage.objSearchResultScreen, "Search results")) {
				logger.info("Search results are displayed when user enters more than 3 characters in the search box");
				extent.extentLogger("Search result screen",
						"Search results are displayed when user enters more than 3 characters in the search box");

			} else {
				logger.error(
						"Search results are not displayed when user enters more than 3 characters in the search box");
				extent.extentLoggerFail("Search result screen",
						"Search results are not displayed when user enters more than 3 characters in the search box");
			}
		} else {
			logger.error(
					"Search result screen is not displayed when user enters less than 3 characters in the search box.");
		}
		waitTime(5000);
		List<WebElement> tabs = getDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();
			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");
			if (getDriver().findElements(By.xpath(
					"(//div[@class='listingGrid']//div[@class='metaData']//h3[contains(@class,'cardTitle')]//span[@class='highLight'])"))
					.size() > 0) {
				logger.info("Related search results are displayed");
				extent.extentLogger("Related search results", "Related search results are displayed");

			} else {
				logger.info("Related search results are not displayed");
				extent.extentLogger("Related search results", "Related search results are not displayed");
			}
		}
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
		verifyElementPresentAndClick(PWASearchPage.objBackButton, "Back in Search box");
	}

	/**
	 * verifing live tv card and verifing Recent searches overlay
	 */
	public void liveTv() throws Exception {
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		extent.HeaderChildNode("Fetch Live Show from Live TV tab and verify Search");
		String liveContentName = fetchLiveContent();
		String liveContentNamemod = liveContentName;
		if (liveContentName.contains("/")) {
			liveContentNamemod = liveContentName.split("/")[0];
			System.out.println(liveContentNamemod);
		}
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, liveContentName + "\n", "Search bar");
		hideKeyboard();
		waitTime(10000);
		for (int scroll = 0; scroll < 4; scroll++) {
			if (verifyIsElementDisplayed(PWALiveTVPage.objrelatedChannel(liveContentNamemod))) {
				break;
			} else {
				Swipe("UP", 1);
				waitTime(2000);
			}
		}
		if (verifyElementPresent(PWALiveTVPage.objrelatedChannelLiveLogo(liveContentNamemod),
				"LIVE Logo for " + liveContentName)) {
			verifyElementPresent(PWALiveTVPage.objrelatedChannel(liveContentNamemod), "Live Show " + liveContentName);
			waitTime(3000);
			JSClick(PWALiveTVPage.objrelatedChannelLiveLogo(liveContentNamemod), "LIVE Logo");
			waitTime(4000);
			waitForElement(PWAPlayerPage.objContentTitleLiveTV, 20, "Content title");
			String consumptionsTitle = "";
			try {
				consumptionsTitle = getText(PWAPlayerPage.objContentTitleLiveTV);
				logger.info("Consumptions title fetched: " + consumptionsTitle);
				extent.extentLogger("", "Consumptions title fetched: " + consumptionsTitle);
			} catch (Exception e) {
			}
			if (consumptionsTitle.equals(liveContentName)) {
				logger.info("Navigated to Consumption screen successfully");
				extent.extentLogger("", "Navigated to Consumption screensuccessfully");

			} else {
				logger.error("Failed to navigate to right Consumption screen");
				extent.extentLoggerFail("", "Failed to navigate to right Consumption screen");
			}
			if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
				click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
			}
			click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		} else {
			Back(1);
		}
	}

	/**
	 * Function to verify the UI of Live Tv And Channel Guide
	 */
	public void verifyLiveTvAndChannelGuideScreen() throws Exception {
		extent.HeaderChildNode("Verify Live TV And Channel Guide Screen");
		waitTime(5000);
		System.out.println(getText(PWAHomePage.objActiveTab));
		verifyElementPresentAndClick(PWALiveTVPage.objLiveTVMenu, "Live TV Menu");
		if (waitforLiveTabToLoad()) {
			System.out.println(getText(PWAHomePage.objActiveTab));
			String channelTitle = getDriver().findElement(PWALiveTVPage.objLiveChannelCardTitle).getText();
			System.out.println(channelTitle);
			logger.info("Live Channel Card Title fetched: " + channelTitle);
			extent.extentLogger("Live Channel Page", "Live Channel Card Title fetched: " + channelTitle);
			verifyElementPresentAndClick(PWALiveTVPage.objLiveChannelCard, "Live Channel Card");
			waitTime(10000);
			String playerPageChannelTitle = getDriver().findElement(PWALiveTVPage.objLiveChannelConsumptionPageTitle)
					.getText();
			logger.info("Title fetched from Consumption page: " + playerPageChannelTitle);
			extent.extentLogger("Live Channel Page", "Title fetched from Consumption page: " + playerPageChannelTitle);
			if (channelTitle.equalsIgnoreCase(playerPageChannelTitle)) {
				logger.info("Navigated to respective Live Channel Consumption screen: " + playerPageChannelTitle);
				extent.extentLogger("Live Channel Page",
						"Navigated to respective Live Channel Consumption screen: " + playerPageChannelTitle);
			} else {
				logger.error("Not navigated to respective Live Channel Consumption screen");
				extent.extentLoggerFail("Live Channel Page",
						"Not navigated to respective Live Channel Consumption screen");
			}
			waitTime(5000);
			Back(1);
			waitTime(5000);
		}
		verifyElementPresentAndClick(PWALiveTVPage.objChannelGuideToggle, "Channel Guide Toggle");
		if (waitforChannelGuideToLoad()) {
			verifyElementPresentAndClick(PWALiveTVPage.objLiveTVToggleInactive, "Live TV Toggle");
			click(PWALiveTVPage.objChannelGuideToggle, "Channel Guide Toggle");
			verifyElementPresentAndClick(PWALiveTVPage.objChannelDayStrip, "Channel/Day Strip");
			click(PWALiveTVPage.objUpcomingLiveProgramDate, "Upcoming Live Program Date");
			verifyElementPresentAndClick(PWALiveTVPage.objChannelGuideSortOption, "Sort Option");
			verifyElementPresent(PWALiveTVPage.objSortByPopularity, "Sort By Popularity Option");
			verifyElementPresent(PWALiveTVPage.objSortByAZ, "Sort by A-Z Option");
		}
		Back(2);
	}

	/**
	 * Function verify upnext rail
	 */
	public void UpnextRail() throws Exception {
		extent.HeaderChildNode("Validating UpNext rail");
		// Click on home page
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		// Click on search icon
		click(PWAHomePage.objSearchBtn, "Search Button");
		// Enter text
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("episodeSpoiler");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box");
		hideKeyboard();
		// Click on first content
		waitTime(3000);
		for (int i = 0; i < 2; i++) {
			try {
				waitTime(5000);
				click(PWASearchPage.objSearchedResult(keyword), "Search Result");
				break;
			} catch (StaleElementReferenceException e) {
			}
		}
		waitTime(30000);
		for (int trial = 0; trial <= 80; trial++) {
			try {
				getDriver().findElement(PWAPlayerPage.objfirstContent);
				System.out.println("Up next Rail displayed");
				extent.extentLogger("Upnext Rail", "Up next Rail displayed");
				logger.info("Up next Rail displayed");
				break;
			} catch (Exception e) {
				Thread.sleep(2000);
			}
		}
		waitTime(5000);
		waitForPlayerAdToComplete("Video Player");
		if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up"))
			verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close icon");
		String episodeName = getElementPropertyToString("innerText", PWAPlayerPage.objContentName, "Content name");
		extent.extentLogger("epnameUI", "Up Next content from UI: " + episodeName);
		logger.info("Up Next content from UI: " + episodeName);
		getResponseUpNextRail.getResponse();
		String APIData = getResponseUpNextRail.getMediaContentName();
		extent.extentLogger("epnameAPI", "Up Next content from API: " + APIData);
		logger.info("Up Next content from API: " + APIData);
		if (APIData.substring(0, 10).equals(episodeName.substring(0, 10))) {// Added substring function as temporary
																			// solution to equals problem.
			extent.extentLogger("Upnext Rail", "The first content Auto played in Upnext rail");
			logger.info("Upnext rail content is auto played");
		} else {
			extent.extentLoggerFail("Verify UpNext Rail", "Mismatch observed, Upnext content auto play is failed");
			logger.info("Mismatch observed, Upnext content playabck is failed");
		}
	}

	/*
	 * Validating if selected Content language is displayed in the Regional Pack
	 */
	public void contentLanguageVerify(String userType) throws Exception {
		if (userType.contains("Guest") || userType.contains("NonSubscribedUser")) {
			extent.HeaderChildNode("Validating if selected Content language is displayed in the Regional Pack");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, "Content Language");
			// verifyElementPresentAndClick(PWAHamburgerMenuPage.objTamil, "Tamil
			// Language");
			List<WebElement> selectedLanguages = getDriver().findElements(PWAHamburgerMenuPage.objSelectedLanguages);
			System.out.println(selectedLanguages.size());
			ArrayList<String> contentLanguages = new ArrayList<String>();
			for (int i = 1; i <= selectedLanguages.size(); i++) {
				System.out.println("Selected Content Language : " + getDriver().findElement(By.xpath(
						"((//div[@class='checkboxWrap checkedHighlight'])//child::*[@class='commonName'])[" + i + "]"))
						.getText());
				contentLanguages.add(getDriver().findElement(By.xpath(
						"((//div[@class='checkboxWrap checkedHighlight'])//child::*[@class='commonName'])[" + i + "]"))
						.getText());
			}
			System.out.println(contentLanguages);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplyBtn, "Apply Button");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");

			waitTime(5000);

			Swipe("UP", 1);

			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "Have a Code");
			hideKeyboard();

			verifyElementPresentAndClick(PWAHomePage.objPopUpClose, "Close icon");
			List<WebElement> selectedRegionalLanguages = getDriver().findElements(PWASubscriptionPages.objPackTypes);
			System.out.println("selectedRegionalLanguages size : " + selectedRegionalLanguages.size());
			for (int i = 2; i <= selectedRegionalLanguages.size(); i++) {
				System.out.println(getText(PWASubscriptionPages.objPackType(i)));
				if (contentLanguages.contains(getText(PWASubscriptionPages.objPackType(i)))) {
					System.out.println("Regional pack is displayed as per the selected content language");
					getDriver().findElement(By.xpath(
							"(//span[@class='noSelect'][.='" + getText(PWASubscriptionPages.objPackType(i)) + "'])"))
							.click();
					List<WebElement> packs = getDriver().findElements(PWASubscriptionPages.objPackTitle);
					System.out.println("Number of packs available " + packs.size());
					for (int k = 1; k <= packs.size(); k++) {
						logger.info("Pack Type : " + getDriver()
								.findElement(By.xpath("((//div[@class='planDescription']))[" + k + "]")).getText());
						extent.extentLogger("Pack Type", "Pack Type : " + getDriver()
								.findElement(By.xpath("((//div[@class='planDescription']))[" + k + "]")).getText());
						logger.info("Pack Amount : "
								+ getDriver().findElement(By.xpath("(//p[@class='currency'])[" + k + "]")).getText());
						extent.extentLogger("Pack Amount", "Pack Amount : "
								+ getDriver().findElement(By.xpath("(//p[@class='currency'])[" + k + "]")).getText());
						logger.info("Pack Duration : "
								+ getDriver().findElement(By.xpath("(//p[@class='duration'])[" + k + "]")).getText());
						extent.extentLogger("Pack Duration", "Pack Duration : "
								+ getDriver().findElement(By.xpath("(//p[@class='duration'])[" + k + "]")).getText());
					}
				}
			}
			// Added for reporting
			List<WebElement> packs = findElements(PWASubscriptionPages.objPackType);
			for (int i = 0; i < packs.size(); i++) {
				logger.info(packs.get(i).getText() + " is not a Regional Pack, RSVOD packs are no more valid");
				extent.extentLoggerWarning("",
						packs.get(i).getText() + " is not a Regional Pack, RSVOD packs are no more valid");
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	/*
	 * Zee Subscription Page Validation
	 */
	public void verifyUIofZEESubscriptionPage(String userType) throws Exception {

		if (userType.contains("Guest") || userType.contains("NonSubscribedUser")) {

			extent.HeaderChildNode("Zee Subscription Page Validation");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");
			
			waitTime(3000);
			
			Swipe("UP",1);

			extent.HeaderChildNode("Validating if Have a code section is displayed on Zee subscription screen.");

			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "Have a Code section");

			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACodePlaceHolder, "'Enter Code?' field");
			waitTime(3000);
			/*
			 * String packTitle = getText(PWASubscriptionPages.objPackCategoryTabSelected);
			 * logger.info(packTitle); extent.extentLogger("Pack Title", packTitle +
			 * " is displayed");
			 * 
			 * String packDescription = getText(PWASubscriptionPages.objPackDescription);
			 * logger.info(packDescription); extent.extentLogger("Pack Description",
			 * packDescription + " is displayed");
			 * 
			 * extent.HeaderChildNode("Verifying the Default selected Pack ");
			 * 
			 * String defaultSelectedPackTitle =
			 * getText(PWASubscriptionPages.objSelectedSubscriptionPlanType);
			 * logger.info("Default Selected Pack Type " + defaultSelectedPackTitle);
			 * extent.extentLogger("Default Selected Pack Type",
			 * "Default Selected Pack Type " + defaultSelectedPackTitle);
			 * 
			 * String defaultSelectedPackAmount =
			 * getText(PWASubscriptionPages.objSelectedSubscriptionPlanAmount);
			 * logger.info("Default Selected Pack Amount " + defaultSelectedPackAmount);
			 * extent.extentLogger("Default Selected Pack Amount",
			 * "Default Selected Pack Type " + defaultSelectedPackAmount);
			 * 
			 * String defaultSelectedPackDuration =
			 * getText(PWASubscriptionPages.objSelectedSubscriptionPlanDuration);
			 * logger.info("Default Selected Pack Duration " + defaultSelectedPackDuration);
			 * extent.extentLogger("Default Selected Pack Duration",
			 * "Default Selected Pack Duration " + defaultSelectedPackDuration);
			 * 
			 * extent.HeaderChildNode("Verifying the URL of the page");
			 * 
			 * String url = getDriver().getCurrentUrl(); logger.info("URL of the page : " +
			 * url); extent.extentLogger("URL", "URL of the page : " + url);
			 */
			extent.HeaderChildNode("Validating if the Coupon code accepts special characters");
			String code = "SAMSUNG2";
			type(PWASubscriptionPages.objHaveACode, code + "@&*", "Prepaid Code");
			/*
			 * String codeVerify = getElementPropertyToString("value",
			 * PWASubscriptionPages.objHaveACode, "Prepaid Code field");
			 * logger.info("Coupon code that got entered is " + codeVerify);
			 * extent.extentLogger("Coupon code", "Coupon code that got entered is " +
			 * codeVerify); if (code.equals(codeVerify)) {
			 * logger.info("Coupon code does not accept special characters");
			 * extent.extentLogger("Coupon code",
			 * "Coupon code does not accept special characters"); } else {
			 * logger.error("Coupon code has accepted special characters");
			 * extent.extentLoggerFail("Coupon code",
			 * "Coupon code has accepted special characters"); }
			 */
			verifyElementPresentAndClick(PWASubscriptionPages.objApplyBtn, "Apply Button");
			verifyElementPresent(PWASubscriptionPages.objAppliedCodeFailureMessage, "Failure message");
			String failureMsg = getText(PWASubscriptionPages.objAppliedCodeFailureMessage);
			logger.info("Failure message: " + failureMsg + " is displayed");
			extent.extentLogger("Failure Message", "Failure message: " + failureMsg + " is displayed");

			// verifyElementPresentAndClick(PWASubscriptionPages.objHaveACodeCloseBtn,
			// "Close Button");

			verifyElementPresentAndClick(PWAHomePage.objPopUpClose, "Close icon");

			Swipe("UP", 1);

			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "Have A Code section");

			// clearField(PWASubscriptionPages.objHaveACode, "Prepaid Code");

			clearField(PWASubscriptionPages.objHaveACodePlaceHolder, "Prepaid Code");

			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACodePlaceHolder, "'Enter Code?' field");
			waitTime(3000);

			type(PWASubscriptionPages.objHaveACode, "prein50", "Prepaid Code");
			verifyElementPresentAndClick(PWASubscriptionPages.objApplyBtn, "Apply Button");
			/*
			 * boolean ele1 =
			 * verifyElementPresent(PWASubscriptionPages.objAppliedSuccessfullyMessage,
			 * "Applied Successfully message"); String successMessage =
			 * getText(PWASubscriptionPages.objAppliedSuccessfullyMessage);
			 */
			boolean ele1 = verifyElementPresent(PWASubscriptionPages.objDiscountAppliedMessage,
					"Applied Successfully message");
			String successMessage = getText(PWASubscriptionPages.objDiscountAppliedMessage);
			logger.info(successMessage + " is displayed");
			extent.extentLogger("Success Message", successMessage + " is displayed");

			// verifyElementPresentAndClick(PWASubscriptionPages.objHaveACodeCloseBtn,
			// "Close Button");
			// verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "Have A Code
			// section");

			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACodeChangeBtn, "Change Button");

			// verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "Have A Code
			// section");

			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACodePlaceHolder, "'Enter Code?' field");
			waitTime(3000);

			type(PWASubscriptionPages.objHaveACode, "pREIN50", "Prepaid Code");
			verifyElementPresentAndClick(PWASubscriptionPages.objApplyBtn, "Apply Button");
			/*
			 * boolean ele2 =
			 * verifyElementPresent(PWASubscriptionPages.objAppliedSuccessfullyMessage,
			 * "Applied Successfully message"); String successMsg =
			 * getText(PWASubscriptionPages.objAppliedSuccessfullyMessage);
			 * logger.info(successMsg);
			 */
			boolean ele2 = verifyElementPresent(PWASubscriptionPages.objDiscountAppliedMessage,
					"Applied Successfully message");
			String successMsg = getText(PWASubscriptionPages.objDiscountAppliedMessage);

			extent.extentLogger("Success Message", successMsg + " is displayed");
			extent.HeaderChildNode("Validating if the Coupon code is case insensitive");
			if (ele1 && ele2 == true) {
				logger.info("Coupon code is case insensitive");
				extent.extentLogger("Coupon code", "Coupon code is case insensitive");
			} else {
				logger.error("Coupon code is case sensitive");
				extent.extentLoggerFail("Coupon code", "Coupon code is case sensitive");
			}

			extent.HeaderChildNode(
					"Validating the plans with discounted amount is displayed if applied code is successful.");
			List<WebElement> discountedPackAmount = getDriver().findElements(PWASubscriptionPages.objPackAmount);
			waitTime(4000);
			System.out.println(discountedPackAmount.size());

			for (int i = 0; i < discountedPackAmount.size(); i++) {
				logger.info("Discounted Pack Amount : "
						+ getDriver().findElement(By.xpath("(//span[@class= 'price'])[" + (i + 1) + "]")).getText());
				extent.extentLogger("Discounted Pack Amount", "Discounted Pack Amount : "
						+ getDriver().findElement(By.xpath("(//span[@class= 'price'])[" + (i + 1) + "]")).getText());
			}

			verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount1, "Discounted pack");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			paymentPageValidation();
		}

	}

	/*
	 * Validation of Complete Profile/Tell us more about you section
	 */
	public void verifyCompleteYourProfilePopUp(String userType) throws Exception {
		if (userType.contains("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"Validating if user is able to fill Complete Profile/Tell us more about you section");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objFirstName, "First Name Field");
			type(CompleteYourProfilePopUp.objFirstName, "Test\n", "First Name Field");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objLastName, "Last Name Field");
			type(CompleteYourProfilePopUp.objLastName, "User\n", "Last Name Field");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objDay, "Day Field");
			click(CompleteYourProfilePopUp.objDateSelector, "Date");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objMonth, "Month Field");
			click(CompleteYourProfilePopUp.objDateSelector, "Month");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objYear, "Year Field");
			click(CompleteYourProfilePopUp.objDateSelector, "Year");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objGenderFemale, "Gender Field");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objMobileNo, "Mobile Number");
			type(CompleteYourProfilePopUp.objMobileNo, "95839633299\n", "Mobile Number");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objCloseBtn, "Close Button");
		}

	}

	/*
	 * Validating the UI of My Subscription Page
	 */
	public void verifyUIofMySubscriptionPage(String userType) throws Exception {

		if (userType.contains("NonSubscribedUser")) {
			extent.HeaderChildNode("Validating the UI of My Subscription Page for Non Subscribed User");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyAccount, "My Account");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			extent.HeaderChildNode(
					"Validating if Empty state screen is displayed when user has No Active Subscriptions");
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objEmptyStateScreen, "Empty State Screen");
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objSubscriptionTeaserBanner,
					"Subscription Teaser Banner");
			extent.HeaderChildNode(
					"Validating if user is navigated to Zee Subscription screen post tapping on subscription teaser banner");
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee Subscription Page") == true) {
				logger.info("Navigated to Zee Subscription Page");
				extent.extentLogger("Subscription Page", "Navigated to Zee Subscription Page");
			} else {
				logger.info("Not navigated to Zee Subscription Page");
				extent.extentLogger("Subscription Page", "Not navigated to Zee Subscription Page");
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	/*
	 * Validating the UI of My Transactions Page and Active/Expired Cards
	 */
	public void validatingActiveAndExpiredCardsinMyTransactionPage(String userType) throws Exception {
		if (userType.contains("NonSubscribedUser") || userType.contains("SubscribedUser")) {
			extent.HeaderChildNode("Validating the UI of My Transactions Page");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyAccount, "My Account");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyTransactions, "MyTransaction");
			extent.HeaderChildNode(
					"Validating if Empty state screen is displayed when user doesn't have any purchase history");
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objEmptyStateScreen, "Empty State Screen");
			boolean NoTransactionPresent = verifyIsElementDisplayed(PWAHamburgerMenuPage.objNoTransaction,
					"No Transactions");
			if (NoTransactionPresent == false) {
				extent.HeaderChildNode("Validating the UI of Active/Expired Cards");
				List<WebElement> packs = getDriver().findElements(By.xpath("//p[@class='packTitle']"));
				System.out.println("No of Packs : " + packs.size());

				if (packs.size() > 1) {
					String status = getText(PWAHamburgerMenuPage.objMyTransactionPackStatus);
					logger.info("Pack Status :" + status);
					extent.extentLogger("Pack Status :", "Pack Status :" + status);

					if (status.equalsIgnoreCase("Active")) {

						String title = getText(PWAHamburgerMenuPage.objPackTitle);
						logger.info("Pack Title :" + title);
						extent.extentLogger("Pack Title :", "Pack Title :" + title);

						String price = getText(PWAHamburgerMenuPage.objPackPrice);
						logger.info("Pack Price :" + price);
						extent.extentLogger("Pack Price :", "Pack Price :" + price);

						String duration = getText(PWAHamburgerMenuPage.objPackDuration);
						logger.info("Pack Duration :" + duration);
						extent.extentLogger("Pack Duration :", "Pack Duration :" + duration);

						String renewalStatus = getText(PWAHamburgerMenuPage.objMyTransactionAutoRenewalStatus);
						logger.info("Pack Renewal Status :" + renewalStatus);
						extent.extentLogger("Pack Renewal Status :", "Pack Renewal Status :" + renewalStatus);

					}

					String status1 = getText(PWAHamburgerMenuPage.objMyTransactionPackStatus1);
					logger.info("Pack Status :" + status1);
					extent.extentLogger("Pack Status :", "Pack Status :" + status1);

					if (status1.equalsIgnoreCase("EXPIRED")) {

						String title1 = getText(PWAHamburgerMenuPage.objPackTitle1);
						logger.info("Pack Title :" + title1);
						extent.extentLogger("Pack Title :", "Pack Title :" + title1);

						String price1 = getText(PWAHamburgerMenuPage.objPackPrice1);
						logger.info("Pack Price :" + price1);
						extent.extentLogger("Pack Price :", "Pack Price :" + price1);

						String duration1 = getText(PWAHamburgerMenuPage.objPackDuration1);
						logger.info("Pack Duration :" + duration1);
						extent.extentLogger("Pack Duration :", "Pack Duration :" + duration1);

						String renewalStatus1 = getText(PWAHamburgerMenuPage.objMyTransactionAutoRenewalStatus1);
						logger.info("Pack Renewal Status :" + renewalStatus1);
						extent.extentLogger("Pack Renewal Status :", "Pack Renewal Status :" + renewalStatus1);
					}

				} else {

					String status = getText(PWAHamburgerMenuPage.objMyTransactionPackStatus);
					logger.info("Pack Status :" + status);
					extent.extentLogger("Pack Status :", "Pack Status :" + status);

					String title = getText(PWAHamburgerMenuPage.objPackTitle);
					logger.info("Pack Title :" + title);
					extent.extentLogger("Pack Title :", "Pack Title :" + title);

					String price = getText(PWAHamburgerMenuPage.objPackPrice);
					logger.info("Pack Price :" + price);
					extent.extentLogger("Pack Price :", "Pack Price :" + price);

					String duration = getText(PWAHamburgerMenuPage.objPackDuration);
					logger.info("Pack Duration :" + duration);
					extent.extentLogger("Pack Duration :", "Pack Duration :" + duration);

					String renewalStatus = getText(PWAHamburgerMenuPage.objMyTransactionAutoRenewalStatus);
					logger.info("Pack Renewal Status :" + renewalStatus);
					extent.extentLogger("Pack Renewal Status :", "Pack Renewal Status :" + renewalStatus);

				}
			}

			extent.HeaderChildNode(
					"Validating if user is navigated to Zee Subscription screen post tapping on subscription teaser banner");
			if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objSubscriptionTeaserBanner,
					"Subscription Teaser Banner") == true) {
				click(PWAHamburgerMenuPage.objSubscriptionTeaserBanner, "Subscription Teaser Banner");
				waitTime(5000);
				if (verifyIsElementDisplayed(PWASubscriptionPages.objZEE5Subscription,
						"Zee Subscription Page") == true) {
					logger.info("Navigated to Zee Subscription Page");
					extent.extentLogger("Subscription Page", "Navigated to Zee Subscription Page");
				} else {
					logger.info("Not navigated to Zee Subscription Page");
					extent.extentLogger("Subscription Page", "Not navigated to Zee Subscription Page");
				}

			}

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

		}
	}

	/*
	 * Payment Page Validation
	 */
	public void paymentPageValidation() throws Exception {
		extent.HeaderChildNode("Payment Page Validation");
		if (verifyIsElementDisplayed(PWASubscriptionPages.objEmailIDTextField, "Email ID field") == true) {
			verifyElementPresentAndClick(PWASubscriptionPages.objEmailIDTextField, "Email ID field");
			type(PWASubscriptionPages.objEmailIDTextField, "igszee5test123g@gmail.com", "Email Id");
			hideKeyboard();

			// verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted,
			// "Proceed Button in Account Info Page Highlighted");

			verifyElementPresent(PWASubscriptionPages.objContinueBtnn, "Continue button");
			waitTime(3000);
			click(PWASubscriptionPages.objContinueBtnn, "Continue button");
			waitTime(3000);

			// Password Popup
			verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");

			// verifyElementPresent(PWASubscriptionPages.objProceedBtnDisabled, "Disabled
			// Proceed Button");

			verifyElementPresent(PWASubscriptionPages.objContinueBtnn, "Disabled Continue button");
			waitTime(3000);

			verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
			type(PWASubscriptionPages.objPasswordFieldHidden, "igs@12345\n", "Password Field");
			hideKeyboard();
			// verifyIsElementDisplayed(PWASubscriptionPages.objProceedBtnEnabled, "Proceed
			// Button");
			// click(PWASubscriptionPages.objProceedBtnEnabled, "Enabled Proceed Button");
			waitTime(10000);

		}
		extent.HeaderChildNode("Validating the payment gateway using Credit Card");
		Swipe("UP", 1);
		waitTime(3000);
		getDriver().context("NATIVE_APP");
		verifyElementPresentAndClick(PWASubscriptionPages.objMobileCreditDebitCardOption,
				"'Credit / Debit Card' option");

		hideKeyboard();

		verifyElementPresent(PWASubscriptionPages.objMobileCardNumberText, "Card Number");
		verifyElementPresent(PWASubscriptionPages.objMobileExpiryText, "Expiry field");
		verifyElementPresent(PWASubscriptionPages.objMobileCVVText, "CVV field");
		verifyElementPresent(PWASubscriptionPages.objMobileProceedToPayButton, "Proceed to Pay button");
		click(PWASubscriptionPages.objCreditDebitClose, "Credit/Debit card Close");
		getDriver().context("CHROMIUM");
		Back(1);
		extent.HeaderChildNode("Validating the payment gateway using Paytm");
		getDriver().context("NATIVE_APP");
		verifyElementPresentAndClick(PWASubscriptionPages.objMobileWalletsOption, "'Wallets' option");
		verifyElementPresentAndClick(PWASubscriptionPages.objMobilePaytmOption, "Paytm option");
		if (verifyIsElementDisplayed(PWASubscriptionPages.objMobileLinkPaytmOption, "Link PAYTM Wallet")) {

			verifyElementPresentAndClick(PWASubscriptionPages.objMobilePaytmNumberField, "PayTM Mobile number field");

			waitTime(2000);

			type(PWASubscriptionPages.objMobilePaytmNumberField, "9876543210", "PayTM Mobile number field");
			hideKeyboard();

			verifyElementPresentAndClick(PWASubscriptionPages.objMobilePaytmSendOTP, "SEND OTP button");

		} else {
			verifyElementPresentAndClick(PWASubscriptionPages.objMobileProceedToPayButton, "Proceed to Pay button");
			logger.info("URL opened: " + getDriver().getCurrentUrl());
			extent.extentLogger("New web page loaded", "URL opened: " + getDriver().getCurrentUrl());
			if (getDriver().getCurrentUrl().contains("paytm")) {
				logger.info("User is navigated to Paytm gateway page");
				extent.extentLogger("New web page loaded", "User is navigated to Paytm gateway page");
			} else {
				logger.info("User didn't get navigated to Paytm gateway page");
				extent.extentLogger("New web page is not loaded", "User didn't get navigated to Paytm gateway page");
			}
			Back(1);
		}
		getDriver().context("CHROMIUM");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void newsPageValidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("News Page Validation");
		navigateToAnyScreen("News");
		waitTime(7000);
		waitForElement(PWANewsPage.objLiveNewsCard, 60, "News Card");
		String newsCardTitle = getElementPropertyToString("data-minutelytitle", PWANewsPage.objLiveNewsCard,
				"News Card Title");
		logger.info("News card title fetched: " + newsCardTitle);
		extent.extentLogger("", "News card title fetched: " + newsCardTitle);
		click(PWANewsPage.objLiveNewsCard, "News Card Title");
		waitTime(10000);
		if (verifyElementPresent(PWAPlayerPage.objPlayerControlScreen, "Player control containing screen")) {
			waitforNewsConsumptionsToLoad();
			String newsConsumptionsTitle = getText(PWANewsPage.objLiveNewsConsumptionsTitle);
			logger.info("News title from consumptions page: " + newsConsumptionsTitle);
			extent.extentLogger("", "News title from consumptions page: " + newsConsumptionsTitle);
			if (newsCardTitle.equals(newsConsumptionsTitle)) {
				logger.info("Navigated to correct Consumptions Page");
				extent.extentLogger("Consumption Page", "Navigated to correct Consumption Page");
			} else {
				logger.error("Navigated to incorrect Consumptions Page");
				extent.extentLoggerFail("Consumption Page", "Navigated to incorrect Consumptions Page");
			}
		} else {
			logger.error("Not navigated to Consumptions Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumptions Page");
		}
		newsPlayerIconValidations();
		Back(1);
		if (verifyIsElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			if (verifyIsElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		Back(1);
		// newsTrayValidation();
		extent.HeaderChildNode("Verifing the trays displayed in News Tab");
		pagesTrayValidation("News");
	}

	public void newsPlayerIconValidations() throws Exception {
		extent.HeaderChildNode("Validation of Player Controls");
		pauseLiveTVPlayer();
		if (verifyIsElementDisplayed(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds icon")) {
			logger.error("Rewind 10 Seconds icon should not be available for News");
			extent.extentLoggerFail("", "Rewind 10 Seconds icon should not be available for News");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.objPlayOrPause, "Play/Pause icon")) {
			logger.error("Play/Pause icon is not available for News");
			extent.extentLoggerFail("", "Play/Pause icon is not available for News");
		}
		if (verifyIsElementDisplayed(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds icon")) {
			logger.error("Forward 10 Seconds icon should not be available for News");
			extent.extentLoggerFail("", "Forward 10 Seconds icon should not be available for News");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.settingsBtn, "Settings icon")) {
			logger.error("Settings icon is not available for News");
			extent.extentLoggerFail("", "Settings icon is not available for News");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.objLivePlayerVolume, "Volume icon")) {
			logger.error("Volume icon is not available for News");
			extent.extentLoggerFail("", "Volume icon is not available for News");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.objLiveTag, "LIVE Tag")) {
			logger.error("LIVE Tag is not available for News");
			extent.extentLoggerFail("", "LIVE Tag is not available for News");
		}
		extent.HeaderChildNode("Validation of full screen mode");
		click(PWAPlayerPage.maximizeBtn, "Maximize button");
		waitTime(3000);
		GetAndVerifyPWAOrientaion("Landscape");
		waitTime(5000);
		click(PWAPlayerPage.minimizeBtn, "Minimize button");
		waitTime(3000);
	}

	public void GetScreenOrientation() throws Exception {
		extent.HeaderChildNode("Validating full screen mode");
		click(PWAPlayerPage.maximizeBtn, "Maximize button");
		GetAndVerifyPWAOrientaion("Landscape");
		waitTime(3000);
		playerTap();
		click(PWAPlayerPage.minimizeBtn, "Minimize button");

	}

	public void MoviesScreen(String userType) throws Exception {
		extent.HeaderChildNode("Verifing whether user is able to navigate Movies landing page");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		navigateToAnyScreen("Movies");
		waitForElementDisplayed(PWAHomePage.objHighlightedTab("Movies"), 10);
		if (verifyElementPresent(PWAHomePage.objHighlightedTab("Movies"), "Movies")) {
			logger.info("Movies tab is highlighted, user is able to navigate Movies landing page");
			extent.extentLogger("Movies landing page",
					"Movies tab is highlighted, user is able to navigate Movies landing page");
		}
		waitTime(4000);
		extent.HeaderChildNode("Verifing movies premium and free content in landscape mode");
		for (int i = 0; i < 15; i++) {
			if (verifyIsElementDisplayed(PWAMoviesPage.objPremiumContentCardFromTray, "Premium Content in tray"))
				break;
			else {
				Swipe("UP", 1);
				waitTime(3000);
			}
		}
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		click(PWAMoviesPage.objPremiumContentCardFromTray, "Premium Content from tray");
		if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
			verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close icon");
			extent.HeaderChildNode("Verifing that premium content videos in landscape mode");
			if (verifyIsElementDisplayed(PWALiveTVPage.objPlayerInlineSubscriptionLink,
					"Player inline Subscribtion link")) {
				logger.info(
						"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
				extent.extentLogger("Maximize icon",
						"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
			}
			Back(1);
		} else {
			waitTime(2000);
			screenOrientation();
			Back(1);
			waitTime(3000);
		}
		chkPremiumORFreeFromVideosTabAndSelect("Trending Movies", "FREE");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void ClubScreen(String userType) throws Exception {
		extent.HeaderChildNode("Verifing whether user is able to navigate Club landing page");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		navigateToAnyScreen("Club");
		waitForElementDisplayed(PWAHomePage.objHighlightedTab("Club"), 10);
		if (verifyElementPresent(PWAHomePage.objHighlightedTab("Club"), "Club")) {
			logger.info("Club tab is highlighted, user is able to navigate to Club landing page");
			extent.extentLogger("Club landing page",
					"Club tab is highlighted, user is able to navigate to Club landing page");
		}
		extent.HeaderChildNode("Verify whether Hamburger menu overlay is displayed on clicking Hamburger menu icon");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		if (verifyElementPresentAndClick(PWAHamburgerMenuPage.objCloseHamburgerMenu, "Hamburger close button")) {
			logger.info("Hamburger menu overlay is displayed on clicking Hamburger menu icon");
			extent.extentLogger("menu", "Hamburger menu overlay is displayed on clicking Hamburger menu icon");
		} else {
			logger.error("Hamburger menu overlay open/close failed");
			extent.extentLoggerFail("menu", "Hamburger menu overlay open/close failed");
		}
		extent.HeaderChildNode("Verify on Tap of 'Zee5' Logo user should navigate to homepage.");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		waitTime(5000);
		if (checkElementExist(PWAHamburgerMenuPage.objHighlightedTab("Home"), "Highlighted Home tab")) {
			logger.info("User is navigated to Home page tapping on Zee5 Logo");
			extent.extentLogger("menu", "User is navigated to Home page tapping on Zee5 Logo");
		} else {
			logger.error("User is not navigated to Home page tapping on Zee5 Logo");
			extent.extentLoggerFail("menu", "User is not navigated to Home page tapping on Zee5 Logo");
		}

	}

	/**
	 * Validating Full screen mode
	 */
	public void screenOrientation() throws Exception {
		extent.HeaderChildNode("Validating full screen mode");
		pausePlayer();
		click(PWAPlayerPage.maximizeBtn, "Maximize button");
		waitTime(3000);
		GetAndVerifyPWAOrientaion("Landscape");
		waitTime(5000);
		click(PWAPlayerPage.minimizeBtn, "Minimize button");
		waitTime(3000);
	}

	public String chkPremiumORFreeFromVideosTabAndSelect(String str, String premiumORfree) throws Exception {
		swipeTillElement(7, PWALandingPages.objTrayTitleInUI(str), "\"" + str + "\" tray");
		Swipe("UP", 2);
		String ValueOfPremiumTumbnail = null;
		List<WebElement> tumnails = findElements(By.xpath("((//div[@class='trayHeader']//h2[.='" + str
				+ "'])//parent::*//parent::*//*[@class='noSelect clickWrapper' or @class='clickWrapper'])//figure"));
		System.out.println("Number of Tumbnails : " + tumnails.size());
		boolean flag = false;
		int k = 1;
		for (int j = 1; j <= 5; j++) {
			for (int i = k; i <= tumnails.size(); i++) {
				WebElement specificTumbnail = getDriver().findElement(By.xpath("((//div[@class='trayHeader']//h2[.='"
						+ str
						+ "'])//parent::*//parent::*//*[@class='noSelect clickWrapper' or @class='clickWrapper'])[" + i
						+ "]"));
				boolean elevisibility = verifyIsElementDisplayed(PWAHomePage.objVideoIsPremiumTumbnail(str, i),
						"Premium icon");
				if (elevisibility == true) {
					ValueOfPremiumTumbnail = getAttributValue("title", PWAHomePage.objVideoTumbnailTitle(str, i));
					logger.info("Premium Thumbnail Title : " + ValueOfPremiumTumbnail);
					extent.extentLogger("", "Premium Thumbnail Title : " + ValueOfPremiumTumbnail);
					if (premiumORfree.equals("PREMIUM")) {
						clickByElement(specificTumbnail, "Specific Thumbnail from Premium");
						flag = true;
						break;
					}
				} else if (elevisibility == false) {
					ValueOfPremiumTumbnail = getAttributValue("title", PWAHomePage.objVideoTumbnailTitle(str, i));
					logger.info("Non-Premium Thumbnail Title : " + ValueOfPremiumTumbnail);
					extent.extentLogger("", "Non-Premium Thumbnail Title : " + ValueOfPremiumTumbnail);
					if (premiumORfree.equals("FREE")) {
						clickByElement(specificTumbnail, "Specific Tumbnail from Non Premium");
						flag = true;
						break;
					}
				}
			}
			if (flag == true) {
				break;
			}
			swipeTumbnailToLeft(str);
			k = tumnails.size() + 1;
		}
		if (flag == false) {
			logger.info("There are no " + premiumORfree + " contents in " + str + " tray");
			extent.extentLoggerWarning("", "There are no " + premiumORfree + " contents in " + str + " tray");
			return "";
		} else {
			return ValueOfPremiumTumbnail;
		}
	}

	public void liveLandingPage() throws Exception {
		extent.HeaderChildNode("Verifing whether user is able to navigate Live Tv landing page");
		navigateToAnyScreen("Live TV");
		waitforLiveTabToLoad();
		dismissSystemPopUp();
		waitForElementDisplayed(PWAHomePage.objHighlightedTab("Live TV"), 10);
		if (verifyElementPresent(PWAHomePage.objHighlightedTab("Live TV"), "Live TV")) {
			logger.info("Live Tv tab is highlighted, user is able to navigate Live Tv landing page");
			extent.extentLogger("", "Live Tv tab is highlighted, user is able to navigate Live Tv landing page");
		}
		waitForElementDisplayed(PWALiveTVPage.objFirstfreeContentCard, 10);
		extent.HeaderChildNode(
				"Verifing that On tapping of 'Right side bottom arrow' user is navigated to top of screen");
		for (int i = 0; i < 3; i++) {
			Swipe("UP", 1);
		}
		waitForElementDisplayed(PWAHomePage.objBackToTopArrow, 3);
		click(PWAHomePage.objBackToTopArrow, "Back to Top Arrow");
		waitForElementDisplayed(PWALiveTVPage.objLiveTvFilterOption, 5);
		if (verifyIsElementDisplayed(PWALiveTVPage.objLiveTvFilterOption, "Filter option")) {
			logger.info("On tapping of 'Right side bottom arrow' user is navigated to top of screen without scrolling");
			extent.extentLogger("Right side bottom arrow",
					"On tapping of 'Right side bottom arrow' user is navigated to top of screen without scrolling");
		}
	}

	/**
	 * ===============BHAVANA - SHOWS MODULE================================
	 * 
	 * /* Function to verify Landscape mode for free content in Shows page
	 */
	public void verifyLandscapeforFreeContent() throws Exception {
		HeaderChildNode("Verify Landscape mode for Free content");
		navigateToAnyScreen("TV Shows");
		swipeTillElement(7, PWALandingPages.objTrayTitleInUI("Trending Shows"), "Trending Shows tray");
		click(PWALandingPages.objFirstAssetInTrayIndex("Trending Shows"), "First card under Trending Shows tray");
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		waitTime(3000);
		click(PWAShowsPage.objEpisodesSetTray, "Episode Tray");
		waitTime(2000);
		click(PWAShowsPage.objSecondSetEpisodeTray, "Second Episode set");
		waitTime(3000);
		JSClick(PWAShowsPage.objFirstContentInTray, "Free Content from tray");
		waitTime(3000);
		if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop up Title")) {
			click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
			waitTime(2000);
			logger.info("Next content begin to play");
			extent.extentLogger("Consumption Screen", "Next content begin to play");
			waitTime(5000);
		}
		waitForPlayerAdToComplete("Video Player");
		screenOrientation();
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/*
	 * Function to verify Landscape mode for premium content in Shows page
	 */

	public void verifyLandscapeforPremiumContent() throws Exception {
		HeaderChildNode("Verify Landscape mode for Premium content");
		navigateToAnyScreen("TV Shows");
		chkPremiumORFreeFromVideosTabAndSelect("Trending Shows", "FREE");// Select free show and then play premium
																			// content Watch latest Episode
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		verifyElementPresentAndClick(PWAShowsPage.objLatestepisode, "Watch latest Episode CTA");
		waitTime(5000);
		waitExplicitlyForElementPresence(PWASubscriptionPages.objSubscribePopupTitle, 60, "Subscribe Pop Up");
		if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop up Title")) {
			click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
			logger.info("Unable to verify landscape mode for Premium content for " + user);
			extent.extentLoggerWarning("", "Unable to verify landscape mode for Premium content for " + user);
			waitTime(5000);
		} else {
			waitForPlayerAdToComplete("Video Player");
			screenOrientation();
			waitTime(3000);
		}
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void ShowsValidation(String userType) throws Exception {
		if (userType.contentEquals("Guest")) {
			landingPagesValidation(userType, "Shows");
			verifyLandscapeforFreeContent();
			// verifyLandscapeforPremiumContent(); premium content cannot be viewed by guest
			// and non subscribed user
		} else if (userType.contentEquals("NonSubscribedUser")) {
			landingPagesValidation(userType, "Shows");
			verifyLandscapeforFreeContent();
			// verifyLandscapeforPremiumContent(); premium content cannot be viewed by guest
			// and non subscribed user
			VerifyExternalLinkInShowsLandingPage();
		} else if (userType.contentEquals("SubscribedUser")) {
			landingPagesValidation(userType, "Shows");
			verifyLandscapeforFreeContent();
			verifyLandscapeforPremiumContent();
			VerifyExternalLinkInShowsLandingPage();
		}
	}

	/*
	 * Function to verify internal links
	 */

	@SuppressWarnings("unused")
	public void InternalLinksValidation() throws Exception {
		String url = "";
		// Internal Links
		extent.HeaderChildNode("Internal Links Validation");
		swipeToBottomOfPage();
		swipeALittleDownForLinks();
		verifyElementPresentAndClick(PWAHomePage.objAboutUsInFooterSection, "About Us in footer section");
		url = getDriver().getCurrentUrl();
		extent.extentLogger("", "URL navigated: " + url);
		logger.info("URL navigated: " + url);
		if (verifyIsElementDisplayed(PWAHomePage.objAboutUs, "About Us screen")) {
			logger.info("User is navigated to About Us Screen");
		}
		Back(1);
		swipeToBottomOfPage();
		swipeALittleDownForLinks();
		verifyElementPresentAndClick(PWAHomePage.objHelp, "Help Center in footer section");
		boolean applicasterOpened = false;
		getDriver().context("NATIVE_APP");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objzeeAppCloseHelpCenter, "Close of Help Center Page")) {
			applicasterOpened = true;
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Getting Started"),
					"'Getting Started' tab of Help Center page");
			click(PWAHamburgerMenuPage.objzeeAppCloseHelpCenter, "Close of Help Center Page");
			Back(1);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objzeeAppInterstitialAddClose, "Close of Interstitial Ad")) {
				click(PWAHamburgerMenuPage.objzeeAppInterstitialAddClose, "Close of Interstitial Ad");
			}
			for (int i = 0; i < 3; i++) {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objzeeAppExit, "Exit of ZEE5 App")) {
					click(PWAHamburgerMenuPage.objzeeAppExit, "Exit of ZEE5 App");
					break;
				} else {
					Back(1);
					waitTime(3000);
				}
			}
		} else {
			try {
				directClickReturnBoolean(PWALiveTVPage.objChromeOpenWith, "Open with Chrome");
				waitTime(2000);
				// directClickReturnBoolean(PWALiveTVPage.objChromeOpenWith,"Open with Chrome");

			} catch (Exception e) {
			}
			getDriver().context("CHROMIUM");
			url = getDriver().getCurrentUrl();
			extent.extentLogger("", "URL navigated: " + url);
			logger.info("URL navigated: " + url);
			androidSwitchTab();
			if (verifyElementPresent(PWAHomePage.objHelpScreen, "Help Center screen")) {
				logger.info("User is navigated to Help Center Screen");
			}
			AndroidSwitchToParentWindow();
		}
		getDriver().context("CHROMIUM");
		swipeToBottomOfPage();
		swipeALittleDownForLinks();
		verifyElementPresentAndClick(PWAHomePage.objPrivacyPolicyInFooterSection, "Privacy Policy in footer section");
		url = getDriver().getCurrentUrl();
		extent.extentLogger("", "URL navigated: " + url);
		logger.info("URL navigated: " + url);
		if (verifyElementPresent(PWAHomePage.objPrivacyPolicy, "Privacy Policy screen")) {
			logger.info("User is navigated to Privacy Policy Screen");
		}
		Back(1);
		swipeToBottomOfPage();
		swipeALittleDownForLinks();
		verifyElementPresentAndClick(PWAHomePage.objTermsOfUseInfooterSection, "Terms of Use in footer section");
		url = getDriver().getCurrentUrl();
		extent.extentLogger("", "URL navigated: " + url);
		logger.info("URL navigated: " + url);
		if (verifyElementPresent(PWAHomePage.objTerms, "Terms of Use screen")) {
			logger.info("User is navigated to Terms of Use Screen");
		}
		Back(1);
	}

	/*
	 * Function to verify external links
	 */
	public void ExternalLinksValidation() throws Exception {
		extent.HeaderChildNode("External Links Validation");
		swipeToBottomOfPage();
		swipeALittleDownForLinks();
		verifyElementPresentAndClick(PWAHomePage.objInstagramIcon, "Instagram icon");
		waitTime(5000);
		androidSwitchTab();
		if (verifyIsElementDisplayed(PWAHomePage.objInstagramPage, "Instagram page follow button")) {
			logger.info("User is redirected to Instagram page");
			extent.extentLogger("", "User is redirected to Instagram page");
		} else {
			logger.error("User is not redirected to Instagram page");
			extent.extentLoggerFail("", "User is not redirected to Instagram page");
		}
		AndroidSwitchToParentWindow();
		// Twitter
		swipeToBottomOfPage();
		swipeALittleDownForLinks();
		verifyElementPresentAndClick(PWAHomePage.objTwitterIcon, "Twitter icon");
		getDriver().context("NATIVE_APP");
		try {
			getDriver().findElement(PWALiveTVPage.objTwitterOpenWith).click();
		} catch (Exception e) {
		}
		getDriver().context("CHROMIUM");
		waitTime(5000);
		getDriver().context("NATIVE_APP");
		boolean twitterAppLaunched = false;
		if (verifyIsElementDisplayed(PWAHomePage.objTwitterPage, "Twitter app Follow button")) {
			Back(1);
			twitterAppLaunched = true;
		}
		getDriver().context("CHROMIUM");
		if (twitterAppLaunched == false) {
			androidSwitchTab();
			verifyIsElementDisplayed(PWAHomePage.objTwitterPage, "Twitter page Follow button");
			AndroidSwitchToParentWindow();
		}
		swipeToBottomOfPage();
		swipeALittleDownForLinks();
		// Facebook
		verifyElementPresentAndClick(PWAHomePage.objFacebookIcon, "Facebook icon");
		waitTime(3000);
		androidSwitchTab();
		String facebook = getDriver().getCurrentUrl();
		if (facebook.contains("facebook")) {
			logger.info("User is redirected to Facebook page");
			extent.extentLogger("Facebook", "User is redirected to Facebook page");
		} else {
			logger.error("User is not navigated to Facebook page");
			extent.extentLogger("", "User is not navigated to Facebook page");
		}
		AndroidSwitchToParentWindow();
		swipeToBottomOfPage();
		swipeALittleDownForLinks();
		swipeALittleDownForLinks();
		// android play store
		verifyElementPresentAndClick(PWAHomePage.objAndroidPlayStoreIcon, "Android play store icon");
		getDriver().context("NATIVE_APP");
		if (checkElementDisplayed(PWAHomePage.objGooglePlayStore, "Android Google Play store")) {
			logger.info("User is navigated to Android Google Play Store application");
			Back(1);
		} else {
			logger.error("User is not navigated to Android Google Play Store application");
			extent.extentLogger("", "User is not navigated to Android Google Play Store application");
		}
		Back(1);
		getDriver().context("CHROMIUM");
		AndroidSwitchToParentWindow();
		// iOS app store
		swipeToBottomOfPage();
		swipeALittleDownForLinks();
		swipeALittleDownForLinks();
		verifyElementPresentAndClick(PWAHomePage.objIoSAppStoreIcon, "iOS app store icon");
		waitTime(3000);
		androidSwitchTab();
		String apple = getDriver().getCurrentUrl();
		if (apple.contains("apple")) {
			logger.info("User is redirected to iOS App Store");
			extent.extentLogger("", "User is redirected to iOS App Store");
		} else {
			logger.error("User is not navigated to iOS App Store");
			extent.extentLogger("", "User is not navigated to iOS App Store");
		}
		Back(2);
	}

	public void WebSeriesScreen(String UserType, String Tabname) throws Exception {
		landingPagesValidation(UserType, Tabname);
		pagesTrayValidation(Tabname);
		Subscriptionpopup(Tabname);
	}

	public void premiumPageValidation(String UserType, String Tabname) throws Exception {
		landingPagesValidation(UserType, Tabname);
		pagesTrayValidation(Tabname);
		Subscriptionpopup(Tabname);
	}

	public void Moviepage(String usertype, String Tabname) throws Exception {
		MoviesScreen(usertype);
		landingPagesValidation(usertype, Tabname);
		extent.HeaderChildNode("Verifing the trays displayed in Movies Tab");
		pagesTrayValidation(Tabname);
		Subscriptionpopup(Tabname);
	}

	public void Clubpage(String usertype, String Tabname) throws Exception {
		ClubScreen(usertype);
		landingPagesValidation(usertype, Tabname);
		extent.HeaderChildNode("Verifing the trays displayed in Club Tab");
		pagesTrayValidation(Tabname);
		Subscriptionpopup(Tabname);
	}

	public void VerifyCTA(String usertype) throws Exception {
		String clubShow = getParameterFromXML("clubShow");
		String premiumShow = getParameterFromXML("premiumShow");
		if (usertype.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User: Verify Get Club CTA on Carousel banner for club content");
			navigateToAnyScreen("Club");
			waitExplicitlyForElementPresence(PWAHomePage.objGetClubCta, 10, "\"Get Club\" CTA on Carousel banner");
			extent.HeaderChildNode("Guest User: Verify Get Premium CTA on Carousel banner for premium content");
			navigateToAnyScreen("Premium");
			waitExplicitlyForElementPresence(PWAHomePage.objGetPremiumCta, 10,
					"\"Get Premium\" CTA on Carousel banner");
			extent.HeaderChildNode("Guest User: Verify Get Club CTA on show details banner of a club content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, clubShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(clubShow), "Searched content : " + clubShow);
			verifyElementPresent(PWAShowsPage.objGetClubCTAInShowDetails,
					"\"Get Club\" CTA on Club Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode("Guest User: Verify Get Premium CTA on show details banner of a premium content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, premiumShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(premiumShow), "Searched content : " + premiumShow);
			verifyElementPresent(PWAShowsPage.objGetPremiumCTAInShowDetails,
					"\"Get Premium\" CTA on Premium Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

			// Login with club user
			extent.HeaderChildNode("Club User: Verify Play CTA on Carousel banner for club content");
			loginWithUserEmail("edpwa4@mailnesia.com", "1234567");
			navigateToAnyScreen("Club");
			verifyElementPresent(PWAHomePage.objPlayBtn, "\"Play\" CTA on Carousel banner");
			extent.HeaderChildNode("Club User: Verify Upgrade CTA on Carousel banner for premium content");
			navigateToAnyScreen("Premium");
			verifyElementPresent(PWAHomePage.objUpgradeBtn, "\"Upgrade\" CTA on Carousel banner");
			extent.HeaderChildNode(
					"Club User: Verify Watch First Episode CTA on show details banner of a club content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, clubShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(clubShow), "Searched content : " + clubShow);
			verifyElementPresent(PWAHomePage.objKalGetFirstEpisode,
					"\"Watch first episode\" CTA on Club Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode("Club User: Verify Upgrade CTA on show details banner of a premium content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, premiumShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(premiumShow), "Searched content : " + premiumShow);
			verifyElementPresent(PWAShowsPage.objUpgradeCTAInShowDetails,
					"\"Upgrade\" CTA on Premium Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			logout();
		}
		if (usertype.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Non Subscribed User: Verify Get Club CTA on Carousel banner for club content");
			navigateToAnyScreen("Club");
			waitExplicitlyForElementPresence(PWAHomePage.objGetClubCta, 10, "\"Get Club\" CTA on Carousel banner");
			extent.HeaderChildNode(
					"Non Subscribed User: Verify Get Premium CTA on Carousel banner for premium content");
			navigateToAnyScreen("Premium");
			waitExplicitlyForElementPresence(PWAHomePage.objGetPremiumCta, 10,
					"\"Get Premium\" CTA on Carousel banner");
			extent.HeaderChildNode("Non Subscribed User: Verify Get Club CTA on show details banner of a club content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, clubShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(clubShow), "Searched content : " + clubShow);
			verifyElementPresent(PWAShowsPage.objGetClubCTAInShowDetails,
					"\"Get Club\" CTA on Club Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode(
					"Non Subscribed User: Verify Get Premium CTA on show details banner of a premium content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, premiumShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(premiumShow), "Searched content : " + premiumShow);
			verifyElementPresent(PWAShowsPage.objGetPremiumCTAInShowDetails,
					"\"Get Premium\" CTA on Premium Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
		if (usertype.equalsIgnoreCase("SubscribedUser")) {
			extent.HeaderChildNode("Subscribed User: Verify Play CTA on Carousel banner for club content");
			navigateToAnyScreen("Club");
			verifyElementPresent(PWAHomePage.objPlayBtn, "\"Play\" CTA on Carousel banner");
			extent.HeaderChildNode("Subscribed User: Verify Play CTA on Carousel banner for premium content");
			navigateToAnyScreen("Premium");
			verifyElementPresent(PWAHomePage.objPlayBtn, "\"Play\" CTA on Carousel banner");
			extent.HeaderChildNode(
					"Subscribed User: Verify Watch first episode CTA on show details banner of a club content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, clubShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(clubShow), "Searched content : " + clubShow);
			verifyElementPresent(PWAHomePage.objKalGetFirstEpisode,
					"\"Watch first episode\" CTA on Club Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode(
					"Subscribed User: Verify Watch first episode CTA on show details banner of a premium content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, premiumShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(premiumShow), "Searched content : " + premiumShow);
			verifyElementPresent(PWAHomePage.objKalGetFirstEpisode,
					"\"Watch first episode\" CTA on Premium Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	public void loginWithUserEmail(String email, String pwd) throws Exception {
		if (!checkElementDisplayed(PWALoginPage.objLoginBtn, "Login Button")) {
			click(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
		}
		waitTime(3000);
		click(PWALoginPage.objLoginBtn, "Login button");
		click(PWALoginPage.objEmailField, "Email field");
		waitTime(2000);
		type(PWALoginPage.objEmailField, email, "Email Field");
		hideKeyboard();
		waitTime(3000);
		// dismissSystemPopUp();
		click(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, pwd + "\n", "Password field");
		hideKeyboard();
		waitTime(5000);
		directClickReturnBoolean(PWALoginPage.objLoginBtnLoginPage, "Login Button");
		waitTime(10000);
	}

	public void MusicPageValidation(String userType, String Tabname) throws Exception {
		landingPagesValidation(userType, "Music");
		navigateToMusicTab(userType);
		musicPageTrayValidation(Tabname);
	}

	@SuppressWarnings("unused")
	public void landingPagesValidation(String userType, String tabName) throws Exception {
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		extent.HeaderChildNode(tabName + " Page Validation");
		verifyElementPresentAndClick(PWAHomePage.objTabName(tabName), tabName);
		waitTime(5000);
		String tab = getText(PWAHomePage.objActiveTab);
		// System.out.println(tab);
		logger.info(tab + " tab is highlighted");
		extent.extentLogger("Tab", tab + " tab is highlighted");

		// Hit API get the first tray and click on first item
		boolean trailerAvailableAPI = false, clickedasset = false, clickedviewall = false;
		String languageSmallText = allSelectedLanguages();
		Response tabResponse = ResponseInstance.getResponseForPages(tabName.toLowerCase(), languageSmallText);
		// System.out.println(tabResponse.getBody().asString());
		String trayTitle = "", trayDescription = "", firstAssetTitle = "", secondAssetTitle = "",
				first_business_type = "", firstAssetSubType = "";
		String traynumber = "", traytype = "";
		int tags = 0;
		main: for (int i = 0; i < 10; i++) {
			try {
				tags = tabResponse.jsonPath().get("buckets[" + i + "].tags.size()");
				// System.out.println("tags: "+tags);
			} catch (Exception e) {
			}
			for (int j = 0; j < tags; j++) {
				String tag = tabResponse.jsonPath().get("buckets[" + i + "].tags[" + j + "]");
				// System.out.println("tag: "+tag);
				if (tag.equalsIgnoreCase("title") || tag.equalsIgnoreCase("movies") || tag.equalsIgnoreCase("episodes")
						|| tag.equalsIgnoreCase("portrait_small")) {
					traynumber = String.valueOf(i);
					break main;
				}
			}
		}
		if (!traynumber.equals("")) {
			// tray name from api
			trayTitle = tabResponse.jsonPath().get("buckets[" + traynumber + "].title");
			logger.info("Tray from API: " + trayTitle);
			extent.extentLogger("", "Tray from API: " + trayTitle);
			// tray description from api
			trayDescription = tabResponse.jsonPath().get("buckets[" + traynumber + "].description");
			logger.info("Tray Description from API: " + trayDescription);
			extent.extentLogger("", "Tray Description from API: " + trayDescription);
			// tray first card from api
			firstAssetTitle = tabResponse.jsonPath().get("buckets[" + traynumber + "].items[0].title");
			firstAssetSubType = tabResponse.jsonPath().get("buckets[" + traynumber + "].items[0].asset_subtype");
			logger.info("Tray First card from API: " + firstAssetTitle);
			extent.extentLogger("", "Tray First card from API: " + firstAssetTitle);
			// tray second card from api
			secondAssetTitle = tabResponse.jsonPath().get("buckets[" + traynumber + "].items[1].title");
			logger.info("Tray Second card from API: " + secondAssetTitle);
			extent.extentLogger("", "Tray Second card from API: " + secondAssetTitle);
			// UI Search
			verifyElementPresent(PWALandingPages.objTrayTitleInUIContains(trayTitle),
					"Tray title : " + trayTitle + " in UI");
			verifyElementPresent(PWALandingPages.firstAssetNonRecoTray(trayTitle, firstAssetTitle),
					"Tray First card : " + firstAssetTitle + " in UI");
			verifyElementPresent(PWALandingPages.secondAssetNonRecoTray(trayTitle, secondAssetTitle),
					"Tray Second card : " + secondAssetTitle + " in UI");
			for (int i = 0; i < 5; i++) {
				if (directClickReturnBoolean(PWALandingPages.firstAssetNonRecoTray(trayTitle, firstAssetTitle),
						"Tray First Asset : " + firstAssetTitle + " in UI")) {
					clickedasset = true;
					waitTime(5000);
					break;
				} else {
					Swipe("UP", 1);
					waitTime(2000);
				}
			}
		}
		if (clickedasset == true) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Sign Up Pop Up")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Sign Up Pop Up close button");
			}
			String contentURL = getDriver().getCurrentUrl();
			String[] abc = contentURL.split("/");
			String contentID = abc[abc.length - 1];
			System.out.println("Content ID fetched from URL: " + contentID);
			Response contentdetails = ResponseInstance.getContentDetails(contentID, firstAssetSubType);
			extent.HeaderChildNode("Watch Trailer Button Validation");
			first_business_type = contentdetails.jsonPath().get("business_type");
			if (first_business_type == null)
				first_business_type = "";
			logger.info("First card business type from API: " + first_business_type);
			extent.extentLogger("", "First card business type from API: " + first_business_type);
			logger.info("First card Asset type from API: " + firstAssetSubType);
			extent.extentLogger("", "First card Asset type from API: " + firstAssetSubType);
			try {
				int totalcontentsOfTheContent = contentdetails.jsonPath().getList("related_videos_ss.items").size();
				System.out.println(totalcontentsOfTheContent);
				for (int i = 0; i < totalcontentsOfTheContent; i++) {
					if (contentdetails.jsonPath().get("related_videos_ss.items[" + i + "].asset_subtype").toString()
							.equals("trailer")) {
						logger.info("Trailer is available for the content from API details");
						extent.extentLogger("", "Trailer is available for the content from API details");
						trailerAvailableAPI = true;
						break;
					}
				}
				if (trailerAvailableAPI == false) {
					try {
						if (!contentdetails.jsonPath().get("tvshow_details.trailers[0].id").toString().equals("")) {
							logger.info("Trailer is available for the content from API details");
							extent.extentLogger("", "Trailer is available for the content from API details");
							trailerAvailableAPI = true;
						}
					} catch (Exception e1) {
					}
				}
				if (trailerAvailableAPI == false) {
					logger.info("Trailer is not available for the content from API details");
					extent.extentLogger("", "Trailer is not available for the content from API details");
					trailerAvailableAPI = false;
				}
			} catch (Exception e) {
				try {
					if (!contentdetails.jsonPath().get("tvshow_details.trailers[0].id").toString().equals("")) {
						logger.info("Trailer is available for the content from API details");
						extent.extentLogger("", "Trailer is available for the content from API details");
						trailerAvailableAPI = true;
					}
				} catch (Exception e1) {
					logger.info("Trailer is not available for the content from API details");
					extent.extentLogger("", "Trailer is not available for the content from API details");
					trailerAvailableAPI = false;
				}
			}
			waitTime(5000);
			watchTrailerButtonFunctionality(userType, trailerAvailableAPI, first_business_type);
			navigateToAnyScreen(tabName);
			waitTime(2000);
		} else {
			logger.error("Failed to click on Tray First Asset");
			extent.extentLoggerFail("", "Failed to click on Tray First Asset");
			click(PWAHomePage.objBackToTopArrow, "Back to Top");
		}
		extent.HeaderChildNode("View All button functionality");
		// check if tray is loaded
		for (int i = 1; i <= 5; i++) {
			if (verifyIsElementDisplayed(PWALandingPages.objTrayTitleInUIContains(trayTitle), "Tray")) {
				logger.info("Tray is loaded");
				extent.extentLogger("Tray load", "Tray is loaded");
				break;
			} else {
				Swipe("UP", 1);
				waitTime(2000);
			}
		}
		for (int i = 0; i < 5; i++) {
			if (directClickReturnBoolean(PWALandingPages.objTrayTitleInUIContainsViewAll(trayTitle.trim()),
					"View All Button of tray " + trayTitle)) {
				waitTime(5000);
				clickedviewall = true;
				break;
			} else {
				Swipe("UP", 1);
				waitTime(2000);
			}
		}
		if (clickedviewall == true) {
			if (verifyIsElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
				waitTime(3000);
				if (trayDescription != null) {
					if (verifyIsElementDisplayed(PWALandingPages.objViewAllPageTrayDescription, "Tray Description")) {
						String trayDescriptionViewAll = getElementPropertyToString("innerText",
								PWALandingPages.objViewAllPageTrayDescription, "");
						logger.info("Tray descriptionin UI is " + trayDescriptionViewAll);
						extent.extentLogger("", "Tray descriptionin UI is " + trayDescriptionViewAll);
						if (!trayDescriptionViewAll.equals(trayDescription)) {
							logger.error("Tray description in UI and API do not match");
							extent.extentLoggerFail("", "Tray descriptionin in UI and API do not match");
						} else {
							logger.info("Tray description in UI and API match");
							extent.extentLogger("", "Tray description in UI and API match");
						}
					}
				}
				String firstCardViewAll = getElementPropertyToString("data-minutelytitle",
						PWALandingPages.objViewAllPageFirstContent, "");
				String secondCardViewAll = getElementPropertyToString("data-minutelytitle",
						PWALandingPages.objViewAllPageSecondContent, "");
				if (!firstCardViewAll.equals(firstAssetTitle)) {
					logger.error("First card in tray is " + firstAssetTitle + ", but first card in View All is "
							+ firstCardViewAll + ", order mismatched in tray and View All page");
					extent.extentLoggerFail("View All",
							"First card in tray is " + firstAssetTitle + ", but first card in View All is "
									+ firstCardViewAll + ", order mismatched in tray and View All page");
				} else {
					logger.info(
							"First card " + firstCardViewAll + " in tray and View All page match, order maintained");
					extent.extentLogger("View All",
							"First card " + firstCardViewAll + " in tray and View All page match, order maintained");
				}
				if (!secondCardViewAll.equals(secondAssetTitle)) {
					logger.error("Second card in tray is " + secondAssetTitle + ", but second card in View All is "
							+ secondCardViewAll + ", order mismatched in tray and View All page");
					extent.extentLoggerFail("View All",
							"Second card in tray is " + secondAssetTitle + ", but second card in View All is "
									+ secondCardViewAll + ", order mismatched in tray and View All page");
				} else {
					logger.info(
							"Second card " + secondCardViewAll + " in tray and View All page match, order maintained");
					extent.extentLogger("View All",
							"Second card " + secondCardViewAll + " in tray and View All page match, order maintained");
				}
				PartialSwipe("UP", 1);
				PartialSwipe("UP", 1);
				PartialSwipe("UP", 1);
				PartialSwipe("UP", 1);
				waitTime(2000);
				if (verifyIsElementDisplayed(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn,
						"Back to Top in View All page")) {
					logger.info("Swiping Down is successful because Back to Top button is displayed in View All page");
					extent.extentLogger("View All",
							"Swiping Down is successful because Back to Top button is displayed in View All page");
				} else {
					logger.error(
							"Swiping Down has failed because Back to Top button is not displayed in View All page");
					extent.extentLoggerFail("View All",
							"Swiping Down has failed because Back to Top button is not displayed in View All page");
				}
				click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");
				waitTime(2000);
				// handle mandatory pop up
				mandatoryRegistrationPopUp(userType);
				if (directClickReturnBoolean(PWALandingPages.objViewAllPageFirstContent, "First asset")) {
					logger.info("Clicked on first asset, hence Swiping Up is successful");
					extent.extentLogger("View All", "Clicked on first asset, hence Swiping Up is successful");
					waitForElementDisplayed(PWASubscriptionPages.objPopupCloseButton, 30);
					directClickReturnBoolean(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
					String viewallnavigationtittle = getText(PWAPlayerPage.objContentTitle);
					logger.info("Navigated to Consumption page from View All Page: " + viewallnavigationtittle);
					extent.extentLogger("View All",
							"Navigated to Consumption page from View All Page: " + viewallnavigationtittle);
				} else {
					logger.error("Failed to click on first asset in View All Page, Swiping Up failed");
					extent.extentLoggerFail("View All",
							"Failed to click on first asset in View All Page, Swiping Up failed");
				}
			} else {
				logger.error("Not navigated to View All Page");
				extent.extentLoggerFail("View All", "Not navigated to View All Page");
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			navigateToAnyScreen(tabName);
			waitTime(2000);
		}
		if (tabName.equalsIgnoreCase("Club")) {
			extent.HeaderChildNode(tabName + " tab: Club tag verification");
			for (int i = 0; i < 5; i++) {
				if (findElements(PWAHomePage.objClubTag).size() > 0) {
					logger.info("Club Tag is displayed");
					extent.extentLogger("Club Tag", "Club Tag is displayed");
					break;
				} else {
					logger.info("Club Tag is not displayed");
					extent.extentLogger("Club Tag", "Club Tag is not displayed");
					PartialSwipe("UP", 1);
				}
			}
		} else {
			extent.HeaderChildNode(tabName + " tab: Premium icon verification");
			for (int i = 0; i < 5; i++) {
				if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
					logger.info("Premium tag is displayed");
					extent.extentLogger("Premium Tag", "Premium Tag is displayed");
					break;
				} else {
					logger.info("Premium tag is not displayed");
					extent.extentLogger("Premium Tag", "Premium Tag is not displayed");
					PartialSwipe("UP", 1);
				}
			}
		}
		extent.HeaderChildNode("Verify Back to Top functionality");
		for (int swipe = 0; swipe <= 3; swipe++) {
			Swipe("UP", 1);
		}
		waitTime(2000);
		if (verifyIsElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Back To Top in " + tabName + " Page")) {
			click(PWAMusicPage.objArrowToNavigateTop, "Back To Top in " + tabName + " Page");
		}
		extent.HeaderChildNode(tabName + " tab: Minutely content verification");
		waitTime(2000);
		for (int i = 0; i < 5; i++) {
			if (findElements(PWAPremiumPage.objMinuteContent).size() > 0) {
				logger.info("Minute content is displayed");
				extent.extentLogger("Minute content", "Minute content is displayed");
				break;
			} else {
				logger.info("Minute content is not displayed");
				extent.extentLogger("Minute content", "Minute content is not displayed");
				PartialSwipe("UP", 1);
			}
		}
		for (int swipe = 0; swipe <= 2; swipe++) {
			Swipe("UP", 1);
		}
		waitTime(2000);
		click(PWAMusicPage.objArrowToNavigateTop, "Back To Top in " + tabName + " Page");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void watchTrailerButtonFunctionality(String userType, boolean trailerAvailableFromAPI, String business_type)
			throws Exception {
		boolean watchTrailerbuttonPresent = false;
		boolean watchTrailerbuttonClickable = false;
		if (userType.equals("Guest") && business_type.contains("premium") && trailerAvailableFromAPI == true) {
			watchTrailerbuttonPresent = true;
			watchTrailerbuttonClickable = false;
		}
		if (userType.equals("Guest") && business_type.contains("premium") && trailerAvailableFromAPI == false) {
			watchTrailerbuttonPresent = false;
		}
		if (userType.equals("Guest") && business_type.contains("advertisement") && trailerAvailableFromAPI == true) {
			watchTrailerbuttonPresent = true;
			watchTrailerbuttonClickable = true;
		}
		if (userType.equals("Guest") && business_type.contains("advertisement") && trailerAvailableFromAPI == false) {
			watchTrailerbuttonPresent = false;
		}
		if (userType.equals("NonSubscribedUser") && business_type.contains("premium")
				&& trailerAvailableFromAPI == true) {
			watchTrailerbuttonPresent = true;
			watchTrailerbuttonClickable = false;
		}
		if (userType.equals("NonSubscribedUser") && business_type.contains("premium")
				&& trailerAvailableFromAPI == false) {
			watchTrailerbuttonPresent = false;
		}
		if (userType.equals("NonSubscribedUser") && business_type.contains("advertisement")
				&& trailerAvailableFromAPI == true) {
			watchTrailerbuttonPresent = true;
			watchTrailerbuttonClickable = true;
		}
		if (userType.equals("NonSubscribedUser") && business_type.contains("advertisement")
				&& trailerAvailableFromAPI == false) {
			watchTrailerbuttonPresent = false;
		}
		if (userType.equals("SubscribedUser") && business_type.contains("premium") && trailerAvailableFromAPI == true) {
			watchTrailerbuttonPresent = true;
			watchTrailerbuttonClickable = true;
		}
		if (userType.equals("SubscribedUser") && business_type.contains("premium")
				&& trailerAvailableFromAPI == false) {
			watchTrailerbuttonPresent = false;
		}
		if (userType.equals("SubscribedUser") && business_type.contains("advertisement")
				&& trailerAvailableFromAPI == true) {
			watchTrailerbuttonPresent = true;
			watchTrailerbuttonClickable = true;
		}
		if (userType.equals("SubscribedUser") && business_type.contains("advertisement")
				&& trailerAvailableFromAPI == false) {
			watchTrailerbuttonPresent = false;
		}
		if (watchTrailerbuttonPresent == true && watchTrailerbuttonClickable == false) {
			if (verifyIsElementDisplayed(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button")) {
				if (directClickReturnBoolean(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button")) {
					logger.error("Watch Trailer button is clickable for " + userType);
					extent.extentLoggerFail("", "Watch Trailer button is clickable for " + userType);
				} else {
					logger.info("Verified that Watch Trailer button is not clickable for " + userType);
					extent.extentLogger("Trailer",
							"Verified that Watch Trailer button is not clickable for " + userType);
				}
			} else {
				logger.error("Watch Trailer button is not displayed in UI");
				extent.extentLoggerFail("", "Watch Trailer button is not displayed in UI");
			}
		}
		if (watchTrailerbuttonPresent == true && watchTrailerbuttonClickable == true) {
			if (checkElementDisplayed(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button")) {
				if (directClickReturnBoolean(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button")) {
					logger.info("Verified that Watch Trailer button is clickable for " + userType);
					extent.extentLogger("", "Verified that Watch Trailer button is clickable for " + userType);
				} else {
					logger.error("Watch Trailer button is not clickable for " + userType);
					extent.extentLoggerFail("Trailer", "Watch Trailer button is not clickable for " + userType);
				}
			} else {
				logger.error("Watch Trailer button is not displayed in UI");
				extent.extentLoggerFail("", "Watch Trailer button is not displayed in UI");
			}
		}
		if (watchTrailerbuttonPresent == false) {
			if (!userType.equals("SubscribedUser")) {
				if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "Subscribe Pop Up Close button");
				}
			}
			if (verifyIsElementDisplayed(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button")) {
				logger.error("Watch Trailer button is displayed in UI");
				extent.extentLoggerFail("Trailer", "Watch Trailer button is displayed in UI");
			} else {
				logger.info("Verified that Watch Trailer button is not displayed in UI");
				extent.extentLogger("", "Verified that Watch Trailer button is not displayed in UI");
			}
		}
		if (userType.contains("NonSubscribedUser") || (userType.contains("Guest"))) {
			verifyIsElementDisplayed(PWAPremiumPage.objGetPremium, "Subscribe Button");
		}
		if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
			click(PWAHamburgerMenuPage.objPopupClose, "Subscribe Pop Up Close button");
		}
		reloadHome();
	}

	public void pagesTrayValidation(String tabName) throws Exception {
		navigateToAnyScreen(tabName);
		int endindex = 0;
		Response resp = null;
		for (int i = 0; i < 5; i++) {
			try {
				resp = ResponseInstance.getResponseForPages(tabName.toLowerCase(), "en,hi,kn");
			} catch (Exception e) {
			}
			if (!resp.getBody().asString().contains("\"error_code\":401"))
				break;
			else {
				logger.info(resp.getBody().asString());
				extent.extentLogger("", resp.getBody().asString());
			}
		}
		List<String> apiTitleList = new LinkedList<String>();
		List<String> apitotaltrays;
		int trays = 0;
		if (tabName.equalsIgnoreCase("live tv")) {
			apitotaltrays = resp.jsonPath().getList("genres");
			if (apitotaltrays.size() > 5)
				trays = 5;
			else
				trays = apitotaltrays.size();
			for (int i = 0; i < trays; i++) {
				String traytitle = resp.jsonPath().getString("genres[" + i + "].value");
				apiTitleList.add(traytitle);
			}
			endindex = trays;
		} else {
			apitotaltrays = resp.jsonPath().getList("buckets");
			if (apitotaltrays.size() > 5)
				trays = 5;
			else
				trays = apitotaltrays.size();
			for (int i = 1; i < trays; i++) {
				String traytitle = resp.jsonPath().getString("buckets[" + i + "].title");
				if (!traytitle.contains("ZEEPLEX"))
					apiTitleList.add(traytitle);
			}
			endindex = apiTitleList.size();
		}
		logger.info("Trays from API: " + apiTitleList);
		extent.extentLogger("", "Trays from API: " + apiTitleList);
		for (int j = 0; j < endindex; j++) {
			String apititle = apiTitleList.get(j);
			for (int swipe = 0; swipe < 5; swipe++) {
				try {
					findElement(By.xpath("(//div[@class='trayHeader'])//h2[.=\"" + apititle + "\"]")).getText();
					logger.info("Located tray in UI : " + apititle);
					extent.extentLogger("", "Located tray in UI : " + apititle);
					break;
				} catch (Exception e) {
					Swipe("UP", 1);
					if (swipe == 4) {
						logger.error("Failed to locate Tray " + apititle + " in UI");
						extent.extentLoggerFail("", "Failed to locate Tray " + apititle + " in UI");
					}
				}
			}
		}
		click(PWAZee5OriginalPage.objNavigateToTop, "Back to Top Arrow");
	}

	public void dataValidationOnScrollForStories() throws Exception {
		ArrayList<String> list1titles = new ArrayList<>();
		for (int j = 0; j < 5; j++) {
			try {
				String title = findElement(By.xpath("(//h3[@class='cardTitle'])[" + j + "]")).getText();
				list1titles.add(title);
			} catch (Exception e) {
				Swipe("UP", 1);
			}
		}
		logger.info("Titles fetched from Stories page before Swiping down : " + list1titles);
		extent.extentLogger("", "Titles fetched from Stories page before Swiping down : " + list1titles);
		Swipe("UP", 5);
		ArrayList<String> list2titles = new ArrayList<>();
		for (int j = 5; j < 10; j++) {
			try {
				String title = findElement(By.xpath("(//h3[@class='cardTitle'])[" + j + "]")).getText();
				list2titles.add(title);
			} catch (Exception e) {
				Swipe("UP", 1);
			}
		}
		logger.info("Titles fetched from Stories page after Swiping down : " + list2titles);
		extent.extentLogger("", "Titles fetched from Stories page after Swiping down : " + list2titles);

		if (list1titles.equals(list2titles)) {
			logger.error("Titles fetched are same after swiping, contents failed to load");
			extent.extentLoggerFail("", "Titles fetched are same after swiping, contents failed to load");
		} else {
			logger.info("Titles fetched are different after swiping, contents have loaded successfully");
			extent.extentLoggerPass("",
					"Titles fetched are different after swiping, contents have loaded successfully");
		}
	}

	public void verifyCarouselAutoRotation() throws Exception {
		// autorotating
		extent.HeaderChildNode("Verifying autorotating of carousel pages Home screen ");
		verifyAutoroatingOnCarousel("Home");
		extent.HeaderChildNode("Verifying autorotating of carousel pages Movies screen ");
		verifyAutoroatingOnCarousel("Movies");
		extent.HeaderChildNode("Verifying autorotating of carousel pages Shows screen ");
		verifyAutoroatingOnCarousel("TV Shows");
		extent.HeaderChildNode("Verifying autorotating of carousel pages Premium screen ");
		verifyAutoroatingOnCarousel("Premium");
		extent.HeaderChildNode("Verifying autorotating of carousel pages Play screen ");
		verifyAutoroatingOnCarousel("Play");
		extent.HeaderChildNode("Verifying autorotating of carousel pages ZEE5 Originals screen ");
		verifyAutoroatingOnCarousel("Web Series");
	}

	public void verifyCarouselPlayIconFunctionality() throws Exception {
		// play icon functionality
		verifyPlayIconFunctionality("Web Series");
		verifyPlayIconFunctionality("Kids");
		verifyPlayIconFunctionality("Premium");
		verifyPlayIconFunctionality("TV Shows");
		verifyPlayIconFunctionality("Movies");
		verifyPlayIconFunctionality("Home");
	}

	public void verifyCarouselPremiumIconFunctionality() throws Exception {
		// premium icon functionality
		String userType = getParameterFromXML("userType");
		verifyPremiumIconFunctionality("Home", userType);
		verifyPremiumIconFunctionality("Premium", userType);
		verifyPremiumIconFunctionality("Movies", userType);
		verifyPremiumIconFunctionality("Web Series", userType);
	}

	public void verifyCarouselMetaData() throws Exception {
		// metadata
		String languageSmallText = allSelectedLanguages();
		extent.HeaderChildNode("Verifying metadata of carousel pages on Web Series screen");
		verifyMetadataOnCarousel("Web Series", "webseries", languageSmallText);
		extent.HeaderChildNode("Verifying metadata of carousel pages on Play screen");
		verifyMetadataOnCarousel("Play", "play", languageSmallText);
		extent.HeaderChildNode("Verifying metadata of carousel pages on Premium screen");
		verifyMetadataOnCarousel("Premium", "premiumcontents", languageSmallText);
		extent.HeaderChildNode("Verifying metadata of carousel pages on Shows screen");
		verifyMetadataOnCarousel("TV Shows", "tvshows", languageSmallText);
		extent.HeaderChildNode("Verifying metadata of carousel pages on Movies screen");
		verifyMetadataOnCarousel("Movies", "movies", languageSmallText);
		extent.HeaderChildNode("Verifying metadata of carousel pages on Home screen");
		verifyMetadataOnCarousel("Home", "home", languageSmallText);
	}

	public void verifyCarouselLeftRightFunctionality() throws Exception {
		String url = getParameterFromXML("url");
		verifyLeftRightFunctionality("News", url);
	}

	/**
	 * Function to verify Autoroating on carousel
	 * 
	 * @throws Exception
	 */
	public void verifyAutoroatingOnCarousel(String screen) throws Exception {
		boolean autoplayingItemsPresent = false;
		// String languageSmallText = allSelectedLanguages();
		Response tabResponse = ResponseInstance.getResponseForPages(screen.toLowerCase(), "en,hi,kn");
		int carouselItemsCount = tabResponse.jsonPath().get("buckets[0].items.size()");
		System.out.println(carouselItemsCount);
		if (carouselItemsCount > 7)
			carouselItemsCount = 7;
		waitTime(20000);
		for (int i = 0; i < carouselItemsCount; i++) {
			try {
				if (tabResponse.jsonPath().get("buckets[0].items[" + i + "].tags[0]").toString().equals("Autoplay")) {
					logger.info("Autorotation could not be verified because Carousel contains auto playing items");
					extent.extentLoggerWarning("",
							"Autorotation could not be verified because Carousel contains auto playing items");
					autoplayingItemsPresent = true;
					break;
				}
			} catch (Exception e) {
			}

		}
		
		if (autoplayingItemsPresent == false) {
			if (navigateToAnyScreen(screen)) {
				String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
				(new WebDriverWait(getDriver(), 30))
						.until(ExpectedConditions.presenceOfElementLocated(PWAHomePage.objContTitleOnCarousel));
				firstCarouselTitle = getElementPropertyToString("innerText", PWAHomePage.objContTitleOnCarousel,
						"Carousel Content Title").toString();
				logger.info("Carousel content title fetched first time: " + firstCarouselTitle);
				extent.extentLogger("Autorotating", "Carousel content title fetched first time: " + firstCarouselTitle);
				Thread.sleep(4000);
				secondCarouselTitle = getElementPropertyToString("innerText", PWAHomePage.objContTitleOnCarousel,
						"Carousel Content Title").toString();
				logger.info("Carousel content title fetched second time: " + secondCarouselTitle);
				extent.extentLogger("Autorotating",
						"Carousel content title fetched second time: " + secondCarouselTitle);
				Thread.sleep(4000);
				thirdCarouselTitle = getElementPropertyToString("innerText", PWAHomePage.objContTitleOnCarousel,
						"Carousel Content Title").toString();
				logger.info("Carousel content title fetched third time: " + thirdCarouselTitle);
				extent.extentLogger("Autorotating", "Carousel content title fetched third time: " + thirdCarouselTitle);
				Thread.sleep(4000);
				if (firstCarouselTitle.equals(secondCarouselTitle) || secondCarouselTitle.equals(thirdCarouselTitle)) {
					logger.error("Autorotation failed");
					extent.extentLoggerFail("Autorotating", "Autorotation failed");
				} else {
					logger.info("Different carousel titles are displayed at different instances, Autorotation passed");
					extent.extentLogger("Autorotating",
							"Different carousel titles are displayed at different instances, Autorotation passed");
				}
			} else {
				logger.error("Failed to validate carousel autorotation on tab : " + screen);
				extent.extentLoggerFail("Autorotating", "Failed to validate carousel autorotation on tab : " + screen);
			}
		}
		
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		waitTime(3000);
	}


	/**
	 * Verify Meta Data on Carousel
	 */
	public void verifyMetadataOnCarousel(String screen, String pageName, String languageSmallText) throws Exception {
		if (navigateToAnyScreen(screen)) {
			waitTime(5000);
			System.out.println(languageSmallText);
			String carouselTitleAPI = "";
			boolean isTitlePresent = false;
			List<String> allMetaTitleOnCarouselAPI = ResponseInstance.traysTitleCarousel(pageName, languageSmallText);
			System.out.println("API Data : " + allMetaTitleOnCarouselAPI);
			click(PWAHamburgerMenuPage.carouselFirstDot, "First Carousel Dot");
			for (int i = 0; i < allMetaTitleOnCarouselAPI.size(); i++) {
				carouselTitleAPI = allMetaTitleOnCarouselAPI.get(i);
				for (int j = 0; j < 7; j++) {
					try {
						click(PWAHamburgerMenuPage.carouselDot(i + 1), "Carousel Dot " + (i + 1) + "");
						WebElement mastHeadEle = (new WebDriverWait(getDriver(), 30)).until(ExpectedConditions
								.presenceOfElementLocated(PWAHomePage.objContTitleTextCarousel(carouselTitleAPI)));
						isTitlePresent = mastHeadEle.isDisplayed();
						if (isTitlePresent == true) {
							break;
						} else {
							swipeCarouselContents(1);
						}
					} catch (Exception e) {
						System.out.println("Exception : " + e.getMessage());
					}
				}
				if (isTitlePresent == true) {
					logger.info("API title " + carouselTitleAPI + " is present on UI");
					extent.extentLogger("Metadata validation", "API title " + carouselTitleAPI + " is present on UI");
				} else {
					logger.error("API title did not matched with UI title");
					extent.extentLoggerFail("Metadata validation", "API title did not matched with UI title");
				}
			}
		} else {
			logger.error("Failed to validate meta data on tab : " + screen);
			extent.extentLoggerFail("metadata", "Failed to validate meta data on tab : " + screen);
		}
		
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		waitTime(3000);
	}


	/**
	 * Function to left and right(<>) functionality on carousel
	 * 
	 * @throws Exception
	 */
	public void verifyLeftRightFunctionality(String screen, String url) throws Exception {
		extent.HeaderChildNode("Verifying left and right functionality");
		navigateToAnyScreen(screen);
		String nextCarouselTitle = "";
		boolean autoplayed = false;
		WebDriverWait w = new WebDriverWait(getDriver(), 120);
		try {
			w.until(ExpectedConditions.visibilityOfElementLocated(PWANewsPage.objRight));
			autoplayed = true;
		} catch (Exception e) {
			logger.info("No content in News tab autoplayed, hence Left Right functionality could not be verified");
			extent.extentLoggerWarning("",
					"No content in News tab autoplayed, hence Left Right functionality could not be verified");
		}
		if (autoplayed) {
			waitForElementAndClick(PWANewsPage.objRight, 10, "Next cont");
			waitTime(1500);
			nextCarouselTitle = getDriver().findElement(PWAHomePage.objContTitleOnCarousel).getText();
			System.out.println("first :" + nextCarouselTitle);

			reloadURL(url);
			navigateToAnyScreen(screen);
			waitTime(1000);
			w.until(ExpectedConditions.visibilityOfElementLocated(PWANewsPage.objLeft));
			waitForElementAndClick(PWANewsPage.objLeft, 10, "Prev cont");
			waitTime(1500);
			String prevCarouselTitle = getDriver().findElement(PWAHomePage.objContTitleOnCarousel).getText();
			System.out.println("f2 :" + prevCarouselTitle);

			if (nextCarouselTitle.equals(prevCarouselTitle) == false) {
				softAssert.assertFalse(nextCarouselTitle.equals(prevCarouselTitle));
				logger.info("Content can be swiped right and left");
				extent.extentLogger("Swipe left and right", "Content can be swiped right and left");
			} else {
				softAssert.assertTrue(nextCarouselTitle.equals(prevCarouselTitle));
				logger.info("Content can not be swiped either right or left");
				extent.extentLoggerFail("Swipe left and right", "Content can not be swiped either right or left");
			}
		}
	}

	public void reloadURL(String url) {
		getDriver().get(url);
		waitTime(10000);
	}

	@SuppressWarnings("rawtypes")
	public void swipeCarouselContents(int noOfTimes) {
		// HeaderChildNode("Carousel swipe");
		for (int i = 0; i < noOfTimes; i++) {
			int deviceWidth = getDriver().manage().window().getSize().width;
			int deviceHeight = getDriver().manage().window().getSize().height;
			int y = deviceHeight / 4;
			waitTime(2000);
			touchAction = new TouchAction(getDriver());
			touchAction.press(PointOption.point((deviceWidth - 250), (y - 100)))
					.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
					.moveTo(PointOption.point(0, (y - 100))).release().perform();
			System.out.println("Swiped : " + i);
		}
	}

	public void carouseldots(String carouselDots, String page) throws Exception {
		extent.HeaderChildNode("Carousal dots functionality");

		Response resp = ResponseInstance.getResponseForPages(page, "en,kn");
		if (resp == null) {
			System.out.println("No response");
		} else {

//		waitTime(3000);
			waitForElementDisplayed(PWAHomePage.objZeeLogo, 10);
			navigateToAnyScreen(page);
			int hits = getCount(TextToXpathusingclass(carouselDots));
			if (hits == 7) {
				System.out.println("The number of carousal dots are equal to the number of carousals present");
			} else {
				System.out.println("The number of carousal dots are not equal to the number of carousals present");
			}
			for (int i = 1; i < 3; i++) {
				int j = i - 1;
				String Carouseltitle = resp.jsonPath().getString("buckets[0].items[" + j + "].title");
				verifyElementPresentAndClick(TextToXpathusingclasswithindex("carouselDots", i),
						"clicked on carousal dot");
				System.out.println("clicked on " + i + " carousal dot");
				if (verifyIsElementDisplayed(Text_To_Xpath(Carouseltitle), "carousal metadata for " + i + " index ")) {
					System.out.println("The carousel dot for " + i
							+ "th index is navigating to the respective carousel and verified ");
				} else {
					System.out.println(
							"The carousel dot for " + i + "th index is not navigating to the respective carousel ");
				}
			}
		}
	}

	/**
	 * Method to verify Back to Top functionality
	 */
	public void BackTOTop() throws Exception {
		Swipe("UP", 2);
		waitTime(3000);
		closeAdoricPopUp();
		waitForElementDisplayed(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, 20);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");
	}

	/**
	 * Function to verify view all functionality for a tray
	 */
	public void verifyTrayViewAll(String trayTitleAPI, String contentTitleAPI) throws Exception {
		extent.HeaderChildNode("Verify See All functionality for tray");
		waitTime(3000);
		verifyElementPresentAndClick(PWALandingPages.objViewAllOfTray(trayTitleAPI),
				"View all button for tray " + trayTitleAPI);
//		waitTime(8000);
		waitForElementDisplayed(PWALandingPages.objViewAllPageTitle, 60);
		String viewAllPageTitle = getElementPropertyToString("innerText", PWALandingPages.objViewAllPageTitle,
				"View All Page Title").toString();
		if (viewAllPageTitle.equals(trayTitleAPI)) {
			extent.extentLogger("titles", "Tray title matches View All page title :" + trayTitleAPI);
			logger.info("Tray title matches View All page title :" + trayTitleAPI);
		} else {
			extent.extentLoggerFail("titles", "Mismatch observed, tray title is: " + trayTitleAPI
					+ " and View All page title is: " + viewAllPageTitle);
			logger.info("Mismatch observed, tray title is: " + trayTitleAPI + " and View All page title is: "
					+ viewAllPageTitle);
		}
		waitForElementDisplayed(PWALandingPages.objViewAllPageFirstContent, 10);
		String viewAllPageFirstContent = getElementPropertyToString("data-minutelytitle",
				PWALandingPages.objViewAllPageFirstContent, "View All Page First Content").toString();
		if (viewAllPageFirstContent.equals(contentTitleAPI)) {
			extent.extentLogger("contenttitles",
					"Tray First Content matches View All page first Content :" + contentTitleAPI);
			logger.info("Tray First Content matches View All page first Content :" + contentTitleAPI);
		} else {
			extent.extentLoggerFail("contenttitles", "Mismatch observed, Tray first Content is: " + contentTitleAPI
					+ " and View All page first Content is: " + viewAllPageFirstContent);
			logger.info("Mismatch observed, Tray first Content is: " + contentTitleAPI
					+ " and View All page first Content is: " + viewAllPageFirstContent);
		}
	}

	public void Kaltura(String userType) throws Exception {
		dismissSystemPopUp();
		String url = getParameterFromXML("url");
		extent.HeaderChildNode("Kaltura Playability");

		String keyword1 = getParameterFromXML("consumptionsFreeContent");
		searchvideoandselect(keyword1, userType, "Movie");

		Thread.sleep(2000);
		String keyword2 = getParameterFromXML("tvshow");
		searchvideoandselect(keyword2, userType, "ZeeOriginal");

		Thread.sleep(2000);
		String keyword3 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("trailerOfPremiumMovie");
		searchvideoandselect(keyword3, userType, "trailer");

		Thread.sleep(2000);
		String keyword4 = getParameterFromXML("music");
		searchvideoandselect(keyword4, userType, "music");

		Thread.sleep(2000);
		String keyword5 = getParameterFromXML("freeEpisode4");
		searchvideoandselect(keyword5, userType, "Show");

		Thread.sleep(2000);
		String keyword6 = getParameterFromXML("news");
		searchvideoandselect(keyword6, userType, "news");
		String Value = null;
		waitTime(5000);
		navigateToAnyScreen("Live TV");
		logger.info("Selecting Free content from Live TV tray and validating Kaltura playability");
		extent.extentLogger("Selecting Free content from Live TV tray and validating Kaltura playability",
				"Selecting Free content from Live TV tray and validating Kaltura playability");
		if (waitforLiveTabToLoad()) {
			Value = findElement(PWAPlayerPage.objFirstCardFreeChnnelName).getAttribute("title");
			if (Value != null) {
				logger.info("Free content from Live TV tray : " + Value);
				extent.extentLogger("", "Free content from Live TV tray : " + Value);
				click(PWAPlayerPage.objFirstCardFreeChnnels, "" + Value);
				if (verifyIsElementDisplayed(PWAHomePage.objPlaybackLIVETVTitle1, "Live TV title") == true) {
					logger.info("Navigated to Title : " + getText(PWAHomePage.objPlaybackLIVETVTitle1));
					extent.extentLogger("", "Navigated to Title : " + getText(PWAHomePage.objPlaybackLIVETVTitle1));
					pauseLiveTVPlayer();
					// added from gaps for live tv
					if (verifyIsElementDisplayed(PWAPlayerPage.progressBar, "Progress bar for Live TV")) {
						extent.extentLoggerFail("",
								"Progress bar should not be dispayed for Live TV, but is displayed");
					}
					waitTime(5000);
					if (verifyIsElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
						extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");
						extent.extentLogger("", "Playing : " + getText(PWAHomePage.objKalLivetvPlaying));
						extent.extentLogger("", "Channel :" + getText(PWAHomePage.objKalLivetvChannel));
						logger.info("Playing : " + getText(PWAHomePage.objKalLivetvPlaying));
						logger.info("Channel :" + getText(PWAHomePage.objKalLivetvChannel));
					} else {
						extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
						logger.error("Not Navigated to Kaltura Player");
					}
				}
			} else {
				extent.extentLoggerFail("", "Failed to fetch title from Card of Free Channels");
				logger.error("Failed to fetch title from Card of Free Channels");
				getDriver().get(url);
			}
		}
	}

	public void searchvideoandselect(String str, String userType, String type) throws Exception {
		String url = getParameterFromXML("url");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, str + "\n", "Search Field");
		if (type.equalsIgnoreCase("movie"))
			verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(3000);
		hideKeyboard();
		waitTime(7000);
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		if (type.equals("news")) {
			click(PWASearchPage.objSearchNewsTab, "NewsTab");
			Thread.sleep(1000);
			click(PWASearchPage.objfirstdata, "data");
		} else {
			verifyElementPresentAndClick(PWASearchPage.objSearchedResult(str), "Searched content : " + str);
		}
		waitTime(5000);
		if (type.equals("ZeeOriginal") && !userType.equals("SubscribedUser")) {
			if (verifyIsElementDisplayed(PWAHomePage.objKalGetPremium, "Get Premium Button")) {
				click(PWAHomePage.objKalGetPremiumPlayicon, "Play Button");
			}
		}
		if (type.equals("ZeeOriginal") && userType.equals("SubscribedUser")) {
			if (verifyIsElementDisplayed(PWAHomePage.objKalGetFirstEpisode, "Watch First Episode")) {
				click(PWAHomePage.objKalGetFirstEpisodePlayicon, "Play Button");
			}
		}
		/*
		 * if (userType.equals("Guest")) { if
		 * (verifyIsElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp,
		 * "Sign Up pop up")) { click(PWAPlayerPage.objWEBCloseBtnLoginPopup,
		 * "Sign Up pop up Close button"); } if
		 * (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle,
		 * "Subscribe Pop Up") == true) {
		 * verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose,
		 * "Subscribe Pop Up Close button"); } } if
		 * (userType.equals("NonSubscribedUser")) { if
		 * (verifyIsElementDisplayed(CompleteYourProfilePopUp.
		 * objCompleteYourProfileTxt,"Complete Your Profile pop up")) {
		 * click(CompleteYourProfilePopUp.objCloseBtn, "Close Button"); } if
		 * (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle,
		 * "Subscribe Pop Up") == true) {
		 * verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose,
		 * "Subscribe Pop Up Close button"); } }
		 */

		if (!userType.equals("SubscribedUser")) {
			if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle)) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "Subscribe Pop Up Close button");
			}
		}
		waitForPlayerAdToComplete("Video Player");
		if (verifyIsElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
			extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");
			boolean playerpaused = false;
			if (type.equals("")) {
				playerpaused = pauseLiveTVPlayer();
			} else {
				playerpaused = pausePlayer();
			}
			// gap covered
			if (playerpaused == true) {
				logger.info("Playback is verified and player has been paused successfully");
				extent.extentLogger("Playback", "Playback is verified and player has been paused successfully");
			} else {
				logger.error("Playback could not be verified because player pause is unsuccessful");
				extent.extentLoggerFail("Playback",
						"Playback could not be verified because player pause is unsuccessful");
			}
		} else {
			extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
		}
		getDriver().get(url);

	}

	/*
	 * ===========BHAVANA STATIC PAGE============= / /** Function to verify the
	 * About Us screen
	 * 
	 */
	public void AboutUsScreenValidation() throws Exception {
		HeaderChildNode("About us screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		Swipe("UP", 2);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
		verifyElementPresent(PWAHamburgerMenuPage.objAboutUsTextInPage, "About Us Screen page");
		System.out.println(getDriver().getContext());
		logger.info("Current URL is " + getDriver().getCurrentUrl());
		extent.extentLogger("", "Current URL is " + getDriver().getCurrentUrl());
		String contextname = getDriver().getContext();
		if (contextname.contains("CHROMIUM")) {
			logger.info("About Us screen is opened in webview");
		}
		verifyElementPresent(PWAHamburgerMenuPage.objAboutUsInfo, "Brief information of the application");
		Back(1);
	}

	/**
	 * Function to verify the About Us screen for Subscribed user
	 * 
	 */

	public void SubscribedUserAboutUsScreenValidation() throws Exception {
		HeaderChildNode("About us screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		// Swipe("UP", 1);
		swipeToBottomOfPage();
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
		verifyElementPresent(PWAHamburgerMenuPage.objAboutUsTextInPage, "About Us Screen page");
		String contextname = getDriver().getContext();
		if (contextname.contains("CHROMIUM")) {
			logger.info("About Us screen is opened in webview");
		}
		verifyElementPresent(PWAHamburgerMenuPage.objAboutUsInfo, "Brief information of the application");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objHyperLink, "Hyperlink on About Us Screen");
		getText(PWAHamburgerMenuPage.objHyperLink);
		logger.info("Hyperlink present on About Us screen is: " + getText(PWAHamburgerMenuPage.objHyperLink));
		extent.extentLogger("",
				"Hyperlink present on About Us screen is: " + getText(PWAHamburgerMenuPage.objHyperLink));
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHyperLink, "Hyperlink");
		getDriver().context("NATIVE");
		try {
			getDriver().findElement(PWALiveTVPage.objChromeOpenWith).click();
			waitTime(2000);

		} catch (Exception e) {
		}
		getDriver().context("CHROMIUM");
		logger.info("User is navigated to respective page: " + getDriver().getCurrentUrl());
		extent.extentLogger("", "User is navigated to respective page: " + getDriver().getCurrentUrl());
		Back(1);
	}

	/**
	 * Function to verify the Help Center screen
	 * 
	 */

	public void HelpCenterScreenValidation() throws Exception {
		HeaderChildNode("Help Center Screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		Swipe("UP", 1);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpCenterOption, "Help Center option");
		System.out.println(getDriver().getContextHandles());
		getDriver().context("NATIVE_APP");
		try {
			getDriver().findElement(PWALiveTVPage.objChromeOpenWith).click();
			waitTime(2000);
			getDriver().findElement(PWALiveTVPage.objChromeOpenWith).click();
		} catch (Exception e) {
		}
		/*
		 * getDriver().context("CHROMIUM"); gettingStartedVerifications();
		 * zee5SubscriptionVerification(); myAccountVerifications();
		 * watchingZEE5Verifications(); myZEE5AppVerifications();
		 * quickLinksVerifications(); contactUsScreenVerification();
		 */
		populartopicsVerifications();
		subscriptionsAndRentalsVerifications();
		myAccountVerifications();
		watchingZEE5Verifications();
		myZEE5AppVerifications();
		offersAndPartnershipsVerifications();
		contactUsScreenVerification();
	}

	public void offersAndPartnershipsVerifications() throws Exception {
		getDriver().context("NATIVE_APP");
		waitTime(2000);
		partialSwipeLoop(6);
		verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Offers & Partnerships"),
				"'Offers & Partnerships");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("ZEE5 Offers"), "'ZEE5 Offers'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("ZEE5 Offers"), "Article title 'ZEE5 Offers'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(6);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("ZEE5 Partnerships"),
				"'ZEE5 Partnerships'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("ZEE5 Partnerships"),
				"Article title 'ZEE5 Partnerships'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(6);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Applying a code in ZEE5"),
				"'Applying a code in ZEE5'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("Applying a Code or Gift Card in ZEE5"),
				"Article title 'Applying a Code or Gift Card in ZEE5'");
		Back(1);

		waitTime(2000);
	}

	public void subscriptionsAndRentalsVerifications() throws Exception {
		waitTime(3000);
		partialSwipeLoop(2);
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Subscriptions & Rentals"),
				"'Subscriptions & Rentals' tab");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Premium Subscription Plans"),
				"'Premium Subscription Plans'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("Premium Subscription Plans"),
				"Article title 'Premium Subscription Plans'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(2);
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I purchase a Premium subscription?"),
				"'I purchase a Premium subscription?'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("How do I purchase a Premium subscription?"),
				"Article title 'How do I purchase a Premium subscription?'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(2);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Renting movies on ZEEPLEX"),
				"'Renting movies on ZEEPLEX'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("Renting movies on ZEEPLEX"),
				"Article title 'Renting movies on ZEEPLEX'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(2);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Upgrading your Subscription"),
				"Upgrading your Subscription");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("Upgrading your Subscription"),
				"Article title 'Upgrading your Subscription'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(2);
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I am unable to watch Premium videos"),
				"I am unable to watch Premium videos");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("I am unable to watch Premium videos"),
				"Article title 'I am unable to watch Premium videos'");
		/*
		 * Back(1); waitTime(2000); partialSwipeLoop(2); waitTime(3000);
		 * verifyElementPresentAndClick(
		 * PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I am unable to watch Radhe"
		 * ), "I am unable to watch Radhe"); verifyElementPresent(PWAHamburgerMenuPage.
		 * objArticleTitle("unable to watch Radhe on ZEEPLEX"),
		 * "Article title 'unable to watch Radhe on ZEEPLEX'");
		 */
		Back(1);
	}

	public void myAccountVerifications() throws Exception {
		waitTime(3000);
		partialSwipeLoop(3);
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("My Account "), "'My Account ' tab");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Managing your subscription"),
				"'Managing your subscription'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("Managing your Subscription"),
				"Article title 'Managing your Subscription'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(3);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I can"),
				"I can't sign in to ZEE5");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("I can"), "I can't sign in to ZEE5'");

		Back(1);
		waitTime(2000);
		partialSwipeLoop(3);
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How many devices can I watch on?"),
				"'How many devices can I watch on?'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("How many devices can I watch on?"),
				"Article title 'How many devices can I watch on?'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(3);
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How can I delete / log out a registered device?"),
				"'How can I delete / log out a registered device?'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("How can I delete / log out a registered device?"),
				"Article title 'How can I delete / log out a registered device?'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(3);
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I purchased a subscription, but it’s not working"),
				"'I purchased a subscription, but it’s not working'");
		verifyElementPresent(
				PWAHamburgerMenuPage.objArticleTitle("I purchased a subscription/ZEEPLEX rental, but it’s not working"),
				"Article title 'I purchased a subscription/ZEEPLEX rental, but it’s not working'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(3);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Parental Control"),
				"'Parental Control'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("Parental Control"),
				"Article title 'Parental Control'");
		Back(1);
	}

	/**
	 * Function to verify the FAQ's in Help Center Screen under ZEE5 Subscriptions
	 * category
	 */

	public void zee5SubscriptionVerification() throws Exception {
		Back(1);
		waitTime(3000);
		partialSwipeLoop(2);
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("ZEE5 Subscriptions"),
				"'ZEE5 Subscriptions' tab");
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Radhe Combo Offer: Pay Less, Watch More!"),
				"'Radhe Combo Offer: Pay Less, Watch More!'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("Radhe Combo Offer - Pay Less, Watch More"),
				"Article title 'Radhe Combo Offer - Pay Less, Watch More'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(2);
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How do I purchase the Radhe Combo offer?"),
				"How do I purchase the Radhe Combo offer?");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("How do I purchase the Radhe Combo offer?"),
				"Article title 'How do I purchase the Radhe Combo offer?'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(2);
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Payment options for Radhe Combo offer"),
				"'Payment options for Radhe Combo offer'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("Payment options for Radhe Combo offer"),
				"Article title 'Payment options for Radhe Combo offer'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(2);
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading(
						"How can I check whether the Radhe Combo offer is active on my account?"),
				"How can I check whether the Radhe Combo offer is active on my account?");
		verifyElementPresent(
				PWAHamburgerMenuPage
						.objArticleTitle("How can I check whether the Radhe Combo offer is active on my account?"),
				"Article title 'How can I check whether the Radhe Combo offer is active on my account?'");
//		Back(1);
	}

	/**
	 * Function to Validating Contact Us page in Help Center
	 * 
	 */

	public void WriteToUs() throws Exception {
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objContactUs, "Contact Us page");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objSelectYourCountry, "Select your country field");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objAutofilledcountry, "Auto filled country name");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objDropDown, "Select your country drop down");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objRegisteredMobileNumber, "Registered mobile number field");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objCountryCode, "Auto filled country code");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objEmailField, "Email ID field");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objEmailIDAsterisk, "Email ID '*' symbol");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objText, "Tell us more about you issue text message");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objContentOption, "Content radio button");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objProductOption, "Product radio button");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objEnquiryOption, "Enquiry radio button");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objFeedbackOption, "Feedback radio button");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objContentAsDefault,
				"Content radio button is selected as default");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objSelectCategory, "Select category field");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objVideoNotPlaying, "Video not palying option as default");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objErrorMessage, "Error message text");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objErrorMessageAsterisk, "Error message '*' symbol");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objSubmitButton, "SUBMIT button");

		verifyIsElementDisplayed(PWAHamburgerMenuPage.objResetButton, "RESET button");

		if (getDriver().findElement(PWAHamburgerMenuPage.objSubmitButton).isEnabled() == false) {
			logger.info("Submit is disabled by default");
			extent.extentLogger("Submit", "Submit is disabled by default");
		}

		if (getDriver().findElement(PWAHamburgerMenuPage.objResetButton).isEnabled() == true) {
			logger.info("Reset is enabled by default");
			extent.extentLogger("Reset", "Reset is enabled by default");
		}

		verifyElementPresent(PWAHamburgerMenuPage.objErrorMessageAsterisk,
				"Mandatory Email ID field is highlighted by '*' symbol");

		verifyElementPresent(PWAHamburgerMenuPage.objErrorMessageAsterisk,
				"Mandatory Error message field is highlighted by '*' symbol");

		verifyElementPresent(PWAHamburgerMenuPage.objPlatformAsterisk,
				"Mandatory Platform drop down is highlighted by '*' symbol");

		type(PWAHamburgerMenuPage.objEmailField, "bhavana9518@gmail.com", "Email Id");

		type(PWAHamburgerMenuPage.objErrorMessageField, "Video couldn't play\n", "Error message");

		if (getDriver().findElement(PWAHamburgerMenuPage.objSubmitButton).isEnabled() == true) {
			logger.info("Submit is enabled by giving mandatory inputs");
			extent.extentLogger("Submit", "Submit is enabled by giving mandatory inputs");
		}

	}

	/**
	 * Function to verify the Terms of Use in Hamburger menu
	 * 
	 */

	public void TermsOfUseValiadtion() throws Exception {
		HeaderChildNode("Terms of Use screen");
		getDriver().context("CHROMIUM");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		Swipe("UP", 1);
		waitTime(4000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objTermsOfUseOption, "Terms of Use option");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objTermsOfUseScreen, "Terms of Use screen");
		System.out.println(getDriver().getContext());
		logger.info("Current URL is " + getDriver().getCurrentUrl());
		extent.extentLogger("version", "Current URL is " + getDriver().getCurrentUrl());
		Back(1);
	}

	/**
	 * Function to verify the Terms of Use screen for Subscribed user
	 * 
	 */
	public void SubscribedUserTermsOfUseValidation() throws Exception {
		HeaderChildNode("Terms of Use screen");
		getDriver().context("CHROMIUM");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		Swipe("UP", 1);
		waitTime(4000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objTermsOfUseOption, "Terms of Use option");
		verifyElementPresent(PWAHamburgerMenuPage.objTermsOfUseScreen, "Terms of Use screen");
		String contextname = getDriver().getContext();
		if (contextname.contains("CHROMIUM")) {
			logger.info("Terms of Use screen is opened in webview");
		}
		verifyElementPresent(PWAHamburgerMenuPage.objTermsAndConditions, "Terms and conditions of application");
		verifyElementPresent(PWAHamburgerMenuPage.objOfferTermsAndConditions, "Offers Terms and conditions");
		swipeToBottomOfPage();
		scrollToTopOfPage();
		verifyElementPresent(PWAHamburgerMenuPage.objOfferDUration, "Offer duration");
		Swipe("UP", 5);
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objCashbackByAmazonPay,
				"Steps to get Cashback for payment by Amazon pay");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objCashbackByAnyBankCard,
				"Steps to get 30% Cashback on any Bank Credit/Debit card");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objCashbackOnPaytm, "Steps to get 50% Paytm Cashback");
		Back(1);
	}

	/**
	 * Function to verify the Privacy Policy in Hamburger menu
	 * 
	 */

	public void PrivacyPolicyValidation() throws Exception {
		HeaderChildNode("Privacy Policy screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		Swipe("UP", 1);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objPrivacyPolicy, "Privacy Policy option");
		verifyElementPresent(PWAHamburgerMenuPage.objPrivacyPolicyScreen, "Privacy Policy screen");
		String contextname = getDriver().getContext();
		if (contextname.contains("CHROMIUM")) {
			logger.info("Privacy Policy screen is opened in webview");
		}
		verifyElementPresent(PWAHamburgerMenuPage.objPrivacyPolicyInfo, "Legal information of the application");
		swipeToBottomOfPage();
		scrollToTopOfPage();
		verifyElementPresent(PWAHamburgerMenuPage.objSecurityInfo, "Security Information of the application");
		Back(1);
	}

	/**
	 * Function to verify the Privacy Policy screen for Subscribed user
	 * 
	 */

	public void SubscribedUserPrivacyPolicyValidation() throws Exception {
		HeaderChildNode("Privacy Policy screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		Swipe("UP", 1);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objPrivacyPolicy, "Privacy Policy option");
		verifyElementPresent(PWAHamburgerMenuPage.objPrivacyPolicyScreen, "Privacy Policy screen");
		String contextname = getDriver().getContext();
		if (contextname.contains("CHROMIUM")) {
			logger.info("Privacy Policy screen is opened in webview");
		}
		verifyElementPresent(PWAHamburgerMenuPage.objLinkOnPrivacyPolicy, "Hyper link in Privacy Policy Screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLinkOnPrivacyPolicy, "Hyperlink");
		getDriver().context("NATIVE");
		try {
			getDriver().findElement(PWALiveTVPage.objChromeOpenWith).click();
			waitTime(2000);

		} catch (Exception e) {
		}
		getDriver().context("CHROMIUM");
		String link = getDriver().getCurrentUrl();
		logger.info("Navigated to : " + link);
		extent.extentLogger("", "Navigated to : " + link);
		if (link.contains("pagenotfound")) {
			logger.error("User is not able to navigate to the respective page of Hyper link");
			extent.extentLoggerFail("Hyper link", "User is not able to navigate to the respective page of Hyper link");
		}
		Back(1);
		verifyElementPresent(PWAHamburgerMenuPage.objPrivacyPolicyInfo, "Legal information of the application");
		swipeToBottomOfPage();
		click(PWAHomePage.objBackToTopArrow, "Back to Top Arrow");
		verifyElementPresent(PWAHamburgerMenuPage.objSecurityInfo, "Security Information of the application");
		Back(1);
	}

	/**
	 * Function to verify the Build version in Hamburger menu
	 * 
	 */

	public void BuildVersionValidation() throws Exception {
		HeaderChildNode("Build version");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		Swipe("UP", 1);
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objBuildVersion, "Build Version");
		String version = getText(PWAHamburgerMenuPage.objBuildVersion);
		logger.info("Build version is : " + version);
		extent.extentLogger("version", "Build version is : " + version);
		click(PWAHamburgerMenuPage.objCloseHamburger, "Hamburger Close button");

	}

	/**
	 * Function to verify the Footer Section of Home page
	 * 
	 */

	@SuppressWarnings("rawtypes")
	public void FooterSectionValidation(String userType) throws Exception {
		HeaderChildNode("Footer Section");
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		if (userType.equals("SubscribedUser")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyProfile, "Profile icon");
			PartialSwipe("UP", 3);
		} else {
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");
			PartialSwipe("UP", 4);
		}
		verifyElementPresent(PWAHomePage.objDownloadApps, "Download Apps text");
		verifyElementPresent(PWAHomePage.objAndroidPlayStoreIcon, "Android play store icon");
		verifyElementPresent(PWAHomePage.objIoSAppStoreIcon, "iOS app store icon");//
		// Instagram
		verifyElementPresentAndClick(PWAHomePage.objInstagramIcon, "Instagram icon");
		// androidSwitchTab();

		String currentHandle = getDriver().getWindowHandle();
		System.out.println(currentHandle);
		Set<String> handles = getDriver().getWindowHandles();
		System.out.println(currentHandle);
		Iterator it = handles.iterator();
		for (int i = 0; i < handles.size(); i++) {
			String handle = it.next().toString();
			if (!handle.equals(currentHandle)) {
				getDriver().switchTo().window(handle);
				break;
			}
		}
		String currentUrl = getDriver().getCurrentUrl();

		logger.info("Current URL is " + currentUrl);
		extent.extentLogger("version", "Current URL is " + currentUrl);
		verifyElementPresent(PWAHomePage.objInstagramPage, "Instagram page Follow button");
		Back(1);
		// AndroidSwitchToParentWindow();
		getDriver().switchTo().window(currentHandle);
		// Twitter
		swipeALittleDownForLinks();
		verifyElementPresentAndClick(PWAHomePage.objTwitterIcon, "Twitter icon");
		waitTime(3000);
		getDriver().context("NATIVE_APP");
		try {
			getDriver().findElement(PWALiveTVPage.objTwitterOpenWith).click();
		} catch (Exception e) {
		}
		getDriver().context("CHROMIUM");
		waitTime(5000);
		getDriver().context("NATIVE_APP");
		boolean twitterAppLaunched = false;
		if (verifyIsElementDisplayed(PWAHomePage.objTwitterPage, "Twitter app Follow button")) {
			Back(1);
			twitterAppLaunched = true;
		}
		getDriver().context("CHROMIUM");
		if (twitterAppLaunched == false) {
			androidSwitchTab();
			verifyIsElementDisplayed(PWAHomePage.objTwitterPage, "Twitter page Follow button");
			AndroidSwitchToParentWindow();
		}
		waitTime(2000);
		// Facebook
		verifyElementPresentAndClick(PWAHomePage.objFacebookIcon, "Facebook icon");
		androidSwitchTab();
		String facebook = getDriver().getCurrentUrl();
		if (facebook.contains("facebook")) {
			logger.info("User is redirected to Facebook page");
			extent.extentLogger("Facebook", "User is redirected to Facebook page");
		} else {
			logger.error("Facebook page redirection failed");
			extent.extentLoggerFail("Facebook", "Facebook page redirection failed");
		}
		AndroidSwitchToParentWindow();
		verifyElementPresent(PWAHomePage.objCopyRightText, "Copyright text");
		verifyElementPresentAndClick(PWAHomePage.objUpArrow, "Up Arrow");
		if (getDriver().findElement(PWAHomePage.objUpArrow).isDisplayed() == false) {
			logger.info("After clicking the Up arrow top of the page is displayed");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void FooterSectionValidationSubscribedUser() throws Exception {
		HeaderChildNode("Footer Section");
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyProfile, "Profile icon");
		PartialSwipe("UP", 3);
		verifyElementPresent(PWAHomePage.objDownloadApps, "Download Apps text");
		verifyElementPresent(PWAHomePage.objAndroidPlayStoreIcon, "Android play store icon");
		verifyElementPresent(PWAHomePage.objIoSAppStoreIcon, "iOS app store icon");//
		// Instagram
		verifyElementPresentAndClick(PWAHomePage.objInstagramIcon, "Instagram icon");
		androidSwitchTab();
		logger.info("Current URL is " + getDriver().getCurrentUrl());
		extent.extentLogger("version", "Current URL is " + getDriver().getCurrentUrl());
		verifyElementPresent(PWAHomePage.objInstagramPage, "Instagram page Follow button");
		Back(1);
		AndroidSwitchToParentWindow();
		// Twitter
		verifyElementPresentAndClick(PWAHomePage.objTwitterIcon, "Twitter icon");
		waitTime(3000);
		getDriver().context("NATIVE_APP");
		try {
			getDriver().findElement(PWALiveTVPage.objTwitterOpenWith).click();
		} catch (Exception e) {
		}
		getDriver().context("CHROMIUM");
		waitTime(5000);
		getDriver().context("NATIVE_APP");
		boolean twitterAppLaunched = false;
		if (verifyIsElementDisplayed(PWAHomePage.objTwitterPage, "Twitter app Follow button")) {
			Back(1);
			twitterAppLaunched = true;
		}
		getDriver().context("CHROMIUM");
		if (twitterAppLaunched == false) {
			androidSwitchTab();
			verifyIsElementDisplayed(PWAHomePage.objTwitterPage, "Twitter page Follow button");
			AndroidSwitchToParentWindow();
		}
		waitTime(2000);
		// Facebook
		verifyElementPresentAndClick(PWAHomePage.objFacebookIcon, "Facebook icon");
		androidSwitchTab();
		String facebook = getDriver().getCurrentUrl();
		if (facebook.contains("facebook")) {
			logger.info("User is redirected to Facebook page");
			extent.extentLogger("Facebook", "User is redirected to Facebook page");
		}
		AndroidSwitchToParentWindow();
		verifyElementPresent(PWAHomePage.objCopyRightText, "Copyright text");
		verifyElementPresentAndClick(PWAHomePage.objUpArrow, "Up Arrow");
		if (getDriver().findElement(PWAHomePage.objUpArrow).isDisplayed() == false) {
			logger.info("After clicking the Up arrow top of the page is displayed");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/**
	 * Function to verify the FAQ's in Help Center Screen under Getting started
	 * category
	 */

	public void gettingStartedVerifications() throws Exception {
		System.out.println(getDriver().getContextHandles());
		getDriver().context("NATIVE_APP");
		verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Getting Started"),
				"'Getting Started' tab");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("What is ZEE5"),
				"'What is ZEE5?'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("What is ZEE5"), "Article title 'What is ZEE5?'");
		Back(1);
		waitTime(1000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Registering with ZEE5"),
				"'Registering with ZEE5'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("Registering with ZEE5"),
				"Article title 'Registering with ZEE5'");
		Back(1);
		/*
		 * waitTime(1000);
		 * 
		 * verifyElementPresentAndClick(PWAHamburgerMenuPage.
		 * objHelpSectioOptionsHeading("Purchasing a subscription"),
		 * "'Purchasing a subscription'"); verifyElementPresent(PWAHamburgerMenuPage.
		 * objArticleTitle("Purchasing a subscription"),
		 * "Article title 'Purchasing a subscription'"); Back(1); waitTime(3000);
		 * PartialSwipe("UP", 1);
		 */
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How do I watch ZEE5 on my television?"),
				"'How do I watch ZEE5 on my television'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("How do I watch ZEE5 on my television"),
				"Article title 'How do I watch ZEE5 on my television?'");
		Back(1);
		waitTime(3000);
		PartialSwipe("UP", 1);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Renting movies on ZEEPLEX"),
				"'Renting movies on ZEEPLEX'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("Renting movies on ZEEPLEX"),
				"Article title 'Renting movies on ZEEPLEX'");
	}

	/**
	 * Function to verify the FAQ's in Help Center Screen under My Account category
	 */
	/*
	 * public void myAccountVerifications() throws Exception { Back(1);
	 * waitTime(3000); partialSwipeLoop(3); waitTime(3000);
	 * verifyElementPresent(PWAHamburgerMenuPage.
	 * objHelpSectioOptionsHeading("My Account"), "'My Account' tab");
	 * verifyElementPresentAndClick(PWAHamburgerMenuPage.
	 * objHelpSectioOptionsHeading("Managing your Subscription"),
	 * "'Managing your Subscription'"); verifyElementPresent(PWAHamburgerMenuPage.
	 * objArticleTitle("Managing your Subscription"),
	 * "Article title 'Managing your Subscription'"); Back(1); waitTime(2000);
	 * partialSwipeLoop(3); waitTime(3000);
	 * verifyElementPresentAndClick(PWAHamburgerMenuPage.
	 * objHelpSectioOptionsHeading("I can"), "I can't sign in to ZEE5");
	 * verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("t sign in to ZEE5"
	 * ), "Article title 'I can't sign in to ZEE5'"); Back(1); waitTime(2000);
	 * partialSwipeLoop(3); waitTime(3000); verifyElementPresentAndClick(
	 * PWAHamburgerMenuPage.
	 * objHelpSectioOptionsHeading("I made a payment but my subscription"),
	 * "'I made a payment but my subscription isn't active / My subscription is missing'"
	 * ); verifyElementPresent(PWAHamburgerMenuPage.
	 * objArticleTitle("I made a payment but my subscription"),
	 * "Article title 'I made a payment but my subscription isn't active / My subscription is missing'"
	 * ); Back(1); waitTime(2000); partialSwipeLoop(3); waitTime(3000);
	 * verifyElementPresentAndClick( PWAHamburgerMenuPage.
	 * objHelpSectioOptionsHeading("I want to update my profile information"),
	 * "I want to update my profile information");
	 * verifyElementPresent(PWAHamburgerMenuPage.
	 * objArticleTitle("I want to update my profile information"),
	 * "Article title 'I want to update my profile information'"); Back(1); }
	 */

	public void watchingZEE5Verifications() throws Exception {
		waitTime(2000);
		partialSwipeLoop(4);
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Watching ZEE5"), "'Watching ZEE5' tab");
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I need help with playing a video"),
				"I need help with playing a video");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("I need help with playing a video"),
				"Article title 'I need help with playing a video'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(4);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I need help with audio"),
				"'I need help with audio'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("I need help with audio"),
				"Article title 'I need help with audio'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(4);
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I need help with casting ZEE5 on my TV"),
				"'I need help with casting ZEE5 on my TV'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("I need help with casting ZEE5 on my TV"),
				"Article title 'I need help with casting ZEE5 on my TV'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(4);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("All about downloads"),
				"'All about downloads'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("All about downloads"),
				"Article title 'All about downloads'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(4);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("All about subtitles"),
				"'All about subtitles'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("All about subtitles"),
				"Article title 'All about subtitles'");
		Back(1);

	}

	public void myZEE5AppVerifications() throws Exception {
		waitTime(2000);
		partialSwipeLoop(5);
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("My ZEE5 App"), "'My ZEE5 App' tab");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("App Performance"),
				"App Performance");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("App Performance"),
				"Article title 'App Performance'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(5);
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I am unable to authenticate my TV"),
				"'I am unable to authenticate my TV'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("m unable to authenticate my TV"),
				"Article title 'I'm unable to authenticate my TV'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(5);
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How can I enable automatic updates for the ZEE5 app"),
				"'How can I enable automatic updates for the ZEE5 app'");
		verifyElementPresent(
				PWAHamburgerMenuPage.objArticleTitle("How can I enable automatic updates for the ZEE5 app"),
				"Article title 'How can I enable automatic updates for the ZEE5 app'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(5);
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("What’s the latest ZEE5 App version?"),
				"'What’s the latest ZEE5 App version?'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("What’s the latest ZEE5 App Version?"),
				"Article title 'What’s the latest ZEE5 App Version?'");
		Back(1);

		waitTime(2000);
		partialSwipeLoop(6);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How Can I?"), "'How Can I?'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("How Can I?"), "Article title 'How Can I?'");
		Back(1);
	}

	/**
	 * Function to verify the FAQ's in Help Center Screen under Quick Links category
	 */
	public void quickLinksVerifications() throws Exception {
		getDriver().context("NATIVE_APP");
		waitTime(2000);
		partialSwipeLoop(6);
		verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Quick Links"), "'Quick Links' tab");
		/*
		 * verifyElementPresentAndClick( PWAHamburgerMenuPage.
		 * objHelpSectioOptionsHeading("I am unable to watch the ZEEPLEX movie"),
		 * "I am unable to watch the ZEEPLEX movie");
		 * verifyElementPresent(PWAHamburgerMenuPage.
		 * objArticleTitle("I am unable to watch the ZEEPLEX movie"),
		 * "Article title 'I am unable to watch the ZEEPLEX movie'");
		 */
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I purchased a subscription but it’s not working"),
				"I purchased a subscription but it’s not working");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("I purchased a subscription but it’s not working"),
				"Article title 'I purchased a subscription but it’s not working'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(6);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How Can I"), "'How Can I?'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("How Can I"), "Article title 'How Can I?'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(6);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("ZEE5 Offers"), "'ZEE5 Offers'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("ZEE5 Offers"), "Article title 'ZEE5 Offers'");
		Back(1);
		waitTime(2000);
		partialSwipeLoop(6);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("ZEE5 Partnerships"),
				"'ZEE5 Partnerships'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("ZEE5 Partnerships"),
				"Article title 'ZEE5 Partnerships'");
		Back(1);
		/*
		 * waitTime(2000); partialSwipeLoop(7); waitTime(3000);
		 * verifyElementPresentAndClick(PWAHamburgerMenuPage.
		 * objHelpSectioOptionsHeading("Cancel Subscription"), "'Cancel Subscription'");
		 * verifyElementPresent(PWAHamburgerMenuPage.
		 * objArticleTitle("How do I cancel my ZEE5 Subscription"),
		 * "Article title 'How do I cancel my ZEE5 Subscription'"); Back(1);
		 */
		waitTime(2000);
	}

	@SuppressWarnings("rawtypes")
	public void contactUsScreenVerification() throws Exception {
		partialSwipeLoop(8);
		waitTime(3000);
		try {
			WebElement still = getDriver().findElement(By.xpath("//*[contains(@text,'Still need help')]"));
			int x = still.getLocation().getX();
			int width = still.getSize().getWidth();
			int y = still.getLocation().getY();
			int height = still.getSize().getHeight();
			int reqX = x + width + 131;
			int reqY = y + (height / 2);
			TouchAction act = new TouchAction(getDriver());
			act.tap(PointOption.point(reqX, reqY)).perform();
			waitTime(3000);
			getDriver().findElement(PWALiveTVPage.objChromeOpenWith).click();
		} catch (Exception e) {
		}
		verifyElementPresent(PWAHomePage.objcontactus, "Contact Us page");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objzeeAppCloseContactUs, "Close of Contact Us Page")) {
			click(PWAHamburgerMenuPage.objzeeAppCloseContactUs, "Close of Contact Us Page");
			Back(1);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objzeeAppInterstitialAddClose, "Close of Interstitial Ad")) {
				click(PWAHamburgerMenuPage.objzeeAppInterstitialAddClose, "Close of Interstitial Ad");
			}
			for (int i = 0; i < 3; i++) {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objzeeAppExit, "Exit of ZEE5 App")) {
					click(PWAHamburgerMenuPage.objzeeAppExit, "Exit of ZEE5 App");
					break;
				} else {
					Back(1);
					waitTime(3000);
				}
			}
		} else {
			Back(1);
			waitTime(3000);
			Back(1);
			waitTime(5000);
		}
		getDriver().context("CHROMIUM");
		// AndroidSwitchToParentWindow();
	}

	public void partialSwipeLoop(int count) throws Exception {
		for (int i = 0; i < count; i++) {
			PartialSwipe("UP", 1);
			waitTime(1000);
		}
	}

	/**
	 * Function to verify the Display language and Static pages Content language
	 */
	public void contentLanguagewithDisplayLanguage() throws Exception {

		// Changing display language to Kannada
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguage, "Language option");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objKannadaLanguage, "Kannada option");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");

		// About Us
		waitTime(8000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		Swipe("UP", 1);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objAboutUsinKannada, "About Us option in kannada");
		String title1 = getText(PWAHamburgerMenuPage.objAboutUsTextInPage);
		if (title1.contains("About Us")) {
			logger.info("Title of the page displayed: " + title1);
			extent.extentLogger("pagetitle", "Title of the page displayed: " + title1);
			logger.error("Content of the About Us page is not according to the display language");
			extent.extentLoggerFail("About Us",
					"Content of the page About Us is not according to the display language");
		}
		Back(1);

		// Terms of USe
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		Swipe("UP", 1);
		waitForElementAndClick(PWAHamburgerMenuPage.objTermsInKannada, 5, "Terms of Use option in Kannada");
		String title2 = getText(PWAHamburgerMenuPage.objTermsOfUseScreen);
		if (title2.contains("Terms of Use")) {
			logger.info("Title of the page displayed: " + title2);
			extent.extentLogger("pagetitle", "Title of the page displayed: " + title2);
			logger.error("Content of the Terms of Use page is not according to the display language");
			extent.extentLoggerFail("Terms of Use",
					"Content of the Terms of Use page is not according to the display language");
		}
		Back(1);
		// Privacy Policy
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objPrivacyPolicyInKannadA,
				"Privacy Policy option in Kannada");
		String title3 = getText(PWAHamburgerMenuPage.objPrivacyPolicyScreen);
		if (title3.contains("Privacy Policy")) {
			logger.info("Title of the page displayed: " + title3);
			extent.extentLogger("pagetitle", "Title of the page displayed: " + title3);
			logger.error("Content of the Privacy Policy page is not according to the display language");
			extent.extentLoggerFail("Privacy Policy",
					"Content of the Privacy Policy page is not according to the display language");
		}
		Back(1);
		// Changing display language to English
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguage, "Language option");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objEnglishOption, "English option");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
	}

	@SuppressWarnings("rawtypes")
	public void ChannelGuide(String userType) throws Exception {
		extent.HeaderChildNode("Validating that user is navigated to channel guide screen");
		verifyElementPresentAndClick(PWALiveTVPage.objNothighlightedChannelGuideToggle, "Channel guide toggle");
		waitTime(5000);
		waitForElementDisplayed(PWALiveTVPage.objHighlightedChannelGuideToggle, 5);
		if (verifyElementPresent(PWALiveTVPage.objHighlightedChannelGuideToggle, "Channel guide toggle")) {

			logger.info("Channel guide toggle is highlighted, User is navigated to Channel guide screen");
			extent.extentLogger("Channel guide",
					"Channel guide toggle is highlighted, User is navigated to Channel guide screen");

		}

		if (userType.equalsIgnoreCase("SubscribedUser")) {
			remainderOptionOnUpcomingShow();
			JSClick(PWALiveTVPage.objTodayDate, "Today's date");
		}
		extent.HeaderChildNode("Validating that user is able to scroll trough the channel list");
		Swipe("UP", 1);
		Swipe("DOWN", 1);
		extent.HeaderChildNode("Validating that On going live show cards are highlighted");
		waitExplicitlyForElementPresence(PWALiveTVPage.objFirstOngoingLiveTvShowCard, 60, "Ongoing Live TV Show Card");
		String ongoingLiveTvcardClass = getAttributValue("class", PWALiveTVPage.objFirstOngoingLiveTvShowCard);
		if (ongoingLiveTvcardClass.contains("active")) {
			logger.info("On going live show cards are highlighted on channel guide screen: ");
			extent.extentLogger("On going live show card",
					"On going live show cards are highlighted on channel guide screen");
		} else {
			logger.info("On going live show cards are not highlighted on channel guide screen");
			extent.extentLogger("On going live show card",
					"On going live show cards are not highlighted on channel guide screen");
		}

		extent.HeaderChildNode("Validating that user is navigated to respective live TV consumption screen");
		System.out.println("Validating that user is navigated to respective live TV consumption screen");
		List<WebElement> ongoingshows = findElements(PWALiveTVPage.objOngoingLiveTvShowTitles);
		String onGoingLiveTvShowCardTitle = "";
		for (int i = 0; i < ongoingshows.size(); i++) {
			onGoingLiveTvShowCardTitle = ongoingshows.get(i).getAttribute("innerText");
			System.out.println(onGoingLiveTvShowCardTitle);
			if (JSClick(PWALiveTVPage.objOngoingLiveTvShowTitles(i + 1),
					"Ongoing Live TV Show card: " + onGoingLiveTvShowCardTitle)) {
				break;
			}
		}
		waitTime(7000);
		String ConsumptionScreenShowTitle = getText(PWASearchPage.objShowTitleInconsumptionPage);
		logger.info("Navigated to Consumption page:" + ConsumptionScreenShowTitle);
		extent.extentLogger("", "Navigated to consumption screen: " + ConsumptionScreenShowTitle);
		if (ConsumptionScreenShowTitle.equals("")) {
			logger.error("User is not navigated to consumption screen from Channel Guide Screen");
			extent.extentLoggerFail("Consumption Screen",
					"User is not navigated to consumption screen from Channel Guide Screen");
		} else {
			logger.info("User is navigated to consumption screen from Channel Guide screen");
			extent.extentLogger("Consumption Screen",
					"User is navigated to consumption screen from Channel Guid screen");
		}
		if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			Back(1);
			boolean clickedUpcomingCard = false;
			for (int i = 0; i <= 5; i++) {
				if (JSClick(PWALiveTVPage.objFirstUpcomingShowcard, "Upcoming Live Program")) {
					clickedUpcomingCard = true;
					break;
				} else {
					Swipe("UP", 1);
				}
			}
			if (clickedUpcomingCard == true) {
				waitForElementDisplayed(PWALiveTVPage.objUpcomingShowContentDialoguebox, 5);
				verifyElementPresent(PWALiveTVPage.objUpcomingShowContentDialoguebox, "Show Info PopUp");
				waitForElementDisplayed(PWALiveTVPage.objUpcomingLiveProgramShareBtn, 5);
				verifyElementPresentAndClick(PWALiveTVPage.objUpcomingLiveProgramShareBtn, "Share button");
				waitTime(3000);
				System.out.println(getDriver().getContextHandles());
				getDriver().context("NATIVE_APP");
				Dimension dim = getDriver().manage().window().getSize();
				int startx = (int) (dim.width * 0.6);
				int starty = (int) (dim.height * 0.7);
				int endx = (int) (startx * 0.1);
				int endy = starty;
				for (int i = 0; i < 2; i++) {
					try {
						Swipe("UP", 1);
						getDriver().findElement(PWAShowsPage.objFacebookApp).click();
						break;
					} catch (Exception e) {
						TouchAction act = new TouchAction(getDriver());
						act.press(PointOption.point(startx, starty))
								.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
								.moveTo(PointOption.point(endx, endy)).release().perform();
					}
				}
				waitForElementDisplayed(PWAShowsPage.objFacebookPostBtn, 10);
				waitForElementAndClick(PWAShowsPage.objFacebookPostBtn, 10, "POST button in Facebook App");
				Back(1);
				getDriver().context("CHROMIUM");
				click(PWALiveTVPage.objUpcomingLiveProgramClose, "Close in Upcoming Live Program Pop Up");
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			} else {
				logger.error("Failed to click on Upcomig Live Program");
				extent.extentLoggerFail("Consumption Screen", "Failed to click on Upcomig Live Program");
			}

		} else {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	public void navigationToConsumptionScreenThroughTrendingSearches() throws Exception {
		extent.HeaderChildNode("Validation of Trending Searches");
		click(PWAHomePage.objSearchBtn, "Search icon");
		waitTime(3000);
		if (verifyIsElementDisplayed(PWASearchPage.objTrendingSearchesTray, "Trending Searches tray")) {
			verifyIsElementDisplayed(PWASearchPage.objFirstAssetThumbnailTrendingSearch,
					"First asset thumbnail of Trending searches tray");
			verifyIsElementDisplayed(PWASearchPage.objFirstAssetTitleTrendingSearch,
					"First asset title of Trending searches tray");
			String searchScreenTitle = getElementPropertyToString("innerText",
					PWASearchPage.objFirstAssetTitleTrendingSearch, "First Asset Title Trending Search");
			logger.info("First asset title of Trending searches tray: " + searchScreenTitle);
			extent.extentLogger("", "First asset title of Trending searches tray: " + searchScreenTitle);
			// handle mandatory pop up
			String user = getParameterFromXML("userType");
			mandatoryRegistrationPopUp(user);
			click(PWASearchPage.objFirstAssetThumbnailTrendingSearch,
					"First asset thumbnail of Trending searches tray");
			waitTime(6000);
			// Show details page
			if (verifyElementDisplayed(PWAShowsPage.objShowsTitle)) {
				logger.info("Show details page is displayed");
				extent.extentLogger("", "Show details page is displayed");
				String ShowTitle = getText(PWAShowsPage.objShowsTitle);
				logger.info("Show Details page title fetched : " + ShowTitle);
				extent.extentLogger("show details screen", "Show Details page title fetched : " + ShowTitle);
				waitTime(3000);
				if (searchScreenTitle.contains(ShowTitle)) {
					logger.info("User is navigated to respective show details screen");
					extent.extentLogger("Consumption Screen", "User is navigated to respective show details screen");
				} else {
					logger.error("User is not navigated to respective show details screen");
					extent.extentLoggerFail("Consumption Screen",
							"User is not navigated to respective show details screen");
				}
			}
			// Consumptions screen
			if (verifyElementDisplayed(PWAPlayerPage.objContentTitleInConsumptionPage)) {
				logger.info("Consumptions page is displayed");
				extent.extentLogger("", "Consumptions page is displayed");
				String contentPlayed = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
				logger.info("Content played: " + contentPlayed);
				extent.extentLogger("contentPlayed", "Content played: " + contentPlayed);
				String fromShow = getText(PWAPlayerPage.objConsumptionsShowTitle);
				logger.info("Show displayed in Consumptions page: " + fromShow);
				extent.extentLogger("showDisplayed", "Show displayed in Consumptions page: " + fromShow);
				if (fromShow.contains(searchScreenTitle) || searchScreenTitle.contains(fromShow)) {
					logger.info("User is navigated to respective consumption screen");
					extent.extentLogger("Consumption Screen", "User is navigated to respective consumption screen");
				} else {
					logger.error("User is not navigated to respective consumption screen");
					extent.extentLoggerFail("Consumption Screen",
							"User is not navigated to respective consumption screen");
				}
			}
		} else {
			logger.error("Failed to verify Trending Searches tray");
			extent.extentLoggerFail("", "Failed to verify Trending Searches tray");
		}
		if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up")) {
			click(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up close icon");
		}
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void voiceInput() throws Exception {
		extent.HeaderChildNode("Validating that user is asked to give the voice input post tapping on microphone icon");
		verifyElementPresentAndClick(PWASearchPage.objVoiceSearchButton, "Voice seach icon");
		waitTime(4000);
		getDriver().context("NATIVE_APP");
		directClickReturnBoolean(PWASearchPage.objallow, "Allow in pop up");
		directClickReturnBoolean(PWASearchPage.objallowCaps, "ALLOW in pop up");
		getDriver().context("CHROMIUM");
		waitTime(6000);
		click(PWASearchPage.objVoiceSearchButton, "Voice seach icon");
		String searchBarText = getAttributValue("placeholder", PWASearchPage.objSearchEditBox);
		if (searchBarText.equalsIgnoreCase("Speak to Search on ZEE5")) {
			logger.info("'Speak to Search on ZEE5' is displayed on search edit box");
			extent.extentLogger("Voice input", "'Speak to Search on ZEE5' is displayed on search edit box");
			logger.info("User is asked to give the voice input");
			extent.extentLogger("Voice input", "User is asked to give the voice input");
		} else {
			logger.error("'Speak to Search on ZEE5' is not displayed on search edit box");
			extent.extentLoggerFail("Voice input", "'Speak to Search on ZEE5' is not displayed on search edit box");
			logger.error("User is not asked to give the voice input");
			extent.extentLoggerFail("Voice input", "User is not asked to give the voice input");
		}
	}

	public void UserActions(String userType) throws Exception {
		if (userType.equals("Guest")) {
			UserActionGuestUser();
		} else if (userType.equals("NonSubscribedUser")) {
			UserActionLoggedInUser();
		} else {
			ContinueWatching();
			MyReminder();
			MyWatchlistSubscribedUser();
		}
	}

	/* ================Logged In user -User action================ */
	public void UserActionLoggedInUser() throws Exception {
		extent.HeaderChildNode("User Actions module- Non Subscribed User Validations");
		// Verify Continue watching tray is displayed
		if (verifyIsElementDisplayed(PWAHomePage.objContinueWatchingTray, "Coninue Watching tray") == true) {
			extent.extentLogger("Verify Continue watching tray ",
					getDriver().findElement(PWAHomePage.objContinueWatchingTray).getText()
							+ " tray is displayed for Non subscribed user");
			logger.info(getDriver().findElement(PWAHomePage.objContinueWatchingTray).getText()
					+ " tray is displayed for Non subscribed user");
		} else {
			extent.extentLoggerFail("Verify continue watching tray",
					"Continue watching tray is not displayed for Non subscribed user");
			logger.info("Continue watching tray is not displayed for Non subscribed user");
		}
		// Verify Add to Watch list is displayed in Content consumption screen
		// Search any content
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		click(PWAHomePage.objSearchBtn, "Search button");
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("consumptionsFreeContent");
		type(PWAHomePage.objSearchField, keyword + "\n", "Search");
		verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		String contentName = getElementPropertyToString("innerText", PWAPlayerPage.objContentName, "Title");
		verifyElementPresentAndClick(PWAPlayerPage.watchListBtn, "Add to Watchlist");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		click(PWAHamburgerMenuPage.objMyAccount, "My account");
		click(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
		click(PWAAddToWatchListPage.objMoviesTab, "Movies tab");
		String ContentNameInWatchlist = getElementPropertyToString("innerText",
				PWAAddToWatchListPage.objFirstContentInWatchlist, "Content title");
		if (contentName.equals(ContentNameInWatchlist)) {
			extent.extentLogger("Verify Watchlist", "Added content is displayed in Watchlist screen");
			logger.info("Added content is displayed in Watchlist screen");
		} else {
			extent.extentLoggerFail("Verify Watchlist", "Added content is not displayed in Watchlist screen");
			logger.info("Added content is not displayed in Watchlist screen");
		}
		click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all");

	}

	public void ContinueWatching() throws Exception {
		extent.HeaderChildNode("User Actions : Continue Watching tray validations");
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);

		// Verify Progress bar is displayed for continue watching tray
		verifyElementPresent(PWAContinueWatchingTrayPage.objProgressBar, "Progress bar");
		// Verify Progress bar is updated accordingly
		String beforePlayingContent = getElementPropertyToString("style",
				PWAContinueWatchingTrayPage.objProgressBarProgress(1), "Progress bar");
		extent.extentLogger("", "Progress bar filler width before playing: " + beforePlayingContent);
		logger.info("Progress bar filler width before playing: " + beforePlayingContent);
		String[] originalRatio = beforePlayingContent.split(":");
		String progress = originalRatio[1];
		String[] exactRatio = progress.split("%");
		float progressedTime = Float.parseFloat(exactRatio[0]);
		System.out.println(progressedTime);
		// Left watch time before playing content
		String leftWatchTime = getElementPropertyToString("innerText", PWAContinueWatchingTrayPage.objTotalTimeLeft(1),
				"Left time before watching content");
		String[] leftTime = leftWatchTime.split("left");
		String timeBeforeWatchingContent = leftTime[0];
		System.out.println(timeBeforeWatchingContent);
		// Verify partially watched contents are added or updated
		// Play any content
		String playingContent = getElementPropertyToString("innerText", PWAContinueWatchingTrayPage.objCardTitle(1),
				"Content");
		// Click on the content
		click(PWAContinueWatchingTrayPage.objCardTitle(1), "Content: " + playingContent);
		Thread.sleep(180000);
		// Navigate to home page
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		Thread.sleep(4000);
		String updatedContent = getElementPropertyToString("innerText", PWAContinueWatchingTrayPage.objCardTitle(1),
				"Content");
		if (playingContent.equals(updatedContent)) {
			extent.extentLogger("Verify partially watched content",
					"Partially watched contents are added to Continue watching tray");
			logger.info("Partially watched contents are added to Continue watching tray");
		} else {
			extent.extentLoggerFail("Verify partially watched content",
					"Partially watched contents are not added to Continue watching tray");
			logger.info("Partially watched contents are not added to Continue watching tray");
		}

		// Verify Progress bar is updated after watching any content from CW tray
		String afterPlayingContent = getElementPropertyToString("style",
				PWAContinueWatchingTrayPage.objProgressBarProgress(1), "Progress bar");
		extent.extentLogger("", "Progress bar filler width after playing: " + afterPlayingContent);
		logger.info("Progress bar filler width after playing: " + afterPlayingContent);
		String[] originalRatio1 = afterPlayingContent.split(":");
		String progress1 = originalRatio1[1];
		String[] exactRatio1 = progress1.split("%");
		float progressedTimeAfterWatching = Float.parseFloat(exactRatio1[0]);
		System.out.println(progressedTimeAfterWatching);
		if (progressedTime < progressedTimeAfterWatching) {
			extent.extentLogger("Verify progress bar", "Progress bar is updated from " + progress + " to " + progress1);
			logger.info("Progress bar is updated from " + progress + " to " + progress1);
		} else {
			extent.extentLoggerFail("Verify progress bar",
					"Progress bar is not updated after watching content, before was " + progress
							+ " and now updated to " + progress1);
			logger.error("Progress bar is not updated after watching content, before was " + progress
					+ " and now updated to " + progress1);
		}

		// Verify left watch time is updated accordingly

		// Left watch time after playing content
		String leftWatchTime1 = getElementPropertyToString("innerText", PWAContinueWatchingTrayPage.objTotalTimeLeft(1),
				"Left time before watching content");
		String[] leftTime1 = leftWatchTime1.split("left");
		String timeAfterWatchingContent = leftTime1[0];
		System.out.println(timeAfterWatchingContent);
		if (!timeBeforeWatchingContent.equals(timeAfterWatchingContent)) {
			extent.extentLogger("Verify left watch time", "The left time Before watching content is " + leftTime[0]
					+ "and the left time after watching content for some time is " + leftTime1[0]);
			logger.info("The left time Before watching content is " + leftTime[0]
					+ "and the left time after watching content for some time is " + leftTime1[0]);
		} else {
			extent.extentLoggerFail("Verify Left watch time",
					"Left Watch time is not getting updated after watching content from Continue watching tray");
			logger.info("Left Watch time is not getting updated after watching content from Continue watching tray");
		}
	}

	public boolean directClickReturnBoolean(By byLocator, String validationtext) throws Exception {
		try {
			WebElement element = (new WebDriverWait(getDriver(), 1))
					.until(ExpectedConditions.presenceOfElementLocated(byLocator));
			if (element.isDisplayed() == true) {
				element.click();
				logger.info("Clicked on " + validationtext);
				extent.extentLogger("click", "Clicked on " + validationtext);
				element = null;
				return true;
			}
		} catch (Exception e) {
		}
		return false;
	}

	public void dismissSystemPopUp() throws Exception {
		getDriver().context("NATIVE_APP");
		directClickReturnBoolean(PWASearchPage.objallow, "Allow in pop up");
		getDriver().context("CHROMIUM");
	}

	@SuppressWarnings("unused")
	public void dismissAllPopUps() throws Exception {
		String url = getParameterFromXML("url");
		for (int trial = 0; trial < 8; trial++) {
			if (directClickReturnBoolean(PWAHomePage.objAppInstallPopUpClose, "Close in App Install Pop Up"))
				break;
			else
				waitTime(5000);
		}
		for (int trial = 0; trial < 15; trial++) {
			if (directClickReturnBoolean(PWALoginPage.objNotificationPopUp, "'No Thanks' in Clever tap Pop Up"))
				break;
			else
				waitTime(10000);
		}
	}

	public void FilterLanguage(String lang) throws Exception {
		click(PWALiveTVPage.objFilterLanguageChannelGuide, "Filter language");
		int size = findElements(PWALiveTVPage.objSelectedlang).size();
		for (int i = 1; i <= size; i++) {
			click(PWALiveTVPage.objSelectedlang, "Selected language");
		}
		click(PWALiveTVPage.objSelectLang(lang), lang + " language");
		click(PWALiveTVPage.objApplyBtn, "Apply button");
//		click(PWALiveTVPage.objApplyBtn,"Apply button");
	}

	public void FilterLanguageUnselectOthers(String language, String genre) throws Exception {
		click(PWALiveTVPage.objFilterLanguageChannelGuide, "Filter language");
		// Unselect all languages
		int size = findElements(PWALiveTVPage.objSelectedlang).size();
		for (int i = 1; i <= size; i++) {
			click(PWALiveTVPage.objSelectedlang, "Selected language to unselect");
		}
		click(PWALiveTVPage.objSelectLang(language), language + " language");
		click(PWALiveTVPage.objGenreBtn, "Genre tab");
		size = findElements(PWALiveTVPage.objSelectedlang).size();
		for (int i = 1; i <= size; i++) {
			click(PWALiveTVPage.objSelectedlang, "Selected genre to unselect");
		}
		click(PWALiveTVPage.objSelectLang(genre), genre + " genre");
		click(PWALiveTVPage.objApplyBtn, "Apply button");
	}

	@SuppressWarnings("rawtypes")
	public void swipeALittleDownForLinks() {
		Dimension size = getDriver().manage().window().getSize();
		TouchAction touchAction = new TouchAction(getDriver());
		int starty = (int) (size.height * 0.5);
		int endy = (int) (size.height * 0.7);
		int startx = size.width / 2;
		touchAction.press(PointOption.point(startx, starty))
				.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000))).moveTo(PointOption.point(startx, endy))
				.release().perform();
	}

	public void reloadHome() throws Exception {
		String url = getParameterFromXML("url");
		// System.out.println(getDriver());
		getDriver().get(url);
		waitTime(5000);
		// dismissAppInstallPopUp();
	}

	public boolean waitforLiveTabToLoad() {
		for (int i = 0; i < 15; i++) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objFirstCardFreeChnnelName)) {
				return true;
			} else {
				waitTime(10000);
			}
		}
		extent.extentLoggerFail("", "Live TV failed to load even after waiting for 2 minutes");
		logger.error("Live TV failed to load even after waiting for 2 minutes");
		return false;
	}

	public boolean waitforChannelGuideToLoad() {
		for (int i = 0; i < 15; i++) {
			if (verifyIsElementDisplayed(PWALiveTVPage.objChannelWrapper)) {
				return true;
			} else {
				waitTime(10000);
			}
		}
		extent.extentLoggerFail("", "Channel Guide failed to load even after waiting for 2 minutes");
		logger.info("Channel Guide failed to load even after waiting for 2 minutes");
		return false;
	}

	public boolean waitforNewsConsumptionsToLoad() throws Exception {
		for (int i = 0; i < 15; i++) {
			if (verifyIsElementDisplayed(PWANewsPage.objLiveNewsConsumptionsTitle)) {
				System.out.println(getText(PWANewsPage.objLiveNewsConsumptionsTitle));
				if (getText(PWANewsPage.objLiveNewsConsumptionsTitle).equals("N\\/A")) {
					logger.info("N/A is displayed as title, waiting for metdata to load");
					extent.extentLogger("", "N/A is displayed as title, waiting for metdata to load");
				} else {
					logger.info("News consumptions page metadata loaded");
					extent.extentLogger("", "News consumptions page metadata loaded");
					return true;
				}
			} else {
				waitTime(10000);
				System.out.println("iteration " + i);
			}
		}
		extent.extentLoggerFail("", "News consumptions page metadata failed to load even after waiting for 2 minutes");
		logger.info("News consumptions page metadata failed to load even after waiting for 2 minutes");
		return false;
	}

	public void launchCheck(String userType) throws Exception {
		HeaderChildNode("Verifying that on launch user can see signup/login option");
		verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger menu");
		if (userType.equals("Guest")) {
			if (checkElementExist(PWALoginPage.objSignUpBtn, "Sign up button")) {
				logger.info("Guest user can see option signup after launch");
				extentLogger("Launch", "Guest user can see option signup after launch");
			} else {
				logger.info("Something went wrong");
			}
			if (checkElementExist(PWALoginPage.objLoginBtn, "Login button")) {
				logger.info("Guest user can see option signup after launch");
				extentLogger("Launch", "Guest user can see option signup after launch");
			} else {
				logger.info("Something went wrong");
			}
		}
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			if (!checkElementExist(PWALoginPage.objSignUpBtn, "Sign up button")) {
				logger.info(userType + "cannot see option signup after launch");
				extentLogger("Launch", userType + "cannot see option signup after launch");
			} else {
				logger.info("Something went wrong");
			}
			if (!checkElementExist(PWALoginPage.objLoginBtn, "Login button")) {
				logger.info(userType + "cannot see option login after launch");
				extentLogger("Launch", userType + "cannot see option login after launch");
			} else {
				logger.info("Something went wrong");
			}
		}
		click(PWAHamburgerMenuPage.objCloseHamburger, "Close button");
	}

	public void typeAndGetSearchResult(By locator, String keyword, String field) throws Exception {
		String last = keyword.substring(keyword.length() - 1, keyword.length());
		System.out.println(last);
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		findElement(PWASearchPage.objSearchEditBox).sendKeys(Keys.BACK_SPACE.toString());
		findElement(PWASearchPage.objSearchEditBox).sendKeys(last);
		waitTime(4000);
	}

	public boolean waitExplicitlyForElementPresence(By locator, int seconds, String element) {
		try {
			(new WebDriverWait(getDriver(), 60)).until(ExpectedConditions.presenceOfElementLocated(locator));
			logger.info(element + " is present");
			extentLogger("", element + " is present");
			return true;
		} catch (Exception e) {
			logger.info(element + " is not present");
			extentLogger("", element + " is not present");
			return false;
		}
	}

	public boolean waitExplicitlyForElementClickable(By locator, int seconds, String element) {
		try {
			(new WebDriverWait(getDriver(), 60)).until(ExpectedConditions.elementToBeClickable(locator));
			logger.info(element + " is clickable");
			extentLogger("", element + " is claikcable");
			return true;
		} catch (Exception e) {
			logger.info(element + " is not clickable");
			extentLogger("", element + " is not clickable");
			return false;
		}
	}

	///////////////////////// HLS //////////////

	public void OnboardingScenariosHLS(String userType) throws Exception {
		switch (userType) {
		case "Guest":
			silentRegistrationViaEmail();
			click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			logout();
			extent.HeaderChildNode("HLS_004 : Login via User Social Login Credentials");
			facebookLogin();
			logout();
			extent.HeaderChildNode("HLS_008 : Verify user is able to play the content from the carousel");
			playContentFromCarousel("Movies");
			break;
		/*
		 * case "ClubUser": // loginwithuseremail("edpwa4@mailnesia.com","1234567");
		 * extent.
		 * HeaderChildNode("HLS_009 : Verify Club user is able to play the content from the carousel"
		 * ); playContentFromCarousel("Club"); click(PWAHamburgerMenuPage.objZeeLogo1,
		 * "Zee Logo"); extent.
		 * HeaderChildNode("HLS_010 : Verify user is able to play the content from the rails"
		 * ); navigateToAnyScreen("Club");
		 * verifyElementPresentAndClick(PWALandingPages.trayCard, "Card from Tray"); if
		 * (verifyElementPresent(PWAPlayerPage.objPlayerControlScreen,
		 * "Player control containing screen")) { pausePlayer();
		 * logger.info("Verify play icon functionality is Pass");
		 * extent.extentLogger("Play btn validation",
		 * "Verify play icon functionality is Pass"); } else {
		 * logger.error("Verify play icon functionality is Fail");
		 * extent.extentLoggerFail("Play btn validation",
		 * "Verify play icon functionality is Fail"); }
		 * click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo"); break;
		 */
		case "NonSubscribedUser":
			extent.HeaderChildNode("HLS_008 : Verify user is able to play the content from the carousel");
			playContentFromCarousel("Movies");
			click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode("HLS_010 : Verify user is able to play the content from the rails");
			navigateToAnyScreen("Premium");
			verifyElementPresentAndClick(PWALandingPages.trayCard, "Card from Tray");
			if (verifyElementPresent(PWAPlayerPage.objPlayerControlScreen, "Player control containing screen")) {
				pausePlayer();
				logger.info("Verify play icon functionality is Pass");
				extent.extentLogger("Play btn validation", "Verify play icon functionality is Pass");
			} else {
				logger.error("Verify play icon functionality is Fail");
				extent.extentLoggerFail("Play btn validation", "Verify play icon functionality is Fail");
			}
			click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode("HLS_011 : Verify user is able to play the content from the collection page");
			playCardFromCollections(userType, "Premium");
			reloadHome();
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("HLS_008 : Verify user is able to play the content from the carousel");
			playContentFromCarousel("Movies");
			click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode("HLS_010 : Verify user is able to play the content from the rails");
			navigateToAnyScreen("Premium");
			verifyElementPresentAndClick(PWALandingPages.trayCard, "Card from Tray");
			if (verifyElementPresent(PWAPlayerPage.objPlayerControlScreen, "Player control containing screen")) {
				pausePlayer();
				logger.info("Verify play icon functionality is Pass");
				extent.extentLogger("Play btn validation", "Verify play icon functionality is Pass");
			} else {
				logger.error("Verify play icon functionality is Fail");
				extent.extentLoggerFail("Play btn validation", "Verify play icon functionality is Fail");
			}
			click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode("HLS_011 : Verify user is able to play the content from the collection page");
			playCardFromCollections(userType, "Premium");
			reloadHome();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	public void silentRegistrationViaEmail() throws Exception {
		extent.HeaderChildNode("HLS_003 : Silent registration via email");
		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe Button");
		Swipe("UP", 1);
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
		String generatedEmail = RandomStringGenerator(5) + "@g.com";

		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email");
		waitTime(2000);

		type(PWALoginPage.objEmailField, generatedEmail, "Email");
		hideKeyboard();
		waitTime(3000);

		// click(PWASubscriptionPages.objProceedBtnInSubscriptionPage, "Proceed
		// button");

		verifyElementPresent(PWASubscriptionPages.objContinueBtnn, "Continue button");
		waitTime(3000);
		click(PWASubscriptionPages.objContinueBtnn, "Continue button");
		waitTime(3000);
//		verifyIsElementDisplayed(PWASubscriptionPages.objPasswordPopupInSubscriptionPage, "Password field");

		verifyElementPresent(PWASubscriptionPages.objPasswordPopupInSubscriptionPage, "Password field");

		verifyElementPresentAndClick(PWASubscriptionPages.objPasswordField, "Password filed");
		waitTime(2000);

		type(PWASubscriptionPages.objPasswordField, "123456\n", "Password");
		hideKeyboard();
		// click(PWASubscriptionPages.objProceedButtonInPassword, "Proceed");
		waitTime(10000);
		if (verifyIsElementDisplayed(PWASubscriptionPages.objAccountDetailInSubscription, "Account details")) {
			String email = getElementPropertyToString("innerText", PWASubscriptionPages.objAccountDetailInSubscription,
					"Registered Email");
			logger.info("Registered user email is : " + email);
			extent.extentLogger("Verification", "Registered user email is : " + email);
			if (generatedEmail.equals(email)) {
				logger.info("HLS_003 : Silent registration via email has passed");
				extent.extentLoggerPass("Verification", "HLS_003 : Silent registration via email has passed");
			}
		} else {
			logger.error("HLS_003 : Silent registration via email has failed");
			extent.extentLoggerFail("Verification", "HLS_003 : Silent registration via email has failed");
		}
	}

	public void playContentFromCarousel(String screen) throws Exception {
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		if (navigateToAnyScreen(screen)) {
			waitTime(5000);
			for (int i = 0; i < 10; i++) {
				try {
					waitForElementAndClick(PWAHomePage.objPlayBtn, 20, "Play icon");
					break;
				} catch (Exception e) {
					waitTime(1000);
					if (i == 9)
						logger.info("Failed to click");
				}
			}
			waitTime(2000);
			if (verifyElementPresent(PWAPlayerPage.objPlayerControlScreen, "Player control containing screen")) {
				pausePlayer();
				logger.info("Verify play icon functionality is Pass");
				extent.extentLogger("Play btn validation", "Verify play icon functionality is Pass");
			} else {
				logger.error("Verify play icon functionality is Fail");
				extent.extentLoggerFail("Play btn validation", "Verify play icon functionality is Fail");
			}
			Back(1);
		} else {
			logger.error("Failed to validate play icon functionality on tab : " + screen);
			extent.extentLoggerFail("play", "Failed to validate play icon functionality on tab : " + screen);
		}
	}

	public boolean playCardFromCollections(String userType, String tabName) throws Exception {
		navigateToAnyScreen(tabName);
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		waitTime(5000);
		// Hit API get the first tray and click on first item
		boolean clickedviewall = false;
		// String languageSmallText = allSelectedLanguages();
		Response tabResponse = ResponseInstance.getResponseForPages(tabName.toLowerCase(), "en,hi,kn");
		// System.out.println(tabResponse.getBody().asString());
		String trayTitle = "", traynumber = "";
		int tags = 0;
		main: for (int i = 0; i < 10; i++) {
			try {
				tags = tabResponse.jsonPath().get("buckets[" + i + "].tags.size()");
				// System.out.println("tags: "+tags);
			} catch (Exception e) {
			}
			for (int j = 0; j < tags; j++) {
				String tag = tabResponse.jsonPath().get("buckets[" + i + "].tags[" + j + "]");
				// System.out.println("tag: "+tag);
				if (tag.equalsIgnoreCase("title") || tag.equalsIgnoreCase("movies") || tag.equalsIgnoreCase("episodes")
						|| tag.equalsIgnoreCase("portrait_small") || tag.equalsIgnoreCase("news_title")) {
					traynumber = String.valueOf(i);
					break main;
				}
			}
		}
		if (!traynumber.equals("")) {
			// tray name from api
			trayTitle = tabResponse.jsonPath().get("buckets[" + traynumber + "].title");
			logger.info("Tray from API: " + trayTitle);
			extent.extentLogger("", "Tray from API: " + trayTitle);
			verifyElementPresent(PWALandingPages.objTrayTitleInUIContains(trayTitle),
					"Tray title : " + trayTitle + " in UI");
			for (int i = 1; i <= 5; i++) {
				if (verifyIsElementDisplayed(PWALandingPages.objTrayTitleInUIContains(trayTitle), "Tray")) {
					logger.info("Tray is loaded");
					extent.extentLogger("Tray load", "Tray is loaded");
					break;
				} else {
					Swipe("UP", 1);
					waitTime(2000);
				}
			}
			for (int i = 0; i < 5; i++) {
				if (directClickReturnBoolean(PWALandingPages.objTrayTitleInUIContainsViewAll(trayTitle.trim()),
						"View All Button of tray " + trayTitle)) {
					waitTime(5000);
					clickedviewall = true;
					break;
				} else {
					Swipe("UP", 1);
					waitTime(2000);
				}
			}
		}
		if (clickedviewall == true) {
			if (verifyIsElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLoggerPass("View All", "Navigated to View All Page");
				if (tabName.equals("Play")) {
					Back(1);
				} else {
					waitTime(3000);
					// handle mandatory pop up
					mandatoryRegistrationPopUp(userType);
					waitTime(7000);
					if (directClickReturnBoolean(PWALandingPages.objViewAllPageFirstContent, "First asset")) {
						if (verifyIsElementDisplayed(PWAPlayerPage.objContentShowTitle, "Show Details")) {
							String viewallnavigationtittle = getText(PWAPlayerPage.objContentShowTitle);
							logger.info(
									"Navigated to Show Details page from View All Page: " + viewallnavigationtittle);
							extent.extentLogger("View All",
									"Navigated to Show Details page from View All Page: " + viewallnavigationtittle);
						} else if (verifyIsElementDisplayed(PWAMoviesPage.objNowShowingText, "ZEE Plex Page")) {
							String movietittle = getText(PWAMoviesPage.objTVODTitle);
							logger.info("Navigated to ZEE Plex Page displaying movie title : " + movietittle);
							extent.extentLogger("",
									"Navigated to ZEE Plex Page displaying movie title : " + movietittle);
						} else {
							// pausePlayer();
							String viewallnavigationtittle = getText(PWAPlayerPage.objContentTitle);
							logger.info("Navigated to Consumption page from View All Page: " + viewallnavigationtittle);
							extent.extentLogger("View All",
									"Navigated to Consumption page from View All Page: " + viewallnavigationtittle);
							return true;
						}

					} else {
						logger.error("Failed to click on first asset in View All Page");
						extent.extentLoggerFail("View All", "Failed to click on first asset in View All Page");
					}
				}
			} else {
				logger.error("Not navigated to View All Page");
				extent.extentLoggerFail("View All", "Not navigated to View All Page");
			}
		}
		return false;
	}

	public void PWAHomeLandingPageHLS(String userType) throws Exception {
		extent.HeaderChildNode("HLS_012 : Verify the carousels are Auto scrolled in landing pages");
		verifyAutoroatingOnCarousel("Home");
		extent.HeaderChildNode("HLS_013 : Verify Metadata and CTA's are properly displayed in carousels");
		String languageSmallText = allSelectedLanguages();
		verifyMetadataOnCarousel("Home", "home", languageSmallText);
		extent.HeaderChildNode("HLS_014 : Verify the rails are displayed properly in the home screen");
		pagesTrayValidation("Home");
		extent.HeaderChildNode("HLS_015 : Verify On click View All CTA then screen is navigated to a particular page.");
		playCardFromCollections(userType, "Home");
		reloadHome();
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		extent.HeaderChildNode("HLS_016 : Verify the Continue Watching tray");
		if (userType.equals("Guest")) {
			if (verifyIsElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue Watching tray") == false) {
				extent.extentLogger("", "Continue watching tray is not displayed for guest user, expected behavior");
				logger.info("Continue watching tray is not displayed for guest user, expected behavior");
			} else {
				extent.extentLoggerFail("Verify Continue Watching tray",
						"Continue watching tray is displayed for guest user");
				logger.error("Continue watching tray is displayed for guest user");
			}
		} else {
			if (verifyIsElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue Watching tray") == true) {
				extent.extentLogger("", "Continue watching tray is displayed for logged in user");
				logger.info("Continue watching tray is displayed for logged in user");
			} else {
				extent.extentLoggerFail("", "Continue watching tray is not displayed for logged in user");
				logger.error("Continue watching tray is not displayed for logged in user");
			}
		}
		extent.HeaderChildNode("HLS_017 : Verify the Premium/Club tag");
		PWAPremiumOrClubIconVerification("Home");
		extent.HeaderChildNode("HLS_021 : Verify the availability of the Footer section at bottom of the home-page.");
		Swipe("UP", 5);
		if (verifyIsElementDisplayed(PWASearchPage.objSearchPageFooter, "Footer menu")) {
			logger.info("Verified presence of Footer menu in Home Page");
			extent.extentLogger("", "Verified presence of Footer menu in Home Page");
		} else {
			logger.error("Failed to verify presence of Footer menu in Home Page");
			extent.extentLoggerFail("", "Failed to verify presence of Footer menu in Home Page");
		}
		click(PWAHomePage.objBackToTopArrow, "Back to Top arrow");
	}

	public void PWARSVODUserHLS(String usertype) throws Exception {
		if (userType.equals("Guest")) {
			String rsvodusername = "boat@mailnesia.com";
			String rsvodpassword = "123456";
			String rsvodlanguage = "Tamil";
			extent.HeaderChildNode("HLS_077 : Verify whether \"RSVOD pack\" user can play same language club content.");
			System.out.println("HLS_077 : Verify whether \"RSVOD pack\" user can play same language club content.");
			loginWithUserEmail(rsvodusername, rsvodpassword);
			click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			waitTime(2000);
			waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2, "Content Languages");
			waitTime(2000);
			unselectAllContentLanguages();
			clickElementWithLocator(PWAHamburgerMenuPage.objUnselectedContentLanguage(rsvodlanguage));
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(3000);
			navigateToAnyScreen("Club");
			// handle mandatory pop up
			mandatoryRegistrationPopUp(userType);
			for (int i = 0; i < 10; i++) {
				try {
					waitForElementAndClick(PWAHomePage.objPlayBtn, 20, "Play icon");
					break;
				} catch (Exception e) {
					waitTime(1000);
					if (i == 9)
						logger.info("Failed to click on Play icon in carousel");
				}
			}
			waitTime(5000);
			if (verifyIsElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
					"'You're watching a trailer' message on the player")) {
				logger.error("RSVOD user of " + rsvodlanguage + " language is unable to play Club " + rsvodlanguage
						+ " contents");
				extent.extentLoggerFail("", "RSVOD user of " + rsvodlanguage + " language is unable to play Club "
						+ rsvodlanguage + " contents");
			} else {
				pausePlayer();
				logger.info("RSVOD user of " + rsvodlanguage + " language is able to play Club " + rsvodlanguage
						+ " contents");
				extent.extentLoggerPass("", "RSVOD user of " + rsvodlanguage + " language is able to play Club "
						+ rsvodlanguage + " contents");
			}

			extent.HeaderChildNode(
					"HLS_092 : Verify whether \"RSVOD pack\" user can play same language  Premium content.");
			System.out.println("HLS_092 : Verify whether \"RSVOD pack\" user can play same language  Premium content.");
			reloadHome();
			navigateToAnyScreen("Premium");
			// handle mandatory pop up
			mandatoryRegistrationPopUp(userType);
			for (int i = 0; i < 10; i++) {
				try {
					waitForElementAndClick(PWAHomePage.objPlayBtn, 20, "Play icon");
					break;
				} catch (Exception e) {
					waitTime(1000);
					if (i == 9)
						logger.info("Failed to click on Play icon in carousel");
				}
			}
			waitTime(5000);
			if (verifyIsElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
					"'You're watching a trailer' message on the player")) {
				logger.error("RSVOD user of " + rsvodlanguage + " language is unable to play Premium " + rsvodlanguage
						+ " contents");
				extent.extentLoggerFail("", "RSVOD user of " + rsvodlanguage + " language is unable to play Premium "
						+ rsvodlanguage + " contents");
			} else {
				pausePlayer();
				logger.info("RSVOD user of " + rsvodlanguage + " language is able to play Premium " + rsvodlanguage
						+ " contents");
				extent.extentLoggerPass("", "RSVOD user of " + rsvodlanguage + " language is able to play Premium "
						+ rsvodlanguage + " contents");
			}
			extent.HeaderChildNode(
					"HLS_078 : Verify whether \"RSVOD pack\" user can play different language club content.");
			System.out
					.println("HLS_078 : Verify whether \"RSVOD pack\" user can play different language club content.");
			reloadHome();
			selectLanguages();
			// handle mandatory pop up
			mandatoryRegistrationPopUp(userType);
			String keyword = "Soojidaara";// Kannada Club movie
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWAHomePage.objSearchField, keyword + "\n", "Search");
			click(PWASearchPage.objSearchMoviesTab, "Movies tab");
			click(PWASearchPage.objSearchedResult(keyword), "Search Result");
			if (waitExplicitlyForElementPresence(PWAPlayerPage.objWatchingATrailerMessage, 60,
					"'You're watching a trailer' message on the player")) {
				logger.info("RSVOD user of " + rsvodlanguage
						+ " language is unable to play Club contents of other languages, expected behavior");
				extent.extentLoggerPass("", "RSVOD user of " + rsvodlanguage
						+ " language is unable to play Club contents of other languages, expected behavior");
			} else {
				logger.error("RSVOD user of " + rsvodlanguage
						+ " language is able to play Club contents of other languages");
				extent.extentLoggerFail("",
						"RSVOD user of " + rsvodlanguage + " language is able to playClub contents of other languages");
			}
			extent.HeaderChildNode(
					"HLS_093 : Verify whether \"RSVOD pack\" user can play different language Premium content.");
			System.out.println(
					"HLS_093 : Verify whether \"RSVOD pack\" user can play different language Premium content.");
			reloadHome();
			// handle mandatory pop up
			mandatoryRegistrationPopUp(userType);
			keyword = "Shivaji Surathkal";// Kannada Premium movie
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWAHomePage.objSearchField, keyword + "\n", "Search");
			click(PWASearchPage.objSearchMoviesTab, "Movies tab");
			click(PWASearchPage.objSearchedResult(keyword), "Search Result");
			waitTime(5000);
			if (waitExplicitlyForElementPresence(PWAPlayerPage.objWatchingATrailerMessage, 60,
					"'You're watching a trailer' message on the player")) {
				logger.info("RSVOD user of " + rsvodlanguage
						+ " language is unable to play Premium contents of other languages, expected behavior");
				extent.extentLoggerPass("", "RSVOD user of " + rsvodlanguage
						+ " language is unable to play Premium contents of other languages, expected behavior");
			} else {
				logger.error("RSVOD user of " + rsvodlanguage
						+ " language is able to play Premium contents of other languages");
				extent.extentLoggerFail("", "RSVOD user of " + rsvodlanguage
						+ " language is able to play Premium contents of other languages");
			}
			reloadHome();
			logout();
		}
	}

	public void PWATVShowsPageHLS(String usertype, String Tabname) throws Exception {
		extent.HeaderChildNode("HLS_041 : Verify user navigation to Show landing page");
		System.out.println("HLS_041 : Verify user navigation to Show landing page");
		PWAPagesNavigationAndTabHighlight(Tabname);
		extent.HeaderChildNode("HLS_042 : Verify the Auto rotation of carousel");
		System.out.println("HLS_042 : Verify the Auto rotation of carousel");
		verifyAutoroatingOnCarousel(Tabname);
		extent.HeaderChildNode("HLS_043 : Verify the rails name and content are loaded for first 2 scroll");
		System.out.println("HLS_043 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(Tabname);
		extent.HeaderChildNode("HLS_044 : Check for View all from different rails navigates to accurate screen");
		System.out.println("HLS_044 : Check for View all from different rails navigates to accurate screen");
		playCardFromCollections(userType, Tabname);
		reloadHome();
		extent.HeaderChildNode(
				"HLS_045 : Verify the Premium/ Club tag is given on top left for all premium / Club content card");
		System.out.println(
				"HLS_045 : Verify the Premium/ Club tag is given on top left for all premium / Club content card");
		PWAPremiumOrClubIconVerification(Tabname);
		extent.HeaderChildNode(
				"HLS_047 : Verify user can Navigate to the TV show Details Screen post click on any Show Thumbnail Card");
		System.out.println(
				"HLS_047 : Verify user can Navigate to the TV show Details Screen post click on any Show Thumbnail Card");
		swipeTillTrayAndClickShow("Trending Shows");
		extent.HeaderChildNode("HLS_048 : Verify UI/UX of  the TV show Details  Screen");
		System.out.println("HLS_048 : Verify UI/UX of  the TV show Details  Screen");
		verifyShowsDetailsMetaData();
		verifyElementPresent(PWALiveTVPage.objShareOption, "Share option");
		verifyElementPresent(PWAShowsPage.objWatchPromo, "Watch Promo option");
		verifyElementPresent(PWAShowsPage.objWatchLatestCTA, "Watch Latest Episode button");
		Back(1);
		extent.HeaderChildNode("HLS_049 : Verify user can play Free content from the show page");
		System.out.println("HLS_049 : Verify user can play Free content from the show page");
		selectLanguages();
		navigatetoAnyScreen("TV Shows");
		swipeTillTrayAndClickContentCard("Latest Hindi Episodes");
		extent.HeaderChildNode("HLS_050 : Verify user can play Premium content from the show page");
		System.out.println("HLS_050 : Verify user can play Premium content from the show page");
		reloadHome();
		navigatetoAnyScreen("TV Shows");
		swipeTillTrayAndClickContentCard("Premiere Episodes");
		reloadHome();
		navigatetoAnyScreen("TV Shows");
		extent.HeaderChildNode(
				"HLS_052 : Verify at right side bottom arrow is given to navigate top of screen without scrolling");
		verificationOfBackToTop(Tabname);
		extent.HeaderChildNode("HLS_053 : Verify the Before TV are available");
		System.out.println("HLS_53 : Verify the Before TV are available");
		verifyTrayPresence("Premiere Episodes | Before Zee TV");
		Swipe("DOWN", 2);
		extent.HeaderChildNode("HLS_054 : Verify the  Before TV content playback as a Guest/Non-Subscribed user");
		System.out.println("HLS_054 : Verify the  Before TV content playback as a Guest/Non-Subscribed user");
		swipeTillTrayAndClickContentCard("Premiere Episodes | Before Zee TV");
	}

	public void PWANewsPageHLS(String usertype, String Tabname) throws Exception {
		extent.HeaderChildNode("HLS_055 : Verify  user navigation to News landing page");
		System.out.println("HLS_055 : Verify  user navigation to News landing page");
		PWAPagesNavigationAndTabHighlight(Tabname);
		extent.HeaderChildNode("HLS_056 : Verify the Auto rotation of carousel");
		System.out.println("HLS_056 : Verify the Auto rotation of carousel");
		verifyAutoroatingOnCarousel(Tabname);
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		extent.HeaderChildNode("HLS_058 : Verify the content which have Autoplay tag in news Carousel should Autoplay");
		System.out.println("HLS_058 : Verify the content which have Autoplay tag in news Carousel should Autoplay");
		boolean autoPlayed = verifyAutoPlay(Tabname);
		extent.HeaderChildNode("HLS_059 : Verify the player control Autoplay carousel content");
		System.out.println("HLS_059 : Verify the player control Autoplay carousel content");
		if (autoPlayed == true) {
			verifyElementPresent(PWANewsPage.objLive, "LIVE badge on Autoplaying carousel");
			verifyElementPresent(PWANewsPage.objVolume, "Volume Control on Autoplaying carousel");
			if (verifyElementDisplayed(PWAPlayerPage.pauseBtn)) {
				logger.error("Pause button on Autoplaying carousel should not be displayed");
				extent.extentLoggerFail("Autoplay", "Pause button on Autoplaying carousel should not be displayed");
			} else {
				logger.info("Pause button on Autoplaying carousel is not be displayed, expected behavior");
				extent.extentLogger("Autoplay",
						"Pause button on Autoplaying carousel is not displayed, expected behavior");
			}
			if (verifyElementDisplayed(PWAPlayerPage.playBtn)) {
				logger.error("Play button on Autoplaying carousel should not be displayed");
				extent.extentLoggerFail("Autoplay", "Play button on Autoplaying carousel should not be displayed");
			} else {
				logger.info("Play button on Autoplaying carousel is not be displayed, expected behavior");
				extent.extentLogger("Autoplay",
						"Play button on Autoplaying carousel is not displayed, expected behavior");
			}
			if (verifyElementDisplayed(PWAPlayerPage.forward10SecBtn)) {
				logger.error("Forward button on Autoplaying carousel should not be displayed");
				extent.extentLoggerFail("Autoplay", "Forward button on Autoplaying carousel should not be displayed");
			} else {
				logger.info("Forward button on Autoplaying carousel is not be displayed, expected behavior");
				extent.extentLogger("Autoplay",
						"Forward button on Autoplaying carousel is not displayed, expected behavior");
			}
			if (verifyElementDisplayed(PWAPlayerPage.rewind10SecBtn)) {
				logger.error("Rewind button on Autoplaying carousel should not be displayed");
				extent.extentLoggerFail("Autoplay", "Rewind button on Autoplaying carousel should not be displayed");
			} else {
				logger.info("Rewind button on Autoplaying carousel is not be displayed, expected behavior");
				extent.extentLogger("Autoplay",
						"Rewind button on Autoplaying carousel is not displayed, expected behavior");
			}
			if (verifyIsElementDisplayed(PWAPlayerPage.minimizeBtn)) {
				logger.error("Autoplaying carousel should not be in full screen mode");
				extent.extentLoggerFail("Autoplay", "Autoplaying carousel should not be in full screen mode");
			} else {
				logger.info("Autoplaying carousel is not in full screen mode, expected behavior");
				extent.extentLogger("Autoplay", "Autoplaying carousel is not in full screen mode, expected behavior");
			}
		} else {
			logger.info("Carousel card did not autoplay");
			extent.extentLogger("Autoplay", "Carousel card did not autoplay");
			logger.info("Player controls on Autoplaying carousel content could not be verified");
			extent.extentLoggerWarning("Autoplay",
					"Player controls on Autoplaying carousel content could not be verified");
		}
		extent.HeaderChildNode("HLS_057 : Verify the trays displayed in the \"News\" page.");
		System.out.println("HLS_057 : Verify the trays displayed in the \"News\" page.");
		pagesTrayValidation(Tabname);
		extent.HeaderChildNode(
				"HLS_060 : Verify the \" View All\" option given on tray right side top and functionality of View all");
		System.out.println(
				"HLS_060 : Verify the \" View All\" option given on tray right side top and functionality of View all");
		playCardFromCollections(userType, Tabname);
		reloadHome();
		navigatetoAnyScreen(Tabname);
		extent.HeaderChildNode(
				"HLS_063 : Verify the right side bottom arrow is given to navigate top of screen without scrolling");
		System.out.println(
				"HLS_063 : Verify the right side bottom arrow is given to navigate top of screen without scrolling");
		verificationOfBackToTop(Tabname);
		extent.HeaderChildNode(
				"HLS_064 : Verify whether user is navigate to Playback page when user tap on any Live News content");
		System.out.println(
				"HLS_064 : Verify whether user is navigate to Playback page when user tap on any Live News content");
		swipeTillTrayAndClickContentCard("Live News");
		navigatetoAnyScreen(Tabname);
		extent.HeaderChildNode(
				"HLS_065 : Verify whether user is navigate to Playback page when user tap on any News VOD content");
		System.out.println(
				"HLS_065 : Verify whether user is navigate to Playback page when user tap on any News VOD content");
		swipeTillTrayAndClickContentCard("Trending News");
	}

	public void PWAClubPageHLS(String usertype, String Tabname) throws Exception {
		extent.HeaderChildNode("HLS_066 : Verify whether user is able to navigate Club Landing Page. ");
		System.out.println("HLS_066 : Verify whether user is able to navigate Club Landing Page. ");
		PWAPagesNavigationAndTabHighlight(Tabname);
		extent.HeaderChildNode(
				"HLS_081 : Verify at right side bottom \"Arrow\" is given to navigate top of screen without scrolling");
		System.out.println(
				"HLS_081 : Verify at right side bottom \"Arrow\" is given to navigate top of screen without scrolling");
		verificationOfBackToTop(Tabname);
		extent.HeaderChildNode("HLS_067 : Verify the Auto rotation of the Carousels.");
		System.out.println("HLS_067 : Verify the Auto rotation of the Carousels.");
		verifyAutoroatingOnCarousel(Tabname);
		extent.HeaderChildNode("HLS_068 : Verify the rails name and content are loaded for first 2 scroll");
		System.out.println("HLS_068 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(Tabname);
		extent.HeaderChildNode("HLS_069 : Verify View All option and functionality");
		System.out.println("HLS_069 : Verify View All option and functionality");
		playCardFromCollections(userType, Tabname);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		extent.HeaderChildNode("HLS_071 : Verify the Club tag is given on top left for all Club content card");
		System.out.println("HLS_071 : Verify the Club tag is given on top left for all Club content card");
		PWAPremiumOrClubIconVerification(Tabname);
		extent.HeaderChildNode("HLS_072 : Verify whether user can play any free club content");
		System.out.println("HLS_072 : Verify whether user can play any free club content");
		// handle mandatory pop up
		mandatoryRegistrationPopUp(usertype);
		boolean cardClicked = false;
		for (int i = 0; i < 10; i++) {
			if (directClickReturnBoolean(PWAMoviesPage.objFreeContentCardFromTray, "Free Content from Tray")) {
				cardClicked = true;
				break;
			} else
				Swipe("UP", 2);
		}
		if (cardClicked == true) {
			// waitTime(10000);
			// directClickReturnBoolean(PWASubscriptionPages.objPopupCloseButton, "Subscribe
			// Pop Up Close button");
			// waitForPlayerAdToComplete("Video Player");
			// pausePlayer();
			String freeMovieTitle = "";
			try {
				freeMovieTitle = getElementPropertyToString("innerText", PWAMusicPage.objConsumptionPageTitle,
						"Free Movie Title in Consumptions Page").toString();
				logger.info("Free Movie Title in Consumptions Page: " + freeMovieTitle);
				extent.extentLogger("", "Free Movie Title in Consumptions Page: " + freeMovieTitle);
			} catch (Exception e) {
				logger.error("Failed to fetch Free Movie Title in Consumptions Page");
				extent.extentLoggerFail("", "Failed to fetch Free Movie Title in Consumptions Page");
			}
		} else {
			logger.info("No Free Content Card displayed");
			extent.extentLoggerWarning("", "No Free Content Card displayed");
			click(PWAZee5OriginalPage.objNavigateToTop, "Back to Top Arrow");
		}
		extent.HeaderChildNode("HLS_073 : Verify whether user can play any club movie content.");
		System.out.println("HLS_073 : Verify whether user can play any club movie content.");
		reloadHome();
		navigatetoAnyScreen(Tabname);
		swipeTillTrayAndClickContentCard("Club Movies");
		navigatetoAnyScreen(Tabname);
		extent.HeaderChildNode("HLS_074 : Verify whether user can play any before tv content.");
		System.out.println("HLS_074 : Verify whether user can play any before tv content.");
		swipeTillTrayAndClickContentCard("Premiere Episodes | Before Zee TV");
		navigatetoAnyScreen(Tabname);
		boolean verifyClub = false;
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("HLS_075 : Verify whether \"Premium pack\" user can play any club content.");
			System.out.println("HLS_075 : Verify whether \"Premium pack\" user can play any club content.");
			verifyClub = true;
		}
		if (userType.equals("ClubUser")) {
			extent.HeaderChildNode("HLS_076 : Verify whether \"Club pack\" user can play any club content.");
			System.out.println("HLS_076 : Verify whether \"Club pack\" user can play any club content.");
			verifyClub = true;
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("HLS_082 : Verify Subscribe CTA with Club Icon is displayed below the player");
			System.out.println("HLS_082 : Verify Subscribe CTA with Club Icon is displayed below the player");
			verifyClub = true;
		}
		if (verifyClub == true) {
			waitTime(4000);// added time to wait for first tray to load
			click(PWAHomePage.objClubContentCardFromTray, "Club Content from Tray");
			waitTime(8000);
			String clubTitle = "";
			if (verifyIsElementDisplayed(PWAShowsPage.objShowsTitle, "Shows Details page"))
				clubTitle = getText(PWAShowsPage.objShowsTitle);
			else {
				try {
					clubTitle = getElementPropertyToString("innerText", PWAMusicPage.objConsumptionPageTitle,
							"Club Title in Consumptions Page").toString();
					logger.info("Club Title in Consumptions Page: " + clubTitle);
					extent.extentLogger("", "Club Title in Consumptions Page: " + clubTitle);
				} catch (Exception e) {
					logger.error("Failed to fetch Club Title in Consumptions Page");
					extent.extentLoggerFail("", "Failed to fetch Club Title in Consumptions Page");
				}
				if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
					verifyElementPresent(PWAPlayerPage.objSubscribeCTAWithClubIcon, "Subscribe CTA with Club Icon");
				}
			}
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				extent.HeaderChildNode(
						"HLS_079 : Validate the subscription popup availability at the end of the play back");
				System.out.println(
						"HLS_079 : Validate the subscription popup availability at the end of the play back	");
				click(PWAPlayerPage.objPlayerPlay, "Play button");
				if (waitForElementPresence(PWASubscriptionPages.objSubscribePopupTitle, 5, "Subscribe Pop Up")) {
					click(PWASubscriptionPages.objPopupCloseButton, "Close in Subscribe Pop Up");
				} else {
					logger.error("Failed to locate Subscribe Pop Up");
					extent.extentLoggerFail("", "Failed to locate Subscribe Pop Up");
				}
			}
		}
	}

	public void PWAPremiumPageHLS(String usertype, String Tabname) throws Exception {
		extent.HeaderChildNode("HLS_083 : Verify whether user is able to navigate Premium landing page");
		System.out.println("HLS_083 : Verify whether user is able to navigate Premium landing page");
		PWAPagesNavigationAndTabHighlight(Tabname);
		extent.HeaderChildNode("HLS_088 : Verify the Premium tag");
		System.out.println("HLS_088 : Verify the Premium tag");
		PWAPremiumOrClubIconVerification(Tabname);
		extent.HeaderChildNode(
				"HLS_096 : Verify at right side bottom \"Arrow\" is given to navigate top of screen without scrolling");
		System.out.println(
				"HLS_096 : Verify at right side bottom \"Arrow\" is given to navigate top of screen without scrolling");
		verificationOfBackToTop(Tabname);
		extent.HeaderChildNode("HLS_084 : Verify the Auto rotation of carousel");
		System.out.println("HLS_084 : Verify the Auto rotation of carousel");
		verifyAutoroatingOnCarousel(Tabname);
		extent.HeaderChildNode("HLS_085 : Verify the rails name and content are loaded for first 2 scroll");
		System.out.println("HLS_085 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(Tabname);
		extent.HeaderChildNode("HLS_086 : Verify View All option and functionality");
		System.out.println("HLS_086 : Verify View All option and functionality");
		playCardFromCollections(userType, Tabname);
		reloadHome();
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		boolean checkPremiumPlay = false;
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_089 : Verify whether guest/non-sub user able to play any  Premium content from the Premium Landing Page");
			System.out.println(
					"HLS_089 : Verify whether guest/non-sub user able to play any  Premium content from the Premium Landing Page");
			checkPremiumPlay = true;
		}
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("HLS_090 : Verify whether \"Premium pack\" user can play any Premium content.");
			System.out.println("HLS_089 : Verify whether \"Premium pack\" user can play any Premium content.");
			checkPremiumPlay = true;
		}
		if (userType.equals("ClubUser")) {
			extent.HeaderChildNode("HLS_091 : Verify whether \"Club pack\" user can play any Premium content.");
			System.out.println("HLS_091 : Verify whether \"Club pack\" user can play any Premium content.");
			checkPremiumPlay = true;
		}
		if (checkPremiumPlay == true) {
			// handle mandatory pop up
			mandatoryRegistrationPopUp(userType);
			String keyword = "Burma";
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWAHomePage.objSearchField, keyword + "\n", "Search");
			verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
			// pausePlayer();
			if (userType.equals("Guest") || userType.equals("ClubUser")) {
				verifyIsElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
						"'You're watching a trailer' message on the player");
			}
			String premiumMovieTitle = "";
			try {
				premiumMovieTitle = getElementPropertyToString("innerText", PWAMusicPage.objConsumptionPageTitle1,
						"Premium Movie Title in Consumptions Page").toString();
				logger.info("Premium Movie Title in Consumptions Page: " + premiumMovieTitle);
				extent.extentLoggerPass("", "Premium Movie Title in Consumptions Page: " + premiumMovieTitle);
			} catch (Exception e) {
				logger.error("Failed to fetch Premium Movie Title in Consumptions Page");
				extent.extentLoggerFail("", "Failed to fetch Premium Movie Title in Consumptions Page");
			}
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				extent.HeaderChildNode(
						"HLS_097 : Verify Subscribe CTA with Premium Icon is displayed below the player");
				System.out.println("HLS_097 : Verify Subscribe CTA with Premium Icon is displayed below the player");
				verifyElementPresent(PWAPlayerPage.objSubscribeCTAWithPremiumIcon, "Subscribe CTA with Premium Icon");
			}
			if (userType.equals("ClubUser")) {
				click(PWAPlayerPage.objPlayerPlay, "Play button");
				if (waitForElementPresence(PWASearchPage.objUpgradePopup, 5, "Pop Up")) {
					extent.extentLoggerPass("", "Club Upgrade Pop Up for Club User");
					click(PWASubscriptionPages.objPopupCloseButton, "Club Upgrade Pop Up Close button");
				} else {
					logger.error("Failed to locate Club Upgrade Pop Up");
					extent.extentLoggerFail("", "Failed to locate Club Upgrade Pop Up");
				}
			}
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				extent.HeaderChildNode(
						"HLS_094 : Validate the subscription popup availability at the end of the play back");
				System.out
						.println("HLS_094 : Validate the subscription popup availability at the end of the play back");
				click(PWAPlayerPage.objPlayerPlay, "Play button");

				// if (waitForElementPresence(PWASubscriptionPages.objSubscribePopupTitle, 5,
				// "Pop Up"))

				if (waitForElement(PWAPlayerPage.objGetPremiumInline, 5, "Get Premium IN Line")) {

					extent.extentLoggerPass("", "Subscription In-Line for Guest/Non-Subscribed user is displayed");

					// click(PWASubscriptionPages.objPopupCloseButton, "Close in Subscribe Pop Up");

					click(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line");

					verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Unlock ZEE5Subscription page");

					waitTime(2000);

				} else {
					logger.error("Failed to locate Subscribe Pop Up");
					extent.extentLoggerFail("", "Failed to locate Subscribe Pop Up");
				}
			}
			reloadHome();
		}
	}

	@SuppressWarnings("rawtypes")
	public void PWAPlayPageHLS(String usertype, String Tabname) throws Exception {
		extent.HeaderChildNode("HLS_098 : Verify whether user is able to navigate Play Landing Page ");
		System.out.println("HLS_098 : Verify whether user is able to navigate Play Landing Page ");
		PWAPagesNavigationAndTabHighlight(Tabname);
		extent.HeaderChildNode("HLS_099 : Verify Feature carousel banners should rotate at fixed interval of time");
		System.out.println("HLS_099 : Verify Feature carousel banners should rotate at fixed interval of time");
		verifyAutoroatingOnCarousel(Tabname);
		extent.HeaderChildNode("HLS_100 : Verify the rails name and content are loaded for first 2 scroll");
		System.out.println("HLS_100 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(Tabname);
		extent.HeaderChildNode(
				"HLS_104 : Verify at right side bottom \"Arrow\" is given to navigate top of screen without scrolling");
		System.out.println(
				"HLS_104 : Verify at right side bottom \"Arrow\" is given to navigate top of screen without scrolling");
		verificationOfBackToTop(Tabname);
		extent.HeaderChildNode("HLS_101 : Verify View All option and functionality");
		System.out.println("HLS_101 : Verify View All option and functionality");
		playCardFromCollections(userType, Tabname);
		reloadHome();
		extent.HeaderChildNode("HLS_103 : Verify the Joystick icon is given on top left for all Play content card");
		System.out.println("HLS_103 : Verify the Joystick icon is given on top left for all Play content card");
		PWAPremiumOrClubIconVerification(Tabname);
		extent.HeaderChildNode(
				"HLS_105 : Verify user is navigate to respective games screen in new tab on click of feature carousel banner content.");
		System.out.println(
				"HLS_105 : Verify user is navigate to respective games screen in new tab on click of feature carousel banner content.");
		String currentHandle = getDriver().getWindowHandle();
		click(PWAPlayPage.objPlayNowButton, "Play Now button of Carousel");
		Set<String> handles = getDriver().getWindowHandles();
		Iterator it = handles.iterator();
		for (int i = 0; i < handles.size(); i++) {
			String handle = it.next().toString();
			if (!handle.equals(currentHandle)) {
				getDriver().switchTo().window(handle);
				break;
			}
		}
		String currentUrl = getDriver().getCurrentUrl();
		logger.info("Current URL: " + currentUrl);
		extent.extentLogger("", "Current URL: " + currentUrl);
		if (currentUrl.contains("games")) {
			logger.info("Navigated to Games screen");
			extent.extentLogger("", "Navigated to Games screen");
		} else {
			logger.info("Failed to navigate to Games screen");
			extent.extentLogger("", "Failed to navigate to Games screen");
		}
		closeAllHandlesExceptCurrentHandle(currentHandle);
		getDriver().switchTo().window(currentHandle);
		extent.HeaderChildNode(
				"HLS_106 : Verify the joystick icon is displayed on top left corner of the content card");
		System.out.println("HLS_106 : Verify the joystick icon is displayed on top left corner of the content card");
		PWAPremiumOrClubIconVerification(Tabname);
		extent.HeaderChildNode("HLS_107 : Verify the Game content should be available in the Search result");
		System.out.println("HLS_107 : Verify the Game content should be available in the Search result");
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		String keyword = "BoBoiBoy Galaxy Run";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWAHomePage.objSearchField, keyword + "\n", "Search");
		verifyElementPresent(PWASearchPage.objSearchedResult(keyword), "Search Result");
		extent.HeaderChildNode(
				"HLS_108 : Verify whether user is able to navigate to Game content from the Search result");
		System.out.println("HLS_108 : Verify whether user is able to navigate to Game content from the Search result");
		click(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(3000);
		currentUrl = "";
		handles = getDriver().getWindowHandles();
		it = handles.iterator();
		for (int i = 0; i < handles.size(); i++) {
			String handle = it.next().toString();
			if (!handle.equals(currentHandle)) {
				getDriver().switchTo().window(handle);
				break;
			}
		}
		currentUrl = getDriver().getCurrentUrl();
		logger.info("Current URL: " + currentUrl);
		extent.extentLogger("", "Current URL: " + currentUrl);
		if (currentUrl.contains("cdn.ludigames")) {
			logger.info("Navigated to Games screen");
			extent.extentLogger("", "Navigated to Games screen");
		} else {
			logger.info("Failed to navigate to Games screen");
			extent.extentLogger("", "Failed to navigate to Games screen");
		}
		closeAllHandlesExceptCurrentHandle(currentHandle);
		getDriver().switchTo().window(currentHandle);
	}

	@SuppressWarnings("rawtypes")
	public void closeAllHandlesExceptCurrentHandle(String currentHandle) throws Exception {
		Set<String> handles = getDriver().getWindowHandles();
		System.out.println("All handles: " + handles);
		Iterator it = handles.iterator();
		for (int i = 0; i < handles.size(); i++) {
			String handle = it.next().toString();
			if (!handle.equals(currentHandle)) {
				getDriver().switchTo().window(handle).close();
				System.out.println("Closed handle: " + handle);
			}
		}
	}

	public void PWAKidsPageHLS(String usertype, String Tabname) throws Exception {
		extent.HeaderChildNode("HLS_109 : Verify whether user is able to navigate Kids landing page");
		System.out.println("HLS_109 : Verify whether user is able to navigate Kids landing page");
		PWAPagesNavigationAndTabHighlight(Tabname);
		extent.HeaderChildNode("HLS_110 : Verify Feature carousel banners should rotate at fixed interval of time");
		System.out.println("HLS_110 : Verify Feature carousel banners should rotate at fixed interval of time");
		verifyAutoroatingOnCarousel(Tabname);
		extent.HeaderChildNode("HLS_111 : Verify the trays displayed in the \"Kids\" page");
		System.out.println("HLS_111 : Verify the trays displayed in the \"Kids\" page");
		pagesTrayValidation(Tabname);
		extent.HeaderChildNode("HLS_112 : Verify whether \"Play text\" CTA is displaying on Kids feature carousel");
		System.out.println("HLS_112 : Verify whether \"Play text\" CTA is displaying on Kids feature carousel");
//		verifyElementPresent(PWAKidsPage.objPlayButton, "Play text on Carousel card");
		verifyElementPresent(PWAKidsPage.objWatchButton, "Watch text on Carousel card");
		extent.HeaderChildNode("HLS_115 : Verify whether user can play any Kids content from the Kids Landing Page");
		System.out.println("HLS_115 : Verify whether user can play any Kids content from the Kids Landing Page");
		swipeTillTrayAndClickContentCard("Top 10 Movies For Your Kids");
		reloadHome();
		extent.HeaderChildNode(
				"HLS_122 : Verify at right side bottom \"Arrow\" is given to navigate top of screen without scrolling");
		System.out.println(
				"HLS_122 : Verify at right side bottom \"Arrow\" is given to navigate top of screen without scrolling");
		navigateToAnyScreen(Tabname);
		verificationOfBackToTop(Tabname);
		extent.HeaderChildNode(
				"HLS_113 : Verify the \" View All\" option given on tray right side top and functionality of View all");
		System.out.println(
				"HLS_113 : Verify the \" View All\" option given on tray right side top and functionality of View all");
		playCardFromCollections(userType, Tabname);
		reloadHome();
		extent.HeaderChildNode("HLS_116 : Verify the EDR contents available in the Kids Page");
		System.out.println("HLS_116 : Verify the EDR contents available in the Kids Page");
		navigateToAnyScreen(Tabname);
		verifyElementPresent(PWAHomePage.objEduauraaCardCarousel, "Eduauraa Card in Carousel");
		extent.HeaderChildNode(
				"HLS_117 : Verify user is navigated to Consumption page if user taps on any EDR content");
		System.out.println("HLS_117 : Verify user is navigated to Consumption page if user taps on any EDR content");
		String currentHandle = getDriver().getWindowHandle();
		click(PWAHomePage.objEduauraaCardCarousel, "Eduauraa Card in Carousel");
		String currenturl = getDriver().getCurrentUrl();
		logger.info("Current URL :" + currenturl);
		extent.extentLogger("Tab", "Current URL :" + currenturl);
		if (currenturl.contains("collections/eduauraa")) {
			logger.info("Navigated to Collections page");
			extent.extentLogger("url", "Navigated to Collections page");
		} else {
			logger.error("Failed to navigate to Collections page");
			extent.extentLoggerFail("url", "Failed to navigate to Collections page");
		}
		closeAllHandlesExceptCurrentHandle(currentHandle);
		getDriver().switchTo().window(currentHandle);
		verifyElementPresent(PWAHomePage.objLearnWithEduauraaTray, "Learn with Eduauraa tray");
		verifyElementPresentAndClick(PWAHomePage.objFirstItemLearnWithEduauraaTray,
				"First card under Learn with Eduauraa tray");
		verifyElementPresentAndClick(PWALandingPages.objViewAllPageFirstContent, "First card in View All page");
		String consumptionPageTitle = getText(PWAPlayerPage.objContentTitle);
		extent.extentLogger("", "Navigated to the Consumption page: " + consumptionPageTitle);
		logger.info("Navigated to the Consumption page: " + consumptionPageTitle);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_118 : Verify on tapping on Claim offer CTA user should navigates to Select pack page");
			System.out.println(
					"HLS_118 : Verify on tapping on Claim offer CTA user should navigates to Select pack page");
			verifyElementPresentAndClick(PWAHomePage.objClaimOffer, "Claim Offer CTA");
			verifyElementPresent(PWAHomePage.objSubscriptionPage, "Subscription page");
		} else if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_120 : Verify on Tapping on \"Go TO Eduauraa\" and \"Continue\" user should navigate to Eduauraa Sign Up page");
			System.out.println(
					"HLS_120 : Verify on Tapping on \"Go TO Eduauraa\" and \"Continue\" user should navigate to Eduauraa Sign Up page");
			verifyElementPresentAndClick(PWAKidsPage.objGoToEduauraa, "Go to Eduauraa button");
			click(PWAKidsPage.objExitZee5Continue, "Continue button");
			String eduauraaLink = getDriver().getCurrentUrl();
			logger.info("Navigated to " + eduauraaLink);
			extent.extentLogger("", "Navigated to " + eduauraaLink);
			// https://lms.eduauraa.com/#/zee5/signup
			if (eduauraaLink.contains("lms.eduauraa.com") && eduauraaLink.contains("signup")) {
				logger.info("Navigated to Eduauraa Sign Up Page");
				extent.extentLogger("", "Navigated to Eduauraa Sign Up Page");
			} else {
				logger.error("Failed to navigate to Eduauraa Sign Up Page");
				extent.extentLoggerFail("", "Failed to navigate to Eduauraa Sign Up Page");
			}
		}
	}

	public void PWAMusicPageHLS(String usertype, String Tabname) throws Exception {
		extent.HeaderChildNode("HLS_123 : Verify whether user is able to navigate Music landing page");
		System.out.println("HLS_123 : Verify whether user is able to navigate Music landing page");
		PWAPagesNavigationAndTabHighlight(Tabname);
		extent.HeaderChildNode("HLS_124 : Verify the rails name and content are loaded for first 2 scroll");
		System.out.println("HLS_124 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(Tabname);
		extent.HeaderChildNode(
				"HLS_128 : Verify at right side bottom arrow is given to navigate top of screen without scrolling");
		System.out.println(
				"HLS_128 : Verify at right side bottom arrow is given to navigate top of screen without scrolling");
		verificationOfBackToTop(Tabname);
		extent.HeaderChildNode(
				"HLS_125 : Verify the \" View All\" option given on tray right side top and functionality of View all, HLS_129 : Verify whether user is navigate to consumption page when user tap on any music content in Listed collection");
		System.out.println(
				"HLS_125 : Verify the \" View All\" option given on tray right side top and functionality of View all, HLS_129 : Verify whether user is navigate to consumption page when user tap on any music content in Listed collection");
		playCardFromCollections(userType, Tabname);
		extent.HeaderChildNode("HLS_130 : Verify that Recommended Videos are displayed right side of the player");
		System.out.println("HLS_130 : Verify that Recommended Videos are displayed right side of the player");
		swipeTillTrayAndClickContentCard("Recommended Songs");
	}

	public void PWALiveTVPageHLS(String usertype, String Tabname) throws Exception {
		extent.HeaderChildNode("HLS_131 : Verify whether user is able to navigate Live TV landing page ");
		System.out.println("HLS_131 : Verify whether user is able to navigate Live TV landing page ");
		PWAPagesNavigationAndTabHighlight(Tabname);
		extent.HeaderChildNode("HLS_132 : Validate the availability of Live and Channel Guide navigation buttons in header section");
		System.out.println("HLS_132 : Validate the availability of Live and Channel Guide navigation buttons in header section");
		verifyIsElementDisplayed(PWALiveTVPage.objLiveTVToggleActive, "Live TV toggle button");
		verifyIsElementDisplayed(PWALiveTVPage.objNothighlightedChannelGuideToggle, "Channel Guide toggle button");
		waitforLiveTabToLoad();
		extent.HeaderChildNode("HLS_133 : Verify the rails name and content are loaded for first 2 scroll");
		System.out.println("HLS_133 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(Tabname);
		extent.HeaderChildNode("HLS_135 : Verify at right side bottom arrow is given to navigate top of screen without scrolling");
		System.out.println("HLS_135 : Verify at right side bottom arrow is given to navigate top of screen without scrolling");
		verificationOfBackToTop(Tabname);
		extent.HeaderChildNode("HLS_144 : Verify the user is able to watch the free Live Channels");
		System.out.println("HLS_144 : Verify the user is able to watch the free Live Channels");
		click(PWALiveTVPage.objFirstfreeContentCard, "Free Content card");
		waitForElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, 5);
		if (!(verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up"))) {
			logger.info("User is able to watch the free Content");
			extent.extentLogger("Free content", "User is able to watch the free Content");
		}
		waitTime(10000);
		pauseLiveTVPlayer();
		verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize icon");
		Back(1);
		waitforLiveTabToLoad();
		extent.HeaderChildNode("HLS_136 : Verify in Filter option, multiple languages are given to select with apply and reset button in Live TV Screen");
		System.out.println("HLS_136 : Verify in Filter option, multiple languages are given to select with apply and reset button in Live TV Screen");		
		Swipe("UP", 3);
		waitTime(3000);		
		waitForElementDisplayed(PWALiveTVPage.objAllChnnelName, 10);		
		verifyElementPresentAndClick(PWALiveTVPage.objLiveTVViewAll, "ViewAll option");		
		waitTime(3000);		
		verifyElementPresentAndClick(PWALiveTVPage.objLiveTvFilterOption, "Filter option");
		List<WebElement> languages = getDriver().findElements(By.xpath("//div[contains(@class,'language noSelect')]"));
		languages.size();
		if (languages.size() > 1) {
			logger.info("Multiple languages are given for selection");
			extent.extentLogger("Multiple languages", "Multiple languages are given for selection");
		} else {
			logger.info("Multiple languages are not given for selection");
			extent.extentLogger("Multiple languages", "Multiple languages are not given for selection");
		}
		verifyElementPresent(PWALiveTVPage.objApplyBtn, "Apply button");
		verifyIsElementDisplayed(PWALiveTVPage.objResetBtn, "Reset button");
		click(PWALiveTVPage.objCloseLanguagePopuUpBtn, "Close button of Filter language setting window");
		Back(1);
		waitTime(10000);
		extent.HeaderChildNode("HLS_137 : Validate that user is navigated to channel guide screen post tapping/Clicking on channel guide button.");
		System.out.println("HLS_137 : Validate that user is navigated to channel guide screen post tapping/Clicking on channel guide button.");
		verifyElementPresentAndClick(PWALiveTVPage.objNothighlightedChannelGuideToggle, "Channel guide toggle");
		waitTime(5000);
		if (verifyElementPresent(PWALiveTVPage.objHighlightedChannelGuideToggle, "Highlighted Channel guide toggle")) {
			logger.info("User is navigated to Channel guide screen");
			extent.extentLogger("", "User is navigated to Channel guide screen");
		}
		if (waitforChannelGuideToLoad()) {
			extent.HeaderChildNode("HLS_139 : Validate that Channel/Day Strip is available channel guide screen.");
			System.out.println("HLS_139 : Validate that Channel/Day Strip is available channel guide screen.");
			verifyIsElementDisplayed(PWALiveTVPage.objChannelDayStrip, "Channel/Day Strip");
			waitExplicitlyForElementPresence(PWALiveTVPage.objFirstOngoingLiveTvShowCard, 60,
					"Ongoing Live TV Show Card");
			String ongoingLiveTvcardClass = getAttributValue("class", PWALiveTVPage.objFirstOngoingLiveTvShowCard);
			if (ongoingLiveTvcardClass.contains("active")) {
				logger.info("On going live show cards are highlighted");
				extent.extentLogger("", "On going live show cards are highlighted");
			} else {
				logger.info("On going live show cards are not highlighted");
				extent.extentLogger("", "On going live show cards are not highlighted on channel guide screen");
			}
			verifyIsElementDisplayed(PWALiveTVPage.objUpcomingLiveProgramDate, "Upcoming Live Program Date");
			extent.HeaderChildNode("HLS_138 : Validate that Channel guide is having \"Sort\" and \"Filters\" option on the header ");
			System.out.println("HLS_138 : Validate that Channel guide is having \"Sort\" and \"Filters\" option on the header ");
			click(PWALiveTVPage.objChannelGuideSortOption, "Sort Option");
			verifyElementPresent(PWALiveTVPage.objSortByPopularity, "Sort By Popularity Option");
			verifyIsElementDisplayed(PWALiveTVPage.objSortByAZ, "Sort by A-Z Option");
			click(PWALiveTVPage.objLiveTvFilterOption, "Filter option");
			languages = getDriver().findElements(By.xpath("//div[contains(@class,'language noSelect')]"));
			languages.size();
			if (languages.size() > 1) {
				logger.info("Multiple languages are given for selection");
				extent.extentLogger("Multiple languages", "Multiple languages are given for selection");
			} else {
				logger.info("Multiple languages are not given for selection");
				extent.extentLogger("Multiple languages", "Multiple languages are not given for selection");
			}
			verifyElementPresent(PWALiveTVPage.objApplyBtn, "Apply button");
			verifyIsElementDisplayed(PWALiveTVPage.objResetBtn, "Reset button");
			click(PWALiveTVPage.objCloseLanguagePopuUpBtn, "Close button of Filter language setting window");
			waitTime(10000);
			extent.HeaderChildNode("HLS_140 : Validate that user is navigated to respective live TV consumption screen post tapping on On going live show cards");
			System.out.println("HLS_140 : Validate that user is navigated to respective live TV consumption screen post tapping on On going live show cards");
			List<WebElement> ongoingshows = findElements(PWALiveTVPage.objOngoingLiveTvShowTitles);
			String onGoingLiveTvShowCardTitle = "";
			for (int i = 0; i < ongoingshows.size(); i++) {
				onGoingLiveTvShowCardTitle = ongoingshows.get(i).getAttribute("innerText");
				System.out.println(onGoingLiveTvShowCardTitle);
				if (JSClick(PWALiveTVPage.objOngoingLiveTvShowTitles(i + 1),
						"Ongoing Live TV Show card: " + onGoingLiveTvShowCardTitle)) {
					break;
				}
			}
			waitTime(7000);
			String ConsumptionScreenShowTitle = getText(PWASearchPage.objShowTitleInconsumptionPage);
			logger.info("Navigated to Consumption page:" + ConsumptionScreenShowTitle);
			extent.extentLogger("", "Navigated to consumption screen: " + ConsumptionScreenShowTitle);
			if (ConsumptionScreenShowTitle.equals("")) {
				logger.error("User is not navigated to consumption screen");
				extent.extentLoggerFail("", "User is not navigated to consumption screen");
			} else {
				logger.info("User is navigated to consumption screen");
				extent.extentLogger("", "User is navigated to consumption screen");
			}
			Back(1);
		}
		if (waitforChannelGuideToLoad()) {
			extent.HeaderChildNode(
					"HLS_141 : Validate that Show info pop up is displayed when user taps on any Upcoming or Concluded live program card.");
			System.out.println(
					"HLS_141 : Validate that Show info pop up is displayed when user taps on any Upcoming or Concluded live program card.");
			click(PWALiveTVPage.objUpcomingLiveProgramDate, "Upcoming Live Program Date");
			boolean clickedUpcomingCard = false;
			waitforChannelGuideToLoad();
			System.out.println(getDriver().getContextHandles());
			List<WebElement> channels = findElements(PWALiveTVPage.objChannelsEPGOuter);
			int size = 0;
			if (channels.size() > 4)
				size = 4;
			else
				size = channels.size();
			System.out.println("size: " + size);
			for (int i = 0; i < size; i++) {
				channels.get(i).click();
				if (verifyIsElementDisplayed(PWALiveTVPage.objUpcomingShowContentDialoguebox, "Show Info Pop Up")) {
					clickedUpcomingCard = true;
					click(PWALiveTVPage.objUpcomingLiveProgramClose, "Close of Pop Up");
					break;
				}
			}
			if (clickedUpcomingCard == false) {
				logger.error("Failed to click on Upcoming Show Card");
				extent.extentLoggerFail("", "Failed to click on Upcoming Show Card");
			}
		}
		click(PWALiveTVPage.objLiveTVToggleInactive, "Live TV Toggle button");
		if (waitforLiveTabToLoad()) {
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				extent.HeaderChildNode(
						"HLS_142 : Verify the Subscribe now or Login pop is displayed when user click on premium content");
				System.out.println(
						"HLS_142 : Verify the Subscribe now or Login pop is displayed when user click on premium content");
			}
			if (userType.equals("SubscribedUser")) {
				extent.HeaderChildNode(
						"HLS_143 : Verify the Subscribe now or Login pop is not displayed when user click on premium content");
				System.out.println(
						"HLS_143 : Verify the Subscribe now or Login pop is not displayed when user click on premium content");
			}
			boolean clicked = false;
			for (int scroll = 0; scroll <= 8; scroll++) {
				if (directClickReturnBoolean(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content")) {
					logger.info("Clicked on Premium Content Card");
					extent.extentLogger("", "Clicked on Premium Content Card");
					clicked = true;
					break;
				} else {
					Swipe("UP", 1);
					waitTime(2000);
					if (scroll == 8) {
						logger.info("Premium Content Card not available in Live TV Page");
						extent.extentLogger("", "Premium Content Card not available in Live TV Page");
						clicked = false;
					}
				}
			}
			if (clicked == true) {
				waitTime(5000);
				if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {

					// waitForElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, 5);

					waitForElement(PWAPlayerPage.objGetPremiumInline, 5, "Get Premium IN Line");

					// if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle,
					// "Subscribe Pop Up"))

					if (verifyIsElementDisplayed(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line")) {

						// click(PWAPremiumPage.objClosePremiumPopup, "Subscribe Pop Up Close icon");

						click(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line");

						verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Unlock ZEE5Subscription page");

						waitTime(2000);

						click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");

					} else {
						logger.error("Subscribe Pop Up failed to get displayed");
						extent.extentLoggerFail("", "Subscribe Pop Up failed to get displayed");
					}
				}
				if (userType.equals("SubscribedUser")) {
					if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle,
							"Subscribe Pop Up for Subscribed User")) {
						click(PWAPremiumPage.objClosePremiumPopup, "Subscribe Pop Up Close icon");
						logger.error("Subscribe Pop Up should not be displayued for Subscribed User");
						extent.extentLoggerFail("", "Subscribe Pop Up should not be displayued for Subscribed User");
					}
				}
			}
		}
	}

	public void PWAStoriesPageHLS(String usertype, String Tabname) throws Exception {
		extent.HeaderChildNode("HLS_145 : Verify whether user is able to navigate Stories landing page ");
		System.out.println("HLS_145 : Verify whether user is able to navigate Stories landing page ");
		PWAPagesNavigationAndTabHighlight(Tabname);

		// navigateToAnyScreen("Stories");
		navigateToPerticularScreen("Stories");

		extent.HeaderChildNode("HLS_146 : Trays and data load for 2 scrolls vertically");
		System.out.println("HLS_146 : Trays and data load for 2 scrolls vertically");
		dataValidationOnScrollForStories();
		extent.HeaderChildNode(
				"HLS_147 : Verify at right side bottom arrow is given to navigate top of screen without scrolling");
		System.out.println(
				"HLS_147 : Verify at right side bottom arrow is given to navigate top of screen without scrolling");
		verifyElementPresentAndClick(PWALandingPages.objNavigateToTopStories, "Back to Top arrow");
		extent.HeaderChildNode("HLS_148 : Verify whether user is navigate to Story consumption page");
		System.out.println("HLS_148 : Verify whether user is navigate to Story consumption page");
		String cardTitle = getElementPropertyToString("innerText", PWAHomePage.objStoriesPageCardTitle,
				"Story title in Landing");
		logger.info("Title of the Story in Stories page: " + cardTitle);
		extent.extentLogger("", "Title of the Story in Stories page: " + cardTitle);
		click(PWAHomePage.objStoriesPageCardTitle, "Story card");
		String cardTitleConsum = getElementPropertyToString("innerText", PWAHomePage.objStoriesPageConsumptionsTitle,
				"Story title in Consumptions");
		logger.info("Title of the Story in Article page: " + cardTitleConsum);
		extent.extentLogger("", "Title of the Story in Article page: " + cardTitleConsum);
		if (cardTitle.equals(cardTitleConsum)) {
			logger.info("Successful navigation to consumption page");
			extent.extentLogger("", "Successful navigation to consumption page");
		} else {
			logger.error("Navigation failed to consumption page");
			extent.extentLoggerFail("", "Navigation failed to consumption page");
		}
	}

	public void PWAVideosPageHLS(String usertype, String Tabname) throws Exception {
		extent.HeaderChildNode("HLS_149 : Verify whether user is able to navigate Videos landing page");
		System.out.println("HLS_149 : Verify whether user is able to navigate Videos landing page");
		PWAPagesNavigationAndTabHighlight(Tabname);
		extent.HeaderChildNode("HLS_150 : Verify the rails name and content are loaded for first 2 scroll");
		System.out.println("HLS_150 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(Tabname);
		extent.HeaderChildNode(
				"HLS_154 : Verify at right side bottom arrow is given to navigate top of screen without scrolling");
		System.out.println(
				"HLS_154 : Verify at right side bottom arrow is given to navigate top of screen without scrolling");
		verificationOfBackToTop(Tabname);
		extent.HeaderChildNode(
				"HLS_151 : Verify the \" View All\" option given on tray right side top and functionality of View all, HLS_155 : Verify whether user is navigate to consumption page when user tap on any video content in Listed collection");
		System.out.println(
				"HLS_151 : Verify the \" View All\" option given on tray right side top and functionality of View all, HLS_155 : Verify whether user is navigate to consumption page when user tap on any video content in Listed collection");
		playCardFromCollections(userType, Tabname);
		reloadHome();
		String keyword = "16th and 17th June Episodes of High Fever";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWAHomePage.objSearchField, keyword + "\n", "Search");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(2000);
		String videoTitle = "";
		try {
			videoTitle = getElementPropertyToString("innerText", PWAMusicPage.objConsumptionPageTitle,
					"Video Title in Consumptions Page").toString();
			logger.info("Video Title in Consumptions Page: " + videoTitle);
			extent.extentLoggerPass("", "Video Title in Consumptions Page: " + videoTitle);
		} catch (Exception e) {
		}
		extent.HeaderChildNode("HLS_156 : Verify that Recommended Videos are displayed right side of the player");
		System.out.println("HLS_156 : Verify that Recommended Videos are displayed right side of the player");
		swipeTillTrayAndClickContentCard("Recommended Videos");
	}

	public void PWAWebSeriesPageHLS(String usertype, String Tabname) throws Exception {
		extent.HeaderChildNode("HLS_157 : Verify whether user is able to navigate Zee originals landing page");
		System.out.println("HLS_157 : Verify whether user is able to navigate Zee originals landing page");
		PWAPagesNavigationAndTabHighlight(Tabname);
		extent.HeaderChildNode("HLS_158 : Verify the rails name and content are loaded for first 2 scroll");
		System.out.println("HLS_158 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(Tabname);
		extent.HeaderChildNode(
				"HLS_162 : Verify at right side bottom arrow is given to navigate top of screen without scrolling");
		System.out.println(
				"HLS_162 : Verify at right side bottom arrow is given to navigate top of screen without scrolling");
		verificationOfBackToTop(Tabname);
		extent.HeaderChildNode(
				"HLS_159 : Verify the \" View All\" option given on tray right side top and functionality of View all");
		System.out.println(
				"HLS_159 : Verify the \" View All\" option given on tray right side top and functionality of View all");
		playCardFromCollections(userType, Tabname);
		reloadHome();
		extent.HeaderChildNode(
				"HLS_163 : Verify the Club & Premium icons are displayed on the Zee originals content cards");
		System.out
				.println("HLS_163 : Verify the Club & Premium icons are displayed on the Zee originals content cards");
		PWAPremiumOrClubIconVerification(Tabname);
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_164 : Verify the Premium user is able to watch all the zee originals shows, HLS_166 : Verify user is able to watch the First Episode of the originals shows, HLS_167 : Verify user can Navigate to the Original shows Details Screen post click on any Show Thumbnail Card");
			System.out.println(
					"HLS_164 : Verify the Premium user is able to watch all the zee originals shows, HLS_166 : Verify user is able to watch the First Episode of the originals shows, HLS_167 : Verify user can Navigate to the Original shows Details Screen post click on any Show Thumbnail Card");
			swipeTillTrayAndClickContentCard("Best of ZEE5 Originals in Hindi");
		}
		/*
		 * if (userType.equals("ClubUser")) { extent.HeaderChildNode(
		 * "HLS_165 : Verify the Club user is able to watch all the zee originals shows from Zee originals page, HLS_166 : Verify user is able to watch the First Episode of the originals shows, HLS_167 : Verify user can Navigate to the Original shows Details Screen post click on any Show Thumbnail Card"
		 * ); System.out.println(
		 * "HLS_165 : Verify the Club user is able to watch all the zee originals shows from Zee originals page, HLS_166 : Verify user is able to watch the First Episode of the originals shows, HLS_167 : Verify user can Navigate to the Original shows Details Screen post click on any Show Thumbnail Card"
		 * ); swipeTillTrayAndClickContentCard("Best of ZEE5 Originals in Hindi"); }
		 */
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_166 : Verify user is able to watch the First Episode of the originals shows, HLS_167 : Verify user can Navigate to the Original shows Details Screen post click on any Show Thumbnail Card");
			System.out.println(
					"HLS_166 : Verify user is able to watch the First Episode of the originals shows, HLS_167 : Verify user can Navigate to the Original shows Details Screen post click on any Show Thumbnail Card");
			// swipeTillTrayAndClickContentCard("Best of ZEE5 Originals in Hindi");
			swipeTillTrayAndClickContentCard("Top ZEE5 Web Series");
		}
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		navigateToAnyScreen(Tabname);
		/*
		 * if (userType.equals("Guest")) { extent.HeaderChildNode(
		 * "HLS_168 : Verify the GET CLUB CTA is displayed on the  Club originals detail screen"
		 * ); System.out.
		 * println("HLS_168 : Verify the GET CLUB CTA is displayed on the  Club originals detail screen"
		 * ); // handle mandatory pop up mandatoryRegistrationPopUp(userType); String
		 * keyword = "Kehne Ko Humsafar Hain"; click(PWAHomePage.objSearchBtn,
		 * "Search icon"); type(PWAHomePage.objSearchField, keyword + "\n", "Search");
		 * click(PWASearchPage.objSearchedResult(keyword), "Search Result");
		 * verifyElementPresent(PWAShowsPage.objGetClubCTAInShowDetails,
		 * "Get Club CTA in originals details");
		 * verifyIsElementDisplayed(PWAShowsPage.objShowdeatilPlayIcon,
		 * "Play icon in originals details"); }
		 */
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"HLS_169 : Verify the GET Premium CTA is displayed on the  Club originals detail screen");
			System.out
					.println("HLS_169 : Verify the GET Premium CTA is displayed on the  Club originals detail screen");
			// handle mandatory pop up
			mandatoryRegistrationPopUp(userType);
			String keyword = "Rangbaaz";
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWAHomePage.objSearchField, keyword + "\n", "Search");
			click(PWASearchPage.objSearchedResult(keyword), "Search Result");
			verifyElementPresent(PWAShowsPage.objGetPremiumCTAInShowDetails, "Get Premium CTA in originals details");
			verifyIsElementDisplayed(PWAShowsPage.objShowdeatilPlayIcon, "Play icon in originals details");
		}
	}

	@SuppressWarnings("rawtypes")
	public void PWASearchLandingHLS(String usertype) throws Exception {
		extent.HeaderChildNode(
				"HLS_184 : Validate that user lands on search landing screen post tapping/clicking on search icon");
		System.out.println(
				"HLS_184 : Validate that user lands on search landing screen post tapping/clicking on search icon");
		verifyIsElementDisplayed(PWAHomePage.objSearchBtn, "Search icon");
		click(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		if (verifyIsElementDisplayed(PWASearchPage.objSearchEditBox, "Search Edit Box")) {
			logger.info("User landed on Search landing screen post tapping on search icon");
			extent.extentLogger("", "User landed on Search landing screen post tapping on search icon");
		} else {
			logger.error("User failed to land on Search landing screen post tapping on search icon");
			extent.extentLoggerFail("", "User failed to land on Search landing screen post tapping on search icon");
		}
		extent.HeaderChildNode(
				"HLS_185 : Validate that the Trending Searches tray is available on the Search landing screen");
		System.out.println(
				"HLS_185 : Validate that the Trending Searches tray is available on the Search landing screen");
		if (verifyIsElementDisplayed(PWASearchPage.objTrendingSearchesTray, "Trending Searches tray")) {
			logger.info("Trending Searches tray is available on the Search landing screen");
			extent.extentLogger("", "Trending Searches tray is available on the Search landing screen");
		} else {
			logger.info("Trending Searches tray is not available on the Search landing screen");
			extent.extentLogger("", "Trending Searches tray is not available on the Search landing screen");
		}
		extent.HeaderChildNode(
				"HLS_186 : Validate that the Top Searches tray is available on the Search landing screen.");
		System.out.println("HLS_186 : Validate that the Top Searches tray is available on the Search landing screen.");
		if (verifyIsElementDisplayed(PWASearchPage.objTopSearchesTray, "Top Searches tray")) {
			logger.info("Top Searches tray is available on the Search landing screen");
			extent.extentLogger("", "Top Searches tray is available on the Search landing screen");
		} else {
			logger.info("Top Searches tray is not available on the Search landing screen");
			extent.extentLogger("", "Top Searches tray is not available on the Search landing screen");
		}
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		extent.HeaderChildNode(
				"HLS_187 : Validate that user is navigated to respective details/consumption screen post tapping on any Search result content");
		System.out.println(
				"HLS_187 : Validate that user is navigated to respective details/consumption screen post tapping on any Search result content");
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("consumptionsFreeContent");
		type(PWAHomePage.objSearchField, keyword + "\n", "Search");
		verifyElementPresentAndClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(10000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result: " + keyword);
		String navigationtittle = getText(PWAPlayerPage.objContentTitle);
		logger.info("Navigated to Consumption page: " + navigationtittle);
		extent.extentLogger("View All", "Navigated to Consumption page: " + navigationtittle);
		extent.HeaderChildNode(
				"HLS_188 : Validate that user is navigated to respective details/consumption screen post tapping on any cards from Trending/Top searches");
		System.out.println(
				"HLS_188 : Validate that user is navigated to respective details/consumption screen post tapping on any cards from Trending/Top searches");
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objSearchBtn, "Search icon");
		click(PWASearchPage.objFirstAssetTitleTrendingSearch, "First card under Trending Searches Tray");
		waitTime(10000);
		boolean externalLink = false;
		String currentHandle = getDriver().getWindowHandle();
		System.out.println(currentHandle);
		Set<String> handles = getDriver().getWindowHandles();
		System.out.println(handles);
		Iterator it = handles.iterator();
		String externalHandle = "";
		for (int i = 0; i < handles.size(); i++) {
			String handle = it.next().toString();
			if (!handle.equals(currentHandle)) {
				externalHandle = handle;
				break;
			}
		}
		if (handles.size() > 1) {
			logger.info("Navigated to External Link");
			extent.extentLogger("", "Navigated to External Link");
			getDriver().switchTo().window(externalHandle).close();
			externalLink = true;
			getDriver().switchTo().window(currentHandle);
			waitTime(10000);
		}
		navigationtittle = "";
		if (externalLink == false) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objContentShowTitle, "Show Details")) {
				navigationtittle = getText(PWAPlayerPage.objContentShowTitle);
				logger.info("Navigated to Show Details page from View All Page: " + navigationtittle);
				extent.extentLogger("View All",
						"Navigated to Show Details page from View All Page: " + navigationtittle);
			} else {
				directClickReturnBoolean(PWASubscriptionPages.objPopupCloseButton, "Popup Close Button");
				pausePlayer();
				navigationtittle = getText(PWAPlayerPage.objContentTitle);
				logger.info("Navigated to Consumption page from View All Page: " + navigationtittle);
				extent.extentLogger("View All",
						"Navigated to Consumption page from View All Page: " + navigationtittle);
			}
		}
		reloadHome();
		click(PWAHomePage.objSearchBtn, "Search icon");
		extent.HeaderChildNode("HLS_189 : Validate that related search results are available under each tab.");
		System.out.println("HLS_189 : Validate that related search results are available under each tab.");
		keyword = "pyar";
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search bar");
		waitTime(4000);
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
		List<WebElement> tabs = getDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		tabs.size();
		// for (int i = 1; i <= tabs.size(); i++) {
		for (int i = 1; i <= tabs.size(); i++) {
			try {
				WebElement eleTab = getDriver()
						.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
				String tabName = eleTab.getText();
				eleTab.click();
				logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
				extent.extentLogger("", tabName + " tab is displayed and clicked on " + tabName + " tab");
				int highlightedResults = getDriver().findElements(By.xpath(
						"(//div[@class='listingGrid']//div[@class='metaData']//h3[contains(@class,'cardTitle')]//span[@class='highLight'])"))
						.size();
				if (highlightedResults > 0) {
					logger.info(highlightedResults + " Related search results are displayed");
					extent.extentLogger("", highlightedResults + " Related search results are displayed");

				} else {
					logger.info("Related search results are not displayed");
					extent.extentLogger("Related search results", "Related search results are not displayed");
				}
			} catch (Exception e) {
				logger.error("Related search results are not displayed");
				extent.extentLoggerFail("Related search results", "Related search results are not displayed");
			}
		}
		extent.HeaderChildNode(
				"HLS_192 : Verify whether the user is able to clear the searched term on Click of the close(X) icon in the search field.");
		System.out.println(
				"HLS_192 : Verify whether the user is able to clear the searched term on Click of the close(X) icon in the search field.");
		click(PWASearchPage.objSearchCloseButton, "Close in Search Edit box");
		String placeHolderText = getElementPropertyToString("placeholder", PWASearchPage.objSearchPlaceHolderText,
				"Search placeholder text");
		String expectedPlaceHolderText = "Search for Movies, Shows, Channels etc.";
		if (placeHolderText.equals(expectedPlaceHolderText)) {
			logger.info("Placeholder text is displayed, Search field is cleared");
			extent.extentLogger("", "Placeholder text is displayed, Search field is cleared");
		} else {
			logger.error("Placeholder text is not displayed, Close in Search Edit box functionality failed");
			extent.extentLoggerFail("",
					"Placeholder text is not displayed, Close in Search Edit box functionality failed");
		}
		extent.HeaderChildNode("HLS_190 : Verify the Searched contents/Term is shown to the user as Recent searches");
		System.out.println("HLS_190 : Verify the Searched contents/Term is shown to the user as Recent searches");
		String keywordB = "Gattimela";
		click(PWASearchPage.objSearchEditBox, "Search edit box");
		type(PWASearchPage.objSearchEditBox, keywordB, "Search edit box");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchShowsTab, "Shows tab");
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keywordB), "Search Result " + keywordB);
		waitTime(2000);
		click(PWAHomePage.objSearchBtn, "Search icon");
		verifyElementPresent(PWASearchPage.recentSearchsLabel, "Recent Searches tray");
		verifyElementPresent(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text");
		if (verifyIsElementDisplayed(PWASearchPage.recentSearchItem1, "First Recent Search Item")) {
			if (getText(PWASearchPage.recentSearchItem1).equals(keywordB)) {
				logger.info(keywordB + " is displayed under Recent Searches as expected");
				extent.extentLogger("", keywordB + " is displayed under Recent Searches as expected");
			} else {
				logger.error(keywordB + " is not the first item under Recent Searches");
				extent.extentLoggerFail("", keywordB + " is not the first item under Recent Searches");
			}
		} else {
			logger.error("There is no item under Recent Searches");
			extent.extentLoggerFail("", "There is no item under Recent Searches");
		}

		extent.HeaderChildNode(
				"HLS_191 : Verify after click on the \"Clear All\" button user is able to clear Recent Searches.");
		System.out.println(
				"HLS_191 : Verify after click on the \"Clear All\" button user is able to clear Recent Searches.");
		click(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text");
		waitTime(2000);
		if (verifyIsElementDisplayed(PWASearchPage.recentSearchsLabel, "Recent Searches tray")) {
			logger.error("Recent Searches tray is displayed even after clicking Clear All text");
			extent.extentLoggerFail("", "Recent Searches tray is displayed even after clicking Clear All text");
		}
		if (verifyIsElementDisplayed(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text")) {
			logger.error("Clear All text is displayed even after clicking Clear All text");
			extent.extentLoggerFail("", "Clear All text is displayed even after clicking Clear All text");
		}
		List<WebElement> recentSearchItems = findElements(PWASearchPage.recentSearchItems);
		int size = recentSearchItems.size();
		if (size > 0) {
			logger.error(size + "keywords are found under Recent Searches even after Clear All tap");
			extent.extentLoggerFail("", size + "keywords are found under Recent Searches even after Clear All tap");
		} else {
			logger.info("Previous Recent searched Keywords are not displayed");
			extent.extentLogger("", "Previous Recent searched Keywords are not displayed");
		}
	}

	public void PWASubscriptionJourneyHLS(String usertype) throws Exception {

		if (userType.contains("Guest") || userType.contains("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_216 : Verify the user is navigating to the Subscription page by clicking on the Subscribe button across the application");
			System.out.println(
					"HLS_216 : Verify the user is navigating to the Subscription page by clicking on the Subscribe button across the application");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");
			if (!verifyIsElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription Page")) {
				logger.error("Subscription page navigation failed");
				extent.extentLoggerFail("", "Subscription page navigation failed");
			} else
				click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
		if (userType.contains("Guest")) {
			extent.HeaderChildNode(
					"HLS_217 : Verify screen is navigated to the subscription page when user clicks on \"Buy subscription \"option");
			System.out.println(
					"HLS_217 : Verify screen is navigated to the subscription page when user clicks on \"Buy subscription \"option");
			click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objBuySubscriptionOption, "Buy Subscription");
			waitTime(3000);
			if (!verifyIsElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription Page")) {
				logger.error("Subscription page navigation failed");
				extent.extentLoggerFail("", "Subscription page navigation failed");
			} else
				click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode(
					"HLS_218 : Verify screen is navigated to the subscription page when user clicks on \"Have a Prepaid code\"");
			System.out.println(
					"HLS_218 : Verify screen is navigated to the subscription page when user clicks on \"Have a Prepaid code\"");
			click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPlanInsideItemsBtn("Have a prepaid code ?"),
					"Have a prepaid code? option");
			if (!verifyIsElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription Page")) {
				logger.error("Subscription page navigation failed");
				extent.extentLoggerFail("", "Subscription page navigation failed");
			} else
				click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
		if (userType.contains("NonSubscribedUser")) {
			// handle mandatory pop up
			mandatoryRegistrationPopUp(userType);
			extent.HeaderChildNode(
					"HLS_219 : Verify screen is navigated to the payments page by clicking on continue from Subscribe popup on playing premium/club content.");
			System.out.println(
					"HLS_219 : Verify screen is navigated to the payments page by clicking on continue from Subscribe popup on playing premium/club content.");
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieWithTrailer");
			waitTime(3000);
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search bar");
			hideKeyboard();
			click(PWASearchPage.objFirstSearchedAssetTitle, "PremiumContent");

			// waitForElement(PWAPlayerPage.objGetPremium, 30, "Subscribe button");

			waitForElement(PWAPlayerPage.objGetPremiumInline, 30, "Get Premium IN Line");

			// click(PWAPlayerPage.objGetPremium, "Subscribe button");

			click(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line");

			verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");

			// click(PWASubscriptionPages.objPopupProceedBtn, "Proceed button");

			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");

			if (waitForElement(PWASubscriptionPages.objPaymentHighlighted, 10, "Payment Page")) {
				extent.extentLoggerPass("",
						"Screen is navigated to the payments page by clicking on continue from Subscribe popup");
			}
			click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode(
					"HLS_220 : Verify the user is navigating to Subscription page by clicking on the Player In-line Subscribe link");
			System.out.println(
					"HLS_220 : Verify the user is navigating to Subscription page by clicking on the Player In-line Subscribe link");
			keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieNoTrailer");
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Field");
			hideKeyboard();
			waitTime(3000);
			// handle mandatory pop up
			mandatoryRegistrationPopUp(userType);
			click(PWASearchPage.objPremiumSearchResult(keyword), "Premium content");
			waitTime(10000);

			// if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle,
			// "Subscribe pop up"))

			if (verifyIsElementDisplayed(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line")) {

				// click(PWASubscriptionPages.objPopupCloseButton, "Close in Subscribe pop up");

			}

			// verifyElementPresent(PWALiveTVPage.objPlayerInlineSubscriptionLink, "Player
			// inline Subscription link");

			verifyElementPresentAndClick(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line");
			waitTime(2000);

			// click(PWALiveTVPage.objPlayerInlineSubscriptionLink, "Player inline
			// Subscription link");

			verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");
			waitTime(1000);

			// click(PWASubscriptionPages.objPopupProceedBtn, "Proceed button of Subscribe
			// Pop Up");

			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");

			if (waitForElement(PWASubscriptionPages.objPaymentHighlighted, 10, "Payment Page")) {
				extent.extentLoggerPass("",
						"Screen is navigated to the payments page by clicking on Player inline Subscription link");
			}
		}
	}

	public void PWAAccountInfoHLS(String usertype) throws Exception {

		if (userType.contains("Guest")) {
			extent.HeaderChildNode("HLS_224 : Verify all access-packs");
			System.out.println("HLS_224 : Verify all access-packs");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");
			Swipe("UP", 1);
			List<WebElement> packs = getDriver().findElements(PWASubscriptionPages.objPackAmount);
			for (int i = 0; i < packs.size(); i++) {
				logger.info("Pack displayed : " + packs.get(i).getAttribute("innerText"));
				extent.extentLogger("", "Pack displayed : " + packs.get(i).getAttribute("innerText"));
			}
			/*
			 * extent.
			 * HeaderChildNode("HLS_225 : Verify Club pack is available under club section in Select pack page"
			 * ); System.out.
			 * println("HLS_225 : Verify Club pack is available under club section in Select pack page"
			 * ); click(PWASubscriptionPages.objClubPack, "Club Tab"); packs =
			 * getDriver().findElements(PWASubscriptionPages.objPackAmount); for (int i = 0;
			 * i < packs.size(); i++) { logger.info("Pack displayed : " +
			 * packs.get(i).getAttribute("innerText")); extent.extentLogger("",
			 * "Pack displayed : " + packs.get(i).getAttribute("innerText")); }
			 */
			extent.HeaderChildNode(
					"HLS_221 : Validate that selected pack information is displayed on the right side of the account info screen.");
			System.out.println(
					"HLS_221 : Validate that selected pack information is displayed on the right side of the account info screen.");

			// click(PWASubscriptionPages.objPremiumPack, "Premium Pack");

			click(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");

			click(PWASubscriptionPages.objContinueBtn, "Continue button");
			verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Page");

			extent.HeaderChildNode(
					"HLS_222 : Validate that user is navigated to Payment options screen post successful sign in");
			System.out.println(
					"HLS_222 : Validate that user is navigated to Payment options screen post successful sign in");
			String email = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("NonsubscribedUserName");
			String password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("NonsubscribedPassword");
			click(PWASubscriptionPages.objEmailIDTextField, "Email ID Text Field");
			waitTime(3000);
			type(PWASubscriptionPages.objEmailIDTextField, email, "Email Id");
			hideKeyboard();
			waitTime(3000);

			// click(PWASubscriptionPages.objProceedBtnHighlighted, "Proceed Button in
			// Account Info Page");

			verifyElementPresent(PWASubscriptionPages.objContinueBtnn, "Continue button");
			waitTime(3000);
			click(PWASubscriptionPages.objContinueBtnn, "Continue button");

			waitTime(3000);

//			click(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
			// waitTime(3000);

			// verifyElementPresent(PWASubscriptionPages.objPasswordPopupInSubscriptionPage,
			// "Password field");

			verifyElementPresentAndClick(PWASubscriptionPages.objPasswordField, "Password filed");
			waitTime(2000);

			// type(PWASubscriptionPages.objPasswordFieldHidden, password, "Password
			// Field");

			type(PWASubscriptionPages.objPasswordField, password, "Password filed");

			getDriver().context("NATIVE_APP");
			hideKeyboard();
			getDriver().context("CHROMIUM");
			waitTime(9000);

			// click(PWASubscriptionPages.objProceedBtn, "Proceed Button");

			click(PWASubscriptionPages.objContinueBtnn, "Continue button");

			try {
				// getDriver().findElement(PWASubscriptionPages.objProceedBtn).click();

				getDriver().findElement(PWASubscriptionPages.objContinueBtnn).click();

			} catch (Exception e) {
			} // Required for Vivo phone because keyboard shows up
			waitTime(3000);
			if (waitForElement(PWASubscriptionPages.objPaymentHighlighted, 10, "Payment Page")) {
				extent.extentLoggerPass("",
						"Screen is navigated to the payments page after logging in from Accounts Info page");
			}
			extent.HeaderChildNode(
					"HLS_223 : Verify the JUSPAY iframe loads when the user navigate to the PAYMENT page");
			System.out.println("HLS_223 : Verify the JUSPAY iframe loads when the user navigate to the PAYMENT page");
			Swipe("UP", 1);
			waitTime(5000);
			getDriver().context("NATIVE_APP");
			verifyElementPresent(PWASubscriptionPages.objMobileCreditDebitCardOption, "'Credit / Debit Card' option");
			getDriver().context("CHROMIUM");
			extent.HeaderChildNode("HLS_226 : Validate that the user is able to select any one payment option.");
			System.out.println("HLS_226 : Validate that the user is able to select any one payment option.");
			getDriver().context("NATIVE_APP");
			verifyElementPresentAndClick(PWASubscriptionPages.objMobileCreditDebitCardOption,
					"'Credit / Debit Card' option");
			waitTime(5000);
			hideKeyboard();
			verifyIsElementDisplayed(PWASubscriptionPages.objMobileCardNumberText, "Card Number");
			verifyIsElementDisplayed(PWASubscriptionPages.objMobileExpiryText, "Expiry field");
			verifyIsElementDisplayed(PWASubscriptionPages.objMobileCVVText, "CVV field");
			verifyIsElementDisplayed(PWASubscriptionPages.objMobileProceedToPayButton, "Proceed to Pay button");
			click(PWASubscriptionPages.objCreditDebitClose, "Credit/Debit card Close");
			getDriver().context("CHROMIUM");
			click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			logout();
		}
	}

	public void PWAMySubscriptionsHLS(String usertype) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("ClubUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("HLS_229 : Validate that My Subscription button is displayed under My Account menu");
			System.out.println("HLS_229 : Validate that My Subscription button is displayed under My Account menu");
			click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			click(PWAHamburgerMenuPage.objDownArrow("My Account"), "My Account Expander button");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreItemBtn("My Subscription"), "My Subscriptions");
		}
		if (userType.equals("SubscribedUser") || userType.equals("ClubUser")) {
			extent.HeaderChildNode(
					"HLS_230 : Validate that all the active subscription plans are displayed in my subscription screen.");
			System.out.println(
					"HLS_230 : Validate that all the active subscription plans are displayed in my subscription screen.");
			click(PWAHamburgerMenuPage.objExploreItemBtn("My Subscription"), "My Subscriptions");
			if (verifyElementPresent(PWAHamburgerMenuPage.objMySubscriptionPackName, "My Subscription Name")) {
				logger.info("My Subscription Name displayed : " + PWAHamburgerMenuPage.objMySubscriptionPackName);
				extent.extentLogger("",
						"My Subscription Name displayed : " + PWAHamburgerMenuPage.objMySubscriptionPackName);
			}
			if (verifyElementPresent(PWAHamburgerMenuPage.objMYSubscriptionActiveStatus, "My Subscription Status")) {
				logger.info("My Subscription Status displayed : " + PWAHamburgerMenuPage.objMYSubscriptionActiveStatus);
				extent.extentLogger("",
						"My Subscription Status displayed : " + PWAHamburgerMenuPage.objMYSubscriptionActiveStatus);
			}
		}
		if (userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_231 : Validate that Empty state screen with subscription teaser banner is displayed when user has No Active Subscriptions");
			System.out.println(
					"HLS_231 : Validate that Empty state screen with subscription teaser banner is displayed when user has No Active Subscriptions");
			click(PWAHamburgerMenuPage.objExploreItemBtn("My Subscription"), "My Subscriptions");
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objEmptyStateScreen, "Empty State Screen");
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			verifyElementPresent(PWAHamburgerMenuPage.objSubscriptionTeaserBanner, "Subscription Teaser Banner");
		}
	}

	public void PWAMyTransactionsHLS(String usertype) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("ClubUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("HLS_232 : Validate that My Transaction button is displayed under My Account menu");
			System.out.println("HLS_232 : Validate that My Transaction button is displayed under My Account menu.");
			click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			click(PWAHamburgerMenuPage.objDownArrow("My Account"), "My Account Expander button");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreItemBtn("My Transactions"), "My Transactions");
		}
		if (userType.equals("SubscribedUser") || userType.equals("ClubUser")) {
			extent.HeaderChildNode(
					"HLS_233 : Validate that All the active and expired plans are listing in my transaction screen.");
			System.out.println(
					"HLS_233 : Validate that All the active and expired plans are listing in my transaction screen.");
			click(PWAHamburgerMenuPage.objExploreItemBtn("My Transactions"), "My Transactions");
			waitTime(4000);
			verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Transactions"),
					"My Transactions page");
			verifyIsElementDisplayed(PWASubscriptionPages.objActiveStatusTransaction, "Status Active");
		}
		if (userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_234 : Validate that Empty state screen with subscription teaser banner is displayed");
			System.out
					.println("HLS_234 : Validate that Empty state screen with subscription teaser banner is displayed");
			click(PWAHamburgerMenuPage.objExploreItemBtn("My Transactions"), "My Transactions");
			verifyElementPresent(PWAHamburgerMenuPage.objEmptyStateScreen, "Empty State Screen");
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objNoTransaction, "No Transactions");
			verifyIsElementDisplayed(PWAHamburgerMenuPage.objSubscriptionTeaserBanner, "Subscription Teaser Banner");
		}
	}

	public void PWAUpgradePackJourneyHLS(String userType) throws Exception {
		if (userType.equals("ClubUser")) {
			extent.HeaderChildNode(
					"HLS_235 : Verify User is navigated to Subscription page post tap on \"Upgrade\" CTA");
			System.out.println("HLS_235 : Verify User is navigated to Subscription page post tap on \"Upgrade\" CTA");
			verifyElementPresent(PWAHomePage.objUpgradeBtnInHeader, "Upgrade button");
			click(PWAHomePage.objUpgradeBtnInHeader, "Upgrade button");
			if (!verifyIsElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription Page")) {
				logger.error("Subscription page navigation failed");
				extent.extentLoggerFail("", "Subscription page navigation failed");
			} else
				click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode(
					"HLS_236 : Verify upgrade pop up is displayed for Rsvod/Club user on playing Entitled premium content");
			System.out.println(
					"HLS_236 : Verify upgrade pop up is displayed for Rsvod/Club user on playing Entitled premium content");
			String keyword = "Khaali Peeli";
			waitTime(3000);
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search bar");
			hideKeyboard();
			click(PWASearchPage.objFirstSearchedAssetTitle, "Premium Content");
			waitForElement(PWAPlayerPage.objGetPremium, 30, "Subscribe button");
			click(PWAPlayerPage.objGetPremium, "Subscribe button");
			verifyElementPresent(PWASearchPage.objUpgradePopup, "Upgrade Pop up");
			extent.HeaderChildNode(
					"HLS_237 : Verify On clicking on proceed button payment screen with the Plan Price, Discount, rounding off, and Payable Price displayed.");
			System.out.println(
					"HLS_237 : Verify On clicking on proceed button payment screen with the Plan Price, Discount, rounding off, and Payable Price displayed.");
			click(PWASubscriptionPages.objPopupProceedBtn, "Proceed button");
			if (waitForElement(PWASubscriptionPages.objPaymentHighlighted, 10, "Payment Page")) {
				extent.extentLoggerPass("",
						"Screen is navigated to the payments page by clicking on continue from Subscribe popup");
			}
			click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	@SuppressWarnings({ "rawtypes", "unused" })
	public void PWAPlayerControlsHLS(String usertype) throws Exception {
		extent.HeaderChildNode("HLS_194 : Validate the Player Controls on Live Content playback");
		System.out.println("HLS_194 : Validate the Player Controls on Live Content playback");
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		navigateToAnyScreen("News");
		waitTime(7000);
		waitForElement(PWANewsPage.objLiveNewsCard, 60, "Live News Card");
		String newsCardTitle = getElementPropertyToString("data-minutelytitle", PWANewsPage.objLiveNewsCard,
				"Live News Card Title");
		logger.info("Live News card title fetched: " + newsCardTitle);
		extent.extentLogger("", "Live News card title fetched: " + newsCardTitle);
		click(PWANewsPage.objLiveNewsCard, "News Card Title");
		waitTime(10000);
		if (verifyElementPresent(PWAPlayerPage.objPlayerControlScreen, "Player control containing screen")) {
			waitforNewsConsumptionsToLoad();
			String newsConsumptionsTitle = getText(PWANewsPage.objLiveNewsConsumptionsTitle);
			logger.info("News title from consumptions page: " + newsConsumptionsTitle);
			extent.extentLogger("", "News title from consumptions page: " + newsConsumptionsTitle);
			if (newsCardTitle.equals(newsConsumptionsTitle)) {
				logger.info("Navigated to correct Consumptions Page");
				extent.extentLogger("Consumption Page", "Navigated to correct Consumption Page");
			} else {
				logger.error("Navigated to incorrect Consumptions Page");
				extent.extentLoggerFail("Consumption Page", "Navigated to incorrect Consumptions Page");
			}
		} else {
			logger.error("Not navigated to Consumptions Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumptions Page");
		}
		waitForPlayerAdToComplete("Video Player");
		pauseLiveTVPlayer();
		if (verifyIsElementDisplayed(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds icon")) {
			logger.error("Rewind 10 Seconds icon should not be available for News");
			extent.extentLoggerFail("", "Rewind 10 Seconds icon should not be available for News");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.objPlayOrPause, "Play/Pause icon")) {
			logger.error("Play/Pause icon is not available for News");
			extent.extentLoggerFail("", "Play/Pause icon is not available for News");
		}
		if (verifyIsElementDisplayed(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds icon")) {
			logger.error("Forward 10 Seconds icon should not be available for News");
			extent.extentLoggerFail("", "Forward 10 Seconds icon should not be available for News");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.settingsBtn, "Settings icon")) {
			logger.error("Settings icon is not available for News");
			extent.extentLoggerFail("", "Settings icon is not available for News");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.objLivePlayerVolume, "Volume icon")) {
			logger.error("Volume icon is not available for News");
			extent.extentLoggerFail("", "Volume icon is not available for News");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.objLiveTag, "LIVE Tag")) {
			logger.error("LIVE Tag is not available for News");
			extent.extentLoggerFail("", "LIVE Tag is not available for News");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.objChromecastButton, "Chromecast button")) {
			logger.error("Chromecast button is not available for News");
			extent.extentLoggerFail("", "Chromecast button is not available for News");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.maximizeBtn, "Maximize button")) {
			logger.error("Maximize button is not available for News");
			extent.extentLoggerFail("", "Maximize button is not available for News");
		}
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

		extent.HeaderChildNode("HLS_197 : Validate the availability and functionality of the Play/Pause button");
		System.out.println("HLS_197 : Validate the availability and functionality of the Play/Pause button");
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);

		String keyword = "Rani Gets Angry with Veer";
		String keywordContentID = "0-1-manual-5q8kbv9us400";

		String guesttoken = js.executeScript("return window.localStorage.getItem('guestToken')").toString();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWAHomePage.objSearchField, keyword + "\n", "Search");
		waitTime(5000);
		click(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(5000);
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		String afterPausing = getText(PWAPlayerPage.objcurrenttime);
		waitTime(5000);
		logger.info("Waited for 5 seconds");
		extent.extentLogger("", "Waited for 5 seconds");
		waitTime(2000);
		String afterPausingWait = getText(PWAPlayerPage.objcurrenttime);
		logger.info("Player time fetched after waiting for 5 seconds: " + afterPausingWait);
		extent.extentLogger("", "Player time fetched after waiting for 5 seconds: " + afterPausingWait);
		if (afterPausing.equals(afterPausingWait)) {
			logger.info("Player Paused Successfully");
			extent.extentLogger("", "Player Paused Successfully");
		} else {
			logger.error("Player Paused Failed");
			extent.extentLoggerFail("", "Player Paused Failed");
		}
		int deviceWidth = getDriver().manage().window().getSize().width;
		int deviceHeight = getDriver().manage().window().getSize().height;
		int x = deviceWidth / 2;
		int y = deviceHeight / 4;
		boolean playerPaused = false;
		TouchAction act = new TouchAction(getDriver());
		act.tap(PointOption.point(x, y)).perform();
		click(PWAPlayerPage.playBtn, "Play button");
		waitTime(5000);
		logger.info("Waited for 5 seconds");
		extent.extentLogger("", "Waited for 5 seconds");
		act.tap(PointOption.point(x, y)).perform();
		String afterPlayingWait = getText(PWAPlayerPage.objcurrenttime);
		logger.info("Player time fetched after playing: " + afterPlayingWait);
		extent.extentLogger("", "Player time fetched after playing: " + afterPlayingWait);
		if (afterPlayingWait.equals(afterPausingWait)) {
			logger.error("Player Play Failed");
			extent.extentLoggerFail("", "Player Play Failed");
		} else {
			logger.info("Player Play Successfull");
			extent.extentLogger("", "Player Play Successfull");
		}
		act.tap(PointOption.point(x, y)).perform();
		extent.HeaderChildNode(
				"HLS_198 : Content duration and Content playback elapsed time should be displayed on the player.");
		System.out.println(
				"HLS_198 : Content duration and Content playback elapsed time should be displayed on the player.");
		pausePlayer();
		String elapsedDuration = getText(PWAPlayerPage.objcurrenttime);
		String contentDuration = getText(PWAPlayerPage.objPlayerTotalDuration);
		if (!elapsedDuration.equals("")) {
			logger.info("Elapsed Time is displayed: " + elapsedDuration);
			extent.extentLogger("", "Elapsed Time is displayed: " + elapsedDuration);
		} else {
			logger.error("Elapsed Time is not displayed");
			extent.extentLoggerFail("", "Elapsed Time is not displayed");
		}
		if (!contentDuration.equals("")) {
			logger.info("Total Duration is displayed: " + contentDuration);
			extent.extentLogger("", "Total Duration is displayed: " + contentDuration);
		} else {
			logger.error("Total Duration is not displayed");
			extent.extentLoggerFail("", "Total Duration is not displayed");
		}
		extent.HeaderChildNode("HLS_193 : Validate the Player Controls on VOD Content playback");
		System.out.println("HLS_193 : Validate the Player Controls on VOD Content playback");

		if (!verifyIsElementDisplayed(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds icon")) {
			logger.error("Rewind 10 Seconds is not available for VOD");
			extent.extentLoggerFail("", "Rewind 10 Seconds is not available for VOD");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.objPlayOrPause, "Play/Pause icon")) {
			logger.error("Play/Pause icon is not available for VOD");
			extent.extentLoggerFail("", "Play/Pause icon is not available for VOD");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds icon")) {
			logger.error("Forward 10 Seconds is not available for VOD");
			extent.extentLoggerFail("", "Forward 10 Seconds is not available for VOD");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.objLivePlayerVolume, "Volume icon")) {
			logger.error("Volume icon is not available for VOD");
			extent.extentLoggerFail("", "Volume icon is not available for VOD");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.settingsBtn, "Settings icon")) {
			logger.error("Settings icon is not available for VOD");
			extent.extentLoggerFail("", "Settings icon is not available for VOD");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.objChromecastButton, "Chromecast icon ")) {
			logger.error("Chromecast icon is not available for VOD");
			extent.extentLoggerFail("", "Chromecast icon is not available for VOD");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.objSubtitleIcon, "Subtitle icon")) {
			logger.error("Subtitle icon is not available for VOD");
			extent.extentLoggerFail("", "Subtitle icon is not available for VOD");
		}
		if (!verifyIsElementDisplayed(PWAPlayerPage.maximizeBtn, "Maximize button")) {
			logger.error("Maximize button is not available for VOD");
			extent.extentLoggerFail("", "Maximize button is not available for VOD");
		}

		extent.HeaderChildNode(
				"HLS_205 : Validate the availability and functionality of maximizing and minimize icons.");
		System.out.println("HLS_205 : Validate the availability and functionality of maximizing and minimize icons.");
		click(PWAPlayerPage.maximizeBtn, "Maximize button");
		verifyElementPresentAndClick(PWAPlayerPage.minimizeBtn, "Minimize button");
		extent.HeaderChildNode(
				"HLS_204 : Verify Caption/Subtitle icon is displaying next to the Settings button in the Player section");
		System.out.println(
				"HLS_204 : Verify Caption/Subtitle icon is displaying next to the Settings button in the Player section");

		if (!verifyIsElementDisplayed(PWAPlayerPage.objSubtitleIcon, "Subtitle icon")) {
			logger.error("Subtitle icon is not available for VOD");
			extent.extentLoggerFail("", "Subtitle icon is not available for VOD");
		} else {
			click(PWAPlayerPage.playBtn, "Play button");
			if (!verifyIsElementDisplayed(PWAPlayerPage.objSubtitleTextOnPlayer, "Subtitle Text")) {
				logger.info("Subtitle Text is not displayed when the subtitle setting is OFF, expected behavior");
				extent.extentLogger("",
						"Subtitle Text is not displayed when the subtitle setting is OFF, expected behavior");
			} else {
				logger.error("Subtitle Text is displayed even though subtitle setting is OFF");
				extent.extentLoggerFail("", "Subtitle Text is displayed even though subtitle setting is OFF");
			}
			pausePlayer();
			click(PWAPlayerPage.objSubtitleIcon, "Subtitle icon");
			verifyElementPresent(PWAPlayerPage.objPlayerUnSelectedAudioTrack("English"), "Subtitle English");
			click(PWAPlayerPage.objPlayerUnSelectedAudioTrack("English"), "Subtitle English");
			act.tap(PointOption.point(x, y)).perform();
			click(PWAPlayerPage.playBtn, "Play button");
			waitExplicitlyForElementPresence(PWAPlayerPage.objSubtitleTextOnPlayer, 60, "Subtitle Text on Player");
			act.tap(PointOption.point(x, y)).perform();
			click(PWAPlayerPage.objSubtitleIcon, "Subtitle icon");
			verifyElementPresent(PWAPlayerPage.objPlayerUnSelectedAudioTrack("Off"), "Off Subtitle");
			click(PWAPlayerPage.objPlayerUnSelectedAudioTrack("Off"), "Subtitle Off");

			if (verifyIsElementDisplayed(PWAPlayerPage.objPlayerUnSelectedAudioTrack("English"), "Subtitle English")) {
				logger.error("English Subtitle is displayed even though setting is switched is OFF");
				extent.extentLoggerFail("", "English Subtitle is displayed even though setting is switched is OFF");
			} else {
				logger.info("English Subtitle is not displayed because setting is switched is OFF");
				extent.extentLogger("", "English Subtitle is displayed because setting is switched is OFF");
			}
		}
		extent.HeaderChildNode("HLS_195 : Content should jump 10 secs forward post tapping on 10 secs forward button.");
		System.out.println("HLS_195 : Content should jump 10 secs forward post tapping on 10 secs forward button.");
		Thread.sleep(3000);
		int timeBeforeFmin = 0, timeBeforeFsec = 0, timeBeforeF = 0;
		int timeAfterFmin = 0, timeAfterFsec = 0, timeAfterF = 0;
		int timeBeforeRmin = 0, timeBeforeRsec = 0, timeBeforeR = 0;
		int timeAfterRmin = 0, timeAfterRsec = 0, timeAfterR = 0;
		// Verify forward
		act.tap(PointOption.point(x, y)).perform();
		String currentDuration1 = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"current duration");
		logger.info("Time fetched before forward: " + currentDuration1);
		extent.extentLogger("timeBeforeForward", "Time fetched before forward: " + currentDuration1);
		String[] timeBeforeForward = currentDuration1.split(":");
		try {
			timeBeforeFmin = Integer.parseInt(timeBeforeForward[0]) * 60;
			timeBeforeFsec = Integer.parseInt(timeBeforeForward[1]);
			timeBeforeF = timeBeforeFmin + timeBeforeFsec;
			logger.info("Time fetched before forward in Secs: " + timeBeforeF);
			extent.extentLogger("timeBeforeForward", "Time fetched before forward in Secs: " + timeBeforeF);
		} catch (Exception e) {
			logger.error("Error in time coversion");
			extent.extentLogger("error", "Error in time coversion");
		}
		click(PWAPlayerPage.forward10SecBtn, "Forward 10 seconds");
		Thread.sleep(2000);
		// Get the current time duration after clicking the forward button
		playerTap();
		String currentDuration2 = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"current duration");
		logger.info("Time fetched after forward: " + currentDuration2);
		extent.extentLogger("timeAfterForward", "Time fetched after forward: " + currentDuration2);
		String[] timeAfterForward = currentDuration2.split(":");
		try {
			timeAfterFmin = Integer.parseInt(timeAfterForward[0]) * 60;
			timeAfterFsec = Integer.parseInt(timeAfterForward[1]);
			timeAfterF = timeAfterFmin + timeAfterFsec;
			logger.info("Time fetched after forward in Secs: " + timeAfterF);
			extent.extentLogger("timeBeforeForward", "Time fetched after forward in Secs: " + timeAfterF);

		} catch (Exception e) {
			logger.error("Error in time coversion");
			extent.extentLogger("error", "Error in time coversion");
		}
		if (timeAfterF >= (timeBeforeF + 10) && timeAfterF <= (timeBeforeF + 15)) {
			extent.extentLogger("Verify forward button", "Playback is forwarded by 10 seconds");
			logger.info("Playback is forwarded by 10 seconds");
		} else {
			extent.extentLoggerFail("Verify forward button", "Playback forward by 10 seconds has failed");
			logger.error("Playback forward by 10 seconds has failed");
		}
		extent.HeaderChildNode(
				"HLS_196 : Content should jump 10 secs backward post tapping on 10 secs backward button");
		System.out.println("HLS_196 : Content should jump 10 secs backward post tapping on 10 secs backward button");
		// Verify Rewind
		String currentDuration3 = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"current duration");
		logger.info("Time fetched before rewind: " + currentDuration3);
		extent.extentLogger("timeBeforeRewind", "Time fetched before rewind: " + currentDuration3);
		String[] timeBeforeRewind = currentDuration3.split(":");
		try {
			timeBeforeRmin = Integer.parseInt(timeBeforeRewind[0]) * 60;
			timeBeforeRsec = Integer.parseInt(timeBeforeRewind[1]);
			timeBeforeR = timeBeforeRmin + timeBeforeRsec;
			logger.info("Time fetched before rewind in Secs: " + timeBeforeR);
			extent.extentLogger("timeBeforeForward", "Time fetched before rewind in Secs: " + timeBeforeR);
		} catch (Exception e) {
			logger.error("Error in time coversion");
			extent.extentLogger("error", "Error in time coversion");
		}
		playerTap();
		click(PWAPlayerPage.rewind10SecBtn, "Rewind 10 seconds");
		waitTime(4000);
		// Get the current time duration after clicking the rewind button
		playerTap();
		String currentDuration4 = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"current duration");
		logger.info("Time fetched after rewind: " + currentDuration4);
		extent.extentLogger("timeAfterRewind", "Time fetched after rewind: " + currentDuration4);
		String[] timeAfterRewind = currentDuration4.split(":");
		try {
			timeAfterRmin = Integer.parseInt(timeAfterRewind[0]) * 60;
			timeAfterRsec = Integer.parseInt(timeAfterRewind[1]);
			timeAfterR = timeAfterRmin + timeAfterRsec;
			logger.info("Time fetched after rewind in Secs: " + timeAfterR);
			extent.extentLogger("timeBeforeForward", "Time fetched after rewind in Secs: " + timeAfterR);
		} catch (Exception e) {
			logger.error("Error in time coversion");
			extent.extentLogger("error", "Error in time coversion");
		}
		if (timeAfterR >= (timeBeforeR - 10) && timeAfterR < (timeBeforeR - 3)) {
			extent.extentLogger("Verify rewind button", "Playback is rewinded 10 seconds");
			logger.info("Playback is rewinded 10 seconds");
		} else {
			extent.extentLoggerFail("Verify rewind button", "Playback rewind by 10 seconds has failed");
			logger.error("Playback rewind by 10 seconds has failed");
		}
		extent.HeaderChildNode("HLS_200 : Validate the availability and functionality of the volume icon");
		System.out.println("HLS_200 : Validate the availability and functionality of the volume icon");
		// Verify the mute/unmute
		playerTap();
		verifyElementPresent(PWAPlayerPage.objMuteButton, "Audio Mute button");
		playerTap();
		click(PWAPlayerPage.objMuteButton, "Audio Mute button");
		verifyElementPresent(PWAPlayerPage.objUnmuteButton, "Audio Unmute button");
		playerTap();
		click(PWAPlayerPage.playBtn, "Play button");
		waitTime(4000);
		pausePlayer();
		extent.HeaderChildNode("HLS_201 : Validate the availability of setting options on the video players.");
		System.out.println("HLS_201 : Validate the availability of setting options on the video players.");
		click(PWAPlayerPage.settingsBtn, "Settings icon");
		click(PWAPlayerPage.qualityBtn, "Quality icon");
		waitTime(5000);
		// Select Quality from Quality menu
		int size = getDriver().findElements(PWAPlayerPage.objPlayerQualities).size();
		if (size == 0) {
			logger.info("Quality options unavailable");
			extent.extentLogger("quality", "Quality options unavailable");
		} else {
			for (int i = 1; i <= size; i++) {
				logger.info("Quality option available : "
						+ getAttributValue("innerText", PWAPlayerPage.objAllQualityOptions(i)));
				extent.extentLogger("quality", "Quality option available : "
						+ getAttributValue("innerText", PWAPlayerPage.objAllQualityOptions(i)));
			}
		}
		extent.HeaderChildNode(
				"HLS_202 : Validate the availability and functionality of quality option under settings");
		System.out.println("HLS_202 : Validate the availability and functionality of quality option under settings");
		// Select other qualities
		List<WebElement> unselected = findElements(PWAPlayerPage.objPlayerUnSelectedQuality);
		ArrayList<String> qualities = new ArrayList<String>();
		for (int i = 0; i < unselected.size(); i++) {
			qualities.add(unselected.get(i).getText());
		}
		for (int i = 0; i < 2; i++) {
			String selectedQualityBefore = getText(PWAPlayerPage.objPlayerSelectedQuality);
			logger.info("Quality option before selection: " + selectedQualityBefore);
			extent.extentLogger("quality", "Quality option before selection: " + selectedQualityBefore);
			String quality = qualities.get(i);
			Thread.sleep(5000);
			click(PWAPlayerPage.objPlayerUnSelectedQuality(quality), "Quality " + quality);
			Thread.sleep(5000);
			click(PWAPlayerPage.settingsBtn, "Settings icon");
			click(PWAPlayerPage.qualityBtn, "Quality icon");
			waitTime(5000);
			String selectedQualityAfter = getElementPropertyToString("innerText",
					PWAPlayerPage.objPlayerSelectedQuality, "Selected Quality");
			logger.info("Quality option after selection : " + selectedQualityAfter);
			extent.extentLogger("quality", "Quality option after selection: " + selectedQualityAfter);
			if (selectedQualityBefore.equals(selectedQualityAfter)) {
				logger.error("Quality selection unsuccessful");
				extent.extentLoggerFail("quality", "Quality selection unsuccessful");
			} else {
				logger.info("Quality selection successful");
				extent.extentLogger("quality", "Quality selection successful");
			}
		}
		ResponseInstance.updateWatchHistory(keywordContentID, 1, guesttoken); // required to clear watch history
		extent.HeaderChildNode(
				"HLS_203 : Validate the availability and functionality of the Audio track option under settings");
		System.out.println(
				"HLS_203 : Validate the availability and functionality of the Audio track option under settings");

		String keywordauContentID = "0-1-agentragh_1895058002-agentragh_1804723548-episode_1532299445";
		String keywordau = "Episode 13 - Agent Raghav";

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWAHomePage.objSearchField, keywordau, "Search");
		waitTime(5000);
		for (int i = 0; i < 2; i++) {
			try {
				waitTime(5000);
				click(PWASearchPage.objSearchedResult(keywordau), "Search Result");
				break;
			} catch (StaleElementReferenceException e) {
			}
		}
		waitTime(5000);
		directClickReturnBoolean(PWAHomePage.objCreateNewAccountPopUpClose, "Close in Sign Up Pop Up");
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		click(PWAPlayerPage.settingsBtn, "Settings icon");
		click(PWAPlayerPage.objPlayerAudioTrackIcon, "Audio Track icon");
		waitTime(5000);
		int sizeau = getDriver().findElements(PWAPlayerPage.objPlayerAudioTracksAvailable).size();
		if (sizeau == 0) {
			logger.info("Audio Tracks unavailable");
			extent.extentLogger("quality", "Audio Tracks unavailable");
		} else {
			for (int i = 1; i <= size; i++) {
				logger.info("Audio Tracks available : "
						+ getAttributValue("innerText", PWAPlayerPage.objAllQualityOptions(i)));
				extent.extentLogger("audio", "Audio Tracks available : "
						+ getAttributValue("innerText", PWAPlayerPage.objAllQualityOptions(i)));
			}
			// Select audio tracks
			List<WebElement> unselectedau = findElements(PWAPlayerPage.objPlayerUnSelectedAudioTrack);
			ArrayList<String> tracks = new ArrayList<String>();
			for (int i = 0; i < unselectedau.size(); i++) {
				tracks.add(unselectedau.get(i).getText());
			}
			for (int i = 0; i < 1; i++) {
				String selectedTrackBefore = getText(PWAPlayerPage.objPlayerSelectedAudioTrack);
				logger.info("Audio Track before selection: " + selectedTrackBefore);
				extent.extentLogger("quality", "Audio Track before selection: " + selectedTrackBefore);
				String track = tracks.get(i);
				waitTime(5000);
				click(PWAPlayerPage.objPlayerUnSelectedAudioTrack(track), "Audio Track " + track);
				waitTime(5000);
				click(PWAPlayerPage.settingsBtn, "Settings icon");
				click(PWAPlayerPage.objPlayerAudioTrackIcon, "Audio Track icon");
				waitTime(5000);
				String selectedTrackAfter = getElementPropertyToString("innerText",
						PWAPlayerPage.objPlayerSelectedAudioTrack, "Selected Audio Track");
				logger.info("Audio Track after selection : " + selectedTrackAfter);
				extent.extentLogger("quality", "Quality option after selection: " + selectedTrackAfter);
				if (selectedTrackBefore.equals(selectedTrackAfter)) {
					logger.error("Audio Track selection unsuccessful");
					extent.extentLoggerFail("quality", "Audio Track selection unsuccessful");
				} else {
					logger.info("Audio Track selection successful");
					extent.extentLogger("quality", "Audio Track selection successful");
				}
			}
		}
		extent.HeaderChildNode(
				"HLS_206 : Verify whether a player stays on top when user scrolls the page on playback.");
		System.out.println("HLS_206 : Verify whether a player stays on top when user scrolls the page on playback.");
		Swipe("UP", 4);
		playerTap();
		if (verifyIsElementDisplayed(PWAPlayerPage.playBtn, "Play button of Player")) {
			logger.info("Player stays on top when user scrolls the page on playback");
			extent.extentLogger("", "Player stays on top when user scrolls the page on playback");
		} else {
			logger.error("Player section has not remained stagnant on swiping contents up");
			extent.extentLoggerFail("quality", "Player section has not remained stagnant on swiping contents up");
		}
		ResponseInstance.updateWatchHistory(keywordauContentID, 1, guesttoken); // required to clear watch history
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
	}

	public boolean verifyAutoPlay(String Tabname) throws Exception {
		boolean autoplayingItemsPresent = false;
		boolean autoPlayed = false;
		int autoplayItem = 0;
		// String languageSmallText = allSelectedLanguages();
		Response tabResponse = ResponseInstance.getResponseForPages(Tabname.toLowerCase(), "en,hi,kn");
		int carouselItemsCount = tabResponse.jsonPath().get("buckets[0].items.size()");
		System.out.println(carouselItemsCount);
		if (carouselItemsCount > 7)
			carouselItemsCount = 7;
		for (int i = 0; i < carouselItemsCount; i++) {
			try {
				if (tabResponse.jsonPath().get("buckets[0].items[" + i + "].tags[0]").toString().equals("Autoplay")) {
					autoplayItem = i;
					autoplayingItemsPresent = true;
					break;
				}
			} catch (Exception e) {
			}
		}
		if (autoplayingItemsPresent == false) {
			logger.info("Autoplay could not be verified because no Autoplaying Carousel Items");
			extent.extentLoggerWarning("Autoplay",
					"Autoplay could not be verified because no Autoplaying Carousel Items");
		} else {
			navigateToAnyScreen(Tabname);
			click(PWAHamburgerMenuPage.carouselDot(autoplayItem + 1), "Carousel Dot " + (autoplayItem + 1) + "");
			waitTime(3000);
			if (verifyElementPresent(PWANewsPage.objRight, "Right facing arrow on Carousel")) {
				logger.info("Autoplay is begun and verified by presence of Right facing arrow");
				extent.extentLoggerPass("", "Autoplay is begun and verified by presence of Right facing arrow");
				autoPlayed = true;
			} else {
				logger.error("Autoplay has failed");
				extent.extentLoggerFail("", "Autoplay has failed");
				autoPlayed = false;
			}
			if (verifyElementPresent(PWANewsPage.objLeft, "Left facing arrow on Carousel")) {
				logger.info("Autoplay is begun and verified by presence of Left facing arrow");
				extent.extentLoggerPass("", "Autoplay is begun and verified by presence of Left facing arrow");
			} else {
				logger.error("Autoplay has failed");
				extent.extentLoggerFail("", "Autoplay has failed");

			}
		}
		if (autoPlayed)
			return true;
		else
			return false;
	}

	public void verifyShowDetailsUIComponents() throws Exception {
		String nextPageTitle = "";
		if (verifyIsElementDisplayed(PWAShowsPage.objShowsTitle, "Shows Details page"))
			nextPageTitle = getText(PWAShowsPage.objShowsTitle);
		if (!nextPageTitle.equals("")) {
			logger.info("Navigated to the show details page: \"" + nextPageTitle + "\"");
			extent.extentLogger("", "Navigated to the show details page: \"" + nextPageTitle + "\"");
		} else {
			logger.error("Failed to navigate to show details page");
			extent.extentLoggerFail("playerScreen", "Failed to navigate to show details page");
		}

	}

	public void swipeTillTrayAndClickContentCard(String trayTitle) throws Exception {
		int noOfSwipes = 10;
		String trayTitleUI = "";
		boolean foundtrayInPage = false, trayFoundInUI = false;
		String userType = getParameterFromXML("userType");
		for (int i = 0; i <= noOfSwipes; i++) {
			List<WebElement> trays = findElements(PWALandingPages.objTrayTitle);
			for (int j = 0; j < trays.size(); j++) {
				try {
					trayTitleUI = trays.get(j).getAttribute("innerText");
					// System.out.println(trayTitleUI);
					// System.out.println(trayTitle);
					if (trayTitleUI.toLowerCase().contains(trayTitle.toLowerCase())) {
						logger.info(trayTitle + " tray is present");
						extent.extentLogger("", trayTitle + " tray is present");
						foundtrayInPage = true;
						break;
					}
				} catch (Exception e) {
				}
			}
			if (foundtrayInPage == false) {
				PartialSwipe("UP", 1);
				waitTime(5000);
			} else {
				break;
			}
		}
		if (foundtrayInPage == true) {
			trayFoundInUI = swipeTillElement(15, PWALandingPages.objTrayTitleInUIContains(trayTitleUI),
					"\"" + trayTitleUI + "\" tray");
			if (trayFoundInUI == true) {
				// handle mandatory pop up
				mandatoryRegistrationPopUp(userType);
				swipeTillElementAndClick(3, PWALandingPages.trayCard(trayTitleUI), "First Asset in tray");
				String nextPageTitle = "";
				waitTime(10000);
				if (verifyIsElementDisplayed(PWAPlayerPage.objContentShowTitle, "Show Details")) {
					String viewallnavigationtittle = getText(PWAPlayerPage.objContentShowTitle);
					logger.info("Navigated to Show Details page from View All Page: " + viewallnavigationtittle);
					extent.extentLogger("View All",
							"Navigated to Show Details page from View All Page: " + viewallnavigationtittle);
					click(PWAShowsPage.objFirstAssetImageFirstRail, "First card image from first rail");
				}
				verifyElementPresent(PWAHomePage.objKalKalturaPlayer, "Kaltura Player");
				if (userType.equals("Guest") || userType.equals("NonSubscribedUser") || userType.equals("ClubUser")) {
					verifyIsElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
							"'You're watching a trailer' message on the player");
				}
				nextPageTitle = getText(PWAPlayerPage.objContentTitle);
				if (!nextPageTitle.equals("")) {
					logger.info("Navigated to Consumptions page: \"" + nextPageTitle + "\"");
					extent.extentLogger("", "Navigated to Consumptions page: \"" + nextPageTitle + "\"");
				} else {
					logger.error("Failed to navigate to Consumptions page");
					extent.extentLoggerFail("playerScreen", "Failed to navigate to Consumptions page");
				}
			}
		} else {
			logger.error(trayTitle + " tray is not present in Page");
			extent.extentLoggerFail("", trayTitle + " tray is not present in Page");
		}
		reloadHome();
	}

	public boolean verifyTrayPresence(String trayTitle) throws Exception {
		int noOfSwipes = 10;
		String trayTitleUI = "";
		boolean foundtrayInPage = false;
		for (int i = 0; i <= noOfSwipes; i++) {
			List<WebElement> trays = findElements(PWALandingPages.objTrayTitle);
			for (int j = 0; j < trays.size(); j++) {
				try {
					trayTitleUI = trays.get(j).getAttribute("innerText");
					if (trayTitleUI.toLowerCase().contains(trayTitle.toLowerCase())) {
						logger.info(trayTitle + " tray is present");
						extent.extentLogger("", trayTitle + " tray is present");
						foundtrayInPage = true;
						return true;
					}
				} catch (Exception e) {
				}
			}
			if (foundtrayInPage == false) {
				PartialSwipe("UP", 1);
				waitTime(5000);
			} else {
				break;
			}
		}
		return false;
	}

	public void swipeTillTrayAndClickShow(String trayTitle) throws Exception {
		int noOfSwipes = 10;
		String trayTitleUI = "";
		boolean foundtrayInPage = false, trayFoundInUI = false;
		for (int i = 0; i <= noOfSwipes; i++) {
			List<WebElement> trays = findElements(PWALandingPages.objTrayTitle);
			for (int j = 0; j < trays.size(); j++) {
				try {
					trayTitleUI = trays.get(j).getAttribute("innerText");
					if (trayTitleUI.toLowerCase().contains(trayTitle.toLowerCase())) {
						logger.info(trayTitle + " tray is present");
						extent.extentLogger("", trayTitle + " tray is present");
						foundtrayInPage = true;
						break;
					}
				} catch (Exception e) {
				}
			}
			if (foundtrayInPage == false) {
				PartialSwipe("UP", 1);
				waitTime(5000);
			} else {
				break;
			}
		}
		if (foundtrayInPage == true) {
			trayFoundInUI = swipeTillElement(15, PWALandingPages.objTrayTitleInUIContains(trayTitleUI),
					"\"" + trayTitleUI + "\" tray");
			if (trayFoundInUI == true) {
				// handle mandatory pop up
				mandatoryRegistrationPopUp(userType);
				swipeTillElementAndClick(3, PWALandingPages.trayCard(trayTitleUI), "First Asset in tray");
				String nextPageTitle = "";
				waitTime(5000);
				if (verifyIsElementDisplayed(PWAShowsPage.objShowsTitle, "Shows Details page"))
					nextPageTitle = getText(PWAShowsPage.objShowsTitle);
				if (!nextPageTitle.equals("")) {
					logger.info("Navigated to the show details page: \"" + nextPageTitle + "\"");
					extent.extentLogger("", "Navigated to the show details page: \"" + nextPageTitle + "\"");
				} else {
					logger.error("Failed to navigate to show details page: \"" + nextPageTitle + "\"");
					extent.extentLoggerFail("playerScreen",
							"Failed to navigate to show details page: \"" + nextPageTitle + "\"");
				}
			}
		} else {
			logger.error(trayTitle + " tray is not present in Shows Page");
			extent.extentLoggerFail("", trayTitle + " tray is not present in Shows Page");
		}

	}

	public void verificationOfBackToTop(String screen) throws Exception {
		Swipe("UP", 1);
		Swipe("UP", 1);
		waitTime(3000);
		if (verifyElementPresent(PWAZee5OriginalPage.objNavigateToTop, "Back to Top")) {
			click(PWAZee5OriginalPage.objNavigateToTop, "Back to Top Arrow");
			if (screen.equalsIgnoreCase("live tv")) {
				waitforLiveTabToLoad();
			}
			waitForElementDisplayed(PWAZee5OriginalPage.objTrayTitle, 5);
			if (verifyIsElementDisplayed(PWAZee5OriginalPage.objTrayTitle, "First Tray")) {
				logger.info(
						"On tapping of 'Right side bottom arrow' user is navigated to top of screen without scrolling");
				extent.extentLogger("Right side bottom arrow",
						"On tapping of 'Right side bottom arrow' user is navigated to top of screen without scrolling");
			}
		} else {
			logger.error("Back to Top arrow is not displayed");
			extent.extentLoggerFail("", "Back to Top arrow is not displayed");
		}
	}

	public void PWAPagesNavigationAndTabHighlight(String Tabname) throws Exception {
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		navigateToAnyScreen(Tabname);
		waitForElementDisplayed(PWAHomePage.objHighlightedTab(Tabname), 10);
		if (verifyElementPresent(PWAHomePage.objHighlightedTab(Tabname), Tabname)) {
			logger.info(Tabname + " tab is highlighted, user is able to navigate to " + Tabname + " landing page");
			extent.extentLogger("",
					Tabname + " tab is highlighted, user is able to navigate to " + Tabname + " landing page");
		} else {
			logger.error(Tabname + " tab is not highlighted, user failed to navigate to " + Tabname + " landing page");
			extent.extentLoggerFail("",
					Tabname + " tab is not highlighted, user failed to " + Tabname + " landing page");
		}
	}

	public void PWAPremiumOrClubIconVerification(String Tabname) throws Exception {
		navigateToAnyScreen(Tabname);
		waitTime(3000);
		if (Tabname.equalsIgnoreCase("Club") || Tabname.equalsIgnoreCase("Shows")) {
			for (int i = 0; i < 5; i++) {
				if (findElements(PWAHomePage.objClubTag).size() > 0) {
					logger.info("Club Tag is displayed");
					extent.extentLogger("Club Tag", "Club Tag is displayed");
					break;
				} else {
					logger.info("Club Tag is not displayed");
					extent.extentLogger("Club Tag", "Club Tag is not displayed");
					PartialSwipe("UP", 1);
					waitTime(2000);
				}
			}
		} else if (Tabname.equalsIgnoreCase("Play")) {
			for (int i = 0; i < 5; i++) {
				if (findElements(PWAHomePage.objJoyStickTag).size() > 0) {
					logger.info("Joystick Tag is displayed");
					extent.extentLogger("Joystick Tag", "Joystick Tag is displayed");
					break;
				} else {
					logger.info("Joystick Tag is not displayed");
					extent.extentLogger("Joystick Tag", "Joystick Tag is not displayed");
					PartialSwipe("UP", 1);
				}
			}
		} else {
			for (int i = 0; i < 5; i++) {
				if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
					logger.info("Premium tag is displayed");
					extent.extentLogger("Premium Tag", "Premium Tag is displayed");
					break;
				} else {
					logger.info("Premium tag is not displayed");
					extent.extentLogger("Premium Tag", "Premium Tag is not displayed");
					PartialSwipe("UP", 1);
				}
			}
		}
		clickElementWithLocator(PWAHomePage.objBackToTopArrow);
	}

	public void fetchLogs() throws IOException, InterruptedException {
		String path = System.getProperty("user.dir") + File.separator + "tempLogFile.txt";
		System.out.println(path);
		File myfile = new File(path);
		myfile.createNewFile();
		FileWriter myWriter = new FileWriter(path);
		myWriter.write(startAdbLogs().toString());
		myWriter.close();
	}

	@SuppressWarnings("unused")
	public ArrayList<String> startAdbLogs() throws InterruptedException, IOException {
		// String command="adb logcat > \""+path+"\"";
		String command = "adb logcat";
		System.out.println(command);
		execute = Runtime.getRuntime().exec(command);
		InputStream is = execute.getInputStream();
		InputStreamReader isr = new InputStreamReader(is);
		BufferedReader br = new BufferedReader(isr);
		final StringBuffer output = new StringBuffer();
		String line;
		ArrayList<String> arrList = new ArrayList<String>();
		for (int i = 0; i < 10000; i++) {
			try {
				line = br.readLine();
				if (line == null) {
					execute.destroy();
					break;
				}
				System.out.println(line);
				arrList.add(line);
			} catch (Exception e) {
			}

		}
		/*
		 * while ((line = br.readLine()) != null) { System.out.println(line); }
		 */
		return arrList;

	}

	public void PWADFPHighLevel(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("DFP Validation - Movie");
			logger.info("DFP Validation - Movie");
			String movieContent = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("movieDFP");
			verifyAdForContentUsingAPIForDuration(movieContent, "movie");
			reloadHome();
			/*
			 * extent.HeaderChildNode("DFP Validation - ZEE5 Originals");
			 * logger.info("DFP Validation - ZEE5 Originals"); String originalsContent =
			 * Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().
			 * getParameter("zee5OriginalDFP");
			 * verifyAdForContentUsingAPIForDuration(originalsContent,"zee5originals");
			 * 
			 * extent.HeaderChildNode("DFP Validation - Music");
			 * logger.info("DFP Validation - Music"); String musicContent =
			 * Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().
			 * getParameter("musicDFP");
			 * verifyAdForContentUsingAPIForDuration(musicContent,"music"); reloadHome();
			 */
			extent.HeaderChildNode("DFP Validation - Episode");
			logger.info("DFP Validation - Episode");
			String episodeContent = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("episodeDFP");
			verifyAdForContentUsingAPIForDuration(episodeContent, "episode");
			reloadHome();
		}
	}

	@SuppressWarnings("rawtypes")
	public void verifyAdForContentUsingAPIForDuration(String contentName, String contentType) throws Exception {
		int deviceWidth = getDriver().manage().window().getSize().width;
		int deviceHeight = getDriver().manage().window().getSize().height;
		int x = deviceWidth / 2;
		int y = deviceHeight / 4;
		TouchAction act = new TouchAction(getDriver());
		String totalDuration = "", currentDuration = "", currentUrl = "", contentURL = "", midRollUrl = "",
				postRollUrl = "";
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWAHomePage.objSearchField, contentName + "\n", "Search");
		waitTime(7000);
		click(PWASearchPage.objSearchedResult(contentName), "Search Result");
		// Get API details
		contentURL = getDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID fetched from URL: " + contentID);
		logger.info("Content ID fetched from URL: " + contentID);
		Response resp = ResponseInstance.getContentDetails(contentID, contentType);
		System.out.println(resp.getBody().asString());
		if (resp.getBody().asString().contains("\"error_code\":401")) {
			resp = ResponseInstance.getContentDetails(contentID, contentType);
			System.out.println(resp.getBody().asString());
		}
		String durationAPI = resp.jsonPath().get("duration").toString().trim();
		extent.extentLogger("", "Total Duration in seconds from API: " + durationAPI);
		logger.info("Total Duration in seconds from API: " + durationAPI);
		int durationfullInt = Integer.parseInt(durationAPI);
		int durationmidInt = durationfullInt / 2;
		String durationfull = String.valueOf(durationfullInt);
		String durationmid = String.valueOf(durationmidInt);
		String contenturl = getDriver().getCurrentUrl();

		// PRE-ROLL
		extent.extentLogger("", "-----------------------Verification of PRE-ROLL-----------------------");
		logger.info("Verification of PRE-ROLL");
		currentUrl = getDriver().getCurrentUrl();
		extent.extentLogger("", "Current URL: " + currentUrl);
		logger.info("Current URL: " + currentUrl);
		if (!waitForPlayerAdToComplete("Video Player")) {
			logger.error("Ad Play failure");
			extent.extentLoggerFail("", "Ad Play failure");
		}
		for (int i = 0; i < 2; i++) {
			act.tap(PointOption.point(x, y)).perform();
			try {
				WebElement totalDurationElement = getDriver().findElement(PWAPlayerPage.objtotaltime);
				totalDuration = totalDurationElement.getText();
				if (!totalDuration.equals("")) {
					extent.extentLogger("apidata", "Total Duration displayed on player: " + totalDuration);
					logger.info("Total Duration displayed on player: " + totalDuration);
					break;
				}
			} catch (Exception e) {
			}
		}
		for (int i = 0; i < 2; i++) {
			act.tap(PointOption.point(x, y)).perform();
			try {
				WebElement currentDurationElement = getDriver().findElement(PWAPlayerPage.objcurrenttime);
				currentDuration = currentDurationElement.getText();
				if (!currentDuration.equals("")) {
					extent.extentLogger("apidata", "Current Duration displayed on player: " + currentDuration);
					logger.info("Current Duration displayed on player: " + currentDuration);
					break;
				}
			} catch (Exception e) {
			}
		}
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		// MID-ROLL
		extent.extentLogger("", "-----------------------Verification of MID-ROLL-----------------------");
		logger.info("Verification of MID-ROLL");
		midRollUrl = contenturl + "?t=" + durationmid;
		getDriver().get(midRollUrl);
		currentUrl = getDriver().getCurrentUrl();
		extent.extentLogger("", "Current URL: " + currentUrl);
		logger.info("Current URL: " + currentUrl);
		if (!waitForPlayerAdToComplete("Video Player")) {
			logger.error("Ad Play failure");
			extent.extentLoggerFail("", "Ad Play failure");
		}
		for (int i = 0; i < 2; i++) {
			act.tap(PointOption.point(x, y)).perform();
			try {
				WebElement currentDurationElement = getDriver().findElement(PWAPlayerPage.objcurrenttime);
				currentDuration = currentDurationElement.getText();
				if (!currentDuration.equals("")) {
					extent.extentLogger("apidata", "Current Duration displayed on player: " + currentDuration);
					logger.info("Current Duration displayed on player: " + currentDuration);
					break;
				}
			} catch (Exception e) {
			}
		}
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		// POST-ROLL
		extent.extentLogger("", "-----------------------Verification of POST-ROLL-----------------------");
		logger.info("Verification of POST-ROLL");
		postRollUrl = contenturl + "?t=" + durationfull;
		getDriver().get(postRollUrl);
		currentUrl = getDriver().getCurrentUrl();
		extent.extentLogger("", "Current URL: " + currentUrl);
		logger.info("Current URL: " + currentUrl);
		if (!waitForPlayerAdToComplete("Video Player")) {
			logger.error("Ad Play failure");
			extent.extentLoggerFail("", "Ad Play failure");
		}
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
	}

	public void verifyAdForContentUsingLocatorForDuration(String userType) throws Exception {
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		// String keyword =
		// Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().getParameter("consumptionsFreeContent");
		String keyword = "Love U Ganesh";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWAHomePage.objSearchField, keyword + "\n", "Search");
		waitTime(5000);
		click(PWASearchPage.objSearchedResult(keyword), "Search Result");

		// PRE-ROLL
		extent.extentLogger("", "Verification of PRE-ROLL");
		logger.info("Verification of PRE-ROLL");
		waitForPlayerAdToComplete("Video Player");
		waitTime(3000);
		String totalduration = "";
		try {
			totalduration = getText(PWAPlayerPage.totalDurationTime);
			extent.extentLogger("apidata", "Total Duration displayed on player: " + totalduration);
			logger.info("Total Duration displayed on player: " + totalduration);
		} catch (Exception e) {
		}

		int durationfullInt = timeToSec(totalduration);
		System.out.println(durationfullInt);
		int durationmidInt = durationfullInt / 2;
		System.out.println(durationmidInt);
		String durationfull = String.valueOf(durationfullInt);
		String durationmid = String.valueOf(durationmidInt);
		String url = getDriver().getCurrentUrl();

		// MID-ROLL
		extent.extentLogger("", "Verification of MID-ROLL");
		logger.info("Verification of MID-ROLL");
		url = url + "?t=" + durationmid;
		getDriver().get(url);
		waitForPlayerAdToComplete("Video Player");

		// POST-ROLL
		extent.extentLogger("", "Verification of POST-ROLL");
		logger.info("Verification of POST-ROLL");
		url = url + "?t=" + durationfull;
		getDriver().get(url);
		waitForPlayerAdToComplete("Video Player");
	}

	public void PWAZEEPLEXPage(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("PWA_2686, PWA_2699, PWA_2712 : Verify user is navigate to ZeePlex landing page");
		System.out.println("PWA_2686, PWA_2699, PWA_2712 : Verify user is navigate to ZeePlex landing page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode("PWA_2687, PWA_2700, PWA_2713 : Verify content is loaded when user scroll the page");
		System.out.println("PWA_2687, PWA_2700, PWA_2713 : Verify content is loaded when user scroll the page");
		Swipe("UP", 2);
		List<WebElement> titles = getDriver().findElements(PWAMoviesPage.objTVODTitles);
		ArrayList<String> titlestext = new ArrayList<String>();
		if (titles.size() > 1) {
			for (int i = 0; i < titles.size(); i++) {
				titlestext.add(titles.get(i).getText());
			}
			logger.info("TVOD Titles displayed: " + titlestext);
			extent.extentLogger("titles", "TVOD Titles displayed: " + titlestext);
			logger.info("TVOD contents are loaded when user scroll the page");
			extent.extentLoggerPass("Tab", "TVOD contents are loaded when user scroll the page");
		} else {
			logger.error("TVOD Titles failed to load after scrolling");
			extent.extentLoggerFail("Tab", "TVOD Titles failed to load after scrolling");
		}

		extent.HeaderChildNode("PWA_2688, PWA_2701, PWA_2714 : Verify the Plex content trailer is available");
		System.out.println("PWA_2688, PWA_2701, PWA_2714 : Verify the Plex content trailer is available");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objTrailer, "Trailer button");
		waitTime(5000);
		verifyElementPresent(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
		if (!waitExplicitlyForElementPresence(PWAPlayerPage.objWatchingATrailerMessage, 60,
				"'You're watching a trailer' message on the player")) {
			extent.extentLoggerFail("", "Plex content trailer is unavailable");
			logger.error("Plex content trailer is unavailable");
		}
		Back(1);
		waitTime(3000);
		extent.HeaderChildNode(
				"PWA_2691, PWA_2704, PWA_2717 : Verify Rental pop-up is displayed when User Click on Rent INR CTA");
		System.out.println(
				"PWA_2691, PWA_2704, PWA_2717 : Verify Rental pop-up is displayed when User Click on Rent INR CTA");
		Swipe("UP", 1);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objrentforINR, "Rent for INR");
		verifyElementPresent(PWAHamburgerMenuPage.objrentforINRpopup, "Rental Pop Up");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objrentforINRpopupClose, "Rental Pop Up Close icon");

		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"PWA_2705, PWA_2718  : Verify Plex rented details are displayed in My Profile-> Zeeplex rentals");
			System.out.println(
					"PWA_2705, PWA_2718  : Verify Plex rented details are displayed in My Profile-> Zeeplex rentals");
			click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			waitTime(2000);
			click(PWAHamburgerMenuPage.objDownArrow("My Account"), "Expander button");
			PartialSwipe("UP", 1);
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");
			Thread.sleep(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals Page");
			Thread.sleep(5000);
			Back(1);
		}

		extent.HeaderChildNode("PWA_2690, PWA_2703, PWA_2716 : Verify Zeeplex content banner in Home page");
		System.out.println("PWA_2693, PWA_2706, PWA_2719 : Verify Zeeplex content banner in Home page");
		navigateToAnyScreen("Home");
		boolean foundBannerInHome = false;
		for (int i = 0; i < 20; i++) {
			List<WebElement> zeePlexBanner = findElements(PWAHamburgerMenuPage.objZeeplexComesToYouHomePage);
			if (zeePlexBanner.size() > 0) {
				logger.info("Zee Plex 'Theatre comes to You' banner is displayed in Home page");
				extent.extentLogger("", "Zee Plex 'Theatre comes to You' banner is displayed in Home page");
				foundBannerInHome = true;
				break;
			} else
				PartialSwipe("UP", 1);
		}
		if (!foundBannerInHome) {
			extent.extentLoggerFail("", "Zee Plex 'Theatre comes to You' banner is not displayed in Home page");
			logger.error("Zee Plex 'Theatre comes to You' banner is not displayed in Home page");
		}
		click(PWAHomePage.objBackToTopArrow, "Back to Top arrow");

		extent.HeaderChildNode(
				"PWA_2693, PWA_2706, PWA_2719 : Verify Zee Plex Theatre comes to You banner is displayed on Top of the page");
		System.out.println(
				"PWA_2693, PWA_2706, PWA_2719 : Verify Zee Plex Theatre comes to You banner is displayed on Top of the page");
		navigateToAnyScreen(tabName);
		verifyElementPresent(PWAHamburgerMenuPage.objZeeplexComesToYou, "Zee Plex 'Theatre comes to You' banner");

		extent.HeaderChildNode(
				"PWA_2694, PWA_2707, PWA_2720 : Verify 'How it works' pop-up is displayed when user taps on 'How it works' CTA");
		System.out.println(
				"PWA_2694, PWA_2707, PWA_2720 : Verify 'How it works' pop-up is displayed when user taps on 'How it works' CTA");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplexHowitWorksMobile, "How it Works button");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objzeeplexHowitWorkspopup, "Zeeplex How It Works Pop Up");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplexHowitworkspopupClose,
				"Close icon of How It Works Pop Up");

		extent.HeaderChildNode(
				"PWA_2695, PWA_2708, PWA_2721,  : Verify not able to watch the Zee plex content once the Watch Time & Rental period expries");
		System.out.println(
				"PWA_2695, PWA_2708, PWA_2721 : Verify not able to watch the Zee plex content once the Watch Time & Rental period expries");
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser"))
			logout();
		waitTime(5000);
		loginWithUserEmail("tvod@mailnesia.com", "123456");
		navigateToAnyScreen(tabName);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplexcontentcard, "ZEEPLEX content card");
		waitTime(5000);
		verifyElementPresent(PWAHamburgerMenuPage.objrentforinrbelowtheplayer, "Rent for INR");
		if (verifyIsElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
				"'You're watching a trailer' message on the player")) {
			logger.info("Expired User is not able to play the zeeplex content, expected behavior");
			extent.extentLoggerPass("", "Expired User is not able to play the zeeplex content, expected behavior");
		} else {
			extent.extentLoggerFail("", "Trailer is not shown, Expired User can watch the zeeplex content");
			logger.error("Trailer is not shown, Expired User can watch the zeeplex content");
		}
		String user = "", pass = "";
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			user = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("SubscribedUserName");
			pass = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("SubscribedPassword");
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			user = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("NonsubscribedUserName");
			pass = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("NonsubscribedPassword");
		}
		reloadHome();
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			logout();
			loginWithUserEmail(user, pass);
			selectLanguages();
		}
	}

	@SuppressWarnings("unused")
	public void PWAVerifyTitleInAnchorTags(String userType) throws Exception {
		extent.HeaderChildNode("Task PWA2-6003 : SEO - Anchor Text and Link for Top Navigation, Mega Menu & Footer");
		reloadHome();
		Actions act = new Actions(getDriver());
		{
			// Home Mega Menu Bar
			extent.extentLogger("", "---------- Home Mega Menu Bar verification -----------");
			navigateToAnyScreen("Home");
			String anchorTitleForHomeExp = "Watch TV Shows, Originals, Movies & Live News Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForHomeExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForHomeExp);
			String anchorTitleForHome = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Home"),
					"Home anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForHome);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForHome);
			if (anchorTitleForHome.equals(anchorTitleForHomeExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		{
			// Movies Mega Menu Bar
			extent.extentLogger("", "---------- Movies Mega Menu Bar verification -----------");
			navigateToAnyScreen("Movies");
			String anchorTitleForMoviesExp = "Watch Movies Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForMoviesExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForMoviesExp);
			String anchorTitleForMovies = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Movies"),
					"Movies anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForMovies);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForMovies);
			if (anchorTitleForMovies.equals(anchorTitleForMoviesExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		{
			// TV Shows Mega Menu Bar
			extent.extentLogger("", "---------- TV Shows Mega Menu Bar verification -----------");
			navigateToAnyScreen("TV Shows");
			String anchorTitleForShowsExp = "Watch TV Serials & Shows Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForShowsExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForShowsExp);
			String anchorTitleForShows = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Shows"),
					"Shows anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForShows);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForShows);
			if (anchorTitleForShows.equals(anchorTitleForShowsExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		{
			// Club Mega Menu Bar
			extent.extentLogger("", "---------- Club Mega Menu Bar verification -----------");
			navigateToAnyScreen("Club");
			String anchorTitleForClubExp = "ZEE5 Club Package Subscription";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForClubExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForClubExp);
			String anchorTitleForClub = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Club"),
					"Club anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForClub);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForClub);
			if (anchorTitleForClub.equals(anchorTitleForClubExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		{
			// Play Mega Menu Bar
			extent.extentLogger("", "---------- Play Mega Menu Bar verification -----------");
			navigateToAnyScreen("Play");
			String anchorTitleForPlayExp = "Play Game Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForPlayExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForPlayExp);
			String anchorTitleForPlay = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Play"),
					"Play anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForPlay);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForPlay);
			if (anchorTitleForPlay.equals(anchorTitleForPlayExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		{
			// Music Mega Menu Bar
			extent.extentLogger("", "---------- Music Mega Menu Bar verification -----------");
			navigateToAnyScreen("Music");
			String anchorTitleForMusicExp = "Watch Music Videos Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForMusicExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForMusicExp);
			String anchorTitleForMusic = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Music"),
					"Music anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForMusic);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForMusic);
			if (anchorTitleForMusic.equals(anchorTitleForMusicExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		{
			// Stories Mega Menu Bar
			extent.extentLogger("", "---------- Stories Mega Menu Bar verification -----------");
			String anchorTitleForStoriesExp = "Stories";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForStoriesExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForStoriesExp);
			String anchorTitleForStories = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Stories"),
					"Stories anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForStories);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForStories);
			if (anchorTitleForStories.equals(anchorTitleForStoriesExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
			reloadHome();
		}
		{
			// ZEE5 Originals Mega Menu Bar
			extent.extentLogger("", "---------- ZEE5 Originals Mega Menu Bar verification -----------");
			navigateToAnyScreen("ZEE5 Originals");
			String anchorTitleForZEE5OriginalsExp = "Watch ZEE5 Original Web Series & Movies";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForZEE5OriginalsExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForZEE5OriginalsExp);
			String anchorTitleForZEE5Originals = getElementPropertyToString("title",
					PWAHomePage.objHomeBarText("ZEE5 Originals"), "ZEE5 Originals anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForZEE5Originals);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForZEE5Originals);
			if (anchorTitleForZEE5Originals.equals(anchorTitleForZEE5OriginalsExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		{
			// ZEE5 Plex Mega Menu Bar
			extent.extentLogger("", "---------- ZEE5 Plex Mega Menu Bar verification -----------");
			navigateToAnyScreen("ZEEPLEX");
			String anchorTitleForZeeplexExp = "Rent & Watch Movies on ZEEPLEX";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForZeeplexExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForZeeplexExp);
			String anchorTitleForZeeplex = getElementPropertyToString("title", PWAHomePage.objHomeBarText("ZEEPLEX"),
					"ZEE5 Originals anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForZeeplex);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForZeeplex);
			if (anchorTitleForZeeplex.equals(anchorTitleForZeeplexExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		{
			// News Mega Menu Bar
			extent.extentLogger("", "---------- News Mega Menu Bar verification -----------");
			navigateToAnyScreen("News");
			String anchorTitleForNewsExp = "Watch Latest News & Updates";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForNewsExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForNewsExp);
			String anchorTitleForNews = getElementPropertyToString("title", PWAHomePage.objHomeBarText("News"),
					"News anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForNews);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForNews);
			if (anchorTitleForNews.equals(anchorTitleForNewsExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
			reloadHome();
		}
		{
			// Premium Mega Menu Bar
			extent.extentLogger("", "---------- Premium Mega Menu Bar verification -----------");
			navigateToAnyScreen("Premium");
			String anchorTitleForPremiumExp = "ZEE5 Premium Package Subscription";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForPremiumExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForPremiumExp);
			String anchorTitleForPremium = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Premium"),
					"Premium anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForPremium);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForPremium);
			if (anchorTitleForPremium.equals(anchorTitleForPremiumExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		{
			// Kids Mega Menu Bar
			extent.extentLogger("", "---------- Kids Mega Menu Bar verification -----------");
			navigateToAnyScreen("Kids");
			String anchorTitleForKidsExp = "Watch Kids Shows, Cartoons. Movies & Videos Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForKidsExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForKidsExp);
			String anchorTitleForKids = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Kids"),
					"Kids anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForKids);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForKids);
			if (anchorTitleForKids.equals(anchorTitleForKidsExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		{
			// Live TV Mega Menu Bar
			extent.extentLogger("", "---------- Live TV Mega Menu Bar verification -----------");
			navigateToAnyScreen("Live TV");
			String anchorTitleForLiveTVExp = "Watch Live TV Channels Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForLiveTVExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForLiveTVExp);
			String anchorTitleForLiveTV = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Live TV"),
					"Live TV anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForLiveTV);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForLiveTV);
			if (anchorTitleForLiveTV.equals(anchorTitleForLiveTVExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
		{
			// Videos Mega Menu Bar
			extent.extentLogger("", "---------- Videos Mega Menu Bar verification -----------");
			navigateToAnyScreen("Videos");
			String anchorTitleForVideosExp = "Watch Official Films Videos";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForVideosExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForVideosExp);
			String anchorTitleForVideos = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Videos"),
					"Videos anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForVideos);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForVideos);
			if (anchorTitleForVideos.equals(anchorTitleForVideosExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
	}

	public String getLanguageComplete(String languageAPI) throws Exception {
		if (languageAPI.equals("kn"))
			return "Kannada";
		else if (languageAPI.equals("en"))
			return "English";
		else if (languageAPI.equals("mr"))
			return "Marati";
		else if (languageAPI.equals("hi"))
			return "Hindi";
		else if (languageAPI.equals("te"))
			return "Telugu";
		else if (languageAPI.equals("ta"))
			return "Tamil";
		else if (languageAPI.equals("ml"))
			return "Malayalam";
		else if (languageAPI.equals("bn"))
			return "Bengali";
		else
			return "";
	}

	public void PWAVerifyImageWebP(String userType) throws Exception {
		extent.HeaderChildNode("Task PWA2-6030 : Serve WebP image instead of JPEG");
		reloadHome();
		String imageSource = getElementPropertyToString("src", PWAHomePage.objMastheadCarouselCurrentContent,
				"Carousel Card");
		if (imageSource.contains("f_webp")) {
			logger.info("Tag img src attribute value contains f_webp as expected");
			extent.extentLogger("", "Tag img src attribute value contains f_webp as expected");
		} else {
			logger.error("Tag img src attribute value does not contain f_webp");
			extent.extentLoggerFail("", "Tag img src attribute value does not contain f_webp");
		}
		if (imageSource.contains("f_auto")) {
			logger.error("Tag img src attribute value should not contain f_auto");
			extent.extentLoggerFail("", "Tag img src attribute value should not contain f_auto");
		} else {
			logger.info("Tag img src attribute value does not contain f_auto as expected");
			extent.extentLogger("", "Tag img src attribute value does not contain f_auto as expected");
		}
	}

	public void PWAVerifyMetaTags(String userType) throws Exception {
		extent.HeaderChildNode(
				"Task PWA2-6005 : SEO - Meta Tags for Static Pages, Originals, Kids, Videos, Music Videos & Live TV");
		extent.extentLogger("", "-------------- Meta Tags for Home Tab --------------");
		String homeTitleExpected = "ZEE5 - Watch TV Shows, 100+ Originals, Movies, News & Live TV Online";
		String homeDescExpected = "Watch premieres of your favourite TV show episodes a day before telecast on ZEE5 & explore blockbuster movies, 100+ original content, music videos, live TV channels, news in HD quality & language of your choice.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Home", homeTitleExpected, homeDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for ZEEPLEX Tab --------------");
		String zeeplexTitleExpected = "ZEEPLEX - Rent & Watch Latest Releases in Movies on ZEE5";
		String zeeplexDescExpected = "Rent a movie online on ZEEPLEX for as low as ₹99 and watch your choice of movie from new blockbuster releases to premier movies. Find the latest and popular movies on ZEE5 today.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "ZEEPLEX", zeeplexTitleExpected, zeeplexDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Club Tab --------------");
		String clubTitleExpected = "ZEE5 Club Pack: Subscribe and Watch Premier Episodes before TV Telecast, Selected ZEE5 Original and Movies on ZEE5";
		String clubDescExpected = "Join the ZEE5 Club to watch premieres of TV show episodes a day before telecast. Enjoy ZEE5-Alt Balaji Original Web Series, your favourite Zindagi Shows, Live TV, Kids Entertainment, Movies, Latest News & much more. Watch on 2 devices at a time.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Club", clubTitleExpected, clubDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Search Screen --------------");
		String searchTitleExpected = "Search for Shows, Movies, Originals, Live TV Channels & More on ZEE5";
		String searchDescExpected = "Search for your favourite ZEE5 shows, movies, originals, live TV channels, music videos, news and much more. Browse through the abundant options that you can watch and select what suits your mood.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Search", searchTitleExpected, searchDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Login Screen --------------");
		String loginTitleExpected = "Login to ZEE5 & watch the Best Shows, Movies, News and More";
		String loginDescExpected = "Login to ZEE5 and enjoy the Latest and the best of TV Shows, Movies, Originals, News, Live TV Channels and much more.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Login", loginTitleExpected, loginDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Sign Up Screen --------------");
		String signUpTitleExpected = "Register with ZEE5 - Enjoy Uninterrupted Video Experience and Help us serve you better";
		String signUpDescExpected = "Register with ZEE5 and enjoy the best of Bollywood & Hollywood movies, TV Shows, News and much more in Hindi, Marathi, English and other Regional Languages.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "SignUp", signUpTitleExpected, signUpDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Subscribe Screen --------------");
		String subscribeTitleExpected = "Subscribe to ZEE5 - Avail the Best offers with ZEE5 Premium & Club Subscription Plans";
		String subscribeDescExpected = "Get ZEE5 premium membership to watch latest episodes Premier before TV, All ZEE5 Originals, Movies, Live TV Channels & latest News online. Avail the best offers with ZEE5 monthly & yearly subscription plans; Watch all shows on 5 devices at a time";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Subscribe", subscribeTitleExpected,
				subscribeDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for ZEE5 Originals Screen --------------");
		String zee5OriginalsTitleExpected = "ZEE5 Originals - Watch ZEE5 Originals Web Series and Movies Online in HD";
		String zee5OriginalsDescExpected = "Explore ZEE5 Originals shows, movies and short films in HD quality. Explore new Web Series and Movies in Hindi, Marathi, English and other regional languages.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "ZEE5 Originals", zee5OriginalsTitleExpected,
				zee5OriginalsDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Web Series Page --------------");
		String webSeries = "Poison";
		String home = getParameterFromXML("url");
		String url = home + "zee5originals/details/poison/0-6-1558";
		String webSeriesPageTitleExpected = webSeries + " Web Series - Watch ZEE5 Originals Show " + webSeries
				+ " Online in HD on ZEE5";
		String webSeriesPageDescExpected = webSeries + " - ZEE5 Originals Web Series. 👀 Watch " + webSeries
				+ " full Web Series online in HD quality on ZEE5. Explore the star cast and watch all episodes of all seasons only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, webSeriesPageTitleExpected,
				webSeriesPageDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Web Series Season Page --------------");
		webSeries = "Poison";
		String season = "1";
		url = home + "zee5originals/details/poison/0-6-1558/episodes";
		String webSeriesSeasonPageTitleExpected = webSeries + " Season " + season
				+ " - Watch All Episodes of ZEE5 Originals Show " + webSeries + " " + season + " in HD on ZEE5";
		String webSeriesSeasonPageDescExpected = webSeries + " Season " + season
				+ " Episodes - Watch all episodes of the ZEE5 Originals Web Series " + webSeries + " " + season
				+ ", online. Explore trailers, teasers & download all episodes in HD only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, webSeriesSeasonPageTitleExpected,
				webSeriesSeasonPageDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Specific Episode Page --------------");
		mandatoryRegistrationPopUp(userType);
		webSeries = "Poison";
		season = "1";
		String episode = "1";
		String episodeTitle = "The Hunter's Scent";
		url = home + "zee5originals/details/poison/0-6-1558/episode-1-the-hunters-scent/0-1-202652";
		String episodeTitleExpected = "Watch " + webSeries + " Season " + season + " Episode " + episode + " - "
				+ episodeTitle + " online in HD on ZEE5";
		String episodeDescExpected = "Watch " + webSeries + " ZEE5 Originals Web Series, Season " + season + " Episode "
				+ episode + ", " + episodeTitle + ". Explore all the episodes of Poison in HD quality on ZEE5. ";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, episodeTitleExpected, episodeDescExpected);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "-------------- Meta Tags for Web Series Season Page --------------");
		webSeries = "Poison";
		season = "2";
		url = home + "zee5originals/details/poison/0-6-1558/season-2/episodes";
		webSeriesSeasonPageTitleExpected = webSeries + " Season " + season
				+ " - Watch All Episodes of ZEE5 Originals Show " + webSeries + " " + season + " in HD on ZEE5";
		webSeriesSeasonPageDescExpected = webSeries + " Season " + season
				+ " Episodes - Watch all episodes of the ZEE5 Originals Web Series " + webSeries + " " + season
				+ ", online. Explore trailers, teasers & download all episodes in HD only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, webSeriesSeasonPageTitleExpected,
				webSeriesSeasonPageDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Specific Episode Page --------------");
		mandatoryRegistrationPopUp(userType);
		webSeries = "Poison";
		season = "2";
		episode = "1";
		episodeTitle = "Dark Horse";
		url = home + "zee5originals/details/poison/0-6-1558/episode-1-the-hunters-scent/0-1-202652";
		episodeTitleExpected = "Watch " + webSeries + " Season " + season + " Episode " + episode + " - " + episodeTitle
				+ " online in HD on ZEE5";
		episodeDescExpected = "Watch " + webSeries + " ZEE5 Originals Web Series, Season " + season + " Episode "
				+ episode + ", " + episodeTitle + ". Explore all the episodes of Poison in HD quality on ZEE5. ";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, episodeTitleExpected, episodeDescExpected);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "-------------- Meta Tags for Trailer Page --------------");
		mandatoryRegistrationPopUp(userType);
		webSeries = "Poison";
		season = "2";
		url = home + "zee5originals/details/poison/0-6-1558/poison-2-trailer/0-1-416653";
		String trailerTitleExpected = webSeries + " " + season + " Trailer - Watch " + webSeries + " " + season
				+ " Official Trailer in HD on ZEE5";
		String trailerDescExpected = webSeries + " " + season + " Official Trailer - Watch " + webSeries + " " + season
				+ " ZEE5 Originals Web Series trailer online in HD quality. Explore trailers, teasers & download all episodes in HD only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, trailerTitleExpected, trailerDescExpected);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "-------------- Meta Tags for Kids Tab --------------");
		String kidsTitleExpected = "Watch Kids Shows and Animated Movies Online in HD on ZEE5";
		String kidsDescExpected = "Watch Kids TV shows and movies online in HD. Find all popular kids shows, series and animated movies on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Kids", kidsTitleExpected, kidsDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Specific Kids Show Page Page --------------");
		webSeries = "Sa Re Ga Ma Pa Li'l Champs 2019";
		url = home + "kids/kids-shows/sa-re-ga-ma-pa-lil-champs-2019/0-6-1317";
		webSeriesSeasonPageTitleExpected = "Watch " + webSeries + " Kids Show Online on ZEE5";
		webSeriesSeasonPageDescExpected = "Watch " + webSeries
				+ " Show online in HD. Also explore kid’s latest movies, videos & show’s episodes on ZEE5..";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, webSeriesSeasonPageTitleExpected,
				webSeriesSeasonPageDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Videos Tab --------------");
		String videosTitleExpected = "Watch Film Videos, Promo Videos, Trailers and Music Videos Free Online on ZEE5";
		String videosDescExpected = "Enjoy watching movie videos, promo videos, music videos, Bollywood songs and celebrity gossips in 12 different languages online for free on ZEE5";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Videos", videosTitleExpected, videosDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Live TV Tab --------------");
		String liveTVTitleExpected = "Live Streaming TV Shows, News, Movies, TV Channels Online in HD on ZEE5";
		String liveTVDescExpected = "Enjoy 90+ Live TV channels online only on ZEE5 in HD. With ZEE5, watch your favourite TV shows, news, movies & entertainment videos live in Hindi, English other regional languages.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Live TV", liveTVTitleExpected, liveTVDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Specific Channel Page --------------");
		mandatoryRegistrationPopUp(userType);
		String channel = "TV9 Marathi News";
		url = home + "channels/details/tv9-marathi/0-9-257";
		String channelTitleExpected = "Watch " + channel + " Channel Live Online in HD on ZEE5";
		String channelDescExpected = "Watch live streaming of " + channel
				+ " channel in HD quality. Also explore other live channel steaming like News, Entertainment, Music and more only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, channelTitleExpected, channelDescExpected);
		extent.extentLogger("", "-------------- Meta Tags Channel Guide Page --------------");
		url = home + "tvguide";
		String channelGuideTitleExpected = "ZEE5 TV Guide Listings : View Schedule for all Live TV Channels on ZEE5";
		String channelGuideDescExpected = "View TV guide listings for all the Live TV Channels and explore the shows schedules on ZEE5. Know when to watch your favourite TV shows live online.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, channelGuideTitleExpected, channelGuideDescExpected);
		mandatoryRegistrationPopUp(userType);
	}

	public void PWAVerifyMetaTagsThroughExternalPageSource(String userType, String navigationPoint,
			String expectedTitle, String expectedDesc) throws Exception {
		reloadHome();
		if (navigationPoint.equalsIgnoreCase("Search"))
			click(PWAHomePage.objSearchBtn, "Search icon");
		else if (navigationPoint.equalsIgnoreCase("Login"))
			click(PWALoginPage.objWebLoginBtn, "Login button");
		else if (navigationPoint.equalsIgnoreCase("SignUp"))
			click(PWALoginPage.objSignUpBtnWEB, "Sign up for FREE button");
		else if (navigationPoint.equalsIgnoreCase("Subscribe"))
			click(PWAHomePage.objSubscribeBtn, "Subscribe button");
		else if (navigationPoint.contains(".com"))
			getDriver().get(navigationPoint);
		else
			navigateToAnyScreen(navigationPoint);
		logger.info("Expected title : " + expectedTitle);
		extent.extentLogger("", "Expected title : " + expectedTitle);
		logger.info("Expected description : " + expectedDesc);
		extent.extentLogger("", "Expected description : " + expectedDesc);
		String url = getDriver().getCurrentUrl();
		url = "view-source:" + url;
		getDriver().get(url);
		waitTime(3000);
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objOgTitle, "Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		logger.info("Actual og:title content value : " + ogtitle);
		extent.extentLogger("", "Actual og:title content value : " + ogtitle);
		String ogdescription = getElementPropertyToString("innerText", PWAHomePage.objOgDesc, "Title");
		ogdescription = ogdescription.replace("&amp;", "&").replace("&#x27;", "'");
		logger.info("Actual og:description content value : " + ogdescription);
		extent.extentLogger("", "Actual og:description content value : " + ogdescription);
		if (ogtitle.equals(expectedTitle)) {
			logger.info("og:title content value is as expected");
			extent.extentLogger("", "og:title content value is as expected");
		} else {
			logger.error("og:title content value is not as expected");
			extent.extentLoggerFail("", "og:title content value is not as expected");
		}
		if (ogdescription.equals(expectedDesc)) {
			logger.info("og:description content value is as expected");
			extent.extentLogger("", "og:description content value is as expected");
		} else {
			logger.error("og:description content value is not as expected");
			extent.extentLoggerFail("", "og:description content value is not as expected");
		}
	}

	public void PWASubtitleSelection(String userType) throws Exception {
		extent.HeaderChildNode(
				"Task PWA2-4178 : If subtitle language is selected; the same should be enables by default for next contents.");
		mandatoryRegistrationPopUp(userType);
		String content = "This or That game with Manit Joura - Kundali Bhagya Highlights";
		reloadHome();
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content + "\n", "Search Edit box: " + content);
		waitForElement(PWASearchPage.objSearchedResult(content), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(content), "Search Result");
		directClickReturnBoolean(PWAHomePage.objCreateNewAccountPopUpClose, "Close in Sign Up Pop Up");
		if (!(userType.equals("SubscribedUser") || userType.equals("ClubUser"))) {
			waitForPlayerAdToComplete("Video Player");
		}
		playerTap();
		click(PWAHomePage.objSubtitleButton, "Subtitle button");
		click(PWAHomePage.objSubtitleEnglish, "Subtitle English");
		/////////////////////////////////////////////////////
		click(PWAPlayerPage.playBtn, "Play button");
		waitTime(10000);
		extent.extentLogger("", "Waited for current content to complete play");
		logger.info("Waited for current content to complete play");
		if (!(userType.equals("SubscribedUser") || userType.equals("ClubUser"))) {
			extent.extentLogger("", "Postroll Ad play check");
			logger.info("Postroll Ad play check");
			waitForPlayerAdToComplete("Video Player");
			extent.extentLogger("", "Preroll Ad play check");
			logger.info("Preroll Ad play check");
			waitForPlayerAdToComplete("Video Player");
		}
		try {
			String ConsumptionTitle = getElementPropertyToString("innerText", PWAMusicPage.objConsumptionPageTitle,
					"Consumptions Title").toString();
			logger.info("Next content played: " + ConsumptionTitle);
			extent.extentLogger("", "Next content played: " + ConsumptionTitle);
		} catch (Exception e) {
			logger.error("Failed to fetch title of the next content played");
			extent.extentLoggerFail("", "Failed to fetch title of the next content played");
		}
		playerTap();
		click(PWAHomePage.objSubtitleButton, "Subtitle button");
		verifyElementPresent(PWAHomePage.objSubtitleEnglishSelected, "Subtitle English tickmarked");
	}

	public void PWAVerifyPageFreezeForChannel(String userType) throws Exception {
		mandatoryRegistrationPopUp(userType);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("Defect PWA2-4699 : Entitlement flow for Live Streams");
		} else {
			extent.HeaderChildNode("Defect PWA2-5158 : \"&xplorHD\" channel consumption screen verification");
		}
		String content = "xplorHD";
		reloadHome();
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content + "\n", "Search Edit box: " + content);
		waitForElement(PWASearchPage.objSearchedResult(content), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(content), "Search Result");
		waitTime(4000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			verifyElementPresent(PWAPlayerPage.subscribePopUp, "Subscription popup");
			verifyElementPresentAndClick(PWAPlayerPage.ObjSubscriptionpopupCloseIcon, "Subscription popup close icon");
			verifyElementPresent(PWALiveTVPage.objPlayerInlineSubscriptionLink, "Player inline Subscribtion link");
		} else {
			verifyElementPresent(PWAPlayerPage.objLiveTag, "Live Tag");
			verifyElementPresent(PWAPlayerPage.pauseBtn, "Play/Pause icon");
			verifyElementPresent(PWAPlayerPage.settingsBtn, "Settings icon");
		}
	}

	public void PWAClickOnPromotionalBanners(String userType) throws Exception {
		extent.HeaderChildNode("Defect PWA2-5286 : Click on Promotional Banner");
		String currentUrl = "", homeUrl = "";
		homeUrl = getParameterFromXML("url");
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			click(PWAHomePage.objSubscribeBtn, "Subscribe button");
			List<WebElement> carouselDots = findElements(PWAHomePage.objPromotionalBannerCarouselDots);
			for (int dot = 0; dot < carouselDots.size(); dot++) {
				click(PWAHomePage.objPromotionalBannerCarouselDots(dot + 1), "Carousel Dot " + (dot + 1));
				click(PWAHomePage.objPromotionalBanner, "Promotional Banner " + (dot + 1));
				currentUrl = getDriver().getCurrentUrl();
				logger.info("Current URL : " + currentUrl);
				extent.extentLogger("", "Current URL : " + currentUrl);
				if (currentUrl.equals(homeUrl + "myaccount/subscription")) {
					logger.info("Click on Promotional Banner shows no response, expected behavior");
					extent.extentLogger("", "Click on Promotional Banner shows no response, expected behavior");
				} else {
					logger.error("Click on Promotional Banner has caused page navigation");
					extent.extentLoggerFail("", "Click on Promotional Banner has caused page navigation");
				}
			}
			getDriver().navigate().back();
			logger.info("Called driver back");
			extent.extentLogger("", "Called driver back");
			currentUrl = getDriver().getCurrentUrl();
			logger.info("Current URL : " + currentUrl);
			extent.extentLogger("", "Current URL : " + currentUrl);
			if (currentUrl.equals(homeUrl)) {
				logger.info("Navigated back to Home page");
				extent.extentLogger("", "Navigated back to Home page");
			} else {
				logger.error("Failed to navigate back to Home page");
				extent.extentLoggerFail("", "Failed to navigate back to Home page");
			}
		}
	}

	public void PWAZeeplexDisclaimer(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-5409 : ZEEPLEX-Addition of disclaimer text for user on frontend");
		reloadHome();
		navigateToAnyScreen("ZEEPLEX");
		String disclaimerText = getElementPropertyToString("innerText", PWAHomePage.objZeePlexDisclaimer,
				"Disclaimer text");
		String expectedDisclaimerText = "ZEEPLEX movies are not part of ZEE5 Premium Subscription";
		if (disclaimerText.contains(expectedDisclaimerText)) {
			logger.info("Expected Disclaimer text is displayed : " + expectedDisclaimerText);
			extent.extentLogger("titles", "Expected Disclaimer text is displayed : " + expectedDisclaimerText);
		} else {
			logger.info("Disclaimer text displayed : " + disclaimerText);
			extent.extentLogger("titles", "Disclaimer text displayed : " + disclaimerText);
			logger.error("Expected Disclaimer text is not displayed");
			extent.extentLoggerFail("", "Expected Disclaimer text is not displayed");
		}

	}

	public void verifyMandatoryRegistrationPopUpCount(String userType) throws Exception {
		String home = getParameterFromXML("url");
		String url = "";
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		if (userType.equals("Guest")) {
			js.executeScript("window.localStorage.setItem('mandatoryRegistrationPopupCount','0')");
			extent.HeaderChildNode("PWA2-6113 : Mandatory Registration allow video views from 5 to 2");
			url = home + "movies/details/robin-hood-enemies-forever/0-0-103560";
			getDriver().get(url);
			logger.info("First content is played");
			extent.extentLogger("", "First content is played");
			if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up")) {
				click(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up close icon");
			}
			waitForPlayerAdToComplete("Video");
			String count = js.executeScript("return window.localStorage.getItem('mandatoryRegistrationPopupCount')")
					.toString();
			logger.info("mandatoryRegistrationPopupCount value in local Storage : " + count);
			extent.extentLogger("", "mandatoryRegistrationPopupCount value in local Storage : " + count);

			url = home + "movies/details/robin-hood-and-the-invincible-knight/0-0-103553";
			getDriver().get(url);
			logger.info("Second content is played");
			extent.extentLogger("", "Second content is played");
			if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up")) {
				click(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up close icon");
			}
			waitForPlayerAdToComplete("Video");
			count = js.executeScript("return window.localStorage.getItem('mandatoryRegistrationPopupCount')")
					.toString();
			logger.info("mandatoryRegistrationPopupCount value in local Storage : " + count);
			extent.extentLogger("", "mandatoryRegistrationPopupCount value in local Storage : " + count);

			url = home + "movies/details/robin-hood-kings-return/0-0-144742";
			getDriver().get(url);
			logger.info("Third content is played");
			extent.extentLogger("", "Third content is played");
			verifyElementPresent(PWAPlayerPage.objWhyRegisterPopUp, "Create New Account Popup");
			if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up close icon")) {
				logger.error("Close icon in Create New Account Pop Up should not be displayed on playing 3rd content");
				extent.extentLoggerFail("",
						"Close icon in Create New Account Pop Up should not be displayed on playing 3rd content");
			} else {
				logger.info(
						"Close icon in Create New Account Pop Up is not displayed on playing 3rd content, expected behavior");
				extent.extentLogger("",
						"Close icon in Create New Account Pop Up is not displayed on playing 3rd content, expected behavior");
			}
			count = js.executeScript("return window.localStorage.getItem('mandatoryRegistrationPopupCount')")
					.toString();
			logger.info("mandatoryRegistrationPopupCount value in local Storage : " + count);
			extent.extentLogger("", "mandatoryRegistrationPopupCount value in local Storage : " + count);
			if (count.equals("2")) {
				logger.info("mandatoryRegistrationPopupCount update is as expected");
				extent.extentLogger("", "mandatoryRegistrationPopupCount update is as expected");
			} else {
				logger.error("mandatoryRegistrationPopupCount update is not as expected");
				extent.extentLoggerFail("", "mandatoryRegistrationPopupCount update is not as expected");
			}
			mandatoryRegistrationPopUp(userType);
		}
		extent.HeaderChildNode("PWA2-5454 : Handling country mismatch in URL");
		reloadHome();
		String currentUrl = getDriver().getCurrentUrl();
		if (currentUrl.contains("global")) {
			logger.error("Home page contains \"global\" in the URL");
			extent.extentLoggerFail("", "Home page contains \"global\" in the URL");
		} else {
			logger.info("Home page does not contain \"global\" in the URL, expected behavior");
			extent.extentLogger("", "Home page does not contain \"global\" in the URL, expected behavior");
		}
		extent.HeaderChildNode("Task PWA2-5455 : Handling language mismatch in URL");
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		click(PWAHomePage.objMarathi, "Marathi Display language");
		click(PWAHamburgerMenuPage.objApply, "Apply button on display language screen");
		click(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
		url = home + "hi/movies/details/comedy-couple/0-0-213623";
		waitTime(4000);
		getDriver().get(url);
		logger.info("Navigated to url: " + url);
		extent.extentLogger("", "Navigated to url: " + url);
		waitTime(10000);
		currentUrl = getDriver().getCurrentUrl();
		if (currentUrl.contains("mr/movies/details/comedy-couple/0-0-213623")) {
			logger.info("Current url fetched : " + currentUrl);
			extent.extentLogger("", "Current url fetched : " + currentUrl);
			logger.info("Redirection to set display language successful");
			extent.extentLoggerPass("", "Redirection to set display language successful");
		} else {
			logger.info("Current url fetched : " + currentUrl);
			extent.extentLogger("", "Current url fetched : " + currentUrl);
			logger.error("Redirection to set display language failed");
			extent.extentLoggerFail("", "Redirection to set display language failed");
		}
		reloadHome();
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		click(PWAHamburgerMenuPage.objEnglishOption, "English display language");
		click(PWAHamburgerMenuPage.objApply, "Apply button on display language screen");
		click(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
		waitTime(4000);
		extent.HeaderChildNode("PWA2-3873 : \"Recommended Videos for You\" next to the player on Videos playback");
		url = home + "videos/details/forbidden-love-press-conference/0-0-224005";
		logger.info("Launched video Forbidden Love Press Conference");
		extent.extentLogger("", "Launched video Forbidden Love Press Conference");
		getDriver().get(url);
		waitTime(5000);
		Swipe("UP", 1);
		String trayName = getElementPropertyToString("innerText", PWAHomePage.objTrayBesidePlayer,
				"tray beside player");
		logger.info("Tray name displayed below player: " + trayName);
		extent.extentLogger("", "Tray name displayed below player: " + trayName);
		if (trayName.equals("Recommended Videos for You")) {
			logger.info("Expected tray name is displayed");
			extent.extentLogger("", "Expected tray name is displayed");
		} else {
			logger.error("Tray name should be Recommended Videos for You");
			extent.extentLoggerFail("", "Tray name should be Recommended Videos for You");
		}
		reloadHome();
		if ((userType.equals("Guest"))) {
			extent.HeaderChildNode("PWA2-4421 : guest token should not be refreshed if user logs in or logs out");
			String guestToken1 = js.executeScript("return window.localStorage.getItem('guestToken')").toString();
			logger.info("Guest Token fetched from local storage before login: " + guestToken1);
			extent.extentLogger("", "Guest Token fetched from local storage before login: " + guestToken1);
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");
			loginWithUserEmail(Username, Password);
			String guestToken2 = js.executeScript("return window.localStorage.getItem('guestToken')").toString();
			logger.info("Guest Token fetched from local storage after login: " + guestToken2);
			extent.extentLogger("", "Guest Token fetched from local storage after login: " + guestToken2);
			if (guestToken1.equals(guestToken2)) {
				logger.info("Same Guest Token before and after login, expected behavior");
				extent.extentLogger("", "Same Guest Token before and after login, expected behavior");
			} else {
				logger.error("Guest Token is not same before and after login");
				extent.extentLoggerFail("", "Guest Token is not same before and after login");
			}
			logout();
		} else {
			String guestToken1 = js.executeScript("return window.localStorage.getItem('guestToken')").toString();
			logout();
			extent.HeaderChildNode("PWA2-4421 : guest token should not be refreshed if user logs in or logs out");
			logger.info("Guest Token fetched from local storage before logout: " + guestToken1);
			extent.extentLogger("", "Guest Token fetched from local storage before logout: " + guestToken1);
			String guestToken2 = js.executeScript("return window.localStorage.getItem('guestToken')").toString();
			logger.info("Guest Token fetched from local storage after logout: " + guestToken2);
			extent.extentLogger("", "Guest Token fetched from local storage after logout: " + guestToken2);
			if (guestToken1.equals(guestToken2)) {
				logger.info("Same Guest Token before and after logout, expected behavior");
				extent.extentLogger("", "Same Guest Token before and after logout, expected behavior");
			} else {
				logger.error("Guest Token is not same before and after logout");
				extent.extentLoggerFail("", "Guest Token is not same before and after logout");
			}
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");
			loginWithUserEmail(Username, Password);

		}
	}

	public void verifyClubTagForLiveTVContents(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-3700 : Club badge for Live TV channels");
		boolean foundPremium = false, foundClub = false;
		reloadHome();
		navigateToAnyScreen("Live TV");
		for (int i = 0; i < 10; i++) {
			List<WebElement> premiumIcons = findElements(PWAHomePage.objPremiumIcon);
			if (premiumIcons.size() > 0) {
				logger.error("Premium icon found for Live contents in Live TV Tab");
				extent.extentLoggerFail("", "Premium icon found for Live contents in Live TV Tab");
				foundPremium = true;
				break;
			} else {
				Swipe("UP", 1);
			}
		}
		if (foundPremium == false) {
			logger.info("Premium icon not found for Live contents in Live TV Tab, expected behavior");
			extent.extentLogger("", "Premium icon not found for Live contents in Live TV Tab, expected behavior");
		}
		click(PWAHomePage.objBackToTopArrow, "Back to Top arrow");
		waitTime(2000);
		for (int i = 0; i < 10; i++) {
			List<WebElement> clubIcons = findElements(PWAHomePage.objClubIcon);
			if (clubIcons.size() > 0) {
				logger.info("Club icon found for Live contents in Live TV Tab, expected behavior");
				extent.extentLogger("", "Club icon found for Live contents in Live TV Tab, expected behavior");
				foundClub = true;
				break;
			} else {
				Swipe("UP", 1);
			}
		}
		if (foundClub == false) {
			logger.error("Club icon not found for Live contents in Live TV Tab");
			extent.extentLoggerFail("", "Club icon not found for Live contents in Live TV Tab");
		}
	}

	public void PWAVerifyMetaTagsForTwitter(String userType) throws Exception {
		mandatoryRegistrationPopUp(userType);
		extent.HeaderChildNode("Task PWA2-5652 : SEO - Title, Description and OG for Twitter");
		logger.info("Task PWA2-5652 : SEO - Title, Description and OG for Twitter");
		extent.extentLogger("", "-------------- Meta Tags for Shows Tab --------------");
		reloadHome();
		String home = getParameterFromXML("url");
		getDriver().get(home + "tvshows");
		logger.info("Navigated to Shows page");
		extent.extentLogger("", "Navigated to Shows page");
		waitTime(4000);
		String showTitleExpected = "Watch Best TV Shows, Serials, Spoilers & Full Episodes Online | ZEE5";
		String showDescExpected = "Enjoy top TV Shows, TV Serials in Hindi, Marathi and other regional languages online in Full HD. Explore latest episodes of all your favourite shows aired on ZEE channels on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showTitleExpected, showDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for Shows Details Page --------------");
		getDriver().get(home + "tvshows/details/kundali-bhagya/0-6-366");
		logger.info("Navigated to Shows Details page");
		extent.extentLogger("", "Navigated to Shows Details page");
		waitTime(4000);
		String showDetailsTitleExpected = "Kundali Bhagya TV Serial, Watch Tomorrow's Full Episodes Online Before TV on ZEE5";
		String showDetailsDescExpected = "Enjoy tomorrow's Premiere Episodes before tv; latest & full episodes of Kundali Bhagya TV serial online, starring Sanjay Gagnani,Anjum Fakih,Shraddha Arya,Naveen Saini,Abhishek Kapur,Ruhi Chaturvedi,Anisha Hinduja,Dheeraj Dhoopar,Manit Joura,Supriya Shukla. Watch best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showDetailsTitleExpected,
				showDetailsDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for List Episodes Page --------------");
		getDriver().get(home + "tvshows/details/kundali-bhagya/0-6-366/episodes");
		logger.info("Navigated to List Episodes page");
		extent.extentLogger("", "Navigated to List Episodes page");
		waitTime(4000);
		String showListEpisodesTitleExpected = "Watch & Enjoy All the Episodes of Kundali Bhagya TV Serial Online on ZEE5";
		String showListEpisodesDescExpected = "Binge Watch Kundali Bhagya TV Serial Online. Now select & watch your favorite episodes from the complete list of Kundali Bhagya episodes, starring Sanjay Gagnani,Anjum Fakih,Shraddha Arya,Naveen Saini,Abhishek Kapur,Ruhi Chaturvedi,Anisha Hinduja,Dheeraj Dhoopar,Manit Joura,Supriya Shukla. Watch all the episodes in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showListEpisodesTitleExpected,
				showListEpisodesDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for Specific Episode Page --------------");
		getDriver().get(
				home + "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-october-27-2020/0-1-manual_1skn6kk1den8");
		logger.info("Navigated to Specific Episode page");
		extent.extentLogger("", "Navigated to Specific Episode page");
		waitTime(4000);
		if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up")) {
			click(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up close icon");
		}
		mandatoryRegistrationPopUp(userType);
		String showSpecificEpisodeTitleExpected = "Watch Kundali Bhagya TV Serial 27th October 2020 Full Episode Online on ZEE5";
		String showSpecificEpisodeDescExpected = "Enjoy 27th October 2020's full episode of Kundali Bhagya TV serial online, starring Dheeraj Dhoopar, Anjum Fakih, Shraddha Arya. Watch Kareena threatens Sameer to stay away from Srishti full episode. View best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showSpecificEpisodeTitleExpected,
				showSpecificEpisodeDescExpected);

		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "-------------- Meta Tags for Specific Spoiler Page --------------");
		getDriver().get(home
				+ "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-october-28-2020-episode-spoiler/0-1-manual_a61qrpapbio0");
		logger.info("Navigated to Specific Spoiler page");
		extent.extentLogger("", "Navigated to Specific Spoiler page");
		waitTime(4000);
		String showSpecificSpoilerTitleExpected = "Watch Kundali Bhagya TV Serial Spoiler of 28th October 2020 Online on ZEE5";
		String showSpecificSpoilerDescExpected = "Enjoy 28th October 2020's spoiler of Kundali Bhagya TV serial online, starring Dheeraj Dhoopar, Anjum Fakih, Shraddha Arya. Watch best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showSpecificSpoilerTitleExpected,
				showSpecificSpoilerDescExpected);

		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "-------------- Meta Tags for Specific Webisode Page --------------");
		getDriver().get(home
				+ "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-october-27-2020-webisode/0-1-manual_37msvkdj6utg");
		logger.info("Navigated to Specific Webisode page");
		extent.extentLogger("", "Navigated to Specific Webisode page");
		waitTime(4000);
		String showWebisodeTitleExpected = "Watch Kundali Bhagya TV Serial Webisode of 27th October 2020 Online on ZEE5";
		String showWebisodeDescExpected = "Enjoy 27th October 2020's webisode of Kundali Bhagya TV serial online, starring Dheeraj Dhoopar, Anjum Fakih, Shraddha Arya. Watch best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showWebisodeTitleExpected,
				showWebisodeDescExpected);

		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "-------------- Meta Tags for Week Short Page --------------");
		getDriver().get(home
				+ "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-week-in-short-19th-october-2020-to-24th-october-2020/0-1-manual_2goo4apg01ug");
		logger.info("Navigated to Week Short page");
		extent.extentLogger("", "Navigated to Week Short page");
		waitTime(4000);
		String showWeekShortTitleExpected = "Watch Kundali Bhagya TV Serial Full Week's Episodes in Short 19th October 2020 - 24th October 2020 Online on ZEE5";
		String showWeekShortDescExpected = "Enjoy 19th October 2020 - 24th October 2020's full week in short episode of Kundali Bhagya TV serial online, starring Dheeraj Dhoopar, Anjum Fakih, Shraddha Arya. Watch best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showWeekShortTitleExpected,
				showWeekShortDescExpected);

	}

	public void PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(String userType, String expectedTitle,
			String expectedDesc) throws Exception {
		logger.info("Expected title : " + expectedTitle);
		extent.extentLogger("", "Expected title : " + expectedTitle);
		logger.info("Expected description : " + expectedDesc);
		extent.extentLogger("", "Expected description : " + expectedDesc);
		String url = getDriver().getCurrentUrl();
		url = "view-source:" + url;
		getDriver().get(url);
		waitTime(3000);
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgTitle, "Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		logger.info("Actual twitter:title content value : " + ogtitle);
		extent.extentLogger("", "Actual twitter:title content value : " + ogtitle);
		String ogdescription = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgDesc, "Title");
		ogdescription = ogdescription.replace("&amp;", "&").replace("&#x27;", "'");
		logger.info("Actual twitter:description content value : " + ogdescription);
		extent.extentLogger("", "Actual twitter:description content value : " + ogdescription);
		if (ogtitle.equals(expectedTitle)) {
			logger.info("twitter:title content value is as expected");
			extent.extentLogger("", "twitter:title content value is as expected");
		} else {
			logger.error("twitter:title content value is not as expected");
			extent.extentLoggerFail("", "twitter:title content value is not as expected");
		}
		if (ogdescription.equals(expectedDesc)) {
			logger.info("twitter:description content value is as expected");
			extent.extentLogger("", "twitter:description content value is as expected");
		} else {
			logger.error("twitter:description content value is not as expected");
			extent.extentLoggerFail("", "twitter:description content value is not as expected");
		}
	}

	public void PWAVerifyZeePlexContents(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode("PWA2-7202 : Any trailer featured in the collection is showcased in the front-end");
		logger.info("PWA2-7202 : Any trailer featured in the collection is showcased in the front-end");
		String tab = "ZEEPLEX";
		navigateToAnyScreen(tab);
		Response tabResponse = ResponseInstance.getResponseForPages(tab.toLowerCase(), "en,hi,kn");
		int items = tabResponse.jsonPath().get("buckets[0].items.size()");
		String title = "", type = "";
		Swipe("UP", 1);
		Swipe("UP", 1);
		for (int i = 0; i < items; i++) {
			title = tabResponse.jsonPath().get("buckets[0].items[" + i + "].title");
			type = tabResponse.jsonPath().get("buckets[0].items[" + i + "].asset_subtype");
			logger.info("API returned title: " + title + " of asset_subtype: " + type);
			extent.extentLogger("", "API returned title: " + title + " of asset_subtype: " + type);
			verifyElementPresent(PWAMoviesPage.objTVODTitle(title), title + " in UI");
		}
	}

	public void PWAVerifyWatchTrailerCTA(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode("PWA2-7034 : \"Watch trailer\" CTA for shows and zee-original contents.");
		logger.info("PWA2-7034 : \"Watch trailer\" CTA for shows and zee-original contents.");
		extent.extentLogger("", "-------------- Validation for Shows content --------------");
		String showcontent = "Kritika reveals about her marriage with Prithvi - Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, showcontent, "Search edit");
		waitTime(2000);
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchedResult(showcontent), "Searched content");
		waitTime(4000);
		verifyElementPresentAndClick(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button");
		waitTime(4000);
		if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
				"'You're watching a trailer' message on the player")) {
			extent.extentLoggerFail("", "Watch Trailer Button functionality failed");
			logger.error("Watch Trailer Button functionality failed");
		}

		extent.extentLogger("", "-------------- Validation for ZEE5 Originals content --------------");
		String zee5content = "The Three B.Techs";
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, zee5content, "Search edit");
		waitTime(2000);
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchedResult(zee5content), "Searched content");
		waitTime(4000);
		verifyElementPresentAndClick(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button");
		waitTime(4000);
		if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
				"'You're watching a trailer' message on the player")) {
			extent.extentLoggerFail("", "Watch Trailer Button functionality failed");
			logger.error("Watch Trailer Button functionality failed");
		}
		mandatoryRegistrationPopUp(userType);
	}

	public void PWAWatchPromoAndVerifyTitle(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode("PWA2-6936 : \"undefined Trailer\" Meta title - fix verification");
		logger.info("PWA2-6936 : \"undefined Trailer\" Meta title - fix verification");
		mandatoryRegistrationPopUp(userType);
		String showcontent = "Baarish";
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, showcontent, "Search edit");
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab("Shows"), "Shows Tab");
		waitTime(2000);
		click(PWASearchPage.objSearchedResult(showcontent), "Searched content");
		waitTime(4000);
		click(PWAPlayerPage.objWatchPromo, "Watch Promo icon");
		waitTime(4000);
		if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
				"'You're watching a trailer' message on the player")) {
			extent.extentLoggerFail("", "Watch Trailer Button functionality failed");
			logger.error("Watch Trailer Button functionality failed");
		}
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
				"Content Title").toString();
		extent.extentLogger("", "Navigated to the consumption page: " + consumptionPageTitle);
		logger.info("Navigated to the consumption page " + consumptionPageTitle);
		if (consumptionPageTitle.contains(showcontent)) {
			extent.extentLogger("", "Navigated to the correct consumption page");
			logger.info("Navigated to the correct consumption page");
		} else {
			extent.extentLoggerFail("n", "Failed to navigate to the correct Consumption page");
			logger.error("Failed to navigate to the correct Consumption page");
		}
		mandatoryRegistrationPopUp(userType);

	}

	public void PWAWatchMovieAndThenClickTrailer(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			reloadHome();
			extent.HeaderChildNode("PWA2-6932 : Plays any movie for sometime and tap on \"Watch trailer\" CTA");
			logger.info("PWA2-6932 : Plays any movie for sometime and tap on \"Watch trailer\" CTA");
			click(PWAHomePage.objSearchBtn, "Search icon");
			String movie = "Popcorn Monkey Tiger";
			type(PWASearchPage.objSearchEditBox, movie, "Search edit");
			waitTime(3000);
			click(PWASearchPage.objSearchMoviesTab, "Movies tab");
			click(PWASearchPage.objspecificSearch, "Searched content");
			waitTime(10000);
			try {
				Actions act = new Actions(getDriver());
				WebElement scrubber = getDriver().findElement(PWAPlayerPage.objPlayerScrubber);
				act.moveToElement(scrubber, 200, 0).click().build().perform();
				extent.extentLogger("", "Scrubbed the player");
				logger.info("Scrubbed the player");
				waitTime(10000);
			} catch (Exception e) {
			}
			waitTime(7000);
			click(PWASearchPage.objWEBWatchTrailerBtn, "Watch Trailer option");
			waitTime(4000);
			if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
					"'You're watching a trailer' message on the player")) {
				extent.extentLoggerFail("", "Watch Trailer Button functionality failed");
				logger.error("Watch Trailer Button functionality failed");
			}
		}
	}

	public void PWAWatchNewsVODAndThenClickAnotherContent(String userType) throws Exception {
		if (userType.equals("SubscribedUser") || userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			reloadHome();
			extent.HeaderChildNode(
					"PWA2-6995 : Play any news VOD content and play any other content from the same page");
			logger.info("PWA2-6995 : Play any news VOD content and play any other content from the same page");
			navigateToAnyScreen("News");
			String consumptionTitle1 = swipeTillTrayAndClickCard("Trending News");
			extent.extentLogger("", "Consumption page title: " + consumptionTitle1);
			logger.info("Consumption page title: " + consumptionTitle1);
			playerTap();
			click(PWAPlayerPage.pauseBtn, "Pause button");
			String consumptionTitle2 = swipeTillTrayAndClickCard("Viral News");
			extent.extentLogger("", "Consumption page title: " + consumptionTitle2);
			logger.info("Consumption page title: " + consumptionTitle2);
			if (consumptionTitle1.equals(consumptionTitle2)) {
				extent.extentLoggerFail("", "Content click in VOD News Consumptions has failed");
				logger.error("Content click in VOD News Consumptions has failed");
			}
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				waitForPlayerAdToComplete("Video Player");
			}
			waitTime(2000);
			playerTap();
			String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
					"Current duration");
			System.out.println("Current Duration: " + currentDuration);
			extent.extentLogger("", "Current Duration: " + currentDuration);
			logger.info("Current Duration: " + currentDuration);
			waitTime(10000);
			playerTap();
			String currentDuration10 = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
					"Current duration");
			extent.extentLogger("", "Duration after some time: " + currentDuration10);
			logger.info("Duration after some time: " + currentDuration10);
			if (currentDuration.equals(currentDuration10)) {
				extent.extentLoggerFail("", "Content play from VOD News Consumptions has failed");
				logger.error("Content play from VOD News Consumptions has failed");
			} else {
				extent.extentLogger("", "Content play from VOD News Consumptions has passed");
				logger.info("Content play from VOD News Consumptions has passed");
			}
		}
	}

	public String swipeTillTrayAndClickCard(String trayTitle) throws Exception {
		String nextPageTitle = "";
		int noOfSwipes = 10;
		String trayTitleUI = "";
		boolean foundtrayInPage = false, trayFoundInUI = false;
		String userType = getParameterFromXML("userType");
		for (int i = 0; i <= noOfSwipes; i++) {
			List<WebElement> trays = findElements(PWALandingPages.objTrayTitle);
			for (int j = 0; j < trays.size(); j++) {
				try {
					trayTitleUI = trays.get(j).getAttribute("innerText");
					// System.out.println(trayTitleUI);
					// System.out.println(trayTitle);
					if (trayTitleUI.toLowerCase().contains(trayTitle.toLowerCase())) {
						logger.info(trayTitle + " tray is present");
						extent.extentLogger("", trayTitle + " tray is present");
						foundtrayInPage = true;
						break;
					}
				} catch (Exception e) {
				}
			}
			if (foundtrayInPage == false) {
				PartialSwipe("UP", 1);
				waitTime(5000);
			} else {
				break;
			}
		}
		if (foundtrayInPage == true) {
			trayFoundInUI = swipeTillElement(15, PWALandingPages.objTrayTitleInUIContains(trayTitleUI),
					"\"" + trayTitleUI + "\" tray");
			if (trayFoundInUI == true) {
				// handle mandatory pop up
				mandatoryRegistrationPopUp(userType);
				swipeTillElementAndClick(3, PWALandingPages.trayCard(trayTitleUI), "First Asset in tray");
				waitTime(10000);
				if (verifyIsElementDisplayed(PWAPlayerPage.objContentShowTitle, "Show Details")) {
					String viewallnavigationtittle = getText(PWAPlayerPage.objContentShowTitle);
					logger.info("Navigated to Show Details page from View All Page: " + viewallnavigationtittle);
					extent.extentLogger("View All",
							"Navigated to Show Details page from View All Page: " + viewallnavigationtittle);
					click(PWAShowsPage.objFirstAssetImageFirstRail, "First card image from first rail");
				}
				verifyElementPresent(PWAHomePage.objKalKalturaPlayer, "Kaltura Player");
				if (userType.equals("Guest") || userType.equals("NonSubscribedUser") || userType.equals("ClubUser")) {
					verifyIsElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
							"'You're watching a trailer' message on the player");
				}
				nextPageTitle = getText(PWAPlayerPage.objContentTitle);
				if (!nextPageTitle.equals("")) {
					logger.info("Navigated to Consumptions page: \"" + nextPageTitle + "\"");
					extent.extentLogger("", "Navigated to Consumptions page: \"" + nextPageTitle + "\"");
				} else {
					logger.error("Failed to navigate to Consumptions page");
					extent.extentLoggerFail("playerScreen", "Failed to navigate to Consumptions page");
				}
			}
		} else {
			logger.error(trayTitle + " tray is not present in Page");
			extent.extentLoggerFail("", trayTitle + " tray is not present in Page");
		}
		return nextPageTitle;
	}

	public void PWAClickSubscribeDuringAdPlay(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			reloadHome();
			extent.HeaderChildNode("PWA2-6823 : Ad and Content play after clicking Subscribe below player");
			logger.info("PWA2-6823 : Ad and Content play after clicking Subscribe below player");
			click(PWAHomePage.objSearchBtn, "Search icon");
			String content = "Prithvi offers Sarla a fake apology - Kundali Bhagya";
			type(PWASearchPage.objSearchEditBox, content, "Search edit");
			waitTime(3000);
			click(PWASearchPage.objspecificSearch, "Searched content");
			if (userType.equals("Guest")) {
				waitTime(3000);
				if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Why Register Pop Up")) {
					click(PWASearchPage.objCloseRegisterDialog, "Close Button");
				}
			}

			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("Ad play in progress");
				extent.extentLogger("", "Ad play in progress");
				click(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, "Subscribe button below player during Ad Play");
				verifyElementPresent(PWASubscriptionPages.objSubscribepopup, "Subscribe popup");
				click(PWAPremiumPage.objClosePremiumPopup, "Subscribe popup close button");
				waitForPlayerAdToComplete("Video Player");
				playerTap();
				String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
						"Current duration");
				System.out.println("Current Duration: " + currentDuration);
				extent.extentLogger("", "Current Duration: " + currentDuration);
				if (currentDuration.equals("") || currentDuration.equals(null)) {
					extent.extentLoggerFail("", "Ad and Content failed to resume after dismissing pop up");
					logger.error("Ad and Content failed to resume after dismissing pop up");
				} else {
					extent.extentLogger("", "Ad and Content resumed after dismissing pop up, expected behavior");
					logger.info("Ad and Content resumed after dismissing pop up, expected behavior");
				}
			}
		}
	}

	public void PWAVmaxAdForMusicAndNews(String userType) throws Exception {
		mandatoryRegistrationPopUp(userType);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			reloadHome();
			extent.HeaderChildNode("PWA2-6824 : Vmax Ads for Music and VOD News");
			logger.info("PWA2-6824 : Vmax Ads for Music and VOD News");
			navigateToAnyScreen("News");
			swipeTillTrayAndClickCard("Trending News");
			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				waitForPlayerAdToComplete("Video Player");
				extent.extentLoggerFail("", "Vmax Ad played for VOD News content, expected behavior");
				logger.error("Vmax Ad played for VOD News content, expected behavior");
			} else {
				extent.extentLoggerFail("", "Vmax Ad failed to play for VOD News content");
				logger.error("Vmax Ad failed to play for VOD News content");
			}
			mandatoryRegistrationPopUp(userType);
			reloadHome();
			navigateToAnyScreen("Music");
			waitTime(3000);
			verifyElementPresentAndClick(PWAPlayerPage.objFirstCardFigureFromTray, "First card image from first rail");
			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				waitForPlayerAdToComplete("Video Player");
				extent.extentLoggerFail("", "Vmax Ad played for VOD News content, expected behavior");
				logger.error("Vmax Ad played for VOD News content, expected behavior");
			} else {
				extent.extentLoggerFail("", "Vmax Ad failed to play for VOD News content");
				logger.error("Vmax Ad failed to play for VOD News content");
			}
			mandatoryRegistrationPopUp(userType);
		}
		extent.HeaderChildNode("PWA2-6880 : Content is getting paused with mute state verification");
		logger.info("PWA2-6880 : Content is getting paused with mute state verification");
		if (userType.equals("SubscribedUser")) {
			reloadHome();
			mandatoryRegistrationPopUp(userType);
			navigateToAnyScreen("Music");
			waitTime(10000);
			verifyElementPresentAndClick(PWAPlayerPage.objFirstCardFigureFromTray, "First card image from first rail");
			waitTime(5000);
		}
		swipeTillTrayAndClickCard("Related Songs");
		waitTime(10000);
		playerTap();
		verifyElementPresent(PWAPlayerPage.objMuteButton, "Mute button");
	}

	public void PWALatestEpisodeInURLAndCheckSubscribe(String userType) throws Exception {
		extent.HeaderChildNode(
				"PWA2-6993 : Appending the playback URL as \"latest/latest1\" and verifying Subscribe CTA");
		logger.info("PWA2-6993 : Appending the playback URL as \"latest/latest1\" and verifying Subscribe CTA");
		reloadHome();
		mandatoryRegistrationPopUp(userType);
		String home = getParameterFromXML("url");
		extent.extentLogger("", "---------- Appending \"latest\" to show url -----------");
		String url = home + "zee5originals/details/baarish/0-6-2614/latest";
		getDriver().get(url);
		logger.info("URL opened: " + url);
		extent.extentLogger("", "URL opened: " + url);
		waitTime(5000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			verifyElementPresent(PWAPlayerPage.objBuyPlanCTABelowPlayerScreen, "Subscribe button below player");
		} else {
			if (checkElementDisplayed(PWAPlayerPage.objBuyPlanCTABelowPlayerScreen,
					"Subscribe button below player for Subscribed user")) {
				extent.extentLoggerFail("",
						"Subscribe button below player should not be displayed for Subscribed user");
				logger.error("Subscribe button below player should not be displayed for Subscribed user");
			}
		}
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "---------- Appending \"latest1\" to show url -----------");
		url = home + "zee5originals/details/poison/0-6-1558/latest1";
		getDriver().get(url);
		logger.info("URL opened: " + url);
		extent.extentLogger("", "URL opened: " + url);
		waitTime(5000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			verifyElementPresent(PWAPlayerPage.objBuyPlanCTABelowPlayerScreen, "Subscribe button below player");
		} else {
			if (checkElementDisplayed(PWAPlayerPage.objBuyPlanCTABelowPlayerScreen,
					"Subscribe button below player for Subscribed user")) {
				extent.extentLoggerFail("",
						"Subscribe button below player should not be displayed for Subscribed user");
				logger.error("Subscribe button below player should not be displayed for Subscribed user");
			}
		}
		mandatoryRegistrationPopUp(userType);
	}

	public void PWAVerifyingRefreshForShowDetailsAndConsumptions(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-6897 : Refreshing show detail page and episode consumption page");
		logger.info("PWA2-6897 : Refreshing show detail page and episode consumption page");
		extent.extentLogger("", "---------- Refreshing show detail page -----------");
		mandatoryRegistrationPopUp(userType);
		reloadHome();
		String show = "Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, show, "Search Field");
		click(PWASearchPage.objSearchShowsTab, "Shows tab");
		waitTime(3000);
		click(PWASearchPage.objSearchedResult(show), "Searched content");
		waitTime(5000);
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String showPageTitleBeforeRefresh = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
				"Show Title").toString();
		logger.info("Show Title displayed before refresh: " + showPageTitleBeforeRefresh);
		extent.extentLogger("", "Show Title displayed before refresh: " + showPageTitleBeforeRefresh);
		String url = getDriver().getCurrentUrl();
		logger.info("URL displayed: " + url);
		extent.extentLogger("", "URL displayed: " + url);
		getDriver().get(url);
		logger.info("Refreshed page");
		extent.extentLogger("", "Refreshed page");
		waitTime(5000);
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String showPageTitleAfterRefresh = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
				"Show Title").toString();
		logger.info("Show Title displayed after refresh: " + showPageTitleAfterRefresh);
		extent.extentLogger("", "Show Title displayed after refresh: " + showPageTitleAfterRefresh);
		if (showPageTitleAfterRefresh.equals(showPageTitleBeforeRefresh) && !showPageTitleAfterRefresh.equals("")
				&& !showPageTitleAfterRefresh.equals(null)) {
			logger.info("Page refresh successful");
			extent.extentLogger("", "Page refresh successful");
		} else {
			extent.extentLoggerFail("", "Page refresh failed");
			logger.error("Page refresh failed");
		}
		extent.extentLogger("", "---------- Refreshing episode detail page -----------");
		mandatoryRegistrationPopUp(userType);
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Second Episode set");
		waitTime(5000);
		click(PWAShowsPage.objEpisodeCard, "First Episode Card");
		mandatoryRegistrationPopUp(userType);
		String consumptionPageTitleBeforeRefresh = getElementPropertyToString("innerText",
				PWAPlayerPage.objContentTitle, "Content Title").toString();
		logger.info("Episode Title displayed before refresh: " + consumptionPageTitleBeforeRefresh);
		extent.extentLogger("", "Episode Title displayed before refresh: " + consumptionPageTitleBeforeRefresh);
		url = getDriver().getCurrentUrl();
		logger.info("URL displayed: " + url);
		extent.extentLogger("", "URL displayed: " + url);
		getDriver().get(url);
		logger.info("Refreshed page");
		extent.extentLogger("", "Refreshed page");
		mandatoryRegistrationPopUp(userType);
		waitTime(5000);
		String consumptionPageTitleAfterRefresh = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
				"Content Title").toString();
		logger.info("Show Title displayed after refresh: " + consumptionPageTitleAfterRefresh);
		extent.extentLogger("", "Show Title displayed after refresh: " + consumptionPageTitleAfterRefresh);
		if (consumptionPageTitleAfterRefresh.equals(consumptionPageTitleBeforeRefresh)
				&& !consumptionPageTitleAfterRefresh.equals("") && !consumptionPageTitleAfterRefresh.equals(null)) {
			logger.info("Page refresh successful");
			extent.extentLogger("", "Page refresh successful");
		} else {
			extent.extentLoggerFail("", "Page refresh failed");
			logger.error("Page refresh failed");
		}
	}

	public void PWAVerifyNextContentPlayAfterBeforeTVContent(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("PWA2-6852 : Verify next content play after before TV content");
			logger.info("PWA2-6852 : Verify next content play after before TV content");
			mandatoryRegistrationPopUp(userType);
			reloadHome();
			String contentPlayed = swipeTillTrayAndClickCard("Before Zee TV");
			waitTime(7000);
			if (checkElementDisplayed(PWAPlayerPage.subscribePopUp, "Subscription popup")) {
				waitTime(3000);
				click(PWAPlayerPage.ObjSubscriptionpopupCloseIcon, "Subscription popup close icon");
			}
			waitTime(7000);
			waitForPlayerAdToComplete("Video Player");
			String nextContent = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle, "Content Title")
					.toString();
			logger.info("Content name playing: " + nextContent);
			extent.extentLogger("", "Content name playing: " + nextContent);
			if (contentPlayed.equals(nextContent)) {
				logger.error("Next content failed to play after before tv promo play");
				extent.extentLoggerFail("", "Next content failed to play after before tv promo play");
			} else {
				logger.info("Next content played successfully after before tv promo play");
				extent.extentLogger("", "Next content played successfully after before tv promo play");
			}
		}
	}

	public void PWAClickSubscribeDuringTrailerPlay(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			reloadHome();
			extent.HeaderChildNode("PWA2-6864 : Trailer play after clicking Subscribe below player");
			logger.info("PWA2-6864 : Trailer play after clicking Subscribe below player");
			click(PWAHomePage.objSearchBtn, "Search icon");
			String content = "Soojidaara | Trailer";
			type(PWASearchPage.objSearchEditBox, content, "Search edit");
			waitTime(3000);
			click(PWASearchPage.objspecificSearch, "Searched content");
			if (userType.equals("Guest")) {
				waitTime(3000);
				if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Why Register Pop Up")) {
					click(PWASearchPage.objCloseRegisterDialog, "Close Button");
				}
			}
			waitTime(5000);
			click(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, "Subscribe button below player during Ad Play");
			verifyElementPresent(PWASubscriptionPages.objSubscribepopup, "Subscribe popup");
			click(PWAPremiumPage.objClosePremiumPopup, "Subscribe popup close button");
			playerTap();
			String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
					"Current duration");
			System.out.println("Current Duration: " + currentDuration);
			extent.extentLogger("", "Current Duration: " + currentDuration);
			if (currentDuration.equals("") || currentDuration.equals(null)) {
				extent.extentLoggerFail("", "Trailer failed to resume after dismissing pop up");
				logger.error("Trailer failed to resume after dismissing pop up");
			} else {
				extent.extentLogger("", "Trailer resumed after dismissing pop up, expected behavior");
				logger.info("Trailer resumed after dismissing pop up, expected behavior");
			}
		}
	}

	public void PWAVerifyNewsVODPlay(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode("PWA2-6926 : Verify error is not displayed on playing News VOD Content");
		logger.info("PWA2-6926 : Verify error is not displayed on playing News VOD Content");
		String home = getParameterFromXML("url");
		ArrayList<String> urlsToOpen = new ArrayList<String>();
		urlsToOpen.add(home
				+ "news/details/international-womens-day-2021-date-history-significance-and-theme-of-the-day/0-0-newsauto_626t9qsgl500");
		urlsToOpen.add(
				home + "news/details/budget-2021-p-chidambaram-talks-about-budget-2021/0-0-newsauto_6u2nna3ugl70)");
		urlsToOpen.add(home + "news/details/bank-of-maharashtra-gold-loans-pre-roll/0-0-newsauto_47pt91la0ag0");
		urlsToOpen.add(
				home + "news/details/dixon-technologies-cfo-on-growth-run-rate-and-more/0-0-newsauto_1smvmfh58ep8");
		urlsToOpen.add(
				home + "news/details/budget-2021-who-gets-affected-by-proposed-epf-changes/0-0-newsauto_5g26jf84rkg0");
		urlsToOpen.add(home + "news/details/government-to-unveil-securities-related-laws/0-0-newsauto_6m35kvcf4lm0");
		String currentUrl = "";
		for (int i = 0; i < urlsToOpen.size(); i++) {
			currentUrl = urlsToOpen.get(i);
			getDriver().get(currentUrl);
			logger.info("Navigated to News VOD content : " + currentUrl);
			extent.extentLogger("", "Navigated to News VOD content : " + currentUrl);
			waitTime(4000);
			if (checkElementDisplayed(PWAHomePage.objOopsNoInfo, "Oops! No Information available")) {
				extent.extentLoggerFail("", "News VOD content play failed");
				logger.error("News VOD content play failed");
			} else {
				String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
						"Content Title").toString();
				if (consumptionPageTitle.equals("") || consumptionPageTitle.equals(null)) {
					extent.extentLoggerFail("", "Failed to fetch News VOD content title");
					logger.error("Failed to fetch News VOD content title");
				} else {
					extent.extentLogger("", "News VOD content title : " + consumptionPageTitle);
					logger.info("News VOD content title : " + consumptionPageTitle);
				}
			}
		}
	}

	public void PWAVerifyImageAssetForZee5Logo(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-6964 : Verify Image Asset For Zee5 Logo");
		logger.info("PWA2-6964 : Verify Image Asset For Zee5 Logo");
		extent.extentLogger("", "---------- Verify ZEE5 Logo src attribute value in Home page-----------");
		reloadHome();
		String source = getElementPropertyToString("src", PWAHomePage.objZeeLogo, "ZEE5 Logo").toString();
		extent.extentLogger("", "Value of src attribute of ZEE5 Logo: " + source);
		logger.info("Value of src attribute of ZEE5 Logo: " + source);
		if (source.contains("/images/ZEE5_logo.svg")) {
			extent.extentLogger("", "SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
			logger.info("SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
		} else {
			extent.extentLoggerFail("", "SVG image is not used in place of PNG for ZEE5 Logo");
			logger.error("SVG image is not used in place of PNG for ZEE5 Logo");
		}
		if (userType.equals("Guest")) {
			extent.extentLogger("",
					"---------- Verify ZEE5 Logo src attribute value in Forgot Password page-----------");
			click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			click(PWALoginPage.objLoginBtn, "Login button");
			waitTime(5000);
			click(PWALoginPage.objForgotPasswordTxt, "Forgot Password link");
			String sourceInForgotPassPage = getElementPropertyToString("src",
					PWAHomePage.objZeeLogoInForgotPasswordPage, "ZEE5 Logo").toString();
			extent.extentLogger("", "Value of src attribute of ZEE5 Logo: " + sourceInForgotPassPage);
			logger.info("Value of src attribute of ZEE5 Logo: " + sourceInForgotPassPage);
			if (sourceInForgotPassPage.contains("/images/ZEE5_logo.svg")) {
				extent.extentLogger("", "SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
				logger.info("SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
			} else {
				extent.extentLoggerFail("", "SVG image is not used in place of PNG for ZEE5 Logo");
				logger.error("SVG image is not used in place of PNG for ZEE5 Logo");
			}
		}
		extent.extentLogger("", "---------- Verify ZEE5 Logo src attribute value in Show Details page-----------");
		mandatoryRegistrationPopUp(userType);
		reloadHome();
		String show = "Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, show, "Search Field");
		click(PWASearchPage.objSearchShowsTab, "Shows tab");
		click(PWASearchPage.objSearchedResult(show), "Searched content");
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String sourceInShowPage = getElementPropertyToString("src", PWAHomePage.objZeeLogo, "ZEE5 Logo").toString();
		extent.extentLogger("", "Value of src attribute of ZEE5 Logo: " + sourceInShowPage);
		logger.info("Value of src attribute of ZEE5 Logo: " + sourceInShowPage);
		if (sourceInShowPage.contains("/images/ZEE5_logo.svg")) {
			extent.extentLogger("", "SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
			logger.info("SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
		} else {
			extent.extentLoggerFail("", "SVG image is not used in place of PNG for ZEE5 Logo");
			logger.error("SVG image is not used in place of PNG for ZEE5 Logo");
		}
		extent.extentLogger("", "---------- Verify ZEE5 Logo src attribute value in Consumptions page-----------");
		mandatoryRegistrationPopUp(userType);
		reloadHome();
		String episode = "Prithvi offers Sarla a fake apology - Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, episode, "Search Field");
		click(PWASearchPage.objSearchedResult(episode), "Searched content");
		String sourceInPlayerPage = getElementPropertyToString("src", PWAHomePage.objZeeLogo, "ZEE5 Logo").toString();
		extent.extentLogger("", "Value of src attribute of ZEE5 Logo: " + sourceInPlayerPage);
		logger.info("Value of src attribute of ZEE5 Logo: " + sourceInPlayerPage);
		if (sourceInPlayerPage.contains("/images/ZEE5_logo.svg")) {
			extent.extentLogger("", "SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
			logger.info("SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
		} else {
			extent.extentLoggerFail("", "SVG image is not used in place of PNG for ZEE5 Logo");
			logger.error("SVG image is not used in place of PNG for ZEE5 Logo");
		}
		mandatoryRegistrationPopUp(userType);
	}

	public void TVShowsValidation(String userType) throws Exception {
		if (userType.contentEquals("Guest")) {
			landingPagesValidation(userType, "TV Shows");
			verifyLandscapeforFreeContent();
			// verifyLandscapeforPremiumContent(); premium content cannot be viewed by guest
			// and non subscribed user
		} else if (userType.contentEquals("NonSubscribedUser")) {
			landingPagesValidation(userType, "TV Shows");
			verifyLandscapeforFreeContent();
			// verifyLandscapeforPremiumContent(); premium content cannot be viewed by guest
			// and non subscribed user
			VerifyExternalLinkInShowsLandingPage();
		} else if (userType.contentEquals("SubscribedUser")) {
			landingPagesValidation(userType, "TV Shows");
			verifyLandscapeforFreeContent();
			verifyLandscapeforPremiumContent();
			VerifyExternalLinkInShowsLandingPage();
		}
	}

	public boolean navigateToPerticularScreen(String screen) throws Exception {
		for (int i = 0; i < 3; i++) {
			try {
				if (verifyElementPresentAndClick(PWAHomePage.objTabName1(screen), "Tab : " + screen))
					return true;
			} catch (Exception e) {
				try {
					swipeOnTab("Left");
					if (verifyElementPresentAndClick(PWAHomePage.objTabName1(screen), "Tab : " + screen)) {
						waitTime(5000);
						return true;
					}
				} catch (Exception exc) {
					swipeOnTab("Right");
				}
			}
		}
		return false;
	}

	public void PWAVerifyTextInCTAOFSubscriptionPage(String userType) throws Exception {
		if (userType.equals("Guest")) {
			reloadHome();
			extent.HeaderChildNode("PWA2-7908 : Subscription page shows incorrect text on CTA");
			logger.info("PWA2-7908 : Subscription page shows incorrect text on CTA");
			verifyElementPresentAndClick(PWAHomePage.objBuyPlanCTA, "Buy Plan");

			String price = null;
			price = getText(PWASubscriptionPages.objPackSelected);
			String ContinueBtnTxt = getText(PWASubscriptionPages.objContinueButtonTxt);
			if (ContinueBtnTxt.equals("Continue with ₹" + price)) {
				extent.extentLoggerPass("", "Text on Continue button is displayed properly");
				logger.error("Text on Continue button is displayed properly");
			} else {
				extent.extentLoggerFail("", "Text on Continue button is not displayed proper");
				logger.error("Text on Continue button is not displayed proper");
			}
			click(PWASubscriptionPages.objPackCheckBox, "Check Box");
			price = getText(PWASubscriptionPages.objPackSelected);
			String ContinueBtnTxt2 = getText(PWASubscriptionPages.objContinueButtonTxt);
			if (ContinueBtnTxt2.equals("Continue with ₹" + price)) {
				extent.extentLoggerPass("", "Text on Continue button is displayed properly");
				logger.error("Text on Continue button is displayed properly");
			} else {
				extent.extentLoggerFail("", "Text on Continue button is not displayed proper");
				logger.error("Text on Continue button is not displayed proper");
			}
		}
	}

	public void PWAVerifyTextInUpgradeCTAOfSubscriptionPage(String userType) throws Exception {
		if (userType.equals("Guest")) {
			reloadHome();
			extent.HeaderChildNode("PWA2-7909 : Subscription page shows incorrect text on CTA");
			logger.info("PWA2-7909 : Subscription page shows incorrect text on CTA");
			verifyElementPresentAndClick(PWAHomePage.objBuyPlanCTA, "Buy Plan");

			String price = null;
			price = getText(PWASubscriptionPages.objPackSelected);
			String ContinueBtnTxt = getText(PWASubscriptionPages.objContinueButtonTxt);
			if (ContinueBtnTxt.equals("Continue with ₹" + price)) {
				extent.extentLoggerPass("", "Text on Continue button is displayed properly");
				logger.error("Text on Continue button is displayed properly");
			} else {
				extent.extentLoggerFail("", "Text on Continue button is not displayed proper");
				logger.error("Text on Continue button is not displayed proper");
			}
			click(PWASubscriptionPages.objPackCheckBox, "Check Box");
			price = getText(PWASubscriptionPages.objPackSelected);
			String ContinueBtnTxt2 = getText(PWASubscriptionPages.objContinueButtonTxt);
			if (ContinueBtnTxt2.equals("Continue with ₹" + price)) {
				extent.extentLoggerPass("", "Text on Continue button is displayed properly");
				logger.error("Text on Continue button is displayed properly");
			} else {
				extent.extentLoggerFail("", "Text on Continue button is not displayed proper");
				logger.error("Text on Continue button is not displayed proper");
			}
		}
	}

//	SPRINT 58

	public void contentsOnTheWatchlist(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			System.out.println("PWA2-7933");
			extent.HeaderChildNode(
					"Task PWA2-7933 : Verify User should have an account that has contents on the Watchlist");

			loginWithUserEmail("rock123@g.com", "123456");

			waitTime(5000);
			verifyElementPresentAndClick(PWAHomePage.objTabName("Movies"), "Movies Tab");
			waitTime(9000);
			verifyElementPresent(PWAMoviesPage.objOneOfVideo, "One of Movie Trailer");
			waitTime(20000);
			click(PWAMoviesPage.objOneOfVideo, "One of Movie Trailer");
			String movieName = findElement(PWAPlayerPage.objMovieName).getText();
			System.out.println(movieName);
			verifyElementPresentAndClick(PWAPlayerPage.watchListBtn, "watch List Btn");
			waitTime(5000);
//			click(PWAPlayerPage.objLoginText, movieName);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");

			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.myAccount, "My Account");
			waitTime(5000);
			verifyElementPresentAndClick(PWAAddToWatchListPage.objMyWatchList, "MyWatch List");
			waitTime(4000);
			verifyElementPresentAndClick(PWAAddToWatchListPage.objMoviesTab, "Movies Tab");
			waitTime(5000);
			verifyElementPresent(PWAAddToWatchListPage.objmovieText(movieName), "Movie Name");
			System.out.println(movieName);
			logout();
		}

	}

	public void invalidCodeErrorMessage(String userType) throws Exception {
		reloadHome();
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {

			System.out.println("PWA2-8030");
			extent.HeaderChildNode("Task PWA2-8030 : Invalid code error message should be displayed");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			waitTime(30000);
			PartialSwipe("UP", 1);

			verifyElementExist(PWASubscriptionPages.objHaveACodeMPWA, "Have a code?");

			click(PWASubscriptionPages.objHaveACodeMPWA, "Have a code?");
			waitTime(5000);
			verifyElementPresentAndClick(PWASubscriptionPages.objTextForHaveACode, "Enter code text field");
			waitTime(3000);
			type(PWASubscriptionPages.objTextForHaveACode, "TESTZ40", "Enter code text field");
			waitTime(4000);
			hideKeyboard();
			verifyElementPresentAndClick(PWASubscriptionPages.objApplyBtn, "Apply Button");
			waitTime(5000);
			verifyElementPresent(PWASubscriptionPages.objCodeIsInvalid, "Code Is Invalid");
		}

	}

	public void relatedContentOrDescriptionShouldBeDisplayed(String userType) throws Exception {
		reloadHome();
		System.out.println("PWA2-7684");

		extent.HeaderChildNode("Task PWA2-7684 : Corresponding or related content or description should be displayed.");
		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
		waitTime(30000);
		click(PWASubscriptionPages.objBlockbusterMovie, "Blockbuster Movie");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objBlockbusterMovies, "Blockbuster Movies popup");

		click(PWASubscriptionPages.objCloseButton, "Close Button");
		waitTime(3000);
		verifyIsElementDisplayed(PWASubscriptionPages.obj200PlushWebSeries, "200 Plush Web Series");
		click(PWASubscriptionPages.obj200PlushWebSeries, "200 Plush Web Series");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.obj200WebSeriesPopUp, "200 + WebSeries PopUp");
		waitTime(3000);
		click(PWASubscriptionPages.objCloseButton, "Close Button");
		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objPaymentBasedOffers, "Payment Based Offers");
		click(PWASubscriptionPages.objPaymentBasedOffers, "Payment Based Offers");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objSeePaymentBasedOffersPopUP, "See Payment Based Offers PopUP");

	}

	public void headerTextAndRailNameShouldBeUpdatedAndDisplayed(String userType) throws Exception {
		reloadHome();
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode("Header Text are not displayed as per the VD validation (PWA2-7819)");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Blockbuster Movies"),
					"Blockbuster movies");
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("4500+ Blockbuster Movies"),
					"4500+ Blockbuster Movies")) {
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"Corresponding or related content or description should be displayed, expected behaviour");
			} else {
				logger.info("A blank screen is displayed for Blockbuster Movies ");
				extent.extentLoggerFail(" ", "A blank screen is displayed for Blockbuster Movies ");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Web Series"), "Web Series");
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("200+ Web series"),
					"Unlimlted Web series")) {
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"Corresponding or related content or description should be displayed, expected behaviour");
			} else {
				logger.info("A blank screen is displayed for Unlimlted Web series");
				extent.extentLoggerFail(" ", "A blank screen is displayed for Unlimlted Web series");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);

//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Ad free"), "Ad free");
//			waitTime(3000);
//			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("Ad-Free Entertainment"),
//					"Ad-Free Entertainment")) {
//				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
//				extent.extentLoggerPass("",
//						"Corresponding or related content or description should be displayed, expected behaviour");
//			} else {
//				logger.info("A blank screen is displayed for Ad free Entertainment");
//				extent.extentLoggerFail(" ", "A blank screen is displayed for Ad free Entertainment");
//
//			}
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
//			waitTime(3000);

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Payment based Offers"), "Before TV");
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("See Payment Based Offers"),
					"TV shows 24 Hours Before TV")) {
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"Corresponding or related content or description should be displayed, expected behaviour");
			} else {
				logger.info("A blank screen is displayed for TV shows 24 Hours Before TV");
				extent.extentLoggerFail(" ", "A blank screen is displayed for TV shows 24 Hours Before TV");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode(
					"For some of the content languages all the perk slides or benefits slides are blank validation (PWA2-7684)");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Blockbuster Movies"),
					"Blockbuster movies");
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("4500+ Blockbuster Movies"),
					"4500+ Blockbuster Movies")) {
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"Corresponding or related content or description should be displayed, expected behaviour");
			} else {
				logger.info("A blank screen is displayed for Blockbuster Movies ");
				extent.extentLoggerFail(" ", "A blank screen is displayed for Blockbuster Movies ");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Web Series"), "Web Series");
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("200+ Web series"), "200+ Web series")) {
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"Corresponding or related content or description should be displayed, expected behaviour");
			} else {
				logger.info("A blank screen is displayed for 200+ Web series");
				extent.extentLoggerFail(" ", "A blank screen is displayed for 200+ Web series");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);

//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Ad free"), "Ad free");
//			waitTime(3000);
//			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("Watch Ad-Free"), "Watch Ad-Free")) {
//				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
//				extent.extentLoggerPass("",
//						"Corresponding or related content or description should be displayed, expected behaviour");
//			} else {
//				logger.info("A blank screen is displayed for Ad free");
//				extent.extentLoggerFail(" ", "A blank screen is displayed for Ad free");
//
//			}
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
//			waitTime(3000);

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Payment based Offers"), "Before TV");
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("See Payment Based Offers"),
					"Watch Before TV")) {
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"Corresponding or related content or description should be displayed, expected behaviour");
			} else {
				logger.info("A blank screen is displayed for See Payment Based Offers");
				extent.extentLoggerFail(" ", "A blank screen is displayed for See Payment Based Offers");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
	}

//	if(userType.equals("Guest")) {	
//		System.out.println("PWA2-7819");
//		extent.HeaderChildNode("PWA2-7819 : [Subscription_Revamp] Header Text are not displayed as per the VD in \"Blockbuster movies,web series ,adfree, tv-shows\" bottom banners.\r\n");
//
//		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
//		waitTime(30000);
//
//		String BlockbusterMovie = findElement(PWASubscriptionPages.objBlockbusterMovie).getText();
//	
//		if (verifyElementPresent(PWASubscriptionPages.objBlockbusterMovie,"Blockbuste Movie")) {
//			logger.info("" + BlockbusterMovie + " is displayed");
//			extent.extentLoggerPass("","" + BlockbusterMovie + " is displayed");
//		} else {
//			logger.info("" +"Blockbuster Movies is not displayed");
//			extent.extentLoggerFail("","Blockbuster Movies is not displayed");
//		}
//		click(PWASubscriptionPages.objBlockbusterMovie,"Blockbuste Movie");
//		waitTime(3000);
//		String bestOfBlockbusterMovies = findElement(PWASubscriptionPages.objBestOfBlockbusterMovies).getText();
//		System.out.println(bestOfBlockbusterMovies);
//		if (verifyElementPresent(PWASubscriptionPages.objBestOfBlockbusterMovies, "Best Of Blockbuster Movies")) {
//			logger.info("" + bestOfBlockbusterMovies + " is displayed");
//			extent.extentLoggerPass("","" + bestOfBlockbusterMovies + " is displayed");
//		} else {
//			logger.info("" +"Blockbuster Movies is not displayed");
//			extent.extentLoggerFail("","Blockbuster Movies is not displayed");
//		}
//		String BlockbusterMovies = findElement(PWASubscriptionPages.objBlockbusterMovies).getText();
//		System.out.println(BlockbusterMovies);
//		if (verifyElementPresent(PWASubscriptionPages.objBlockbusterMovies,"Blockbuster Movies text")) {
//			logger.info("" + bestOfBlockbusterMovies + " is displayed");
//			extent.extentLoggerPass("","" + bestOfBlockbusterMovies + " is displayed");
//		} else {
//			logger.info("" +"Blockbuster Movies is not displayed");
//			extent.extentLoggerFail("","Blockbuster Movies is not displayed");
//		}
//		click(PWASubscriptionPages.objCloseButton, "Close Button");
//		
//		waitTime(2000);
//		click(PWASubscriptionPages.obj200PlushWebSeries, "200 Plush Web Series");
//		waitTime(3000);
//		String WebSeriesPopUp = findElement(PWASubscriptionPages.obj200WebSeriesPopUp).getText();
//
//		if (verifyElementPresent(PWASubscriptionPages.obj200WebSeriesPopUp, "200 WebSeries PopUp")) {
//			logger.info("" + WebSeriesPopUp + " is displayed");
//			extent.extentLoggerPass("","" + WebSeriesPopUp + " is displayed");
//		} else {
//			logger.info("" +"200 WebSeries PopUp is not displayed");
//			extent.extentLoggerFail("","200 WebSeries PopUp is not displayed");
//		}
//		String 	bestOfWebSeries = findElement(PWASubscriptionPages.objBestOfWebSeries).getText();
//		if (verifyElementPresent(PWASubscriptionPages.objBestOfWebSeries, "Best Of Web Series")) {
//			logger.info("" + bestOfWebSeries + " is displayed");
//			extent.extentLoggerPass("","" + bestOfWebSeries + " is displayed");
//		} else {
//			logger.info("" +"Best Of Web Series text is not displayed");
//			extent.extentLoggerFail("","Best Of Web Series text is not displayed");
//		}
//		click(PWASubscriptionPages.objCloseButton, "Close Button");
//
//		waitTime(2000);
//		click(PWASubscriptionPages.objPaymentBasedOffers, "Payment Based Offers");
//		waitTime(3000);
//		String 	SeePaymentBasedOffersPopUP = findElement(PWASubscriptionPages.objSeePaymentBasedOffersPopUP).getText();
//
//		if(verifyElementPresent(PWASubscriptionPages.objSeePaymentBasedOffersPopUP, "See Payment Based Offers PopUP")) {
//			logger.info("" + SeePaymentBasedOffersPopUP + " is displayed");
//			extent.extentLoggerPass("","" + SeePaymentBasedOffersPopUP + " is displayed");
//		} else {
//			logger.info("" +"See Payment Based Offers is not displayed");
//			extent.extentLoggerFail("","See Payment Based Offers is not displayed");
//		}
//		
//	}		
	public void crownSymbolShouldBeCisplayedOnGetPremiumCTA(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			System.out.println("PWA2-7816");
			extent.HeaderChildNode(
					"PWA2-7816 : [Subscription Revamp][Vivo device] Crown icon is not displaying on Get Premium CTA on carousel when display language is changed to Tamil.");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			waitTime(5000);
			verifyElementPresentAndClick(PWALanguageSettingsPage.objLanguage("Tamil"), "Tamil Language Button");
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(2000);
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(5000);
			verifyElementPresent(PWAHomePage.objCrownSymble, "Crown Symble");

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			waitTime(5000);
			verifyElementPresentAndClick(PWALanguageSettingsPage.objLanguage("ஆங்கிலம்"), "English Language Button");
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(2000);
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		}

	}

	public void planPriceINR749ShouldBeDisplayed(String userType) throws Exception {
		reloadHome();
		System.out.println("PWA2-7800");
		extent.HeaderChildNode(
				"PWA2-7800 : [Subscription_revamp]INR 499 Price displayed on the My subscription, My Profile and Explore Premium Pages for 25% off annual pack(INR749) user. [refer screenshot]");

		loginWithUserEmail("25off@mailnesia.com", "123456");

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		waitTime(3000);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.myAccount, "My Account");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription Button");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.OBJDiscount999, "25% Discount on 999");
		verifyElementPresent(PWASubscriptionPages.objINR749, "INR 749");

		logout();

	}

	public void verifyOTPCTAShouldBeDisplayed(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			System.out.println("PWA2-7795");
			extent.HeaderChildNode(
					"PWA2-7795 : [Subscription_Revamp] \"Verify\" CTA is displayed instead of \"Verify OTP\" CTA in OTP verification screen.");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			waitTime(20000);

			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtnMPWA, "Continue Btn");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objEmailIDTextField, "Email ID Text Field");
			waitTime(3000);
			type(PWALoginPage.objEmailField, "9059995072", "Email Field");
			waitTime(5000);
			hideKeyboard();
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtnAccountInfoPage, "Continue Btn");
//			click(PWASubscriptionPages.objContinueBtnMPWA, "Continue Btn");
			waitTime(5000);
			verifyElementPresent(PWASubscriptionPages.objVerifyOTPButton, "Verify OTP Button");

		}
	}

	public void payNowCTAShouldBeDisplayed(String userType) throws Exception {
		reloadHome();
		if (userType.equals("NonSubscribedUser")) {
			System.out.println("PWA2-7793");
			extent.HeaderChildNode(
					"PWA2-7793 : [Subscription_Revamp] \"Proceed to pay \"CTA is displayed instead of \"Pay now\" CTA in payments page");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			waitTime(20000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtnMPWA, "Continue Btn");
			waitTime(5000);
			verifyElementPresentAndClick(PWASubscriptionPages.OBJUPIMPWA, "UPI");
			waitTime(3000);
			hideKeyboard();
			verifyElementPresent(PWASubscriptionPages.objCreditDebitProceedToPay, "Proceed To Pay");

			logout();

		}
	}

	public void userShouldBeNavigatedBacKToTheSubscriptionPage(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			System.out.println("PWA2-7687");
			extent.HeaderChildNode(
					"PWA2-7687 : [Subscription_Revamp] \"Error\" page is displayed when the user logins via the Subscription Page [Refer Video]");

			verifyElementPresentAndClick(PWAHomePage.objByPlanMPWA, "Bye Now Button");
			waitTime(20000);
			click(PWASubscriptionPages.objLoginButton, "Login Button");
			waitTime(4000);
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, Username, "Email Field");
			hideKeyboard();
			waitTime(5000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, Password, "Password field");
			hideKeyboard();
			waitTime(5000);

			click(PWALoginPage.objWebLoginButton, "Login Button");

//			click(PWALoginPage.objContinueBtn, "Continue Btn");
			waitTime(10000);

			verifyElementPresent(PWASubscriptionPages.objByePremiumNow, "Buy Premium Now!");
			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee5 Logo");
			waitTime(4000);
			logout();
		}
	}

	public void toWatchThisPremiumContentAndSkipAndByPlan(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			System.out.println("PWA2-7688");
			extent.HeaderChildNode("PWA2-7688");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHomePage.objTabName("Movies"), "Movies Tab");
			waitTime(30000);
			verifyElementPresent(PWAMoviesPage.objOneOfVideo, "One of Movie Trailer");
			waitTime(20000);
			click(PWAMoviesPage.objOneOfVideo, "One of Movie Trailer");
			waitForElementPresence(PWAComboOfferPage.objBuyPlanInPlayer, 180, "Rent Now CTA in-player");
			String buyPlanCTA = findElement(PWAComboOfferPage.objBuyPlanInPlayer).getText();

			if (verifyElementPresent(PWAComboOfferPage.objBuyPlanInPlayer, "Buy Plan CTA")) {
				logger.info("" + buyPlanCTA + " is displayed");
				extent.extentLoggerPass("", "" + buyPlanCTA + " is displayed");
			} else {
				logger.info("" + "Buy Plan CTA is not displayed");
				extent.extentLoggerFail("", "Buy Plan CTA is not displayed");
			}
			String skipCTA = findElement(PWAComboOfferPage.objSkipCTAPlaybackOnConsumptionPage).getText();

			if (verifyElementPresent(PWAComboOfferPage.objSkipCTAPlaybackOnConsumptionPage, "Skip CTA")) {
				logger.info("" + skipCTA + " is displayed");
				extent.extentLoggerPass("", "" + skipCTA + " is displayed");
			} else {
				logger.info("" + "Skip CTA is not displayed");
				extent.extentLoggerFail("", "Skip CTA is not displayed");
			}
			String toWatchPremiumContent = findElement(PWAComboOfferPage.objwatchFullContentByRentingIt).getText();

			if (verifyElementPresent(PWAComboOfferPage.objwatchFullContentByRentingIt, "To watch Premium Content")) {
				logger.info("" + toWatchPremiumContent + " is displayed");
				extent.extentLoggerPass("", "" + toWatchPremiumContent + " is displayed");
			} else {
				logger.info("" + "To watch Premium Content is not displayed");
				extent.extentLoggerFail("", "To watch Premium Content CTA is not displayed");
			}

		}
	}

	public void explorePremiumCTAShouldBeDisplayed(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			System.out.println(
					"PWA2-7704 : [Subscription_Revamp] Pack Upgrade page is displayed for 749 pack user when user logins via guest check [Refer Video]");
			extent.HeaderChildNode(
					"PWA2-7704 : [Subscription_Revamp] Pack Upgrade page is displayed for 749 pack user when user logins via guest check [Refer Video]");

			verifyElementPresentAndClick(PWAHomePage.objByPlanMPWA, "Bye Now Button");
			waitTime(20000);

			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtnMPWA, "Continue Btn");
			waitTime(3000);

			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "shivarajmc26@gmail.com", "Email Field");
			hideKeyboard();
			waitTime(5000);
			click(PWASubscriptionPages.objContinueBtnAccountInfoPage, "Continue");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			hideKeyboard();
			click(PWASubscriptionPages.objContinueBtnAccountInfoPage, "Continue");

			waitTime(5000);

			verifyElementPresent(PWASubscriptionPages.objexplorePremium, "Explore Premium");

		}
	}

	public void explorePremiumCTAScreenWithToastMessage(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			System.out.println(
					"PWA2-7710 : [Subscription_revamp] User navigated to payments page with discount calculation, post login using INR999 with 25% off premium user credentials via Guest checkout journey.[refer steps]");
			extent.HeaderChildNode(
					"PWA2-7710 : [Subscription_revamp] User navigated to payments page with discount calculation, post login using INR999 with 25% off premium user credentials via Guest checkout journey.[refer steps]");

			verifyElementPresentAndClick(PWAHomePage.objByPlanMPWA, "Bye Now Button");
			waitTime(20000);

			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtnMPWA, "Continue Btn");
			waitTime(3000);

			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "25off@mailnesia.com", "Email Field");
			hideKeyboard();
			waitTime(5000);
			click(PWASubscriptionPages.objContinueBtnAccountInfoPage, "Continue");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			hideKeyboard();
			click(PWASubscriptionPages.objContinueBtnAccountInfoPage, "Continue");

			waitTime(5000);

			verifyElementPresent(PWASubscriptionPages.objexplorePremium, "Explore Premium");

			verifyElementPresent(PWASubscriptionPages.OBJYourPrimium749For1YearPlan,
					"Your Primium 749 For 1 Year Plan");

		}
	}

	public void reloadingTrailerPlaybackPage(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			System.out.println(
					"PWA2-7599 : Error page displayed when refresh the TV show/Zee5 Originals trailer playback page.[refer video]\r\n"
							+ "");
			extent.HeaderChildNode(
					"PWA2-7599 :Error page displayed when refresh the TV show/Zee5 Originals trailer playback page.[refer video]\r\n"
							+ "");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHomePage.objTabName("Movies"), "Movies Tab");
			waitTime(30000);
			verifyElementPresent(PWAMoviesPage.objOneOfVideo, "One of Movie Trailer");

			click(PWAMoviesPage.objOneOfVideo, "One of Movie Trailer");
			waitTime(10000);
			getDriver().navigate().refresh();
			waitTime(5000);
			verifyElementPresent(PWAComboOfferPage.objYoureWatchingATrailer, "Youre Watching A Trailer");

		}

	}

	public void geTPremiumCTAShouldBeDisplayedOnBelowThePlayer(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			System.out.println(
					"PWA2-7599 : Error page displayed when refresh the TV show/Zee5 Originals trailer playback page.[refer video]\r\n"
							+ "");
			extent.HeaderChildNode(
					"PWA2-7599 :Error page displayed when refresh the TV show/Zee5 Originals trailer playback page.[refer video]\r\n"
							+ "");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHomePage.objTabName("Movies"), "Movies Tab");
			waitTime(30000);
			verifyElementPresent(PWAMoviesPage.objOneOfVideo, "One of Movie Trailer");

			click(PWAMoviesPage.objOneOfVideo, "One of Movie Trailer");
			waitForElementPresence(PWAComboOfferPage.objBuyPlanInPlayer, 180, "Rent Now CTA in-player");

			verifyElementPresent(PWAComboOfferPage.objBuyPlanInPlayerBelowPlayerCTA, "Buy Plan");

		}
	}

	public void verifyNewTabRevised(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("PWA2-7509 : Implement the new Tab order with their revised names");
			logger.info("PWA2-7509 : Implement the new Tab order with their revised names");
			mandatoryRegistrationPopUp(userType);
			waitTime(10000);
			List<WebElement> TabElements = findElements(PWAHomePage.objTabCountList);
			String[] tabs = { "Home", "TV Shows", "Movies", "Web Series", "News", "Premium", "Live TV", "ZEEPLEX",
					"Play", "Web Stories", "Kids", "Videos", "Music", "Stories", "Channels" };
			for (int i = 0; i < tabs.length; i++) {
				String s = TabElements.get(i).getText();
				System.out.println("Tab is: " + s);
				if (tabs[i].contentEquals(s)) {
					extent.extentLoggerPass("", s + " Tab names and its order is as mentioned in the excel sheet.");
					logger.info(s + " Tab names and its order is as mentioned in the excel sheet.");
				} else {
					extent.extentLoggerFail("", s + " Tab names and its order is not as mentioned in the excel sheet.");
					logger.error("The Tab names and their order is not as mentioned in the excel sheet.");
				}
			}
		}

	}

	public void step2Of3ShouldNotBeDisplayed(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			System.out.println(
					"PWA2-7702 : [Subscription_revamp][Desktop] Stepper \"step 2 of 3\" displayed on the Enter Password popup from subscription journey account info page [refer Screenshot]");
			extent.HeaderChildNode(
					"PWA2-7702 : [Subscription_revamp][Desktop] Stepper \"step 2 of 3\" displayed on the Enter Password popup from subscription journey account info page [refer Screenshot]");
			waitTime(5000);

			verifyElementPresentAndClick(PWAHomePage.objByPlanMPWA, "Bye Now Button");
			waitTime(20000);

			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtnMPWA, "Continue Btn");
			waitTime(3000);

			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "25off@mailnesia.com", "Email Field");
			hideKeyboard();
			waitTime(5000);
			click(PWASubscriptionPages.objContinueBtnAccountInfoPage, "Continue");
			waitTime(5000);
//		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			if (verifyIsElementDisplayed(PWASubscriptionPages.OBJStep2To3, "Step 2 To 3")) {

				extent.extentLoggerFail("",
						"Stepper step 2 of 3 displayed on the Enter Password popup on the account info page");
				logger.error("Stepper step 2 of 3 displayed on the Enter Password popup on the account info page");
			} else {
				extent.extentLoggerPass("",
						"Stepper step 2 of 3 should not be displayed on the Enter Password popup on the account info page");
				logger.info(
						"Stepper step 2 of 3 should not be displayed on the Enter Password popup on the account info page");
			}
		}

	}

	public void resendOTPButtonShouldBeHighlighted(String userType) throws Exception {
		if (userType.equals("Guest")) {
			System.out.println(
					"PWA2-7761 : [Subscription_Revamp] \"Resend OTP\" text is not highlighted in \"verify OTP\" screen /bottom banner. [refer screenshot].");
			extent.HeaderChildNode(
					"PWA2-7761 : [Subscription_Revamp] \"Resend OTP\" text is not highlighted in \"verify OTP\" screen /bottom banner. [refer screenshot].");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHomePage.objByPlanMPWA, "Bye Now Button");
			waitTime(20000);

			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtnMPWA, "Continue Btn");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objEmailIDTextField, "Email ID Text Field");
			waitTime(3000);
			type(PWALoginPage.objEmailField, "9059995072", "Email Field");
			waitTime(5000);
			hideKeyboard();
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtnAccountInfoPage, "Continue Btn");
			waitTime(5000);
//			verifyElementPresent(PWASubscriptionPages., userType)

		}
	}

	public void skipCTAInlineMessageOnPlayerShouldBeTranslateAsPerTheSelectedDisplaylanguage(String userType)
			throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			System.out.println(
					"PWA2-7916 : [Subscription_Revamp] \"Resend OTP\" text is not highlighted in \"verify OTP\" screen /bottom banner. [refer screenshot].");
			extent.HeaderChildNode(
					"PWA2-7916 : [Subscription_Revamp] \"Resend OTP\" text is not highlighted in \"verify OTP\" screen /bottom banner. [refer screenshot].");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			waitTime(5000);
			verifyElementPresentAndClick(PWALanguageSettingsPage.objLanguage("Tamil"), "Tamil Language Button");
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(2000);
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(5000);

			waitTime(5000);
			verifyElementPresentAndClick(PWAHomePage.objTabName("திரைப்படங்கள்"), "Movies Tab");
			waitTime(30000);
			verifyElementPresent(PWAMoviesPage.objOneOfVideo, "One of Movie Trailer");

			click(PWAMoviesPage.objOneOfVideo, "One of Movie Trailer");
			waitForElementPresence(PWAComboOfferPage.objSkipTamilWords, 180, "Skip CTA in-player");
			String skipTamilWords = findElement(PWAComboOfferPage.objSkipTamilWords).getText();
			if (verifyElementPresent(PWAComboOfferPage.objSkipTamilWords, "Skip Tamil Words")) {
				extent.extentLogger("", skipTamilWords);
				logger.error(skipTamilWords);
			} else {
				extent.extentLoggerFail("", "Skip Tamil Words not displayed");
				logger.error("Skip Tamil Words not displayed");
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			waitTime(5000);
			verifyElementPresentAndClick(PWALanguageSettingsPage.objLanguage("ஆங்கிலம்"), "Tamil Language Button");
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(2000);
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		}

	}

	public void verifyUpgradeToAnnualPlanInSubscriptionPlanPage(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-7954 : \"upgrade to annual plan\" incorrect title is displayed on subscription screen for active 99 pack user");
			logger.info(
					"PWA2-7954 : \"upgrade to annual plan\" incorrect title is displayed on subscription screen for active 99 pack user");

//				logout();
			loginWithUserEmail("gdmplex@mailnesia.com", "123456");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			waitTime(2000);
			click(PWAHamburgerMenuPage.objDownArrow("My Account"), "Expander button");

			click(PWAHamburgerMenuPage.objMySubscriptionOption, "My Subscription Option");
			waitTime(1000);
			if (verifyElementExist(PWAHamburgerMenuPage.objMySubscriptionPageTitle, "My Subscription Page Title")) {
				logger.info("Navigated to My Subscription page");
				extent.extentLoggerPass("", "Navigated to My Subscription page");
//					ScrollToTheElementWEB(PWAHamburgerMenuPage.objBrowseAllPacks);
				click(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
				waitTime(4000);
				if (verifyElementExist(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText,
						"Browse All Packs Page Title Text")) {
					logger.info("Navigated to plan selection page");
					extent.extentLoggerPass("", "Navigated to plan selection page");
					String descriptionText = getText(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText);
					if (descriptionText.contains("upgrade to annual plan")) {
						logger.error(
								"\"upgrade to annual plan\" is displayed as the Title text on plan selection page");
						extent.extentLoggerFail("",
								"\"upgrade to annual plan\" is displayed as the Title text on plan selection page");
					} else {
						logger.info(
								"\"upgrade to annual plan\" is not displayed as the Title text on plan selection page");
						extent.extentLoggerPass("",
								"\"upgrade to annual plan\" is not displayed as the Title text on plan selection page");
					}
					if (descriptionText.contains("Upgrade now")) {
						logger.info("\"Upgrade now\" is displayed as the Title text on plan selection page");
						extent.extentLoggerPass("",
								"\"Upgrade now\" is displayed as the Title text on plan selection page");
					} else {
						logger.error("\"Upgrade now\" now is not displayed as the Title text on plan selection page");
						extent.extentLoggerFail("",
								"\"Upgrade now\" is not displayed as the Title text on plan selection page");
					}
				} else {
					logger.error("Not navigated to plan selection page");
					extent.extentLoggerFail("", "Not navigated to plan selection page");
				}
			} else {
				logger.error("Not navigated to My Subscription page");
				extent.extentLoggerFail("", "Not navigated to My Subscription page");
			}
			waitTime(2000);
			Back(1);
			waitTime(2000);
//				Back(1);
//				waitTime(2000);
			click(PWASubscriptionPages.objZeeLogo, "Zee5 Logo");
			logout();
		}
	}

	public void theTranslationShouldHappenBasedOnTheSelectedDisplayLanguage(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-7750 :[Subscription_Revamp] The translations fails for all the display language except for English in benefits page");
			logger.info(
					"PWA2-7750 : [Subscription_Revamp] The translations fails for all the display language except for English in benefits page");

			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			waitTime(5000);
			verifyElementPresentAndClick(PWALanguageSettingsPage.objLanguage("Tamil"), "Tamil Language Button");
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(2000);
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			waitTime(20000);
			click(PWASubscriptionPages.objBlockbusterMovie, "Blockbuste Movie");
			waitTime(3000);

//				String tamilText = findElement(PWASubscriptionPages.objTamilBlockbusterMoviesTitle).getText();
//				if(verifyElementPresent(PWASubscriptionPages.objTamilBlockbusterMoviesTitle, "Tamil Blockbuster Movies Title")) {
//					
//					logger.info("" + tamilText + " is displayed");
//					extent.extentLoggerPass("","" + tamilText + " is displayed");
//				} else {
//					logger.info("" +"Tamil Blockbuster Movies Title is not displayed");
//					extent.extentLoggerFail("","Tamil Blockbuster Movies Title is not displayed");
//				}
//				click(PWASubscriptionPages.objCloseButton, "Close Button");

			verifyElementPresent(PWASubscriptionPages.objTamilBlockbusterMoviesTitle, "4500+ Blockbuster Movies");
			String Sidetext = getText(PWASubscriptionPages.objTamilBlockbusterMoviesTitle);
			System.out.println(Sidetext);
			extent.extentLogger("", "Sidetext content text " + Sidetext);
			if (Sidetext.contains("4500+ Blockbuster Movies")) {
				logger.info("The translation fails on the benefits page.");
				extent.extentLoggerFail("", "The translation fails on the benefits page.");
			} else {
				logger.info(
						"The translation should happen based on the selected display language, extected behaviour ");
				extent.extentLoggerPass(" ",
						"The translation should happen based on the selected display language, expected behaviour");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);

			click(PWASubscriptionPages.obj200PlushWebSeries, "200 Plush Web Series");

			waitTime(3000);
			verifyElementPresent(PWASubscriptionPages.objTamil200WebSeriesTitle, "Unlimlted Web series");
			String Sidetext1 = getText(PWASubscriptionPages.objTamil200WebSeriesTitle);
			System.out.println(Sidetext1);
			extent.extentLogger("", "Sidetext content text " + Sidetext1);
			if (Sidetext.contains("Unlimlted Web series")) {
				logger.info("The translation fails on the benefits page.");
				extent.extentLoggerFail("", "The translation fails on the benefits page.");
			} else {
				logger.info(
						"The translation should happen based on the selected display language, extected behaviour ");
				extent.extentLoggerPass(" ",
						"The translation should happen based on the selected display language, expected behaviour");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
//				
//				verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Ad free"), "Ad free");
//				waitTime(3000);
//				
//				verifyElementPresent(PWAHamburgerMenuPage.objPerkSideText, "Ad-Free Entertainment");
//				String Sidetext2=getText(PWAHamburgerMenuPage.objPerkSideText);
//				System.out.println(Sidetext2);
//				extent.extentLogger("", "Sidetext content text " + Sidetext2);
//				if(Sidetext.contains("Ad-Free Entertainment"))
//				{
//					logger.info("The translation fails on the benefits page.");
//					extent.extentLoggerFail("", "The translation fails on the benefits page.");
//				}
//				else 
//				{
//					logger.info("The translation should happen based on the selected display language, extected behaviour ");
//					extent.extentLoggerPass(" ", "The translation should happen based on the selected display language, expected behaviour");
//				
//				}
//				verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
//				waitTime(3000);
			Back(1);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			waitTime(5000);
			verifyElementPresentAndClick(PWALanguageSettingsPage.objLanguage("ஆங்கிலம்"), "Tamil Language Button");
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(2000);
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");

		}

	}

	public void subscriptionPageShouldBeDisplayedWithTheToastMessage(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"Blank screen is displayed when user tries to login with subscribed user account.(PWA2-7745)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			waitTime(4000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
			PWAComboOfferLoginInSubscriptionFlow(userType, "499");
//		loginWithUserEmail("gdmplex@mailnesia.com", "123456");

			if (verifyElementPresent(PWAHamburgerMenuPage.objToastMessage, "Toast Message")) {
				logger.info(
						"The Subscription page should be displayed with the toast message as it's displayed, expected behaviour");
				extent.extentLoggerPass("",
						"The Subscription page should be displayed with the toast message as it's displayed, expected behaviour");
			} else {
				logger.info("A blank screen is displayed when a user tries to login with the subscribed user.");
				extent.extentLoggerFail("",
						"A blank screen is displayed when a user tries to login with the subscribed user.");

			}

		}
	}

	public void PWAComboOfferLoginInSubscriptionFlow(String userType, String premiumPlan) throws Exception {
		extent.HeaderChildNode("Combo Offer - Login In Subscription Flow");
		logger.info("Combo Offer - Login In Subscription Flow");
		waitTime(2000);

		if (premiumPlan.equals("799")) {
			PWALoginInSubscriptionFlow(getParameterFromXML("SubscribedUserName799"),
					getParameterFromXML("SubscribedPassword799"));
		} else if (premiumPlan.equals("299")) {
			PWALoginInSubscriptionFlow(getParameterFromXML("SubscribedUserName299"),
					getParameterFromXML("SubscribedPassword299"));
		} else if (premiumPlan.equals("499")) {
			PWALoginInSubscriptionFlow(getParameterFromXML("SubscribedUserName499"),
					getParameterFromXML("SubscribedPassword499"));
		} else if (premiumPlan.equals("99")) {
			PWALoginInSubscriptionFlow(getParameterFromXML("SubscribedUserName99"),
					getParameterFromXML("SubscribedPassword99"));
		} else {
			PWALoginInSubscriptionFlow(getParameterFromXML("SubscribedUserName"),
					getParameterFromXML("SubscribedPassword"));
		}
	}

	public void PWALoginInSubscriptionFlow(String userName, String password) throws Exception {

		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Page");
		waitTime(2000);
		click(PWASubscriptionPages.objEmailIDTextField, "Email Id");
		type(PWASubscriptionPages.objEmailIDTextField, userName, "Email Id");
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtnAccountInfoPage, "Continue Button");
		verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password");
		verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
		type(PWASubscriptionPages.objPasswordFieldHidden, password, "Password Field");
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtnAccountInfoPage, "Continue Button");

	}

	public void autoflipCarouselTitleShouldBeDisplayed(String userType) throws Exception {
		reloadHome();
		if (userType.equals("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Subscription page - Autoflip Carousel title validation based on display language (PWA2-7971) ");
			Kannadalanguageselection();
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			waitForElement(PWAHamburgerMenuPage.objAutoFlipcontent("ಮಕ್ಕಳ ಕಂಟೆಂಟ್ ಮತ್ತು ಪೋಷಕರ ಕಂಟ್ರೋಲ್"), 20,
					"Kids Content and Parental Control");
			verifyElementPresent(PWAHamburgerMenuPage.objAutoFlipcontent("ಮಕ್ಕಳ ಕಂಟೆಂಟ್ ಮತ್ತು ಪೋಷಕರ ಕಂಟ್ರೋಲ್"),
					"Kids Content and Parental Control");
			String AutoFlipContent1 = getText(
					PWAHamburgerMenuPage.objAutoFlipcontent("ಮಕ್ಕಳ ಕಂಟೆಂಟ್ ಮತ್ತು ಪೋಷಕರ ಕಂಟ್ರೋಲ್"));
			System.out.println(AutoFlipContent1);
			extent.extentLogger("", "AutoFlip content " + AutoFlipContent1);
			if (AutoFlipContent1.contentEquals("Kids Content and Parental Control")) {
				logger.info(
						"Subscription page - Autoflip Carousel Kids Content and Parental Control fails to translate for Telugu, Tamil and Bhojpuri display languages. ");
				extent.extentLoggerFail("",
						"Subscription page - Autoflip Carousel Kids Content and Parental Control fails to translate for Telugu, Tamil and Bhojpuri display languages.");
				// Back(1);
			} else {
				logger.info(
						" Subscription page - Autoflip Carousel title should be displayed as per the selected display language translations., expected behaviour");
				extent.extentLoggerPass("",
						" Subscription page - Autoflip Carousel title should be displayed as per the selected display language translations., expected behaviour");
			}

			verifyElementPresent(PWAHamburgerMenuPage.objAutoFlipcontent("ಎಜ್ಯುರಾ ಇ-ಲರ್ನಿಂಗೆ ಅವಕಾಶ"),
					"Eduauraa e-learning access");
			String AutoFlipContent2 = getText(PWAHamburgerMenuPage.objAutoFlipcontent("ಎಜ್ಯುರಾ ಇ-ಲರ್ನಿಂಗೆ ಅವಕಾಶ"));
			System.out.println(AutoFlipContent2);
			extent.extentLogger("", "AutoFlip content " + AutoFlipContent2);
			if (AutoFlipContent2.contentEquals("Eduauraa e-learning access")) {
				logger.info(
						"Subscription page - Autoflip Carousel Eduauraa e-learning access fails to translate for Telugu, Tamil and Bhojpuri display languages. ");
				extent.extentLoggerFail("",
						"Subscription page - Autoflip Carousel Eduauraa e-learning access fails to translate for Telugu, Tamil and Bhojpuri display languages.");
				// Back(1);
			} else {
				logger.info(
						" Subscription page - Autoflip Carousel title should be displayed as per the selected display language translations., expected behaviour");
				extent.extentLoggerPass("",
						" Subscription page - Autoflip Carousel title should be displayed as per the selected display language translations., expected behaviour");
			}
			verifyElementPresent(PWAHamburgerMenuPage.objAutoFlipcontent("ಸಮಯದ ಗಡಿ ಇಲ್ಲದ ಮಸ್ತ್ ಮನರಂಜನೆ"),
					"Anytime Big Entertainment");
			String AutoFlipContent3 = getText(PWAHamburgerMenuPage.objAutoFlipcontent("ಸಮಯದ ಗಡಿ ಇಲ್ಲದ ಮಸ್ತ್ ಮನರಂಜನೆ"));
			System.out.println(AutoFlipContent3);
			extent.extentLogger("", "AutoFlip content " + AutoFlipContent3);
			if (AutoFlipContent3.contentEquals("Anytime Big Entertainment")) {
				logger.info(
						"Subscription page - Autoflip Carousel Anytime Big Entertainment fails to translate for Tamil display languages. ");
				extent.extentLoggerFail("",
						"Subscription page - Autoflip Carousel Anytime Big Entertainment fails to translate for Tamil display languages.");
//							Back(1);
			} else {
				logger.info(
						" Subscription page - Autoflip Carousel title should be displayed as per the selected display language translations., expected behaviour");
				extent.extentLoggerPass("",
						" Subscription page - Autoflip Carousel title should be displayed as per the selected display language translations., expected behaviour");
			}
		}
		Back(1);
		EnglishLanguageselection();
	}

//		}		
//			public void zeeSearchForContentAndClickOnFirstResult(String contentName) throws Exception {
//				// handle mandatory pop up
//				String user = getParameterFromXML("userType");
//				mandatoryRegistrationPopUp(user);
//				verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
//				waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
//				type(PWASearchPage.objSearchEditBox, contentName + "\n", "Search bar");
//				waitTime(5000);
//				waitForElementDisplayed(PWASearchPage.objFirstSearchedAssetTitle, 20);
//				waitTime(5000);
//				String FirstSearchedAssetTitle = findElement(PWASearchPage.objFirstSearchedAssetTitle).getText();
//				click(PWASearchPage.objFirstSearchedAssetTitle, "First Searched Asset Title: " + FirstSearchedAssetTitle);
//			}
//			
	public void userShouldBeNavigatedBackToTheConsumptionPage(String usertyString) throws Exception {
		reloadHome();
		extent.HeaderChildNode(
				"User fails to navigate back to the consumption page when user login using INR499 Premium user during Guest checkout flow  (PWA2-7746) ");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHomePage.objTabName("Movies"), "Movies Tab");
		waitTime(30000);
		verifyElementPresent(PWAMoviesPage.objOneOfVideo, "One of Movie Trailer");

		click(PWAMoviesPage.objOneOfVideo, "One of Movie Trailer");
		waitForElementPresence(PWAComboOfferPage.objBuyPlanInPlayer, 180, "Rent Now CTA in-player");

		verifyElementPresent(PWAPlayerPage.objSubscribeNowLink, "In-Line Buy Plan Link on Player");
		click(PWAPlayerPage.objSubscribeNowLink, "In-Line Buy Plan Link on Player");
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
		PWAComboOfferLoginInSubscriptionFlow(userType, "499");
		waitTime(5000);

		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info(
					"User should be navigated back to the Consumption page with Already Zee5 Premium user Toast message indication , expected behaviour");
			extent.extentLoggerPass("",
					"User should be navigated back to the Consumption page with Already Zee5 Premium user Toast message indication , expected behaviour");
		} else {
			logger.info("User navigated to the Subscription page with Toast message and Explore Premium CTA.");
			extent.extentLoggerFail("",
					"User navigated to the Subscription page with Toast message and Explore Premium CTA.");
		}
		logout();
	}

	public void upgradeCTAAvailabilityOnTheHeaderMenu(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"\"Upgrade\" CTA fails to display for carousals and header menu for kannada RSVOD user (PWA2-7918)");

			if (!checkElementDisplayed(PWALoginPage.objLoginBtn, "Login Button")) {
				verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
			}
			waitTime(3000);
			click(PWALoginPage.objLoginBtn, "Login button");
			waitTime(3000);
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "sharankognoor@mailnesia.com", "Email Field");
			waitTime(3000);
			hideKeyboard();
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			waitTime(3000);
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			hideKeyboard();
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(20000);
			if (verifyElementPresent(PWAHomePage.objSubscribeBtnTopHeader, "upgrade Button in the Header")) {
				logger.info(" Upgrade CTA is displayed on header menu, expected behaviour");
				extent.extentLoggerPass("", "Upgrade CTA is displayed on header menu, expected behaviour");
			} else {
				logger.info("Upgrade CTA is not displayed on header menu");
				extent.extentLoggerFail("", "Upgrade CTA is not displayed on header menu");
			}
			if (verifyElementPresent(PWAHomePage.objUpgradeCTA, "Upgrade")) {
				logger.info(" Upgrade CTA is displayed on carousel, expected behaviour");
				extent.extentLoggerPass("", "Upgrade CTA is displayed on carousel , expected behaviour");
			} else {
				logger.info("Upgrade CTA is not displayed on carousel");
				extent.extentLoggerFail("", "Upgrade CTA is not displayed on carousel ");
			}
			logout();

		}
	}

	public void contentOrDisplayLanguageShouldChange(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode(
				"PWA2-7928 : Blank page is displayed, when user change the content language or display language on Zeeplex landing page ");
		waitTime(5000);
		navigateToAnyScreen("ZEEPLEX");

		Kannadalanguageselection();
		waitTime(3000);
		if (verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent, "Zee plex content")) {
			logger.info(
					"Content or display language should change & Zee plex available content should load , expected behaviour");
			extent.extentLoggerPass("",
					"Content or display language should change & Zee plex available content should load , expected behaviour");
		} else {
			logger.info(" Blank screen is displayed, /Error is displayed in the URL ");
			extent.extentLoggerFail("", " Blank screen is displayed, /Error is displayed in the URL ");
		}
		EnglishLanguageselection();
	}

	public void Tamillanguageselection() throws Exception {
		verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
		waitTime(4000);
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objTamilmWEB, "Tamil option");
		String a = getText(PWAHomePage.objTamilmWEB);
		extent.extentLogger("", "selected display language : " + a);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
		waitTime(3000);
	}

	public void Hindilanguageselection() throws Exception {
		verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
		waitTime(4000);
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objHindimWEB, " Hindi option");
		String a = getText(PWAHomePage.objHindimWEB);
		extent.extentLogger("", "selected display language : " + a);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
	}

	public void Kannadalanguageselection() throws Exception {
		verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
		waitTime(4000);
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objKannadaWEB, "Kannada option");
		String a = getText(PWAHomePage.objKannadaWEB);
		extent.extentLogger("", "selected display language : " + a);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
		waitTime(3000);
	}

	public void EnglishLanguageselection() throws Exception

	{
		verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");

		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);

		verifyElementPresentAndClick(PWAHomePage.objEnglishWEB, "English option");

		String b = getText(PWAHomePage.objEnglishWEB);
		extent.extentLogger("", "selected display language : " + b);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
	}

	public void carouselBannerShouldLoadAndThumbnailShouldBeDisplayed(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {

			extent.HeaderChildNode(
					"Blank carousel is displaying by changing the display/content language and applying. (PWA2-8044) ");
			navigateToAnyScreen("Movies");
			if (verifyElementPresent(PWAHomePage.objWEBCarouselTitle, "Carouserl title")) {
				logger.info(
						" Carousel banner should load and thumbnail should be displayed to the user. ,expected behaviour");
				extent.extentLoggerPass("",
						" Carousel banner should load and thumbnail should be displayed to the user. ,expected behaviour");
				// Back(1);
			} else {
				logger.info("Blank carousel is displaying by changing the display/content language and applying.");
				extent.extentLoggerFail("",
						"Blank carousel is displaying by changing the display/content language and applying.");
			}

		}

	}

	public void textSlidersOnTopOfTheScreen(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode(
				"\"Download and watch offline \"text slider is displayed on subscription page. (PWA2-7947)");
		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objAutoFlipcontent("Download and Watch Offline"),
				"Download and Watch Offline")) {
			logger.info("\"Download and watch offline \"text slider is displayed.");
			extent.extentLoggerFail("", "\"Download and watch offline \"text slider is displayed.");
		} else {
			logger.info(
					"\"Download and watch offline \"text slider should not display on the subscription page., expected behaviour");
			extent.extentLoggerPass("",
					"\"Download and watch offline \"text slider should not display on the subscription page., expected behaviour");

		}

	}

	public void subscriptionWidgetBelowThePlayerShouldBeDisplayedForBeforeTvContent(String userType) throws Exception {
		reloadHome();
		if (userType.equals("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Subscription widget below the player validation (PWA2-7969)");
			navigateToAnyScreen("TV Shows");
//				ScrollToTheElement(PWAHomePage.objFirstContentCardOfTray("Before"));
			Swipe_till_Text("Before");
			if (checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"),
					"First Content Card Of Before TV Tray")) {
				click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");
				waitTime(5000);
				if (verifyElementPresent(PWAHamburgerMenuPage.objSubscribebtn, "subscribe button below player")) {
					logger.info(
							"Subscription widget below the player should be displayed for Before Tv content, expected behaviour");
					extent.extentLoggerPass("",
							"Subscription widget below the player should be displayed for Before Tv content, expected behaviour");
				} else {
					logger.info(" Subscription widget below the player is not displayed for Before Tv content");
					extent.extentLoggerFail("",
							" Subscription widget below the player is not displayed for Before Tv content");
				}
			}
		}
	}

	public void mpwa28154(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode("Remove browser support browser implementation from consumption pages (PWA2-8154)");
//				checkElementDisplayed(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
//				click(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
		navigateToAnyScreen("Movies");
		waitTime(30000);
		verifyElementPresent(PWAMoviesPage.objOneOfVideo, "One of Movie Trailer");

		click(PWAMoviesPage.objOneOfVideo, "One of Movie Trailer");
		waitTime(5000);
		if (verifyElementPresent(PWAHamburgerMenuPage.objChromeCast, "Chrome cast")) {
			logger.info("Chromecast Icon is display ");
			extent.extentLoggerFail("", "Chromecast Icon is display ");
		} else {
			logger.info("Chromecast Icon should not  display , extected behaviour ");
			extent.extentLoggerPass(" ", "Chromecast Icon should not  display , expected behaviour");
		}

	}

	public void changeOfHeaderForAllBreakpoints(String userType) throws Exception {
		reloadHome();
		if (userType.contains("Guest") || userType.contentEquals("NonSubscribedUser")) {
			extent.HeaderChildNode("change of header Subscription button to Buy Plan (PWA2-7959) ");
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText);
			extent.extentLogger("", "Buy Now Header text : " + SubscriptionText);
			if (SubscriptionText.equalsIgnoreCase("Buy Plan")) {
				logger.info("Buy Plan text should display , expected behaviour");
				extent.extentLoggerPass("", "Buy Plan text should display , expected behaviour");
			} else {
				logger.info("Subscribe text is not changed Buy Plan ");
				extent.extentLoggerFail("", "Subscribe text is not changed Buy Plan ");
			}
			Kannadalanguageselection();
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText1 = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText1);
			extent.extentLogger("", "Buy Now Header text : " + SubscriptionText1);
			if (SubscriptionText1.equalsIgnoreCase("ಪ್ಲಾನ್ ಖರೀದಿಸಿ")) {
				logger.info("Buy Plan text should display , expected behaviour");
				extent.extentLoggerPass("", "Buy Plan text should display , expected behaviour");
			} else {
				logger.info("Subscribe text is not changed Buy Plan ");
				extent.extentLoggerFail("", "Subscribe text is not changed Buy Plan ");
			}
			Tamillanguageselection();
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText2 = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText2);
			extent.extentLogger("", "Buy Now Header text : " + SubscriptionText2);
			if (SubscriptionText2.equalsIgnoreCase("பிளான் வாங்க")) {
				logger.info("Buy Plan text should display , expected behaviour");
				extent.extentLoggerPass("", "Buy Plan text should display , expected behaviour");
			} else {
				logger.info("Subscribe text is not changed Buy Plan ");
				extent.extentLoggerFail("", "Subscribe text is not changed Buy Plan ");
			}
			Hindilanguageselection();
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText3 = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText3);
			extent.extentLogger("", "Buy Now Header text : " + SubscriptionText3);
			if (SubscriptionText3.equalsIgnoreCase("प्लान खरीदें")) {
				logger.info("Buy Plan text should display , expected behaviour");
				extent.extentLoggerPass("", "Buy Plan text should display , expected behaviour");
			} else {
				logger.info("Subscribe text is not changed Buy Plan ");
				extent.extentLoggerFail("", "Subscribe text is not changed Buy Plan ");
			}
			EnglishLanguageselection();
		}
		if (userType.contains("Guest")) {
			extent.HeaderChildNode("Upgrade CTA button validation based on display Language");
			if (!checkElementDisplayed(PWALoginPage.objLoginBtn, "Login Button")) {
				verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
			}
			waitTime(3000);
			click(PWALoginPage.objLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "sharankognoor@mailnesia.com", "Email Field");
			hideKeyboard();
			waitTime(3000);

			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			waitTime(5000);
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			hideKeyboard();
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText);
			extent.extentLogger("", "Upgrade Header text : " + SubscriptionText);
			if (SubscriptionText.equalsIgnoreCase("Upgrade")) {
				logger.info("Upgrade text should display , expected behaviour");
				extent.extentLoggerPass("", "Upgrade text should display , expected behaviour");
			} else {
				logger.info("Upgrade text is not displayed ");
				extent.extentLoggerFail("", "Upgrade text is not upgrade");
			}
			Kannadalanguageselection();
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText1 = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText1);
			extent.extentLogger("", "Upgrade Header text : " + SubscriptionText1);
			if (SubscriptionText1.equalsIgnoreCase("ಬಡ್ತಿ")) {
				logger.info("Upgrade text should display based on display Language, expected behaviour");
				extent.extentLoggerPass("",
						"Upgrade text should display based on display Language , expected behaviour");
			} else {
				logger.info("Upgrade text is not displayed based on display language");
				extent.extentLoggerFail("", "Upgrade text is not upgrade based on display language");
			}
			Tamillanguageselection();
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText2 = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText2);
			extent.extentLogger("", "Upgrade Header text : " + SubscriptionText2);
			if (SubscriptionText2.equalsIgnoreCase("அப்கிரேட்")) {
				logger.info("Upgrade text should display based on display Language, expected behaviour");
				extent.extentLoggerPass("",
						"Upgrade text should display based on display Language , expected behaviour");
			} else {
				logger.info("Upgrade text is not displayed based on display language");
				extent.extentLoggerFail("", "Upgrade text is not upgrade based on display language");
			}
			Hindilanguageselection();
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText3 = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText3);
			extent.extentLogger("", "Upgrade Header text : " + SubscriptionText3);
			if (SubscriptionText3.equalsIgnoreCase("अपग्रेड")) {
				logger.info("Upgrade text should display based on display Language, expected behaviour");
				extent.extentLoggerPass("",
						"Upgrade text should display based on display Language , expected behaviour");
			} else {
				logger.info("Upgrade text is not displayed based on display language");
				extent.extentLoggerFail("", "Upgrade text is not upgrade based on display language");
			}
			EnglishLanguageselection();
			logout();
		}
	}

	public void accountinfopage() throws Exception {
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Section");
		waitTime(3000);
		waitTime(3000);
		waitTime(3000);
		click(PWASubscriptionPages.objEmailIDTextField, "igszee5testing@gmail.com");
		type(PWASubscriptionPages.objEmailIDTextField, "igszee5testing@gmail.com", "Email Id");

		hideKeyboard();
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted,
				"Proceed Button in Account Info Page Highlighted");
		waitTime(3000);
		// Password Popup
		verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objProceedBtnDisabled, "Disabled Proceed Button");
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
		waitTime(3000);
		type(PWASubscriptionPages.objPasswordFieldHidden, "igs@12345", "Password Field");

		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnEnabled, "Enabled Proceed Button");
		waitTime(3000);

	}

	public void accountinfopageKannadaLanguage() throws Exception {
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlightedKannadaLang, "Account Info Section");
		waitTime(3000);
		waitTime(3000);
		waitTime(3000);
		click(PWASubscriptionPages.objEmailIDTextField, "igszee5testing@gmail.com");
		type(PWASubscriptionPages.objEmailIDTextField, "igszee5testing@gmail.com", "Email Id");

		hideKeyboard();
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlightedKannadaLang,
				"Proceed Button in Account Info Page Highlighted");
		waitTime(3000);
		// Password Popup
		verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
		waitTime(3000);
//				verifyElementPresent(PWASubscriptionPages.objProceedBtnDisabled, "Disabled Proceed Button");
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
		waitTime(3000);
		type(PWASubscriptionPages.objPasswordFieldHidden, "igs@12345", "Password Field");

		waitTime(3000);
		hideKeyboard();
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnEnabledKannadaLang, "Enabled Proceed Button");
		waitTime(3000);

	}

	public void paymentOptionsShouldBeTranslatedBasedOnTheDisplayLanguage(String userType) throws Exception {
		reloadHome();
		if (userType.equals("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {

			extent.HeaderChildNode(
					"\"Loading payment options..\" text validation based on display Language(PWA2-8080) ");
			Kannadalanguageselection();
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueButtonKannadaLang, "Continue button");
			if (userType.equals("Guest")) {
//						accountinfopage();
				verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlightedKannadaLang, "Account Info Section");
				waitTime(3000);
				waitTime(3000);
				waitTime(3000);
				click(PWASubscriptionPages.objEmailIDTextField, "igszee5testing@gmail.com");
				type(PWASubscriptionPages.objEmailIDTextField, "igszee5testing@gmail.com", "Email Id");

				hideKeyboard();
				waitTime(3000);
				verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlightedKannadaLang,
						"Proceed Button in Account Info Page Highlighted");
				waitTime(3000);
				// Password Popup
				verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
				waitTime(3000);
//						verifyElementPresent(PWASubscriptionPages.objProceedBtnDisabled, "Disabled Proceed Button");
				waitTime(3000);
				verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
				waitTime(3000);
				type(PWASubscriptionPages.objPasswordFieldHidden, "igs@12345", "Password Field");

				waitTime(3000);
				hideKeyboard();
				verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnEnabledKannadaLang,
						"Enabled Proceed Button");
				waitTime(3000);
			}
			WebElement iframeElement = null;
			if (getPlatform().equalsIgnoreCase("Android")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			} else if (getPlatform().equalsIgnoreCase("Web")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			}
			verifyElementPresent(PWAHamburgerMenuPage.objLoadingPaymentOption, "Loading Payment option");
			String Loading = getText(PWAHamburgerMenuPage.objLoadingPaymentOption);
			System.out.println(Loading);
			extent.extentLogger("", "Loading text: " + Loading);
			if (Loading.contains("Loading Payment Options...")) {
				logger.info(
						"\"Loading payment options..\" fails to translate on the selected display language otherthan English.");
				extent.extentLoggerFail(" ",
						"\"Loading payment options..\" fails to translate on the selected display language otherthan English.");
			} else {
				logger.info(
						"\"Loading payment options..\" should be translated based on the display language, expected behaviour");
				extent.extentLoggerPass(" ",
						"\"Loading payment options..\" should be translated based on the display language, expected behaviour");

			}

			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee5 Logo");

			EnglishLanguageselection();
			if (userType.equals("Guest")) {
				logout();
			}

		}
	}

	public void newSVODContentShouldBePlayedProperly(String userType) throws Exception {

		reloadHome();
		extent.HeaderChildNode(
				"Blank screen is displayed in the player When user play any News VOD Contents on pwauat.zee5.com (PWA2-8066)");
//					getWebDriver().get("pwauat.zee5.com");
//					navigateToAnyScreenOnWeb("News");
		getDriver().get(
				"https://newpwa.zee5.com/news/details/art-to-motivate-people-for-covid-19-vaccination/0-0-newsauto_3s5vcbp0bhfg");
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("News VOD Content should be played properly.");
			extent.extentLoggerPass("Consumption Page", "News VOD Content should be played properly.");
		} else {
			logger.info(
					"Blank player screen displayed and content fails to start the playback when user play any News VOD Contents on newpwa.zee5.com");
			extent.extentLoggerFail("Consumption Page",
					"Blank player screen displayed and content fails to start the playback when user play any News VOD Contents on newpwa.zee5.com");
		}

	}

	public void paymentPageShouldBeDisplayAfterApplyingPromoCode(String userType) throws Exception {

		reloadHome();
		extent.HeaderChildNode(
				"Payment page validation when user apply the \"TESTZ40\" promocode in a subscription page (PWA2-8030)");
		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
		verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "'Have A Code?' field");
		waitTime(3000);
//					if (platform.equalsIgnoreCase("Android")) {
//						click(PWASubscriptionPages.objHaveACodetoenter,"'Have A Code?' field");
//						type(PWASubscriptionPages.objHaveACodetoenter, "TESTZ40" + "\n", "'Have A Code?' field");
//					} else if (platform.equalsIgnoreCase("Web")) {
//						type(PWASubscriptionPages.objHaveACode, "TESTZ40", "'Have A Code?' field");
//					}
		waitTime(5000);
		verifyElementPresentAndClick(PWASubscriptionPages.objTextForHaveACode, "Enter code text field");
		waitTime(3000);
		type(PWASubscriptionPages.objTextForHaveACode, "TESTZ40", "Enter code text field");
		waitTime(4000);
		waitTime(5000);
		click(PWASubscriptionPages.objApplyBtn, "Apply Button");
		waitTime(5000);
		boolean a = checkElementDisplayed(PWAHamburgerMenuPage.objFailureMessage, "Failure Message");
		boolean b = checkElementDisplayed(PWASubscriptionPages.objAppliedSuccessfullyMessage,
				"Applied Successfully Message");
		if (a || b) {
			logger.info("Payment page should be display after applying promo code, expected behaviour");
			extent.extentLoggerPass("", "Payment page should be display after applying promo code, expected behaviour");
		} else {
			logger.info(
					" “Something went Wrong” page is displayed when user apply the \"TESTZ40\" promocode in a subscription page");
			extent.extentLoggerFail("",
					" “Something went Wrong” page is displayed when user apply the \"TESTZ40\" promocode in a subscription page");
		}
	}

	public void haveACodeShouldBeAutoPopulate(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode("\"Have a Code?\" fails to auto populate with Error Validation"
				+ " message after access the invalid Promo/Prepaid Code deeplinking URL (PWA2-7846)");
		getDriver().get("https://newpwa.zee5.com/myaccount/subscription?code=Z5SJ1Y4of5VxAg&autoapply=true");
		if (verifyElementPresentAndClick(PWASubscriptionPages.objremovebtn, "remove Button")) {
			logger.info(
					" \"Have a Code?\" should be auto populate and show the invalid error message to the user., expected behaviour");
			extent.extentLoggerPass("",
					" \"Have a Code?\" should be auto populate and show the invalid error message to the user., expected behaviour");
		} else {
			logger.info(
					"\"Have a Code?\" fails to auto populate with Error Validation message after access the invalid Promo/Prepaid Code Deeplink URL ");
			extent.extentLoggerFail("",
					"\"Have a Code?\" fails to auto populate with Error Validation message after access the invalid Promo/Prepaid Code Deeplink URL ");
		}

	}

	public void verifyplanpriceinsubscriptionpage(String userType) throws Exception {
		reloadHome();
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			Kannadalanguageselection();

			extent.HeaderChildNode(
					"\"{{plan_price}}\" text is displayed instead of the pack price validation (PWA2-7693)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue Button");
			waitTime(5000);
			String planprice = getText(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage);
			System.out.println(planprice);
			extent.extentLogger("", "selected plan price  : " + planprice);
			if (planprice.contains("1") || planprice.contains("2") || planprice.contains("3") || planprice.contains("4")
					|| planprice.contains("5") || planprice.contains("6") || planprice.contains("7")
					|| planprice.contains("8") || planprice.contains("9") || planprice.contains("10")) {
				logger.info(" Pack price should be displayed instead of \"plan_price\", expected behaviour");
				extent.extentLoggerPass("",
						"Pack price should be displayed instead of \"plan_price\" , expected behaviour");
			} else {
				logger.info("\"plan_price\" text is displayed instead of the pack price");
				extent.extentLoggerFail(" ", "\"plan_price\" text is displayed instead of the pack price");
			}
			Back(1);
			EnglishLanguageselection();
		}
	}

	public void verifyshowscontentinbeforetv(String userType) throws Exception {
		reloadHome();
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode("Header Text are not displayed as per the VD validation (PWA2-7789)");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Blockbuster Movies"), "Before TV");
			waitTime(3000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objmoviecontentinsubscriptionpage, "movie content")) {
				logger.info("TV shows Contents should be listed on the Before TV Benefits drawer, expected behaviour");
				extent.extentLoggerPass("",
						"TV shows Contents should be listed on the Before TV Benefits drawer, expected behaviour");
			} else {
				logger.info("Movie contents listed on the Subscription page Before TV Benefits Drawer.");
				extent.extentLoggerFail(" ",
						"Movie contents listed on the Subscription page Before TV Benefits Drawer.");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");

	}

	public void haveACodeCTATextShouldBeDisplayedForThEExpiredUsers(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Discount Calculted price on the payment gateway validation (PWA2-7692)");
			if (!checkElementDisplayed(PWALoginPage.objLoginBtn, "Login Button")) {
				verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
			}
			waitTime(3000);
			click(PWALoginPage.objLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "sharankognoor@gmail.com", "Email Field");
			waitTime(3000);
			hideKeyboard();
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			waitTime(4000);
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			waitTime(5000);
			hideKeyboard();
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
			waitTime(5000);
			click(PWAHamburgerMenuPage.objDownArrow("My Account"), "Expander button");
//					verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
//					JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			JSClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			waitTime(3000);
			checkElementDisplayed(PWASubscriptionPages.objBuyPlanCTAMySubscription, "Buy Plan CTA My Subscription");
			waitTime(5000);
			click(PWASubscriptionPages.objBuyPlanCTAMySubscription, "Buy Plan CTA My Subscription");
			waitTime(4000);
			// verifyElementPresent(PWASubscriptionPages.objContinueBtn, "Continue button");
			String text = getText(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage);
			System.out.println(text);
			extent.extentLogger("", " continue text : " + text);
			if (text.contentEquals("Continue with ₹499")) {
				logger.info(
						"\"Continue with INR499 per year\", or \"Continue with INR99 Per month\" CTA should be displayed for Expired user, expected behaviour");
				extent.extentLoggerPass(" ",
						"\"Continue with INR499 per year\", or \"Continue with INR99 Per month\" CTA should be displayed for Expired user, expected behaviour");
			} else {
				logger.info(
						"\"Upgrade to Annual/Monthly Plan\" CTA displayed on the Subscription page for Expired users.");
				extent.extentLoggerFail(" ",
						"\"Upgrade to Annual/Monthly Plan\" CTA displayed on the Subscription page for Expired users.");
			}

			if (verifyElementPresent(PWASubscriptionPages.objHaveACode, "'Have A Code?' field")) {
				logger.info("\"Have a Code?\" CTA text should be displayed for the Expired users, expected behaviour");
				extent.extentLoggerPass(" ",
						"\"Have a Code?\" CTA text should be displayed for the Expired users, expected behaviour");
			} else {
				logger.info("\"Have a Code?\" CTA text fails to displayed for the Expired users.");
				extent.extentLoggerFail(" ", "\"Have a Code?\" CTA text fails to displayed for the Expired users.");
			}
		}
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee5 Logo");
		waitTime(4000);
		if (userType.equals("Guest")) {
			logout();
		}
	}

	public void EpsiodeAndSeasonValidationInConsumptionPage(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode(
				"PWA2-8103 : Episode or season numbers (E 129) on the TV show/Zee5 Originals episode consumption page validation");
		// zeeSearchForContentAndClickOnFirstResult("Sherlyn's Plan to Steal the
		// Phone");
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		type(PWASearchPage.objSearchEditBox, "Sherlyn's Plan to Steal the Phone" + "\n", "Search bar");
		waitTime(5000);
		click(PWASearchPage.objFirstContentCardNameAfterSearch(1), "Searched content");
		waitTime(4000);
		verifyElementPresent(PWAHamburgerMenuPage.objEpisodeNumber1, "Episode Number");

		verifyElementPresent(PWAHamburgerMenuPage.objEpisodeNumberInconsumptionPage, "Episode Number");
		String EpisodeNumber = getText(PWAHamburgerMenuPage.objEpisodeNumberInconsumptionPage);
		System.out.println(EpisodeNumber);
		extent.extentLogger("", "Episode Number: " + EpisodeNumber);
		if (EpisodeNumber.contains(" ")) {
			logger.info(
					"Blank Space is observed between the Episode or season numbers (E 129) on the TV show/Zee5 Originals show episode consumption page.");
			extent.extentLoggerPass("",
					"Blank Space is observed between the Episode or season numbers (E 129) on the TV show/Zee5 Originals show episode consumption page.");
			// Back(1);
		} else {
			logger.info("Blank space should not be observed on the Episode number, expected behaviour");
			extent.extentLoggerFail("", "Blank space should not be observed on the Episode number, expected behaviour");
		}
	}

	public void pageShouldNavigateToPlanListingPageWithoutShowingAnyError(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode(
				"PWA2-8075 : [Subscription] [Mweb] \"Something went wrong. Please Retry the payment\" error message is displaying for a second on top of iframe when clicked on back button from payment method page. [Refer video]");
		loginWithUserEmail("impact0314@gmail.com", "igs123");
		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
		waitTime(5000);
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
		waitTime(5000);
		checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
		// ScrollToTheElementWEB(PWASubscriptionPages.objPaymentHighlighted);
		waitTime(5000);
		WebElement iframeElement = null;
		if (getPlatform().equalsIgnoreCase("Android")) {
			iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
			Thread.sleep(15000);
			getWebDriver().switchTo().frame(iframeElement);
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
//						scrollUp();
//						scrollUp();
//						scrollUp();
			Thread.sleep(15000);
			getWebDriver().switchTo().frame(iframeElement);
		}
		Back(1);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objsomethingmess, "Something went wrong message ")) {
			logger.info("\"Something went Wrong. Please Retry the Payment\" message is display");
			extent.extentLoggerFail(" ", "\"Something went Wrong. Please Retry the Payment\" message is display");
		} else {
			logger.info(
					"Page should navigate to Plan listing page without showing any error message from payment mode page., expected behaviour");
			extent.extentLoggerPass(" ",
					"Page should navigate to Plan listing page without showing any error message from payment mode page., expected behaviour");

		}
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee5 Logo");
		waitTime(4000);
		if (userType.equals("Guest")) {
			logout();
		}
	}

	public void seasonAndEpisodeNumberMetadata(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode(
				" PWA2-8042 : Zee5Originals shows - Season Number and Episode Number metadata validation ");
		// zeeSearchForContentAndClickOnFirstResult("Waqt Ne Kiya Kya Haseen Sitam Tum
		// Rahe Na Tum, Hum Rahe Na Hum");

		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		type(PWASearchPage.objSearchEditBox, "Waqt Ne Kiya Kya Haseen Sitam Tum Rahe Na Tum, Hum Rahe Na Hum" + "\n",
				"Search bar");
		waitTime(5000);
		click(PWASearchPage.objFirstContentCardNameAfterSearch(1), "Searched content");
		verifyElementPresent(PWAHamburgerMenuPage.objEpisodeNumber1, "Episode Number");
		String EpisodeNumber1 = getText(PWAHamburgerMenuPage.objEpisodeNumber1);
		System.out.println(EpisodeNumber1);
		extent.extentLogger("", "EpisodeNumber : " + EpisodeNumber1);
		verifyElementPresent(PWAHamburgerMenuPage.objSeasonNumber, "Episode Number");
		String SeasonNumber = getText(PWAHamburgerMenuPage.objSeasonNumber);
		System.out.println(SeasonNumber);
		extent.extentLogger("", "Season Number: " + SeasonNumber);
		String EpisodeAndSeasonNumber = EpisodeNumber1 + SeasonNumber;
		System.err.println(EpisodeAndSeasonNumber);
		if (EpisodeAndSeasonNumber.contains("E 1S 2")) {
			logger.info("S2 E 2 displayed on the consumption page, expected behaviour");
			extent.extentLoggerPass("", "S2 E 2 displayed on the consumption page, expected behaviour");
		} else {
			logger.info("Episode # | Season # displayed on the consumption page.");
			extent.extentLoggerFail("", "Episode # | Season # displayed on the consumption page.");
		}

	}

	public void FooterSectionValidationBasedOnContentLanguage(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode("Footer menu contents displayed based on the content language selection.(PWA2-8079)");
//						navigateToAnyScreen("Home");
		// selectLanguages();
		scrollToBottomOfPage();
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer section");
		waitTime(1500);
		String Footer = getText(PWAHamburgerMenuPage.objfooter);
		System.out.println(Footer);
		extent.extentLogger("", "Footer Section Text:" + Footer);

		Tamillanguageselection();

		waitTime(30000);
		scrollToBottomOfPage();
		waitTime(5000);
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer section");

		String Footer1 = getText(PWAHamburgerMenuPage.objfooter);
		System.out.println(Footer1);
		extent.extentLogger("", "Footer Section Text:" + Footer1);
		if (Footer.equals(Footer1)) {
			logger.info(
					"Footer menu Contents should be displayed irrespective of the Content languages, expected behaviour");
			extent.extentLoggerPass("",
					"Footer menu Contents should be displayed irrespective of the Content languages, expected behaviour");
		} else {
			logger.info("Footer menu contents displayed based on the content language selection.");
			extent.extentLoggerFail("", "Footer menu contents displayed based on the content language selection.");

		}
		waitTime(2000);

		waitTime(2000);

		verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
		waitTime(4000);
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objPageHighlightedanyLanguage("கன்னடம்"), "Kannada option");
		String a = getText(PWAHomePage.objPageHighlightedanyLanguage("கன்னடம்"));
		extent.extentLogger("", "selected display language : " + a);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
		waitTime(3000);
		waitTime(30000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer section");

		String Footer2 = getText(PWAHamburgerMenuPage.objfooter);
		System.out.println(Footer2);

		extent.extentLogger("", "Footer Section Text:" + Footer2);
		if (Footer.equals(Footer2)) {
			logger.info(
					"Footer menu Contents should be displayed irrespective of the Content languages, expected behaviour");
			extent.extentLoggerPass("",
					"Footer menu Contents should be displayed irrespective of the Content languages, expected behaviour");
		} else {
			logger.info("Footer menu contents displayed based on the content language selection.");
			extent.extentLoggerFail("", "Footer menu contents displayed based on the content language selection.");

		}
		waitTime(2000);

		verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
		waitTime(4000);
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objPageHighlightedanyLanguage("ತೆಲುಗು"), "Telugu option");
		String b = getText(PWAHomePage.objPageHighlightedanyLanguage("ತೆಲುಗು"));
		extent.extentLogger("", "selected display language : " + b);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
		waitTime(3000);
		waitTime(30000);

		scrollToBottomOfPage();
		waitTime(5000);
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer section");

		String Footer3 = getText(PWAHamburgerMenuPage.objfooter);
		System.out.println(Footer3);

		extent.extentLogger("", "Footer Section Text:" + Footer3);
		if (Footer.equals(Footer3)) {
			logger.info(
					"Footer menu Contents should be displayed irrespective of the Content languages, expected behaviour");
			extent.extentLoggerPass("",
					"Footer menu Contents should be displayed irrespective of the Content languages, expected behaviour");

		} else {
			logger.info("Footer menu contents displayed based on the content language selection.");
			extent.extentLoggerFail("", "Footer menu contents displayed based on the content language selection.");
		}
		verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
		waitTime(4000);
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objPageHighlightedanyLanguage("ఇంగ్లీష్"), "English option");
		String c = getText(PWAHomePage.objPageHighlightedanyLanguage("ఇంగ్లీష్"));
		extent.extentLogger("", "selected display language : " + c);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
		waitTime(3000);
//						waitTime(30000);
	}

	public void passwordResetLinkSentToYourEmailIDToastMessageShouldBeDisplayed(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode(
				"PWA2-7802 : [Subscription_Revamp] \"Notification has been sent to queue\" toast message is displayed instead of \"Password reset link sent to your Email ID\"");
		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
		waitTime(5000);
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
		waitTime(5000);

		click(PWASubscriptionPages.objEmailIDTextField, "Email Id");
		type(PWASubscriptionPages.objEmailIDTextField, "igszee5testing@gmail.com", "Email Id");

		hideKeyboard();
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted,
				"Proceed Button in Account Info Page Highlighted");

		waitTime(5000);
		hideKeyboard();
		verifyElementPresentAndClick(PWASubscriptionPages.objForgotPasswordLink, "Forgot Password Link");
		verifyElementPresent(PWASubscriptionPages.objSentToYourEmailIDTtoastMessage, "Toast Message");

	}

	// ========================Veena Sprint 58========================
	public void Sprint58(String userType) throws Exception {
		// PWA2-7916
		PWAVerifyDisplayLanguageInPlayerSkip(userType);//
		// PWA2-7925
		PWAVerifyGetPremiumCTADisplayedForSubscribedUserWithParentalPin(userType);//
		// PWA2-7725
		PWAVerifyToastMessageDisplayedInsteadOfInlineErrorMessageOnAccountInfoPage(userType);//
		// PWA2-8039
		PWAVerifyTranslateSelectedDisplayLanguage(userType);//
		// PWA2-8041
		PWAVerifyTranslateChannelInfoScreenSelectedDisplayLanguage(userType);//
		// PWA-8031
		PWAVerifyH1TagsOriginalsandShows(userType);//
		// PWA-8040
		PWAVerifyMetadataCategory(userType);//
		// PWA-7759
		PWAVerifyToastMessageOnNetworkInterruption(userType);//
		// PWA2-7950
		PWAVerifyToastmessageforPurchaseUpgrade(userType);//
		// PWA-7492
		PWAVerifySEOChannelsPage(userType);//
		// PWA2-8157
		PWAVerifySEOH1H2Tags(userType);//
		// PWA2-8155
		PWAVerifyH1H2TagsOriginalsandShows(userType);//
		// PWA2-8104
		PWAVerifySEOMetadata(userType);//
		// PWA2-7764
		PWAVerifyCountryCodeDropdown(userType);//
		// PWA2-8081
		PWAVerifyOTPMobileno(userType);//
		// PWA2-7767
		// PWAVerifyEmailOrMobile(userType);
		// PWA2-8024
		PWAVerifyChangeOfGetPremiumToBuyPlan(userType);
//					//PWA2-7318
		PWAVerifyHTagsAndSubTextforShowsAndOriginals(userType, "KumKum Bhagya", ""); //
	}

	public void PWAVerifyChangeOfGetPremiumToBuyPlan(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-8024 : Change of Get Premium to Buy Plan on web ");
		logger.info("PWA2-8024 : Change of Get Premium to Buy Plan on web ");

		waitTime(10000);
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		waitTime(3000);
		// buy plan Left corner
		if (verifyElementDisplayed(PWAHomePage.objSubscribeBtn)) {
			String CTA = getText(PWAHomePage.objSubscribeBtn);
			if (CTA.contains("Buy Plan")) {
				logger.info("Buy plan CTA in top left corner is displayed");
				extent.extentLoggerPass(" ", "Buy plan CTA in top left corner is displayed");
			} else {
				logger.error("Buy plan CTA in top left corner is not displayed");
				extent.extentLoggerFail(" ", "Buy plan CTA in top left corner is not displayed");
			}
		}
		// Buy plan carousel
		if (verifyElementDisplayed(PWAHomePage.objGetPremiumWeb)) {
			String CTA = getText(PWAHomePage.objGetPremiumWeb);
			if (CTA.contains("Buy Plan")) {
				logger.info("Buy plan CTA on carousel banner is displayed");
				extent.extentLoggerPass(" ", "Buy plan CTA on carousel banner is displayed");
			} else {
				logger.error("Buy plan CTA on carousel banner is not displayed");
				extent.extentLoggerFail(" ", "Buy plan CTA on carousel banner is not displayed");
			}
		}

		// Buy plan Hamburger
		if (userType.equals("Guest")) {
			click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objBuySubscriptionOption)) {
				String CTA = getText(PWAHamburgerMenuPage.objBuySubscriptionOption);
				if (CTA.contains("Buy Plan")) {
					logger.info("Buy plan CTA in Hamburger menu is displayed");
					extent.extentLoggerPass(" ", "Buy plan CTA in Hamburger menu is displayed");
				} else {
					logger.error("Buy plan CTA in Hamburger menu is not displayed");
					extent.extentLoggerFail(" ", "Buy plan CTA in Hamburger menu is not displayed");
				}
				click(PWAHamburgerMenuPage.objCloseHamburger, "Close hamburger");
			}
		}

		// Hamburger
		if (userType.equals("NonSubscribedUser")) {
			click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			click(PWAHamburgerMenuPage.objMyAccount, "My Account");
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objMySubscription)) {
				click(PWAHamburgerMenuPage.objMySubscription, "MySubscriptionOption");
				String CTA = getText(PWASubscriptionPages.objBuyPlanMySubscription);
				if (CTA.contains("Buy Plan")) {
					logger.info("Buy plan CTA in My Subscription screen is displayed");
					extent.extentLoggerPass(" ", "Buy plan CTA in My Subscription screen is displayed");
				} else {
					logger.error("Buy plan CTA in My Subscription screen is not displayed");
					extent.extentLoggerFail(" ", "Buy plan CTA in My Subscription screen is not displayed");
				}
			}
			click(PWAHamburgerMenuPage.objMyProfile, "My Profile");
		}
	}

	public void PWAVerifyEmailOrMobile(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-7767 :[Subscription_Revamp][MPWA] \"Email Id or mobile number \"place holder is selected  and user is unable to paste the input in \"Email Id or mobile number \"field on account info page.");
			logger.info(
					"PWA2-7767 :[Subscription_Revamp][MPWA] \\\"Email Id or mobile number \\\"place holder is selected  and user is unable to paste the input in \\\"Email Id or mobile number \\\"field on account info page.");
			reloadHome();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objBuySubscriptionOption, "Buy plan");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
			waitTime(10000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			hideKeyboard();
			waitTime(10000);
			getDriver().findElement(By.xpath("//input[@id='textField']")).sendKeys("9611972466");
			waitTime(3000);
			String value = getAttributValue("value", PWALoginPage.objEmailField);
			if (value.contains("9611972466")) {
				extent.extentLoggerPass("",
						"user is unable to paste the input in \\\"Email Id or mobile number \\\"field");
			}
		}
	}

	public void PWAVerifyOTPMobileno(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-8081 : [Subscription_revamp] \"An verification OTP (One Time Password) has been sent to the mobile number\" text fails to displayed on the Forgot password journey OTP verification popup for Mobile Number user.[refer screenshot] ");
			logger.info(
					"PWA2-8081 : [Subscription_revamp] \"An verification OTP (One Time Password) has been sent to the mobile number\\\" text fails to displayed on the Forgot password journey OTP verification popup for Mobile Number user.[refer screenshot] ");

			navigateToHome();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objBuySubscriptionOption, "Buy plan");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
			waitTime(10000);
			click(PWALoginPage.objEmailField, "Email field");
			waitTime(10000);
			type(PWALoginPage.objEmailField, "9611972466", "Phone no Field");
			hideKeyboard();
			click(PWALoginPage.objContinueBtn, "Continue button");

			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEnterPassword, "Enter password");
			verifyElementPresent(PWALoginPage.objPasswordField, "password field");
			verifyElementPresentAndClick(PWALoginPage.objForgotPasswordLinkTxt, "Forgot password link");
			verifyElementPresent(PWALoginPage.objEnterPassword, "Enter password pop up");
			waitTime(10000);
			JSClick(PWALoginPage.objCreateNewPasswordField, "New password pop up");
			type(PWALoginPage.objCreateNewPasswordField, "123456", "New Password");
			waitTime(3000);
			JSClick(PWALoginPage.objConfirmNewPasswordtxtField, "Confirm new password pop up");
			type(PWALoginPage.objConfirmNewPasswordtxtField, "123456", "Confirm New Password");
			click(PWALoginPage.objSetNewPasswordCTA, "Set new password button");
			verifyElementPresent(PWASubscriptionPages.objToastMessageNetworkInterruption,
					"An verification OTP (One Time Password) has been sent to the mobile number");

		}
	}

	public void PWAVerifyCountryCodeDropdown(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("PWA2-7764 : \"Country code \"dropdown is not displayed properly.");
			logger.info("PWA2-7764 : \\\"Country code \\\"dropdown is not displayed properly.");

			navigateToHome();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objBuySubscriptionOption, "Buy plan");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
			waitTime(10000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			waitTime(10000);
			type(PWALoginPage.objEmailField, "9611972466", "Phone no Field");
			hideKeyboard();
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objCountryCodeDropDownIndia, "Country Code India");
			verifyElementPresent(PWALoginPage.objCountryCodeDropDown, "Country Code DropDown");
		}
	}

	public void PWAVerifySEOMetadata(String userType) throws Exception {
		extent.HeaderChildNode(
				"PWA2-8104 : [SEO][Metadata] Tv Show/Zee5 Originals show Title fails to display on latest/latest1 (Carousel) Episode consumption page .");
		logger.info(
				"PWA2-8104 : [SEO][Metadata] Tv Show/Zee5 Originals show Title fails to display on latest/latest1 (Carousel) Episode consumption page .");

		navigateToHome();
		waitTime(5000);
		NavigateToAnyScreen("TV Shows");
		click(PWAHomePage.objPlaybtnCarouselBanner, "Carousel content");
		verifyElementPresent(PWAPlayerPage.objContentTitle2, "Content title");
		navigateToHome();
		waitTime(5000);
		NavigateToAnyScreen("Web Series");
		click(PWAHomePage.objPlaybtnCarouselBanner, "Carousel content");
		verifyElementPresent(PWAPlayerPage.objContentTitle2, "Content title");

	}

	public void PWAVerifySEOH1H2Tags(String userType) throws Exception {
		extent.HeaderChildNode(
				"PWA2-8157 : [SEO][Metadata] Similar metadata is displayed for both <h1> and <h2> tag of TV Show/Zee5Originals Trailer playback view page Source.");
		logger.info(
				"PWA2-8157 : [SEO][Metadata] Similar metadata is displayed for both <h1> and <h2> tag of TV Show/Zee5Originals Trailer playback view page Source.");
		PWAVerifyH1H2Tags("preeta gets emotional on seeing karan", "TV Shows", "h1");
		PWAVerifyH1H2Tags("Black Widows", "Web Series", "h1");

	}

	@SuppressWarnings({ "unused", "resource" })
	public void PWAVerifyH1H2Tags(String content, String contentType, String tag) throws Exception {
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		waitTime(5000);
		String keyword = content;
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab("All"), "All tab");
		waitTime(5000);
		click(PWASearchPage.objFirstSearch, "Search Result");

		waitTime(5000);
		if (contentType.contains("Web Series")) {
			click(PWAShowsPage.objWatchPromo, "Watch Promo");
		}
		try {
			String title = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle2, "");
			extent.extentLogger("", "Content title from UI: " + title);
			logger.info("Content title from UI: " + title);
			System.out.println("Content title from UI: ");
			String urlLink = getDriver().getCurrentUrl();
			checkTagWithTextInSource(urlLink, tag, title);
		} catch (Exception e) {
			extent.extentLoggerFail("", "Failed to fetch Content title from UI");
			logger.error("Failed to fetch Content title from UI");
		}
		String urlLink = getDriver().getCurrentUrl();
		boolean foundOpeningTag = false, foundClosingTag = false, foundText = false;
		String path = System.getProperty("user.dir") + "\\webpagesource.txt";
		URL url = new URL(urlLink);
		System.out.println("url " + url);
		try (BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
				BufferedWriter writer = new BufferedWriter(new FileWriter(path));) {
			String line;
			while ((line = reader.readLine()) != null) {
				writer.write(line);
			}
		}
		BufferedReader br = new BufferedReader(new FileReader(path));
		String line = "", doc = "", temp = "";
		while ((line = br.readLine()) != null) {
			doc = doc + line;
			System.out.println(doc);
		}
		if (doc.contains("<h2>")) {
			extent.extentLoggerFail("",
					"Trailer Content page H2 tag is displayed on the SEO Metadata page source for TV Shows");
			logger.error("Trailer Content page H2 tag is displayed on the SEO Metadata page source");
		} else {
			extent.extentLoggerPass("",
					"Trailer Content page H2 tag is not displayed on the SEO Metadata page source for TV Shows");
			logger.info("Trailer Content page H2 tag  is not displayed on the SEO Metadata page source for TV Shows");

		}

	}

	public void PWAVerifyMetadataCategory(String userType) throws Exception {
		extent.HeaderChildNode(
				"PWA2-8040 : [SEO][Metadata] \"TV Show\" metadata category displayed for the zee5 Originals Show Episode consumption page when user play the content from the Carousel.[refer video]");
		logger.info(
				"PWA2-8040 : [SEO][Metadata] \\\"TV Show\\\" metadata category displayed for the zee5 Originals Show Episode consumption page when user play the content from the Carousel.[refer video]");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		waitTime(5000);
		navigatetoAnyScreen("Web Series");
		click(PWAHomePage.objPlaybtnCarouselBanner, "Play button");
		waitTime(5000);
		String MetaData = getAttributValue("text", PWAPlayerPage.objShowCategoryMeta);
		System.out.println(MetaData);
		if (MetaData.contentEquals("Web Series")) {
			logger.info("'Web Series' metadata is displayed on Zee5Originals show episodes");
			extent.extentLoggerPass("", "'Web Series' metadata is displayed on Zee5Originals show episodes");
		} else {
			logger.error(MetaData + " metadata is not displayed on Zee5Originals show episodes");
			extent.extentLoggerFail("", MetaData + " metadata is not displayed on Zee5Originals show episodes");
		}
	}

	public void PWAVerifyH1TagsOriginalsandShows(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-8031 : [SEO] - Same meta data details is displayed for both <h1> and <h2> tags in Shows and Originals Episodes consumption page. [Refer Video]");
			logger.info(
					"PWA2-8031 : [SEO] - Same meta data details is displayed for both <h1> and <h2> tags in Shows and Originals Episodes consumption page. [Refer Video]");
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			waitTime(5000);
			String keyword = "Kumkum Bhagya";
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
			waitTime(2000);
			click(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows tab");
			waitTime(5000);
			click(PWASearchPage.objSearchedResult(keyword), "Search Result");
			waitTime(4000);
			click(PWAShowsPage.objFirstAssetImageFirstRail, "First content");
			waitTime(5000);
			try {
				String title = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle2, "");
				extent.extentLogger("", "Content title from UI: " + title);
				logger.info("Content title from UI: " + title);
				System.out.println("Content title from UI: ");
				String urlLink = getDriver().getCurrentUrl();
				checkTagWithTextInSource(urlLink, "h1", title);
			} catch (Exception e) {
				extent.extentLoggerFail("", "Failed to fetch Content title from UI");
				logger.error("Failed to fetch Content title from UI");
			}

			waitTime(5000);
		}

	}

	public void PWAVerifySEOChannelsPage(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("PWA2-7492 : Channel pages - SEO details to be updated.");
			logger.info("PWA2-7492 : Channel pages - SEO details to be updated.");
			waitTime(10000);
			navigateToHome();
			waitTime(3000);
			NavigateToAnyScreen("Channels");
			waitTime(5000);
			try {
				String title = getElementPropertyToString("innerText", PWALandingPages.objChannelsLandingPageTitle, "");
				extent.extentLogger("", "Content title from UI: " + title);
				logger.info("Content title from UI: " + title);
				System.out.println("Content title from UI: ");
				String urlLink = getDriver().getCurrentUrl();
				checkTagWithTextInSource(urlLink, "h1", title);
			} catch (Exception e) {
				extent.extentLoggerFail("", "Failed to fetch Content title from UI");
				logger.error("Failed to fetch Content title from UI");
			}

			String channelName = getAttributValue("title", PWALandingPages.objFirstChannelCard);
			System.out.println(channelName);
			click(PWALandingPages.objFirstChannelCard, "First Channel");
			try {
				String title = getElementPropertyToString("innerText",
						PWALandingPages.objChannelsPageTitle(channelName), "");
				extent.extentLogger("", "Content title from UI: " + title);
				logger.info("Content title from UI: " + title);
				System.out.println("Content title from UI: ");
				String urlLink = getDriver().getCurrentUrl();
				checkTagWithTextInSource(urlLink, "h1", title);
			} catch (Exception e) {
				extent.extentLoggerFail("", "Failed to fetch Content title from UI");
				logger.error("Failed to fetch Content title from UI");
			}

		}
	}

	public void PWAVerifyToastmessageforPurchaseUpgrade(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-7950 : \"Selected plan has already been activated\" toast message is displayed when user navigate to Zee Plex page from SVOD consumption page [Refer steps / video]");
			logger.info(
					"PWA2-7950 : \\\"Selected plan has already been activated\\\" toast message is displayed when user navigate to Zee Plex page from SVOD consumption page [Refer steps / video]");
			reloadHome();
			SearchContent("premiumMovie2");
			waitTime(5000);
			verifyElementPresentAndClick(PWAPlayerPage.objBuyPlanCTABelowPlayerScreen,
					"Subscribe button below player during trailer Play");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
			waitTime(3000);
			String Username = getParameterFromXML("SubscribedUserName");
			String Password = getParameterFromXML("SubscribedPassword");
			verifyElementPresent(PWALoginPage.objEmailField, "Login page");
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, Username, "Email Field");
			hideKeyboard();
			waitTime(5000);
			click(PWALoginPage.objContinueBtn, "Continue button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, Password, "Password field");
			hideKeyboard();
			waitTime(5000);
			click(PWALoginPage.objContinueBtn, "Continue button");
			waitTime(3000);
			DeviceLimitPopOp();
			click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objExploreOption, "Explore button");
			PartialSwipe("UP", 1);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objExploreItemBtn("ZEEPLEX"), "Zeeplex");
			if (verifyElementDisplayed(PWASubscriptionPages.objToastMessageNetworkInterruption)) {
				String ToastMessage = getText(PWASubscriptionPages.objToastMessageNetworkInterruption);
				System.out.println(ToastMessage);
				if (ToastMessage.contains("Selected plan has already been activated")) {
					extent.extentLoggerFail("",
							"'Selected plan has already been activated' Toast message is displayed");
					logger.error("'Selected plan has already been activated' Toast message is displayed");
				}
			} else {
				extent.extentLoggerPass("",
						"'Selected plan has already been activated' Toast message is not displayed");
				logger.info("'Selected plan has already been activated' Toast message is not displayed");
			}
			logout();
		}

	}

	public String SearchContent(String s2) throws Exception {
		String s1 = getParameterFromXML(s2);
		waitTime(10000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search");
		type(PWAHomePage.objSearchField, s1, "Search field");
		// verifyElementPresentAndClick(PWAHomePage.objSearchField, "Search");
		waitTime(10000);
		verifyElementPresentAndClick(PWASearchPage.objFirstSearchResult, "First Search");
		waitTime(10000);
		return s1;
	}

	public void DeviceLimitPopOp() throws Exception {
		if (verifyElementDisplayed(PWAPlayerPage.objDeviceLimitPopup)) {
			click(PWAPlayerPage.objResetButton, "Reset Now");
		}
	}

	public void WatchMorePopup() throws Exception {
		if (verifyIsElementDisplayed(PWAPlayerPage.objWouldYouLikePopUp)) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "Watch now close icon");
		}
	}

	public void PWAVerifyH1H2TagsOriginalsandShows(String userType) throws Exception {
		extent.HeaderChildNode(
				"PWA2-8155 : [SEO][Metadata] [SEO] '<h1> and <h2> tag fails to display in view page source for \\\"/latest and /latest1\\\" Tv show/Web Series Episode Content playback page.'");
		logger.info(
				"PWA2-8155 : [SEO][Metadata] [SEO] '<h1> and <h2> tag fails to display in view page source for \"/latest and /latest1\" Tv show/Web Series Episode Content playback page.'");
		PWAVerifyH1H2("Kundali Bhagya", "TV Shows", "h1");
		PWAVerifyH1H2("Poison", "Web Series", "h2");

	}

	@SuppressWarnings({ "unused", "resource" })
	public void PWAVerifyH1H2(String content, String contentType, String tag) throws Exception {
		waitTime(10000);
		navigateToHome();
		String keyword = content;
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(5000);
		click(PWASearchPage.objSearchNavigationTab("All"), contentType + " tab");
		waitTime(5000);
		click(PWASearchPage.objFirstSearch, "Search Result");
		waitTime(5000);
		String urlLink = getDriver().getCurrentUrl();
		String urlLink1 = urlLink + "/latest";
		getDriver().get(urlLink1);
		logger.info("Content title from UI: " + urlLink1);
		boolean foundOpeningTag = false, foundClosingTag = false, foundText = false;
		String path = System.getProperty("user.dir") + "\\webpagesource.txt";
		URL url = new URL(urlLink);
		System.out.println("url " + url);
		try (BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
				BufferedWriter writer = new BufferedWriter(new FileWriter(path));) {
			String line;
			while ((line = reader.readLine()) != null) {
				writer.write(line);
			}
		}
		BufferedReader br = new BufferedReader(new FileReader(path));
		String line = "", doc = "", temp = "";
		while ((line = br.readLine()) != null) {
			doc = doc + line;
			System.out.println(doc);
		}
		if (doc.contains("<" + tag)) {
			extent.extentLoggerPass("", "Source contains Opening tag for " + tag);
			logger.info("Source contains Opening tag for " + tag);
			doc = doc.split("<" + tag)[1];
			doc = "<" + tag + doc;
			if (doc.contains("</" + tag + ">")) {
				extent.extentLoggerPass("", "Source contains Closing tag for " + tag);
				logger.info("Source contains Closing tag for " + tag);
				doc = doc.split("</" + tag + ">")[0];
				doc = doc + "</" + tag + ">";
				temp = doc.split("<" + tag)[1].split(">")[1].split("</" + tag)[0];
				logger.info("Text displayed in source : " + temp);
				extent.extentLogger("", "Text displayed in source : " + temp);
			} else {
				extent.extentLoggerFail("", "Source does not contain Closing tag for " + tag);
				logger.error("Source does not contain Closing tag for " + tag);
			}
		} else {
			extent.extentLoggerFail("", "Source does not contain Opening tag for " + tag);
			logger.error("Source does not contain Opening tag for " + tag);
		}

	}

	public void PWAVerifyHTagsAndSubTextforShowsAndOriginals(String userType, String content, String contentType)
			throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-7318 : SEO - Show and original episode page - change in <h> tags and metadata showcasing ");
			logger.info(
					"PWA2-7318 : SEO - Show and original episode page - change in <h> tags and metadata showcasing ");

			String TVShows = "https://newpwa.zee5.com/tvshows";
			String Webseries = "https://newpwa.zee5.com/zee5originals";
			PWAVerifyHTagsforShowsAndOriginals("Kundali Bhagya", "All");
			PWANavigateToRespectiveLandingScreenFromPlayerScreen(TVShows, contentType);
			PWANaviagteToShowChannelFromPlayerScreen();
			navigateToHome();
			PWAVerifyHTagsforShowsAndOriginals("Poison", "All");
			PWANavigateToRespectiveLandingScreenFromPlayerScreen(Webseries, contentType);
			PWANaviagteToSeasonPageFromPlayerScreen(content);
		}
	}

	public void PWAVerifyHTagsforShowsAndOriginals(String content, String contentType) throws Exception {

		// H1 to be the show or original title. It will be clickable taking to show page
		// in same window.

		waitTime(10000);
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		waitTime(3000);
		String keyword = content;
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab(contentType), contentType + " tab");
		waitTime(5000);
		verifyElementPresentAndClick(PWASearchPage.objFirstSearch, "Search Result");
		waitTime(10000);
		verifyElementPresentAndClick(PWAShowsPage.objFirstAssetImageFirstRail, "First content");
		waitTime(5000);
		try {
			String title = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle2, "");
			String MetaData = getAttributValue("text", PWAPlayerPage.objShowCategoryMeta);
			System.out.println(MetaData);
			extent.extentLogger("", "Content title from UI: " + title);
			logger.info("Content title from UI: " + title);
			System.out.println("Content title from UI: ");
			String urlLink = getDriver().getCurrentUrl();
			checkTagWithTextInSource(urlLink, "h1", title);
		} catch (Exception e) {
			extent.extentLoggerFail("", "Failed to fetch Content title from UI");
			logger.error("Failed to fetch Content title from UI");
		}
		waitTime(5000);
		click(PWAPlayerPage.objContentTitle2, "Content title");
		if (verifyElementDisplayed(PWAShowsPage.objShowsTitle)) {
			verifyElementPresent(PWAShowsPage.objWatchLatestCTA, "Show Details");
		}
		Back(1);

		// H2 to be the the episode title i.e. the creative title. If creative title is
		// not available; show Episode number as H2. e.g.:  Episode 1
		try {
			String title = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle1, "");
			extent.extentLogger("", "Content title from UI: " + title);
			logger.info("Content title from UI: " + title);
			System.out.println("Content title from UI: ");
			String urlLink = getDriver().getCurrentUrl();
			checkTagWithTextInSource(urlLink, "h2", title);
		} catch (Exception e) {
			extent.extentLoggerFail("", "Failed to fetch Content title from UI");
			logger.error("Failed to fetch Content title from UI");
		}

		// Line 1
		logger.info(" Content meta data Line 1");
		String title = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle2, "");
		System.out.println(title + " Content Title");
		if (title.contains(content)) {
			extent.extentLoggerPass("", " Content title " + title + " is displayed");
			logger.info(" Content title " + title + " is displayed");
		} else {
			extent.extentLoggerFail("", " Content title " + title + " is not displayed");
			logger.error(" Content title " + title + " is not displayed");
		}

		// Line 2
		logger.info(" Content meta data Line 2");
		verifyElementPresent(PWAPlayerPage.objContentTitle2, "Creative content title");
		verifyElementPresent(PWAPlayerPage.objContentMetaEpisode, "Content Episode");
		verifyElementPresent(PWAPlayerPage.objContentMetaDate, "Content Episode date");
		if (verifyElementDisplayed(PWAPlayerPage.objShowSeasonMeta)) {
			extent.extentLoggerPass("", "Episode Season meta data is displayed");
		}
		verifyElementPresent(PWAPlayerPage.objShowCategoryMeta, "Content Category");

		// Line 3
		logger.info(" Content meta data Line 3");
		verifyElementPresent(PWAPlayerPage.objContentMetaDuration, "Content meta duration");
		verifyElementPresent(PWAPlayerPage.objContentMetaAgeRating, "Content rating date");
		if (verifyElementDisplayed(PWAPlayerPage.objContentMetaGenre)) {
			extent.extentLoggerPass("", "Content genre meta data is displayed");
		}
	}

	public void PWANavigateToRespectiveLandingScreenFromPlayerScreen(String PTitle, String contentType)
			throws Exception {
		// Show subtext as per existing website
		click(PWAPlayerPage.objShowCategoryMeta, "TV Shows category");
		String title = getDriver().getCurrentUrl();
		System.out.println(title + " Page title");
		if (title.contains(PTitle)) {
			logger.info("Navigated to " + contentType + " Landing page");
			extent.extentLoggerPass("", "Navigated to " + contentType + " Landing page");
		} else {
			logger.error("Not navigated to " + contentType + " Landing page");
			extent.extentLoggerFail("", "Not navigated to " + contentType + " Landing page");
		}
	}

	public void PWANaviagteToShowChannelFromPlayerScreen() throws Exception {
		String Channel = getAttributValue("text", PWAPlayerPage.objShowChannelMeta);
		click(PWAPlayerPage.objShowChannelMeta, "Show Channel");
		String title2 = getText(PWALandingPages.objChannelsPageTitle(Channel));
		if (title2.contentEquals("List of " + Channel + " Serials")) {
			logger.info("Navigated to list of serials displayed for" + Channel);
			extent.extentLoggerPass("", "Navigated to list of serials displayed for" + Channel);
		} else {
			logger.error("Not navigated to list of serials displayed for" + Channel);
			extent.extentLoggerFail("", "Not navigated to list of serials displayed for" + Channel);
		}
	}

	public void PWANaviagteToSeasonPageFromPlayerScreen(String content) throws Exception {
		String season = getAttributValue("text", PWAPlayerPage.objShowSeasonMeta);
		System.out.println(season);
		String[] t = season.split("\\ ");
		String split_one = t[1];
		System.out.println(split_one);
		String s = "Season " + split_one;
		click(PWAPlayerPage.objShowSeasonMeta, "Show season");
		String title2 = getText(PWALandingPages.objChannelsSeasonPageTitle(s, content));
		System.out.println(title2);
		if (title2.contentEquals(content + " " + s + " Episodes")) {
			logger.info("Navigated to shows season displayed for" + content);
			extent.extentLoggerPass("", "Navigated to shows season displayed for" + content);
		} else {
			logger.error("Not navigated to shows season displayed for" + content);
			extent.extentLoggerFail("", "Not navigated to shows season displayed for" + content);
		}
	}

	public void PWAVerifyTranslateSelectedDisplayLanguage(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"PWA2-8039 : \"List of TV Channels\" and \"List of <channel name> Serials\" fail to translate for selected display language.");
			logger.info(
					"PWA2-8039 : \"List of TV Channels\" and \"List of <channel name> Serials\" fail to translate for selected display language.");
			waitTime(10000);
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			click(PWAHomePage.objDisplayLanguage("Tamil"), "Tamil Display language");
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(3000);
			NavigateToAnyScreen("Channels");
			String channelName = getAttributValue("title", PWALandingPages.objFirstChannelCard);
			System.out.println(channelName);
			click(PWALandingPages.objFirstChannelCard, "First Channel");
			String title2 = getText(PWALandingPages.objChannelsPageTitle(channelName));
			if (title2.contentEquals("List of " + channelName + " Serials")) {
				logger.error(
						"The titles for TV channel name is not translated based on the selected display language.");
				extent.extentLoggerFail("",
						"The titles for TV channel name is not translated based on the selected display language.");
			} else {
				logger.info("The titles for TV channel name is translated based on the selected display language.");
				extent.extentLoggerPass("",
						"The titles for TV channel name is translated based on the selected display language.");
			}
			// Change display language
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			click(PWAHomePage.objDisplayLanguage("English"), "English Display language");
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(3000);

		}
	}

	public void PWAVerifyTranslateChannelInfoScreenSelectedDisplayLanguage(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"PWA2-8041 : \"Channel Name\" in the \"List of <channel name> Serials\" fails to translate for all the display languages except English.");
			logger.info(
					"PWA2-8041 : \\\"Channel Name\\\" in the \\\"List of <channel name> Serials\\\" fails to translate for all the display languages except English.");
			waitTime(10000);
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			click(PWAHomePage.objDisplayLanguage("Tamil"), "Tamil Display language");
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(3000);
			NavigateToAnyScreen("Channels");
			JSClick(PWAHomePage.objTabName("Channels"), "Channels Tab");
			String title = getText(PWALandingPages.objChannelsLandingPageTitle);
			System.out.println(title);
			if (title.contentEquals("List of TV Channels")) {
				logger.error("The titles for TV channel is not translated based on the selected display language.");
				extent.extentLoggerFail("",
						"The titles for TV channel is not translated based on the selected display language.");
			} else {
				logger.info("The titles for TV channel is translated based on the selected display language.");
				extent.extentLoggerPass("",
						"The titles for TV channel is translated based on the selected display language.");
			}
			// Change display language
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			click(PWAHomePage.objDisplayLanguage("English"), "English Display language");
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			waitTime(3000);
		}
	}

	public void PWAVerifyDisplayLanguageInPlayerSkip(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("PWA2-7916 : Skip CTA in required display language");
			logger.info("PWA2-7916 : Skip CTA in required display language");
			navigateToHome();
			// mandatoryRegistrationPopUp(userType);
			String content = "Natasaarvabhowma";
			String language = "Marathi";
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			click(PWAHomePage.objMarathiWEB, "Marathi Display language");
			click(PWAHamburgerMenuPage.objApply, "Apply button on Display Langauge dropdown");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objApplybutton, "Apply button on Content Language dropdown");
			waitTime(3000);
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, content, "Search field");
			waitTime(5000);
			click(PWASearchPage.objSearchMoviesTab, "Movies tab");
			verifyElementPresentAndClick(PWASearchPage.objFirstSearch, "Search Result");
			waitTime(12000);
			if (checkElementDisplayed(PWAPlayerPage.objSkipButtonInEnglish, "Skip Button in English")) {
				logger.error("Skip button is displayed in English instead of " + language + " Language");
				extent.extentLoggerFail("", "Skip button is displayed in English instead of " + language + " Language");
			} else {
				logger.info("Skip CTA is displayed in required display language");
				extent.extentLoggerPass("", "Skip CTA is displayed in required display language");
			}
			navigateToHome();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			click(PWAHomePage.objEnglishWEB, "English Display language");
			click(PWAHamburgerMenuPage.objApply, "Apply button on Display Langauge dropdown");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objApplybutton, "Apply button on Content Language dropdown");
			waitTime(4000);
			mandatoryRegistrationPopUp(userType);
		}

	}

	public void PWAVerifyGetPremiumCTADisplayedForSubscribedUserWithParentalPin(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-7925 : \"Get premium \"CTA is displayed on consumption page for the subscribed users with parental pin logged in via guest checkout");
			logger.info(
					"PWA2-7925 : \"Get premium \"CTA is displayed on consumption page for the subscribed users with parental pin logged in via guest checkout");
			navigateToHome();
			loginWithUserEmail("sanaraj.sunny@gmail.com", "123456");
			waitTime(5000);
			SetParentalPopup(PWAHamburgerMenuPage.objRestrictAll, "SubscribedPassword", "Restrict all");
			logout();
			waitTime(2000);
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			String keyword = "Hero";
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
			waitTime(2000);
			click(PWASearchPage.objSearchNavigationTab("Movies"), "Movies tab");
			click(PWASearchPage.objSearchedResult(keyword), "Search Result");
			// click(PWAShowsPage.objFirstAssetImageFirstRail, "First content from show");
			waitTime(5000);
			click(PWAPlayerPage.objBuyPlanCTABelowPlayerScreen, "Get Premium cta");
			waitTime(2000);
			if (verifyElementExist(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText,
					"Browse All Packs Page Title Text")) {
				logger.info("Navigated to plan selection page");
				extent.extentLoggerPass("", "Navigated to plan selection page");
				click(PWASubscriptionPages.objContinueBtn, "Continue Button");
				waitTime(2000);
				if (verifyElementExist(PWASubscriptionPages.objAccountInfoTitleName, "Account Info Title")) {
					logger.info("Navigated to Account Info page");
					extent.extentLoggerPass("", "Navigated to Account Info page");
					verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email ID Text Field");
					type(PWALoginPage.objEmailField, "sanaraj.sunny@gmail.com", "Email ID Text Field");
					waitTime(5000);
					click(PWALoginPage.objContinueBtn, "Continue Button");
					waitTime(3000);
					// Password Popup
					verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
					verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
					type(PWALoginPage.objPasswordField, "123456", "Password field");
					hideKeyboard();
					waitTime(3000);
					click(PWALoginPage.objContinueBtn, "Continue Button");
					// verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnEnabled,
					// "Enabled Proceed Button");
					waitTime(5000);
					if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field")) {
						type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
						type(PWAHamburgerMenuPage.objParentalLockPin2player, "1", "ParentalLockPin");
						type(PWAHamburgerMenuPage.objParentalLockPin3player, "1", "ParentalLockPin");
						type(PWAHamburgerMenuPage.objParentalLockPin4player, "1", "ParentalLockPin");
					}
					waitTime(4000);
					if (verifyIsElementDisplayed(PWAPlayerPage.objBuyPlanCTABelowPlayerScreen,
							"Get Premium CTA below the Player")) {
						logger.error("Get Premium CTA below the Player is visible");
						extent.extentLoggerFail("checkElementPresent", "Get Premium CTA below the Player is displayed");
					} else {
						logger.info("Get Premium CTA below the Player is not displayed");
						extent.extentLoggerPass("checkElementPresent",
								"Get Premium CTA below the Player is not displayed");
					}

					if (verifyIsElementDisplayed(PWAPlayerPage.objSubscribeNowLink,
							"In-Line Get Premium CTA On Player Screen")) {
						logger.error("In-Line Get Premium CTA On Player Screen is visible");
						extent.extentLoggerFail("checkElementPresent",
								"In-Line Get Premium CTA On Player Screen is displayed");
					} else {
						logger.info("In-Line Get Premium CTA On Player Screen is not displayed");
						extent.extentLoggerPass("checkElementPresent",
								"In-Line Get Premium CTA On Player Screen is not displayed");
					}
					logout();
				}
			}
		}
	}

	public void PWAVerifyToastMessageDisplayedInsteadOfInlineErrorMessageOnAccountInfoPage(String userType)
			throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-7725 : \"Either OTP is not valid or Expired\" toast message displayed instead of inline Error message on Account info page \"Verify OTP\" screen");
			logger.info(
					"PWA2-7725 : \"Either OTP is not valid or Expired\" toast message displayed instead of inline Error message on Account info page \"Verify OTP\" screen");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			waitTime(3000);
			click(PWAHomePage.objByPlan, "Get Premium cta");
			waitTime(2000);
			if (verifyElementExist(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText,
					"Browse All Packs Page Title Text")) {
				logger.info("Navigated to plan selection page");
				extent.extentLoggerPass("", "Navigated to plan selection page");
				click(PWASubscriptionPages.objContinueBtn, "Continue Button");
				waitTime(2000);

				if (verifyElementExist(PWASubscriptionPages.objAccountInfoTitleName, "Account Info Title")) {
					logger.info("Navigated to Account Info page");
					extent.extentLoggerPass("", "Navigated to Account Info page");
					verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email ID Text Field");

					type(PWALoginPage.objEmailField, "9611972466", "Email ID Text Field");
					waitTime(2000);
					click(PWALoginPage.objContinueBtn, "Continue Button");
					waitTime(2000);
					if (verifyElementExist(PWASubscriptionPages.objVerifyOTPTitle, "Verify OTP Title")) {
						logger.info("Navigated to plan selection page");
						extent.extentLoggerPass("", "Navigated to plan selection page");
						type(PWASubscriptionPages.objOTPTextField1, "1", "First OTP Text Field");
						waitTime(2000);
						type(PWASubscriptionPages.objOTPTextField2, "1", "Second OTP Text Field");
						waitTime(2000);
						type(PWASubscriptionPages.objOTPTextField3, "1", "Third OTP Text Field");
						waitTime(2000);
						type(PWASubscriptionPages.objOTPTextField4, "1", "Fourth OTP Text Field");
						waitTime(2000);
						click(PWASubscriptionPages.objVerifyButton, "Verify Button");
						waitTime(2000);
						verifyElementPresent(PWASubscriptionPages.objInvalidOTPErrorMessage,
								"Invalid OTP Error Message");
					} else {
						logger.error("Not navigated to plan selection page");
						extent.extentLoggerFail("", "Not navigated to plan selection page");
					}
				} else {
					logger.error("Not navigated to Account Info page");
					extent.extentLoggerFail("", "Not navigated to Account Info page");
				}
			} else {
				logger.error("Not navigated to plan selection page");
				extent.extentLoggerFail("", "Not navigated to plan selection page");
			}
			waitTime(2000);

		}
	}

//========================Veena Sprint 57========================
	public void Sprint57(String userType) throws Exception {
		// PWA2-7597
		PWAVerifyToastMessageOnNetworkInterruption(userType);
		// PWA2-7598
		PWAVerifyFieldValidation(userType);
		// PWA2-7766
		verifyPWACTA(userType);
		// PWA2-7781
		pwaToWatchthisPremiumContenttextverify(userType);
		// PWA-7759
		PWAVerifyToastMessageOnNetworkInterruption(userType);
		// PWA-7756
		PWAVerifyFieldValidation(userType);

	}

	public void pwaToWatchthisPremiumContenttextverify(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode(
					"(PWA2-7781) Before TV Episode , Zee5Originals Premium 2nd Episode entitlement - Player Inline Text sentence validation ");
			navigateToAnyScreen("TV Shows");
			ScrollToElement(PWAHomePage.objFirstContentCardOfTray("Before"), "Before TV rail");
			if (checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"),
					"First Content Card Of Before TV Tray")) {
				click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");
				waitForPlayerAdToComplete("Video Player");
				String text = getText(PWAHamburgerMenuPage.objsubscriptionlinkmessage);
				System.out.println(text);
				extent.extentLogger("", "Subscription text : " + text);
				if (text.contentEquals("To Watch this Premium Content")) {

					logger.info(" \"To Watch this Premium Content\" text should be displayed., expected behaviour");
					extent.extentLoggerPass(" ",
							" \"To Watch this Premium Content\" text should be displayed,  expected behaviour");
				} else {
					logger.info("\"You Need Premium Membership to watch this video\" text displayed");
					extent.extentLoggerFail(" ", "\"You Need Premium Membership to watch this video\" text displayed");

				}
			}
			navigateToAnyScreen("Web Series");
			swipeTillTrayAndClickCard("Top ZEE5 Web Series");
			waitTime(5000);
			JSClick(PWAShowsPage.objSecondAssetImageFirstRail, "Second card under Tray");
			waitForTrailerPlaybackToComplete("Video Player");
			String text = getText(PWAHamburgerMenuPage.objsubscriptionlinkmessage);
			System.out.println(text);
			extent.extentLogger("", "Subscription text : " + text);
			if (text.contentEquals("To Watch this Premium Content")
					|| text.contentEquals("To watch remaining Episode")) {

				logger.info(" \"To Watch this Premium Content\" text should be displayed., expected behaviour");
				extent.extentLoggerPass(" ",
						" \"To Watch this Premium Content\" text should be displayed,  expected behaviour");
			} else {
				logger.info("\"You Need Premium Membership to watch this video\" text displayed");
				extent.extentLoggerFail(" ", "\"You Need Premium Membership to watch this video\" text displayed");

			}
		}

	}

	public void PWAVerifyToastMessageOnNetworkInterruption(String userType) throws Exception {

		extent.HeaderChildNode(
				"PWA2-7759 : [Subscription_Revamp] \"Something went wrong \"Toast message fails to display only Account info section is displayed with blank data during network interruption.[refer screen record]");
		logger.info(
				"PWA2-7759 : [Subscription_Revamp] \"Something went wrong \"Toast message fails to display only Account info section is displayed with blank data during network interruption.[refer screen record]");
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			mandatoryRegistrationPopUp(userType);
			reloadHome();
			waitTime(10000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyAccount, "My Account");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			waitTime(3000);
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objBrowseAllPacks)) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			}
			if (verifyElementDisplayed(PWASubscriptionPages.objBuyPlanMySubscription)) {
				verifyElementPresentAndClick(PWASubscriptionPages.objBuyPlanMySubscription, "Buy plan");
			}
			waitTime(10000);
			setWifiConnectionToONOFF("OFF");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
			verifyElementPresent(PWASubscriptionPages.objToastMessageNetworkInterruption,
					"'Something went wrong' toast message ");
			String ToastMessage = getText(PWASubscriptionPages.objToastMessageNetworkInterruption);
			System.out.println(ToastMessage);
			if (ToastMessage.contains("Something went wrong")) {
				extent.extentLoggerPass("", "'Something went wrong' Toast message is displayed");
				logger.info("'Something went wrong' Toast message is displayed");
			}
			waitTime(3000);
			TurnONWifi();
			setWifiConnectionToONOFF("ON");
		}

	}

	public void PWAVerifyFieldValidation(String userType) throws Exception {

		extent.HeaderChildNode(
				"PWA2-7756 : [Subscription_Revamp] \"Have a Gift Card?\" is accepting 'e' alphabet and \"Enter card number here\" overlaps when user click  any where else[Refer SS]");
		logger.info(
				"PWA2-7756 : [Subscription_Revamp] \"Have a Gift Card?\" is accepting 'e' alphabet and \"Enter card number here\" overlaps when user click  any where else[Refer SS]");
		if (userType.equals("NonSubscribedUser")) {
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyAccount, "My Account");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			waitTime(3000);
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objBrowseAllPacks)) {
				click(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			}
			if (verifyElementDisplayed(PWASubscriptionPages.objBuyPlanMySubscription)) {
				click(PWASubscriptionPages.objBuyPlanMySubscription, "Buy plan");
			}
			waitTime(10000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
			waitTime(10000);
			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACard, "Have a code");
			waitTime(10000);
			type(PWASubscriptionPages.objGiftCardNumber, "aaa", "Gift card");
			waitTime(5000);
			String text = getAttributValue("value", PWASubscriptionPages.objGiftCardNumber);
			System.out.println(text);
			if (text == "aaa") {
				extent.extentLoggerFail("", "'Have a gift card' field is accepting charatcters");
				logger.error("'Have a gift card' field is accepting charatcters");
			} else {
				extent.extentLoggerPass("", "'Have a gift card' field is accepting only digits");
				logger.info("'Have a gift card' field is  accepting only digits");
			}
		}
	}

	public void verifyPWACTA(String userType) throws Exception {
		System.out.println(
				"PWA2-7766 : [MPWA-Android] \"Install\" CTA is not displayed as per the requirement [Refer screenshot].");
		extent.HeaderChildNode(
				"PWA2-7766 : [MPWA-Android] \\\"Install\\\" CTA is not displayed as per the requirement [Refer screenshot].");
		mandatoryRegistrationPopUp(userType);
		waitTime(5000);
		navigateToHome();
		String keyword = "Jodha Akbar";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows tab");
		click(PWASearchPage.objSearchedResult(keyword), "Search Result");
		click(PWAShowsPage.objFirstAssetImageFirstRail, "First content from show");
		// if(userType=="Guest" ||userType=="NonSubscribedUser") {
		waitTime(10000);
		if (verifyElementDisplayed(PWAPlayerPage.objSkipAd)) {
			click(PWAPlayerPage.objSkipAd, "Skip ad");
		}
		waitTime(10000);
		if (verifyElementDisplayed(PWAPlayerPage.objSkipAd)) {
			click(PWAPlayerPage.objSkipAd, "Skip ad");
		}
		// }
		waitTime(10000);
		String text = getElementPropertyToString("innerText", PWAPlayerPage.objInstallCTA, "");
		System.out.println(text);
		if (text.contentEquals("Install")) {
			extent.extentLoggerPass("", "Space is observed in Install CTA.");
			logger.info("Space is observed in Install CTA.");
		} else {
			extent.extentLoggerFail("", "Space is not be observed in Install CTA.");
			logger.info("Space is not be observed in Install CTA.");
		}
	}

	// ========================Veena Sprint 55-56========================

	public void Sprint55to56(String userType) throws Exception {
		// PWA2-7597
		PWAVerifyH1TagsWithText(userType);//
		// PWA2-7598
		PWAVerifyH1Tags(userType);//
		// PWA2-7516
		pwaDRMmessageforpremiumcontent(userType);//
		// PWA2-7491
		pwaEpisodedropdownrangeandcontentrangevalidation(userType);//
		// PWA2-5751
		pwaBlankAudioTrack(userType);//
		// PWA2-6663
		PWAVerifyH1TagsOriginalsSeasonShow(userType);//
		// PWA2-7467 and PWA2-3604
		PWAVerifyEpisodePositionCountInterchange(userType);//
		// PWA2-7171
		PWAVerifyEpisodeDDMultiSeasonShow(userType);//
		// PWA2-7315
		PWAVerifyRemoveAutoplayContent(userType);//
		// PWA2-7509
		PWAVerifyNewTabRevised(userType);//
	}

	public void PWAVerifyH1TagsWithText6005(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("PWA2-6005 : Revert PWA2-6005 H1 implementation for trailer and LIVE TV");
			logger.info("PWA2-6005 : Revert PWA2-6005 H1 implementation for trailer and LIVE TV");
			extent.extentLogger("", "----- Verification of H1 tag in Zee5Originals Show Trailer page ------");
			System.out.println("Verification of H1 tag in Zee5Originals Show Trailer page");
			navigateToHome();

			verifyElementPresent(PWAHomePage.objTabName("Home"), "Home Tab");
			mandatoryRegistrationPopUp(userType);

			String keyword = "Poison trailer";
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
			waitTime(2000);
			click(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows tab");
			click(PWASearchPage.objSearchedResult(keyword), "Search Result");
			waitTime(4000);
			click(PWAPlayerPage.objWatchPromo, "Watch Promo icon");
			waitTime(2000);
			try {
				String title = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleInPlayerPage, "");
				extent.extentLogger("", "Content title from UI: " + title);
				logger.info("Content title from UI: " + title);
				System.out.println("Content title from UI: ");
				String urlLink = getDriver().getCurrentUrl();
				checkTagWithTextInSource(urlLink, "h1", title);
			} catch (Exception e) {
				extent.extentLoggerFail("", "Failed to fetch Content title from UI");
				logger.error("Failed to fetch Content title from UI");
			}

			waitTime(5000);
			extent.extentLogger("", "----- Verification of H1 tag in Live TV Channel Playback page ------");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			JSClick(PWAHomePage.objTabName("Live TV"), "Live TV Tab");
			click(PWALandingPages.objFirstAssetInTrayIndex("FREE Channels"), "First card under Free Channels");
			waitTime(5000);
			try {
				String title = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleInPlayerPage, "");
				extent.extentLogger("", "Content title from UI: " + title);
				logger.info("Content title from UI: " + title);
				String urlLink = getDriver().getCurrentUrl();
				checkTagWithTextInSource(urlLink, "h1", title);
			} catch (Exception e) {
				extent.extentLoggerFail("", "Failed to fetch Content title from UI");
				logger.error("Failed to fetch Content title from UI");
			}

		}
	}

	public void PWAVerifyNewTabRevised(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-7509 : Implement the new Tab order with their revised names");
		logger.info("PWA2-7509 : Implement the new Tab order with their revised names");
		mandatoryRegistrationPopUp(userType);
		reloadHome();
		waitTime(10000);
		List<WebElement> TabElements = findElements(PWAHomePage.objTabCountList);
		String[] tabs = { "Home", "TV Shows", "Movies", "Web Series", "News", "Premium", "Live TV", "ZEEPLEX", "Play",
				"Web Stories", "Kids", "Videos", "Music", "Stories", "Channels" };
		for (int i = 0; i < tabs.length; i++) {
			String s = TabElements.get(i).getText();
			System.out.println("Tab is: " + s);
			if (tabs[i].contentEquals(s)) {
				extent.extentLoggerPass("", s + " Tab names and its order is as mentioned in the excel sheet.");
				logger.info(s + " Tab names and its order is as mentioned in the excel sheet.");
			} else {
				extent.extentLoggerFail("", s + " Tab names and its order is not as mentioned in the excel sheet.");
				logger.error("The Tab names and their order is not as mentioned in the excel sheet.");
			}
		}
	}

	public void PWAVerifyEpisodeDDMultiSeasonShow(String userType) throws Exception {
		extent.HeaderChildNode(
				"PWA2-7171 : Episode rail contents mismatch with respect to the season dropdown option on the the Multi season show Episode consumption page[refer video]..");
		logger.info(
				"PWA2-7171 : Episode rail contents mismatch with respect to the season dropdown option on the the Multi season show Episode consumption page[refer video]..");
		mandatoryRegistrationPopUp(userType);
		reloadHome();
		waitTime(5000);
		String keyword = "Karrle Tu Bhi Mohabbat";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows tab");
		click(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(4000);
		swipeTillTray(1, "Season 3", "Season tray");
		click(PWAShowsPage.objFirstAssetEpisodeFirstRail, "Season DropDown");
		waitTime(4000);
		PartialSwipe("UP", 1);
		waitTime(4000);
		click(PWAShowsPage.objEpisodesSetTray, "Season DropDown");
		waitTime(4000);
		List<WebElement> DDContents = findElements(PWAShowsPage.objSetEpisodeTray);
		int size = DDContents.size();
		String s = Integer.toString(size);
		for (int dot = 0; dot < DDContents.size(); dot++) {
			selectByIndexFromDD(PWAShowsPage.objSetEpisodeTray, s);
			String s1 = getText(PWAShowsPage.objEpisodesSetTray);
			String s2 = getText(PWAShowsPage.objFirstAssetEpisodeFirstRail);
			String s3 = "S" + s2;
			System.out.println(s1);
			String[] t = s1.split("\\ ");
			String split_one = t[1];
			if (split_one.contentEquals(s3)) {

				extent.extentLoggerPass("",
						"Episode rail contents match with respect to the season dropdown option on the the Multi season show Episode consumption page");
				logger.info(
						"Episode rail contents match with respect to the season dropdown option on the the Multi season show Episode consumption page");
			} else {
				extent.extentLoggerFail("",
						"Episode rail contents mismatch with respect to the season dropdown option on the the Multi season show Episode consumption page");
				logger.error(
						"Episode rail contents mismatch with respect to the season dropdown option on the the Multi season show Episode consumption page");
			}

		}
	}

	public void PWAVerifyRemoveAutoplayContent(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-7315 : Banner slider - remove the autoplay of content");
		logger.info("PWA2-7315 : Banner slider - remove the autoplay of content");
		mandatoryRegistrationPopUp(userType);
		reloadHome();
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objTabName("News"), "News Tab");
		JSClick(PWAHomePage.objTabName("News"), "News Tab");
		waitTime(5000);
		List<WebElement> carouselDots = findElements(PWAHomePage.objPromotionalBannerCarouselDots);
		for (int dot = 0; dot < carouselDots.size(); dot++) {
			if (verifyElementDisplayed(PWANewsPage.objAutoplayCarousel)) {
				extent.extentLoggerFail("", "News content is auto-played in banner slider.");
				logger.error("News content is auto-played in banner slider.");
			} else {
				extent.extentLoggerPass("", "Auto-play of content is not happening in banner slider.");
				logger.info("Auto-play of content is not happening in banner slider.");
			}
		}
	}

	public void PWAVerifyEpisodePositionCountInterchange(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-7467 : On-air show episode dropdown - interchange the position of episode count.");
		logger.info("PWA2-7467 : On-air show episode dropdown - interchange the position of episode count.");
		mandatoryRegistrationPopUp(userType);
		reloadHome();
		waitTime(5000);
		String keyword = "Kumkum Bhagya";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows tab");
		click(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(4000);
		verifyElementPresent(PWAShowsPage.objEpisodesSetTray, "Episodes DropDown");
		String title = getElementPropertyToString("innerText", PWAShowsPage.objEpisodesSetTray, "");
		System.out.println(title);
		String[] t = title.split("\\ ");
		String split_one = t[1];
		int position_1 = Integer.parseInt(split_one);
		String split_second = t[3];
		int position_2 = Integer.parseInt(split_second);
		if (position_1 < position_2) {
			extent.extentLoggerPass("", "Smaller number is shown first and then larger number.");
			logger.info("smaller number is shown first and then larger number.");
		} else {
			extent.extentLoggerFail("", "Smaller number fails to displayed first and then larger number.");
			logger.error("smaller number is shown first and then larger number.");
		}
	}

	public void PWAVerifyEpisodeRange(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"PWA2-3604 : Episode numbers displayed in the drop down is greater than the episodes of the show in show detail page.");
			logger.info(
					"PWA2-3604 : Episode numbers displayed in the drop down is greater than the episodes of the show in show detail page");
			mandatoryRegistrationPopUp(userType);
			reloadHome();
			waitTime(5000);
			String keyword = "Kumkum Bhagya";
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
			waitTime(2000);
			click(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows tab");
			click(PWASearchPage.objSearchedResult(keyword), "Search Result");
			waitTime(4000);
			verifyElementPresent(PWAShowsPage.objEpisodesSetTray, "Episodes DropDown");
			String title = getElementPropertyToString("innerText", PWAShowsPage.objEpisodesSetTray, "");
			System.out.println(title);
			String[] t = title.split("\\ ");
			String split_one = t[1];
			int position_1 = Integer.parseInt(split_one);
			String split_second = t[3];
			int position_2 = Integer.parseInt(split_second);
			PartialSwipe("UP", 1);
			String Episode_First = getText(PWAShowsPage.objFirstAssetEpisodeFirstRail);
			String Episode_Last = getText(PWAShowsPage.objLastAssetEpisodeFirstRail);
			System.out.println(Episode_First + Episode_Last);

			if (Episode_Last.contentEquals("E" + split_one) && Episode_First.contentEquals("E" + split_second)) {
				extent.extentLoggerPass("",
						"Episode number displayed in drop down and the episode available in the show are matching");
				logger.info("Episode number displayed in drop down and the episode available in the show are matching");
			} else {
				extent.extentLoggerFail("",
						"Episode numbers displayed in the drop down is greater than the episodes of the show in show detail page.");
				logger.error(
						"Episode numbers displayed in the drop down is greater than the episodes of the show in show detail page.");
			}

		}
	}

	public void PWAVerifyH1TagsOriginalsSeasonShow(String userType) throws Exception {
		extent.HeaderChildNode(
				"PWA2-6663 : [SEO] H1 tag text not as per the SEO for Zee5 Originals Show Season page [Refer Screenshot].");
		logger.info(
				"PWA2-6663 : [SEO] H1 tag text not as per the SEO for Zee5 Originals Show Season page [Refer Screenshot].");
		reloadHome();
		mandatoryRegistrationPopUp(userType);
		waitTime(5000);
		String keyword = "Poison";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows tab");
		click(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(4000);
		click(PWAPlayerPage.objSeeAll, "See all");
		waitTime(5000);
		try {
			String title = getElementPropertyToString("innerText", PWAZee5OriginalPage.objSeasonEpisodesTitle, "");
			extent.extentLogger("", "Content title from UI: " + title);
			logger.info("Content title from UI: " + title);
			System.out.println("Content title from UI: ");
			String urlLink = getDriver().getCurrentUrl();
			checkTagWithTextInSource(urlLink, "h1", title);
		} catch (Exception e) {
			extent.extentLoggerFail("", "Failed to fetch Content title from UI");
			logger.error("Failed to fetch Content title from UI");
		}

		waitTime(5000);
	}

	public void PWAVerifyH1Tags(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("PWA2-7598 : H1 tag in Landing Page Source");
			logger.info("PWA2-7598 : H1 tag in Landing Page Source");
			reloadHome();
			mandatoryRegistrationPopUp(userType);
			String[] tabs = { "Premium", "TV Shows", "Movies", "Web Series", "Kids" };
			String[] expectedTagText = { "ZEE5 Premium", "TV Shows", "Movies", "Original Web Series & Movies",
					"Kids Shows and Movies" };
			for (int i = 0; i < tabs.length; i++) {
				extent.extentLogger("", "----------- H1 tag in " + tabs[i] + " Page Source ------------");
				System.out.println("----------- H1 tag in " + tabs[i] + " Page Source ------------");
				verifyElementPresent(PWAHomePage.objTabName("Home"), "Home Tab");
				System.out.println("home tab");
				navigateToAnyScreen(tabs[i]);
				String urlLink = getWebDriver().getCurrentUrl();
				checkTagWithTextInSource(urlLink, "h1", expectedTagText[i]);
			}
		}
	}

	@SuppressWarnings({ "unused", "resource" })
	public void checkTagWithTextInSource(String urlLink, String tag, String text) throws Exception {
		boolean foundOpeningTag = false, foundClosingTag = false, foundText = false;
		String path = System.getProperty("user.dir") + "\\webpagesource.txt";
		URL url = new URL(urlLink);
		System.out.println("url " + url);
		try (BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
				BufferedWriter writer = new BufferedWriter(new FileWriter(path));) {
			String line;
			while ((line = reader.readLine()) != null) {
				writer.write(line);
			}
		}
		BufferedReader br = new BufferedReader(new FileReader(path));
		String line = "", doc = "", temp = "";
		while ((line = br.readLine()) != null) {
			doc = doc + line;
			System.out.println(doc);
		}
		if (doc.contains("<" + tag)) {
			extent.extentLogger("", "Source contains Opening tag for " + tag);
			logger.info("Source contains Opening tag for " + tag);
			doc = doc.split("<" + tag)[1];
			doc = "<" + tag + doc;
			if (doc.contains("</" + tag + ">")) {
				extent.extentLogger("", "Source contains Closing tag for " + tag);
				logger.info("Source contains Closing tag for " + tag);
				doc = doc.split("</" + tag + ">")[0];
				doc = doc + "</" + tag + ">";
				temp = doc.split("<" + tag)[1].split(">")[1].split("</" + tag)[0];
				logger.info("Text displayed in source : " + temp);
				extent.extentLogger("", "Text displayed in source : " + temp);
				logger.info("Expected text between the tags : " + text);
				extent.extentLogger("", "Expected text between the tags : " + text);
				temp = replacingSpecialCharsInAString(temp, "&amp;", "&");
				if (temp.equals(text)) {
					extent.extentLoggerPass("", "Source contains text between the tags as expected");
					logger.info("Source contains text between the tags as expected");
				} else {
					extent.extentLoggerFail("", "Source contains incorrect text between the tags");
					logger.error("Source contains incorrect text between the tags");
				}
			} else {
				extent.extentLoggerFail("", "Source does not contain Closing tag for " + tag);
				logger.error("Source does not contain Closing tag for " + tag);
			}
		} else {
			extent.extentLoggerFail("", "Source does not contain Opening tag for " + tag);
			logger.error("Source does not contain Opening tag for " + tag);
		}

	}

	public String replacingSpecialCharsInAString(String text, String splitText, String splitTextToBeEntered)
			throws Exception {
		String[] textArray;
		System.out.println(text);
		textArray = text.split(splitText);
		System.out.println("String Array: " + Arrays.toString(textArray));
		String res = textArray[0];
		for (int i = 1; i < textArray.length; i++) {
			res = res.concat(splitTextToBeEntered);
			res = res.concat(textArray[i]);
		}
		System.out.println(res);
		return res;
	}

	public void navigateToHome() {
		String url = getParameterFromXML("url");
		getDriver().get(url);
		waitTime(5000);
	}

	public void PWAVerifyH1TagsWithText(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"PWA2-7597 : H1 tag in Zee5Originals Show Trailer and Live TV Channel Playback pages");
			logger.info("PWA2-7597 : H1 tag in Zee5Originals Show Trailer and Live TV Channel Playback pages");
			extent.extentLogger("", "----- Verification of H1 tag in Zee5Originals Show Trailer page ------");
			System.out.println("Verification of H1 tag in Zee5Originals Show Trailer page");
			reloadHome();
			mandatoryRegistrationPopUp(userType);
			String keyword = "Poison";
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
			waitTime(2000);
			click(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows tab");
			click(PWASearchPage.objSearchedResult(keyword), "Search Result");
			waitTime(4000);
			click(PWAPlayerPage.objWatchPromo, "Watch Promo icon");
			waitTime(2000);
			try {
				String title = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleInPlayerPage, "");
				extent.extentLogger("", "Content title from UI: " + title);
				logger.info("Content title from UI: " + title);
				System.out.println("Content title from UI: ");
				String urlLink = getDriver().getCurrentUrl();
				checkTagWithTextInSource(urlLink, "h1", title);
			} catch (Exception e) {
				extent.extentLoggerFail("", "Failed to fetch Content title from UI");
				logger.error("Failed to fetch Content title from UI");
			}

			waitTime(5000);
			extent.extentLogger("", "----- Verification of H1 tag in Live TV Channel Playback page ------");
			reloadHome();
			mandatoryRegistrationPopUp(userType);
			NavigateToAnyScreen("Live TV");
			click(PWALandingPages.objFirstAssetInTrayIndex("FREE Channels"), "First card under Free Channels");
			waitTime(5000);
			try {
				String title = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleInPlayerPage, "");
				extent.extentLogger("", "Content title from UI: " + title);
				logger.info("Content title from UI: " + title);
				String urlLink = getDriver().getCurrentUrl();
				checkTagWithTextInSource(urlLink, "h1", title);
			} catch (Exception e) {
				extent.extentLoggerFail("", "Failed to fetch Content title from UI");
				logger.error("Failed to fetch Content title from UI");
			}

		}
	}

	public boolean NavigateToAnyScreen(String screen) throws Exception {
		for (int i = 0; i < 3; i++) {
			try {
				if (verifyElementPresent(PWAHomePage.objTabName(screen), "Tab : " + screen))
					JSClick(PWAHomePage.objTabName(screen), screen + " Tab");
				return true;
			} catch (Exception e) {
				try {
					swipeOnTab("Left");
					if (verifyElementPresent(PWAHomePage.objTabName(screen), "Tab : " + screen)) {
						JSClick(PWAHomePage.objTabName(screen), screen + " Tab");
						waitTime(5000);
						return true;
					}
				} catch (Exception exc) {
					swipeOnTab("Right");
				}
			}
		}
		return false;
	}

	public void pwaDRMmessageforpremiumcontent(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("(PWA2-7516) : DRM message is displayed on the Player ");
			logger.info("(PWA2-7516) : DRM message is displayed on the Player ");
			reloadHome();
			// navigateToAnyScreen("Movies");
			verifyElementPresent(PWAHomePage.objTabName("Movies"), "Movies Tab");
			JSClick(PWAHomePage.objTabName("Movies"), "Movies Tab");
			// getDriver().findElementByXPath("(//*[@text='Movies'])[1]").click();

			click(PWAHamburgerMenuPage.objpremiumcard, "Premium card");
			waitTime(50000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objdrmmessageonplayer, "DRM message")) {
				logger.info("DRM message displayed on player screen post playing premium contents");
				extent.extentLoggerFail(" ", "DRM message displayed on player screen post playing premium contents");
			} else {
				logger.info(
						"Premium content should be played properly on the Safari and Chrome browsers, expected behaviour");
				extent.extentLoggerPass(" ",
						"Premium content should be played properly on the Safari and Chrome browsers, expected behaviour");

			}
		}

	}

	public void pwaEpisodedropdownrangeandcontentrangevalidation(String userType) throws Exception {

		extent.HeaderChildNode(
				"PWA2-7491 : Incorrect Episode Dropdown range displayed with respect to the content rails for the On-Air Show ");
		logger.info(
				"PWA2-7491 : Incorrect Episode Dropdown range displayed with respect to the content rails for the On-Air Show ");
		mandatoryRegistrationPopUp(userType);
		reloadHome();
		String showcontent = "Gattimela";
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, showcontent, "Search edit");
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows Tab");
		waitTime(2000);
		click(PWASearchPage.objSearchedResult(showcontent), "Searched content");
		waitTime(4000);
		PartialSwipe("UP", 1);
		waitTime(1000);
		PartialSwipe("UP", 1);
		String episodeDropdown = getElementPropertyToString("innerText", PWAShowsPage.objShowDetailsEpisodeDropdownText,
				"Episode Dropdown");
		logger.info("Episode dropdown displayed in Consumptions page : " + episodeDropdown);
		extent.extentLogger("", "Episode dropdown displayed in Consumptions page : " + episodeDropdown);
		String startingEpisode = episodeDropdown.split("Episodes")[1].trim().split("-")[0].trim();
		String endingEpisode = episodeDropdown.split("-")[1].trim();
		int startingEpisodeInt = 0, endingEpisodeInt = 0;
		startingEpisodeInt = Integer.parseInt(startingEpisode);
		System.out.println(startingEpisodeInt);
		endingEpisodeInt = Integer.parseInt(endingEpisode);
		System.out.println(endingEpisodeInt);
		String endingEpisodeInt1 = "E" + endingEpisodeInt;
		System.out.println(endingEpisodeInt1);
		checkElementDisplayed(PWAHamburgerMenuPage.objepisodenumberbelowthecard, "Episode number ");
		String a = getText(PWAHamburgerMenuPage.objepisodenumberbelowthecard);
		if (a.contains(endingEpisodeInt1)) {
			logger.info("Episode larger number is displayed first as expected");
			extent.extentLoggerPass("", "Episode larger number is displayed first as expected");
		} else {
			logger.error("Episode larger number is not displayed first");
			extent.extentLoggerFail("", "Episode larger number is not displayed first");
		}

	}

	public void pwaBlankAudioTrack(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"PWA2-5751 : Blank Audio Track option is displayed for the all Live News channel. [Refer Screenshot]");
			logger.info(
					"PWA2-5751 : Blank Audio Track option is displayed for the all Live News channel. [Refer Screenshot]");
			reloadHome();
			String showcontent = "Asianet News";
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, showcontent, "Search edit");
			;
			waitTime(2000);
			click(PWASearchPage.objSearchedResult(showcontent), "Searched content");
			waitTime(10000);
			click(PWAPlayerPage.objPlayerSettings, "Settings icon");
			// waitTime(5000);
			if (verifyElementDisplayed(PWAPlayerPage.objPlayerAudioTrack)) {
				if (verifyElementPresent(PWAPlayerPage.objPlayerAudioTracksAvailable,
						"On Tapping Audio Track, Blank Audio track options"))
					logger.info("The audio track is available for the all Live News channel..");
				extent.extentLoggerFail(" ", "The audio track is available for the all Live News channel..");

			} else {
				logger.info("Audio Track option is not displayed for the all Live News channel.");
				extent.extentLoggerPass(" ", "Audio Track option is not displayed for the all Live News channel.");

			}

		}
	}

	public void SetParentalPopup(By loc, String password, String button) throws Exception {

		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "parental pincode");
		waitTime(3000);

		// verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl,
		// "parental pincode");
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password field");
		String Password = getParameterFromXML(password);
		type(PWALoginPage.objPasswordField, Password, "Password");
		hideKeyboard();
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
		WatchMorePopup();
		waitTime(3000);
		click(PWAHamburgerMenuPage.objRestrict13PlusContent, "Restrict 13+ content");
		waitTime(3000);
		verifyElementPresentAndClick(loc, button);
		waitTime(3000);
		if (verifyElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin1)) {
			{
				type(PWAHamburgerMenuPage.objParentalLockPin1, "1", "setParentalLockPin");
			}
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin2)) {
				type(PWAHamburgerMenuPage.objParentalLockPin2, "1", "setParentalLockPin");
			}
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin3)) {
				type(PWAHamburgerMenuPage.objParentalLockPin3, "1", "setParentalLockPin");
			}
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin4)) {
				type(PWAHamburgerMenuPage.objParentalLockPin4, "1", "setParentalLockPin");
			}
		}
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Continue button");

	}

	public boolean waitForTrailerPlaybackToComplete(String playerType) throws Exception {
		boolean trailerDisplayed = false;
		boolean playerDisplayed = false;
		int confirmCount = 0;
		waitTime(5000);
		main: for (int trial = 0; trial < 200; trial++) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage)) {
				trailerDisplayed = true;
				if (trial == 5) {
					logger.info("Trailer playback in progress");
					extent.extentLogger("Trailer playback in progress", "Trailer playback in progress");
				}
				if (Math.floorMod(trial, 40) == 0)
					System.out.println("Trailer playback in progress");
				Thread.sleep(1000);
			} else {
				try {
					getDriver().findElement(PWAPlayerPage.objPlayerSettings);
					playerDisplayed = true;
					Thread.sleep(1000);
					confirmCount++;
					// System.out.println(confirmCount);
					if (confirmCount == 2) {
						if (trailerDisplayed == false) {
							logger.info("Trailer did not play");
							extent.extentLogger("", "Trailer did not play");
							return false;
						} else {
							logger.info("Trailer play complete");
							extent.extentLogger("", "Trailer play complete");
							return true;
						}
					}
				} catch (Exception e1) {
					waitTime(2000);
				}
			}
		}
		if (playerDisplayed == false && trailerDisplayed == false) {
			logger.info("Trailer play failure");
			extent.extentLogger("", "Trailer play failure");
		}
		return false;
	}

//	Kartheek

	public void Haveacodeinputfieldvalidation(String userType) throws Exception {
		reloadHome();
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode(
					"\"Have a code?\" input field fails to display again when user clicks on \"Change\" CTA (PWA2-7698");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "'Have A Code?' field");
			waitTime(3000);

			click(PWASubscriptionPages.objTextForHaveACode, "Text For Have A Code");
			type(PWASubscriptionPages.objTextForHaveACode, "NRTDC1" + "\n", "'Have A Code?' field");
//				hideKeyboard();

			waitTime(5000);
//			click(PWASubscriptionPages.objApplyBtn, "Apply Button");

			verifyElementPresentAndClick(PWASubscriptionPages.objChangeButtonHaveAcode, "change Button");

			if (verifyElementPresent(PWASubscriptionPages.objTextForHaveACode, "'Have A Code?' field")) {
				logger.info("It should open a promo code field again with a clear cell., expected behaviour");
				extent.extentLoggerPass(" ",
						"It should open a promo code field again with a clear cell., expected behaviour");
			} else {
				logger.info("It responds to the \\\"Have a code?\\\" link again.");
				extent.extentLoggerFail(" ", "It responds to the \\\"Have a code?\\\" link again.");
			}

		}

	}

	public void howItWorksLinkPaddingShouldBeDone(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode(
				"PWA2-8711 : [Combo_Offer] [mpwa] \"How it works?\" link padding fails in the ZeePlex landing page. [Refer SS]\r\n"
						+ "");
		navigatetoAnyScreen("ZEEPLEX");
		waitTime(4000);

		String a = findElement(PWAHomePage.objzeeplexHowitWorks).getText();
		if (a.equalsIgnoreCase("How it Works ?")) {
			logger.info("How it work link is displayed");
			extent.extentLoggerPass("", "How it work link is displayed");
		} else {
			logger.info("How it work link is not displayed");
			extent.extentLoggerFail("", "How it work link is not displayed");
		}

	}

	public void PWAIframe() throws Exception {
		checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
		// ScrollToTheElementWEB(PWASubscriptionPages.objPaymentHighlighted);
		scrollToTopOfPageWEB();
		waitTime(5000);
		WebElement iframeElement = null;
		if (getPlatform().equalsIgnoreCase("Android")) {
			iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
			Thread.sleep(15000);
			getWebDriver().switchTo().frame(iframeElement);
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
//			scrollUp();
//			scrollUp();
//			scrollUp();
			Thread.sleep(15000);
			getWebDriver().switchTo().frame(iframeElement);
		}
	}

	public void discountCalculatedPriceShouldNotBeMismatchedOnThePaymentGatewayPage(String userType) throws Exception {
		reloadHome();
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(" Discount Calculted price on the payment gateway validation (PWA2-7754)");

			if (!checkElementDisplayed(PWALoginPage.objLoginBtn, "Login Button")) {
				verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
			}
			waitTime(3000);
			click(PWALoginPage.objLoginBtn, "Login button");
			waitTime(3000);
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "sam@s.com", "Email Field");
			waitTime(3000);
			hideKeyboard();
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			waitTime(3000);
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			hideKeyboard();
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(20000);
			verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
			click(PWAHamburgerMenuPage.objDownArrow("My Account"), "Expander button");

//			verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
//			JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			JSClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			checkElementDisplayed(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue button");
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue button");
			verifyElementPresent(PWAHamburgerMenuPage.objamtinpaymentpage, "Amount");
			String text = getText(PWAHamburgerMenuPage.objamtinpaymentpage);
			System.out.println(text + ".00");
			String text1 = "Rs" + text + ".00";
			// System.out.println(text);
			extent.extentLogger("", "Amount in payment page : " + text1);
			String contentURL = getDriver().getCurrentUrl();
			System.out.println(contentURL);
			waitTime(5000);
			PWAIframe();
			PartialSwipe("UP", 1);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking, "Net banking");
			waitTime(3000);

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("Airtel Payments Bank"),
					"Payment option");
			waitTime(3000);
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objproceedtopayindex(1), "Procced to pay");
			click(PWAHamburgerMenuPage.objproceedtopayindex(1), "Procced to pay");
			waitTime(3000);
			waitForElement(PWAHamburgerMenuPage.objtotalamount2, 20, "Total amount");
			String totalamt2 = getText(PWAHamburgerMenuPage.objtotalamount2);
			System.out.println(totalamt2);
			extent.extentLogger("", "pack Amount in payment Process page : " + totalamt2);
			waitTime(5000);
			getDriver().get(contentURL);
			waitTime(10000);
			waitForElement(PWASubscriptionPages.objZeeLogo, 20, "Zee5 Logo");
			if (text1 != (totalamt2)) {
				logger.info("correct Amount is displayed : " + text1);
				extent.extentLogger("", "correct Amount is displayed : " + text1);
			} else {
				logger.info("Incorrect Differential Amount is displayed : " + text1);
				extent.extentLoggerFail("", "Incorrect Differential Amount is displayed :" + text1);
			}
		}
//			Back(1);
//			verifyElementPresentAndClick(PWASubscriptionPages.objZeeLogo, "ZeeLogo");
		if (userType.equals("Guest")) {
			navigateToHome();

			logout();
		}
	}

	public void resetLanguageFeature(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode(
				"PWA2-8573 : language Settings are reset to default and \"Changes saved successfully\" toast message is displayed Even if user taps blank/empty spaces next to \"Reset settings to default\" option on More settings screen.");
		verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMoreSettingInHamburger, "More Setting");
		waitTime(3000);

		click(PWAHamburgerMenuPage.objBlankSpace, "Blank Space");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objToastMessage, "Toast Message")) {

			logger.info("Toast message is displayed");
			extent.extentLoggerFail("", "Toast message is displayed");
		} else {
			logger.info("Toast message is not displayed,expected behaviour");
			extent.extentLoggerPass("", "Toast message is not displayed,expected behaviour");
		}
	}

	public void userShouldNavigateToPaymentPagePostSelectingPlan(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode(
				"PWA2-8906 : language Settings are reset to default and \"Changes saved successfully\" toast message is displayed Even if user taps blank/empty spaces next to \"Reset settings to default\" option on More settings screen.");

		if (userType.equalsIgnoreCase("Guest")) {
			if (!checkElementDisplayed(PWALoginPage.objLoginBtn, "Login Button")) {
				verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
			}
			waitTime(3000);
			click(PWALoginPage.objLoginBtn, "Login button");
			waitTime(3000);
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "luckyigscon0074@gmail.com", "Email Field");
			waitTime(3000);
			hideKeyboard();
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			waitTime(3000);
			type(PWALoginPage.objPasswordField, "vasilucky@123", "Password field");
			hideKeyboard();
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(20000);
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue Button");
			click(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue Button");
			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info(
						"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
			} else {
				logger.info("Account info screen is displayed");
				extent.extentLoggerFail(" ", "Account info screen is displayed");

			}

			navigateToHome();
			waitTime(5000);
			logout();
		}
	}

	public void paymentPageShouldLoadWhenUserNavigateBackFromAmazonPaymentPage(String userType) throws Exception {
		reloadHome();
		extent.HeaderChildNode("PWA2-8907 : Payment page is not loading after navigating back from amazon pay Login");

		if (userType.equalsIgnoreCase("Guest")) {
			if (!checkElementDisplayed(PWALoginPage.objLoginBtn, "Login Button")) {
				verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
			}
			waitTime(3000);
			click(PWALoginPage.objLoginBtn, "Login button");
			waitTime(3000);
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "luckyigscon0074@gmail.com", "Email Field");
			waitTime(3000);
			hideKeyboard();
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			waitTime(3000);
			type(PWALoginPage.objPasswordField, "vasilucky@123", "Password field");
			hideKeyboard();
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(20000);
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue Button");
			click(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue Button");
			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info(
						"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
			} else {
				logger.info("Account info screen is displayed");
				extent.extentLoggerFail(" ", "Account info screen is displayed");

			}
			String contentURL = getDriver().getCurrentUrl();
			System.out.println(contentURL);
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			waitTime(4000);
			verifyElementPresentAndClick(PWASubscriptionPages.objAmazonPay, "Amazon Pay");
			click(PWASubscriptionPages.objAmazonPayProceedToPay, "Amazon Pay Proceed To Pay");
			waitForElement(PWASubscriptionPages.objAmazonLoginPage, 20, "Amazon Login Page");

			verifyElementPresent(PWASubscriptionPages.objAmazonLoginPage, "Amazon Login Page");
			getDriver().get(contentURL);
			verifyElementExist(PWASubscriptionPages.objLoadingPaymentOptions, "Loading Payment Options...");
			String Loading = getText(PWASubscriptionPages.objLoadingPaymentOptions);
			System.out.println(Loading);
			extent.extentLogger("", "Loading text: " + Loading);
			if (Loading.contains("Loading Payment Options...")) {
				logger.info("Payment page should load when user navigate back from amazon payment page");
				extent.extentLoggerPass(" ",
						"Payment page should load when user navigate back from amazon payment page");
			} else {
				logger.info("Payment page should not load when user navigate back from amazon payment page");
				extent.extentLoggerFail(" ",
						"Payment page should not load when user navigate back from amazon payment page");

			}

			navigateToHome();
			waitTime(5000);
			logout();
		}
	}

//	VI Integration

//	public void VILogin() throws Exception {
//		HeaderChildNode("Login with credentials");
//		type(PWAVIAppPage.objMobileNoField, "","Mobile Number Field");
//		waitTime(30000);
//		click(PWAVIAppPage.objGOIcon, "GO Icon");
//	}

	public void NavigationFromVIAPPToZee5ConsumptionScreen() throws Exception {
		HeaderChildNode("Click on Zee5 content");
		waitTime(6000);
		getDriver().context("WEBVIEW_1");
		click(PWAVIAppPage.objFirstZee5Content, "First Content");
	}

	public void ValidateBuySubscription() throws Exception {
		HeaderChildNode("Validate Buy Subscription");
		click(PWAHamburgerMenuPage.objMyAccount, "My Account");
		click(PWAHamburgerMenuPage.objMySubscription, "My Subscription");

	}

	public void Zee5ContentsOnViApp() throws Exception {
		HeaderChildNode("P1 - zee 5 contents on Vi app");
		verifyElementDisplayed(PWAVIAppPage.objFirstZee5Content);
	}

	public void VerifyComplimentaryPackIsAttachedForClassicUserViaVIJourney() throws Exception {
		HeaderChildNode("Verify Complimentary Pack Is Attached For Classic User Via VI Journey");
		verifyElementPresentAndClick(PWAVIAppPage.objFirstZee5Content, "Zee5 Content in VI App");
		waitTime(6000);
		getDriver().context("WEBVIEW_1");
		verifyElementPresentAndClick(PWAVIAppPage.objHamburgerMenu, "Hamburger Menu");
		verifyElementPresentAndClick(PWAVIAppPage.objMyAccount, "My Account");
		verifyElementPresentAndClick(PWAVIAppPage.objMySubscription, "My Subscription");
		verifyElementPresent(PWAVIAppPage.objViMTVVIPPackTitle, "VIMTV VIP Pack Page");
		verifyElementPresent(PWAVIAppPage.objFor30DaysTxt, "For 30 Day's text");
		verifyElementPresent(PWAVIAppPage.objDateOfPurchaseTxt, "Date of purchase text");
		verifyElementPresent(PWAVIAppPage.objAutoRenewsOnTxt, "Auto Renews On");
		String status = getText(PWAVIAppPage.objStatusValue);
		if (status.equals("Active")) {
			extent.extentLoggerPass("", "Status of the pack is active");
			logger.error("Status of the pack is active");
		} else {
			extent.extentLoggerFail("", "Status of the pack is " + status);
			logger.error("Status of the pack is " + status);
		}

		String PaymentModeValue = getText(PWAVIAppPage.objPaymentModeValue);
		if (PaymentModeValue.equals("CRM")) {
			extent.extentLoggerPass("", "Payment Mode Value is CRM");
			logger.error("Payment Mode Value is CRM");
		} else {
			extent.extentLoggerFail("", "Payment Mode Value is " + PaymentModeValue);
			logger.error("Payment Mode Value is " + PaymentModeValue);
		}

		String AutoRenewal = getText(PWAVIAppPage.objAutoRenewalValue);
		if (AutoRenewal.equals("Yes")) {
			extent.extentLoggerPass("", "AutoRenewal value is Yes");
			logger.error("AutoRenewal value is Yes");
		} else {
			extent.extentLoggerFail("", "AutoRenewal value is " + AutoRenewal);
			logger.error("AutoRenewal value is " + AutoRenewal);
		}
	}

	public void VerifyAutoRenewableAndRenewedDetailsOnMySubscriptionPage() throws Exception {
		HeaderChildNode("Verify Complimentary Pack Is Attached For Classic User Via VI Journey");
		verifyElementPresentAndClick(PWAVIAppPage.objFirstZee5Content, "Zee5 Content in VI App");
		waitTime(6000);
		getDriver().context("WEBVIEW_1");
		verifyElementPresentAndClick(PWAVIAppPage.objHamburgerMenu, "Hamburger Menu");
		verifyElementPresentAndClick(PWAVIAppPage.objMyAccount, "My Account");
		verifyElementPresentAndClick(PWAVIAppPage.objMySubscription, "My Subscription");
		verifyElementPresent(PWAVIAppPage.objViMTVVIPPackTitle, "VIMTV VIP Pack Page");
		verifyElementPresent(PWAVIAppPage.objAutoRenewsOnTxt, "Auto Renews On");
		String status = getText(PWAVIAppPage.objStatusValue);
		if (status.equals("Active")) {
			extent.extentLoggerPass("", "Status of the pack is active");
			logger.error("Status of the pack is active");
		} else {
			extent.extentLoggerFail("", "Status of the pack is " + status);
			logger.error("Status of the pack is " + status);
		}

		String PaymentModeValue = getText(PWAVIAppPage.objPaymentModeValue);
		if (PaymentModeValue.equals("CRM")) {
			extent.extentLoggerPass("", "Payment Mode Value is CRM");
			logger.error("Payment Mode Value is CRM");
		} else {
			extent.extentLoggerFail("", "Payment Mode Value is " + PaymentModeValue);
			logger.error("Payment Mode Value is " + PaymentModeValue);
		}

		String AutoRenewal = getText(PWAVIAppPage.objAutoRenewalValue);
		if (AutoRenewal.equals("Yes")) {
			extent.extentLoggerPass("", "AutoRenewal value is Yes");
			logger.error("AutoRenewal value is Yes");
		} else {
			extent.extentLoggerFail("", "AutoRenewal value is " + AutoRenewal);
			logger.error("AutoRenewal value is " + AutoRenewal);
		}
	}

	public void VerifyUserIsRedirectedBackToViAppPostTappingBackButtonInZee5ConsumptionScreen() throws Exception {
		HeaderChildNode("User Is Redirected Back To Vi App Post Tapping Back Button In Zee5 Consumption Screen");
		verifyElementPresentAndClick(PWAVIAppPage.objFirstZee5Content, "Zee5 Content in VI App");
		waitTime(6000);
		getDriver().context("WEBVIEW_1");
		Back(1);
		verifyElementDisplayed(PWAVIAppPage.objFirstZee5Content);
	}

	public void VerifyUserIsRedirectedBackToViAppPostTappingAnyOtherContentInZee5ConsumptionScreen() throws Exception {
		HeaderChildNode("User Is Redirected Back To Vi App Post Tapping Any Other Content In Zee5 ConsumptionScreen");
		verifyElementPresentAndClick(PWAVIAppPage.objFirstZee5Content, "Zee5 Content in VI App");
		waitTime(6000);
		getDriver().context("WEBVIEW_1");
		click(PWAVIAppPage.objOtherContentOnConsumption, "Content on zee5 consumption screen");
		verifyElementDisplayed(PWAVIAppPage.objFirstZee5Content);
	}

	public void VerifyAuthenticatedevice() {
		HeaderChildNode("");
	}

	public void authenticationFunctionality1(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("PWA2-9106 Authenticate device revamp - Not Applicable for Guest");
		} else {
			extent.HeaderChildNode("PWA2-9106 Authenticate device revamp");
			navigateToHome();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresent(PWAHamburgerMenuPage.objAuthenticationOption, "CTA to Authenticate Device");
			String ctaText = getElementPropertyToString("innerText", PWAHamburgerMenuPage.objAuthenticationOption,
					"CTA Text");
			if (ctaText.equals("Activate Device")) {
				logger.info("Expected CTA text displayed " + ctaText);
				extent.extentLoggerPass("", "Expected CTA text displayed " + ctaText);
			} else {
				logger.info("'" + ctaText + "' CTA text is displayed instead of 'Activate Device'");
				extent.extentLoggerFail("", "'" + ctaText + "' CTA text is displayed instead of 'Activate Device'");
			}
			click(PWAHamburgerMenuPage.objAuthenticationOption, "CTA");
			waitTime(3000);
			String url = getDriver().getCurrentUrl();
			String[] urlParts = url.split("/");
			String urlEnd = urlParts[urlParts.length - 1];
			if (urlEnd.equals("device")) {
				logger.info("Successfully navigated to Activation page");
				extent.extentLogger("", "Successfully navigated to Activation page");
				// Verify Page Heading
				String pageHeading = getElementPropertyToString("innerText", PWAHamburgerMenuPage.objAuthenticationText,
						"Page Heading");
				if (pageHeading.equals("Activate ZEE5 on your TV")) {
					logger.info("Expected Page Heading displayed '" + pageHeading + "'");
					extent.extentLoggerPass("", "Expected Page Heading displayed '" + pageHeading + "'");
				} else {
					logger.info(
							"'" + pageHeading + "' Page Heading is displayed instead of 'Activate ZEE5 on your TV'");
					extent.extentLoggerFail("",
							"'" + pageHeading + "' Page Heading is displayed instead of 'Activate ZEE5 on your TV'");
				}
				// Verify Page Description
				String pageDesc = getElementPropertyToString("innerText", PWAHamburgerMenuPage.objAuthenticationTDesc,
						"Page Desc");
				if (pageDesc.equals("Enter the Activation code displayed on your TV screen")) {
					logger.info("Expected Page Description displayed '" + pageDesc + "'");
					extent.extentLoggerPass("", "Expected Page Description displayed '" + pageDesc + "'");
				} else {
					logger.info("'" + pageDesc
							+ "' Page Description is displayed instead of 'Enter the Activation code displayed on your TV screen'");
					extent.extentLoggerFail("", "'" + pageDesc
							+ "' Page Description is displayed instead of 'Enter the Activation code displayed on your TV screen'");
				}
				// Verify Activate Now Button Disabled
				verifyElementPresent(PWAHamburgerMenuPage.objActivateNowButtonDisabled, "Disabled Button");
				// Verify Activate Now Button
				String button = getElementPropertyToString("innerText",
						PWAHamburgerMenuPage.objActivateNowButtonDisabled, "Button Text");
				if (button.equals("Activate Now")) {
					logger.info("Expected button displayed '" + button + "'");
					extent.extentLoggerPass("", "Expected button displayed '" + button + "'");
				} else {
					logger.info("'" + button + "' button is displayed instead of 'Activate Now' button");
					extent.extentLoggerFail("",
							"'" + button + "' button is displayed instead of 'Activate Now' button");
				}
				// Add less than 6 to verify button disabled state
				for (int i = 1; i <= 5; i++) {
					type(PWAHamburgerMenuPage.objAuthenticateCode(String.valueOf(i)), String.valueOf(i),
							"Authentication code " + i);
					verifyElementPresent(PWAHamburgerMenuPage.objActivateNowButtonDisabled, "Disabled Button");
				}
				// Add 6th code to verify enabled button state
				type(PWAHamburgerMenuPage.objAuthenticateCode("6"), "6", "Authentication code 6");
				verifyElementPresent(PWAHamburgerMenuPage.objActivateNowButtonEnabled, "Enabled Button");
				// Delete one code to verify disabled state
				getDriver().findElement(PWAHamburgerMenuPage.objAuthenticateCode("6")).clear();
				verifyElementPresent(PWAHamburgerMenuPage.objActivateNowButtonDisabled,
						"Disabled Button after clearing code");
				// Click on Activate
				type(PWAHamburgerMenuPage.objAuthenticateCode("6"), "6", "Authentication code 6");
				click(PWAHamburgerMenuPage.objActivateNowButtonEnabled, "Enabled Button");
				// Error message verification
				verifyElementPresent(PWAHamburgerMenuPage.objActivateDeviceError, "Error Message");
				// Button must be disabled upon Error message
				verifyElementPresent(PWAHamburgerMenuPage.objActivateNowButtonDisabled, "Disabled Button");
				// Error message should disappear upon clearing code
				getDriver().findElement(PWAHamburgerMenuPage.objAuthenticateCode("6")).clear();
				if (checkElementDisplayed(PWAHamburgerMenuPage.objActivateDeviceError,
						"On clearing code Error Message")) {
					logger.error("Error message is not cleared on clearing code");
					extent.extentLoggerFail("", "Error message is not cleared on clearing code");
				}
				// Check entry of special characters
				type(PWAHamburgerMenuPage.objAuthenticateCode("6"), "&", "Authentication code &");
				try {
					String sixthChar = getElementPropertyToString("value",
							PWAHamburgerMenuPage.objAuthenticateCode("6"), "6th code");
					if (sixthChar.equals("&")) {
						logger.error("Special character & is allowed in Authentication code");
						extent.extentLoggerFail("", "Special character & is allowed in Authentication code");
					} else {
						logger.info("Verified that special characters are not allowed in Authentication code");
						extent.extentLogger("",
								"Verified that special characters are not allowed in Authentication code");
					}
				} catch (Exception e) {
					if (verifyElementPresent(PWAHamburgerMenuPage.objActivateNowButtonDisabled, "Disabled Button")) {
						logger.info("Verified that special characters are not allowed in Authentication code");
						extent.extentLogger("",
								"Verified that special characters are not allowed in Authentication code");
					}
				}
			} else {
				logger.error("Failed to navigate to Activation page");
				extent.extentLoggerFail("", "Failed to navigate to Activation page");
			}
		}
	}

	public void xdefaultUrlVerification(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-8657 Change the \"x-default\" URL in hreflang tag across all the zee5 pages.");
		// Home page
		extent.extentLogger("", "---------- Home page ----------");
		navigateToHome();
		verifyXDefaultHref("Home page");
		// Home page tray collection
		extent.extentLogger("", "---------- Home page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Home page");
		// TV Shows
		extent.extentLogger("", "---------- TV Shows page ----------");
		navigateToAnyScreen("TV Shows");
		verifyXDefaultHref("TV Shows page");
		// TV Shows page tray collection
		extent.extentLogger("", "---------- TV Shows page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from TV Shows page");
		// Movies page
		extent.extentLogger("", "---------- Movies page ----------");
		navigateToAnyScreen("Movies");
		verifyXDefaultHref("Movies page");
		// Movies page tray collection
		extent.extentLogger("", "---------- Movies page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Movies page");
		// Web Series
		extent.extentLogger("", "---------- Web Series page ----------");
		navigateToAnyScreen("Web Series");
		verifyXDefaultHref("Web Series page");
		// Web Series page tray collection
		extent.extentLogger("", "---------- Web Series page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Web Series page");
		// News
		extent.extentLogger("", "---------- News page ----------");
		navigateToAnyScreen("News");
		verifyXDefaultHref("News page");
		// News tray collection
		extent.extentLogger("", "---------- News page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from News page");
		// Premium
		extent.extentLogger("", "---------- Premium page ----------");
		navigateToAnyScreen("Premium");
		verifyXDefaultHref("Premium page");
		// Premium tray collection
		extent.extentLogger("", "---------- Premium page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Premium page");
		// Live TV
		extent.extentLogger("", "---------- Live TV page ----------");
		navigateToAnyScreen("Live TV");
		verifyXDefaultHref("Live TV page");
		// Channel Guide
		extent.extentLogger("", "---------- Channel Guide page ----------");
		navigateToAnyScreen("Live TV");
		click(PWALiveTVPage.objChannelGuideToggle, "Channel Guide");
		verifyXDefaultHref("Channel Guide page");
		// Zeeplex
		extent.extentLogger("", "---------- ZEEPLEX page ----------");
		navigateToAnyScreen("ZEEPLEX");
		verifyXDefaultHref("ZEEPLEX page");
		// Play
		extent.extentLogger("", "---------- Play page ----------");
		navigateToAnyScreen("Play");
		verifyXDefaultHref("Play page");
		// Play tray collection
		extent.extentLogger("", "---------- Play page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Play page");

		// Web Stories
		/*
		 * extent.extentLogger("", "---------- Web Stories page ----------");
		 * navigateToAnyScreen("Web Stories"); verifyXDefaultHref("Web Stories page");
		 * // Web Stories tray collection extent.extentLogger("",
		 * "---------- Web Stories page tray collection ----------");
		 * JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		 * verifyXDefaultHref("Tray listing from Web Stories page");
		 */
		navigateToHome();
		// Kids
		extent.extentLogger("", "---------- Kids page ----------");
		navigateToAnyScreen("Kids");
		verifyXDefaultHref("Kids page");
		// Kids tray collection
		extent.extentLogger("", "---------- Kids page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Kids page");
		// Videos
		extent.extentLogger("", "---------- Videos page ----------");
		navigateToAnyScreen("Videos");
		verifyXDefaultHref("Videos page");
		// Videos tray collection
		extent.extentLogger("", "---------- Videos page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Videos page");
		// Music
		extent.extentLogger("", "---------- Music page ----------");
		navigateToAnyScreen("Music");
		verifyXDefaultHref("Music page");
		// Music tray collection
		extent.extentLogger("", "---------- Music page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Music page");
		// Stories
		extent.extentLogger("", "---------- Stories page ----------");
		navigateToAnyScreen("Stories");
		verifyXDefaultHref("Stories page");
		navigateToHome();
		// Channels
		extent.extentLogger("", "---------- Channels page ----------");
		navigateToAnyScreen("Channels");
		verifyXDefaultHref("Channels page");
		// Movies Consumption
		extent.extentLogger("", "---------- Movies Consumption page ----------");
		navigateToHome();
		String movie = "Robin Hood And The Invincible Knight";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, movie, "Search Field");
		click(PWASearchPage.objSearchMoviesTab, "Movies tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(movie), "Searched content");
		verifyXDefaultHref("Movies Consumption page");
		// Episodes Consumption
		extent.extentLogger("", "---------- Episodes Consumption page ----------");
		navigateToHome();
		String episode = "The mysterious camera";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, episode, "Search Field");
		click(PWASearchPage.objSearchEpisodesTab, "Episodes tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(episode), "Searched content");
		verifyXDefaultHref("Episodes Consumption page");
		// Originals Consumption
		extent.extentLogger("", "---------- Originals Consumption page ----------");
		navigateToHome();
		String original = "A Personal Reason";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, original, "Search Field");
		click(PWASearchPage.objSearchEpisodesTab, "Episodes tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(original), "Searched content");
		verifyXDefaultHref("Originals Consumption page");
		// Trailer Consumption
		extent.extentLogger("", "---------- Trailers Consumption page ----------");
		navigateToHome();
		String trailer = "Trailer";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, trailer, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(trailer), "Searched content");
		verifyXDefaultHref("Trailers Consumption page");
		// Webisodes Consumption
		extent.extentLogger("", "---------- Webisodes Consumption page ----------");
		navigateToHome();
		String webisode = "Weekly Webisode";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, webisode, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(webisode), "Searched content");
		verifyXDefaultHref("Webisodes Consumption page");
		// Promos Consumptions
		extent.extentLogger("", "---------- Promos Consumption page ----------");
		navigateToHome();
		String promo = "Promo";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, promo, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(promo), "Searched content");
		verifyXDefaultHref("Promos Consumption page");
		// Music Consumption
		extent.extentLogger("", "---------- Music Consumption page ----------");
		navigateToHome();
		String music = "Mujhe Ishq Mein Rang De Mahi";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, music, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(music), "Searched content");
		verifyXDefaultHref("Music Consumption page");
		// Videos Consumption
		extent.extentLogger("", "---------- Videos Consumption page ----------");
		navigateToHome();
		String video = "Multiway Kurtas";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, video, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(video), "Searched content");
		verifyXDefaultHref("Video Consumption page");
		// VOD News Consumption
		extent.extentLogger("", "---------- VOD News Consumption page ----------");
		navigateToHome();
		String vodnews = "Mumbai People Reaction On Ease From Covid Lockdown Ristrictions";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, vodnews, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(vodnews), "Searched content");
		verifyXDefaultHref("Video Consumption page");
		// Live News Consumption
		extent.extentLogger("", "---------- Live News Consumption page ----------");
		navigateToHome();
		String livenews = "Zee News";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, livenews, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(livenews), "Searched content");
		verifyXDefaultHref("Live News Consumption page");
		// TV Show Details
		extent.extentLogger("", "---------- TV Show Details page ----------");
		navigateToHome();
		String tvshow = "Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, tvshow, "Search Field");
		click(PWASearchPage.objSearchShowsTab, "TV Shows tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(tvshow), "Searched content");
		verifyXDefaultHref("TV Show Details page");
		// Web Series Details
		extent.extentLogger("", "---------- Web Series Details page ----------");
		navigateToHome();
		String webseries = "Sunflower";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, webseries, "Search Field");
		click(PWASearchPage.objSearchShowsTab, "TV Shows tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(webseries), "Searched content");
		verifyXDefaultHref("Web Series Details page");

	}

	public void verifyXDefaultHref(String page) throws Exception {
		String currentUrl = getDriver().getCurrentUrl();
		currentUrl = "view-source:" + currentUrl;
		getDriver().get(currentUrl);
		String expectedHref = "https://www.zee5.com";
		currentUrl = currentUrl.split("zee5.com")[1];
		try {
			expectedHref = expectedHref + currentUrl;
		} catch (Exception e) {
			expectedHref = expectedHref + "/";
		}
		String actualHref = getElementPropertyToString("href", PWAHomePage.objxDefault, "Actual href for xdefault tag");
		if (actualHref == null) {
			waitTime(10000);
			actualHref = getElementPropertyToString("href", PWAHomePage.objxDefault, "Actual href for xdefault tag");
		}
		logger.info("Expected x-default url: " + expectedHref);
		extent.extentLogger("", "Expected x-default url: " + expectedHref);
		logger.info("Actual x-default url: " + actualHref);
		extent.extentLogger("", "Actual x-default url: " + actualHref);
		if (expectedHref.equals(actualHref)) {
			logger.info("x-default url verified for " + page);
			extent.extentLogger("", "x-default url verified for " + page);
		} else {
			logger.error("x-default url verification failed for " + page);
			extent.extentLoggerFail("", "x-default url verification failed for " + page);
		}
		Back(1);
	}

	public void redirectUserVerification(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-9343 Redirect user to the correct asset page");
		extent.extentLogger("", "--------------- Verify India content Search results ---------------");
		navigateToHome();
		String contentIndia = "Begusari - test India";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentIndia, "Search Field");
		mandatoryRegistrationPopUp(userType);
		waitTime(4000);
		if (checkElementDisplayed(PWASearchPage.objSearchResultTxt(contentIndia), contentIndia + " search result")) {
			logger.info("India content is displayed in Search Results of India region, expected behavior");
			extent.extentLogger("",
					"India content is displayed in Search Results of India region, expected behavior\"");
			extent.extentLogger("", "--------------- Verify India content Consumption ---------------");
			click(PWASearchPage.objSearchResultTxt(contentIndia), "Searched content");
			String titleIndia = getElementPropertyToString("innerText", PWAPlayerPage.objContentNameMetaInfo,
					"Content title");
			if (titleIndia.equalsIgnoreCase(contentIndia)) {
				logger.info("User navigated to Consumption page for India content");
				extent.extentLogger("", "User navigated to Consumption page for India content");
			} else {
				logger.error("User failed to navigate to Consumption page for India content");
				extent.extentLoggerFail("", "User failed to navigate to Consumption page for India content");
			}

		} else {
			logger.error("India content is not displayed in Search Results of India region");
			extent.extentLoggerFail("", "India content is not displayed in Search Results of India region");
		}
		extent.extentLogger("", "--------------- Verify Global content Search results ---------------");
		navigateToHome();
		String contentGlobal = "Begusari - test Global";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentGlobal, "Search Field");
		waitTime(4000);
		if (checkElementDisplayed(PWASearchPage.objSearchResultTxt(contentGlobal), contentGlobal + " search result")) {
			logger.error("Global content should not be displayed in Search Results of India region");
			extent.extentLoggerFail("", "Global content should not be displayed in Search Results of India region");
		} else {
			logger.info("Global content is not displayed in Search Results of India region, expected behavior");
			extent.extentLogger("",
					"Global content is not displayed in Search Results of India region, expected behavior");
		}
		extent.extentLogger("", "--------------- Verify Global content Consumption ---------------");
		String url = "https://www.zee5.com/tvshows/details/begusarai/0-6-372/begusari-test-global/0-1-534121";
		getDriver().get(url);
		logger.info("Navigated to Global content url");
		extent.extentLogger("", "Navigated to Global content url");
		if (checkElementDisplayed(PWAHomePage.objOopsNoInfo, "Oops! No Information available")) {
			logger.info("Global content not displayed in India region, expected behavior");
			extent.extentLogger("", "Global content not displayed in India region, expected behavior");
		} else {
			logger.error("Oops! No Information available is not displayed for Global content in India region");
			extent.extentLoggerFail("",
					"Oops! No Information available is not displayed for Global content in India region");
		}
		mandatoryRegistrationPopUp(userType);
	}
	
	public void tvodVerification(String userType,String user) throws Exception {
		String currentLiveContentTitle="Demo Moon Live";
		String currentLiveContentTitleHindi="डेमो मून लाइव";
		String currentLiveContentLiveDate="21-08-202";
		String currentLiveContentComboPageData="Supermoon Event Pass";
		String currentExpiredLiveContent="Demo Moon Live1";
		String currentVODContentTitle="Sensational Dialogues | Sensational ZEE5";
		String currentVODContentMetaLanguage="Hindi";
		String currentVODContentMetaGenre="Entertainment";
		streamContentDateVerification(currentLiveContentTitle,currentLiveContentLiveDate);
		streamContentExpiryVerification(currentLiveContentTitle,currentExpiredLiveContent);
		extent.HeaderChildNode("Verify whether Supermoon LiveTV content is available via search page");
		logger.info("Verify whether Supermoon LiveTV content is available via search page");
		tvodContentThroughSearch(currentLiveContentTitle);
		extent.HeaderChildNode("Verify whether Supermoon LiveTV content is available via Zeeplex page");
		logger.info("Verify whether Supermoon LiveTV content is available via Zeeplex page");
		tvodContentThroughZeeplexLanding(currentLiveContentTitle);		
		extent.HeaderChildNode("Verify whether Supermoon Exclusive VOD content is available via search page");
		logger.info("Verify whether Supermoon Exclusive VOD content is available via search page");
		tvodContentThroughSearch(currentVODContentTitle);
		extent.HeaderChildNode("Verify whether Supermoon Exclusive VOD content is available via Related video rail/tray LiveTV consumption page");
		logger.info("Verify whether Supermoon Exclusive VOD content is available via Related video rail/tray LiveTV consumption page");
		tvodContentThroughLiveTVConsumptionTray(currentLiveContentTitle,"Related Tray","Supermoon");
		extent.HeaderChildNode("Verify that Plex logo is not displayed for Live TV TVOD or TVOD videos content in the search result");
		logger.info("Verify that Plex logo is not displayed for Live TV TVOD or TVOD videos content in the search result");
		tvodLogoInSearchResult(false,currentLiveContentTitle);
		tvodLogoInSearchResult(false,currentVODContentTitle);
		extent.HeaderChildNode("Verify user is able to see Live TV TVOD contents in Top/Trending searched if featured");
		logger.info("Verify user is able to see Live TV TVOD contents in Top/Trending searched if featured");
		tvodInTrendingSearch("Supermoon");
		extent.HeaderChildNode("Verify that Live TV TVOD or TVOD videos meta is displayed on searching the Live TV TVOD content");
		logger.info("Verify that Live TV TVOD or TVOD videos meta is displayed on searching the Live TV TVOD content");
		tvodMetaInSearch(currentVODContentTitle,currentVODContentMetaLanguage);
		tvodMetaInSearch(currentVODContentTitle,currentVODContentMetaGenre);
		navigateToHome();
		if(user.equals("notTvodActive")) {
			extent.HeaderChildNode("Verify whether Combo offer is applicable for Supermoon Live event");
			logger.info("Verify whether Combo offer is applicable for Supermoon Live event");
			tvodComboOfferApplicableCheck(true,currentLiveContentTitle,currentLiveContentComboPageData);
			extent.HeaderChildNode("Verify whether Combo offer is not applicable for other plex Movies if not configured for combo offer ");
			logger.info("Verify whether Combo offer is not applicable for other plex Movies if not configured for combo offer ");
			tvodComboOfferApplicableCheck(false,currentLiveContentTitle,"Radhe");
		}
		if(user.equals("notTvodActive")) {
			extent.HeaderChildNode("Verify whether Combo offer is not displayed for subscription entry points from Buy plan CTA");
			logger.info("Verify whether Combo offer is not displayed for subscription entry points from Buy plan CTA");
			tvodComboOfferInBuyPlanOrUpgradeFromHeader();
			extent.HeaderChildNode("Verify whether Combo offer is not displayed for subscription entry points from Buy plan CTA below the player screen");
			logger.info("Verify whether Combo offer is not displayed for subscription entry points from Buy plan CTA below the player screen");
			tvodComboOfferInBuyPlanFromPlayer("A Break-in");
			extent.HeaderChildNode("Verify if the combo pack is applicable from Carousels on Home/category landing pages");
			logger.info("Verify if the combo pack is applicable from Carousels on Home/category landing pages");
			tvodComboOfferInBuyPlanFromCarousel("Home","Dial 100");
			tvodComboOfferFromDifferentEntryPoints(currentLiveContentTitle,currentLiveContentComboPageData);			
		}
		if(!user.equals("TvodActive")) {
			extent.HeaderChildNode("Verify that user is not getting Combo offer page while purchasing or upgrading to 499 via Subscription page");
			logger.info("Verify that user is not getting Combo offer page while purchasing or upgrading to 499 via Subscription page");
			tvodComboOfferInBuyPlanOrUpgradeFromHeader();
		}
		tvodUIZeeplexLanding(currentLiveContentTitle,currentVODContentTitle,user);
		tvodUIZeeplexLandingDifferentDisplayLang(user,currentLiveContentTitleHindi);
		if(!user.equals("TvodActive")) tvodNudgeInConsumptionVerification(userType,currentLiveContentTitle,currentLiveContentComboPageData);
		
	}
	
	public void tvodNudgeInConsumptionVerification(String userType,String contentTitle,String contentInComboPage) throws Exception {
		extent.HeaderChildNode("Verify that user is able to see additional nudge containing communication about Combo Offer on consumption page<br/>Verify that user is able to see the combo offer widget below player on consumption page");
		logger.info("Verify that user is able to see additional nudge containing communication about Combo Offer on consumption page<br/>Verify that user is able to see the combo offer widget below player on consumption page");	
		navigateToAnyScreen("ZEEPLEX");
		click(PWAComboOfferPage.objZeeplexContent(contentTitle),"Zeeplex content "+contentTitle);
		verifyElementPresent(PWAComboOfferPage.objComboOfferWidget,"Combo Offer Nudge");
		//extent.HeaderChildNode("Verify that Supermoon logo and Premium icons are displayed along with Price and Know More CTA");
		//logger.info("Verify that Supermoon logo and Premium icons are displayed along with Price and Know More CTA");	
		//extent.HeaderChildNode("Verify that all the text on combo-offer nudge is configurable");
		//logger.info("Verify that all the text on combo-offer nudge is configurable");			
		extent.HeaderChildNode("Verify that user is redirected to Super moon Combo offer page on clicking Know More CTA<br/>Verify that \"Combo Offer\" page is displayed on clicking Know More or clicking anywhere on nudge");
		logger.info("Verify that user is redirected to Super moon Combo offer page on clicking Know More CTA<br/>Verify that \"Combo Offer\" page is displayed on clicking Know More or clicking anywhere on nudge");	
		click(PWAComboOfferPage.objComboOfferWidget,"Combo Offer Nudge");
		verifyElementPresent(PWAComboOfferPage.objComboOfferForContent(contentInComboPage),"Combo Offer Page for "+contentInComboPage);			
		extent.HeaderChildNode("Verify that Combo Offer page is displayed on clicking Rent Now CTA on player");
		logger.info("Verify that Combo Offer page is displayed on clicking Rent Now CTA on player");
		Back(1);
		verifyElementPresentAndClick(PWAComboOfferPage.objRentNowInPlayer,"Rent Now on player");
		verifyElementPresent(PWAComboOfferPage.objComboOfferForContent(contentInComboPage),"Combo Offer Page for "+contentInComboPage);			
		if(userType.equalsIgnoreCase("Guest")) {
			Back(1);
			extent.HeaderChildNode("Verify that Login option is displayed for guest user on player below Rent Now CTA on Player screen");
			logger.info("Verify that Login option is displayed for guest user on player below Rent Now CTA on Player screen");	
			verifyElementPresent(PWAComboOfferPage.objLoginButtonPlaybackOnConsumptionPage,"Login link on player");
		}
	}
	
	public void tvodUIZeeplexLandingDifferentDisplayLang(String user,String contentTitle) throws Exception {
		extent.HeaderChildNode("Verify if the text on the Zeeplex page is displaying as per the display language selected");
		logger.info("Verify if the text on the Zeeplex page is displaying as per the display language selected");	
		click(PWAHomePage.objHamburgerMenu, "Humburger Menu");
		click(PWAHamburgerMenuPage.objLanguageBtn, "Language option");
		click(PWALanguageSettingsPage.objLanguage("Hindi"), "Hindi Display language");
		click(PWALanguageSettingsPage.objApplyBtn, "Apply button for Display Language settings");
		click(PWALanguageSettingsPage.objApplyBtn, "Apply button for Content Language settings");
		navigateToAnyScreen("ZEEPLEX");
		verifyElementPresent(PWAComboOfferPage.objZeePlexLogo,"ZEEPLEX logo");
		verifyElementPresent(PWAComboOfferPage.objPlexLandingPageHeaderHindi,"\"Rent and Watch\" header in Hindi");
		verifyElementPresent(PWAComboOfferPage.objPlexWatchFilmsBeforeTheaterHindi,"\"Watch films before theatre\" description in Hindi");
		verifyElementPresentAndClick(PWAComboOfferPage.objPlexHowItWorksCtaHindi,"\"How it Works ?\" cta in Hindi");
		verifyElementPresent(PWAComboOfferPage.objPlexHowItWorksDrawerContentHindi,"How it works drawer content in Hindi");
		verifyElementPresentAndClick(PWAComboOfferPage.objPlexHowItWorksDrawerClose,"Drawer Close icon");
		if(!user.equals("TvodActive")) {
			extent.HeaderChildNode("Verify that user is able to see combo offer widget only in English irrespective of user display language");
			logger.info("Verify that user is able to see combo offer widget only in English irrespective of user display language");	
			click(PWAComboOfferPage.objZeeplexContent(contentTitle),"Zeeplex content in Hindi: "+contentTitle);
			verifyElementPresent(PWAComboOfferPage.objComboOfferWidget,"Combo Offer Nudge");
			Back(1);
		}
		if(user.equals("notTvodActive") || user.equals("notTvodActive299")) {
			
		}
		click(PWAHomePage.objHamburgerMenu, "Humburger Menu");
		click(PWAHamburgerMenuPage.objLanguageBtn, "Language option");
		click(PWALanguageSettingsPage.objEnglishLang, "English Display language");
		click(PWALanguageSettingsPage.objApplyBtn, "Apply button for Display Language settings");
		click(PWALanguageSettingsPage.objApplyBtn, "Apply button for Content Language settings");
	}
	
	public void tvodUIZeeplexLanding(String contentTitleLive,String contentTitleNotLive,String user) throws Exception {
		extent.HeaderChildNode("Verify if the header with plex logo, description with How it works CTA is displayed");
		logger.info("Verify if the header with plex logo, description with How it works CTA is displayed");	
		navigateToAnyScreen("ZEEPLEX");
		verifyElementPresent(PWAComboOfferPage.objZeePlexLogo,"ZEEPLEX logo");
		verifyElementPresent(PWAComboOfferPage.objPlexLandingPageHeader,"\"Rent and Watch\" header");
		verifyElementPresent(PWAComboOfferPage.objPlexWatchFilmsBeforeTheater,"\"Watch films before theatre\" description");
		String subText=getElementPropertyToString("innerText",PWAComboOfferPage.objPlexNotPartOfPremium,"");
		if(subText.contains("ZEEPLEX is not part of Premium plan")) {
			logger.info("\"ZEEPLEX is not part of Premium plan\" is displayed");
			extent.extentLogger("", "\"ZEEPLEX is not part of Premium plan\" is displayed");
		}
		else {
			logger.error("\"ZEEPLEX is not part of Premium plan\" is not displayed");
			extent.extentLoggerFail("", "\"ZEEPLEX is not part of Premium plan\" is not displayed");
		}
		verifyElementPresentAndClick(PWAComboOfferPage.objPlexHowItWorksCta,"\"How it Works ?\" cta");
		verifyElementPresent(PWAComboOfferPage.objPlexHowItWorksDrawerContent,"How it works drawer content");
		verifyElementPresentAndClick(PWAComboOfferPage.objPlexHowItWorksDrawerClose,"Drawer Close icon");
		extent.HeaderChildNode("Verify if the Now Showing and Upcoming collection is displayed on Zeeplex page");
		logger.info("Verify if the Now Showing and Upcoming collection is displayed on Zeeplex page");	
		verifyElementPresent(PWAComboOfferPage.objPlexNowShowing,"\"Now Showing\" tray");
		if(!checkElementDisplayed(PWAComboOfferPage.objPlexUpcoming,"\"Upcoming\" tray")) {
			logger.info("\"Upcoming\" tray is not configured");
			extent.extentLogger("", "\"Upcoming\" tray is not configured");
		}
		if(!user.equals("TvodActive")) {
			extent.HeaderChildNode("Verify if the user can see content with Trailer CTA");
			logger.info("Verify if the user can see content with Trailer CTA");	
			verifyElementPresent(PWAComboOfferPage.objPlexTrailer(contentTitleLive),"Trailer button for "+contentTitleLive);
			extent.HeaderChildNode("Verify that user is be able to see 2 CTA's - \"Trailer\" and \"Rent now\"");
			logger.info("Verify that user is be able to see 2 CTA's - \"Trailer\" and \"Rent now\"");
			verifyElementPresent(PWAComboOfferPage.objPlexTrailer(contentTitleLive),"Trailer button for "+contentTitleLive);
			verifyElementPresent(PWAComboOfferPage.objRentNow(contentTitleLive),"Rent Now button for "+contentTitleLive);
			extent.HeaderChildNode("Verify that user is able to see Trailer and Rent INR CTA along with Price for other plex content for which combo offer is not enabled");
			logger.info("Verify that user is able to see Trailer and Rent INR CTA along with Price for other plex content for which combo offer is not enabled");
			verifyElementPresent(PWAComboOfferPage.objPlexTrailer(contentTitleNotLive),"Trailer button for "+contentTitleNotLive);
			verifyElementPresent(PWAComboOfferPage.objRentNowWithINR(contentTitleNotLive,"Rent Now"),"Rent Now button for "+contentTitleNotLive);
			extent.HeaderChildNode("Verify that user clicks on  trailer CTA (if applicable) on Rent landing Page then user is redirecting to trailer consumption page");
			logger.info("Verify that user clicks on  trailer CTA (if applicable) on Rent landing Page then user is redirecting to trailer consumption page");
			verifyElementPresentAndClick(PWAComboOfferPage.objPlexTrailer(contentTitleLive),"Trailer button for "+contentTitleLive);
			verifyElementPresent(PWAPlayerPage.objPlayerPage,"Consumption page");
			extent.HeaderChildNode("Verify that user is able to see the Rent Now CTA and Login CTA on player post trailer consumption");
			logger.info("Verify that user is able to see the Rent Now CTA and Login CTA on player post trailer consumption");
			waitForElementDisplayed(PWAComboOfferPage.objRentNowInPlayer, 30);
			verifyElementPresent(PWAComboOfferPage.objLoginButtonPlaybackOnConsumptionPage,"Login link on player");
			extent.HeaderChildNode("Verify that user is getting Combo offer page on clicking Rent Now on Player on consumption page");
			logger.info("Verify that user is getting Combo offer page on clicking Rent Now on Player on consumption page");
			verifyElementPresentAndClick(PWAComboOfferPage.objRentNowInPlayer,"Rent Now cta");
			verifyElementPresent(PWAComboOfferPage.objComboPackText,"Combo Pack in Combo Offer page");				
			if(!user.equals("notTvodActive299") && !user.equals("notTvodActive499")) {
				extent.HeaderChildNode("Verify if the text is displayed below the banner");
				logger.info("Verify if the text is displayed below the banner");
				verifyElementPresent(PWAComboOfferPage.objComboOfferPageTitle,"Combo Offer page title");	
				String comboOfferPageTitle=getElementPropertyToString("innerText",PWAComboOfferPage.objComboOfferPageTitle,"");
				if(comboOfferPageTitle.contains("Supermoon combo offer")) {
					logger.info("\"Supermoon combo offer\" is displayed as title, expected behavior");
					extent.extentLogger("","\"Supermoon combo offer\" is displayed as title, expected behavior");
				}
				else {
					logger.error(comboOfferPageTitle+" is displayed as title instead of \"Supermoon combo offer\"");
					extent.extentLoggerFail("",comboOfferPageTitle+" is displayed as title instead of \"Supermoon combo offer\"");
				}
				verifyElementPresent(PWAComboOfferPage.objComboOfferPageSubTitle,"Combo Offer page sub title");	
				String comboOfferPageSubTitle=getElementPropertyToString("innerText",PWAComboOfferPage.objComboOfferPageSubTitle,"");
				if(comboOfferPageSubTitle.contains("Pay less, Watch more!")) {
					logger.info("\"Pay less, Watch more!\" is displayed as sub title, expected behavior");
					extent.extentLogger("","\"Pay less, Watch more!\" is displayed as sub title, expected behavior");
				}
				else {
					logger.error(comboOfferPageSubTitle+" is displayed as title instead of \"Pay less, Watch more!\"");
					extent.extentLoggerFail("",comboOfferPageSubTitle+" is displayed as title instead of \"Pay less, Watch more!\"");
				}
			}
			if(user.equals("notTvodActive299")) {
				extent.HeaderChildNode("Verify if the text is displayed below the banner for Upgrade journey");
				logger.info("Verify if the text is displayed below the banner for Upgrade journey");
				verifyElementPresent(PWAComboOfferPage.objComboOfferPageTitle,"Combo Offer page title");
				String expectedTitle="Upgrade to Premium pack by just paying the difference";
				String expectedSubtitle="You are currently on ₹ 299 Premium 3 Months plan.";
				String comboOfferPageTitle=getElementPropertyToString("innerText",PWAComboOfferPage.objComboOfferPageTitle,"");
				if(comboOfferPageTitle.contains(expectedTitle)) {
					logger.info("\""+expectedTitle+"\" is displayed as title, expected behavior");
					extent.extentLogger("","\""+expectedTitle+"\" is displayed as title, expected behavior");
				}
				else {
					logger.error(comboOfferPageTitle+" is displayed as title instead of \""+expectedTitle+"\"");
					extent.extentLoggerFail("",comboOfferPageTitle+" is displayed as title instead of \""+expectedTitle+"\"");
				}
				verifyElementPresent(PWAComboOfferPage.objComboOfferPageSubTitle,"Combo Offer page sub title");	
				String comboOfferPageSubTitle=getElementPropertyToString("innerText",PWAComboOfferPage.objComboOfferPageSubTitle,"");
				if(comboOfferPageSubTitle.contains(expectedSubtitle)) {
					logger.info("\""+expectedSubtitle+"\" is displayed as sub title, expected behavior");
					extent.extentLogger("","\""+expectedSubtitle+"\" is displayed as sub title, expected behavior");
				}
				else {
					logger.error(comboOfferPageSubTitle+" is displayed as title instead of \""+expectedSubtitle+"\"");
					extent.extentLoggerFail("",comboOfferPageSubTitle+" is displayed as title instead of \""+expectedSubtitle+"\"");
				}
			}
			if(user.equals("notTvodActive") || user.equals("notTvodActive299")) {
				extent.HeaderChildNode("Verify if user can see Supermoon thumbnail + 1 year Premium thumbnails is displaying on the white background with Recommended tag");
				logger.info("Verify if user can see Supermoon thumbnail + 1 year Premium thumbnails is displaying on the white background with Recommended tag");
				verifyElementPresent(PWAComboOfferPage.objRecommendedWithCards,"Recommended tag with Supermoon card and 1 year Premium Card");	
				extent.HeaderChildNode("Verify information is displaying on combo page");
				logger.info("Verify information is displaying on combo page");			
				verifyElementPresent(PWAComboOfferPage.objComboOfferForContent(""),"\"Combo pack includes:\"");
				verifyElementPresent(PWAComboOfferPage.objComboOfferForContent("Supermoon Event Pass"),"\"Supermoon Event Pass\"");
				verifyElementPresent(PWAComboOfferPage.objComboOfferForContent("Online Live Concert"),"\"Online Live Concert\"");
				verifyElementPresent(PWAComboOfferPage.objComboOfferForContent("Exclusive Videos"),"\"Exclusive Videos\"");
				verifyElementPresent(PWAComboOfferPage.objComboOfferForContent("1 Year Premium Plan"),"\"1 Year Premium Plan\"");
				verifyElementPresent(PWAComboOfferPage.objComboOfferForContent("2800+ Blockbuster Movies"),"\"2800+ Blockbuster Movies\"");
				verifyElementPresent(PWAComboOfferPage.objComboOfferForContent("150+ Web Series"),"\"150+ Web Series\"");
				verifyElementPresent(PWAComboOfferPage.objComboOfferForContent("Watch Before TV"),"\"Watch Before TV\"");
				verifyElementPresent(PWAComboOfferPage.objComboOfferForContent("Live TV, Ad-Free entertainment"),"\"Live TV, Ad-Free entertainment\"");
				String strikethroughAmt=getElementPropertyToString("innerText",PWAComboOfferPage.objTvodPlanAmountStrikeThrough("1 Year Premium Plan"),"");
				System.out.println(strikethroughAmt);
				if(strikethroughAmt.contains("999")) {
					logger.info("999 is striked");
					extent.extentLogger("", "999 is striked");
				}
				else {
					logger.error("999 is not striked");
					extent.extentLoggerFail("", "999 is not striked");
				}
				String tvodAmt=getElementPropertyToString("innerText",PWAComboOfferPage.objTvodPlanAmount("1 Year Premium Plan"),"");
				System.out.println(tvodAmt);
				if(tvodAmt.contains("499")) {
					logger.info("499 is displayed as tvod amount");
					extent.extentLogger("", "499 is displayed as tvod amount");
				}
				else {
					logger.error("499 is not displayed as tvod amount");
					extent.extentLoggerFail("", "499 is not displayed as tvod amount");
				}
				extent.HeaderChildNode("Verify that numbering is displying for the text below \"Combo pack includes\" tab");
				logger.info("Verify that numbering is displying for the text below \"Combo pack includes\" tab");	
				verifyElementPresent(PWAComboOfferPage.objComboOfferPageNumbering("1","Supermoon Event Pass"),"Number 1 for header \"Supermoon Event Pass\"");
				verifyElementPresent(PWAComboOfferPage.objComboOfferPageNumbering("2","1 Year Premium Plan"),"Number 2 for header \"1 Year Premium Plan\"");
				extent.HeaderChildNode("Verify if the user can see the Supermoon combo offer price with amount to be paid and save amount");
				logger.info("Verify if the user can see the Supermoon combo offer price with amount to be paid and save amount");	
				String strikethroughAmtTotal=getElementPropertyToString("innerText",PWAComboOfferPage.objTvodPlanAmountStrikeThrough("Total offer Price"),"");
				System.out.println(strikethroughAmtTotal);
				if(strikethroughAmtTotal.contains("1248")) {
					logger.info("1248 is striked");
					extent.extentLogger("", "1248 is striked");
				}
				else {
					logger.error("1248 is not striked");
					extent.extentLoggerFail("", "1248 is not striked");
				}
				String tvodAmtTotal=getElementPropertyToString("innerText",PWAComboOfferPage.objTvodPlanAmount("Total offer Price"),"");
				if(tvodAmtTotal.contains("499")) {
					logger.info("499 is displayed as tvod amount");
					extent.extentLogger("", "499 is displayed as tvod amount");
				}
				else {
					logger.error("499 is not displayed as tvod amount");
					extent.extentLoggerFail("", "499 is not displayed as tvod amount");
				}
				String totalSaveAmount=getElementPropertyToString("innerText",PWAComboOfferPage.objTotalSaveAmount,"");
				if(totalSaveAmount.contains("Save") && totalSaveAmount.contains("749")) {
					logger.info("Save 749 is displayed as save amount");
					extent.extentLogger("", "Save 749 is displayed as save amount");
				}
				else {
					logger.error("Save 749 is not displayed as save amount");
					extent.extentLoggerFail("", "Save 749 is not displayed as save amount");
				}
				extent.HeaderChildNode("Verify if the user can see the other plan Only Rent Content");
				logger.info("Verify if the user can see the other plan Only Rent Content");	
				verifyElementPresent(PWAComboOfferPage.objOnlyEventForContent("Supermoon Event Pass"),"\"Supermoon Event Pass\"");
				verifyElementPresent(PWAComboOfferPage.objOnlyEventForContent("Online Live Concert"),"\"Online Live Concert\"");
				verifyElementPresent(PWAComboOfferPage.objOnlyEventForContent("Exclusive Videos"),"\"Exclusive Videos\"");
				extent.HeaderChildNode("Verify if the Supermoon combo pack is selected by default");
				logger.info("Verify if the Supermoon combo pack is selected by default");	
				verifyElementPresent(PWAComboOfferPage.objDefaultSelectedOffer("Combo pack includes:"),"Supermoon Combo pack selected by default");
				extent.HeaderChildNode("Verify if the user can see disclaimer as \"By proceeding you agree to our Terms of service and Privacy policy\"");
				logger.info("Verify if the user can see disclaimer as \"By proceeding you agree to our Terms of service and Privacy policy\"");	
				String disclaimer=getElementPropertyToString("innerText",PWAComboOfferPage.objDisclaimer,"");
				String expectedDisclaimer="By proceeding you agree to our Terms of Services & Privacy Policy.";
				if(disclaimer.equals(expectedDisclaimer)) {
					logger.info("Expected Disclaimer displayed: "+disclaimer);
					extent.extentLogger("", "Expected Disclaimer displayed: "+disclaimer);
				}
				else {
					logger.error("Disclaimer displayed: "+disclaimer+", expected disclaimer: "+expectedDisclaimer);
					extent.extentLoggerFail("", "Disclaimer displayed: "+disclaimer+", expected disclaimer: "+expectedDisclaimer);
				}
				extent.HeaderChildNode("Verify if the user can see Buy or Rent CTA or Upgrade sticky in the bottom of the page");
				logger.info("Verify if the user can see Buy or Rent CTA or Upgrade sticky in the bottom of the page");	
				verifyElementPresent(PWAComboOfferPage.objbuycta,"Buy/Upgrade/Rent Button");
				Back(1);
			}		
			Back(1);
		}
	}
	
	public void tvodComboOfferFromDifferentEntryPoints(String contentTitle,String contentInComboPage) throws Exception {
		extent.HeaderChildNode("Verify that user is able to see combo offer page on clicking Rent Now CTA on Zeeplex landing page");
		logger.info("Verify that user is able to see combo offer page on clicking Rent Now CTA on Zeeplex landing page");
		navigateToAnyScreen("ZEEPLEX");
		verifyElementPresentAndClick(PWAComboOfferPage.objRentNow(contentTitle),"Rent Now button of "+contentTitle);
		String currentUrl=getDriver().getCurrentUrl();
		logger.info("Current URL : "+currentUrl);
		extent.extentLogger("", "Current URL : "+currentUrl);
		if(currentUrl.contains("offers/combo-offer")) {
			logger.info("Combo Offer page is displayed");
			extent.extentLogger("", "Combo Offer page is displayed");
		}
		else {
			logger.error("Combo Offer page is not displayed");
			extent.extentLoggerFail("", "Combo Offer page is not displayed");
		}
		extent.HeaderChildNode("Verify if the combo pack is applicable from Zeeplex landing page");
		logger.info("Verify if the combo pack is applicable from Zeeplex landing page");
		verifyElementPresent(PWAComboOfferPage.objComboPackText,"Combo Pack in Combo Offer page");
		extent.HeaderChildNode("Verify that user is able to see the Rent Now CTA below player on  consumption page");
		logger.info("Verify that user is able to see the Rent Now CTA below player on  consumption page");
		Back(1);	
		click(PWAComboOfferPage.objZeeplexContent(contentTitle),"Zeeplex content "+contentTitle);
		verifyElementPresent(PWAComboOfferPage.objRentNowInConsumptionPage,"Rent Now below player");
		extent.HeaderChildNode("Verify if the combo pack is applicable from Plex Consumption page<br/>Verify that user is getting Combo offer page on clicking Rent Now Below Player on consumption page");
		logger.info("Verify if the combo pack is applicable from Plex Consumption page<br/>Verify that user is getting Combo offer page on clicking Rent Now Below Player on consumption page");
		click(PWAComboOfferPage.objRentNowInConsumptionPage,"Rent Now below player");
		verifyElementPresent(PWAComboOfferPage.objComboPackText,"Combo Pack");
		Back(1);
		extent.HeaderChildNode("Verify if the combo pack is applicable from Search<br/>Verify that user is able to see combo offer page on clicking Rent Now CTA on player consumption page post redirecting through search result");
		logger.info("Verify if the combo pack is applicable from Search<br/>Verify that user is able to see combo offer page on clicking Rent Now CTA on player consumption page post redirecting through search result");
		click(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Field");
		waitTime(5000);
		hideKeyboard();
		waitTime(3000);
		click(PWASearchPage.objSearchedResult(contentTitle),contentTitle);		
		verifyElementPresentAndClick(PWAComboOfferPage.objRentNowInConsumptionPage,"Rent Now below player");
		verifyElementPresent(PWAComboOfferPage.objComboPackText,"Combo Pack");
		extent.HeaderChildNode("Verify that entire text on the Combo Offer Page including CTA text is configurable");
		logger.info("Verify that entire text on the Combo Offer Page including CTA text is configurable");
		verifyElementPresent(PWAComboOfferPage.objComboOfferForContent(contentInComboPage),"Configured content "+contentInComboPage +" in Combo Offer Page");	
		Back(1);
	}	
	
	public void tvodComboOfferInBuyPlanFromCarousel(String tab,String contentTitle) throws Exception {
		boolean cardClicked=false;
		navigateToAnyScreen(tab);
		int deviceWidth = getDriver().manage().window().getSize().width;
		int deviceHeight = getDriver().manage().window().getSize().height;
		int xright = (deviceWidth / 8)*7;
		int xleft = deviceWidth / 8;
		int y = deviceHeight / 4;
		TouchAction act = new TouchAction(getDriver());
		for(int scroll=0;scroll<10;scroll++) {
			try {
				getDriver().findElement(PWAComboOfferPage.objRentNowForCarouselCard(contentTitle)).click();
				logger.info("Clicked on Rent Now CTA of carousel card "+contentTitle);
				extent.extentLogger("", "Clicked on Rent Now CTA of carousel card "+contentTitle);
				cardClicked=true;
			}
			catch(Exception e) {
				act.press(PointOption.point(xright, y)).moveTo(PointOption.point(xleft, y)).release().perform();
			}
		}
		if(cardClicked==true) {
			verifyElementPresent(PWAComboOfferPage.objComboPackText,"Combo Pack");
			Back(1);
		}
		else {
			logger.error("Carousel card click has failed");
			extent.extentLoggerFail("", "Carousel card click has failed");
		}
	}
	
	public void tvodComboOfferInBuyPlanFromPlayer(String contentTitle) throws Exception {
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Field");
		waitTime(5000);
		hideKeyboard();
		waitTime(3000);
		click(PWASearchPage.objSearchedResult(contentTitle),contentTitle);
		if (checkElementDisplayed(PWAHomePage.objBuyPlanCTA,"Buy Plan button")) {
			click(PWAHomePage.objBuyPlanCTA,"Buy Plan button");
			if (checkElementDisplayed(PWAComboOfferPage.objComboPackText,"Combo Pack")) {
				logger.error("Combo Pack is displayed in Buy plan CTA page");
				extent.extentLoggerFail("", "Combo Pack is displayed in Buy plan CTA page");
			}
			else {
				logger.info("Combo Pack is not displayed in Buy plan CTA page, expected behavior");
				extent.extentLogger("", "Combo Pack is not displayed in Buy plan CTA page, expected behavior");
			}
		}
		else {
			logger.info("Buy Plan button not displayed for the subscribed user");
			extent.extentLoggerWarning("", "Buy Plan button not displayed for the subscribed user");
			
		}
		click(PWAHomePage.objZeeLogo, "Zee Logo");
	}
	
	public void tvodComboOfferInBuyPlanOrUpgradeFromHeader() throws Exception {
		boolean buttonClicked=false;
		navigateToHome();
		if (checkElementDisplayed(PWAHomePage.objBuyPlanCTA,"Buy Plan button")) {
			click(PWAHomePage.objBuyPlanCTA,"Buy Plan button");
			buttonClicked=true;
		}
		else if (checkElementDisplayed(PWAHomePage.objUpgradeCTA,"Upgrade button")) {
			click(PWAHomePage.objUpgradeCTA,"Upgrade button");
			buttonClicked=true;
		}
		else {
			logger.info("Buy Plan button not displayed for the subscribed user");
			extent.extentLoggerWarning("", "Buy Plan button not displayed for the subscribed user");
		}
		if(buttonClicked) {
			if (checkElementDisplayed(PWAComboOfferPage.objComboPackText,"Combo Pack")) {
				logger.error("Combo Pack is displayed in Buy plan CTA page");
				extent.extentLoggerFail("", "Combo Pack is displayed in Buy plan CTA page");
			}
			else {
				logger.info("Combo Pack is not displayed in Buy plan CTA page, expected behavior");
				extent.extentLogger("", "Combo Pack is not displayed in Buy plan CTA page, expected behavior");
			}
			Back(1);
		}
		else {
			logger.error("Buy Plan/Upgrade button click failed");
			extent.extentLoggerFail("", "Buy Plan/Upgrade button click failed");
		}
		
	}
	
	public void tvodComboOfferApplicableCheck(boolean displayExpectedInComboOfferPage,String contentTitle,String contentInComboPage) throws Exception {
		navigateToAnyScreen("ZEEPLEX");
		verifyElementPresentAndClick(PWAComboOfferPage.objRentNow(contentTitle),"Rent Now button of "+contentTitle);
		if(displayExpectedInComboOfferPage==true) verifyElementPresent(PWAComboOfferPage.objComboOfferForContent(contentInComboPage),"Configured content "+contentInComboPage +" in Combo Offer Page");				
		else {
			if (checkElementDisplayed(PWAComboOfferPage.objComboOfferForContent(contentInComboPage),contentInComboPage +" in Combo Offer Page")) {
				logger.error("Non Configured content "+contentInComboPage+" is displayed in Combo Offer Page");
				extent.extentLoggerFail("", "Non Configured content "+contentInComboPage+" is displayed in Combo Offer Page");
			}
			else {
				logger.info("Non Configured content "+contentInComboPage+" is not displayed in Combo Offer Page, expected behavior");
				extent.extentLogger("", "Non Configured content "+contentInComboPage+" is not displayed in Combo Offer Page, expected behavior");
			}
		}
		Back(1);
	}
	
	public void tvodMetaInSearch(String contentTitle,String meta) throws Exception {
		ArrayList<String> trendingCardsList=new ArrayList<String>();
		click(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Field");
		waitTime(5000);
		hideKeyboard();
		waitTime(3000);
		verifyElementPresent(PWASearchPage.objSearchResultTxt(contentTitle, meta),"Title "+contentTitle+" with metadata "+meta);
	}
	
	public void tvodInTrendingSearch(String contentTitle) throws Exception {
		ArrayList<String> trendingCardsList=new ArrayList<String>();
		click(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		boolean foundCard=false;
		int deviceWidth = getDriver().manage().window().getSize().width;
		int deviceHeight = getDriver().manage().window().getSize().height;
		int xright = (deviceWidth / 8)*7;
		int xleft = deviceWidth / 8;
		int y = deviceHeight / 4;
		TouchAction act = new TouchAction(getDriver());
		if (checkElementDisplayed(PWASearchPage.objTrendingSearchesTray, "Trending Searches tray") == true) {
			main : for(int scroll=0;scroll<10;scroll++) {
				List<WebElement> trendingCards = findElements(PWASearchPage.objTrendingTrayCardTitles);
				int trendingCardsSize = trendingCards.size();
				for (int i = 0; i < trendingCardsSize; i++) {
					String tempCardTitle=trendingCards.get(i).getAttribute("innerText");
					if(!trendingCardsList.contains(tempCardTitle)) trendingCardsList.add(tempCardTitle);
					if(tempCardTitle.contains(contentTitle)) {
						foundCard=true;
						break main;
					}
				}
				act.press(PointOption.point(xright, y)).moveTo(PointOption.point(xleft, y)).release().perform();
			}
			logger.info("Trending tray cards fetched: "+trendingCardsList);
			extent.extentLogger("", "Trending tray cards fetched: "+trendingCardsList);
			if (foundCard) {
				logger.info("User is able to see Live TV TVOD contents in Top/Trending searched");
				extent.extentLoggerPass("", "User is able to see Live TV TVOD contents in Top/Trending searched");
			} else {
				logger.info("User is not able to see Live TV TVOD contents in Top/Trending searched");
				extent.extentLoggerWarning("", "User is not able to see Live TV TVOD contents in Top/Trending searched");
			}
		}	
		click(PWASearchPage.objBackButton,"Back button");
	}
	
	public void tvodLogoInSearchResult(boolean logoDisplayExpected,String contentTitle) throws Exception {
		click(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Field");
		waitTime(5000);
		hideKeyboard();
		waitTime(3000);
		if (checkElementDisplayed(PWASearchPage.objSearchedResult(contentTitle),"Zeeplex content "+contentTitle)) {
			if(logoDisplayExpected==true) verifyElementPresent(PWAComboOfferPage.objZeeplexLogoInSearch(contentTitle),"Logo for Zeeplex search result "+contentTitle);				
			else {
				if (checkElementDisplayed(PWAComboOfferPage.objZeeplexLogoInSearch(contentTitle),"Logo for Zeeplex search result "+contentTitle)) {
					logger.error("Logo for Zeeplex search result should not be displayed");
					extent.extentLoggerFail("", "Logo for Zeeplex search result should not be displayed");
				}
				else {
					logger.info("Logo for Zeeplex search result should not be displayed, expected behavior");
					extent.extentLogger("", "Logo for Zeeplex search result should not be displayed, expected behavior");
				}
			}
		}
		else {		
			logger.error("Zeeplex content "+contentTitle+" is not available via search page");
			extent.extentLoggerFail("", "Zeeplex content "+contentTitle+" is not available via search page");
		}
		click(PWASearchPage.objBackButton,"Back button");
	}
	
	public void streamContentDateVerification(String contentTitle, String liveDateString) throws Exception {
		extent.HeaderChildNode("Verify LiveTV content is streamed on live");
		logger.info("Verify LiveTV content is streamed on live");
		
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
		Date liveDate = new Date();
		liveDate = dateFormat.parse(liveDateString);
		logger.info("Expected Live Date : "+liveDate);
		extent.extentLogger("", "Expected Live Date : "+liveDate);

		Date todayDate = new Date();	
		logger.info("Today's Date : "+todayDate);
		extent.extentLogger("", "Today's Date : "+todayDate);
		
		navigateToAnyScreen("ZEEPLEX");
		if (checkElementDisplayed(PWAComboOfferPage.objZeeplexContent(contentTitle),"Zeeplex content "+contentTitle)) {
			if(todayDate.equals(liveDate) || todayDate.after(liveDate)){
				logger.info("The Zeeplex content is streaming on expected Live date");
				extent.extentLogger("", "The Zeeplex content is streaming on expected Live date");
			}
			else if (todayDate.before(liveDate)) {
				logger.error("The Zeeplex content is streaming before expected Live date");
				extent.extentLoggerFail("", "The Zeeplex content is streaming before expected Live date");
			}
		}
		else {
			if (todayDate.before(liveDate)) {
				logger.info("The Zeeplex content is not streaming before Live date, expected behavior");
				extent.extentLogger("", "The Zeeplex content is not streaming before Live date date, expected behavior");
			}
			if(todayDate.equals(liveDate) || todayDate.after(liveDate)){
				logger.error("The Zeeplex content is not streaming after Live date");
				extent.extentLoggerFail("", "The Zeeplex content is not streaming after Live date");
			}				
		}		
	}
	
	public void streamContentExpiryVerification(String currentLiveContentTitle, String currentExpiredLiveContent) throws Exception {
		extent.HeaderChildNode("Verify LiveTV and Video content is available for 48 hrs");
		logger.info("Verify LiveTV and Video content is available for 48 hrs");
		if (checkElementDisplayed(PWAComboOfferPage.objZeeplexContent(currentLiveContentTitle),"Current Live Zeeplex content "+currentLiveContentTitle)) {
			logger.info("The Live Zeeplex content is available for 48 hrs, expected behavior");
			extent.extentLogger("", "The Live Zeeplex content is available for 48 hrs, expected behavior");
		}
		else {
			logger.error("The Live Zeeplex content is not displayed for 48 hrs");
			extent.extentLoggerFail("", "The Live Zeeplex content is not displayed for 48 hrs");
		}
		extent.HeaderChildNode("Verify LiveTV and Video content is not available after 48 hrs");
		logger.info("Verify LiveTV and Video content is not available after 48 hrs");
		if (checkElementDisplayed(PWAComboOfferPage.objZeeplexContent(currentExpiredLiveContent),"Current Expired Zeeplex content "+currentExpiredLiveContent)) {
			logger.error("The Expired Zeeplex content is available after 48 hrs");
			extent.extentLoggerFail("", "The Expired Zeeplex content is available after 48 hrs");
		}
		else {
			logger.info("The Expired Zeeplex content is not available after 48 hrs, expected bevavior");
			extent.extentLogger("", "The Expired Zeeplex content is not available after 48 hrs, expected bevavior");
		}
		extent.HeaderChildNode("Verify that Post 48 hours all  Live and exclusive videos content to be removed from the all platform");
		logger.info("Verify that Post 48 hours all  Live and exclusive videos content to be removed from the all platform");
		click(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, currentExpiredLiveContent + "\n", "Search Field");
		waitTime(5000);
		hideKeyboard();
		waitTime(3000);
		if (checkElementDisplayed(PWASearchPage.objSearchedResult(currentExpiredLiveContent),"Current Expired Zeeplex content "+currentExpiredLiveContent)) {
			logger.error("The Expired Zeeplex content is available after 48 hrs");
			extent.extentLoggerFail("", "The Expired Zeeplex content is available after 48 hrs");
		}
		else {
			logger.info("The Expired Zeeplex content is not available after 48 hrs, expected bevavior");
			extent.extentLogger("", "The Expired Zeeplex content is not available after 48 hrs, expected bevavior");
		}
		click(PWASearchPage.objBackButton,"Back button");
	}
	
	public void tvodContentThroughSearch(String contentTitle) throws Exception {
		click(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Field");
		waitTime(5000);
		hideKeyboard();
		waitTime(3000);
		if (checkElementDisplayed(PWASearchPage.objSearchedResult(contentTitle),"Zeeplex content "+contentTitle)) {
			logger.info("Zeeplex content "+contentTitle+" is available via search page");
			extent.extentLogger("", "Zeeplex content "+contentTitle+" is available via search page");
		}
		else {		
			logger.error("Zeeplex content "+contentTitle+" is not available via search page");
			extent.extentLoggerFail("", "Zeeplex content "+contentTitle+" is not available via search page");
		}
		click(PWASearchPage.objBackButton,"Back button");
	}
	
	public void tvodContentThroughZeeplexLanding(String contentTitle) throws Exception {
		if (checkElementDisplayed(PWAComboOfferPage.objZeeplexContent(contentTitle),"Zeeplex content "+contentTitle)) {
			logger.info("Zeeplex content "+contentTitle+" is available via zeeplex landing page");
			extent.extentLogger("", "Zeeplex content "+contentTitle+" is available via zeeplex landing page");
		}
		else {		
			logger.error("Zeeplex content "+contentTitle+" is not available via zeeplex landing page");
			extent.extentLoggerFail("", "Zeeplex content "+contentTitle+" is not available via zeeplex landing pagee");
		}
		click(PWASearchPage.objBackButton,"Back button");
	}
	
	public void tvodContentThroughLiveTVConsumptionTray(String livecontentTitle,String trayname,String contentTitle) throws Exception {
		click(PWAComboOfferPage.objZeeplexContent(livecontentTitle),"Live content "+livecontentTitle);
		Swipe("UP", 1);		
		if (!checkElementDisplayed(PWALandingPages.objFirstAssetInTrayReco(trayname,contentTitle),"Zeeplex content "+contentTitle+" in tray "+trayname)) {
			logger.error("Zeeplex content is not available in tray in Live TV Comsumption");
			extent.extentLoggerFail("", "Zeeplex content is not available in tray in Live TV Comsumption");
		}
		click(PWASearchPage.objBackButton,"Back button");
	}

	
	public void contentDiscriptorVerification(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-8755: 1. Content Descriptors to be displayed on Player");
		extent.extentLogger("","Verification of <b>TC 1. A small visual overlay needs to be displayed on the Player with age rating information about the content being played<b>");
		logger.info("Verification of TC 1. A small visual overlay needs to be displayed on the Player with age rating information about the content being played");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String contentNameTC1 = "Robin Hood And The Invincible Knight";
		String contentIDTC1 = "0-0-103553";
		String contentMetaInSearchTC1 = "English";
		String cdInUITC1 = "", cdInUITC2 = "", cdInUITC3 = "", cdInUITC4 = "";
		JavascriptExecutor js = (JavascriptExecutor) getDriver();
		String guestToken=js.executeScript("return window.localStorage.getItem('guestToken')").toString();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentNameTC1, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentNameTC1, contentMetaInSearchTC1), "Searched content");
		waitForContentPlay();
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true)) {
			cdInUITC1 = getElementPropertyToString("innerText", PWAPlayerPage.objContentDescriptor, "CD Text");
		}
		mandatoryRegistrationPopUp(userType);
		ResponseInstance.updateWatchHistory(contentIDTC1, 1, guestToken);

		extent.HeaderChildNode("PWA2-8755: 2. Content Descriptors with changed Display Language");
		extent.extentLogger("",
				"Verification of <b>TC 2. The text to be displayed must conform to the display language settings.<b>");
		logger.info("Verification of TC 2. The text to be displayed must conform to the display language settings.");
		String contentNameTC2 = "Robin Hood And The Invincible Knight";
		String contentIDTC2 = "0-0-103553";
		String contentMetaInSearchTC2 = "अंग्रेज़ी";
		String contentDescriptorHindiTC2 = "hindi_text";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		click(PWALanguageSettingsPage.objNonSelectedHin, "Hindi Display Language");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		waitTime(2000);
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentNameTC2, "Search Field");
		waitTime(2000);
		JSClick(PWASearchPage.objSearchResultTxt(contentNameTC2, contentMetaInSearchTC2), "Searched content");
		waitForContentPlay();
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor(contentDescriptorHindiTC2), 50,
				"Content Descriptor in Hindi", true)) {
			cdInUITC2 = getElementPropertyToString("innerText", PWAPlayerPage.objContentDescriptor, "CD Text");
			if (cdInUITC1.equals(cdInUITC2)) {
				logger.error("English CD is displayed after changing Display language to Hindi");
				extent.extentLoggerFail("", "English CD is displayed after changing Display language to Hindi");
			} else {
				logger.info("English CD is not displayed after changing Display language to Hindi, expected behavior");
				extent.extentLogger("",
						"English CD is not displayed after changing Display language to Hindi, expected behavior");
				if (cdInUITC2.equals(contentDescriptorHindiTC2)) {
					logger.info("Expected CD is displayed: " + cdInUITC2);
					extent.extentLogger("", "Expected CD is displayed: " + cdInUITC2);
				} else {
					logger.error(cdInUITC2 + " CD is displayed instead of " + contentDescriptorHindiTC2);
					extent.extentLoggerFail("", cdInUITC2 + " CD is displayed instead of " + contentDescriptorHindiTC2);
				}
			}
		}
		navigateToHome();
		ResponseInstance.updateWatchHistory(contentIDTC2, 1, guestToken);
		navigateToHome();
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		click(PWALanguageSettingsPage.objNonSelectedEng, "English Display Language");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		if (!userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("PWA2-8755: 5. Video resuming");
			extent.extentLogger("",
					"Verification of <b>TC 5. Video resuming (user clicking a video from continue watching)<b>");
			logger.info("Verification of TC 5. Video resuming (user clicking a video from continue watching)");
			String contentNameCWTray = "Troubles Multiply";
			// String contentIDCWTray="0-1-manual-18h5lltrmhh0";
			String contentMetaInSearchCWTray = "Hindi";
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, contentNameCWTray, "Search Field");
			waitTime(2000);
			click(PWASearchPage.objSearchResultTxt(contentNameCWTray, contentMetaInSearchCWTray), "Searched content");
			waitForContentPlay();
			logger.info("Waiting for one minute to get the content on Continue watching tray");
			extent.extentLogger("", "Waiting for one minute to get the content on Continue watching tray");
			waitTime(60000);
			waitTime(10000);
			Back(1);
			Back(1);
			getWebDriver().navigate().refresh();
			waitTime(5000);
			if (verifyElementPresentAndClick(PWALandingPages.objContinueWatchingCard(1),"Card in Continue Watching tray")) {
				getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true);
			}
			// ResponseInstance.updateWatchHistory(contentIDCWTray, 1,
			// local.getItem("guestToken"));
		}
		
		extent.HeaderChildNode("PWA2-8755: 6. Next Video Play");
		extent.extentLogger("",
				"Verification of <b>TC 6. Video starting due to auto-play next when current video ends<b>");
		logger.info("Verification of TC 6. Video starting due to auto-play next when current video ends");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentNameTC1, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentNameTC1, contentMetaInSearchTC1), "Searched content");
		waitTime(5000);
		waitForContentPlay();
		String url = getDriver().getCurrentUrl();
		url = url + "?t=5437";
		getDriver().get(url);	
		if (!userType.equals("SubscribedUser"))
			waitForContentPlay();
		String upnextTitle = waitUntilUpNextCardPlays(contentNameTC1);
		if (!userType.equals("SubscribedUser"))
			waitForContentPlay();
		getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true);
		String upnextURL = getDriver().getCurrentUrl();
		String[] abc = upnextURL.split("/");
		String upnextContentID = abc[abc.length - 1];
		ResponseInstance.updateWatchHistory(contentIDTC1, 1, guestToken);
		ResponseInstance.updateWatchHistory(upnextContentID, 1, guestToken);
	}
	
	
	public void contentDiscriptorVerificationFromExcel(String userType, String xlsname, String[] sheets) throws Exception {
		String xlspath = System.getProperty("user.dir") + "\\" + xlsname;
		ArrayList<String> contentDetails = new ArrayList<String>();
		String url = "", contentUrl = "", showID = "", contentID = "";
		String[] parts = {};
		int colno = 1;
		if (userType.equalsIgnoreCase("Guest"))
			colno = 1;
		if (userType.equalsIgnoreCase("NonSubscribedUser"))
			colno = 2;
		if (userType.equalsIgnoreCase("SubscribedUser"))
			colno = 3;// sheets.length
		for (int sheetIt = 0; sheetIt < sheets.length; sheetIt++) {
			String sheet = sheets[sheetIt];
			System.out.println("sheet: " + sheet);
			int NumberOfRows = getRowCount(xlspath, sheet);
			System.out.println("NumberOfRows" + NumberOfRows);
			for (int rownumber = 1; rownumber <= NumberOfRows; rownumber++) {
				System.out.println(rownumber);
				contentDetails = new ArrayList<String>();
				showID = "";
				contentID = "";
				XSSFWorkbook myExcelBook = new XSSFWorkbook(new FileInputStream(xlspath));
				XSSFSheet myExcelSheet = myExcelBook.getSheet(sheet);
				url = myExcelSheet.getRow(rownumber).getCell(0).toString();
				url = url.split("zee5.com/")[1];
				extent.HeaderChildNode("PWA2-8755: " + sheet + ": " + "/" + url);
				String mainurl = getParameterFromXML("url");
				contentUrl = mainurl + url;
				logger.info("Verification for: " + contentUrl);
				extent.extentLogger("", "Verification for: <b>" + contentUrl + "<b>");
				parts = url.split("/");
				if (sheet.toLowerCase().contains("show")) {
					showID = parts[parts.length - 3];
					logger.info("Show ID from URL: " + showID);
					extent.extentLogger("", "Show ID from URL: " + showID);
				}
				contentID = parts[parts.length - 1];
				logger.info("Content ID from URL: " + contentID);
				extent.extentLogger("", "Content ID from URL: " + contentID);
				ArrayList<String> cdDetails = getCDFromSpapi(showID, contentID);
				contentDetails.add(url);
				contentDetails.add(contentID);
				contentDetails.add("Rated " + cdDetails.get(0)); // Age rating
				contentDetails.add(cdDetails.get(1)); // Genres
				String result = verifyContentDescriptorRatingAndDesc(contentDetails);
				writeToExcel(xlspath, sheet, rownumber, colno, result);
			}
		}
	}
	
	public void waitForContentPlay() throws Exception {
		waitTime(3000);
		getDriver().manage().timeouts().implicitlyWait(100, TimeUnit.MILLISECONDS);
		for (int i = 0; i < 200; i++) {
			try {
				getDriver().findElement(PWAPlayerPage.objPlayerCurrentDuration);
				break;				
				
			} catch (Exception e) {
				System.out.println("catch catch catch");
				try {
					getDriver().findElement(PWAPlayerPage.objAdLayer);
					if (i == 0) {
						logger.info("Ad play in progress");
						extent.extentLogger("AdPlayInProgress", "Ad play in progress");
					}
				} catch (Exception e1) {}
			}
		}
		System.out.println("out of getplayerhead");
	}
	
	public ArrayList<String> getCDFromSpapi(String tvShowID, String contentID) throws Exception {
		ArrayList<String> cd = new ArrayList<String>();
		String ageRating = "", genres = "";
		String guestToken=js.executeScript("return window.localStorage.getItem('guestToken')").toString();
		Response spapiResp = ResponseInstance.getSinglePlayBackDetails(contentID, tvShowID, "",guestToken);
		try {
			ageRating = spapiResp.jsonPath().get("assetDetails.age_rating").toString();
			cd.add(ageRating);
			logger.info("Age Rating from SPAPI: " + ageRating);
			extent.extentLogger("", "Age Rating from SPAPI: " + ageRating);
		} catch (Exception e) {
			ageRating = "";
			cd.add(ageRating);
			logger.info("Age Rating from SPAPI: " + ageRating);
			extent.extentLogger("", "Age Rating from SPAPI: " + ageRating);
		}
		try {
			genres = spapiResp.jsonPath().get("assetDetails.extended_wh.content_descriptors").toString()
					.replace("[", "").replace("]", "");
			cd.add(genres);
			logger.info("Genres from SPAPI: " + genres);
			extent.extentLogger("", "Genres from SPAPI: " + genres);
		} catch (Exception e) {
			genres = "";
			cd.add(genres);
			logger.info("Genres from SPAPI: " + genres);
			extent.extentLogger("", "Genres from SPAPI: " + genres);
		}
		return cd;
	}
	
	public static int getRowCount(String xlspath, String sheet) {
		int rc = 0;
		try {
			System.out.println(xlspath);
			FileInputStream fis = new FileInputStream(xlspath);
			Workbook wb = WorkbookFactory.create(fis);
			rc = wb.getSheet(sheet).getLastRowNum();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return rc;
	}
	
	public boolean getLocatorPresence(By locator, int count, String text, boolean error) throws Exception {
		getDriver().manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
		for (int i = 0; i < count; i++) {
			try {
				getDriver().findElement(locator);
				logger.info(text + " is displayed");
				extent.extentLogger("", text + " is displayed");
				return true;
			} catch (Exception e) {
			}
		}
		if (error) {
			logger.error(text + " is not displayed");
			extent.extentLoggerFail("", text + " is not displayed");
		} else {
			logger.info(text + " is not displayed");
			extent.extentLogger("", text + " is not displayed");
		}
		return false;
	}
	
	public static void writeToExcel(String xlspath, String sheet, int rowno, int colno, String value) {
		try {
			XSSFWorkbook myExcelBook = new XSSFWorkbook(new FileInputStream(xlspath));
			FileOutputStream output = new FileOutputStream(xlspath);
			XSSFSheet myExcelSheet = myExcelBook.getSheet(sheet);
			CellStyle cs = myExcelBook.createCellStyle();
			cs.setWrapText(true);
			XSSFRow row = myExcelSheet.getRow(rowno);
			myExcelSheet.setColumnWidth(colno, 5000);
			row.createCell(colno).setCellStyle(cs);
			row.getCell(colno).setCellValue(value);
			myExcelBook.write(output);
			myExcelBook.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@SuppressWarnings("unused")
	public String waitUntilUpNextCardPlays(String sourceCardTitle) throws Exception {
		System.out.println("sourceCardTitle:" + sourceCardTitle);
		getDriver().manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
		main: for (int trial = 0; trial < 480; trial++) {
			for (int sec = 0; sec < 60; sec++) {
				// check for Ad Play After Scrub
				try {
					getWebDriver().findElement(PWAPlayerPage.objAd);
					if (trial == 0 && sec == 5) {
						logger.info("Ad play in progress");
						extent.extentLogger("AdPlayInProgress", "Ad play in progress");
					}
				} catch (Exception e) {
					// No Ad
					try {
						String playerTitle = getWebDriver().findElement(PWALandingPages.objPlayerTitle).getText();
						System.out.println("playerTitle" + playerTitle);
						if (!playerTitle.equals(sourceCardTitle)) {
							logger.info("Upnext Card is playing :" + playerTitle);
							extent.extentLogger("", "Upnext Card is playing :" + playerTitle);
							return playerTitle;
						}
					} catch (Exception e1) {
					}
				}
			}
			if (Math.floorMod(trial, 60) == 0) {
				logger.info("Waiting for Upnext content to play");
				extent.extentLogger("", "Waiting for Upnext content to play");
			}
		}
		return "";
	}
	
	
	public String verifyContentDescriptorRatingAndDesc(ArrayList<String> contentDetails) throws Exception {
		String result = "";
		String mainurl = getParameterFromXML("url");
		String guestToken=js.executeScript("return window.localStorage.getItem('guestToken')").toString();
		String contentUrl = contentDetails.get(0);
		String contentID = contentDetails.get(1);
		String contentCDAgeRating = contentDetails.get(2);
		String contentCDAgeDesc = contentDetails.get(3);
		String cdInUI = "";
		contentUrl = mainurl + contentUrl;
		mandatoryRegistrationPopUp(userType);
		getDriver().get(contentUrl);
		logger.info("Navigated to the content URL: " + contentUrl);
		extent.extentLogger("", "Navigated to the content URL: " + contentUrl);
		waitForContentPlay();
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor(contentCDAgeRating, contentCDAgeDesc), 60,
				"Content Descriptor", false)) {
			logger.info("Expected CD is displayed: " + contentCDAgeRating + " " + contentCDAgeDesc);
			extent.extentLogger("",
					"Expected CD is displayed: <br/> <b>" + contentCDAgeRating + "<br/>" + contentCDAgeDesc + "");
			result = "Pass";
		} else {
			try {
				getDriver().findElement(By.xpath("//*[contains(@class,'skip-button subscribe-link') or contains(@class,'login-text')]"));
				logger.info("Buy Plan with Skip/Login is displayed, content not played");
				extent.extentLoggerWarning("", "Buy Plan with Skip/Login is displayed, content not played");
				result = "Blocked";
			} catch (Exception e) {
				logger.error("Incorrect CD is displayed");
				extent.extentLoggerFail("", "Incorrect CD is displayed");
				result = "Fail";
			}
		}
		getDriver().get(mainurl);
		ResponseInstance.updateWatchHistory(contentID, 1, guestToken);
		return result;
	}
	
	public String getYourPublicIP() throws Exception {
		getDriver().get("https://www.google.com");
		getDriver().findElement(PWAConvivaPage.objSearchEditFieldMobile).click();
		getDriver().findElement(PWAConvivaPage.objSearchEditFieldMobile).sendKeys("whatsmyip");
		getDriver().findElement(PWAConvivaPage.objWhatsMyIPSuggestion).click();
		String myIP = getDriver().findElement(PWAConvivaPage.objPublicIPMobile).getAttribute("innerText");
		logger.info("Public IP fetched: " + myIP);
		return myIP;
	}
	
	public void resetToDefault() throws Exception {
		extent.HeaderChildNode("Reset Settings to default Functionality");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresent(PWAHamburgerMenuPage.objSettingInHamburger,"Settings section");		
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		click(PWAHamburgerMenuPage.objDisplayLanguage, "Display language");
		waitTime(5000);
		click(PWAHamburgerMenuPage.objSelectLanguage, "Language icon");
		if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objAfterSelectedLanguage, "Language")) {
			logger.info("clicked on hindi language in Display language popup");
			extent.extentLogger("Content language", "clicked on hindi language in Display language popup");
		}
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");

		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objResetSettingsToDefault, "Reset Settings to Default");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objContentLanguage, "Content Language");
		if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objAfterSelectedLanguage, "Language") == false) {
			logger.info("Reset to default is success");
			extent.extentLogger("Content language", "Reset to default is success");
			click(PWAHamburgerMenuPage.objCancelButtonInContentLangugaePopup, "Cancel button");
			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
		} else {
			logger.info("Reset to defualt was unsuccessfull");
			extent.extentLogger("Reset to defualt", "Reset to defualt was unsuccessfull");
		}

	}
	
	public void changePasswordFunctionality() throws Exception {
		extent.HeaderChildNode("Change Password Functionality");
		waitTime(3000);
		Swipe("UP", 1);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objChangePasswordBtn, "Change password button");
		verifyElementPresent(PWAHamburgerMenuPage.objChangePasswordText, "Change password page");
		type(PWAHamburgerMenuPage.objNewPassword, "igszee5\n", "New password field");
		hideKeyboard();
		type(PWAHamburgerMenuPage.objConfirmNewPassword, "igszee5", "Current confirm field");
		hideKeyboard();
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objUpdatePasswordBtnHighlighted, "Update password button");
	}
	
	
	public void profileFunctionalitySanity(String userType) throws Exception {
		extent.HeaderChildNode("Profile page Functionality");
		Swipe("UP", 1);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger menu");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIcon, "Profile icon");
		if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objMyAccountOptionsText("My Account"), "My Account")) {
			logger.info("User is navigated to My profile page");
			extent.extentLogger("My profile", "User is navigated to My profile page");
		}
		Back(1);
		if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objMyAccountOptionsText("My Account"),
				"My Account") == false) {
			logger.info("User is navigated to previous page");
			extent.extentLogger("Previous page", "User is navigated to previous page");
		}
		Swipe("UP", 1);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIcon, "profile icon");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objMyAccountOptionsText("My Account"), "My Account");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objProfilePageNameTxt, "User name");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objProfilePageUserIdTxt, "User id");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "hamburger menu");
		click(PWAHamburgerMenuPage.objDownArrow("My Account"), "expander button");
		NavigationsToMyWatchlist();
	//	NavigationsToMyReminders();
		NavigationsToMySubsccription(userType);
		NavigationsToMyTransactions();
		extent.HeaderChildNode("Edit page Functionality");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIcon, "profile icon");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objChangePasswordBtn, "Change password button");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		waitTime(4000);
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objEditProfileText, "Edit profile page");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objEditProfileFirstName, "Name field");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objEditProfileEmailField, "Email field");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objEditProfileMobileNumber, "Mobile field");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objEditProfileGender, "Gender field");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objEditProfileDOB, "Date of birth field");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objEditProfileGoBackBtn, "Go back button");
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objEditProfileSavechangesBtn, "Save changes Button");
		getDriver().findElement(PWAHamburgerMenuPage.objEditProfileFirstName).clear();
		type(PWAHamburgerMenuPage.objEditProfileFirstName, "Zee5Igs\n", "First name");
		hideKeyboard();
		waitTime(3000);
		click(PWAHamburgerMenuPage.objEditProfileSavechangesBtn, "Save changes Button");
		try {
			Boolean SavedChangesToastMessage = getDriver().findElement(By.xpath("//*[@class='toastMessage']"))
					.isDisplayed();
			if (SavedChangesToastMessage == true) {
				extent.extentLogger("Toast", "Saved Changes Toast Message displayed");
				logger.info("Saved Changes Toast Message displayed");
			} else {
				extent.extentLogger("Toast", "Saved Changes Toast Message not displayed");
				logger.info("Saved Changes Toast Message not displayed");
			}
		} catch (Exception e) {
			System.out.println("Toast message is not displayed");
		}
		waitTime(5000);
		click(PWAHamburgerMenuPage.objEditProfileGoBackBtn, "Go back button");
		extent.HeaderChildNode("Change password page Functionality");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objChangePasswordBtn, "Change password button");
		waitTime(4000);
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objChangePasswordText, "change password page");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objEditProfileGoBackBtn, "Go back button");
		waitTime(4000);
		if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profilet")) {
			logger.info("User is navigated back to my profile page");
			extent.extentLogger("My profile", "User is navigated back to my profile page");
		}
		click(PWAHamburgerMenuPage.objChangePasswordBtn, "Change password button");
		waitTime(4000);
		verifyIsElementDisplayed(PWAHamburgerMenuPage.objChangePasswordText, "change password page");
	/*	
	//	type(PWAHamburgerMenuPage.objChangeOldPassword, "User@123\n", "Current password field");
		
		type(PWAHamburgerMenuPage.objChangeNewPassword, "User@123\n", "New password field");
		
		hideKeyboard();
		String password = getText(PWAHamburgerMenuPage.objChangeNewPassword);
		if (password != null) {
			logger.info("User is able to enter numbers and special character");
			extent.extentLogger("Password", "User is able to enter numbers and special character");
		}
	*/	
		type(PWAHamburgerMenuPage.objNewPassword, "abc\n", "password field");
		hideKeyboard();
		click(PWAHamburgerMenuPage.objUpdatePasswordButton, "update button");
		if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objPasswordErrorText, "Error text")) {
			logger.info("Minimun 6 characters error message is displayed");
			extent.extentLogger("Error message", "Minimun 6 characters error message is displayed");
		}
		if (getDriver().findElement(PWAHamburgerMenuPage.objUpdatePasswordButton).isEnabled() == false) {
			logger.info("Updated button is not enabled when password field is empty");
			extent.extentLogger("Update button", "Updated button is not enabled when password field is empty");
		}
		getDriver().findElement(PWAHamburgerMenuPage.objNewPassword).clear();
		waitTime(5000);
		type(PWAHamburgerMenuPage.objNewPassword, "igszee5\n", "password field");
		hideKeyboard();
		type(PWAHamburgerMenuPage.objConfirmNewPassword, "igszee5\n", "Current confirm field");
		hideKeyboard();
		if (getDriver().findElement(PWAHamburgerMenuPage.objUpdatePasswordButton).isEnabled() == true) {
			logger.info("Updated button is enabled when password field is not empty");
			extent.extentLogger("Update button", "Updated button is enabled when password field is not empty");
		}
		click(PWAHomePage.objZeeLogo, "zee logo");
		logout();
	}
	
	public void VerifyExternalLinkInShowsLandingPage() throws Exception {
		HeaderChildNode("Verify ExternalLink In ShowsLanding Page");
		reloadHome();
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
	//	verifyElementPresentAndClick(PWAHamburgerMenuPage.objMoreSettingInHamburger,
	//			"More settings in settings section");
		
		verifyElementPresent(PWAHamburgerMenuPage.objSettingInHamburger,
				"Settings section");
		
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objContentLanguage, "content language");
		if (verifyIsElementDisplayed(PWALandingPages.objHindiInContentLanguageSelected, "Hindi")) {
			logger.info("Hindi language is already selected");
			extent.extentLogger("Hindi", "Hindi language is already selected");
		} else {
			verifyIsElementDisplayed(PWALandingPages.objHindiInContentLanguageNotSelected, "Hindi language");
			click(PWALandingPages.objHindiInContentLanguageNotSelected, "Hindi language");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on Display language screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAShowsPage.objShows, "Shows tab");
		getDriver().navigate().refresh();
		waitTime(3000);
		for (int i = 0; i < 30; i++) {
			Swipe("UP", 1);
			waitTime(3000);
		}
		for (int i = 1; i <= 20; i++) {
			if (verifyIsElementDisplayed(PWALandingPages.objTrayTitleInUIContains("Play"), "Tray Play & Win")) {
				break;
			} else {
				Swipe("UP", 1);
			}
		}
		waitTime(3000);
		if (verifyIsElementDisplayed(PWAShowsPage.objPlayAndWin, "Play and Win tray")) {
			waitTime(2000);
			click(PWAShowsPage.objGuessScore, "Guess the score & win");
			waitTime(5000);
			getDriver().context("NATIVE_APP");
			try {
				getDriver().findElement(PWALiveTVPage.objChromeOpenWith).click();
				waitTime(2000);
				getDriver().findElement(PWALiveTVPage.objChromeOpenWith).click();

			} catch (Exception e) {
			}
			getDriver().context("CHROMIUM");
			System.out.println(getDriver().getCurrentUrl());
			androidSwitchTab();
			waitTime(7000);
			logger.info("URL opened: " + getDriver().getCurrentUrl());
			extent.extentLogger("New web page loaded", "URL opened: " + getDriver().getCurrentUrl());
			if (getDriver().getCurrentUrl().contains("games")) {
				logger.info("User is navigated to games page");
				extent.extentLogger("New web page loaded", "User is navigated to games page");
			} else {
				logger.info("User didn't get navigated to games page");
				extent.extentLogger("New web page is not loaded", "UUser didn't get navigated to games page");
			}
			AndroidSwitchToParentWindow();
			Back(1);
		} else {
			logger.info("Play and Win tray is not displayed");
		}
	}
	
	public void PWAUpNextHLS(String usertype) throws Exception {
		extent.HeaderChildNode("HLS_209 : Validate that user is able to select contents from upnext rail");
		System.out.println("HLS_209 : Validate that user is able to select contents from upnext rail");
		String keyword = "Episode 1 - All the World is Maid's Stage";
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWAHomePage.objSearchField, keyword + "\n", "Search");
		click(PWASearchPage.objSearchedResult1(keyword), "Search Result: " + keyword);
		String url = getDriver().getCurrentUrl();
		url = url + "?t=930";
		getDriver().get(url);
		if (waitExplicitlyForElementPresence(PWAPlayerPage.objUpnextCard, 30, "Up Next Card")) {
			extent.extentLoggerPass("", "Up Next Card located successfully");
		}
		click(PWAPlayerPage.objUpnextCard, "Up Next Card");
		waitTime(25000);
		String consumptionsPage = getText(PWAPlayerPage.objContentTitle);
		logger.info("Playing content: " + consumptionsPage);
		extent.extentLogger("", "Playing content: " + consumptionsPage);
		if (keyword.equals(consumptionsPage)) {
			logger.error("Upnext content failed to play");
			extent.extentLoggerFail("", "Upnext content failed to play");
		} else {
			logger.info("Upnext content played successfully");
			extent.extentLoggerPass("", "Upnext content played successfully");
		}
	}

	public void PWAWatchCreditsHLS(String usertype) throws Exception {
		extent.HeaderChildNode(
				"HLS_212 : Verify that watch credits button CTA is display at the end credit rolling screen, HLS_213 : Verify that watch credits button CTA is displayed along with UPNext  Rails on the player");
		System.out.println(
				"HLS_212 : Verify that watch credits button CTA is display at the end credit rolling screen, HLS_213 : Verify that watch credits button CTA is displayed along with UPNext  Rails on the player");
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		String keyword = "Episode 1 - All the World is Maid's Stage";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWAHomePage.objSearchField, keyword + "\n", "Search");
		click(PWASearchPage.objSearchedResult1(keyword), "Search Result: " + keyword);
		String url = getDriver().getCurrentUrl();
		url = url + "?t=930";
		getDriver().get(url);
		waitExplicitlyForElementPresence(PWAPlayerPage.objWatchCredit, 30, "Watch Credits CTA");
		if (verifyIsElementDisplayed(PWAPlayerPage.objUpnextCard, "Up Next Card")) {
			logger.info("Watch Credits and Up Next are displayed");
			extent.extentLoggerPass("", "Watch Credits and Up Next are displayed");
		}

		extent.HeaderChildNode(
				"HLS_214 : Validate that watch credits CTA close and content playback continues when user clicks on watch credit button.");
		System.out.println(
				"HLS_214 : Validate that watch credits CTA close and content playback continues when user clicks on watch credit button.");
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWAHomePage.objSearchField, keyword + "\n", "Search");
		click(PWASearchPage.objSearchedResult1(keyword), "Search Result: " + keyword);
		url = getDriver().getCurrentUrl();
		url = url + "?t=930";
		getDriver().get(url);
		waitExplicitlyForElementPresence(PWAPlayerPage.objWatchCredit, 30, "Watch Credits CTA");
		click(PWAPlayerPage.objWatchCredit, "Watch Credits CTA");
		String consumptionsPage = getText(PWAPlayerPage.objContentTitle);
		logger.info("Playing content: " + consumptionsPage);
		extent.extentLogger("", "Playing content: " + consumptionsPage);
		if (keyword.equals(consumptionsPage)) {
			logger.info("Content playback continued tapping on Watch Credits");
			extent.extentLoggerPass("", "Content playback continued tapping on Watch Credits");
		} else {
			logger.error("Content playback did not continue tapping on Watch Credits");
			extent.extentLoggerFail("", "Content playback did not continue tapping on Watch Credits");
		}
		reloadHome();
		extent.HeaderChildNode(
				"HLS_215 : Validate that next content playback should start on the player if user don't perform any action on watch credits button, "
						+ "HLS_207 : Validate the next content is auto-played on completion of first content in the player, "
						+ "HLS_211 : Validate that upnext content playback starts on the player post end of first content.");
		System.out.println(
				"HLS_215 : Validate that next content playback should start on the player if user don't perform any action on watch credits button, "
						+ "HLS_207 : Validate the next content is auto-played on completion of first content in the player, "
						+ "HLS_211 : Validate that upnext content playback starts on the player post end of first content.");
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWAHomePage.objSearchField, keyword + "\n", "Search");
		click(PWASearchPage.objSearchedResult1(keyword), "Search Result: " + keyword);
		url = getDriver().getCurrentUrl();
		url = url + "?t=930";
		getDriver().get(url);
		waitExplicitlyForElementPresence(PWAPlayerPage.objWatchCredit, 30, "Watch Credits CTA");
		extent.extentLoggerPass("", "Watch Credits CTA is displayed");
		waitTime(5000);
		logger.info("Waited for 5 seconds");
		extent.extentLogger("", "Waited for 5 seconds");
		waitTime(35000);
		consumptionsPage = getText(PWAPlayerPage.objContentTitle);
		logger.info("Playing content: " + consumptionsPage);
		extent.extentLogger("", "Playing content: " + consumptionsPage);
		if (keyword.equals(consumptionsPage)) {
			logger.error("Next content playback did not start on the player");
			extent.extentLoggerFail("", "Next content playback did not start on the player");
		} else {
			logger.info("Next content playback started on the player, since user did not perform any action");
			extent.extentLoggerPass("",
					"Next content playback started on the player, since user did not perform any action");
		}
	}
	
	public void PWAMoviesPageHLS(String usertype, String Tabname) throws Exception {
		extent.HeaderChildNode("HLS_022 : Verify user navigation to the Movies page");
		System.out.println("HLS_022 : Verify user navigation to the Movies page");
		PWAPagesNavigationAndTabHighlight(Tabname);
		extent.HeaderChildNode("HLS_023 : Verify the Auto rotation of carousel");
		System.out.println("HLS_023 : Verify the Auto rotation of carousel");
		verifyAutoroatingOnCarousel(Tabname);
		extent.HeaderChildNode("HLS_024 : Verify the rails name and content are loaded for first 2 scroll");
		System.out.println("HLS_024 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(Tabname);
		extent.HeaderChildNode("HLS_025 : Check for View all from different rails navigates to accurate screen");
		System.out.println("HLS_025 : Check for View all from different rails navigates to accurate screen");
		playCardFromCollections(userType, Tabname);
		reloadHome();
		if (userType.equals("Guest") || userType.equals("NonSubscribed")) {
		extent.HeaderChildNode(
				"HLS_026 : Verify the premium/Club tag is given on top left for all premium / Club content card");
		System.out.println(
				"HLS_026 : Verify the premium/Club tag is given on top left for all premium / Club content card");
		PWAPremiumOrClubIconVerification(Tabname);
	}	
		extent.HeaderChildNode("HLS_028 : Verify user can play any Free movie Content from the page");
		System.out.println("HLS_028 : Verify user can play any Free movie Content from the page");
		selectEnglishContentLanguage();
		navigateToAnyScreen("Movies");
		
		waitTime(10000);
		
		// handle mandatory pop up
		mandatoryRegistrationPopUp(usertype);
		click(PWAMoviesPage.objFreeContentCardFromTray, "Free Content from Tray");
		// waitForPlayerAdToComplete("Video Player");
		// pausePlayer();
		String freeMovieTitle = "";
		try {
			
	//		freeMovieTitle = getElementPropertyToString("innerText", PWAMusicPage.objConsumptionPageTitle,
			
					freeMovieTitle = getElementPropertyToString("innerText", PWAMusicPage.objConsumptionPageTitle1,
							
					"Free Movie Title in Consumptions Page").toString();
			logger.info("Free Movie Title in Consumptions Page: " + freeMovieTitle);
			extent.extentLogger("", "Free Movie Title in Consumptions Page: " + freeMovieTitle);
		} catch (Exception e) {
			logger.error("Failed to fetch Free Movie Title in Consumptions Page");
			extent.extentLoggerFail("", "Failed to fetch Free Movie Title in Consumptions Page");
		}
		Back(1);
		if (userType.equals("Guest") || userType.equals("NonSubscribed")) {
			extent.HeaderChildNode(
					"HLS_029 : Verify whether user is able to play Premium Movie Contents as a Guest/Non-Subscribed user");
			System.out.println(
					"HLS_029 : Verify whether user is able to play Premium Movie Contents as a Guest/Non-Subscribed user");
		}
	/*	
		if (userType.equals("ClubUser")) {
			extent.HeaderChildNode(
					"HLS_031 : Verify weather user is able to play Premium Movie Contents as Club/RSVOD user");
			System.out
					.println("HLS_031 : Verify weather user is able to play Premium Movie Contents as Club/RSVOD user");
		}
		
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_030 : Verify the User can play the Premium Movie Contents as a Premium all access user");
			System.out.println(
					"HLS_030 : Verify the User can play the Premium Movie Contents as a Premium all access user");
		}
	*/	
		// handle mandatory pop up
		mandatoryRegistrationPopUp(usertype);
		selectLanguages();
		navigateToAnyScreen("Movies");
		if (userType.equals("Guest") || userType.equals("NonSubscribed") || userType.equals("ClubUser")) {
		click(PWAMoviesPage.objPremiumContentCardFromTray, "Premium Content from Tray");
		waitTime(10000);
	//	if (userType.equals("Guest") || userType.equals("NonSubscribed") || userType.equals("ClubUser")) {
			if (!verifyIsElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
					"'You're watching a trailer' message on the player")) {
				verifyIsElementDisplayed(PWALiveTVPage.objPlayerInlineSubscriptionLink, "Inline Subscribe Link");
			}
		}
		// pausePlayer();
		String premiumMovieTitle = "";
		if (userType.equals("Guest") || userType.equals("NonSubscribed")) {
		try {
			
		//	premiumMovieTitle = getElementPropertyToString("innerText", PWAMusicPage.objConsumptionPageTitle,
			
					premiumMovieTitle = getElementPropertyToString("innerText", PWAMusicPage.objConsumptionPageTitle1,
							
					"Premium Movie Title in Consumptions Page").toString();
			logger.info("Premium Movie Title in Consumptions Page: " + premiumMovieTitle);
			extent.extentLogger("", "Premium Movie Title in Consumptions Page: " + premiumMovieTitle);
		} catch (Exception e) {
			logger.error("Failed to fetch Premium Movie Title in Consumptions Page");
			extent.extentLoggerFail("", "Failed to fetch Premium Movie Title in Consumptions Page");
		}
		}
		reloadHome();
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_032 : Validate the subscription popup availability at the end of the play back");
			System.out.println("HLS_032 : Validate the subscription popup availability at the end of the play back");
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieWithTrailer");
			zeeSearchForContentAndClickOnFirstResult(keyword);
			
		//	waitForElement(PWASubscriptionPages.objSubscribePopupTitle, 30, "Subscribe Pop up Title");
			
			waitForElement(PWAPlayerPage.objGetPremiumInline, 30, "Get Premium IN Line");
			
		//	if (verifyElementPresent(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop up Title")) 
			

				if (verifyElementPresent(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line")){
					
					click(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line");
					
					verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Unlock ZEE5Subscription page");
					
					waitTime(2000);
					
			//	click(PWASubscriptionPages.objPopupCloseButton, "Popup Close Button");
			}
		}
		Back(1);
		extent.HeaderChildNode(
				"HLS_034 : Verify at right side bottom arrow is given to navigate top of screen without scrolling");
		System.out.println(
				"HLS_034 : Verify at right side bottom arrow is given to navigate top of screen without scrolling");
		verificationOfBackToTop(Tabname);

	}
	

	public void PWAZeePlexPageHLS(String usertype, String Tabname) throws Exception {
		extent.HeaderChildNode("HLS_035 : Verify user navigation to ZEEPLEX landing page");
		System.out.println("HLS_035 : Verify user navigation to ZEEPLEX landing page");
		PWAPagesNavigationAndTabHighlight(Tabname);
		extent.HeaderChildNode("HLS_036 : Verify Whether ZEEPLEX  contents are displayed on the Zeeplex landing page");
		System.out.println("HLS_036 : Verify Whether ZEEPLEX  contents are displayed on the Zeeplex landing page");
		List<WebElement> titles = getDriver().findElements(PWAMoviesPage.objTVODTitles);
		if (titles.size() == 0) {
			logger.error("No contents in the ZEEPLEX landing page");
			extent.extentLoggerFail("", "No contents in the ZEEPLEX landing page");
		} else {
			for (int i = 0; i < titles.size(); i++) {
				logger.info("Contents title displayed in the ZEEPLEX page: " + titles.get(i).getAttribute("innerText"));
				extent.extentLogger("",
						"Contents title displayed in the ZEEPLEX pages: " + titles.get(i).getAttribute("innerText"));
			}
		}
			
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_037 : Verify whether ZEEPLEX contents trailer are played post click on the Trailer CTA");
			System.out
					.println("HLS_037 : Verify whether ZEEPLEX contents trailer are played post click on the Trailer CTA");
			Swipe("UP", 1);
			click(PWAHamburgerMenuPage.objTrailer, "Trailer button");
			waitTime(5000);
			verifyElementPresent(PWAPlayerPage.objWatchingATrailerMessage,
					"'You're watching a trailer' message on the player");
			Back(1);
			/*	
				extent.HeaderChildNode(
						"HLS_038 : Verify whether Rental popup displayed post click on the Rent for INR CTA of the Zeeplex contents");
				System.out.println(
						"HLS_038 : Verify whether Rental popup displayed post click on the Rent for INR CTA of the Zeeplex contents");
				click(PWAHamburgerMenuPage.objrentforINR, "Rent for INR");
				if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objrentforINRpopup, "Pop Up")) {
					extent.extentLoggerPass("", "Rental Pop Up is displayed");
					
				//	click(PWAHamburgerMenuPage.objrentalpopupclose, "Rental Pop Up Close button");
					waitTime(2000);
					
					Back(1);
				} else {
					logger.error("Failed to display Rental Pop Up");
					extent.extentLoggerFail("", "Failed to display Rental Pop Up");
				}
			}
			*/
			extent.HeaderChildNode(
					"HLS_038 : Verify whether Page Combo is displayed post click on the Rent for INR/Rent Now CTA of the Zeeplex contents");
			System.out.println(
					"HLS_038 : Verify whether Page Combo is displayed post click on the Rent for INR/Rent Now CTA of the Zeeplex contents");
			click(PWAHamburgerMenuPage.objrentforINR, "Rent for INR/Rent Now");
			if (verifyIsElementDisplayed(PWAHamburgerMenuPage.objPageCombo, "Page Combo")) {
				extent.extentLoggerPass("", "Rental Page Combo is displayed");
				
			//	click(PWAHamburgerMenuPage.objrentalpopupclose, "Rental Pop Up Close button");
				waitTime(2000);
				
				Back(1);
			} else {
				logger.error("Failed to display Rental Page Combo");
				extent.extentLoggerFail("", "Failed to display Rental Page combo");
			}
		}
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_037 : Verify whether user is navigated to ZEEPLEX player page post click on the Watch Now CTA");
			System.out
					.println("HLS_037 : Verify whether user is navigated to ZEEPLEX player page post click on the Watch Now CTA");
			Swipe("UP", 1);
			click(PWAHamburgerMenuPage.objWatchNow, "Watch Now button");
			waitTime(5000);
			verifyElementPresent(PWAPlayerPage.objConsumption,
					"ZEEPLEX Player page");
			Back(1);
			
		}
	}
	
	public void live() throws Exception {
		extent.HeaderChildNode("verifying that multiple languages are given to select with apply and reset button");
		
		Swipe("UP", 3);
		waitTime(3000);
		
		waitForElementDisplayed(PWALiveTVPage.objAllChnnelName, 10);
		
		verifyElementPresentAndClick(PWALiveTVPage.objLiveTVViewAll, "ViewAll option");
		
		waitTime(3000);
		
		verifyElementPresentAndClick(PWALiveTVPage.objLiveTvFilterOption, "Filter option");
		List<WebElement> languages = getDriver().findElements(By.xpath("//div[contains(@class,'language noSelect')]"));
		languages.size();
		if (languages.size() > 1) {
			logger.info("Multiple languages are given for selection");
			extent.extentLogger("Multiple languages", "Multiple languages are given for selection");
		} else {
			logger.info("Multiple languages are not given for selection");
			extent.extentLogger("Multiple languages", "Multiple languages are not given for selection");
		}
		verifyElementPresent(PWALiveTVPage.objApplyBtn, "Apply button");
		verifyElementPresent(PWALiveTVPage.objResetBtn, "Reset button");
		verifyElementPresentAndClick(PWALiveTVPage.objCloseLanguagePopuUpBtn,
				"Close button of Filter language setting window");
		
		Back(1);
		waitTime(10000);
		
	}
	
	/**
	 * Function To check the functionality of EditProfile option .
	 */
	public void editProfileFunctionality() throws Exception {
		dismissSystemPopUp();
		extent.HeaderChildNode("Edit Profile Functionality");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileText, "Edit profile page");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objEditProfileFirstName, "First name column");
		getDriver().findElement(PWAHamburgerMenuPage.objEditProfileFirstName).clear();
		type(PWAHamburgerMenuPage.objEditProfileFirstName, "Zee5\n", "Edit profile first name");
		hideKeyboard();
	//	Swipe("UP", 1);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objEditProfileSavechangesBtn, "Save changes");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objEditProfileGoBackBtn, "Back button");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profile page");
	}
	
	/**
	 * Login through Facebook
	 */
	public void facebookLogin() throws Exception {
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWALoginPage.objLoginBtn, "Login button");
		waitTime(5000);
		verifyElementPresentAndClick(PWALoginPage.objFacebookIcon, "Facebook Icon");
		System.out.println(getDriver().getWindowHandles());
		getDriver().switchTo().window("CDwindow-1");
		waitTime(7000);
		if (checkElementExist(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger")) {
			getDriver().switchTo().window("CDwindow-0");
			click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
			if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIcon, "Profile icon")) {
				logger.info("User Logged in Successfully");
				extent.extentLogger("Logged in", "User Logged in Successfully");
			}
		}

		else if (checkElementExist(PWALoginPage.objFacebookPageVerification, "Facebook page")) {
			//	verifyElementPresent(PWALoginPage.objFacebookLoginEmail, " Email Field");
				
				verifyElementPresentAndClick(PWALoginPage.objFacebookLoginEmail, " Email Field");
				waitTime(2000);
				
				type(PWALoginPage.objFacebookLoginEmail, "igszeetesttest@gmail.com", "Emial Field");
			//	verifyElementPresent(PWALoginPage.objFacebookLoginpassword, " Password Field");
				
				verifyElementPresentAndClick(PWALoginPage.objFacebookLoginpassword, " Password Field");
				waitTime(2000);
				
				type(PWALoginPage.objFacebookLoginpassword, "Igs$123Zee\n", "Password Field");
				verifyElementPresentAndClick(PWALoginPage.objFacebookLoginButtonInFbPage, "Login Button");
				waitTime(3000);
		
				directClickReturnBoolean(PWALoginPage.objFacebookContinueButton, "Continue button");
				waitTime(60000);
			
				getDriver().switchTo().window("CDwindow-0");
				click(PWALoginPage.objNotificationPopUp, "Notification PopUp");
				waitTime(3000);
				if (checkElementExist(PWALoginPage.objSignUpHeaderInSignUpPage, "SignUp Page")) {
					regestrationfromSocialMedia();
					verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIcon, "Profile icon")) {
						logger.info("User Logged in Successfully");
						extent.extentLogger("Logged in", "User Logged in Successfully");
					}
				} else {
					verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIcon, "Profile icon")) {
						logger.info("User Logged in Successfully");
						extent.extentLogger("Logged in", "User Logged in Successfully");
					}
				}

		} else if (verifyElementPresent(PWALoginPage.objFbCountinueBtn, "Continue button") == true) {
			click(PWALoginPage.objFbCountinueBtn, "Continue fb");
			if (verifyElementPresent(PWALoginPage.objSignUpHeaderInSignUpPage, "SignUp page") == true) {
				regestrationfromSocialMedia();
				verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
				click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
				if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIcon, "Profile icon")) {
					logger.info("User Logged in Successfully");
					extent.extentLogger("Logged in", "User Logged in Successfully");
				}
			} else {
				waitTime(7000);
				verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
				click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
				if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIcon, "Profile icon")) {
					logger.info("User Logged in Successfully");
					extent.extentLogger("Logged in", "User Logged in Successfully");
				}
			}
		}
		click(PWAHamburgerMenuPage.objCloseHamburgerMenu, "Close button");
		// logout();
	}
	
	
	/**
	 * Function to verify the Eduauraa in kids page
	 */
		public void PWAEduauraaVerification(String userType) throws Exception {
			extent.HeaderChildNode("Eduauraa validation");
			navigateToAnyScreen("Kids");
			waitTime(5000);
		//	verifyElementPresentAndClick(PWAHomePage.objEduauraaCardCarousel, "Eduauraa Card in Carousel");
			Swipe("UP",3);
			waitTime(1000);
			waitForElementDisplayed(PWAHomePage.objLearnWithEduauraaTray, 2000);
			verifyElementPresent(PWAHomePage.objLearnWithEduauraaTray, "Learn with Eduauraa tray");
			verifyElementPresentAndClick(PWAHomePage.objLearnWithEduauraaTray,
					"Learn with Eduauraa tray clicked");
			String currenturl = getDriver().getCurrentUrl();
			logger.info("Current URL :" + currenturl);
			extent.extentLogger("Tab", "Current URL :" + currenturl);
			if (currenturl.contains("collections/learn-with-eduauraa")) {
				logger.info("Navigated to Collections page");
				extent.extentLogger("url", "Navigated to Collections page");
			} else {
				logger.error("Failed to navigate to Collections page");
				extent.extentLoggerFail("url", "Failed to navigate to Collections page");
			}
			navigateToAnyScreen("Kids");
		//	verifyElementPresentAndClick(PWAHomePage.objEduauraaCardCarousel, "Eduauraa Card in Carousel");
			Swipe("UP",3);
			waitTime(1000);
			waitForElementDisplayed(PWAHomePage.objLearnWithEduauraaTray, 2000);
			verifyElementPresent(PWAHomePage.objLearnWithEduauraaTray, "Learn with Eduauraa tray");
			verifyElementPresentAndClick(PWAHomePage.objLearnWithEduauraaTray,
					"Learn with Eduauraa tray clicked");
		//	verifyElementPresent(PWAHomePage.objLearnWithEduauraaTray, "Learn with Eduauraa tray");
//			verifyElementPresentAndClick(PWAHomePage.objFirstItemLearnWithEduauraaTray,
//					"First card under Learn with Eduauraa tray");
			verifyElementPresentAndClick(PWALandingPages.objViewAllPageFirstContent, "First card in View All page");
			String consumptionPageTitle = getText(PWAPlayerPage.objContentTitle);
			extent.extentLogger("", "Navigated to the Consumption page: " + consumptionPageTitle);
			logger.info("Navigated to the Consumption page: " + consumptionPageTitle);
			pausePlayer();
			if (userType.equals("NonSubscribedUser") || (userType.equals("Guest"))) {
			verifyElementPresentAndClick(PWAHomePage.objClaimOffer, "Claim Offer CTA");
			verifyElementPresent(PWAHomePage.objSubscriptionPage, "Subscription page");
		}
			if (userType.equals("SubscribedUser")) {
				verifyElementPresentAndClick(PWAKidsPage.objKeepLearning, "Go to Eduauraa (Keep Learning) button");
				click(PWAKidsPage.objExitZee5Continue, "Continue button");
				String eduauraaLink = getDriver().getCurrentUrl();
				logger.info("Navigated to " + eduauraaLink);
				extent.extentLogger("", "Navigated to " + eduauraaLink);
				// https://lms.eduauraa.com/#/zee5/signup
				if (eduauraaLink.contains("lms.eduauraa.com") && eduauraaLink.contains("signup")) {
					logger.info("Navigated to Eduauraa Sign Up Page");
					extent.extentLogger("", "Navigated to Eduauraa Sign Up Page");
				} else {
					logger.error("Failed to navigate to Eduauraa Sign Up Page");
					extent.extentLoggerFail("", "Failed to navigate to Eduauraa Sign Up Page");
				}
		}
			
	}
				
	/**
	 * Function to verify the BuyPlan cta in player page inline
	 * @ throws Exception
	 * 
	 */
	public void premiumPopUp() throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"Verifing that Subscribe now or Login pop is displayed when user click on premium content");
			for (int scroll = 0; scroll <= 8; scroll++) {
				if (JSClick(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content")) {
					logger.info("Clicked on Premium Content Card");
					extent.extentLogger("", "Clicked on Premium Content Card");
					break;
				} else {
					Swipe("UP", 1);
					waitTime(2000);
				}
			}
			// click(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content");
			waitTime(5000);
			// waitForElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, 5);
			waitForElementDisplayed(PWAPlayerPage.objGetPremiumInline, 5);
			// if (verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle,
			// "Subscribe Pop Up")) {
			if (verifyIsElementDisplayed(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line")) {
				// verifyElementPresentAndClick(PWAPremiumPage.objClosePremiumPopup, "Subscribe
				// Pop Up Close icon");
				click(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line");
				Back(1);
				extent.HeaderChildNode("Verifing that premium content videos in landscape mode");
				// if (verifyIsElementDisplayed(PWALiveTVPage.objPlayerInlineSubscriptionLink,
				// "Player inline Subscribtion link")) {
				if (verifyIsElementDisplayed(PWAPlayerPage.objGetPremiumInline, "Get Premium IN Line")) {
					logger.info(
							"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
					extent.extentLogger("Maximize icon",
							"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
				}
			} else {
				pauseLiveTVPlayer();
				verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize icon");
				click(PWAPlayerPage.maximizeBtn, "Maximize icon");
				for (int i = 0; i < 5; i++) {
					if (verifyIsElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize icon")) {
						logger.info("User is able to watch Premium content in landscape mode");
						extent.extentLogger("Landscape mode",
								"User is able to watch Premium content in landscape mode");
						break;
					} else {
						playerTap();
					}
				}
			}
		}
		Back(1);
		waitTime(5000);

		// if (userType.equals("Guest") || userType.equals("NonSubscribedUser") ||
		// userType.equals("SubscribedUser")) {
		if (verifyIsElementDisplayed(PWAHomePage.objBackToTopArrow, "Back to Top arrow")) {
			click(PWAHomePage.objBackToTopArrow, "Back to Top arrow");
		}
		extent.HeaderChildNode("Verifing that user is able to watch the free Content");
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			navigateToAnyScreen("Live TV");
			waitforLiveTabToLoad();
			if (waitforLiveTabToLoad()) {
		//		verifyElementPresentAndClick(PWALiveTVPage.objFilterOption("FREE Channels"), "Free Channels filter");
				
				verifyElementPresentAndClick(PWALiveTVPage.objFilterOption("Free TV Channels"), "Free TV Channels filter");
				
				waitForElementDisplayed(PWALiveTVPage.objFirstfreeContentCard, 5);
//				verifyElementPresentAndClick(PWALiveTVPage.objFirstfreeContentCard, "Free Content card");
				JSClick(PWALiveTVPage.objFirstfreeContentCard, "Free Content card");
				waitForElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, 5);
				if (!(verifyIsElementDisplayed(PWASubscriptionPages.objSubscribePopupTitle, "Subscribe Pop Up"))) {
					logger.info("User is able to watch the free Content");
					extent.extentLogger("Free content", "User is able to watch the free Content");
				}
				extent.HeaderChildNode("Verifing that free content videos in landscape mode");
				waitTime(10000);
				pauseLiveTVPlayer();
				verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize icon");
				click(PWAPlayerPage.maximizeBtn, "Maximize icon");
				for (int i = 0; i < 5; i++) {
					if (verifyIsElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize icon")) {
						logger.info("User is able to watch free content in landscape mode");
						extent.extentLogger("Landscape mode", "User is able to watch free content in landscape mode");
						break;
					} else {
						playerTap();
					}
				}
				Back(2);
			}
		}
	}
	
	
	/**
	 * Function to verify the FAQ's in Help Center screen
	 * 
	 */

	public void populartopicsVerifications() throws Exception {
		System.out.println(getDriver().getContextHandles());
		getDriver().context("NATIVE_APP");
		verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Popular Topics"),
				"'Popular Topics' tab");
	/*	
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("F.R.I.E.N.D.S: The Reunion on ZEE5 Premium!"),
				"'F.R.I.E.N.D.S: The Reunion on ZEE5 Premium!'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("F.R.I.E.N.D.S: The Reunion on ZEE5 Premium!"),
				"Article title 'F.R.I.E.N.D.S: The Reunion on ZEE5 Premium!'");
		Back(1);
		waitTime(1000);
	*/	
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Where can I view my subscription information?"),
				"'Where can I view my subscription information?'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("Where can I view my subscription information?"),
				"Article title 'Where can I view my subscription information?'");
		Back(1);
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Registering with ZEE5"),
				"'Registering with ZEE5'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("Registering with ZEE5"),
				"Article title 'Registering with ZEE5'");
		Back(1);
		waitTime(2000);
	//	PartialSwipe("UP", 1);
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How do I watch ZEE5 on my television?"),
				"'How do I watch ZEE5 on my television'");
		verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle("How do I watch ZEE5 on my television"),
				"Article title 'How do I watch ZEE5 on my television?'");
		Back(1);
		waitTime(3000);
		PartialSwipe("UP", 1);
		waitTime(3000);
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Video not playing due to DRM/protected content"),
				"'Video not playing due to DRM/protected content'");
		verifyElementPresent(
				PWAHamburgerMenuPage.objArticleTitle("Video not playing error due to DRM/Protected Content"),
				"Article title 'Video not playing error due to DRM/Protected Content'");
		Back(1);
	}



}