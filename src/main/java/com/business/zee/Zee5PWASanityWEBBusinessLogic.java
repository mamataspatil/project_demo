
package com.business.zee;

import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.html5.LocalStorage;
import org.openqa.selenium.html5.SessionStorage;
import org.openqa.selenium.html5.WebStorage;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.Augmenter;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Reporter;
import org.testng.asserts.SoftAssert;
import com.driverInstance.CommandBase;
import com.emailReport.GmailInbox;
import com.extent.ExtentReporter;
import com.metadata.ResponseInstance;
import com.metadata.getResponseUpNextRail;
import com.metadata.responseWatchlist;
import com.propertyfilereader.PropertyFileReader;
import com.utility.LoggingUtils;
import com.utility.Utilities;
import com.zee5.PWAPages.*;
import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.AndroidElement;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import java.net.URL;
import org.openqa.selenium.chrome.ChromeDriver;
import io.restassured.response.Response;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import static com.business.zee.Zee5PWASmokeWEBBusinessLogic.partialScroll;

public class Zee5PWASanityWEBBusinessLogic extends Utilities {

	public Zee5PWASanityWEBBusinessLogic(String Application) throws InterruptedException {
		new CommandBase(Application);
		init();
	}

	private int timeout;

	/** Retry Count */
	private int retryCount;

	ExtentReporter extent = new ExtentReporter();

	private SoftAssert softAssert = new SoftAssert();

	/** The Constant logger. */
	// final static Logger logger = Logger.getLogger("rootLogger");
	static LoggingUtils logger = new LoggingUtils();

	/** The Android driver. */
	public AndroidDriver<AndroidElement> androidDriver;

	/** The Android driver. */
	public IOSDriver<WebElement> iOSDriver;

	Set<String> hash_Set = new HashSet<String>();

	@SuppressWarnings("unused")
	private String LacationBasedLanguge;

	List<String> LocationLanguage = new ArrayList<String>();

	List<String> DefaultLanguage = new ArrayList<String>();

	List<String> SelectedCONTENTLanguageInWelcomscreen = new ArrayList<String>();

	List<String> SelectedCONTENTLanguageInHamburgerMenu = new ArrayList<String>();

	/**
	 * ================================Fetching URL from
	 * pwaSanityWeb.xml==================================
	 * 
	 */

	String URL = getParameterFromXML("url");

	String BROWSER = getParameterFromXML("browserType");

	String NonSubUsername = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("NonsubscribedUserName");
	String NonSubPassword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("NonsubscribedPassword");
	String SubUsername = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("SubscribedUserName");
	String SubPassword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("SubscribedPassword");

	String ExpiredUserName = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("ExpiredUserName");
	String ExpiredUserPassword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("ExpiredUserPassword");
	String audioTrackContent = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
			.getParameter("audioTrackContent");

	Response resp;
	String PresentTitle;
	String AdValue = "AdnotPlayed";
	String contentTitle;

	ArrayList<String> MastheadTitleApi = new ArrayList<String>();

	public static boolean relaunchFlag = false;
	public static boolean appliTools = false;

	public static boolean PopUp = false;

	public int getTimeout() {
		return timeout;
	}

	public void setTimeout(int timeout) {
		this.timeout = timeout;
	}

	public int getRetryCount() {
		return retryCount;
	}

	public void setRetryCount(int retryCount) {
		this.retryCount = retryCount;
	}

	/**
	 * Initiate Property File.
	 *
	 * @param byLocator the by locator
	 */

//	public void scroll1() {
//		JavascriptExecutor js = (JavascriptExecutor) getWebDriver();
//		WebElement Element = getWebDriver().findElement(By.xpath("//h2[.='Trending on ZEE5']"));
//		js.executeScript("arguments[0].scrollIntoView();", Element);
//	}

	public void init() {

		PropertyFileReader handler = new PropertyFileReader("properties/Execution.properties");
		setTimeout(Integer.parseInt(handler.getproperty("TIMEOUT")));
		setRetryCount(Integer.parseInt(handler.getproperty("RETRY_COUNT")));
		logger.info(
				"Loaded the following properties" + " TimeOut :" + getTimeout() + " RetryCount :" + getRetryCount());
	}
	
	/**
	 * Method for login to all kind of users
	 * @param LoginMethod
	 * @throws Exception
	 */
	@SuppressWarnings("static-access")
	public void ZeeWEBPWALogin(String userType) throws Exception {
//		String userType = getParameterFromXML("userType");
        String Username = "";
        String Password = "";
		switch (userType) {
		case "Guest":
			extent.HeaderChildNode("Guest User");
			extent.extentLogger("Accessing the application as Guest user", "Accessing the application as Guest user");

		case "NonSubscribedUser":
			extent.HeaderChildNode("Login as NonSubscribed User");
			Username = getParameterFromXML("NonsubscribedUserName");
			Password = getParameterFromXML("NonsubscribedPassword");
//            closeCleverTapSigninPopup("confirm");
            loginViaEmailID(Username,Password);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Login as Subscribed User");
            Username = getParameterFromXML("SubscribedUserName");
            Password = getParameterFromXML("SubscribedPassword");
            closeCleverTapSigninPopup("confirm");
            loginViaEmailID(Username,Password);
			break;

		case "ClubUser":
			extent.HeaderChildNode("Login as Subscribed User");
            Username = getParameterFromXML("ClubUserName");
            Password = getParameterFromXML("ClubPassword");
			// allowPopUp();
			getWebDriver().findElement(By.xpath("//button[@id='wzrk-cancel']")).click();
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, Username, "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, Password, "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			break;
		}
		selectLanguages();
		verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		JSClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		extent.version = getText(By.xpath(".//*[@class='versionText']"));
		String ver = getText(By.xpath(".//*[@class='versionText']"));
		extent.extentLogger("", ver);
		verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		JSClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
	}

    public void closeCleverTapSigninPopup(String action) throws Exception {
        By cleverTap = null;
        if(action.equalsIgnoreCase("dismiss"))
            cleverTap=PWALoginPage.objCleverTapPopUp;
        else if(action.equalsIgnoreCase("confirm"))
            cleverTap=PWALoginPage.objCleverTapPopUpAccept;
        waitForElementPresence(cleverTap, 60, "clever tap pop up");
//			waitTime(5000);
        if (checkElementDisplayed(cleverTap, "clever tap pop up")) {
            WebElement popup = getWebDriver().findElement(cleverTap);
            popup.click();
            logger.info("Closed Clever tap pop up");
            extent.extentLogger("", "Closed Clever tap pop up");
        }
    }

    public void loginViaEmailID(String Username,String Password) throws Exception {
        verifyElementPresent(PWALoginPage.objWebLoginBtn, "Login button");
        JSClick(PWALoginPage.objWebLoginBtn, "Login button");
//        waitTime(3000);
        waitTime(1000);
        verifyElementPresent(PWALoginPage.objEmailField, "Email field");
        JSClick(PWALoginPage.objEmailField, "Email field");
        type(PWALoginPage.objEmailField, Username, "Email Field");
//        waitTime(3000);
        verifyElementPresent(PWALoginPage.objPasswordField, "Password Field");
        JSClick(PWALoginPage.objPasswordField, "Password Field");
        type(PWALoginPage.objPasswordField, Password, "Password field");
//        waitTime(5000);
        click(PWALoginPage.objWebLoginButton, "Login Button");
        waitTime(5000);
    }


	public void allowPopUp() throws Exception {
		waitTime(5000);
		click(PWALoginPage.objNotificationPopUp, "Notification PopUp");
//		click(PWAHomePage.objAllow, "Notification popup");
//		waitTime(3000);
//		click(PWAHomePage.objAllowCloseButton, "Close button");
//		waitTime(20000);
//		Robot robot = new Robot();
//		robot.keyPress(KeyEvent.VK_TAB);
//		waitTime(2000);
//		robot.keyPress(KeyEvent.VK_TAB);
//		waitTime(2000);
//		robot.keyPress(KeyEvent.VK_ENTER);
//		robot.keyRelease(KeyEvent.VK_ENTER);
		waitTime(3000);
		System.out.println("dismissed all");
	}

	/**
	 * Function to Enter DOB and Gender in SIGNUP Page.
	 */
	public void regestrationfromSocialMedia() throws Exception {
		extent.HeaderChildNode("Regestration Screen");
		click(PWASignupPage.objDayPickerTab, "Day Tab");
		verifyElementPresentAndClick(PWASignupPage.objDayPickerTabValue, "Day option");
		verifyElementPresentAndClick(PWASignupPage.objMonthPickerTab, "Month Tab");
		verifyElementPresentAndClick(PWASignupPage.objMonthPickerTabValue, "Month option");
		verifyElementPresentAndClick(PWASignupPage.objYearPickerTab, "year Tab");
		verifyElementPresentAndClick(PWASignupPage.objYearPickerTabValue, "year option");
		verifyElementPresentAndClick(PWASignupPage.objGenderMaleBtn, "Gender tab");
		verifyElementPresentAndClick(PWALoginPage.objSignUpBtn, "signUp button");
		waitTime(10000);
		verifyElementPresent(PWAHomePage.objZeeLogo, "Zee logo");
		logger.info("User Logged in Successfully");
		extent.extentLogger("Logged in", "User Logged in Successfully");
	}

	public void WEBPWAValidatingSubscriptionAndTransaction(String userType) throws Exception {
		if ((userType.equals("Guest") || (userType.equals("NonSubscribedUser")))) {
			extent.HeaderChildNode("Validation of Buy Plan CTA on Carousel");
			List<WebElement> ele = getWebDriver().findElements(PWAHomePage.objGetPremiumWeb);
			System.out.println(ele.size());
			if (ele.size() == 0) {
				System.out.println("Buy Plan CTA on Carousel is not displayed");
				logger.info("Buy Plan CTA on Carousel is not displayed");
				extent.extentLogger("<b>" + "Buy Plan CTA on Carousel is not displayed..",
						"Buy Plan CTA on Carousel is not displayed.");
			} else {
				System.out.println("Buy Plan CTA on Carousel is displayed");
				logger.info("Buy Plan CTA on Carousel is displayed");
				extent.extentLogger("<b>" + "Buy Plan CTA on Carousel is displayed..",
						"Buy Plan CTA on Carousel is displayed.");
				for (int i = 1; i < ele.size(); i++) {
					verifyElementExist1(ele.get(i), "Buy Plan CTA on Carousel");
				}
			}
			if (userType.equals("Guest")) {
				extent.HeaderChildNode("Validating Buy Plan and Have A Prepaid Code under Plans");
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Button");
				if (checkElementDisplayed(PWAHamburgerMenuPage.objPlans, "Plans")) {
					checkElementDisplayed(PWAHamburgerMenuPage.objBuySubscription, "Buy Plan");
					checkElementDisplayed(PWAHamburgerMenuPage.objHaveAPrepaidCode, "Have a Prepaid Code");
				}
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objHomeInOpenMenuTab, "Home");
			}
		}
	}

	/**
	 *  Method to wait for the element and click on it once displayed
	 */

	public void waitForElementAndClick(By locator, int seconds, String message) throws InterruptedException {
		main: for (int time = 0; time <= seconds; time++) {
			try {
				getWebDriver().findElement(locator).click();
				logger.info("Clicked element " + message);
				extent.extentLogger("clickedElement", "Clicked element " + message);
				break main;
			} catch (Exception e) {
				Thread.sleep(1000);
				if (time == seconds) {
					logger.error("Failed to click element " + message);
					extent.extentLoggerFail("failedClickElement", "Failed to click element " + message);
				}
			}
		}
	}

//	public void WEBPWAValidatingSubscribeLinks(String userType) throws Exception {
//		extent.HeaderChildNode(" Validating Subscription Link");
//		Thread.sleep(10000);
//		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
//		waitTime(2000);
//		type(PWASearchPage.objSearchEditBox, "Bhinna", "Search Field");
//		waitTime(3000);
//		click(PWASearchPage.objSearchResultPremiumContent, "Premium content");
//		waitTime(10000);
//		if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Close in Register Pop Up")) {
//			click(PWASearchPage.objCloseRegisterDialog, "Close in Register Pop Up");
//			logger.info("clicked on popup close button");
//			extent.extentLogger("clicked on popup close button", "clicked on popup close button");
//		} else {
//			logger.info("Register Popup not displayed");
//			extent.extentLogger("Register Popup not displayed", "Register Popup not displayed");
//		}
//		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//			checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link");
//		}
//		Thread.sleep(5000);
//		try {
//			waitForElementDisplayed(PWAHamburgerMenuPage.objGetPremiumCTAbelowPlayer, 30);
//
//			// Validating GET PREMIUM CTA BUTTON below Player
//			extent.HeaderChildNode("Validating Get Premium CTA below the player");
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumCTAbelowPlayer,
//					"GET PREMIUM CTA BELOW PLAYER ") == true) {
//				click(PWAHamburgerMenuPage.objGetPremiumCTAbelowPlayer, "GET PREMIUM CTA BELOW PLAYER");
//
//				Thread.sleep(3000);
//				extent.HeaderChildNode("Validating Get Premium Popup");
//				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//					checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link");
//				}
//
//			} else {
//				extent.HeaderChildNode("Validating Get Premium Popup");
//				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//					checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link");
//				}
//
//			}
//		} catch (Exception e) {
//			System.out.println("GetPremiumCTAbelowPlayer is not displayed");
//		}
//		waitTime(2000);
//		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//		}
//		click(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
//		waitTime(5000);
//		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
//			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
//		}
//
//		if(userType.equals("Guest") || userType.equals("NonSubscribedUser"))
//		{
//			extent.HeaderChildNode("Validating Player In-line Subscribe link");
//			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
//			waitTime(2000);
//			type(PWASearchPage.objSearchEditBox, "Londonalli Lambodara", "Search Field");
//			waitTime(3000);
//			click(PWASearchPage.objSearchResultPremiumContent, "Premium content");
//			waitTime(10000);
//
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//			}
//
//			checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Player In-line Subscribe link");
//
//			waitTime(2000);
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//			}
//			click(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
//			waitTime(5000);
//
//			if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
//				click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
//			}
//			
//		}
//
//	}

	public void WEBPWAValidatingSubscribeLinks(String userType) throws Exception {
		extent.HeaderChildNode(" Validating Subscription Link");
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("Validating Player In-line Subscribe link");
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2000);
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieNoTrailer2");
			mandatoryRegistrationPopUp(userType);
			type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
			waitTime(3000);
//			click(PWASearchPage.objSearchResultPremiumContent, "Premium content");
			JSClick(PWASearchPage.objPremiumSearchResult(keyword), "Premium content");
			waitTime(10000);
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//			}

			if (checkElementDisplayed(PWAPlayerPage.objSubscribeNowLink, "Player In-line Subscribe link")) {
				System.out.println("Player In-Line Subscribe link is displayed");
				extent.extentLogger("Player In-Line Subscribe link is displayed",
						"Player In-Line Subscribe link is displayed");
			} else {
				System.out.println("Player In-Line Subscribe link is not displayed");
				extent.extentLoggerFail("Player In-Line Subscribe link is not displayed",
						"Player In-Line Subscribe link is not displayed");
			}

			waitTime(2000);
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
//				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "ZeeLogo");
			waitTime(5000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objWouldYouLikeWatchMorePopup,
					"WOULD YOU LIKE WATCH MORE POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objWouldYouLikeWatchMoreCloseButton,
						"POP-UP CLOSE BUTTON");
			}
		}
	}

	/**
	 * Function to enter url
	 */
	public void enterURLInWEBBrowser(String browser, String url) {
		extent.HeaderChildNode("Enter Browser URL");
		if (browser.equalsIgnoreCase("chrome")) {
			try {
				getWebDriver().get(url);
				extent.extentLogger("enteredURL", "Entered " + url + " in " + browser + " browser");
				logger.info("Entered " + url + " in " + browser + " browser");
			} catch (Exception e) {
				extent.extentLogger("failToEnterURL", "Failed to enter " + url + " in " + browser + " browser");
			}
		}
	}

	public void verifyUIofHomePage() throws Exception {
		extent.HeaderChildNode("Validation of UI of Homepage");
		waitTime(5000);
		String tab = getText(PWAHomePage.objActiveTab);
		System.out.println(tab);
		extent.HeaderChildNode("Validating user is landing on Homepage by default");
		if (tab.equalsIgnoreCase("Home")) {
			logger.info("Navigated to Home page");
			extent.extentLogger("Home Page", "Navigated to Home page");
		} else {
			logger.info("Not navigated to Home page");
			extent.extentLogger("Home Page", "Not navigated to Home page");
		}
		extent.HeaderChildNode("Validating Zee Logo on Homepage");
		verifyElementPresent(PWAHomePage.objZeeLogo, "Zee Logo");
		extent.HeaderChildNode("Validating Search button on Homepage");
		verifyElementPresent(PWAHomePage.objSearchBtn, "Search button");
		extent.HeaderChildNode("Validating Language Selection option on Homepage");
		checkElementDisplayed(PWAHomePage.objLanguageBtn, "Language Selection Button");
		extent.HeaderChildNode("Validating Subscribe button on Homepage");
		checkElementDisplayed(PWAHomePage.objSubscribeBtn, "Subscribe button");
		extent.HeaderChildNode("Validating Hamburger menu on Homepage");
		verifyElementPresent(PWAHomePage.objHamburgerMenu, "Hamburger menu");
		extent.HeaderChildNode("Validating Login button on Homepage");
		checkElementDisplayed(PWALoginPage.objWebLoginBtn, "Login button");
		extent.HeaderChildNode("Validating Sign Up for free button on Homepage");
		checkElementDisplayed(PWALoginPage.objSignUpBtnWEB, "Sign Up for free");
	}

	public void searchResultScreen(String title) throws Exception {

		searchEpisode("Anika tries to be careful");
		searchMovie("Gooli");
		searchShow("The toy box");
		searchActor("Nani");
		searchEDRContent("Vegetative Propagation");
		searchActive();
		extent.HeaderChildNode("Validating that user is able to enter keys in search box.");
		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		extent.HeaderChildNode(
				"Validating that search result screen is displayed once user enters 3rd character in the search box.");
		String enteredValue = getAttributValue("value", PWASearchPage.objSearchEditBox);
		if (enteredValue.length() >= 3) {
			if (checkElementDisplayed(PWASearchPage.objSearchResultScreen, "Search result screen")) {
				logger.info("Search result screen is displayed once user enters 3rd character in the search box.");
				extent.extentLogger("Search result screen",
						"Search result screen is displayed once user enters 3rd character in the search box.");
			} else {
				logger.info("Search result screen is not displayed");
				extent.extentLogger("Search result screen",
						"Search result screen is not displayed when user enters less than 3 characters in the search box.");
			}
		} else {
			logger.info(
					"Search result screen is not displayed when user enters less than 3 characters in the search box.");
		}
		waitTime(10000);

		extent.HeaderChildNode("Validating that related search results are available under each tabs");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Episodes"), "Episodes Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Movies"), "Movies Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("News"), "News Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Music"), "Music Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Videos"), "Videos Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		extent.HeaderChildNode(" Verify the Searched contents/Term is shown to the user as Recent searches");
		String keywordB = "Gattimela";
		type(PWASearchPage.objSearchEditBox, keywordB, "Search edit box");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchShowsTab, "TV Shows tab");
		mandatoryRegistrationPopUp(userType);
		JSClick(PWASearchPage.objSearchedResult(keywordB), "Search Result " + keywordB);
		waitTime(2000);
		JSClick(PWAHomePage.objSearchBtn, "Search icon");
		waitTime(3000);
		verifyElementPresent(PWASearchPage.recentSearchsLabel, "Recent Searches tray");
		verifyElementPresent(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text");
		if (checkElementDisplayed(PWASearchPage.recentSearchItem1, "First Recent Search Item")) {
			if (getText(PWASearchPage.recentSearchItem1).equals(keywordB)) {
				logger.info(keywordB + " is displayed under Recent Searches as expected");
				extent.extentLogger("", keywordB + " is displayed under Recent Searches as expected");
			} else {
				logger.error(keywordB + " is not the first item under Recent Searches");
				extent.extentLoggerFail("", keywordB + " is not the first item under Recent Searches");
			}
		} else {
			logger.error("There is no item under Recent Searches");
			extent.extentLoggerFail("", "There is no item under Recent Searches");
		}

		extent.HeaderChildNode("Verify after click on the \"Clear All\" button user is able to clear Recent Searches.");
		click(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text");
		waitTime(7000);
		if (checkElementDisplayed(PWASearchPage.recentSearchsLabel, "Recent Searches tray")) {
			logger.error("Recent Searches tray is displayed even after clicking Clear All text");
			extent.extentLoggerFail("", "Recent Searches tray is displayed even after clicking Clear All text");
		}
		if (checkElementDisplayed(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text")) {
			logger.error("Clear All text is displayed even after clicking Clear All text");
			extent.extentLoggerFail("", "Clear All text is displayed even after clicking Clear All text");
		}
		List<WebElement> recentSearchItems = findElements(PWASearchPage.recentSearchItems);
		int size = recentSearchItems.size();
		if (size > 0) {
			logger.error(size + "keywords are found under Recent Searches even after Clear All tap");
			extent.extentLoggerFail("", size + "keywords are found under Recent Searches even after Clear All tap");
		} else {
			logger.info("Previous Recent searched Keywords are not displayed");
			extent.extentLogger("", "Previous Recent searched Keywords are not displayed");
		}

		extent.HeaderChildNode(
				"Verify whether user is able to clear the searched term on Click of close(X) icon in the search field.");
		type(PWASearchPage.objSearchEditBox, keywordB, "Search edit box");
		verifyElementPresent(PWAHamburgerMenuPage.objSearchCloceicon, "Close icon(x)");
		click(PWAHamburgerMenuPage.objSearchCloceicon, "Close icon(x)");
		String SearchEditBox = getText(PWASearchPage.objSearchEditBox);
		System.out.println(SearchEditBox);
		if (SearchEditBox.equals(" ")) {
			logger.info(" user is able to clear the searched term on Click of close(X) icon ");
			extent.extentLoggerPass("Search page",
					" user is able to clear the searched term on Click of close(X) icon ");
		} else {
			logger.error(" user is not  able to clear the searched term on Click of close(X) icon ");
			extent.extentLoggerFail("Search page",
					" user is not able to clear the searched term on Click of close(X) icon ");
		}

		extent.HeaderChildNode(
				"HLS_185: Validate the Trending Searches tray is available on the Search landing screen");
		verifyElementPresent(PWASearchPage.objTrendingSearchesTray, "Trending Searches tray");

		extent.HeaderChildNode("HLS_186: Validate the Top Searches tray is available on the Search landing screen");
		checkElementDisplayed(PWASearchPage.objTopsearches, "Top Searches tray");

	}

	public void searchEpisode(String title) throws Exception {
		HeaderChildNode("Validating that search result displayed when user search for episode");
		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		if (!checkElementDisplayed(PWASearchPage.objVoiceSearchButton, "Mic")) {
			logger.info("Voice search icon is not present while search result is present");
			extent.extentLogger("Mic", "Voice search icon is not present while search result is present");
		}
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Episodes"), "Episodes Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		clearField(PWASearchPage.objSearchEditBox, "Search field");
	}

	public void searchShow(String title) throws Exception {
		HeaderChildNode("Validating that search result displayed when user search for show");
		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		clearField(PWASearchPage.objSearchEditBox, "Search field");
	}

	public void searchMovie(String title) throws Exception {
		HeaderChildNode("Validating that search result displayed when user search for Movie");
		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Movies"), "Movies Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		clearField(PWASearchPage.objSearchEditBox, "Search field");
	}

    public void verifySearchBoxDisplayedAndClick() throws Exception {
        if(!checkElementDisplayed(PWASearchPage.objSearchEditBox, "search box")){
            verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
            waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
        }
    }

	public void searchActive() throws Exception {
		HeaderChildNode("Validating Search result displayed when user search for Active Program");
		Back(1);
		waitTime(5000);
		// partialScroll();
		waitTime(2000);
		if (checkElementDisplayed(PWAHomePage.objHomeBarText("Live TV"), "Live TV Tab")) {
			click(PWAHomePage.objHomeBarText("Live TV"), "Live TV Tab");
		} else if (checkElementDisplayed(PWAHomePage.objMoreMenuIcon, "More Menu Icon") == true) {
			verifyElementPresentAndClick(PWAHomePage.objMoreMenuIcon, "More Menu Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHomePage.objMoreMenuTabs("Live TV"), "Live TV Tab");
		} else {
			click(PWALiveTVPage.objLiveTVMenu, "Live TV Tab");
		}
		waitforLiveTabToLoad();
		checkElementDisplayed(PWALiveTVPage.objCardTitle, "Active program");
		String ActiveProgram = getText(PWALiveTVPage.objCardTitle);
		logger.info("Active program fetched from Live TV : " + ActiveProgram);
		extent.extentLogger("Result", "Active program fetched from Live TV : " + ActiveProgram);
		click(PWAHomePage.objZeelogo1, "Home page");
		waitTime(3000);
		click(PWAHomePage.objSearchBtn, "Search");
		type(PWASearchPage.objSearchEditBox, ActiveProgram, "Edit field");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		if (checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result")) {
			logger.info("Active program Search result is present in all tab");
			extent.extentLogger("Result", "Active program Search result is present in all tab");
		} else {
			logger.error("Active program Search result is not present in all tab");
			extent.extentLoggerFail("Result", "Active program Search result is not present in all tab");
		}
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("News"), "News Tab");
		if (checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result")) {
			logger.info("Search result is present in news tab");
			extent.extentLogger("Result", "Search result is present in news tab");
		} else {
			logger.info("Search result is not present in news tab");
			extent.extentLogger("Result", "Search result is not present in news tab");
		}
		clearField(PWASearchPage.objSearchEditBox, "Search field");
	}

	public void landingOnSearchScreen() throws Exception {
		extent.HeaderChildNode("Validating that user lands on search landing screen");

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		if (checkElementDisplayed(PWASearchPage.objSearchEditBox, "Search EditBox")) {
			logger.info("User landed on Search landing screen post tapping on search icon");
			extent.extentLogger("Search landingscreen",
					"User landed on Search landing screen post tapping on search icon");
		}

		extent.HeaderChildNode("Validating that voice search icon is displayed on Search box ( Microphone icon)");

		checkElementDisplayed(PWASearchPage.objVoiceSearchButton, "Voice Search icon");
	}

	public void liveTv(String title) throws Exception {
		extent.HeaderChildNode(
				"Validating that Live TV card is displayed when user searches by any On Going Live TV content name");
		waitTime(3000);

		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
		waitTime(10000);
		if (checkElementDisplayed(PWALiveTVPage.objLivelogo, "Live logo")) {
			logger.info("Live Tv card is displayed");
			extent.extentLogger("Live Tv card", "Live Tv card is displayed");
		} else {
			logger.info("Live Tv card is not displayed");
			extent.extentLogger("Live Tv card", "Live Tv card is not displayed");
		}
		waitTime(3000);
		click(PWALiveTVPage.objLivelogo, "Live logo");
		waitTime(10000);
		Back(1);
		waitTime(5000);
		extent.HeaderChildNode("Validating that the Recent Searches overlay is available on Search landing screen");
		checkElementDisplayed(PWASearchPage.objRecentSearchesOverlay, "Recent Searches overlay");
	}

	public void navigationToConsumptionScreenThroughTrendingSearches(String userType) throws Exception {

		extent.HeaderChildNode("Navigation to Consumption Screen through Trending Searches");
		waitTime(3000);
		mandatoryRegistrationPopUp(userType);
		JSClick(PWAHomePage.objSearchBtn, "Search icon");
		if (verifyElementPresent(PWASearchPage.objTrendingSearchesTray, "Trending Searches tray")) {

			checkElementDisplayed(PWASearchPage.objSecondAssetThumbnailTrendingSearch,
					"Second asset thumbnail of Trending searches tray");

			checkElementDisplayed(PWASearchPage.objSecondAssetTitleTrendingSearch,
					"Second asset title of Trending searches tray");

			if (checkElementDisplayed(PWAPlayerPage.objCloseBtnLoginPopup, "Login Pop-up")) {
				click(PWAPlayerPage.objCloseBtnLoginPopup, "Login Pop-up");
			}

			String searchScreenTitle = getElementPropertyToString("innerText",
					PWASearchPage.objSecondAssetTitleTrendingSearch, "Second Asset Title of Trending Search");
			System.out.println(searchScreenTitle);
			click(PWASearchPage.objSecondAssetThumbnailTrendingSearch,
					"Second asset thumbnail of Trending searches tray");
			waitTime(8000);

			if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Register popup")) {
				waitTime(2000);
				click(PWAPlayerPage.objCloseRegisterDialog, "Register popup close icon");
			}

			if (checkElementDisplayed(CompleteYourProfilePopUp.objCompleteYourProfileTxt,
					"Complete Your Profile pop up")) {
				click(CompleteYourProfilePopUp.objCloseBtn, "Complete your profile popup Close Button");

			}

			waitTime(6000);

			if (checkElementDisplayed(PWASearchPage.objShowTitleInConsumptionSreen, "Show title In Consumption")) {
				String ConsumptionScreenShowTitle = getText(PWASearchPage.objShowTitleInConsumptionSreen);
				waitTime(3000);
				System.out.println(searchScreenTitle + " " + ConsumptionScreenShowTitle);
				if (searchScreenTitle.contains(ConsumptionScreenShowTitle)) {
					logger.info("user is navigated to respective consumption screen");
					extent.extentLogger("Consumption Screen", "user is navigated to respective consumption screen");
				} else {
					logger.info("user is not navigated to respective consumption screen");
					extent.extentLogger("Consumption Screen", "user is navigated to respective consumption screen");
				}
			} else {
				String showtitle = getText(PWASearchPage.objShowTitle(searchScreenTitle));
				waitTime(3000);

				if (searchScreenTitle.contains(showtitle)) {
					logger.info("user is navigated to respective consumption screen");
					extent.extentLogger("Consumption Screen", "user is navigated to respective consumption screen");
				} else {
					logger.info("user is not navigated to respective consumption screen");
					extent.extentLogger("Consumption Screen", "user is navigated to respective consumption screen");
				}
			}
		} else {
			logger.info("Trending searched tray is not displayed");
			extent.extentLogger("Search Screen", "Trending searched tray is not displayed");
		}
		Back(1);
	}

	public String fetchLiveContent() throws Exception {
		extent.HeaderChildNode("Fetching the Live Content name from Live Tab");

		getWebDriver().get(URL);
		waitTime(5000);
		partialScroll();
		waitTime(2000);
		if (checkElementDisplayed(PWAHomePage.objHomeBarText("Live TV"), "Live TV Tab")) {
			click(PWAHomePage.objHomeBarText("Live TV"), "Live TV Tab");
		} else if (checkElementDisplayed(PWAHomePage.objMoreMenuIcon, "More Menu Icon") == true) {
			verifyElementPresentAndClick(PWAHomePage.objMoreMenuIcon, "More Menu Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHomePage.objMoreMenuTabs("Live TV"), "Live TV Tab");
		} else {
			click(PWALiveTVPage.objLiveTVMenu, "Live TV Tab");
		}

		waitTime(15000);
		String liveTVContentName = findElement(PWALiveTVPage.objCardTitle).getText();
		System.out.println(liveTVContentName);

		return liveTVContentName;

	}

	/**
	 * Function to Onboarding scenarios to their respective Test scenario.
	 */
	public void OnboardingScenario(String userType) throws Exception {
		switch (userType) {
		case "Guest":
			extent.HeaderChildNode("Guest user ");
			launchCheck(userType);
			navigationToMyPlanFromHome("NewRegister");
			navigationToMyPlanFromHome("Logged in");
			playerInLineLoginCheck(); //Buy plan CTA verification in player build has been included
//			navigationToCTAInPlayerFromSearch(userType);
			if (checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login")) {
				extent.extentLogger("Not Logged in", "User is not logged in");
				logger.info("User is not logged in");
//				noLogoutOption();
//				forgotPassword();
//				waitTime(5000);
				getWebDriver().get(URL);
				waitTime(2000);
				if (!checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login")) {
					logout();
				}
				waitTime(2000);
				// SANITY
				phoneNumberRegistration();
//                emailRegistration();
//				facebookLogin();
//				twitterLogin();
				forgotPasswordEmail();
				forgotPasswordMobileNumber();
			}
			break;
		case "NonSubscribedUser":
			extent.HeaderChildNode("Non-Subscribed user ");
			if (!checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login")) {
				logout();
			}
			LoginPageValidation(userType);
			waitTime(3000);
			launchCheck(userType);
			myaccountOptionsVerification();
			NavigateToMyProfilePage();
			verificationsInMyProfilePage();
			editProfileFuncionality();
			subscribeCTAFuncionality();
			changePasswordFuncionality();
			break;
		case "SubscribedUser":
			extent.HeaderChildNode("Subscribed user ");
			waitTime(3000);
			launchCheck(userType);
			myaccountOptionsVerification();
			NavigateToMyProfilePage();
			verificationsInMyProfilePage();
			editProfileFuncionality();
			myPlanVerification();
			changePasswordFuncionality();
		}
	}

	public void LoginPageValidation(String userType) throws Exception {
		extent.HeaderChildNode("Verify whether User native login screen");
		verifyElementPresent(PWALoginPage.objLoginPage, "Login to ZEE5 page");

		extent.HeaderChildNode(
				"Verify the user can navigate to OTP Verification screeen when login via registered Mobile Num");
		verifyElementPresent(PWALoginPage.objEmailField, "Email field");
		JSClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "8660341328", "Email Field");
		click(PWALoginPage.objWebLoginButton, "Login Button");
		verifyElementPresent(PWAHamburgerMenuPage.objOTPScreenToLogin, "OTP Screen To Login ");

		extent.HeaderChildNode(
				"Verify user is able to see Enter Password Pop-up to enter password on clicking on Password CTA for Mobile Login");
		verifyElementPresent(PWAHamburgerMenuPage.objEnterPasswordInOTPScreen, "Enter Password");
		click(PWAHamburgerMenuPage.objEnterPasswordInOTPScreen, "Enter Password");
		verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter password popup");

		extent.HeaderChildNode(
				"Verify user is able to login via entering password on clicking Password CTA for Mobile Login");
		verifyElementPresent(PWALoginPage.objPasswordField, "Password Field");
		JSClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "vasilucky@123", "Password field");
		verifyElementPresent(PWAHamburgerMenuPage.objPopUpProceedBtn, "Proceed button");
		click(PWAHamburgerMenuPage.objPopUpProceedBtn, "Proceed button");
		if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIconInProfilePage, "profile icon")) {
			logger.info("user is able to login through mobile number , expected result ");
			extent.extentLoggerPass("", "user is able to login through mobile number , expected result ");

		} else {

			logger.info("user is not able to login through mobile number");
			extent.extentLoggerFail("", "user is not able to login through mobile number");
		}
		if (!checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login")) {
			logout();
		}

		extent.HeaderChildNode("Verify the Login with Invalid Credentials");
		verifyElementPresent(PWALoginPage.objWebLoginBtn, "Login button");
		JSClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objEmailField, "Email field");
		JSClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "abc.abc@gmail.com", "Email Field");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objPasswordField, "Password Field");
		JSClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "123456", "Password field");
		click(PWALoginPage.objWebLoginButton, "Login Button");
		try {
			Boolean SavedChangesToastMessage = getWebDriver().getPageSource().contains("//*[@class='toastMessage']");
			if (SavedChangesToastMessage == true) {
				extent.extentLogger("Toast", "Saved Changes Toast Message displayed");
				logger.info("Saved Changes Toast Message displayed");
			} else {
				extent.extentLogger("Toast", "Saved Changes Toast Message not displayed");
				logger.info("Saved Changes Toast Message not displayed");
			}
		} catch (Exception e) {
			System.out.println("Toast message is not displayed");
		}

		navigateHome();
		extent.HeaderChildNode("Verify the Login via Email user Crdentials");
		verifyElementPresent(PWALoginPage.objWebLoginBtn, "Login button");
		JSClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objEmailField, "Email field");
		JSClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "vasilucky1997@gmail.com", "Email Field");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objPasswordField, "Password Field");
		JSClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "vasilucky@123", "Password field");
		click(PWALoginPage.objWebLoginButton, "Login Button");
		if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIconInProfilePage, "profile icon")) {
			logger.info("user is able to login through mobile number , expected result ");
			extent.extentLoggerPass("", "user is able to login through mobile number , expected result ");

		} else {

			logger.info("user is not able to login through mobile number");
			extent.extentLoggerFail("", "user is not able to login through mobile number");
		}

		if (!checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login")) {
			logout();
		}
		forgotPasswordEmail();
		facebookLogin();
		twitterLogin();
	}

	/**
	 * Function To check the SignIn page from MyPlans screen.
	 */
	public void navigationToMyPlanFromHome(String UserType) throws Exception {
		extent.HeaderChildNode(
				"Validating user navigated to signin screen from my plans screen through logged in and NewRegister email id");
		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Get Premium button");
		waitTime(3000);
		if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
			logger.info("User is navigated to Subscription page");
			extent.extentLogger("Subscription page", "User is navigated to Subscription page");
			if (UserType == "Logged in") {
				navigationToSignInFromMyplans("Logged in");
			}
			if (UserType == "NewRegister") {
				navigationToSignInFromMyplans("NewRegister");
			}
		} else {
			logger.info("User is not navigated to Subscription page");
			extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
		}
	}

	public void playerInLineLoginCheck() throws Exception {
		extent.HeaderChildNode("Login page check from Player Inline popup");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
//		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
//				.getParameter("premiumMovieNoTrailer2");
        String keyword = getParameterFromXML("premiumMovieNoTrailer2");
        type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(4000);
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		click(PWASearchPage.objPremiumSearchResult(keyword), "Premium content");
//		waitTime(12000);
//        waitTime(5000);
        checkDisplayOfSubscriptionPopupAndClose();
		verifyElementPresent(PWASubscriptionPages.objLoginLinkInPlayer, "Login link");
		JSClick(PWASubscriptionPages.objLoginLinkInPlayer, "Login link");
//		waitTime(3000);
		if (checkElementDisplayed(PWALoginPage.objEmailField, "Login")) {
			logger.info("User is redirected to login page");
			extent.extentLogger("Login", "User is redirected to login page");
		}
		Back(1);
		waitTime(2000);
        checkDisplayOfSubscriptionPopupAndClose();
        verifySignInFromBuyPlanCTAinPlayer();
		click(PWAHomePage.objZeeLogo, "Zee logo");
	}

    public void checkDisplayOfSubscriptionPopupAndClose() throws Exception {
        if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
            click(PWAPremiumPage.objClosePremiumPopup, "close button");
        }
    }

	public void gmailLogin() throws Exception {
		extent.HeaderChildNode("Login through Gmail");
		// verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger
		// menu");
		verifyElementPresentAndClick(PWALoginPage.objLoginBtn, "Login button");
		System.out.println(getWebDriver().getCurrentUrl());
		System.out.println(getWebDriver().getWindowHandles());
		checkElementDisplayed(PWALoginPage.objGoogleIcon, "Google Icon");
		Actions act = new Actions(getWebDriver());
		act.click(getWebDriver().findElement(By.id("gbtn"))).build().perform();
		waitTime(1000);
		act.click(getWebDriver().findElement(By.id("gbtn"))).build().perform();
		waitTime(10000);
		System.out.println(getDriver().getWindowHandles());
		getDriver().switchTo().window("CDwindow-2");
		waitTime(4000);
		if (checkElementDisplayed(PWALoginPage.objGmailEmailField, " Email Field")) {
			type(PWALoginPage.objGmailEmailField, "newzee5igs@gmail.com", "Emial Field");
			hideKeyboard();
			verifyElementPresentAndClick(PWALoginPage.objGmailNextButton, "clicked on next button");
			waitTime(3000);
			verifyElementPresent(PWALoginPage.objGmailPasswordField, " Password Field");
			type(PWALoginPage.objGmailPasswordField, "User@123", "Password Field");
			hideKeyboard();
			verifyElementPresentAndClick(PWALoginPage.objGmailNextButton, "clicked on next button");
			waitTime(7000);
			getDriver().switchTo().window("CDwindow-0");
			String url = getDriver().getCurrentUrl();
			System.out.println(url);
			if (url.contains("https://accounts.google.com")) {
				getDriver().switchTo().window("CDwindow-0");
				logger.info("Google verification page displayed");
				extent.extentLogger("Otp", "Google verification page displayed");
				Back(1);
			} else {
				getDriver().switchTo().window("CDwindow-0");
				if (checkElementDisplayed(PWALoginPage.objLoginTxt, "Login text")) {
					logger.info("Google verification page displayed");
					extent.extentLogger("Login", "Google verification page displayed");
					Back(1);
					verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIcon, "Profile icon")) {
						logger.info("User Logged in Successfully");
						extent.extentLogger("Logged in", "User Logged in Successfully");
						click(PWAHamburgerMenuPage.objCloseHamburgerMenu, "Close button");
						logout();
					}
				} else {
					verifyElementPresent(PWAHomePage.objZeeLogo, "Zee logo");
					verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger");
					if (verifyElementPresent(PWAHamburgerMenuPage.objProfileIcon, "Profile icon")) {
						logger.info("User Logged in Successfully");
						extent.extentLogger("Logged in", "User Logged in Successfully");
						click(PWAHamburgerMenuPage.objCloseHamburgerMenu, "Close button");
						logout();
					}

				}
			}
		}
	}

	/**
	 * Function To check That user is logged in succesfully and Login,SignUP ption
	 * is not displayed for Logged in user.
	 */
	public void verificationOfLoggedIn() throws Exception {
		extent.HeaderChildNode("Verification of Logged in");
		System.out.println("verificationOfLoggedIn");
		waitTime(3000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon")) {
			logger.info("User is logged in successfully");
			extent.extentLogger("Profile icon", "User is logged in successfully");
		}
		if (!(checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login"))) {
			logger.info("Login button is not displayed");
			extent.extentLogger("Login Button", "Login button is not displayed for logged in user");
		}
		if (!(checkElementDisplayed(PWALoginPage.objSignUpBtnWEB, "SignUp"))) {
			logger.info("Sign Up button is not displayed");
			extent.extentLogger("Sign Up Button", "SignUp button is not displayed for logged in user");
		}
	}

	/**
	 * Generic function Verification Of Options displayed in MyAccount.
	 */
	public void myaccountOptionsVerification() throws Exception {
		extent.HeaderChildNode("My account options verification");
		System.out.println("myaccountOptionsVerification");
		waitTime(7000);

		verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon");
		JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");

		waitTime(7000);
		// verifications
		NavigationsToMySubsccription();
		NavigationsToMyWatchlist();
		// NavigationsToMyReminders();
		NavigationsToMyTransactions();

	}

	/**
	 * Function for Navigation to MyWatchlist .
	 */
	public void NavigationsToMyWatchlist() throws Exception {
		extent.HeaderChildNode("My Watchlist in Profile Page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Watchlist"), "My watchlist");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Watchlist"), "My watchlist");
		waitTime(4000);
		// verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My
		// Watchlist"), "My Watchlist page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Watchlist page");
		JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
	}

	/**
	 * Function for Navigation to MyReminders .
	 */
	public void NavigationsToMyReminders() throws Exception {
		extent.HeaderChildNode("My Reminders in Profile Page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Reminders"), "My Reminders");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Reminders"), "My Reminders");
		waitTime(4000);
		// verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My
		// Reminders"), "My Reminders page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Remainders page");
		JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
	}

	/**
	 * Function for Navigation to My Subscription.
	 */
	public void NavigationsToMySubsccription() throws Exception {
		extent.HeaderChildNode("My subscriptions in Profile Page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
		waitTime(4000);
		// verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My
		// Subscription"), "My Subscription page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Subscription page");
		JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
	}

	/**
	 * Function for Navigation to MyTransaction.
	 */
	public void NavigationsToMyTransactions() throws Exception {
		extent.HeaderChildNode("My Transactions in Profile Page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Transactions"), "My Transactions");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Transactions"), "My Transactions");
		waitTime(4000);
		// verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My
		// Transactions"), "My Transactions page");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Transaction page");
		JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
	}

	/**
	 * Function for Navigation to MyProfilePage.
	 */
	public void NavigateToMyProfilePage() throws Exception {
		extent.HeaderChildNode("Navigate To MyProfile Page");
		System.out.println("NavigateToMyProfilePage");
		verifyElementPresent(PWAHamburgerMenuPage.objProfileIconInProfilePage, "profile icon");
		JSClick(PWAHamburgerMenuPage.objProfileIconInProfilePage, "profile icon");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profile page");
		JSClick(PWAHamburgerMenuPage.objProfileTextWEB, "profile");
	}

	/**
	 * Function To Verifing the options present in MyProfilePage.
	 */
	public void verificationsInMyProfilePage() throws Exception {
		extent.HeaderChildNode("verifications In MyProfile Page");
		System.out.println("verificationsInMyProfilePage");
		verifyElementPresent(PWAHamburgerMenuPage.objProfilePageNameTxtWEB, "User name");
		verifyElementPresent(PWAHamburgerMenuPage.objProfilePageUserIdTxt, "User id");
		verifyElementPresent(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		verifyElementPresent(PWAHamburgerMenuPage.objChangePasswordBtn, "Change password button");
	}

	/**
	 * Function To check the Functionality of EditProfile option .
	 */

	public void editProfileFuncionality() throws Exception {
		extent.HeaderChildNode("Edit Profile Funcionality");
		System.out.println("editProfileFuncionality");
		waitTime(6000);
		verifyElementPresent(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		JSClick(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileTextWEB, "edit profile page");
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileFirstName, "First name column");
		JSClick(PWAHamburgerMenuPage.objEditProfileFirstName, "First name column");
		clearField(PWAHamburgerMenuPage.objEditProfileFirstName, "email field");
		type(PWAHamburgerMenuPage.objEditProfileFirstName, "Zee5", "Editprofile first name");
		String firstName = findElement(PWAHamburgerMenuPage.objEditProfileFirstName).getAttribute("value");
		System.out.println(firstName);
		if (firstName.contains("Zee5")) {
			logger.info("User can edit in Edit profile screen");
			extent.extentLogger("Edit", "User can edit in Edit profile screen");
		} else {
			logger.info("User edit functionality in Edit profile screen failed");
			extent.extentLoggerFail("Edit", "User edit functionality in Edit profile screen failed");
		}
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileSavechangesBtn, "save changes");
		WebElement button = getWebDriver().findElement(
				By.xpath("//span[text()='Save Changes']//parent::button[contains(@class,'noSelect purpleBtn')]"));
		if (button.isEnabled()) {
			JSClick(PWAHamburgerMenuPage.objEditProfileSavechangesBtn, "save changes");
		} else {
			logger.info("Save Changes button is not enabled");
			extent.extentLoggerWarning("Save Button", "Save Changes button is not enabled");
		}
		waitTime(2000);
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileGoBackBtn, "go back button");
		JSClick(PWAHamburgerMenuPage.objEditProfileGoBackBtn, "go back button");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profile page");
	}

	/**
	 * Function To check the Funcionality of SubscribeCTA option.
	 */
	public void subscribeCTAFuncionality() throws Exception {
		extent.HeaderChildNode("Buy Plan CTA Funcionality");
		System.out.println("BuyPlanCTAFuncionality");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objSubscritionBtn, "Buy Plan CTA")) {
			JSClick(PWAHamburgerMenuPage.objSubscritionBtn, "Buy Plan CTA");
			verifyElementPresent(PWALoginPage.objsubscription, "subscriptions page");
			BackButton(1);
			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profile page");
		} else {
			logger.info("Buy Plan CTA is not displayed");
			extent.extentLoggerFail("CTA", "Buy Plan CTA is not displayed");
		}
	}

	/**
	 * Function To check the Functionality of ChangePassword option.
	 */
	public void changePasswordFuncionality() throws Exception {
		extent.HeaderChildNode("change Password Funcionality");
		System.out.println("changePasswordFuncionality");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objChangePasswordBtn, "change password button");
		verifyElementPresent(PWAHamburgerMenuPage.objChangePasswordTextWEB, "change password page");
//		verifyElementPresentAndClick(PWAHamburgerMenuPage.objChangeOldPassword, "password field");
//		type(PWAHamburgerMenuPage.objChangeOldPassword, "User@123", "Current password field");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objNewPassword, "new password field");
		type(PWAHamburgerMenuPage.objNewPassword, "igszee5", "new password field");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objNewPassword, "confirm password field");
		type(PWAHamburgerMenuPage.objConfirmNewPassword, "igszee5", "Current confirm field");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objUpdatePasswordBtnHighlighted, "Update password button");
		waitTime(2000);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		waitTime(5000);
	}

	/**
	 * Generic function to Logout.
	 */
	public void logout() throws Exception {
		verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon");
		JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		// click(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
		waitTime(5000);
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("Logout"), "Logout option");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("Logout"), "Logout option");
//		waitTime(5000);
        waitTime(1000);

        if (verifyElementPresent(PWALoginPage.objLoginBtnWEB, "Login Button")) {

			logger.info("User successfuly logged out");
			extent.extentLogger("Log out", "User successfuly logged out");
		}
		click(PWAHomePage.objZeeLogo, "Home page");
		/*waitForElementPresence(PWALoginPage.objCleverTapPopUp, 60, "clever tap pop up");
		waitTime(5000);
		if (checkElementDisplayed(PWALoginPage.objCleverTapPopUp, "clever tap pop up")) {
			WebElement popup = getWebDriver().findElement(PWALoginPage.objCleverTapPopUp);
			popup.click();
		} else {
			System.out.println("Taking more time to display CleverTap popup");
		}*/
	}

	/**
	 * Function To check the Funcionality of MyPlan option.
	 */
	public void myPlanVerification() throws Exception {
		extent.HeaderChildNode("My Plan Verification");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objMyplanText, "My plan")) {
			verifyElementPresent(PWAHamburgerMenuPage.objMyActivePlan, "My active plan");
			verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profile page");
		} else {
			logger.info("My plan is not displayed");
			extent.extentLoggerFail("My plan", "My plan is not displayed");
		}

	}

//	/**
//	 * Function To check the SignIn page from MyPlans screen.
//	 */
//	public void navigationToMyPlanFromHome() throws Exception {
//		extent.HeaderChildNode("Validating user navigated to signin screen from my plans screen");
//		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
//		waitTime(3000);
//		if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "subscription page")) {
//			logger.info("User is navigated to Subscription page");
//			extent.extentLogger("Subscription page", "User is navigated to Subscription page");
//			navigationToSignInFromMyplans();
//		}
//
//		else {
//			logger.info("User is not navigated to Subscription page");
//			extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
//
//		}
//	}

	/**
	 * Function To check the SignIn page from MyPlans screen.
	 */
	public void navigationToSignInFromMyplans(String Usertype) throws Exception {
		// Swipe("UP", 1);
		scrollDownWEB();
		if (checkElementDisplayed(PWASubscriptionPages.objadhocPopupArea, "Adoric Popup")) {
			click(PWASubscriptionPages.objadhocPopupSignUpBtn, "Adoric Popup SignUP Button");
			waitTime(4000);
			verifyElementPresent(PWASubscriptionPages.objadhocPopupRegestrationScreen, "Sign up page");
			waitTime(3000);
			Back(1);
			scrollDownWEB();
            defaultPlanSelection();
			if (Usertype == "Logged in") {
                emailSigninFromMyPlan("zee5latest@gmail.com","User@123","Logged in");
			}else if (Usertype == "NewRegister") {
                emailSigninFromMyPlan(RandomStringGenerator(5) + "@gmail.com","User@123","Logged in");
			}
            verifyZeeLogoAndLogout();
		} else {
//			waitTime(3000);
            defaultPlanSelection();
			if (Usertype == "Logged in") {
                emailSigninFromMyPlan("zee5latest@gmail.com","User@123","Logged in");
			}else if (Usertype == "NewRegister") {
                emailSigninFromMyPlan(RandomStringGenerator(5) + "@gmail.com","User@123","Logged in");
			}
            verifyZeeLogoAndLogout();
		}
	}

    public void defaultPlanSelection() throws Exception {
        verifyElementPresentAndClick(PWASubscriptionPages.objSelectedSubscriptionPlanAmount, "Subscription plan");
        verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
        waitTime(3000);
    }

    public void emailSigninFromMyPlan(String username, String password, String userType) throws Exception {
        verifyElementPresent(PWALoginPage.objEmailField, "Sign in page");
        type(PWALoginPage.objEmailField, username, "Email");
        click(PWASubscriptionPages.objProceedBtnInSubscriptionPage, "Continue button");
        waitTime(3000);
        checkElementDisplayed(PWASubscriptionPages.objPasswordPopupInSubscriptionPage, "Password field");
        type(PWASubscriptionPages.objPasswordField, password, "Password");
        click(PWASubscriptionPages.objProceedButtonInPassword, "Continue button");
        waitTime(10000);
        if (checkElementDisplayed(PWASubscriptionPages.objAccountDetailInSubscription, "Account details")) {
            logger.info("Verified subscribe flow for "+userType+" user");
            extent.extentLogger("Verification", "Verified subscribe flow for "+userType+" user");
        }
    }

    public void verifyZeeLogoAndLogout() throws Exception {
        verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee logo");
        if (verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Home page")) {
            logger.info("User is navigated to Home page");
            extent.extentLogger("Home page", "User is navigated to Home page");
            logout();
            waitTime(4000);
        }
    }

	public void NavigationsToMySubscription() throws Exception {
		extent.HeaderChildNode("My Subscription");
		click(PWAHamburgerMenuPage.objDownArrow("My Account"), "Expander button");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objExploreItemBtn("My Subscription"), "My Subscriptions");
		waitTime(4000);
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Subscription"), "My Subscription page");
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger button");
	}

	/**
	 * Function To check the SignIn page from CTA in playerscreen and Verification
	 * of SubscribePopUP.
	 */
	public void navigationToCTAInPlayerFromSearch(String userType) throws Exception {
		extent.HeaderChildNode("Validating user navigated to signin from Get Premium CTA in player");
		if (checkElementDisplayed(PWAHomePage.objLanguageChangeContentPopup(), "Language change content PopUp")) {
			click(PWAHomePage.objLanguageChangeContentPopupCloseicon(), "Language change content PopUp close icon");
		}
		waitTime(2000);
		checkElementDisplayed(PWAHomePage.objSearchBtn, "Search button");
		click(PWAHomePage.objSearchBtn, "Search button");
//		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovie2");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(3000);
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResultPremiumContent, "Premium content");
		waitTime(10000);
//		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//		}
//		waitTime(3000);
//		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//		}
		verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumCTAInPlater, "Get Premium CTA in player");
		waitTime(5000);
//		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//		}
		waitTime(3000);
		navigationToSignInFromCTAInPlayer();
//		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
	}

    public void verifySignInFromBuyPlanCTAinPlayer() throws Exception {
        verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumCTAInPlater, "Get Premium CTA in player");
        waitTime(5000);
        navigationToSignInFromCTAInPlayer();
    }

	/**
	 * Function To check the SignIn page from CTA in playerscreen and Verification
	 * of SubscribePopUP.
	 */
	public void navigationToSignInFromCTAInPlayer() throws Exception {
		extent.HeaderChildNode("Validating Subscription page post tapping Get Premium CTA in player");
//		verifyElementPresent(PWASubscriptionPages.objSubscribepopup, "Subscribe popup");
//		verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupPlan, "Subscribe plan");
//		verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupPlan, "Subscribe popup plan");
//		verifyElementPresent(PWASubscriptionPages.objGetPremiumPopipProceed, "Proceed button in Subscribe popup");
//		click(PWASubscriptionPages.objGetPremiumPopipProceed, "Proceed button in Subscribe popup");
		verifyElementPresentAndClick(PWASubscriptionPages.objSelectedSubscriptionPlanAmount, "Subscription plan");
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue button");
		waitTime(4000);
		verifyElementPresent(PWALoginPage.objEmailField, "Sign in page");
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
		if (verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Home page")) {
			logger.info("User is navigated to Home page");
			extent.extentLogger("Home page", "User is navigated to Home page");
		}
	}

	/**
	 * Function To check the Funcionality of ForgotPassword option.
	 */
	public void forgotPassword() throws Exception {
		extent.HeaderChildNode("Forgot password functionality");
		verifyElementPresentAndClick(PWALoginPage.objLoginBtnWEB, "Login button");
		waitTime(5000);
		verifyElementPresentAndClick(PWALoginPage.objForgotPasswordTxt, "Forgot password");
		waitTime(3000);
		type(PWALoginPage.objEmailField, "Zee5latest@gmail.com", "Email field");
		// click(PWALoginPage.objForgotPasswordTxt, "forgot password Text");
		click(PWALoginPage.objForgotPasswordLinkButtonWEB, "Reset password button");
		waitTime(60000);
		String url = GmailInbox.readEmail("ZEE5 account password reset request");
		if (!url.isEmpty()) {
			getWebDriver().get(url);
			waitTime(5000);
			checkElementDisplayed(PWALoginPage.objForgotNextPageTextWEB, "Reset password page");
			type(PWALoginPage.objForgotNextPagePwsswordFielfd, "User@123", "Password");
			waitTime(5000);
			type(PWALoginPage.objForgotNextPageConfirmPasswordField, "User@123", "Confirm password");
			click(PWALoginPage.objForgotNextPageResetPaswwordButtonWEB, "Reset password");
			if (checkElementDisplayed(PWAPlayerPage.objfasterPopUp, "We are 3x faster(adhoc) popup")) {
				click(PWAPlayerPage.objfasterclosePopUp, "faster Pop up close button");
			}
			waitTime(10000);
			if (checkElementDisplayed(PWALoginPage.objLoginPageLoginBtn, "LoginButton")) {
				if (checkElementDisplayed(PWALoginPage.objEmailField, "Login page")) {
					type(PWALoginPage.objEmailField, "Zee5latest@gmail.com", "Login");
					type(PWALoginPage.objPasswordField, "User@123", "Password");
					waitTime(5000);
					click(PWALoginPage.objLoginPageLoginBtn, "LoginButton");
					waitTime(7000);
				}
				if (checkElementDisplayed(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon")) {
					logger.info("User is successfully changed password and logged in");
					extent.extentLogger("Logged in", "User is successfully changed password and logged in");
				} else {
					logger.info("User is not logged in");
					extentLoggerWarning("Logged in", "User is not logged in");
				}
			} else {
				logger.info("Reset password link expired");
				extent.extentLoggerWarning("Reset link", "Reset password link expired");
			}
		} else {
			logger.info("User is not received the mail or the mail content is read");
			extent.extentLoggerWarning("Logged in", "User is not received the mail or the mail content is read");
			logger.info("User is not logged in");
			extent.extentLoggerWarning("Logged in", "User is not logged in");
		}
	}

	/**
	 * Method to verify that logout option is not displayed in Hamburger menu
	 */
	public void noLogoutOption() throws Exception {
		extent.HeaderChildNode("Checking no Logout option displayed for guest user");

		if ((checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login"))) {
			logger.info("Logout option is not displayed for guest user");
			extent.extentLogger("Logout option", "Logout option is not displayed");
		}
	}

	// vinay

	// -------------------------------------------------------------------------------------------------

	// SATISH

	/**
	 * PWA Subscription Suite
	 */
	public void zeePWASubscriptionSuite(String userType) throws Exception {
		HeaderChildNode("PWA Subscription Scenarios Validation Suite");

		if (userType.equals("SubscribedUser")) {
			System.out.println();
		} else {

			zeePWASubscriptionScenariosValidation(userType, getPlatform());
			zeePWASubscriptionFlowFromHomePageHeaderSubscribeButton(userType, getPlatform());
		}
	}

	/**
	 * Guest User Subscription Flow
	 */
	public void zeePWAGuestUserSubscriptionFlow() throws Exception {
//		HeaderChildNode("PWA Subscription Flow");
		zeePWASelectPackPageValidation();
		zeePWAAccountInfoPageValidation();
		zeePWAPaymentPageValidation();
	}

	/**
	 * Non-Subscribed User Subscription Flow
	 */
	public void zeePWANonSubscribedUserSubscriptionFlow() throws Exception {
//		HeaderChildNode("PWA Subscription Flow");
		zeePWASelectPackPageValidation();
		zeePWAPaymentPageValidation();
	}

	/**
	 * Subscription Scenarios Validation
	 */
	public void zeePWASubscriptionScenariosValidation(String userType, String platform) throws Exception {
//		HeaderChildNode("PWA Subscription Scenarios Validation");
//		if(userType.equalsIgnoreCase("Non-Subscribed")) {
//			ZeePWALogin("E-mail", userType);
//		}

		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		// Scenario no. 89
		HeaderChildNode("Navigate to Subscription Flow From Home Page Header Subcribe Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");

		waitTime(2000);
		zeeSubscriptionPageValidationAndNavigateToHomePage();

		// Scenario no. 86
		HeaderChildNode("Navigate to Subscription Flow on playing BeforeTV content");
		waitTime(2000);
		navigateToAnyScreenOnWeb("TV Shows");
		scrollToElement(PWAHomePage.objFirstContentCardOfTray("Before"));
		if (checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"),
				"First Content Card Of Before TV Tray")) {
			click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");
			waitForPlayerAdToComplete1("Video Player");
			waitForElementPresence(PWASubscriptionPages.objsubscribebtnonplayer, 40, "subscribe button on player");
			click(PWASubscriptionPages.objsubscribebtnonplayer, "subscribe button on player");
			zeeVerifyGetPremiumPopup(userType);
			waitTime(2000);
			if (userType.equalsIgnoreCase("Guest")) {
				zeeAccountInfoPageValidationAndNavigateToHomePage();
			} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				zeePaymentPageValidationAndNavigateToHomePage();
			}
		} else {
			logger.info("Before TV Rail does not exist");
			extent.extentLoggerFail("Scrolling till BeforeTV Rail", "Before TV Rail does not exist");
		}

//		// Scenario no. 90,98
//		HeaderChildNode("Navigate to Subscription Flow from Home Page Buy Plan CTA On Carousel");
//		waitTime(2000);
//
//		if (platform.equalsIgnoreCase("Android")) {
//
//			verifyElementPresent(PWAHomePage.objGetPremiumWeb, "Get Premium CTA on Carousel");
//			clickDirectly(PWAHomePage.objGetPremiumWeb, "Get Premium CTA on Carousel");
//		} else if (platform.equalsIgnoreCase("Web")) {
//
////			Actions action = new Actions(getWebDriver());
////			action.moveToElement(findElement(PWAHomePage.objMastheadCarouselCurrentContent)).build().perform();
//
//			for (int i = 0; i < 5; i++) {
//				try {
//					waitTime(5000);
////					JSClick(PWAHomePage.objGetPremiumWeb, "CTA Button");
//					JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
//					executor.executeScript("arguments[0].click();", findElement(PWAHomePage.objGetPremiumWeb));
//					logger.info("Clicked on " + "Get Premium CTA On MastHead Carousel");
//					extent.extentLogger("clickedElement", "Clicked on " + "Get Premium CTA On MastHead Carousel");
//					break;
//				} catch (Exception e) {
//					Thread.sleep(1000);
//					logger.error(e);
//				}
//			}
//		}
//
//		waitTime(2000);
//		verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription Page");
//		waitTime(2000);
//		verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
//		// Scenario no. 98
//		zeePWAPromoCodeValidationInSelectPackPage(platform);
//		waitTime(2000);
//		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
//
		if (userType.equalsIgnoreCase("Guest")) {
			// Scenario no. 96
			HeaderChildNode(
					"Navigate to Subscription Flow From 'Buy Subscription/Plan' option under My plans in hamburger menu");
			waitTime(10000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu Button");
			waitTime(2000);
//			validateDisplayLanguagePopup();
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu Button");
//			waitTime(2000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objWebBuySubscriptionOption,
					"Buy Subscribe Option in Hamburger Menu");
			zeeSubscriptionPageValidationAndNavigateToHomePage();

			// Scenario no. 97
			HeaderChildNode(
					"Navigate to Subscription Flow From 'Have a Prepaid code' option under My plans in hamburger menu");
			waitTime(2000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu Button");
			waitTime(2000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHaveAPrepaidCode,
					"Have A Prepaid Code? Option in Hamburger Menu");
			waitTime(2000);
			zeeSubscriptionPageValidationAndNavigateToHomePage();
		}

		// Scenario no. 91,92,94
//		HeaderChildNode("Navigate to Subscription Flow From Adoric Popup/Get Premium popup On Playing Premium Content");
//		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
//				.getParameter("premiumMovieNoTrailer2");
//		zeeSearchForContentAndClickOnFirstResult(keyword);
//		waitTime(2000);
//		click(PWASubscriptionPages.objsubscribebtnonplayer, "subscribe button on player");
//		zeeVerifyGetPremiumPopup(userType);
//		waitTime(2000);
//		if (userType.equalsIgnoreCase("Guest")) {
//			zeeAccountInfoPageValidationAndNavigateToHomePage();
//		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
//			zeePaymentPageValidationAndNavigateToHomePage();
//		}

		// Scenario no. 93
		HeaderChildNode("Navigate to Subscription Flow From Player In-line Subscribe link on Player");
		String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovieNoTrailer2");
		zeeSearchForContentAndClickOnFirstResult(keyword1);
		waitTime(2000);
//		checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Get Premium Popup Title");
//		waitTime(2000);
//		verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Popup Close Button");
//		waitTime(2000);
		verifyElementPresentAndClick(PWAPlayerPage.objSubscribeNowLink, "In-Line Subscribe Link on Player");
		zeeVerifyGetPremiumPopup(userType);
		waitTime(2000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeeAccountInfoPageValidationAndNavigateToHomePage();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePaymentPageValidationAndNavigateToHomePage();
		}

		// Scenario no. 95
		HeaderChildNode(
				"Navigate to Subscription Flow From Subscription Buy Plan CTA below the player at consumption screen");
		zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
		waitTime(2000);
		//
		verifyElementPresent(PWAPlayerPage.objTextBelowThePlayer,
				"Text below the player - Ad-Free with Premium now at 50%OFF : ₹499/year");
		waitForElementAndClick(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, 30, "Buy Plan CTA below the Player");
		waitTime(2000);
		zeeVerifyGetPremiumPopup(userType);
		waitTime(2000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeeAccountInfoPageValidationAndNavigateToHomePage();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePaymentPageValidationAndNavigateToHomePage();
		}
	}

	/**
	 * Method to search for specified content passed in parameter and click on first search result
	 */
	public void zeeSearchForContentAndClickOnFirstResult(String contentName) throws Exception {
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		type(PWASearchPage.objSearchEditBox, contentName + "\n", "Search bar");
		waitTime(5000);
		waitForElementDisplayed(PWASearchPage.objFirstSearchedAssetTitle, 20);
		waitTime(10000);
		verifyElementPresentAndClick(PWASearchPage.objspecificSearch, "Searched content");
	}

	/**
	 * PWA Subscription Page Validation
	 */
	public void zeeSubscriptionPageValidationAndNavigateToHomePage() throws Exception {
		HeaderChildNode("PWA Subscription Page Validation and Navigate to Home Page");

		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription Page");
		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
		waitTime(2000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
	}

	/**
	 * PWA Account Info Page Validation
	 */
	public void zeeAccountInfoPageValidationAndNavigateToHomePage() throws Exception {
		HeaderChildNode("PWA Account Info Page Validation and Navigate to Home Page");

		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Section");
		waitTime(2000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");

	}

	/**
	 * PWA Payment Page Validation
	 */
	public void zeePaymentPageValidationAndNavigateToHomePage() throws Exception {
		HeaderChildNode("PWA Payment Page Validation and Navigate to Home Page");

		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
		waitTime(2000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");

	}

	/**
	 * Verify Get Premium Popup
	 */

	public void zeeVerifyGetPremiumPopup(String userType) throws Exception {
		HeaderChildNode("Verify Subscription Page");
		// waitTime(2000);
		// checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Get
		// Premium Popup Title");
		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");
		waitTime(2000);
		verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount1, "499 Plan");
		waitTime(2000);
		verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "Continue Button");
	}

	/**
	 * Subscription Flow From Home Page Header Subscribe Button Line No 89
	 */
	public void zeePWASubscriptionFlowFromHomePageHeaderSubscribeButton(String userType, String platform)
			throws Exception {
		HeaderChildNode("PWA Subscription Flow From Home Page Header Subcribe Button");

		// Scenario no. 89
		waitTime(5000);
		click(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
//		driver.findElement(PWAHomePage.objSubscribeButton).click();
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeePWAGuestUserSubscriptionFlow();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePWANonSubscribedUserSubscriptionFlow();
		}
		navigateBackFromPayTmWalletAndLogout(platform, userType);

	}

	/**
	 * Subscription Flow From Home Page Get Premium CTA on Carousel Line No 90
	 */
	public void zeePWASubscriptionFlowFromHomePageGetPremiumCTAOnCarousel(String userType, String platform)
			throws Exception {
		HeaderChildNode("PWA Subscription Flow From Home Page Get Premium CTA On Carousel");

		// Scenario no. 90
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objGetPremium, "Get Premium CTA on Carousel");
		clickDirectly(PWAHomePage.objGetPremium, "Get Premium CTA on Carousel");
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeePWAGuestUserSubscriptionFlow();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePWANonSubscribedUserSubscriptionFlow();
		}
		navigateBackFromPayTmWalletAndLogout(platform, userType);

	}

	/**
	 * Subscription Flow From Adoric Popup Line No 91 Subscription Flow From
	 * Subcribe Button On Playing Premium Content Line No 92 Subscription Flow From
	 * Subscribe popup on playing Before TV content Line No 94
	 */
	public void zeePWASubscriptionFlowFromGetPremiumPopupOnPlayingPremiumContent(String userType, String platform)
			throws Exception {
		HeaderChildNode("PWA Subscription Flow From Adoric Popup/Get Premium popup On Playing Premium Content");

		// Scenario no. 91,92,94
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovieNoTrailer2");
		zeeSearchForContentAndClickOnFirstResult(keyword);
		zeeVerifyGetPremiumPopup();
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeePWAAccountInfoPageValidation();
			zeePWAPaymentPageValidation();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePWAPaymentPageValidation();
		}
		navigateBackFromPayTmWalletAndLogout(platform, userType);

	}

	/**
	 * Subscription Flow From Player In-line Subscribe link Line No 93
	 */
	public void zeePWASubscriptionFlowFromPlayerInlineSubscribelink(String userType, String platform) throws Exception {
		HeaderChildNode("PWA Subscription Flow From Player In-line Subscribe link on Player");

		// Scenario no. 93
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovieNoTrailer2");
		zeeSearchForContentAndClickOnFirstResult(keyword);
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objGetPremiumPopupTitle, "Get Premium Popup Title");
		waitTime(5000);
		verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Popup Close Button");
		waitTime(5000);
		verifyElementPresentAndClick(PWAPlayerPage.objSubscribeNowLink, "In-Line Subscribe Link on Player");
		zeeVerifyGetPremiumPopup();
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeePWAAccountInfoPageValidation();
			zeePWAPaymentPageValidation();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePWAPaymentPageValidation();
		}
		navigateBackFromPayTmWalletAndLogout(platform, userType);

	}

	/**
	 * Subscription Flow From Subscription Get premium CTA below the player at
	 * consumption screen Line No 95
	 */
	public void zeePWASubscriptionFlowFromSubscriptionGetPremiumCTABelowPlayer(String userType, String platform)
			throws Exception {
		HeaderChildNode(
				"PWA Subscription Flow From Subscription Get premium CTA below the player at consumption screen");

		// Scenario no. 95
		zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
		waitTime(5000);
		verifyElementPresentAndClick(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen,
				"Get Premium Link below the Player");
		zeeVerifyGetPremiumPopup();
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeePWAAccountInfoPageValidation();
			zeePWAPaymentPageValidation();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePWAPaymentPageValidation();
		}
		navigateBackFromPayTmWalletAndLogout(platform, userType);

	}

	/**
	 * Subscription Flow From "Buy subscription" option under My plans in hamburger
	 * menu Line No 96
	 */
	public void zeePWASubscriptionFlowFromBuySubscriptionOptionUnderMyPlansInHamburgerMenu(String userType,
			String platform) throws Exception {
		HeaderChildNode("PWA Subscription Flow From Buy subscription option under My plans in hamburger menu");

		// Scenario no. 96
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu Button");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objBuySubscriptionOption,
				"Buy Subscribe Option in Hamburger Menu");
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest")) {
			zeePWAGuestUserSubscriptionFlow();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePWANonSubscribedUserSubscriptionFlow();
		}
		navigateBackFromPayTmWalletAndLogout(platform, userType);

	}

	/**
	 * Subscription Flow From " Have a Prepaid code" option under My plans in
	 * hamburger menu - Line No 97 Subscription Flow using promo codes to verify if
	 * the user is getting discounted price on plans are not - Line No 98
	 */
	public void zeePWASubscriptionFlowFromHaveAPrepaidCodeOptionUnderMyPlansInHamburgerMenu(String userType,
			String platform) throws Exception {
		HeaderChildNode("PWA Subscription Flow From 'Have a Prepaid code' option under My plans in hamburger menu");

		// Scenario no. 97
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu Button");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHaveAPrepaidCode,
				"Have A Prepaid Code? Option in Hamburger Menu");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
		// Scenario no. 98
		zeePWAPromoCodeValidationInSelectPackPage(platform);
		if (userType.equalsIgnoreCase("Guest")) {
			zeePWAGuestUserSubscriptionFlow();
		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeePWANonSubscribedUserSubscriptionFlow();
		}
		navigateBackFromPayTmWalletAndLogout(platform, userType);

	}

	/**
	 * Promo code Validation in Select Pack Page Subscription Flow using promo codes
	 * to verify if the user is getting discounted price on plans are not - Line No
	 * 98
	 */
	public void zeePWAPromoCodeValidationInSelectPackPage(String platform) throws Exception {
		HeaderChildNode("Scenario: Promo code Validation in Select Pack Page");

		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "'Have A Code?' field");
		waitTime(3000);
		if (platform.equalsIgnoreCase("Android")) {
			type(PWASubscriptionPages.objHaveACode, "ZEE5CITI " + "\n", "'Have A Code?' field");
		} else if (platform.equalsIgnoreCase("Web")) {
			type(PWASubscriptionPages.objHaveACodetoenter, "ZEE5CITI ", "'Have A Code?' field");
		}

		// driver.findElement(PWASubscriptionPages.objHaveACode).sendKeys("ZEE5PTM20");
		// hideKeyboard();
		waitTime(5000);
		click(PWASubscriptionPages.objApplyBtn, "Apply Button");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objAppliedSuccessfullyMessage, "Applied Successfully Message");
		String successMessage = getText(PWASubscriptionPages.objAppliedSuccessfullyMessage);
		logger.info(successMessage);
		extent.extentLogger("Success Message", successMessage + " is displayed");
	}

	/**
	 * Select Pack Page Validation
	 */
	public void zeePWASelectPackPageValidation() throws Exception {
		HeaderChildNode("Select Pack Page Validation");
		verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription Page");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
		waitTime(3000);
//		String selectedPackCategory = findElement(PWASubscriptionPages.objPackCategoryTabSelected).getText();
//		System.out.println("Selected Pack Category is: " + selectedPackCategory);
		waitTime(3000);
		String defaultSelectedPlan = findElement(PWASubscriptionPages.objDefaultSelectedPack).getText();
		System.out.println("Plan Selected By Default is: " + defaultSelectedPlan);
		waitTime(3000);
		// verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount1, " pack is
		// selected");
//		ScrollToElement(PWASubscriptionPages.objContinueBtn, "Continue");
//		waitTime(3000);
//		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
//		waitTime(5000);
		waitTime(2000);
		verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "continue Button");
		// verifyElementPresentAndClick(PWASubscriptionPages.objcontinuebtn2, "continue
		// Button");
	}

	/**
	 * Account Info Page Validation Validate that selected pack information is
	 * displayed on left side. - Line No. 103 Validate that guest user is able to
	 * sign in/sign up from account info screen - Line No. 104
	 */
	public void zeePWAAccountInfoPageValidation() throws Exception {
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Section");
		waitTime(3000);
		HeaderChildNode("Validate that guest user is able to sign in/sign up from account info screen");
		waitTime(3000);
		type(PWASubscriptionPages.objEmailIDTextField, "igszee5testing@gmail.com", "Email Id");
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtnForEmailOrMobile, "Continue Button");
		waitTime(3000);
//		waitTime(3000);
//		verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password");
//		waitTime(3000);
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
		waitTime(3000);
		type(PWASubscriptionPages.objPasswordFieldHidden, "igs@12345", "Password Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtnn, "Continue Button");
		waitTime(3000);
	}

	/**
	 * Selected Pack Display Validation Validate that selected pack information is
	 * displayed on left side. - Line No. 103
	 */
	public void zeePWASelectedPackDisplayValidation() throws Exception {
		HeaderChildNode("Validate that selected pack information is displayed on top.");
		// Scenario no. 103
		// verifyElementPresent(PWASubscriptionPages.objSelectedPackText, "Selected Pack
		// Text");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objSelectedPackName, "Selected Pack Name");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objSelectedPackDuration, "Selected Pack Duration");
		waitTime(3000);
		verifyElementPresent(PWASubscriptionPages.objSelectedPackDescription, "Selected Pack Description");
		waitTime(3000);
	}

	/**
	 * Payment Page Validation Validate that user is navigated to Payment options
	 * screen post successful sign in/sign up - Line No. 105
	 */
	// manas
	public void zeePWAPaymentPageValidation() throws Exception {
		HeaderChildNode("Validate that user is navigated to Payment options screen post successful sign in/sign up");

		// Scenario no. 103
		checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
		zeePWASelectedPackDisplayValidation();
		checkElementDisplayed(PWASubscriptionPages.objAccountInfoDetails, "Account Info Details in Payments Section");

		waitTime(5000);
		WebElement iframeElement = null;
		if (getPlatform().equalsIgnoreCase("Android")) {
			iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
			Thread.sleep(5000);
			Thread.sleep(5000);
			Thread.sleep(5000);
			getWebDriver().switchTo().frame(iframeElement);
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
			Thread.sleep(5000);
			Thread.sleep(5000);
			Thread.sleep(5000);
			getWebDriver().switchTo().frame(iframeElement);
		}

		verifyElementPresent(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
		JSClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objEnterCreditAndDebitCardDetails, "Enter Credit/Debit Card Details");
		verifyElementPresent(PWASubscriptionPages.objCardNumber, "Enter Card Number Field");
		verifyElementPresent(PWASubscriptionPages.objExpiry, "Expiry Field");
		verifyElementPresent(PWASubscriptionPages.objCVV, "CVV Field");
		waitTime(5000);
		if (getPlatform().equals("Android")) {
			extent.HeaderChildNode("Validating the payment gateway using Paytm");
			getWebDriver().switchTo().frame(iframeElement);
			verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
			getWebDriver().switchTo().defaultContent();
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			extent.HeaderChildNode("Validating the payment gateway using Wallet");
			verifyElementPresent(PWASubscriptionPages.objWallets, "Wallets");
			JSClick(PWASubscriptionPages.objWallets, "Wallets");
			getWebDriver().switchTo().defaultContent();
		}

		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void navigateBackFromPayTmWalletAndLogout(String platform, String userType) throws Exception {
//		HeaderChildNode("Navigate Back from PayTm Wallet and Logout");

		waitTime(5000);
		Back(1);
		waitTime(5000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		if (userType.equalsIgnoreCase("Guest")) {
			logout();
		}

	}

	public void ScrollToElement(By Locator, String validationText) throws Exception {

		for (int i = 1; i <= 10; i++) {
			if (verifyElementPresent(Locator, validationText) == true) {
				logger.info("Scrolled till element " + validationText);
				extent.extentLogger("Scroll to element", "Scrolled till element " + validationText);
				break;
			}
			waitTime(2000);
			swipeALittle("up", 1);
		}
	}

	/**
	 * Method to scroll till specified element
	 * @param element
	 * @return
	 * @throws Exception
	 */
	public boolean scrollToElement(By element) throws Exception {
		for (int i = 1; i <= 50; i++) {
			waitTime(2000);
			partialScroll2();
			if (verifyElementDisplayed(element)) {
				return true;
			}
		}
		return false;
	}

	public static void partialScroll2() {
		JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
		jse.executeScript("window.scrollBy(0,500)", "");
	}

	public void swipeALittle(String dire, int count) throws Exception {

		if (dire.equalsIgnoreCase("UP")) {

			for (int j = 0; j < count; j++) {
				Dimension size = getDriver().manage().window().getSize();
				int starty = (int) (size.height * 0.40);
				int endy = (int) (size.height * 0.39);
				int startx = size.width / 2;
				// getDriver().swipe(startx, starty, startx, endy, 3000);
				touchAction.press(PointOption.point(startx, starty))
						.waitAction(WaitOptions.waitOptions(Duration.ofMillis(10000)))
						.moveTo(PointOption.point(startx, endy)).release().perform();

				logger.info("Swiping screen in " + " " + dire + " direction" + " " + (j + 1) + " times");
				extent.extentLogger("SwipeUp",
						"Swiping screen in " + " " + dire + " direction" + " " + (j + 1) + " times");

			}
		}
	}

	public void dragFromToForDuration(double durationSecond) {
		Dimension size = getDriver().manage().window().getSize();
		int starty = (int) (size.height * 0.40);
		int endy = (int) (size.height * 0.39);
		int startx = size.width / 2;

		Map<String, Object> params = new HashMap<>();
		params.put("duration", 5);
		params.put("fromX", startx);
		params.put("fromY", starty);
		params.put("toX", startx);
		params.put("toY", endy);
		getDriver().executeScript("mobile: dragFromToForDuration", params);

	}

	public void validateDisplayLanguagePopup() throws Exception {

		if (waitForElement(PWAHomePage.objDisplayLanguagePopupTitle, 20, "Display Language Popup")) {

			verifyElementPresentAndClick(PWAHomePage.objDisplayLanguagePopupOption("English"),
					"English option in Display Language popup");
			verifyElementPresentAndClick(PWAHomePage.objDisplayLanguageContinueButton,
					"Continue Button in Display Language popup");

			verifyElementPresent(PWAHomePage.objContentLanguagePopupSelectedOption("English"),
					"English option in Content Language popup");
			verifyElementPresent(PWAHomePage.objContentLanguagePopupSelectedOption("Kannada"),
					"Kannada option in Content Language popup");
			verifyElementPresentAndClick(PWAHomePage.objContentLanguagePopupUnSelectedOption("Hindi"),
					"Hindi option in Content Language popup");
			verifyElementPresentAndClick(PWAHomePage.objDisplayLanguageContinueButton,
					"Continue Button in Content Language popup");
		}

	}

	// ----------------------------------------------------------------------------------------

	// VINAY

	public void ValidatingPlayer(String userType) throws Exception {
		PlayerIconVaidationsWeb();
		playerControlOperations();
		AudioValidation();
		PlayerQuality();
//		ShareFunctionality();
		WatchTrailer();
		AddToWatchListGuestUser(userType);
		WatchCredit(userType);
		upnext(userType);
	}

	public void AddToWatchListLoggedInUser() throws Exception {
		extent.HeaderChildNode("Add to Watch List");
		// Click on Watchlist
		click(PWAPlayerPage.watchListBtn, "WatchList icon");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
		// Verify the Toast message is displayed
		// verifyElementPresent(PWAAddToWatchListPage.objtoastMessage, "Added to
		// WatchList");
		// Click on My account
		waitTime(3000);
		JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile");
		waitTime(3500);
		// Click on Watchlist
		JSClick(PWAAddToWatchListPage.objMyWatchList, "Watch list");
		waitTime(3500);
		// Click on Movies tab
		JSClick(PWAAddToWatchListPage.objMoviesTab, "Movies tab");
		waitTime(3500);
		// Verify added Item is present in Watchlist
		checkElementDisplayed(PWAAddToWatchListPage.objContentsInWatchList, "Content in Watchlist");
		JSClick(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove watchlist");
		waitTime(3500);
		BackButton(1);
		waitTime(5000);
	}

	/*
	 * Function to validate the Player icons
	 */
	public void PlayerIconVaidationsWeb() throws Exception {
		String userType = getParameterFromXML("userType");
		System.out.println("PlayerIconVaidationsWeb");
		navigateToAnyScreenOnWeb("Home");

		extent.HeaderChildNode("Validating Player icons on Player");
		String movie = "Koi... Mil Gaya";
		JSClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, movie, "Search Field");
		JSClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		JSClick(PWASearchPage.objSpecificSearch(movie)

				, "Searched content");
		mandatoryRegistrationPopUp(userType);
		waitTime(10000);
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Why Register Popup") == true) {
				click(PWAPlayerPage.objCloseBtn, "Close Register Popup");
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			waitForPlayerAdToComplete1("Video Player");
		}
		mouseHover();
		verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds icon");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.playBtn, "Play icon");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds icon");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.progressBar, "Progress bar");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.audioBtn, "Audio icon");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.totalDurationTime, "Total duration time");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.settingsBtn, "Settings icon");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize window icon");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.totalDurationTime, "Total time");
		mouseHover();
		verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
		verifyElementPresentAndClick(PWAPlayerPage.objPlayerQualityButton, "Quality Button");
		JSClick(PWAPlayerPage.objBestQualityOption, "Best quality");
		mouseHover();
		verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
		verifyElementPresentAndClick(PWAPlayerPage.objPlayerQualityButton, "Quality Button");
		String SelectedOption = getText(PWAPlayerPage.objPlayerSelectedQuality);
		if (SelectedOption.contains("Best")) {
			logger.info("Best option is selected");
			extent.extentLogger("Quality", "Best option is selected");
		}
		JSClick(PWAPlayerPage.objBetterQualityOption, "Better quality");
		mouseHover();
		verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
		verifyElementPresentAndClick(PWAPlayerPage.objPlayerQualityButton, "Quality Button");
		String SelectedOption2 = getText(PWAPlayerPage.objPlayerSelectedQuality);
		if (SelectedOption2.contains("Better")) {
			logger.info("Better option is selected");
			extent.extentLogger("Quality", "Better option is selected");
		}
		mouseHover();
		verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");

		extent.HeaderChildNode("Player controls validation in Full screen mode");
		mouseHover();
		verifyElementPresentAndClick(PWAPlayerPage.maximizeBtn, "Maximize window icon");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds icon");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.playBtn, "Play icon");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds icon");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.progressBar, "Progress bar");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.audioBtn, "Audio icon");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.totalDurationTime, "Total duration time");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.settingsBtn, "Settings icon");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.totalDurationTime, "Total time");
		mouseHover();
		verifyElementPresent(PWAPlayerPage.minimizeBtn, "Minimize button");
		waitTime(1000);
		mouseHover();
		JSClick(PWAPlayerPage.minimizeBtn, "Minimize button");
		audioTrackSelection();
	}

	/*
	 * Validating Rewind, Farword 10 seconds icon
	 */
	public void playerControlOperations() throws Exception {
		System.out.println("playerControlOperations");
		extent.HeaderChildNode("Validating rewind 10 seconds, farword 10 seconds and Audio icons");
		waitTime(10000);
		waitForPlayerAdToComplete("Video Player");
		String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		System.out.println("time fetched before rewind: " + currentDuration);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
			verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupCloseButton, "POP-UP CLOSE BUTTON");
		}
		String[] time = currentDuration.split(":");
		int timeDuration = Integer.parseInt(time[1]);
		System.out.println("seconds lapsed before rewind: " + timeDuration);
		int rewindTime = timeDuration - 10;
		JSClick(PWAPlayerPage.rewind10SecBtn, "Rewind 10 seconds");
		waitForPlayerAdToComplete("Video Player");
		String currentDurationAfter10Sec = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"current duration");
		System.out.println("time fetched after rewind: " + currentDurationAfter10Sec);
		String[] time2 = currentDurationAfter10Sec.split(":");
		waitTime(2000);
		int timeDuration2 = Integer.parseInt(time2[1]);
		System.out.println("seconds lapsed after rewind: " + timeDuration2);
		if (rewindTime <= timeDuration2) {
			softAssert.assertEquals(rewindTime <= timeDuration2, true, "Rewinded video playback 10 seconds");
			extent.extentLogger("Verify rewind button", "Playback is rewinded 10 seconds");
			logger.info("Rewinded 10 seconds is passed");
		} else {
			softAssert.assertEquals(rewindTime <= timeDuration2, false, " Can not Rewind video playback 10 seconds");
			softAssert.assertAll();
			extent.extentLoggerFail("Verify rewind button", "Playback can not be rewind 10 seconds");
			logger.info("Rewind 10 sec is failed");
		}
		// Verify Farword 10 seconds icon
		String currentDurationF = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"current duration");
		System.out.println("time fetched before Farword : " + currentDuration);
		String[] timeF = currentDurationF.split(":");
		System.out.println(timeF);
		int timeDurationF = Integer.parseInt(timeF[1]);
		System.out.println("seconds lapsed before farword: " + timeDurationF);
		int farwordTimeF = timeDurationF + 10;
		JSClick(PWAPlayerPage.forward10SecBtn, "Farword 10 seconds");
		waitForPlayerAdToComplete("Video Player");
		String currentDurationAfter10SecF = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"current duration");
		System.out.println("time fetched after rewind: " + currentDurationAfter10Sec);
		String[] time2F = currentDurationAfter10SecF.split(":");
		int timeDuration2F = Integer.parseInt(time2F[1]);
		System.out.println("seconds lapsed after Farword: " + timeDuration2F);
		if (farwordTimeF >= timeDuration2F) {
			softAssert.assertEquals(farwordTimeF >= timeDuration2F, true, "Farworded video playback 10 seconds");
			extent.extentLogger("Verify rewind button", "Playback is Farword 10 seconds");
			logger.info("Farword 10 seconds is passed");
		} else {
			softAssert.assertEquals(farwordTimeF >= timeDuration2F, false,
					" Can not Farword video playback 10 seconds");
			softAssert.assertAll();
			extent.extentLoggerFail("Verify rewind button", "Playback can not be Farword 10 seconds");
			logger.info("Farword 10 sec is failed");
		}
	}

	/*
	 * Validate the Audio functionality
	 */

	public void AudioValidation() throws Exception {
		System.out.println("AudioValidation");
		JSClick(PWAPlayerPage.objPlaybackVideoOverlay, "player");
		String Audio = getElementPropertyToString("aria-label", PWAPlayerPage.audioBtn, "Audio button");
		if (Audio.contains("Mute")) {
			softAssert.assertEquals(Audio.contains("Mute"), true, "Playbac is Audible");
			extent.extentLogger("Veridy Playback is audible", "Playback is Audible");
			logger.info("Playback is audible");
		} else {
			softAssert.assertEquals(Audio.contains("Mute"), false, "Video is not audible");
			softAssert.assertAll();
			extent.extentLogger("Veridy Playback is audible", "Playback is not Audible");
			logger.info("Playback is not audible");
		}
		// Verify Audio is muted
		JSClick(PWAPlayerPage.objPlaybackVideoOverlay, "player");
		click(PWAPlayerPage.audioBtn, "Audio button");
		String muteAudio = getElementPropertyToString("aria-label", PWAPlayerPage.audioBtn, "Audio button");
		if (muteAudio.contains("Unmute")) {
			softAssert.assertEquals(muteAudio.contains("Unmute"), true, "Playbac is Muted");
			extent.extentLogger("Veridy Playback is audible", "Playback is Muted");
			logger.info("Playback is Muted");
		} else {
			softAssert.assertEquals(muteAudio.contains("Unmute"), false, "Video is not muted");
			softAssert.assertAll();
			extent.extentLogger("Veridy Playback is audible", "Playback is not Muted");
			logger.info("Playback is not Muted");
		}

	}

	/*
	 * Player Quality validation
	 */

	public void PlayerQuality() throws Exception {
		System.out.println("PlayerQuality");

		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
			verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumPopupCloseButton, "POP-UP CLOSE BUTTON");
		}

		extent.HeaderChildNode("Validating Player Quality");

		// click on player
//		click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
		// Click on Setting
		click(PWAPlayerPage.settingsBtn, "Setting icon");
		// Click on Quality
		click(PWAPlayerPage.qualityBtn, "Quality option");
		// Verify the Quality
		for (int i = 1; i <= getWebDriver().findElements(PWAQualitySettingsPage.objAllQualities).size(); i++) {

			// click on the first quality
			click(PWAQualitySettingsPage.objIndividualQuality(i), "Quality");
			// click on player
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
			// Click on Setting
			click(PWAPlayerPage.settingsBtn, "Setting icon");
			// Click on Quality
			click(PWAPlayerPage.qualityBtn, "Quality option");
			if (findElement(PWAQualitySettingsPage.objSelectedQuality(i)).getAttribute("class").contains("tickMark")) {
				String selectedQuality = getWebDriver().findElement(PWAQualitySettingsPage.objIndividualQuality(i))
						.getText();
				System.out.println(selectedQuality);
				// Click on Player
				click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
				// Click on Setting
				click(PWAPlayerPage.settingsBtn, "Setting icon");
				String qualitySelected = getWebDriver().findElement(PWAQualitySettingsPage.objQualityText).getText();
				if (selectedQuality.equals(qualitySelected)) {
					softAssert.assertEquals(selectedQuality, qualitySelected);
					extent.extentLogger("Verify Quality", "The selected Quality is applied");
					logger.info("The Selected quality is " + selectedQuality);
				} else {
					softAssert.assertAll();
					softAssert.assertEquals(selectedQuality, qualitySelected);
					extent.extentLogger("Verify Quality", "The selected Quality is failed");
					logger.info("Quality select is failed");
				}
			}
		}
	}

	/*
	 * Validating share functionality
	 */
	public void ShareFunctionality() throws Exception {

		System.out.println("ShareFunctionality");
		extent.HeaderChildNode("Share functionality Validation");
		// Verify Share option
		verifyElementPresent(PWAPlayerPage.shareBtn, "Share option");
		// Click on the Share option
		// click(PWAPlayerPage.shareBtn, "Share option");
		WebShareFunctionality();
		// Verify the Share options are visible
		// verifyElementPresent(PWAPlayerSharePage.objShareViaText,"Share Via Popup");
		// Navigate back to playback page
		// Back(1);
	}

	/*
	 * Function to validate the Web Share functionality
	 */
	public void WebShareFunctionality() throws Exception {
		// click on share Option
		click(PWAPlayerPage.shareBtn, "Share Option");
		// Verify Facebook share option
		Thread.sleep(2000);
		verifyElementPresent(PWAPlayerPage.facebookShareBtn, "Facebook share option");
		Thread.sleep(2000);

		// Verify Twitter share option
		verifyElementPresent(PWAPlayerPage.twitterShareBtn, "Twitter share option");
		Thread.sleep(2000);
		// Verify Email Share option
		verifyElementPresent(PWAPlayerPage.emailShareBtn, "Email share option");
		Thread.sleep(2000);
		// Click on Facebook Share option
		click(PWAPlayerPage.facebookShareBtn, "Facebook share option");
		Thread.sleep(2000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}

		// Switch to window
		verifyAlert();
		switchToWindow(2);
		Thread.sleep(2000);
		// Verify user is navigate to Facebook page
		if (checkElementDisplayed(PWALiveTVPage.objFacebookEmailField, "Facebook Email field")) {
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookEmailField, "Facebook Email field");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}

			getWebDriver().findElement(PWALiveTVPage.objFacebookEmailField).sendKeys("helloigs6@gmail.com");
//		waitTime(3000);
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookPasswordField, "Facebook Password field");
			getWebDriver().findElement(PWALiveTVPage.objFacebookPasswordField).sendKeys("hello@12345");
//		waitTime(3000);
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookLoginBtn, "Facebook Login button");
			waitTime(2000);
		}
		verifyAlert();
		waitTime(2000);
		verifyElementPresentAndClick(PWALiveTVPage.objPostToFacebookBtn, "Post to Facebook");
		waitTime(3000);
		verifyAlert();
		switchToWindow(1);
		waitTime(3000);
//		verifyElementPresent(WebSharePage.objFacebookTitle, "Facebook Title on Facebook page");
//		verifyAlert();
//		getWebDriver().close();
		// Switch to default window
//		Thread.sleep(2000);
//		verifyAlert();
//		switchToParentWindow();
		Thread.sleep(2000);
		// Click on Share option
		click(PWAPlayerPage.shareBtn, "Share Option");
		Thread.sleep(2000);
		// Click on Twitter share option
		click(PWAPlayerPage.twitterShareBtn, "Twitter share option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}

		Thread.sleep(2000);
		// Verify user is navigated to Twitter page
		switchToWindow(2);
		Thread.sleep(2000);
		verifyAlert();
		// Verify user is navigated to Twitter page
		checkElementDisplayed(WebSharePage.objTwitterLogo, "Twitter Share page");
		verifyAlert();
		getWebDriver().close();
		switchToParentWindow();
		Thread.sleep(2000);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		waitTime(5000);
	}

	/**
	 * Function to validate the Add to Watch list as a guest user
	 */
	public void AddToWatchListGuestUser(String userType) throws Exception {

		if (userType.contains("Guest")) {
			System.out.println("AddToWatchListGuestUser");
			extent.HeaderChildNode("Add to Watch List Guest user validations");
			// Verify Add to Watchlist is displayed
			verifyElementPresent(PWAPlayerPage.watchListBtn, "Add to Watchlist");
			// Click on Add to Watchlist option
			click(PWAPlayerPage.watchListBtn, "Add to Watchlist");

			// Verify user is Observed Login pop up
			verifyElementPresent(PWAPlayerPage.objLoginRequiredTxt, "Login Required Pop up");
			// Close the Login Popup
			click(PWAPlayerPage.objCloseBtnLoginPopupWeb, "Close button Login Popup");
			getWebDriver().manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
		} else {
			System.out.println("AddToWatchListLoggedUser");
			Thread.sleep(4000);

			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
			AddToWatchListLoggedInUser();
		}
	}

	/**
	 * Method to validate watchcredit button in player.
	 * @param userType
	 * @throws Exception
	 */
	public void WatchCredit(String userType) throws Exception {
		System.out.println("WatchCredit");
		if (userType.equalsIgnoreCase("Guest")) {
			mandatoryRegistrationPopUp(userType);
		}
		extent.HeaderChildNode("Validating Watch credit button");
		// Click on home page
		click(PWAHomePage.objTabName("Home"), "Home page");
		// Click on search icon
		click(PWAHomePage.objSearchBtn, "Search Button");
		// Enter text
		type(PWASearchPage.objSearchEditBox, "welcome Back", "Search Edit box");
		waitTime(8000);
		// Click on first content
		JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, "Content Card");
		waitTime(3000);
		// close login up
		if (userType.equalsIgnoreCase("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register popup close button")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
			}
			if (getParameterFromXML("browserType").equalsIgnoreCase("Firefox")) {
				click(PWAPlayerPage.objContentTitle, "Content Title");
			}
			waitForPlayerAdToComplete("Video Player");
			mouseHover();
			pause();
			// Scub the video
			ScrubToPlayerEnd();
			verifyElementPresentAndClick(PWAPlayerPage.objWatchCredit, "Watch Credit");
		} else {
			if (getParameterFromXML("browserType").equalsIgnoreCase("Firefox")) {
				click(PWAPlayerPage.objContentTitle, "Content Title");
			}
			waitForPlayerAdToComplete("Video Player");
			mouseHover();
			pause();
			// Scub the video
			ScrubToPlayerEnd();
			verifyElementPresentAndClick(PWAPlayerPage.objWatchCredit, "Watch Credit");
		}
	}


	@SuppressWarnings("unused")
	public String waitUntilUpNextCardPlays(String sourceCardTitle) throws Exception {
		System.out.println("sourceCardTitle:" + sourceCardTitle);
		getWebDriver().manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
		main: for (int trial = 0; trial < 480; trial++) {
			for (int sec = 0; sec < 60; sec++) {
				// check for Ad Play After Scrub
				try {
					getWebDriver().findElement(PWAPlayerPage.objAd);
					if (trial == 0 && sec == 5) {
						logger.info("Ad play in progress");
						extent.extentLogger("AdPlayInProgress", "Ad play in progress");
					}
				} catch (Exception e) {
					// No Ad
					try {
						String playerTitle = getWebDriver().findElement(PWALandingPages.objPlayerTitle).getText();
						System.out.println("playerTitle" + playerTitle);
						if (!playerTitle.equals(sourceCardTitle)) {
							logger.info("Upnext Card is playing :" + playerTitle);
							extent.extentLogger("", "Upnext Card is playing :" + playerTitle);
							return playerTitle;
						}
					} catch (Exception e1) {
					}
				}
			}
			if (Math.floorMod(trial, 60) == 0) {
				logger.info("Waiting for Upnext content to play");
				extent.extentLogger("", "Waiting for Upnext content to play");
			}
		}
		return "";
	}

	public void ScrubToPlayerEnd() throws Exception {
		Actions act = new Actions(getWebDriver());
		WebElement overlay = findElement(PWAPlayerPage.objSubTitleOverlay);
		int overlayX = overlay.getLocation().getX();
		int overlayY = overlay.getLocation().getY();
		act.moveToElement(overlay, (overlayX + 10), (overlayY + 10)).build().perform();
		WebElement progressBar = findElement(PWAPlayerPage.progressBar);
		int progressBarWidth = progressBar.getSize().getWidth();
		System.out.println(progressBarWidth);
		int progressBarX = progressBar.getLocation().getX();
		System.out.println(progressBarX);
		int progressBarEndX = progressBarX + progressBarWidth;
		System.out.println(progressBarEndX);
		WebElement scrubber = findElement(PWAPlayerPage.objPlayerScrubber);
		int scrubberX = scrubber.getLocation().getX();
		System.out.println(scrubberX);
		int offsetForEnd = progressBarEndX - scrubberX - 10;
		System.out.println(offsetForEnd);
		act.moveToElement(scrubber, offsetForEnd, 0).click().release().build().perform();
		waitTime(2000);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "Scrubbed to end of the player");
		logger.info("Scrubbed to end of the player");
		mandatoryRegistrationPopUp(userType);
	}

	/*
	 * Function to validate the Ad
	 */
	public void waitForPlayerAdToComplete1(String playerType) throws Exception {
//		getWebDriver().manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
//		WebDriverWait wait = new WebDriverWait(driver,30);
//		wait.until(ExpectedConditions.presenceOfElementLocated(PWAPlayerPage.objAd));
		boolean adWasDisplayed = false;
		boolean playerDisplayed = false;
		int confirmCount = 0;
		main: for (int trial = 0; trial < 90; trial++) {
			try {
				getWebDriver().findElement(PWAPlayerPage.objAd);
				adWasDisplayed = true;
				if (trial == 5) {
					logger.info("Ad play in progress");
					extent.extentLogger("AdPlayInProgress", "Ad play in progress");
				}
				if (Math.floorMod(trial, 10) == 0)
					System.out.println("Ad play in progress");
				Thread.sleep(1000);
			} catch (Exception e) {
				try {
					if (playerType.equals("Live Player")) {
						getWebDriver().findElement(PWAPlayerPage.objLivePlayerLiveTag);
					} else if (playerType.equals("Video Player")) {
						getWebDriver().findElement(PWAPlayerPage.objPlayerSeekBar);
					}
					playerDisplayed = true;
					Thread.sleep(1000);
					confirmCount++;
					if (confirmCount == 3) {
						if (adWasDisplayed == false) {
							logger.info("Ad did not play");
							extent.extentLogger("AdDidNotPlay", "Ad did not play");
						} else {
							logger.info("Ad play complete");
							extent.extentLogger("AdPlayComplete", "Ad play complete");
						}
						break main;
					}
				} catch (Exception e1) {
					Thread.sleep(1000);
				}
			}
		}
		if (playerDisplayed == false && adWasDisplayed == false) {
			logger.error("Ad play failure");
			extent.extentLoggerFail("failedAd", "Ad play failure");
		}
	}

	// ----------------------------------------------------------------
	// Manas
//	public void verifyAutoroatingOnCarousel(String screen) throws Exception {
//        extent.HeaderChildNode("Verifying autorotating of carousel pages on : " + screen);
//        String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
//        navigateToAnyScreenOnWeb(screen);
//        WebDriverWait w = new WebDriverWait(getWebDriver(), 15);
//        //for (int i = 0; i < 10; i++) {
//            try {
//                firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
//                System.out.println("title1 >>> "+firstCarouselTitle);
//
//                try {
//                    //getWebDriver().findElement(PWAHomePage.objWEBContTitleTextCarousel(firstCarouselTitle));
//                    waitTime(7000);
//                    secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
//                    System.out.println("title2 >>> " +secondCarouselTitle);
//                }catch(Exception e) {
//                    secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
//                    System.out.println("title2 >>> " +secondCarouselTitle);
//                    try {
//                        getWebDriver().findElement(PWAHomePage.objContTitleTextCarousel(secondCarouselTitle));
//                        waitTime(4000);
//                        thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
//                        System.out.println("title2 >>> " +thirdCarouselTitle);
//                    }catch(Exception e1) {
//                        thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
//                        System.out.println("title2 >>> " +thirdCarouselTitle);
//                    }
//                }
//
//
////              w.until(ExpectedConditions.invisibilityOfElementLocated(PWAHomePage.objWEBContTitleTextCarousel(secondCarouselTitle)));
////              //verifyElementNotPresent(PWAHomePage.objWEBContTitleTextCarousel(secondCarouselTitle), 60);
////              thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
////              System.out.println("title3 >>> " +thirdCarouselTitle);
//////                break;
//            } catch (Exception e) {
//                e.getMessage();
//            }
//        //}
//        if (firstCarouselTitle.equals(secondCarouselTitle) == false
//                && secondCarouselTitle.equals(thirdCarouselTitle) == false) {
//            softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
//            logger.info("Content is auto rotated ");
//            extent.extentLogger("Autorotating",
//                    "First content title :" + firstCarouselTitle + " and next content title :" + secondCarouselTitle);
//            extent.extentLogger("Autorotating", "Content is auto rotated");
//        } else {
//            softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
//            logger.info("Content is not auto rotated");
//            extent.extentLogger("Autorotating", "Content is not auto rotated");
//            softAssert.assertAll();
//        }
//
//    }


	/**
	 * Method to verify carousel autorotating
	 * @param screen
	 * @throws Exception
	 */
	public void verifyAutoroatingOnCarousel(String screen) throws Exception {
		extent.HeaderChildNode("Verify Autorotating On Carousel");
		boolean autoplayingItemsPresent = false;
		// String languageSmallText = allSelectedLanguages();
		Response tabResponse = ResponseInstance.getResponseForPages(screen.toLowerCase(), "en,hi,kn");
		int carouselItemsCount = tabResponse.jsonPath().get("buckets[0].items.size()");
		System.out.println(carouselItemsCount);
		if (carouselItemsCount > 7)
			carouselItemsCount = 7;
		for (int i = 0; i < carouselItemsCount; i++) {
			try {
				if (tabResponse.jsonPath().get("buckets[0].items[" + i + "].tags[0]").toString().equals("Autoplay")) {
					logger.info("Autorotation could not be verified because Carousel contains auto playing items");
					extent.extentLoggerWarning("",
							"Autorotation could not be verified because Carousel contains auto playing items");
					autoplayingItemsPresent = true;
					break;
				}
			} catch (Exception e) {
			}
		}
		if (autoplayingItemsPresent == false) {
			if (navigateToAnyScreenOnWeb(screen)) {
				String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
				// (new WebDriverWait(getDriver(),
				// 30)).until(ExpectedConditions.presenceOfElementLocated(PWAHomePage.objContTitleOnCarousel));
				firstCarouselTitle = getElementPropertyToString("innerText", PWAHomePage.objContTitleOnCarousel,
						"Carousel Content Title").toString();
				logger.info("Carousel content title fetched first time: " + firstCarouselTitle);
				extent.extentLogger("Autorotating", "Carousel content title fetched first time: " + firstCarouselTitle);
				Thread.sleep(6000);
				waitTime(3000);
				secondCarouselTitle = getElementPropertyToString("innerText", PWAHomePage.objContTitleOnCarousel,
						"Carousel Content Title").toString();
				logger.info("Carousel content title fetched second time: " + secondCarouselTitle);
				extent.extentLogger("Autorotating",
						"Carousel content title fetched second time: " + secondCarouselTitle);
				Thread.sleep(6000);
				waitTime(2000);
				thirdCarouselTitle = getElementPropertyToString("innerText", PWAHomePage.objContTitleOnCarousel,
						"Carousel Content Title").toString();
				logger.info("Carousel content title fetched third time: " + thirdCarouselTitle);
				extent.extentLogger("Autorotating", "Carousel content title fetched third time: " + thirdCarouselTitle);
				Thread.sleep(6000);
				if (firstCarouselTitle.equals(secondCarouselTitle) || secondCarouselTitle.equals(thirdCarouselTitle)) {
					logger.error("Autorotation failed");
					extent.extentLoggerFail("Autorotating", "Autorotation failed");
				} else {
					logger.info("Different carousel titles are displayed at different instances, Autorotation passed");
					extent.extentLogger("Autorotating",
							"Different carousel titles are displayed at different instances, Autorotation passed");
				}
			} else {
				logger.error("Failed to validate carousel autorotation on tab : " + screen);
				extent.extentLoggerFail("Autorotating", "Failed to validate carousel autorotation on tab : " + screen);
			}
		}
	}

	/**
	 * Method to navigate to any page in web
	 *
	 */
	public boolean navigateToAnyScreenOnWeb(String screen) throws Exception {
		try {
			if (checkElementDisplayed(PWAHomePage.objHomeBarText(screen), screen + " Tab")) {
				click(PWAHomePage.objHomeBarText(screen), screen + " Tab");
				return true;
			} else {
				JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
				getWebDriver().findElement(PWAHomePage.objMoreMenuIcon);
				waitTime(2000);
				try {
					WebElement tab = getWebDriver().findElement(PWAHomePage.objMoreMenuTabs(screen));
					logger.info(screen + " Tab is displayed");
					extent.extentLogger("tabDisplayed", screen + " Tab is displayed");
					executor.executeScript("arguments[0].click();", tab);
					logger.info("Clicked on " + screen + " Tab");
					extent.extentLogger("tabClicked", "Clicked on " + screen + " Tab");
					return true;
				} catch (Exception e) {
				}
			}

		} catch (Exception e) {
			System.out.println("Exception : " + e.getMessage());
		}
		return false;
	}

	/**
	 * Method to validate metadata on carousel
	 * @param screen
	 * @param pageName
	 * @throws Exception
	 */
	public void verifyMetadataOnCarousel(String screen, String pageName) throws Exception {

		extent.HeaderChildNode("Verifying metadata of carousel pages on page : " + screen);

		navigateToAnyScreenOnWeb(screen);

		List<String> metaTitle = new LinkedList<String>();

		String carouselTitle = null;

		verifyElementPresent(PWAHomePage.objCarouselBanner, "carousel for :" + screen);

		for (int i = 0; i < 7; i++) {
			try {
				carouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

				if (metaTitle.contains(carouselTitle)) {
					break;
				} else {
					metaTitle.add(carouselTitle);
				}
				System.out.println(metaTitle);

				click(PWANewsPage.objRight, "right");
				waitTime(2000);

			} catch (Exception e) {
				System.out.println(e);
			}

		}

		System.out.println(metaTitle);

		List<String> allMetaTitleOnCarousel = ResponseInstance.traysTitleCarousel(pageName);

		System.out.println(allMetaTitleOnCarousel);
		for (int i = 0; i < 7; i++) {
			if (metaTitle.get(i).equalsIgnoreCase(allMetaTitleOnCarousel.get(i))) {
				logger.info("APICarouselTitle " + allMetaTitleOnCarousel.get(i) + " matches with UICarouselTitle "
						+ metaTitle.get(i));
				extent.extentLogger("metadata verification", "APICarouselTitle " + allMetaTitleOnCarousel.get(i)
						+ "matches with UICarouselTitle " + metaTitle.get(i));
			} else {
				logger.info("APICarouselTitle " + allMetaTitleOnCarousel.get(i) + " matches with UICarouselTitle "
						+ metaTitle.get(i));
				extent.extentLogger("metadata verification", "APICarouselTitle " + allMetaTitleOnCarousel.get(i)
						+ "matches with UICarouselTitle " + metaTitle.get(i));
			}

		}
	}

	// MANAS
//    /**
//     * Function to verify Meta data on carousel for different pages
//     *
//     * @param pagename
//     * @param screenname
//     * @throws Exception
//     */
//    @SuppressWarnings({ "null", "null" })
//public void verifyMetadataOnCarousel(String screen, String pageName) throws Exception {
//
//        extent.HeaderChildNode("Verifying metadata of carousel pages on page : " + screen);
//
//        navigateToAnyScreenOnWeb(screen);
//
//        String doesContainMetadata = "";
//
//        List<String> statusList = new LinkedList<String>();
//        List<String> metaDataTitleBothOnAPIUI = new LinkedList<String>();
//        List<String> metaTitle = new LinkedList<String>();
//
//        String carouselTitle = null;
//
//        verifyElementPresent(PWAHomePage.objCarouselBanner, "carousel for :" + screen);
//
//            for (int i = 0; i < 7; i++) {
//            try {
//                    carouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
//
//                    if (metaTitle.contains(carouselTitle))
//                    {
//                        break;
//                    }
//                    else
//                    {
//                        metaTitle.add(carouselTitle);
//                    }
//                    System.out.println(metaTitle);
//
//                    click(PWANewsPage.objRight, "right");
//                    waitTime(2000);
//
//                 }
//            catch (Exception e)
//            {
//                    System.out.println(e);
//             }
//
//          }
//
//            System.out.println(metaTitle);
//
//        List<String> allMetaTitleOnCarousel = ResponseInstance.traysTitleCarousel(pageName);
//
//        System.out.println(allMetaTitleOnCarousel);
//        for(int i=0; i<7; i++)
//        {
//            if (metaTitle.get(i).equalsIgnoreCase(allMetaTitleOnCarousel.get(i)))
//            {
//                logger.info("APICarouselTitle "+allMetaTitleOnCarousel.get(i)+"matches with UICarouselTitle "+metaTitle.get(i));
//                extent.extentLogger("metadata verification","APICarouselTitle "+allMetaTitleOnCarousel.get(i)+"matches with UICarouselTitle "+metaTitle.get(i));
//            }
//            else
//            {
//                logger.info("APICarouselTitle "+allMetaTitleOnCarousel.get(i)+"matches with UICarouselTitle "+metaTitle.get(i));
//                extent.extentLogger("metadata verification","APICarouselTitle "+allMetaTitleOnCarousel.get(i)+"matches with UICarouselTitle "+metaTitle.get(i));
//            }
//
//        }
//  }

	/**
	 * Function to verify Play icon functionality
	 *
	 * @throws Exception
	 */
	public void verifyPlayIconFunctionality(String screen) throws Exception {
		extent.HeaderChildNode("Verifying play icon functionality on carousel for : " + screen);
		waitTime(3000);
		JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
		for (int i = 0; i <= 10; i++) {
			try {
				WebElement premiumText = getWebDriver().findElement(PWAHomePage.objWEBPlayBtn);
				executor.executeScript("arguments[0].click();", premiumText);
				break;
			} catch (Exception e) {
				Thread.sleep(2000);
				try {
					getWebDriver().findElement(PWAHomePage.objWEBPlayBtn).click();
					break;
				} catch (Exception e1) {
				}
			}
		}
		waitForElementDisplayed(PWAPlayerPage.objPlayerControlScreen, 10);
		if (verifyElementPresent(PWAPlayerPage.objPlayerControlScreen, "Player control containing screen")) {
			logger.info("Play icon functionality is verified for " + screen);
			extent.extentLogger("", "Play icon functionality is verified for " + screen);
		} else {
			logger.error("Play icon functionality failed for " + screen);
			extent.extentLoggerFail("", "Play icon functionality failed for " + screen);
		}
		Thread.sleep(5000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "Subscribe Pop Up") == true) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "Subscribe Pop Up Close button");
		}
		click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
	}

//    public void verifyPremiumIconFunctionality(String screen, String userType) throws Exception {
//        extent.HeaderChildNode("Verifying premium icon functionality On : " + screen + " for " + userType);
//        boolean isNextPageDisplayed = false;
//        navigateToAnyScreenOnWeb(screen);
//        if (userType.equalsIgnoreCase("SubscribedUser")) {
//            List<WebElement> getPremiumTextList = driver.findElements(PWAHomePage.objWEBGetPremium);
//            if (getPremiumTextList.size() == 0) {
//                softAssert.assertTrue(true, "Next page is not displayed");
//                logger.info("Get premium text is not displayed for subscribed users");
//                extent.extentLogger("Premium text for subscribed user",
//                        "Get premium text is not displayed for subscribed users" + screen);
//            }
//        } else {
//            JavascriptExecutor executor = (JavascriptExecutor)getWebDriver();
//            try {
//                WebElement premiumText = getWebDriver().findElement(PWAHomePage.objWEBGetPremium);
//                executor.executeScript("arguments[0].click();", premiumText);
//            }catch(Exception e) {
//                Thread.sleep(2000);
//                getWebDriver().findElement(PWAHomePage.objWEBGetPremium).click();
//            }
//        }
//        if (userType.equalsIgnoreCase("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
//            if (verifyElementPresent(PWAHomePage.objSubscriptionPage, "Subscription page")) {
//                isNextPageDisplayed = true;
//                getWebDriver().navigate().back();
//            } else {
//                isNextPageDisplayed = false;
//            }
//        }
//
//        if (userType.equalsIgnoreCase("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
//            if (isNextPageDisplayed) {
//                softAssert.assertTrue(isNextPageDisplayed, "Next page is displayed");
//                logger.info("Next page is displayed on banner for " + screen);
//                extent.extentLogger("Premium button validation", "Next page is displayed for " + screen);
//            } else {
//                softAssert.assertTrue(isNextPageDisplayed, "Next page is not displayed");
//                logger.info("Next page is not displayed for " + screen);
//                extent.extentLogger("Premium button validation", "Next page is not displayed for " + screen);
//                softAssert.assertAll();
//            }
//        }
//    }

	public void verifyPremiumIconFunctionality(String screen, String userType) throws Exception {
		extent.HeaderChildNode("Verifying premium icon functionality on : " + screen + " for " + userType);
		navigateToAnyScreenOnWeb(screen);
		boolean clicked = false;
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			waitTime(4000);
			List<WebElement> getPremiumTextList = getWebDriver().findElements(PWAHomePage.objPlayCarousel);
			if (getPremiumTextList.size() == 0) {
				logger.info("Buy Plan CTA is not displayed for Subscribed users, expected behavior");
				extent.extentLogger("", "Buy Plan CTA is not displayed for Subscribed users, expected behavior");
			} else {
				logger.error("Buy Plan CTA is displayed for Subscribed users");
				extent.extentLoggerFail("", "Buy Plan CTA is displayed for Subscribed users");
			}
		} else {
			JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
			try {
				WebElement premiumText = getWebDriver().findElement(PWAHomePage.objWEBGetPremium);
				executor.executeScript("arguments[0].click();", premiumText);
				logger.info("Clicked on Buy Plan CTA");
				extent.extentLogger("", "Clicked on Buy Plan CTA");
				clicked = true;
			} catch (Exception e) {
				Thread.sleep(2000);
				try {
					getWebDriver().findElement(PWAHomePage.objWEBGetPremium).click();
					logger.info("Clicked on Buy Plan CTA");
					extent.extentLogger("", "Clicked on Buy Plan CTA");
					clicked = true;
				} catch (Exception e1) {
					logger.error("Failed to click on Buy Plan CTA");
					extent.extentLoggerFail("", "Failed to click on Buy Plan CTA");
				}
			}
		}
		if (clicked == true) {
			if (verifyElementPresent(PWAHomePage.objSubscriptionPage, "Subscription page")) {
				logger.info("Verified Buy Plan CTA functionality");
				extent.extentLogger("Premium button validation", "Verified Buy Plan CTA functionality");
				Back(1);
			} else {
				logger.error("Failed to verify Buy Plan CTA");
				extent.extentLoggerFail("", "Failed to verify Buy Plan CTA");
				click(PWAHomePage.objZeeLogo, "Zee Logo");
			}
		}
	}

	public void verifyLeftRightFunctionality(String screen) throws Exception {
		extent.HeaderChildNode("Verifying left and right functionality");
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "", fourthCarouselTitle = "";
		WebDriverWait w = new WebDriverWait(getWebDriver(), 40);
		navigateToAnyScreenOnWeb(screen);
		w.until(ExpectedConditions.visibilityOfElementLocated(PWAHomePage.objWEBCarouselTitle));
		firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
		logger.info("Carousel Title fetched: " + firstCarouselTitle);
		extent.extentLogger("", "Carousel Title fetched: " + firstCarouselTitle);
		click(PWANewsPage.objRight, "Right Button");
		secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
		logger.info("Carousel Title fetched: " + secondCarouselTitle);
		extent.extentLogger("", "Carousel Title fetched: " + secondCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle)) {
			logger.error("Right button click failed");
			extent.extentLoggerFail("Swipe left and right", "Right button click failed");
		} else {
			logger.info("Verified Right button click");
			extent.extentLogger("Swipe left and right", "Verified Right button click");
		}
		waitTime(2000);
		thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
		thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
		logger.info("Carousel Title fetched: " + thirdCarouselTitle);
		extent.extentLogger("", "Carousel Title fetched: " + thirdCarouselTitle);
		click(PWANewsPage.objRight, "Left Button");
		fourthCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
		fourthCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
		logger.info("Carousel Title fetched: " + fourthCarouselTitle);
		extent.extentLogger("", "Carousel Title fetched: " + fourthCarouselTitle);
		if (thirdCarouselTitle.equals(fourthCarouselTitle)) {
			logger.error("Left button click failed");
			extent.extentLoggerFail("", "Left button click failed");
		} else {
			logger.info("Verified Left button click");
			extent.extentLogger("Swipe left and right", "Verified Left button click");
		}

	}

	// ----------------------------------------------------------------------------------------------------

	public void WebValidatingLandingPages(String UserType, String tabname) throws Exception {

		switch (UserType) {

		case "Guest":

			extent.HeaderChildNode("User Type Guest");
			System.out.println("User Type Guest");
			// enterURLInWEBBrowser("chrome", "https://newpwa.zee5.com");
//			waitForPageLoaded();
			waitTime(5000);

			FirstTimeAnonymousUser();
			landingpagePropertiesValidation();
			Back_TO_TopWeb();
			WebHomepageTrayTitleAndContentValidationWithApiData(tabname, ResponseInstance.getResponse());
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("User Type Loggedin User");
			System.out.println("User Type Loggedin User");

			// ZeeWEBPWALogin("NonSubscribedUser");
			// verifyElementPresentAndClick(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Menu
			// button");
			FirstTimeNonSubcribed_Loggedin_User();
			landingpagePropertiesValidation();
			Back_TO_TopWeb();
			WebHomepageTrayTitleAndContentValidationWithApiData(tabname, ResponseInstance.getResponse());
//			logout();
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("User Type Subcribed User");
			System.out.println("User Type Subcribed User");
			// ZeeWEBPWALogin("SubscribedUser");
			FirstTimeSubcribed_Loggedin_User();
			landingpageValidation_for_SubcribedUser();
			Back_TO_TopWeb();
			WebHomepageTrayTitleAndContentValidationWithApiDataForSubcribedUser(ResponseInstance.getResponse());
//			logout();

		}

	}

	public void Back_TO_TopWeb() throws Exception {
		extent.HeaderChildNode("Scroll to top button functionality");
//		scrollDown();
//		scrollToBottomOfPage();
//		scroll1();
		scrollDownWEB();
		waitForElementDisplayed(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, 20);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");
//		verifyElementPresent(Pwa_LandingPages.obj_Pwa_PlayIcon_Carousal, "Carousal play icon");
		System.out.println("Scrolled back to top using Back to top button");

	}

	public void FirstTimeAnonymousUser() throws Exception {
		extent.HeaderChildNode("First time user Trenrding on zee5 validation");
		System.out.println("FTAU");
		FirstTimeUser_Trending_on_zee5();
	}

	public void landingpagePropertiesValidation() throws Exception {
		extent.HeaderChildNode("Validating Homepage Properties");
		verifyElementPresent(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		verifyElementPresent(PWALandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo");
		verifyElementPresent(PWALandingPages.obj_Pwa_SearchBtn, "Search");
		verifyElementPresent(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
	}

	public void webScrollToElement(By Locator, String validationText) throws Exception {
		for (int i = 1; i <= 10; i++) {
			if (verifyElementPresent(Locator, validationText)) {
				break;
			}
			waitTime(2000);
			scrollDownWEB();
		}
	}

	public void webscrollToXpath(By xpath) throws Exception {
		for (int i = 0; i < 5; i++) {
			if (checkElementDisplayed(xpath, "xapth")) {
				System.out.println("Element Found");
				break;
			} else {
				scrollDownByY(100);

			}
		}
	}

//	public void WebHomepageTrayTitleAndContentValidationWithApiData(Response ApiData) throws Exception {
//
//		extent.HeaderChildNode("Home page validation with Api response");
//		Response resp = ApiData;
//		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
//		System.out.println("The Title of the Tray is " + Tray_Title + "");
//		webscrollToXpath(WebText_To_Xpath(Tray_Title));
//		waitTime(3000);
//		if (checkElementDisplayed(WebText_To_Xpath(Tray_Title), Tray_Title)) {
//			System.out.println("Tray title Found");
////			Verify_SeeAll_Functionality(Tray_Title);
////			Navigate_to_HomeScreen_using_Zee5Logo();
//		} else {
//			System.out.println("Tray title Not found");
//		}
//
//		String Content_Title = resp.jsonPath().getString("buckets[1].items[0].title");
//		System.out.println("Content Title is " + Content_Title + "");
//		scrollDownWEB();
//		webscrollToXpath(TitleTextToXpath(Content_Title));
//		waitTime(3000);
//		if (checkElementDisplayed(TitleTextToXpath(Content_Title), Content_Title)) {
//			System.out.println("Content title Found");
//			verifyElementPresent(TitleTextToXpath(Content_Title), "Playable Content");
//		}
//
////			verifyElementPresentAndClick(Text_To_Xpath(Content_Title), "Playable Content");
////			waitForElementDisplayed(Text_To_Xpath(Content_Title), 20);
////			verifyElementPresent(Text_To_Xpath(Content_Title), "Playable content ");
////			Why_Register_POPUP();
////			verifyElementPresentAndClick(Pwa_LandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo");
//
//		else {
//			System.out.println("Content_Title Not found");
//		}
//
//	}

	public void WebHomepageTrayTitleAndContentValidationWithApiData(String tabname, Response ApiData) throws Exception {
		extent.HeaderChildNode(tabname + " page validation with Api response");
		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);
		// Response resp = ApiData;
		new LinkedList<String>();
		Response resp = ResponseInstance.getResponseForPages(tabname.toLowerCase(), languageSmallText);
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		waitTime(3000);
		partialScroll();
		if (checkElementDisplayed(WebText_To_Xpath(Tray_Title), Tray_Title)) {
			// System.out.println("Tray title Found");
			logger.info("Title Found in UI " + Tray_Title);
			extent.extentLoggerPass("Title Found in UI", "Title Found in UI " + Tray_Title);
		} else {
			logger.error("Title not Found in UI");
			extent.extentLoggerFail("Title not Found in UI", "Title not Found in UI");
			// System.out.println("Tray title Not found");
		}
		String Content_Title = resp.jsonPath().getString("buckets[1].items[0].title");
		System.out.println("Content Title is " + Content_Title + "");
		scrollDownWEB();
		scrollDownWEB();
		// webscrollToXpath(TitleTextToXpath(Content_Title));
		waitTime(3000);
		if (checkElementDisplayed(TitleTextToXpath(Content_Title), Content_Title)) {
			logger.info("Content Found in UI " + Tray_Title);
			extent.extentLoggerPass("Content Found in UI", "Content Found in UI " + Tray_Title);
			verifyElementPresent(TitleTextToXpath(Content_Title), "Playable Content");
		} else {
			logger.error("Content not Found in UI");
			extent.extentLoggerFail("Content not Found in UI", "Content not Found in UI");
		}
//		partialScroll();
		waitTime(5000);
		extent.HeaderChildNode("Verify the right side bottom arrow ");
		scrollToElement(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn);
		if (verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow button")) {

			logger.info("Navigate back to the Top of Application");
			extent.extentLoggerPass("Back to top", "Navigate back to the Top of Application");
		} else {
			logger.info("Didn't Navigate back to the Top of Application");
			extent.extentLoggerFail("Back to top", "Didn't Navigate back to the Top of Application");
		}
	}

	public void WebHomepageTrayTitleAndContentValidationWithApiDataForSubcribedUser(Response ApiData) throws Exception {
		extent.HeaderChildNode("Homepage validation with respect to api response");
		Response resp = ApiData;
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		webscrollToXpath(WebText_To_Xpath(Tray_Title));
		if (checkElementDisplayed(WebText_To_Xpath(Tray_Title), Tray_Title)) {
			System.out.println("Tray title Found");
//			Verify_SeeAll_Functionality(Tray_Title);
//			Navigate_to_HomeScreen_using_Zee5Logo();
		} else {
			System.out.println("Tray title  found");
		}
		String Content_Title = resp.jsonPath().getString("buckets[1].items[0].title");
		System.out.println("Content Title is " + Content_Title + "");
		scrollDownWEB();
		webscrollToXpath(TitleTextToXpath(Content_Title));
		if (checkElementDisplayed(TitleTextToXpath(Content_Title), Content_Title)) {
			System.out.println("Content title Found");
			verifyElementPresent(TitleTextToXpath(Content_Title), "Playable Content");
		}

//			verifyElementPresentAndClick(Text_To_Xpath(Content_Title), "Playable Content");
//			waitForElementDisplayed(Text_To_Xpath(Content_Title), 20);
//			verifyElementPresent(Text_To_Xpath(Content_Title), "Playable content ");
//			Why_Register_POPUP();
//			verifyElementPresentAndClick(Pwa_LandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo");

		else {
			System.out.println("Content_Title Not found");
		}

	}

	public void landingpageValidation_for_SubcribedUser() throws Exception {
		extent.HeaderChildNode("Validating home page properties for subcribed user");
		verifyElementPresent(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		verifyElementPresent(PWALandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo");
		verifyElementPresent(PWALandingPages.obj_Pwa_SearchBtn, "Search");
		verifyElementNotPresent(PWALandingPages.obj_Pwa_Subcription_teaser_btn, 5);

	}

	public void Loggedin_User(String Rail_Name, String Content_Name, String userType) throws Exception {
		landingpagePropertiesValidation();
		Homepage_Title_with_Api(Rail_Name);
		Homepage_Content_selection_playback_with_Api(Rail_Name, Content_Name);
		Verify_Get_Premium_Trailer(userType);
		Back_TO_TopWeb();
	}

	public void FirstTimeNonSubcribed_Loggedin_User() throws Exception {
		extent.HeaderChildNode("First time loggedin user Trending on zee5 validation");
		FirstTimeUser_Trending_on_zee5();
	}

	public By TitleTextToXpath(String Title) throws Exception {
		return By.xpath("//*[@class='movieTrayWrapper']//*[contains(@title, \"" + Title + "\")]");
	}

	public void FirstTimeSubcribed_Loggedin_User() throws Exception {
		extent.HeaderChildNode("First time subcribed user Trending on zee5 validation");
		FirstTimeUser_Trending_on_zee5();
	}

	public void FirstTimeUser_Trending_on_zee5() throws Exception {

		Swipe_till_Zee5IsTrending();
		if (checkElementDisplayed(PWALandingPages.obj_Pwa_Trending_On_Zee5, "Zee5 Trending")) {
			System.out.println("Trending is found and is a first time user");
		} else {
//      System.out.println("Not a first time user");
			Swipe_till_Zee5IsTrending();
			verifyElementPresent(PWALandingPages.obj_Pwa_Trending_On_Zee5, "Zee5 Trending");
		}
	}

	public void Homepage_Title_with_Api(String RailTitle) throws Exception {
		Response resp = ResponseInstance.getResponse();
		for (int i = 0; i < resp.jsonPath().getList("buckets").size(); i++) {
			if (resp.jsonPath().getString("buckets[" + i + "].title").equals(RailTitle)) {
//          System.out.println(i);
				System.out.println("Tray Title is : " + RailTitle + ", found on API");
				Swipe_till_Text(RailTitle);
				Verify_SeeAll_Functionality(RailTitle);
			}
//      else {
////            System.out.println("["+RailTitle+"] title not found");
//      }
		}
		Navigate_to_HomeScreen_using_Zee5Logo();
	}

	public void Homepage_Content_selection_playback_with_Api(String Rail_Name, String Content_Name) throws Exception {
		Response resp = ResponseInstance.getResponse();
		for (int i = 0; i < resp.jsonPath().getList("buckets").size(); i++) {
			if (resp.jsonPath().getString("buckets[" + i + "].title").equals(Rail_Name)) {
				for (int j = 0; j < resp.jsonPath().getList("buckets[+i+].items").size(); j++) {
					if (resp.jsonPath().getString("buckets[" + i + "].items[" + j + "].title").equals(Content_Name)) {
						System.out.println("Content Name Found : " + Content_Name + " ");
						Swipe_till_Text(Content_Name);
						verifyElementPresentAndClick(Text_To_Xpath(Content_Name), "Playable Content");
						waitForElementDisplayed(Text_To_Xpath(Content_Name), 20);
						verifyElementPresent(Text_To_Xpath(Content_Name), "Playable content ");
						Why_Register_POPUP();
						verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo");
					} else {
						System.out.println("Content Not found on Api");
					}
				}
			}
		}
	}

//	public By WebText_To_Xpath(String text) throws Exception {
//
//		return By.xpath("//div[.='" + text + "'] | //*[contains(@text,'" + text + "')]");
//
//	}

	// Yashaswini
	public By WebText_To_Xpath(String text) throws Exception {

		return By.xpath("(//a[@class='titleLink'])[1]");

	}

	public void Verify_Get_Premium_Trailer(String userType) throws Exception {

		WatchTrailer();
		verifyElementPresentAndClick(PWASearchPage.watchTrailerBtn, "watch Trailer");
		waitForElementDisplayed(PWASearchPage.Obj_Pwa_Get_Premium_btn, 60);
		verifyElementPresent(PWASearchPage.Obj_Pwa_Get_Premium_btn, "Get Primium");
		Navigate_to_HomeScreen_using_Zee5Logo();

	}

	public void Swipe_till_Zee5IsTrending() throws Exception {
		waitTime(5000);
		int found = 0;
		for (int i = 0; i <= 2; i++) {
			if (verifyElementPresent(PWALandingPages.obj_Pwa_Trending_On_Zee5, "Zee5 is trending")) {
				System.out.println("element found");
				found = 1;
				break;
			} else {
				webScrollToElement(PWALandingPages.obj_Pwa_Trending_On_Zee5, "Trending on Zee5");
			}
			if (found == 0) {
				System.out.println("Trending on Zee5 not found and not First time user");
			}
		}
	}

	public void Swipe_till_Text(String text) throws Exception {
		waitTime(4000);
		for (int i = 0; i <= 5; i++) {
			if (checkElementDisplayed(Text_To_Xpath(text), text)) {
				System.out.println("element found");
				break;
			} else {
//			PartialSwipe("up", 1);
				scrollDownWEB();
			}
		}
	}

	public void Verify_SeeAll_Functionality(String s) throws Exception {
		waitTime(3000);
//	verifyElementPresentAndClick(objTrayTitleArrowBtn(s), "view all");
		if (checkElementDisplayed(PWALandingPages.objTrayTitleArrowBtn(s), s)) {
			waitForElementDisplayed(PWALandingPages.obj_Pwa_Trending_On_Zee5, 10);
			verifyElementPresent(Text_To_Xpath(s), s);
		} else {
			System.out.println("See all Not visible");
		}
	}

	public void Navigate_to_HomeScreen_using_Zee5Logo() throws Exception {
		extent.HeaderChildNode("Navigate to HomeScreen using Zee5 Logo");
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee5 Logo");
		waitForElementDisplayed(PWAHomePage.objContTitleOnCarousel, 20);
		verifyElementPresent(PWAHomePage.objContTitleOnCarousel, "Carousal content title");
	}

	public By Text_To_Xpath(String text) throws Exception {

		return By.xpath("//*[contains(@text,'" + text + "')]");

	}

	public By TextToXpath(String text) throws Exception {
		return By.xpath("//div[contains(@class,'trayContentWrap')]//*[contains(text(),'" + text + "')]");
	}

	public void Why_Register_POPUP() throws Exception {

		try {
			if (checkcondition(PWALandingPages.obj_Pwa_WhyRegister_Popup)) {
				verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Popup_Close, "Close button");
			} else {
				System.out.println("popup not displayed");
			}
		} catch (Exception e) {
			System.out.println("popup not displayed");
		}
	}

//public static Response getResponse() {
//	Response response = given().urlEncodingEnabled(false).when().get(
//			"https://gwapi.zee5.com/content/collection/0-8-homepage?limit=20&page=1&item_limit=20&desc=no&version=6&translation=en&languages=en,kn&country=IN");
//	return response;
//}

//-----------------------------------TANISHA-------------------------------------------------

	/**
	 * Method to verify Consumptions screen tapping on any content card
	 *
	 * @param userType
	 * @param contentType
	 * @param contentTitle
	 * @param devicePin
	 * @throws Exception
	 */
	public void oldverifyConsumptionsScreenTappingOnCard(String userType, String contentType, String contentTitle,
			String devicePin) throws Exception {
		extent.HeaderChildNode("Verify Consumption Page for Content type: " + contentType);
		System.out.println("Verify Consumption Page for Content type: " + contentType);
		String consumptionPageTitle = "";
		if (contentType.equals("Live TV")) {
			if (checkElementDisplayed(PWAHomePage.objMoreMenuIcon, "More Menu Icon") == true) {
				verifyElementPresentAndClick(PWAHomePage.objMoreMenuIcon, "More Menu Icon");
				waitTime(5000);
				verifyElementPresentAndClick(PWAHomePage.objMoreMenuTabs("Live TV"), "Live TV Tab");
			}
			// verifyElementPresentAndClick(PWAHomePage.objTabName("Live TV"), "Live TV
			// tab");
			waitForElement(PWAShowsPage.objFirstAssetTitleLiveTvCard, 30, "Content title");
			contentTitle = getElementPropertyToString("innerText", PWAShowsPage.objFirstAssetTitleLiveTvCard,
					"Content Title").toString();
//			waitForElement(PWAShowsPage.objFirstAssetImageLiveTvCard, 30, "Live TV Card");

			if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup")) {
				click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
			}
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
			}

			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}

			verifyElementPresentAndClick(PWAShowsPage.objFirstAssetImageLiveTvCard, "Live TV Card");
			System.out.println("userType : " + userType);
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {

				waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 10, "Close in Register Pop Up");

			} else if (userType.equals("SubscribedUser")) {

				// enterDevicePin(devicePin);

			} else {
				waitForPlayerAdToComplete("Video Player");
				extent.extentLoggerFail("incorrectUserType", "Incorrect User Type entered in script");
				logger.error("Incorrect User Type entered in script");
			}
			waitForElement(PWAPlayerPage.objContentTitleLiveTV, 20, "Content title");
			consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleLiveTV,
					"Content Title").toString();
		} else {
//			waitTime(6000);
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			// waitForElementAndClickIfPresent(PWASearchPage.objClosePremiumDialog, 10,
			// "Close in Language Pop Up");
//			waitTime(4000);
			type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
//			waitForElement(PWASearchPage.objSearchedResult(contentTitle), 10, "Search Result");
			waitTime(4000);
			verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {

//				waitForPlayerAdToComplete("Video Player");
				waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 10, "Close in Register Pop Up");
//				waitForPlayerAdToComplete("Video Player");

			} else if (userType.equals("SubscribedUser")) {
				// enterDevicePin(devicePin);
			} else {
				extent.extentLoggerFail("incorrectUserType", "Incorrect User Type entered in script");
				logger.error("Incorrect User Type entered in script");
				System.out.println("Incorrect User Type entered in script");
			}

//			waitForElement(PWAPlayerPage.objContentTitle, 30, "Content title");
			consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
					"Content Title").toString();
		}

		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation",
					"Successfully navigated to the correct Consumption page: " + consumptionPageTitle);
			logger.info("Successfully navigated to the correct Consumption page " + consumptionPageTitle);

//			System.out.println("contentType : " + contentType);
//			if (contentType.equals("Live TV")) {
//
////				pausePlayerForLiveTV();
//
//			} else {
////				pausePlayerAndGetLastPlayedTime();
//			}

		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Consumption page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Consumption page: " + consumptionPageTitle);
		}
	}

	public void verifyConsumptionsScreenTappingOnCard(String userType, String contentType, String contentTitle)
			throws Exception {
		extent.HeaderChildNode("Verify Consumption Page for Content type: " + contentType);
		System.out.println("Verify Consumption Page for Content type: " + contentType);
		mandatoryRegistrationPopUp(userType);
		String consumptionPageTitle = "";
		if (contentType.equals("Live TV")) {
			navigateToAnyScreenOnWeb("Live TV");
			waitForElementAndClickIfPresent(PWAShowsPage.objFirstAssetTitleLiveTvCard, 10, "Live TV Card");
			waitForElement(PWAPlayerPage.objContentTitleLiveTV, 10, "Content title");
			consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleLiveTV,
					"Content Title").toString();
			// update
			extent.HeaderChildNode("Content duration and elapsed time should not be available on live TV player");
			if (checkElementDisplayed(PWAPlayerPage.totalDurationTime, "Total time")
					&& checkElementDisplayed(PWAPlayerPage.objcurrenttime, "Total time")) {
				logger.info(" Content duration and elapsed time is displayed");
				extent.extentLoggerFail("ContentTime", "Content duration and elapsed time is displayed");
			} else {
				logger.info("Content duration and elapsed time should not display , expected result ");
				extent.extentLoggerPass("ContentTime",
						"Content duration and elapsed time should not display , expected result");
			}

		} else {
			waitTime(6000);
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
			waitTime(4000);
			waitForElement(PWASearchPage.objSearchedResult(contentTitle), 10, "Search Result");
			mandatoryRegistrationPopUp(userType);
			verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
			waitTime(10000);
			consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleShow,
					"Content Title").toString();
		}
		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation",
					"Successfully navigated to the correct Consumption page: " + consumptionPageTitle);
			logger.info("Successfully navigated to the correct Consumption page: " + consumptionPageTitle);
			/*
			 * if (contentType.equals("Live TV")) { pausePlayerForLiveTV(); } else {
			 * pausePlayerAndGetLastPlayedTime(); }
			 */
		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Consumption page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Consumption page: " + consumptionPageTitle);
		}
	}


	/**
	 * Method to pause the player and get the duration lapsed
	 *
	 * @throws Exception
	 */
	public void pausePlayerAndGetLastPlayedTime() throws Exception {
		if (!waitForElementToLeaveScreen(PWAPlayerPage.objPlayLoader, 10, "Player Loader")) {
			waitForPlayerAdToComplete("Video Player");
			if (pausePlayer() == true) {
				getPlayerDuration();
			} else {
				extent.extentLoggerFail("failedToPause", "Failed to pause Player");
				logger.error("Failed to pause Player");
			}
		}
	}

	/**
	 * Method to get the duration lapsed in the player
	 */
	public void getPlayerDuration() {
		String duration = getElementPropertyToString("innerText", PWAPlayerPage.objPlayerCurrentDuration,
				"Player Current Duration").toString();
		if (duration != null) {
			extent.extentLogger("contentDuration", "Successfully played content " + duration);
			logger.info("Successfully played content " + duration);
		} else {
			extent.extentLoggerFail("durationFailed", "Failed to get Current Duration");
			logger.error("Failed to get Current Duration");
		}
	}

	/**
	 * Method to Pause the Player
	 */
	public boolean pausePlayer() throws InterruptedException {
		boolean playerPaused = false;
		for (int trial = 0; trial <= 4; trial++) {
			try {
				click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
				// click(PWAPlayerPage.objPlayerPause, "Player Pause");
				try {
					getWebDriver().findElement(PWAPlayerPage.playBtn);
					extent.extentLogger("playerPaused", "Paused the Player");
					logger.info("Paused the Player");
					playerPaused = true;
					break;
				} catch (Exception e) {
				}
			} catch (Exception e) {
				Thread.sleep(1000);
				if (trial == 4) {
					extent.extentLoggerFail("errorOccured", "Error when handling Player");
					logger.error("Error when handling Player");
				}
			}
		}
		return playerPaused;
	}

	@SuppressWarnings("unused")
	public void firefoxpause() throws InterruptedException {
		boolean playerPaused = false;

		// getWebDriver().findElement(By.xpath("//i[@class='playkit-icon
		// playkit-icon-pause']")).click();

		for (int trial = 0; trial <= 4; trial++) {
			try {

				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();

				WebElement menuOption1 = getWebDriver().findElement(By.xpath("//div[@class='playkit-overlay-action']"));
				actions.moveToElement(menuOption1).perform();

//			    Thread.sleep(1000);
//			    if(checkElementDisplayed(PWAPlayerPage.objPlayerPause, "Player Pause"))
//			    {
				click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
//					click(PWAPlayerPage.objPlayerPause, "Player Pause");
//			    }

				try {
					getWebDriver().findElement(PWAPlayerPage.playBtn);
					extent.extentLogger("playerPaused", "Paused the Player");
					logger.info("Paused the Player");
					playerPaused = true;
					break;
				} catch (Exception e) {
				}
			} catch (Exception e) {
				Thread.sleep(1000);
				if (trial == 4) {
					extent.extentLoggerFail("errorOccured", "Error when handling Player");
					logger.error("Error when handling Player");
				}
			}
		}

	}

	public boolean pauseLivePlayer() throws InterruptedException {
		boolean playerPaused = false;
		for (int trial = 0; trial <= 4; trial++) {
			try {
				click(PWAPlayerPage.objPlayer, "Player");
				// Thread.sleep(1000);
				// (PWAPlayerPage.objPlayerPause, "Player Pause");
				try {
					getWebDriver().findElement(PWAPlayerPage.playBtn);
					extent.extentLogger("playerPaused", "Paused the Player");
					logger.info("Paused the Player");
					playerPaused = true;
					break;
				} catch (Exception e) {
				}
			} catch (Exception e) {
				Thread.sleep(1000);
				if (trial == 4) {
					extent.extentLoggerFail("errorOccured", "Error when handling Player");
					logger.error("Error when handling Player");
				}
			}
		}
		return playerPaused;
	}

	/**
	 * Waits for player loader to complete
	 *
	 * @throws Exception
	 */
	public void waitForPlayerLoaderToComplete() throws Exception {
		// verifyElementNotPresent(PWAPlayerPage.objPlayerLoader, 60);

		new WebDriverWait(getWebDriver(), 120)
				.until(ExpectedConditions.invisibilityOfElementLocated(PWAPlayerPage.objPlayerLoader));
	}

	/**
	 * Method to wait till player ad completes
	 *
	 * @param playerType
	 * @throws Exception
	 */
	public void waitForPlayerAdToComplete(String playerType) throws Exception {
		boolean adWasDisplayed = false;
		boolean playerDisplayed = false;
		int confirmCount = 0;
		waitTime(5000);
		main: for (int trial = 0; trial < 120; trial++) {
			try {
				findElement(PWAPlayerPage.objAd);
				adWasDisplayed = true;
				if (trial == 5) {
					logger.info("Ad play in progress");
					extent.extentLogger("AdPlayInProgress", "Ad play in progress");
					try {
						getWebDriver().findElement(PWAPlayerPage.objAd);
					} catch (Exception e) {
					}
				}
				if (Math.floorMod(trial, 15) == 0)
					System.out.println("Ad play in progress");
				Thread.sleep(1000);

//				//SkipAD
//				if(checkElementDisplayed(PWAPlayerPage.objSkipAd, "SkipAd")){
//					Thread.sleep(5000);
//					click(PWAPlayerPage.objSkipAd, "SkipButton");
//				}
//				else
//				{
//					System.out.println("No Skip Button Displayed");
//				}

			} catch (Exception e) {
				try {
					if (playerType.equals("Live Player")) {
						findElement(PWAPlayerPage.objLivePlayerLiveTag);
					} else if (playerType.equals("Video Player")) {
						findElement(PWAPlayerPage.objPlayerSeekBar);
					}
					playerDisplayed = true;
					confirmCount++;
					if (confirmCount == 1) {
						if (adWasDisplayed == false) {
							logger.info("Ad did not play");
							extent.extentLogger("AdDidNotPlay", "Ad did not play");
						} else {
							logger.info("Ad play complete");
							extent.extentLogger("AdPlayComplete", "Ad play complete");
						}
						break main;
					}
				} catch (Exception e1) {
				}
			}
		}
		if (playerDisplayed == false && adWasDisplayed == false) {
			logger.error("Ad play failure");
			extent.extentLogger("failedAd", "Ad play failure");
		}
	}

	/**
	 * The method will wait for the element to be located for a maximum of given seconds
	 */
	public boolean waitForElement(By locator, int seconds, String message) throws InterruptedException {
		for (int time = 0; time <= seconds; time++) {
			try {
				getWebDriver().findElement(locator);
				logger.info("Located element " + message);
				extent.extentLogger("locatedElement", "Located element " + message);
				return true;
			} catch (Exception e) {
				Thread.sleep(1000);
				if (time == seconds) {
					logger.error("Failed to locate element " + message);
					extent.extentLoggerFail("failedLocateElement", "Failed to locate element " + message);
				}
			}
		}
		return false;
	}

	/**
	 * Pause Player for Live TV
	 *
	 * @throws Exception
	 */
	public void pausePlayerForLiveTV() throws Exception {
		if (!waitForElementToLeaveScreen(PWAPlayerPage.objPlayLoader, 10, "Player Loader")) {
			waitForPlayerAdToComplete("Live Player");
			if (pauseLivePlayer()) {
				try {
					getWebDriver().findElement(PWAPlayerPage.objLivePlayerVolume);
					extent.extentLogger("livePlayerVolume", "Located Live Player Volume");
					logger.info("Located Live Player Volume");
				} catch (Exception e) {
					extent.extentLoggerFail("livePlayerVolume", "Failed to locate Live Player Volume");
					logger.error("Failed to locate Live Player Volume");
				}
			}
		}
	}

	public boolean waitForElementToLeaveScreen(By locator, int seconds, String message) throws Exception {
		waitTime(2000);
		for (int time = 0; time <= seconds; time++) {
			try {
				getWebDriver().findElement(locator);
				Thread.sleep(1000);
				if (time == seconds) {
					logger.info(message + " is displayed");
					extent.extentLogger("element is displayed", message + " is displayed");
					return true;
				}
			} catch (Exception e) {
				logger.info(message + " is not displayed");
				extent.extentLogger("element is displayed", message + " is not displayed");
				return false;
			}
		}
		return false;
	}

	public void enterDevicePin(String devicePin) throws Exception {
		boolean devicePinPresent = false;
// wait and check if device pin box appears
		for (int trial = 0; trial <= 4; trial++) {
			try {
				getWebDriver().findElement(PWAHomePage.objDevicePin1);
				devicePinPresent = true;
			} catch (Exception e) {
				Thread.sleep(1000);
			}
		}
		if (devicePinPresent == true) {
			for (int trial = 0; trial <= 4; trial++) {
				try {
					getWebDriver().findElement(By.xpath("//input[@id='parentLockId1']"))
							.sendKeys(devicePin.substring(0, 1));
					getWebDriver().findElement(By.xpath("//input[@id='parentLockId2']"))
							.sendKeys(devicePin.substring(1, 2));
					getWebDriver().findElement(By.xpath("//input[@id='parentLockId3']"))
							.sendKeys(devicePin.substring(2, 3));
					getWebDriver().findElement(By.xpath("//input[@id='parentLockId4']"))
							.sendKeys(devicePin.substring(3, 4));
					logger.info("Entered Device PIN : " + devicePin);
					extent.extentLogger("devicePIN", "Entered Device PIN : " + devicePin);
					break;
				} catch (Exception e) {
					Thread.sleep(2000);
					if (trial == 4) {
						logger.error("Failed to enter device PIN");
						extent.extentLoggerFail("devicePINfail", "Failed to enter device PIN");
					}
				}
			}
		}
	}

	/**
	 * Dismiss the Display Language pop up
	 */
	public void dismissDisplayContentLanguagePopUp() throws Exception {
		extent.HeaderChildNode("Dismiss Display and Content Language Pop Ups");
		waitForElementAndClickIfPresent(PWAHomePage.objContinueDisplayContentLangPopup, 90,
				"Continue on Display Language Pop Up");
		Thread.sleep(5000);
		waitForElementAndClickIfPresent(PWAHomePage.objContinueDisplayContentLangPopup, 10,
				"Continue on Content Language Pop Up");
	}

	public void verifyWatchLatestEpisodeCTA(String contentTitle) throws Exception {
		extent.HeaderChildNode("Verify Watch Latest Episode CTA");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Shows"), "Shows tab");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
				"Content Title").toString();
		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation",
					"Successfully navigated to the correct Details page: " + contentTitle);
			logger.info("Successfully navigated to the correct Details page: " + contentTitle);
			verifyElementPresent(PWAShowsPage.objWatchLatestCTA, "Watch Latest CTA button");
			String watchLatestCTAText = getElementPropertyToString("innerText", PWAShowsPage.objWatchLatestCTA,
					"Watch Latest CTA button").toString();
			if (watchLatestCTAText.equals("Watch Latest Episode")) {
				extent.extentLogger("correctButtonText", "Correct button text displayed: " + watchLatestCTAText);
				logger.info("Correct button text displayed: " + watchLatestCTAText);
			} else {
				extent.extentLoggerFail("incorrectButtonText",
						"Incorrect button text displayed: " + watchLatestCTAText);
				logger.error("Incorrect button text displayed: " + watchLatestCTAText);
			}
		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Details page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Details page: " + consumptionPageTitle);
		}
	}

	public void verifyShareAndMetaDataInDetailsAndConsumption(String contentTitle) throws Exception {
		extent.HeaderChildNode(
				"Verify Share functionality and metadata comparison between Show Details and Consumption page");
		boolean sharePassed = false;
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(contentTitle), 60, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
				"Content Title").toString();
		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation",
					"Successfully navigated to the correct details page: " + contentTitle);
			logger.info("Successfully navigated to the correct Details page: " + contentTitle);
			// Share functionality
			waitForElementAndClickIfPresent(PWAShowsPage.objShareIcon, 5, "Share Icon");
			waitForElementAndClickIfPresent(PWALiveTVPage.objFacebookShareBtn, 5, "Share to Facebook");
			switchToWindow(2);
			if (checkElementDisplayed(PWALiveTVPage.objFacebookEmailField, "Facebook Email field")) {
				// waitForElementAndClickIfPresent(PWALiveTVPage.objFacebookEmailField, 5,
				// "Facebook Email field");
				click(PWALiveTVPage.objFacebookEmailField, "Facebook Email field");
				getWebDriver().findElement(PWALiveTVPage.objFacebookEmailField).sendKeys("igszeetest@gmail.com");
				verifyElementPresentAndClick(PWALiveTVPage.objFacebookPasswordField, "Facebook Password field");
				getWebDriver().findElement(PWALiveTVPage.objFacebookPasswordField).sendKeys("igs@12345");
				waitForElementAndClickIfPresent(PWALiveTVPage.objFacebookLoginBtn, 5, "Facebook Login button");
				waitTime(2000);
				verifyAlert();
			}
			waitForElementAndClickIfPresent(PWALiveTVPage.objPostToFacebookBtn, 5, "Post to Facebook");
			waitTime(3000);
			acceptAlert();
			switchToWindow(1);
			waitTime(3000);
			verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title in Zee5 PWA");
			sharePassed = true;
		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Details page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Details page: " + consumptionPageTitle);
		}
		if (sharePassed == true) {
			ScrollToTheElementWEB(PWAShowsPage.objFirstAssetTitleFirstRail);
			String detailsTitle = getElementPropertyToString("innerText", PWAShowsPage.objFirstAssetTitleFirstRail,
					"Content Title in Details Page").toString();
			String detailsEpisode = getElementPropertyToString("innerText", PWAShowsPage.objFirstAssetEpisodeFirstRail,
					"Content Episode number in Details Page").toString();
			String detailsDate = getElementPropertyToString("innerText", PWAShowsPage.objFirstAssetDurationFirstRail,
					"Content total Duration in Details Page").toString();
			System.out.println("Data fetched from Show details: Title: " + detailsTitle + ", Episode: " + detailsEpisode
					+ ", Date: " + detailsDate);
			extent.extentLogger("dataFetched", "Data fetched from Show details: Title: " + detailsTitle + ", Episode: "
					+ detailsEpisode + ", Date: " + detailsDate);
			logger.info("Data fetched from Show details: Title: " + detailsTitle + ", Episode: " + detailsEpisode
					+ ", Date: " + detailsDate);
			detailsEpisode = detailsEpisode.split("E")[1];
			verifyElementPresentAndClick(PWAShowsPage.objFirstAssetImageFirstRail, "First asset image from first rail");
			waitForElementDisplayed(PWAPlayerPage.objContentTitle, 10);
			String consumptionTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
					"Content Title in Consumption Page").toString();
			String consumptionEpisode = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaEpisode,
					"Content Episode Number in Consumption Page").toString();
			String consumptionDate = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaDate,
					"Content Date in Consumption Page").toString();
			System.out.println("Data fetched from Consumptions page: Title: " + consumptionTitle + ", Episode: "
					+ consumptionEpisode + ", Duration: " + consumptionDate);
			extent.extentLogger("dataFetched", "Data fetched from Consumptions page: Title: " + consumptionTitle
					+ ", Episode: " + consumptionEpisode + ", Date: " + consumptionDate);
			logger.info("Data fetched from Consumptions page: Title: " + consumptionTitle + ", Episode: "
					+ consumptionEpisode + ", Date: " + consumptionDate);
			consumptionEpisode = consumptionEpisode.split("Episode ")[1];
			if (detailsTitle.equals(consumptionTitle)) {
				extent.extentLogger("titleMatch",
						"Details page and Consumption page content Title matched: " + consumptionTitle);
				logger.info("Details page and Consumption page content Title matched: " + consumptionTitle);
			} else {
				extent.extentLoggerFail("titleMismatch",
						"Details page and Consumption page content mismatched: " + consumptionTitle);
				logger.error("Details page and Consumption page content mismatched: " + consumptionTitle);
			}
			if (detailsEpisode.equals(consumptionEpisode)) {
				extent.extentLogger("episodeMatch",
						"Details page and Consumption page content episode number matched: " + consumptionEpisode);
				logger.info("Details page and Consumption page content episode number matched: " + consumptionEpisode);
			} else {
				extent.extentLoggerFail("episodeMismatch",
						"Details page and Consumption page content episode number mismatched: " + consumptionEpisode);
				logger.error(
						"Details page and Consumption page content episode number mismatched: " + consumptionEpisode);
			}
			if (consumptionDate.contains(detailsDate)) {
				extent.extentLogger("durationMatch",
						"Details page and Consumption page content date matched: " + consumptionDate);
				logger.info("Details page and Consumption page content date matched: " + consumptionDate);
			} else {
				extent.extentLoggerFail("durationMismatch",
						"Details page and Consumption page content date mismatched: " + consumptionDate);
				logger.error("Details page and Consumption page content date duration mismatched: " + consumptionDate);
			}
		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Details page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Details page: " + consumptionPageTitle);
		}

		if (checkElementDisplayed(PWAPlayerPage.objWebZeeLogo, "ZeeLogo") == true) {
			click(PWAPlayerPage.objWebZeeLogo, "Zeelogo");
		} else {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ") == true) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
			}
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
			click(PWAPlayerPage.objWebZeeLogo, "Zeelogo");
		}
	}

	public void acceptAlert() {
		try {
			getWebDriver().switchTo().alert().accept();
			logger.info("Dismissed the alert Pop Up");
			extent.extentLogger("Alert PopUp", "Dismissed the alert Pop Up");
		} catch (Exception e) {

		}
	}

	public void verifySubscriptionPopupForPremiumContent(String userType, String contentTitle) throws Exception {
		extent.HeaderChildNode("Verify Subscription Popup For Premium Content");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
		waitTime(4000);
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
		waitForElement(PWASearchPage.objSearchNavigationTab("Movies"), 30, "Movies tab");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Movies"), "Movies tab");
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(contentTitle), 60, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
		if (!waitForElementPresence(PWAPremiumPage.objPremiumPopUp, 1, "Premium Pop Up")) {
			if (userType.equals("Guest"))
				waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 5, "Close in Register Pop Up");
			waitForElement(PWAPlayerPage.objContentTitle, 20, "Content title");
			String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
					"Content Title").toString();
			if (consumptionPageTitle.contains(contentTitle)) {
				extent.extentLogger("correctNavigation",
						"Successfully navigated to the correct Consumption page: " + contentTitle);
				logger.info("Successfully navigated to the correct Consumption page: " + contentTitle);
				if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
					waitForElement(PWAPremiumPage.objPremiumPopUp, 15, "Premium Pop Up");
					waitForElementAndClickIfPresent(PWASearchPage.objClosePremiumDialog, 1, "Close in Premium Pop Up");
				} else {
					waitForElementAbsence(PWAPremiumPage.objPremiumPopUp, 15, "Premium Pop Up for Subscribed User");
				}
			} else {
				extent.extentLoggerFail("incorrectNavigation",
						"Navigated to incorrect Consumption page: " + consumptionPageTitle);
				logger.error("Navigated to incorrect Consumption page: " + consumptionPageTitle);
			}
		} else
			waitForElementAndClickIfPresent(PWASearchPage.objClosePremiumDialog, 1, "Close in Premium Pop Up");
	}

	/**
	 * The method will wait for the element to not be located for a maximum of given
	 * seconds. The method terminates immediately once the element is located and
	 * throws error.
	 */
	public void waitForElementAbsence(By locator, int seconds, String message) throws InterruptedException {
		main: for (int time = 0; time <= seconds; time++) {
			try {
				getDriver().findElement(locator);
				logger.error("Located element " + message);
				extent.extentLoggerFail("locatedElement", "Located element " + message);
				break main;
			} catch (Exception e) {
				Thread.sleep(1000);
				if (time == seconds) {
					logger.info("Expected behavior: " + message + " is not displayed");
					extent.extentLogger("failedLocateElement", "Expected behavior: " + message + " is not displayed");
				}
			}
		}
	}

	public void verifyNoSubscriptionPopupForFreeContent(String userType, String contentTitle) throws Exception {
		extent.HeaderChildNode("Verify No Subscription Popup For Free Content");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(contentTitle), 60, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objfirstdata, "Searched result");
//		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
		if (userType.equals("Guest")) {
			waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 5, "Close in Register Pop Up");
		}
		if (userType.equals("Guest"))
			waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 5, "Close in Register Pop Up");
		waitForElement(PWAPlayerPage.objContentTitle, 20, "Content title");
		waitTime(10000);
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
				"Content Title").toString();
		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation",
					"Successfully navigated to the correct Consumption page: " + contentTitle);
			logger.info("Successfully navigated to the correct Consumption page: " + contentTitle);
			waitForElementAbsence(PWAPremiumPage.objPremiumPopUp, 45, "Premium Pop Up");
		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Consumption page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Consumption page: " + consumptionPageTitle);
		}
	}

	public boolean waitForElementAndClickIfPresent(By locator, int seconds, String message)
			throws InterruptedException {
		for (int time = 0; time <= seconds; time++) {
			try {
				findElement(locator).click();
				logger.info("Clicked on " + message);
				extent.extentLogger("locatedElement", "Clicked on " + message);
				return true;
			} catch (Exception e) {
				Thread.sleep(1000);
			}
		}
		return false;
	}

	/**
	 * This method will wait for element presence till the given time
	 * @param locator
	 * @param seconds
	 * @param message
	 * @return
	 * @throws Exception
	 */
	public boolean waitForElementPresence(By locator, int seconds, String message) throws Exception {
		try {
			WebDriverWait w = new WebDriverWait(getWebDriver(), seconds);
			w.until(ExpectedConditions.visibilityOfElementLocated(locator));
			logger.info(message + " is displayed");
			extent.extentLogger("element is displayed", message + " is displayed");
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	/**
	 * Function Scroll to Element
	 *
	 * @param element
	 * @throws Exception
	 */
	public void ScrollToTheElementWEB(By element) throws Exception {
		JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
		jse.executeScript("arguments[0].scrollIntoView(true);", findElement(element));
		jse.executeScript("window.scrollBy(0,-250)", "");
	}

	public void tearDown() {
		getWebDriver().quit();
	}

	public void navigateHome() {
		getWebDriver().get(getParameterFromXML("url"));
		getWebDriver().manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
	}

	public void BackButton(int x) {
		try {
			if (getPlatform().equals("Android")) {
				for (int i = 0; i < x; i++) {
					getDriver().navigate().back();
					logger.info("Back button is tapped");
					extent.extentLogger("Back", "Back button is tapped");
				}
			} else if (getPlatform().equals("Web")) {
				getWebDriver().navigate().back();
				logger.info("Back button is tapped");
				extent.extentLogger("Back", "Back button is tapped");
			}
		} catch (Exception e) {
			logger.error(e);
		}
	}

	/**
	 * Method is used to scroll partially
	 */
	public static void partialScroll() {
		JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
		jse.executeScript("window.scrollBy(0,250)", "");
	}

	public static void scrollDownByY(int y) {
		JavascriptExecutor js = (JavascriptExecutor) getWebDriver();
		js.executeScript("window.scrollBy(0," + y + ")", "");
	}

	/**
	 * fetch selected languages
	 *
	 * @throws Exception
	 */
	public String allSelectedLanguagesWEB() throws Exception {
		waitTime(3000);
		(new WebDriverWait(getWebDriver(), 60))
				.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(PWAHamburgerMenuPage.objLanguageBtnWEB));
		Actions act = new Actions(getWebDriver());
		act.moveToElement(getWebDriver().findElement(PWAHamburgerMenuPage.objLanguageBtnWEB));
		click(PWAHamburgerMenuPage.objLanguageBtnWEB, "Language button");
//    		waitTime(2000);
		waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2, "content languages");
		(new WebDriverWait(getWebDriver(), 60)).until(
				ExpectedConditions.visibilityOfAllElementsLocatedBy(PWAHamburgerMenuPage.objContentLanguageWrapper));
		List<WebElement> allSelectedLanguages = getWebDriver().findElements(PWAHamburgerMenuPage.objSelectedLanguages);

		String langtext = "";
		for (int i = 0; i < allSelectedLanguages.size(); i++) {

			langtext = allSelectedLanguages.get(i).getAttribute("for").replace("content_", "") + "," + langtext;
		}
		String finalLangString = langtext.replaceAll(",$", "");
		waitForElementAndClick(PWAHamburgerMenuPage.objLanguageBtnWEB, 2, "Language button");
		return finalLangString;
	}

	public void verifyMetadataOnCarousel(String screen, String pageName, String languageSmallText) throws Exception {
		extent.HeaderChildNode("Verifying metadata of carousel pages on page : " + screen);
		navigateToAnyScreenOnWeb(screen);
		waitTime(5000);
		boolean isTitlePresent = false;

		System.out.println("Selected languages : " + languageSmallText);
		List<String> allMetaTitleOnCarouselAPI = ResponseInstance.traysTitleCarousel(pageName, languageSmallText);
		System.out.println("API Data : " + allMetaTitleOnCarouselAPI);

		for (int i = 0; i < allMetaTitleOnCarouselAPI.size(); i++) {
			for (int j = 0; j < 30; j++) {
				isTitlePresent = false;
				try {
					WebElement mastHeadEle = (new WebDriverWait(getWebDriver(), 60))
							.until(ExpectedConditions.presenceOfElementLocated(
									PWAHomePage.objContTitleTextCarouselWeb(allMetaTitleOnCarouselAPI.get(i))));
					isTitlePresent = checkElementDisplayedUsingWebEl(mastHeadEle, "Carousel Title");
				} catch (Exception e) {
				}
				if (isTitlePresent == true) {
					break;
				} else {
					click(PWANewsPage.objRight, "Right button of Carousel");
				}
			}
			if (isTitlePresent == true) {
				logger.info("API title " + allMetaTitleOnCarouselAPI.get(i) + " is present on UI");
				extent.extentLogger("Metadata validation",
						"API title " + allMetaTitleOnCarouselAPI.get(i) + " is present on UI");
			} else {
				logger.error("API title did not matched with UI title");
				extent.extentLoggerFail("Metadata validation", "API title did not matched with UI title");
			}
		}
	}

	public boolean checkElementDisplayedUsingWebEl(WebElement ele, String str) throws Exception {
		try {
			WebElement element = ele;
			if (element.isDisplayed()) {
				logger.info("" + str + " is displayed");
				extent.extentLogger("" + str + " is displayed", "" + str + " is displayed");
				return true;
			}
		} catch (Exception e) {
			logger.info(str + " is not displayed");
			extent.extentLogger("" + str + " is not displayed", "" + str + " is not displayed");
			return false;
		}
		return false;
	}

//--------------------------------------------------------SANITY FUNCUIONALITY----------------------------------------------------------

	/**
	 * ================================BASAVARAJ TIMED
	 * ANCHORS==================================
	 *
	 */

	/**
	 * ================SHREENIDHI Mandatory registration======================
	 *
	 */

	public void registerPopUpScenarios(String userType) throws Exception {
		switch (userType) {
//		case "Guest":
//			extent.HeaderChildNode("Guest user scenario");
//			extent.extentLogger("Accessing as Guest User", "Accessing as Guest User");
//			logger.info("Accessing as Guest User");
//			registerPopUpFunctionalityWeb(userType);
//			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("NonSubscribedUser scenario");
			extent.extentLogger("Accessing as NonSubscribedUser User", "Accessing as NonSubscribedUser User");
			logger.info("Accessing as NonSubscribedUser User");
			completeProfilePopupWeb();
			ZeeWEBPWALogin(userType);
			break;
		}
	}

	public void registerPopUpFunctionalityWeb(String userType) throws Exception {
		extent.HeaderChildNode("Premium content Player Inline functionality");
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovie");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(13000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search content");
		Thread.sleep(2000);
		if (checkElementDisplayed(PWASearchPage.objPlayerInlineLink, "Player Inline Subscription link")) {
			logger.info("Player Inline suscription link is not displayed for premium content");
			extent.extentLogger("", "Player Inline suscription link is displayed for premium content");

		} else {
			logger.error("Player Inline suscription link is not displayed for premium content");
			extent.extentLoggerFail("", "Player Inline suscription link is not displayed for premium content");
		}

		extent.HeaderChildNode("Player Inline Registration Funtionality");
		for (int i = 0; i <= 3; i++) {
			Thread.sleep(2000);
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
			checkElementDisplayed(PWAHomePage.objSearchField, "Search field");
			String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("freeMovie2");
			type(PWAHomePage.objSearchField, keyword1, "Search");
			waitTime(5000);
			verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword1), "Search Result");
			waitForPlayerAdToComplete("Video Player");
			waitTime(10000);
		}
		verifyElementPresentAndClick(PWASearchPage.objPlayerInLineRegister, "Player Inline Registration link");
		if (checkElementDisplayed(PWASearchPage.objPlayerInlineRegisterPopup, "Mandatory Registration PopUp")) {
			logger.info("Mandatory Register Popup is displayed");
			extent.extentLogger("Pop-Up", "Mandatory Register Popup is displayed");
			logger.info("PopUp is verifed in portrait mode");
			extent.extentLogger("Popup", "PopUp is verifed in portrait mode");
			type(PWAHomePage.objPopUpMobileField, "9964955239", "Mobile field");
			verifyElementPresentAndClick(PWAHomePage.objGenderMale, "Select Gender Male");
			type(PWAHomePage.objAgeInNumber, "23", "Age Text field");
			verifyElementPresentAndClick(PWAHomePage.objCheckBoxForWhatsapp, "Checkbox for Whatsapp consent");
			verifyElementPresentAndClick(PWAHomePage.objContineButtonOnMandReg, "Continue Button");
			verifyElementPresent(PWAHomePage.objverifyOtpPopup, "Verify OTP Popup");
			if (checkElementDisplayed(PWAHomePage.objverifyOtpPopup, "Veify OTP Popup")) {
				logger.info("Otp screen is displayed");
				extent.extentLogger("Popup", "Otp screen is displayed");
			}
			verifyElementPresentAndClick(PWASearchPage.objCloseRegisterDialog, "Close button");
			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee logo");
			mandatoryRegistrationPopUp(userType);
			// changeLanguageAndVerifyPopUp(userType);
		} else {
			logger.info("Mandatory Registration PopUp is not displayed");
			extent.extentLoggerFail("", "Mandatory Registration PopUp is not displayed");
		}
	}

	/**
	 * Validation of Register Popup Functionality after changing the display
	 * language
	 */
	public void changeLanguageAndVerifyPopUp(String userType) throws Exception {
		extent.HeaderChildNode("Change language and verification of SignUp pop up");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageButtonWeb, "Language button");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objkannadalanguage, "kannada Language button");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply buttton");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply buttton");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		checkElementDisplayed(PWAHomePage.objSearchField, "Search field");
		String keyword = getParameterFromXML("freeMovie2");
		type(PWAHomePage.objSearchField, keyword, "Search");
		waitTime(5000);
		waitForElement(PWASearchPage.objSearchedResultChangedLanguage(keyword), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResultChangedLanguage(keyword), "Search Result");
		waitTime(4000);
		if (checkElementDisplayed(PWASearchPage.objRegisterDialogAfterchangedLanguage, "Pop Up")) {
			logger.info("Register Popup is validated after changing language");
			extent.extentLogger("Pop-Up", "Register Popup is validated after changing language");
		}
		click(PWASearchPage.objCloseRegisterDialog, "Close button");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMoreSettingInKannada, "More setting");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objResetSettingsToDefault, "Reset Settings to Default");
		waitTime(3000);
		click(PWAHomePage.objZeeLogo, "Zee logo");
	}

	/**
	 * Validation of Complete Profile Popup Functionality
	 */
	public void completeProfilePopupWeb() throws Exception {
		extent.HeaderChildNode("Complete profile popup functionality");
		logout();
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		extent.HeaderChildNode("Login through incomplete profile account");
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "indaus24@gmail.com", "Email Field");
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "123456", "Password field");
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		checkElementDisplayed(PWAHomePage.objSearchField, "Search field");
		String keyword = getParameterFromXML("freeMovie2");
		type(PWAHomePage.objSearchField, keyword, "Search");
		waitTime(5000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(3000);
		if ((checkElementDisplayed(CompleteYourProfilePopUp.objCompleteYourProfileTxt,
				"Complete Your Profile") == true)) {
			extent.HeaderChildNode("Verification of complete profile popup in potrait mode");
			logger.info("PopUp is verifed in portrait mode");
			extent.extentLogger("Popup", "PopUp is verifed in portrait mode");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objFullName, "Full name Field");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objDOBField, "DOB Field");
			type(CompleteYourProfilePopUp.objDOBField, "15101997", "DOB Field");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objGenderDropDown, "Gender drop down");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objGenderfemale, "Female option");
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objMobileNo, "Mobile Number");
			type(CompleteYourProfilePopUp.objMobileNo, "95839633299", "Mobile Number");
			waitTime(3000);
			verifyElementPresentAndClick(CompleteYourProfilePopUp.objCloseBtn, "Close Button");
			click(PWAHomePage.objZeeLogo, "Zee logo");
		} else {

			logger.info("Complete Profile pop up is not displayed");
			extent.extentLogger("Complete Profile pop up", "Complete Profile pop up is not displayed");
		}
		logout();
	}

	/**
	 * Validation of Upgrage Popup Functionality for RSVOD user
	 */
	public void rsvodPopupWeb() throws Exception {
		extent.HeaderChildNode("Functionality of Upgarde popup for RSVOD user");
		logout();
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(2000);
		verifyElementPresent(PWALoginPage.objWebLoginPageText, "Login page");
		extent.HeaderChildNode("Login through RSVOD User");
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "sooraj.igs@gmail.com", "Email Field");
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "igs@2020", "Password field");
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(5000);
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovie");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
		click(PWASearchPage.objSearchResultPremiumContent, "Premium content");
		if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Popup") == false) {
			logger.info("Register popup is not displayed for premium user");
			extent.extentLogger("Popup", "Register popup is not displayed for premium user");
		}
		waitTime(8000);
		if (checkElementDisplayed(PWASearchPage.objUpgradePopup, "Popup")) {
			extent.HeaderChildNode("Upgrade PopUp Funtionality");
			logger.info("Upgrade popup is displayed for RSVOD user");
			extent.extentLogger("Popup", "Upgrade popup is displayed for RSVOD user");
			extent.HeaderChildNode("Verification of popup in portrait mode");
			logger.info("PopUp is verifed in portrait mode");
			extent.extentLogger("Popup", "PopUp is verifed in portrait mode");
			click(PWASearchPage.objUpgradePopupCloseButton, "Close button");
			logout();
//			validateDisplayLanguagePopup();
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
		}
	}

	/**
	 * ================================SHREENIDHI
	 * Profile==================================
	 *
	 */

	/**
	 * Validation of Profile Functionality according user types.
	 */
	public void myProfileScenarios(String userType) throws Exception {

		switch (userType) {
		case "NonSubscribedUser":
			extent.HeaderChildNode("Non-Subscribed User Scenario");
			extent.extentLogger("Accessing as Non-Subscribed User", "Accessing as Non-Subscribed User");
			logger.info("Accessing as Non-Subscribed User");
			ProfileSanityWeb(userType);
			ZeeWEBPWALogin(userType);
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("Subscribed User scenario");
			extent.extentLogger("Accessing as Subscribed User", "Accessing as Subscribed User");
			logger.info("Accessing as Subscribed User");
			ProfileSanityWeb(userType);
			ZeeWEBPWALogin(userType);
			break;
		}
	}

	public void ProfileSanityWeb(String userType) throws Exception {
		extent.HeaderChildNode("Validate that user is navigate to My profile screen post tapping on Profile icon and account name from Menu");
		verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresentAndClick(PWALandingPages.objAccountName, "Account name from menu");
		verifyElementPresent(PWALandingPages.objMyProfilePage, "Profile Page");

		extent.HeaderChildNode("Validate that On click of the Back button, the User is able to naviagte to the repective Previous page.");
		Back(1);
		if(checkElementDisplayed(PWALandingPages.objCarousleTitle, "Carousel title")) {
			logger.info("User is navigated to previous page");
			extent.extentLogger("Navigation", "User is navigated to previous page");
		} else {
			logger.info("User is not navigated to previous page");
			extent.extentLogger("Navigation", "User is not navigated to previous page");
		}

		extent.HeaderChildNode("Validate the UI/UX of My Profile screen.");
		getWebDriver().navigate().forward();
		verifyElementPresent(PWALandingPages.objHeaderMyProfile, "Header - My Profile");
		verifyElementPresent(PWALandingPages.objUserImageIcon, "User Image Icon");
		verifyElementPresent(PWAHamburgerMenuPage.objUserNameInMyProfileWeb, "User name");
		verifyElementPresent(PWAHamburgerMenuPage.objProfilePageUserIdTxt, "User id");
		verifyElementPresent(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");

		verifyElementPresent(PWAHamburgerMenuPage.objChangePasswordBtn, "Change Password CTA");

		extent.HeaderChildNode("Verify the User details & Edit Profile CTA is displayed in My Profile");
		verifyElementPresent(PWAHamburgerMenuPage.objUserNameInMyProfileWeb, "User name");
		verifyElementPresent(PWAHamburgerMenuPage.objProfilePageUserIdTxt, "User id");
		verifyElementPresent(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");

		extent.HeaderChildNode("Verify Buy Plan banner is displayed in My Profile page");
		if(userType.equalsIgnoreCase("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
			verifyElementPresent(PWAHamburgerMenuPage.objBuyPlanUnit, "Buy Plan Unit");
		} else if (userType.equalsIgnoreCase("SubscribedUser")) {
			if (!checkElementExist(PWAHamburgerMenuPage.objBuyPlanUnit, "Buy Plan Unit")) {
				logger.info("Buy Plan Unit CTA is not displayed - expected");
				extent.extentLoggerPass("", "Buy Plan Unit CTA is not displayed - expected");
			} else {
				logger.error("Buy Plan Unit CTA should not displayed");
				extent.extentLoggerFail("", "Buy Plan Unit CTA should not displayed");
			}
		}

		extent.HeaderChildNode("Verify whether Change Password Option is available in edit profile for Mobile Number Registered user (PWA2-2906).");
		logout();
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login Button");
		verifyElementPresent(PWALoginPage.objEmailField, "Email field");
		JSClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "8660341328", "Email Field");
		verifyElementPresentAndClick(PWALoginPage.objWebLoginButton, "Login Button");
		verifyElementPresent(PWALoginPage.objEnterPasswordField, "Enter Password Field");
		JSClick(PWALoginPage.objEnterPasswordField, "Enter Password Field");
		type(PWALoginPage.objEnterPasswordPopupField, "vasilucky@123", "Password PopUp field");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopUpProceedBtn, "Proceed button");
		waitTime(5000);
		verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresentAndClick(PWALandingPages.objAccountName, "Account name from menu");
		verifyElementPresent(PWALandingPages.objMyProfilePage, "Profile Page");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		if(checkElementDisplayed(PWAHamburgerMenuPage.objChangePasswordBtn, "Change Password CTA")) {
			logger.error("Change Password CTA should not displayed");
			extent.extentLoggerFail("", "Change Password CTA should not displayed");
		} else {
			logger.info("Change Password CTA is not displayed - expected");
			extent.extentLoggerPass("", "Change Password CTA is not displayed - expected");
		}
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
		logout();
		ZeeWEBPWALogin(userType);

		extent.HeaderChildNode("Verify \"My Watchlist\" is displayed under profile and user can land on my watchlist added content screen after tapping the same");
		verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Watchlist"), "My Watchlist");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Watchlist page");
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");

		extent.HeaderChildNode("Verify \"My Subscription\" is displayed under profile and user can see the subscription details there, if no subscription - it should show message\"No Active Subscription\"");
		verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Subscription page");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objSubscribitionPageActivePlan, "Subscription Plan")) {
			logger.info("Subscription plan is displayed");
			extent.extentLogger("Plan", "Subscription plan is displayed");
		}
		if (checkElementDisplayed(PWAHamburgerMenuPage.objNoTranscationText, "No Active Plan - Text")) {
			logger.info("No Active plan text is displayed");
			extent.extentLogger("Plan", "No Active plan text is displayed");
		}
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");

		extent.HeaderChildNode("Verify \" My Transaction\" is displayed, if user have purchased packs in history but he does not have any active subscription. He should be able to see old transaction history under My Transaction");
		verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Transaction"), "My Transaction");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Transaction page");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objTransactionPageGrid, "Transaction Card")) {
			logger.info("Transaction details is displayed");
			extent.extentLogger("Transaction", "Transaction details is displayed");
		}
		if (checkElementDisplayed(PWAHamburgerMenuPage.objNoTranscationText, "No Transaction - text")) {
			logger.info("No transaction text is displayed");
			extent.extentLogger("Transaction", "No transaction text is displayed");
		}
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");

		extent.HeaderChildNode("Validate that change password button is displayed in My Profile screen");
		verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresentAndClick(PWALandingPages.objAccountName, "Account name from menu");
		verifyElementPresent(PWALandingPages.objMyProfilePage, "Profile Page");
		verifyElementPresent(PWAHamburgerMenuPage.objChangePasswordBtn, "Change Password CTA");

		extent.HeaderChildNode("Verify whether Change Password Option is available in edit profile for Mobile Number Registered user.");
		logout();
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login Button");
		verifyElementPresent(PWALoginPage.objEmailField, "Email field");
		JSClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "8660341328", "Email Field");
		verifyElementPresentAndClick(PWALoginPage.objWebLoginButton, "Login Button");
		verifyElementPresent(PWALoginPage.objEnterPasswordField, "Enter Password Field");
		JSClick(PWALoginPage.objEnterPasswordField, "Enter Password Field");
		type(PWALoginPage.objEnterPasswordPopupField, "vasilucky@123", "Password PopUp field");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopUpProceedBtn, "Proceed button");
		waitTime(5000);
		verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresentAndClick(PWALandingPages.objAccountName, "Account name from menu");
		verifyElementPresent(PWALandingPages.objMyProfilePage, "Profile Page");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		if(checkElementDisplayed(PWAHamburgerMenuPage.objChangePasswordBtn, "Change Password CTA")) {
			logger.error("Change Password CTA should not displayed");
			extent.extentLoggerFail("", "Change Password CTA should not displayed");
		} else {
			logger.info("Change Password CTA is not displayed - expected");
			extent.extentLoggerPass("", "Change Password CTA is not displayed - expected");
		}
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
		logout();
		ZeeWEBPWALogin(userType);

		extent.HeaderChildNode("Verify the My Rentals option is available in My profile (PWA2-4678).");
		verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Rental"), "My Rentals Option");
		verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");

		extent.HeaderChildNode("Verify the Tvod purchased details are displayed in My Rentals");
		verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Rentals"), "My Rentals Option");
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Rentals page");
		if(checkElementDisplayed(PWALandingPages.objNoTVODPack, "You have not rented any content yet - text")) {
			logger.info("You have not rented any content yet text is displayed");
			extent.extentLoggerPass("", "You have not rented any content yet text is displayed");
		} else {
			logger.info("TVOD Purchased details is displayed");
			extent.extentLoggerWarning("", "TVOD Purchased details is displayed");
		}
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");

		extent.HeaderChildNode("Edit page Functionality");
		verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresentAndClick(PWALandingPages.objAccountName, "Account name from menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileEditBtn, "Edit button");
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileTextWEB, "edit profile page");
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileFirstName, "Name field");
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileEmailField, "Email field");
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileMobileNumber, "Mobile field");
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileGender, "Gender field");
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileDOB, "Date of birth field");
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileGoBackBtn, "Go back button");
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileSavechangesBtn, "Save changes Button");
		getWebDriver().findElement(PWAHamburgerMenuPage.objEditProfileFirstName).clear();
		type(PWAHamburgerMenuPage.objEditProfileFirstName, "Zee5Igs", "First name");
		waitTime(3000);
		String firstName = findElement(PWAHamburgerMenuPage.objEditProfileFirstName).getAttribute("value");
		System.out.println(firstName);
		if (firstName.contains("Zee5")) {
			logger.info("User can edit in Edit profile screen");
			extent.extentLogger("Edit", "User can edit in Edit profile screen");
		} else {
			logger.info("User edit functionality in Edit profile screen failed");
			extent.extentLoggerFail("Edit", "User edit functionality in Edit profile screen failed");
		}
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileSavechangesBtn, "save changes");
		WebElement button = getWebDriver().findElement(
				By.xpath("//span[text()='Save Changes']//parent::button[contains(@class,'noSelect purpleBtn')]"));
		if (button.isEnabled()) {
			JSClick(PWAHamburgerMenuPage.objEditProfileSavechangesBtn, "save changes");
		} else {
			logger.info("Save Changes button is not enabled");
			extent.extentLoggerWarning("Save Button", "Save Changes button is not enabled");
		}
		verifyElementPresent(PWAHamburgerMenuPage.objEditProfileSavechangesBtn, "save changes");
		WebElement button2 = getWebDriver().findElement(
				By.xpath("//span[text()='Save Changes']//parent::button[contains(@class,'noSelect purpleBtn')]"));
		if (button2.isEnabled()) {
			JSClick(PWAHamburgerMenuPage.objEditProfileSavechangesBtn, "save changes");
		} else {
			logger.info("Save Changes button is not enabled");
			extent.extentLoggerWarning("Save Button", "Save Changes button is not enabled");
		}
		try {
			Boolean SavedChangesToastMessage = getWebDriver().getPageSource().contains("//*[@class='toastMessage']");
			if (SavedChangesToastMessage == true) {
				extent.extentLogger("Toast", "Saved Changes Toast Message displayed");
				logger.info("Saved Changes Toast Message displayed");
			} else {
				extent.extentLogger("Toast", "Saved Changes Toast Message not displayed");
				logger.info("Saved Changes Toast Message not displayed");
			}
		} catch (Exception e) {
			System.out.println("Toast message is not displayed");
		}
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objEditProfileGoBackBtn, "Go back button");
//--------------------------------------------------------------------------------------------------------
		extent.HeaderChildNode("Change password page Functionality");
		waitTime(2000);
		click(PWAHamburgerMenuPage.objChangePasswordBtn, "Change password button");
		waitTime(2000);
		checkElementDisplayed(PWAHamburgerMenuPage.objChangePasswordTextWEB, "change password page");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objEditProfileGoBackBtn, "Go back button");
		waitTime(2000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objMyAccountOptionsText, "My account")) {
			logger.info("User is navigated back to my profile page");
			extent.extentLogger("My profile", "User is navigated back to my profile page");
		}
		click(PWAHamburgerMenuPage.objChangePasswordBtn, "Change password button");
		waitTime(2000);
		verifyElementPresent(PWAHamburgerMenuPage.objChangePasswordTextWEB, "change password page");
//		type(PWAHamburgerMenuPage.objChangeOldPassword, "User@123", "Current password field");
//		String password = getText(PWAHamburgerMenuPage.objChangeOldPassword);
//		if (password != null) {
//			logger.info("User is able to enter numbers and special character");
//			extent.extentLogger("Password", "User is able to enter numbers and special character");
//		}
		type(PWAHamburgerMenuPage.objNewPassword, "abc", "password field");
		click(PWAHamburgerMenuPage.objUpdatePasswordButton, "update button");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objPasswordErrorText, "Error text")) {
			logger.info("Minimun 6 characters error message is displayed");
			extent.extentLogger("Error message", "Minimun 6 characters error message is displayed");
		}
		if (getWebDriver().findElement(PWAHamburgerMenuPage.objUpdatePasswordButton).isEnabled() == false) {
			logger.info("Updated button is not enabled when password field is empty");
			extent.extentLogger("Update button", "Updated button is not enabled when password field is empty");
		}
		getWebDriver().findElement(PWAHamburgerMenuPage.objNewPassword).clear();
		waitTime(3000);
		type(PWAHamburgerMenuPage.objNewPassword, "igszee5", "password field");
		type(PWAHamburgerMenuPage.objConfirmNewPassword, "igszee5", "Current confirm field");
		if (getWebDriver().findElement(PWAHamburgerMenuPage.objUpdatePasswordButton).isEnabled() == true) {
			logger.info("Updated button is enabled when password field is not empty");
			extent.extentLogger("Update button", "Updated button is enabled when password field is not empty");
		}
		click(PWAHomePage.objZeeLogo, "zee logo");
		logout();
	}

//	/**
//	 * Function for Navigation to MyWatchlist .
//	 */
//	public void NavigationsToMyWatchlist() throws Exception {
//		extent.HeaderChildNode("My Watchlist");
//		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Watchlist"), "My watchlist");
//		waitTime(2000);
//		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Watchlist");
//		click(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
//	}
//
//	/**
//	 * Function for Navigation to MyReminders .
//	 */
//	public void NavigationsToMyReminders() throws Exception {
//		extent.HeaderChildNode("My Reminders");
//		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Reminders"), "My Reminders");
//		waitTime(2000);
//		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My reminders");
//		click(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
//	}

	/**
	 * Function for Navigation to My Subscription.
	 */
	public void NavigationsToMySubscriptionWeb() throws Exception {
		extent.HeaderChildNode("My subscriptions");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
		waitTime(2000);
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Subscriptions page");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objSubscribitionPageActivePlan, "My Subscription")) {
			logger.info("Subscription plan is displayed");
			extent.extentLogger("Plan", "Subscription plan is displayed");
		}
		if (checkElementDisplayed(PWAHamburgerMenuPage.objNoTranscationText, "No Transaction")) {
			logger.info("No Active plan is displayed");
			extent.extentLogger("Plan", "No Active plan is displayed");
		}
		click(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
	}

	/**
	 * Function for Navigation to MyTransaction.
	 */
	public void NavigationsToMyTransactionsWeb() throws Exception {
		extent.HeaderChildNode("My Transactions");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Transactions"), "My Transactions");
		JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Transactions"), "My Transactions");
		waitTime(2000);
		verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText, "My Transactions");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objTransactionPageGrid, "Transaction")) {
			logger.info("Transaction details is displayed");
			extent.extentLogger("Transaction", "Transaction details is displayed");
		}
		if (checkElementDisplayed(PWAHamburgerMenuPage.objNoTranscationText, "Transaction")) {
			logger.info("No transaction text is displayed");
			extent.extentLogger("Transaction", "No transaction text is displayed");
		}
		click(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
	}

	/**
	 * ================================BASAVARAJ TIMED
	 * ANCHORS==================================
	 *
	 */

	public void TimedAnchors(String userType) throws Exception {

		extent.HeaderChildNode("Timed Anchors Functionality");
		extent.extentLogger("Timed Anchors", "Timed Anchors Functionality");
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie2");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
		hideKeyboard();
		waitTime(3000);
		JSClick(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(3000);
		String currenturl = getWebDriver().getCurrentUrl();
		String timedurl = currenturl + "?t=60";
		getWebDriver().get(timedurl);
		System.out.println("Hit URL : " + timedurl);
		extent.extentLogger("", "Hit URL : " + timedurl);

//		getWebDriver().get(URL + "kids/kids-movies/bablu-dablu-robo-rumble/0-0-54219?t=60");
//		extent.extentLogger("player", "Playing Free Content");
		waitTime(10000);

		// waitForPlayerLoaderToComplete();

		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");

				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();

			}
		}

		if (userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAPlayerPage.objCompleteProfile, "Complete Profile popup ")) {
				click(PWAPlayerPage.objCompleteProfileCloseIcon, "Complete Profile Pop up close button");

				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}

		waitForPlayerAdToComplete("Video Player");
		System.out.println("pause");

		if (BROWSER.equals("Chrome")) {
			pausePlayer();
		} else {
			firefoxpause();
		}

		String currentDuration = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time: " + currentDuration);
		extent.extentLogger("time", "Current time: " + currentDuration);
		List<WebElement> anchors = getWebDriver().findElements(By.xpath("(//div[@playermarkertag='timer']//div)"));
		// Verify whether important segments are marked in player for Logged In user
		if (checkElementDisplayed(PWAPlayerPage.objtimedanchors, "TimedAnchor")) {
			System.out.println("TimedAnchor Present");
			extent.extentLogger("", "TimedAnchor Present");
			System.out.println("Number of Timed Anchors segments present :" + anchors.size());
			extent.extentLogger("", "Number of Timed Anchors segments present :" + anchors.size());
			if (anchors.size() >= 2) {

				click(PWAPlayerPage.objtimedAnchor(2), "Inividual timed anchor");
				Thread.sleep(7000);
				System.out.println("Clicked on Timed Anchor at position : "
						+ getAttributValue("style", PWAPlayerPage.objtimedAnchor(2)));
				extent.extentLogger("", "Clicked on Timed Anchor at position : "
						+ getAttributValue("style", PWAPlayerPage.objtimedAnchor(2)));
				String currentTime1 = getText(PWAPlayerPage.objcurrenttime);
				System.out.println(
						"Current time after clicking on the TimedAnchor :" + getText(PWAPlayerPage.objcurrenttime));
				extent.extentLogger("",
						"Current time after clicking on the TimedAnchor :" + getText(PWAPlayerPage.objcurrenttime));
				if (!getAttributValue("style", PWAPlayerPage.objtimedAnchor(1))
						.equals(getAttributValue("style", PWAPlayerPage.objtimedAnchor(2)))) {
					System.out.println("Navigated to the TimeAnchor ");
					extent.extentLogger("Navigated to the TimeAnchor ", "Navigated to the TimeAnchor ");
				} else {
					System.out.println("Not Navigated to the TimeAnchor ");
					extent.extentLoggerFail("Not Navigated to the TimeAnchor ", "Not Navigated to the TimeAnchor ");
				}

				System.out.println(getText(PWAPlayerPage.objcurrenttime));

				if (!currentDuration.equals(currentTime1)) {
					System.out.println("Clicked on TimedAnchor and Time is changed");
					extent.extentLogger("Clicked on TimedAnchor and Time is changed",
							"Clicked on TimedAnchor and Time is changed");
				} else {
					System.out.println("Clicked on TimedAnchor and Time is not changed");
					extent.extentLoggerFail("Clicked on TimedAnchor and Time is not changed",
							"Clicked on TimedAnchor and Time is not changed");
				}

				waitForPlayerAdToComplete("Video Player");
				System.out.println("pause");

				if (BROWSER.equals("Chrome")) {
					pausePlayer();
				} else {
					firefoxpause();
				}

				click(PWAPlayerPage.objPlayerPlay, "Play button");

				waitForPlayerAdToComplete("Video Player");

				if (AdValue.equals("AdPlayed")) {
					System.out.println("Ad Played as it was present before TimedAnchor");
					extent.extentLogger("Ad Played as it was present before TimedAnchor",
							"Ad Played as it was present before TimedAnchor");
				} else {
					System.out.println("Ad not played as it was not present before TimedAnchor");
					extent.extentLogger("Ad not played as it was not present before TimedAnchor",
							"Ad not played as it was not present before TimedAnchor");
				}

				System.out.println("pause");
				if (BROWSER.equals("Chrome")) {
					pausePlayer();
				} else {
					firefoxpause();
				}

				if (!currentTime1.equals(getText(PWAPlayerPage.objcurrenttime))) {
					System.out.println("Content Played after click on the TimedAnchor");
					extent.extentLogger("Content Played after click on the TimedAnchor",
							"Content Played after click on the TimedAnchor");
				} else {
					System.out.println("Content not Played after click on the TimedAnchor");
					extent.extentLoggerFail("Content not Played after click on the TimedAnchor",
							"Content not Played after click on the TimedAnchor");
				}
			}
		} else {
			System.out.println("TimedAnchor is not present");
			extent.extentLogger("", "TimedAnchor is not present");
		}

	}

	public void ShowsTimeperiodProvided(String userType) throws Exception {
		/*
		 * Verify whether playback for content(wrt shows) starts playing based on the
		 * timeperiod provided in the URL
		 */
		extent.HeaderChildNode(
				"Verify whether playback for content(wrt shows) starts playing based on the timeperiod provided in the URL");
		int timeperiod = 35;
		mandatoryRegistrationPopUp(userType);
		getWebDriver().get(URL);
//		getWebDriver().get(
//				"https://newpwa.zee5.com/tvshows/details/paaru/0-6-1179/paarvathi-kisses-aditya-paaru/0-1-manual_1dr9c5e034t0?t="
//						+ timeperiod + "");

		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("timedAnchorEpisode");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
		// hideKeyboard();
		waitTime(5000);
		JSClick(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(3000);
		String currenturl = getWebDriver().getCurrentUrl();
		String timedurl = currenturl + "?t=" + timeperiod;
		getWebDriver().get(timedurl);
		System.out.println("Hit URL : " + timedurl);
		extent.extentLogger("", "Hit URL : " + timedurl);

		if (BROWSER.equals("Chrome")) {

		} else {
			Thread.sleep(10000);
			Thread.sleep(10000);
			Thread.sleep(10000);

		}

		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");

				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).build().perform();
			}
		}

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");

				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();

				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}

		waitForPlayerAdToComplete("Video Player");
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");

				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");

				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();

				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		waitForPlayerAdToComplete("Video Player");
		if (BROWSER.equals("Chrome")) {
			pausePlayer();
		} else {
			firefoxpause();
		}
		Thread.sleep(6000);

		PresentTitle = getWebDriver().findElement(By.xpath("(//div[@class='consumptionMetaDiv']//h1)")).getText();

		System.out.println("Show Title : " + PresentTitle);
		String currentDuration1 = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time after appending timedperiod in URL : " + currentDuration1);

		if (timeToSec(currentDuration1) >= timeperiod) {
			System.out.println("Playback started from Appended time");
			extent.extentLogger("Playback started from Appended time", "Playback started from Appended time");
		} else {
			System.out.println("Playback not started from Appended time.");
			extent.extentLoggerFail("Playback not started from Appended time",
					"Playback not started from Appended time");
		}
	}

	public void musicTimeperiodProvided(String userType) throws Exception {
		/*
		 * // Verify whether playback for content(wrt music and music-video) starts
		 * playing based on the timeperiod provided in the URL
		 */
		extent.HeaderChildNode(
				"Verify whether playback for content(wrt music and music-video) starts playing based on the timeperiod provided in the URL");
		int timeperiod2 = 25;
		mandatoryRegistrationPopUp(userType);
		getWebDriver().get(URL);
//		getWebDriver().get(
//				"https://newpwa.zee5.com/music-videos/details/appa-lyrical-punith-shetty/0-0-manual_15l5jn9il6o8?t="
//						+ timeperiod2 + "");

		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("timedAnchorMusic");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
		// hideKeyboard();
		waitTime(4000);
		JSClick(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(3000);
		String currenturl = getWebDriver().getCurrentUrl();
		String timedurl = currenturl + "?t=" + timeperiod2;
		getWebDriver().get(timedurl);
		System.out.println("Hit URL : " + timedurl);
		extent.extentLogger("", "Hit URL : " + timedurl);

		if (BROWSER.equals("Chrome")) {

		} else {
			Thread.sleep(10000);
			Thread.sleep(10000);
			Thread.sleep(10000);

		}

		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}

		if (userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAPlayerPage.objCompleteProfile, "Complete Profile popup ")) {
				click(PWAPlayerPage.objCompleteProfileCloseIcon, "Complete Profile Pop up close button");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}

		waitForPlayerAdToComplete("Video Player");
//		if (userType.equals("Guest")) {
//			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
//				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
//			}
//		}
//		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
//				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
//			} else {
//				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
//			}
//		}
		if (BROWSER.equals("Chrome")) {
			pausePlayer();
		} else {
			firefoxpause();

		}
		Thread.sleep(6000);

		PresentTitle = getWebDriver().findElement(By.xpath("(//div[@class='consumptionMetaDiv']//h1)")).getText();

		System.out.println("Show Title : " + PresentTitle);
		extent.extentLogger("", "Show Title : " + PresentTitle);
		String currentDuration2 = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time after appending timedperiod in URL : " + currentDuration2);
		extent.extentLogger("", "Current time after appending timedperiod in URL : " + currentDuration2);

		if (timeToSec(currentDuration2) >= timeperiod2) {
			System.out.println("Playback started from Appended time");
			extent.extentLogger("Playback started from Appended time", "Playback started from Appended time");
		} else {
			System.out.println("Playback not started from Appended time.");
			extent.extentLoggerFail("Playback not started from Appended time",
					"Playback not started from Appended time");
		}
	}

	public void moviesTimeperiodProvided(String userType) throws Exception {
		/*
		 * // Verify whether playback for content(wrt movies) starts playing based on
		 * the timeperiod provided in the URL
		 */
		extent.HeaderChildNode(
				"Verify whether playback for content(wrt movies) starts playing based on the timeperiod provided in the URL");
		int timeperiod3 = 120;
		mandatoryRegistrationPopUp(userType);
//		getWebDriver().get(URL);

		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("timedAnchorMovie");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
		// hideKeyboard();
		waitTime(4000);
		JSClick(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(3000);

		String currenturl = getWebDriver().getCurrentUrl();
		String timedurl = currenturl + "?t=" + timeperiod3;
		getWebDriver().get(timedurl);
		System.out.println("Hit URL : " + timedurl);
		extent.extentLogger("", "Hit URL : " + timedurl);

		// getWebDriver().get(URL +
		// "kids/kids-movies/bablu-dablu-robo-rumble/0-0-54219?t=" + timeperiod3 + "");
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}

		waitForPlayerAdToComplete("Video Player");
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		waitForPlayerAdToComplete("Video Player");
		if (BROWSER.equals("Chrome")) {
			pausePlayer();
		} else {
			firefoxpause();
		}
		Thread.sleep(3000);

		String PresentTitle = getWebDriver().findElement(By.xpath("(//div[@class='consumptionMetaDiv']//h1)"))
				.getText();
		extent.extentLogger("", "Present Title : " + PresentTitle);
		String currentDuration3 = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time after appending timedperiod in URL : " + currentDuration3);
		extent.extentLogger("", "Current time after appending timedperiod in URL : " + currentDuration3);
		if (timeToSec(currentDuration3) >= timeperiod3) {
			System.out.println("Playback started from Appended time");
			extent.extentLogger("Playback started from Appended time", "Playback started from Appended time");
		} else {
			System.out.println("Playback not started from Appended time.");
			extent.extentLogger("Playback not started from Appended time", "Playback not started from Appended time");
		}

		Thread.sleep(3000);

		// append max time
		getWebDriver().get(URL + "kids/kids-movies/bablu-dablu-robo-rumble/0-0-54219?t=9000");
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}
		waitForPlayerAdToComplete("Video Player");
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
				actions.moveToElement(menuOption).perform();
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAPlayerPage.objSubscribeNowLink, "Subscriptionlink")) {
				System.out.println("Subscribe now link");
			}
		} else {
			if (BROWSER.equals("Chrome")) {
				pausePlayer();
			} else {
				firefoxpause();
			}
		}

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
				extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
			} else {
				extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
			}
		}
		Thread.sleep(3000);
		String presentTitle2 = getWebDriver().findElement(By.xpath("(//div[@class='consumptionMetaDiv']//h1)"))
				.getText();
		extent.extentLogger("", "Naviagted to : " + presentTitle2);

		if (!PresentTitle.equals(presentTitle2)) {
			System.out.println("Navigated to other Player as the time appended is max ");
			extent.extentLogger("Navigated to other Player as the time appended is max ",
					"Navigated to other Player as the time appended is max ");
		} else {
			System.out.println("Not Navigated to other Player");
			extent.extentLogger("Not Navigated to other Player", "Not Navigated to other Player");
		}
		getWebDriver().get(URL + "kids/kids-movies/bablu-dablu-robo-rumble/0-0-54219?t=60");
		Thread.sleep(5000);
	}

	public void continueWatchingtrayData(String userType) {
		/*
		 * //Verifying ContinueWatching Tray Data
		 */
		extent.HeaderChildNode("Verifying ContinueWatching Tray Data");
		mandatoryRegistrationPopUp(userType);
		getWebDriver().get(URL);

		if (userType.equals("SubscribedUser") || userType.equals("NonSubscribedUser")) {
			try {
				ScrollToTheElementWEB(By.xpath("//div[@class='trayHeader']//h2[contains(text(),'Continue Watching')]"));

				Thread.sleep(2000);
				click(PWAHomePage.objspecificTumbnail2("Continue Watching", 1), "Continue watching content");

				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
					extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
					Actions actions = new Actions(getWebDriver());
					WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
					actions.moveToElement(menuOption).perform();
				} else {
					extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
				}

				waitForPlayerAdToComplete("Video Player");

				if (BROWSER.equals("Chrome")) {
					pausePlayer();
				} else {
					firefoxpause();
				}

				String currentDuration4 = getText(PWAPlayerPage.objcurrenttime);
				System.out.println("Current time  : " + currentDuration4);
				extent.extentLogger("", "Current time  : " + currentDuration4);
				String getUrl = getWebDriver().getCurrentUrl();

				int timeperiod4 = 120;
				String modifiedURL = getUrl + "?t=" + timeperiod4 + "";

				getWebDriver().get(modifiedURL);
//			if(userType.equals("NonSubscribedUser")){
//				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
//					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
//					extent.extentLogger("GetPremium is displayed", "GetPremium is displayed");
//				} else {
//					extent.extentLogger("GetPremium is not displayed", "GetPremium is not displayed");
//				}
//
//			}
				waitForPlayerAdToComplete("Video Player");
				if (BROWSER.equals("Chrome")) {
					pausePlayer();
				} else {
					firefoxpause();
				}

				String currentDuration5 = getText(PWAPlayerPage.objcurrenttime);
				System.out.println("Current time after appending timedperiod in URL : " + currentDuration5);
				extent.extentLogger("", "Current time after appending timedperiod in URL : " + currentDuration5);
				if (timeToSec(currentDuration5) >= timeperiod4) {
					System.out.println("Playback started from Appended time");
					extent.extentLogger("Playback started from Appended time", "Playback started from Appended time");
				} else {
					System.out.println("Playback not started from Appended time.");
					extent.extentLoggerFail("Playback not started from Appended time",
							"Playback not started from Appended time");
				}

			} catch (Exception e) {
				System.out.println("No Continue Watching Tray");
			}
		} else {
			extent.extentLogger("", "Its Guest User, So no Continue Watching tray will be displayed");
		}
	}

	/**
	 * ================================SHREENIDHI Menu &
	 * Settings==================================
	 *
	 */

	public void MenuOrSettingScenarios(String UserType) throws Exception {

		switch (UserType) {
		case "Guest":
			extent.HeaderChildNode("Guest user scenario");
			extent.extentLogger("Accessing as Guest User", "Accessing as Guest User");
			logger.info("Accessing as Guest User");
			verificationsOfExploreOptions();
			navigationsFromPlanSectionWeb();
			resetToDefault();
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("NonSubscribedUser scenario");
			extent.extentLogger("Accessing as NonSubscribedUser User", "Accessing as NonSubscribedUser User");
			logger.info("Accessing as NonSubscribedUser User");
			resetToDefault();
			parentControlFunctionality("Non-Subscribed");
			activateFunctionality();
			verificationsOfExploreOptions();
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("SubscribedUser scenario");
			extent.extentLogger("Accessing as SubscribedUser User", "Accessing as SubscribedUser User");
			logger.info("Accessing as SubscribedUser User");
			verificationsOfExploreOptions();
			resetToDefault();
			parentControlFunctionality("Subscribed");
			activateFunctionality();
		}
	}

	public void navigationsFromPlanSectionWeb() throws Exception {
		extent.HeaderChildNode("Functionality of Plan options in Hamburger Menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresent(PWAHamburgerMenuPage.objPlanInHamburger, "Plan option");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objPlanInsideItemsBtn("Buy Plan"),
				"Buy Plan option in Plan section");
		waitTime(3000);
		if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription")) {
			logger.info("User is navigated to subscription page");
			extent.extentLoggerPass("subscription page", "User is navigated to subscription page");
			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
			waitTime(4000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPlanInsideItemsBtn("Have a prepaid code ?"),
					"Have a prepaid code ? option in Plan section");
			waitTime(3000);
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription")) {
				logger.info("User is navigated to subscription page");
				extent.extentLoggerPass("subscription page", "User is navigated to subscription page");
				verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
//				if (checkElementDisplayed(PWAHomePage.objSubscripePopupHomePage, "Pop up")) {
//					logger.info("Subscribe popup in home page is dislayed");
//					extent.extentLogger("Popup", "Subscribe popup in home page is dislayed");
//					waitTime(3000);
//					click(PWAHomePage.objSubscripePopupCloseButtonHomePage, "Close button in popup");
//				}
			}
		}

	}

	// Before executing this method for subscribed/Non subscribed user parental
	// controls should be selected to no restrictions
	public void parentControlFunctionality(String UserType) throws Exception {
		extent.HeaderChildNode("Parent Control Functionality");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "ParentalControl");
		checkElementDisplayed(PWALoginPage.objPasswordField, "password field");
		String password = "";
		if (UserType.equals("Non-Subscribed")) {
			password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("NonsubscribedPassword");
		} else if (UserType.equals("Subscribed")) {
			password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("SubscribedPassword");
		}
		type(PWALoginPage.objPasswordField, password, "Password field");
		click(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
		waitTime(2000);
		checkElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page");
		checkElementDisplayed(PWAHamburgerMenuPage.objNoRestrictionSelected, "No restricted option selected");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objRestrictAll, "Restrict all option");
		waitTime(5500);
		click(PWAHamburgerMenuPage.objRentForINRbutton, "Set Lock Field");
		waitTime(3500);
		verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1, "Set Lock Field");
		type(PWAHamburgerMenuPage.objParentalLockPin1, "1", "ParentalLockPin");
		type(PWAHamburgerMenuPage.objParentalLockPin2, "2", "ParentalLockPin");
		type(PWAHamburgerMenuPage.objParentalLockPin3, "3", "ParentalLockPin");
		type(PWAHamburgerMenuPage.objParentalLockPin4, "4", "ParentalLockPin");
		waitTime(4000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Set Parental lock button");
		waitTime(2000);
		checkElementDisplayed(PWAHomePage.objZeeLogo, "zee logo");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		checkElementDisplayed(PWAHomePage.objSearchField, "Search field");
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie2");
		type(PWAHomePage.objSearchField, keyword, "Search");
		waitTime(15000);
		verifyElementPresent(PWASearchPage.objSearchedResult(keyword), "Search content");
		waitTime(4000);
		JSClick(PWASearchPage.objFirstSearch, "Search content");
		waitTime(4000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objParentalLockPopUpInPlayer, "Parent control Popup")) {
			type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
		}
		waitTime(5000);
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		if (checkElementDisplayed(PWAPlayerPage.playBtn, "Pause icon")) {
			logger.info("Playback is played after entering parental lock");
			extent.extentLogger("Playback", "Playback is played after entering parental lock");
		} else {
			logger.info("Playback is not started after entering parental lock");
			extent.extentLogger("Playback", "Playback is not started after entering parental lock");
		}
		click(PWAHomePage.objZeeLogo, "zee logo");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "ParentalControl");
		checkElementDisplayed(PWALoginPage.objPasswordField, "password field");
		type(PWALoginPage.objPasswordField, password, "Password field");
		waitTime(2000);
		click(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
		waitTime(2000);
		checkElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page");
		click(PWAHamburgerMenuPage.objParentalLockNoRestrictionOption, "No restriction option");
		checkElementDisplayed(PWAHamburgerMenuPage.objNoRestrictionSelected, "No restricted option selected");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Set Parental lock button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
	}

	public void activateFunctionality() throws Exception {
		extent.HeaderChildNode("Activate Functionality");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		// verifyElementPresentAndClick(PWAHamburgerMenuPage.objAuthenticationOption,
		// "Authentication option");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objActivatedevice, "Activate device");
		waitTime(3000);
		checkElementExist(PWAHamburgerMenuPage.objAuthenticationText, "Activation Page");
		if (getDriver().findElement(PWAHamburgerMenuPage.objAuthenticationButtonHighlighted).isEnabled() == false) {
			logger.info("Activate button is not highlighted by default");
			extent.extentLogger("Activate", "Activate button is not highlighted by default");
		}
		type(PWAHamburgerMenuPage.objAuthenticationField, "abcdef", "ActivateField");
		hideKeyboard();
		String AuthenticationField = getText(PWAHamburgerMenuPage.objAuthenticationField);
		if (AuthenticationField != null) {
			logger.info("User is able to enter the value in ActivateField");
			extent.extentLogger("ActivateField", "User is able to enter the value in ActivateField");
		}

		if (getDriver().findElement(PWAHamburgerMenuPage.objAuthenticationButtonHighlighted).isEnabled()) {
			logger.info("Activate button is highlighted after entering the input in ActivationField");
			extent.extentLogger("Activate",
					"Activate button is highlighted after entering the input in ActivationField");
		}

		click(PWAHamburgerMenuPage.objAuthenticationButtonHighlighted, "Activate button");
		try {
			Boolean ExpiredToastMessage = getDriver().findElement(By.xpath("//*[@class='toastMessage']")).isDisplayed();
			if (ExpiredToastMessage == true) {
				extent.extentLogger("Toast", "Expired Toast message displayed");
				logger.info("Expired Toast message displayed");
			} else {
				extent.extentLogger("Toast", "Expired Toast message not displayed");
				logger.info("Expired Toast message not displayed");
			}
			getDriver().findElement(PWAHamburgerMenuPage.objAuthenticationField).clear();
			Wait(3000);
			type(PWAHamburgerMenuPage.objAuthenticationField, "&!@#$%", "ActivateField");
			hideKeyboard();
			waitTime(2000);
			click(PWAHamburgerMenuPage.objAuthenticationButtonHighlighted, "Activate button");
			Boolean NotfounfToastMessage = getDriver().findElement(By.xpath("//*[@class='toastMessage']"))
					.isDisplayed();
			if (NotfounfToastMessage == true) {
				extent.extentLogger("Toast", "Not found Toast message displayed");
				logger.info("Not found Toast message displayed");
			} else {
				extent.extentLogger("Toast", "Not found Toast message not displayed");
				logger.info("Not found Toast message not displayed");
			}
		} catch (Exception e) {
			System.out.println("Toast message is not displayed");
		}
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");

		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
			extent.HeaderChildNode(
					"Verify UI/UX Should be displayed as per VD below: TV Logo \"Activate zee5 on your TV\" title ");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objActivatedevice, "Activate device");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objTvLogo, "TV Logo");
			verifyElementPresent(PWAHamburgerMenuPage.objPageHeader, "Page Header");
			String PageHeader = getText(PWAHamburgerMenuPage.objPageHeader);
			System.out.println(PageHeader);
			logger.info("The Page Header : " + PageHeader);

			if (PageHeader.equals("Activate ZEE5 on your TV")) {
				extent.extentLoggerPass("", "Activate ZEE5 on your TV is displayed");
				logger.info("Activate ZEE5 on your TV is displayed");
			} else {
				extent.extentLoggerFail("", "Activate ZEE5 on your TV is not displayed");
				logger.info("Activate ZEE5 on your TV is not displayed");
			}
			verifyElementPresent(PWAHamburgerMenuPage.objPagedesc, "Page Desc");
			verifyElementPresent(PWAHamburgerMenuPage.objOTPInActivedevice, "OTP");
			verifyElementPresent(PWAHamburgerMenuPage.objActiveButtonDevice, "Active ");

			extent.HeaderChildNode(
					"‘Activate' CTA should not be hide when user proceed with Invalid Device Aunthentication Code");
			type(PWASignupPage.objOTP1, "1", "OTP box1");
			type(PWASignupPage.objOTP2, "2", "OTP box2");
			type(PWASignupPage.objOTP3, "3", "OTP box3");
			type(PWASignupPage.objOTP4, "4", "OTP box4");
			type(PWASignupPage.objOTP3, "5", "OTP box3");
			type(PWASignupPage.objOTP4, "6", "OTP box4");

			click(PWAHamburgerMenuPage.objActiveButtonDevice, "Active ");
			if (getWebDriver().findElement(PWAHamburgerMenuPage.objActivatedevice).isEnabled() == false) {
				logger.info("Active button is disabled , expected behaviour.");
				extent.extentLoggerPass("", "Active button is disabled , expected behaviour.");
			} else {
				logger.info("Active button isEnabled");
				extent.extentLoggerFail(" ", "Active button isEnabled");

			}
			getWebDriver().navigate().refresh();

			extent.HeaderChildNode(
					"‘Activate’ CTA should not be hide when user proceed with expired Device Aunthentication Code");
			type(PWASignupPage.objOTP1, "1", "OTP box1");
			type(PWASignupPage.objOTP2, "2", "OTP box2");
			type(PWASignupPage.objOTP3, "3", "OTP box3");
			type(PWASignupPage.objOTP4, "4", "OTP box4");
			type(PWASignupPage.objOTP3, "5", "OTP box3");
			type(PWASignupPage.objOTP4, "6", "OTP box4");

			click(PWAHamburgerMenuPage.objActiveButtonDevice, "Active ");
			if (getWebDriver().findElement(PWAHamburgerMenuPage.objActivatedevice).isEnabled() == false) {
				logger.info("Active button is disabled , expected behaviour.");
				extent.extentLoggerPass("", "Active button is disabled , expected behaviour.");
			} else {
				logger.info("Active button isEnabled");
				extent.extentLoggerFail(" ", "Active button isEnabled");

			}
			getWebDriver().navigate().refresh();
		}
	}

	/**
	 * ================================SUSHMA
	 * Onboarding==================================
	 *
	 */

	public void phoneNumberRegistration() throws Exception {
		extent.HeaderChildNode(
				"verifing that user is able to enter Mobile number, Password, date of birth, gender in Registration page");
		verifyElementPresentAndClick(PWALoginPage.objLoginCTA, "Login CTA on Header");
		verifyElementPresent(PWALoginPage.objLoginPage, "Login to ZEE5 page");
//		click(PWALoginPage.objSignUpBtnWEB, "Sign up button");
		verifyElementPresentAndClick(PWALoginPage.objRegisterLink, "Register link");
		waitForElementDisplayed(PWALoginPage.objEmailField, 5);
		checkElementDisplayed(PWALoginPage.objEmailField, "PhoneNo Field");
		type(PWALoginPage.objEmailField, "7892215", "PhoneNumber Field");
		String PhoneNumberField = getText(PWALoginPage.objEmailField);
		if (PhoneNumberField != null) {
			logger.info("User is allowed to enter PhoneNumber");
			extentLogger("PhoneNumber", "User is allowed to enter PhoneNumber in PhoneNumber Field");
		}
		checkElementDisplayed(PWALoginPage.objIncorrectPhoneNumberMessage,
				"When User Enter Invalid PhoneNumber, Error Message");
		type(PWALoginPage.objEmailField, "214", "PhoneNumber Field");
		if (checkElementDisplayed(PWALoginPage.objIncorrectPhoneNumberMessage, "PhoneNumber Error Message") == false) {
			logger.info("User is allowed to enter valid PhoneNumber");
			extent.extentLogger("PhoneNumber", "User is allowed to enter valid PhoneNumber");
		}
//		checkElementDisplayed(PWALoginPage.objCountryCode, "Country code field");
//		click(PWALoginPage.objCountryCode, "Country code field");
//		checkElementDisplayed(PWALoginPage.objCountryCodeDropDown, "Drop down of country code");
//		click(PWALoginPage.objCountryCodeAlgeria, "Algeria country code");
//		click(PWALoginPage.objCountryCode, "Country code field");
//		click(PWALoginPage.objCountryCodeAndoora, "Andoora country code");
//		click(PWALoginPage.objCountryCode, "Country code field");
//		click(PWALoginPage.objCountryCodeIndia, "India country code");

		if (getWebDriver().findElement(PWASignupPage.objSignUpButtonHighlightedWeb).isEnabled()) {
			logger.info("Send OTP button is highlighted");
			extent.extentLogger("Send OTP button", "Send OTP button is highlighted");
		}
		click(PWASignupPage.objSignUpButtonHighlightedWeb, "Send OTP Button");
		extent.HeaderChildNode(
				"Verifing that user is allowed to update the mobile number, password, date of birth and gender post navigating back from change number button");
		waitTime(2000);
		click(PWASignupPage.objChangeNumberLink, "Change number link");
		waitTime(2000);
		type(PWALoginPage.objEmailField, "7892215214", "PhoneNumber Field");
		click(PWASignupPage.objSignUpButtonHighlightedWeb, "Send OTP Button");
		extent.HeaderChildNode("verifing OTP Screen");
		waitForElementDisplayed(PWASignupPage.objOTPTimer, 5);
		checkElementDisplayed(PWASignupPage.objOTPTimer, "OTP timer");
		String otpTimer1 = getText(PWASignupPage.objOTPTimer);
		String OtpTimer1 = otpTimer1.substring(3);
		int otp1 = Integer.parseInt(OtpTimer1);
		System.out.println(otp1);
		waitTime(3000);
		String otpTimer2 = getText(PWASignupPage.objOTPTimer);
		String OtpTimer2 = otpTimer2.substring(3);
		int otp2 = Integer.parseInt(OtpTimer2);
		System.out.println(otp2);
		if (!otpTimer1.equals(otpTimer2) && otp2<otp1) {
			logger.info("The Otp timer is in reverse order");
			extentLogger("OtpTimer", "The Otp timer is in reverse order");
		}
		waitTime(60000);
		if (verifyElementPresent(PWASignupPage.objResendOtpOption, "Resend button")) {
			logger.info("ResendOtp option is active after 60seconds");
			extent.extentLogger("ResendOtp", "ResendOtp option is active after 60seconds");
		}
		type(PWASignupPage.objOTP1, "a", "OTP box1");
		type(PWASignupPage.objOTP2, "b", "OTP box2");
		type(PWASignupPage.objOTP3, "c", "OTP box3");
		type(PWASignupPage.objOTP4, "d", "OTP box4");
		waitTime(2000);
		if (getWebDriver().findElement(PWASignupPage.objSignUpButtonHighlighted).isEnabled() == false) {
			logger.info("Verify Button is not highlighted when user enter non numeric value in otp section");
			extent.extentLoggerPass("Verify",
					"Verify Button is not highlighted when user enter non numeric value in otp section");
		}
		type(PWASignupPage.objOTP1, "1", "OTP box1");
		type(PWASignupPage.objOTP2, "2", "OTP box2");
		type(PWASignupPage.objOTP3, "3", "OTP box3");
		type(PWASignupPage.objOTP4, "4", "OTP box4");
//        waitTime(3000);
		if (getWebDriver().findElement(PWASignupPage.objVerifyBtnWeb).isEnabled() == true) {
			logger.info("Verify OTP Button is enabled for numeric value");
			extent.extentLoggerPass("Verify", "Verify OTP Button is enabled for numeric value");
			verifyElementPresentAndClick(PWASignupPage.objVerifyBtnWeb, "Verified Button");
			try {
				Boolean Message = getWebDriver().findElement(By.xpath("//*[@class='toastMessage']")).isDisplayed();
				if (Message == true) {
					extent.extentLogger("Toast", "Toast message displayed");
					logger.info("Toast message displayed");
				} else {
					System.out.println("Toast message is not displayed");
				}
			} catch (Exception e) {
				System.out.println("Toast message is not displayed");
			}
		}
		Back(1);
        waitTime(2000);
        Back(2);
    }

    public void MobileLogin() throws Exception {
        extent.HeaderChildNode("Mobile Registration/login");
        verifyElementPresent(PWALoginPage.objWebLoginBtn, "Login button");
        JSClick(PWALoginPage.objWebLoginBtn, "Login button");
        waitTime(1000);
        verifyElementPresent(PWALoginPage.objEmailField, "Email field");
        JSClick(PWALoginPage.objEmailField, "Email/Mobile field");
        type(PWALoginPage.objEmailField, "7892215214", "PhoneNumber Field");
        click(PWASignupPage.objSignUpButtonHighlightedWeb, "Send OTP Button");
        extent.HeaderChildNode("verifing OTP Screen");
        type(PWASignupPage.objOTP1, "1", "OTP box1");
        type(PWASignupPage.objOTP2, "2", "OTP box2");
        type(PWASignupPage.objOTP3, "3", "OTP box3");
        type(PWASignupPage.objOTP4, "4", "OTP box4");
        waitTime(3000);
        verifyElementPresentAndClick(PWASignupPage.objVerifyBtnWeb, "Verified Button");
        try {
            Boolean Message = getWebDriver().findElement(By.xpath("//*[@class='toastMessage']")).isDisplayed();
            if (Message == true) {
                extent.extentLogger("Toast", "Toast message displayed");
                logger.info("Toast message displayed");
            } else {
                System.out.println("Toast message is not displayed");
            }
        } catch (Exception e) {
            System.out.println("Toast message is not displayed");
        }
        Back(2);
    }

	public void emailRegistration() throws Exception {
		extent.HeaderChildNode(
				"verifing that user is able to enter Email-Id, Password, date of birth, gender in Registration page");
        if(!checkElementDisplayed(PWALoginPage.objWebLoginBtn,"Login Button"))
            logout();
        verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button in Home screen");
        waitTime(2000);
        verifyElementPresentAndClick(PWALoginPage.objRegisterLink, "Register link");
        waitTime(2000);
//		click(PWALoginPage.objSignUpBtnWEB, "Sign up button");
		waitForElementDisplayed(PWALoginPage.objSignUpHeaderInSignUpPageWeb, 10);
		checkElementDisplayed(PWALoginPage.objSignUpHeaderInSignUpPageWeb, "SignUp Page");
		checkElementDisplayed(PWALoginPage.objEmailField, "Email/PhoneNo Field");
		if (checkElementDisplayed(PWALoginPage.objPasswordField, "Password field") == false) {
			logger.info("Password field is not displayed when email field is empty");
			extent.extentLogger("Password Field", "Password field is not displayed when email field is empty");
		}
		type(PWALoginPage.objEmailField, "zee5latest@gmail.com", "Email field");

		if (checkElementDisplayed(PWALoginPage.objPasswordField, "Password field") == true) {
			logger.info("Password field is displayed when user enter email-id");
			extent.extentLogger("Password Field", "Password field is displayed when user enter email-id");
		}
		type(PWALoginPage.objPasswordField, "abc", "password field");
		click(PWASignupPage.objSignUpButtonNotHighlightedWeb, "SignUp Button");
		checkElementDisplayed(PWASignupPage.objPasswordErrorMessage, "Password error message");
		int lenText = findElement(PWALoginPage.objEmailField).getAttribute("value").length();
		for (int i = 0; i < lenText; i++) {
			getWebDriver().findElement(PWALoginPage.objPasswordField).sendKeys(Keys.BACK_SPACE);
		}
		waitTime(2000);
		type(PWALoginPage.objPasswordField, "user@123", "password field");
		if (checkElementDisplayed(PWASignupPage.objPasswordHiddenField, "password field")) {
			logger.info("Password field is hidden before tapping on password icon");
			extentLogger("Password", "Password field is hidden before tapping on password icon");
		}
		click(PWASignupPage.objPasswordIcon, "Password icon");
		if (checkElementDisplayed(PWASignupPage.objPasswordFieldShow, "Password")) {
			logger.info("Password field is shown when user taps on password icon");
			extent.extentLogger("Password", "Password field is shown when user taps on password icon");
		}
		click(PWASignupPage.objPasswordIcon, "Password icon");
		calenderFunctionality();
		String SelectedDate = getText(PWALoginPage.objDateOfBirthField);
		if (SelectedDate != null) {
			logger.info("Value in date of field is entered correctly");
			extent.extentLogger("DateOfField", "Value in date of field is entered correctly");
		}
		click(PWASignupPage.objGenderMaleBtn, "Gender Option");
		if (checkElementDisplayed(PWASignupPage.objSignUpButtonHighlightedWeb, "SignUp button")) {
			logger.info("SignUp button is highlighted");
			extent.extentLogger("Continue button", "SignUp button is highlighted");
		}
		click(PWASignupPage.objSignUpButtonHighlightedWeb, "SignUp button");
		try {
			Boolean Message = getWebDriver().findElement(By.xpath("//*[@class='toastMessage']")).isDisplayed();
			if (Message == true) {
				extent.extentLogger("Toast", "The user could not be found message displayed");
				logger.info("The user could not be found message displayed");
			} else {
				System.out.println("Toast message is not displayed");
			}
		} catch (Exception e) {
			System.out.println("Toast message is not displayed");
		}
		Back(1);
		waitTime(5000);
	}

	/**
	 * Method for facebook login
	 * @throws Exception
	 */
	public void facebookLogin() throws Exception {
		extent.HeaderChildNode("Login through Facebook");
		getWebDriver().get(URL);
		verifyElementPresentAndClick(PWALoginPage.objLoginBtnWEB, "Login button");

		waitForElementDisplayed(PWALoginPage.objFacebookIcon, 10);

		checkElementDisplayed(PWALoginPage.objGoogleIcon, "Google icon");
		waitTime(1000);
		checkElementDisplayed(PWALoginPage.objTwitterIcon, "Twitter icon");

		checkElementDisplayed(PWALoginPage.objFacebookIcon, "Facebook icon");

		waitTime(10000);
		click(PWALoginPage.objFacebookIcon, "Facebook Icon");
		switchToWindow(2);

		if (checkElementDisplayed(PWALandingPages.objWebProfileIcon, "Profile icon")) {
			logger.info("User Logged in Successfully");
			extent.extentLogger("Logged in", "User Logged in Successfully");

		}

		else {
			checkElementDisplayed(PWALoginPage.objFacebookPageVerificationWeb, "Facebook page");
			verifyElementPresent(PWALoginPage.objFacebookLoginEmailWeb, " Email Field");
			type(PWALoginPage.objFacebookLoginEmailWeb, "igstesttt@gmail.com", "Emial Field");
			verifyElementPresent(PWALoginPage.objFacebookLoginpasswordWeb, " Password Field");
			type(PWALoginPage.objFacebookLoginpasswordWeb, "Igs123!@#", "Password Field");
			verifyElementPresentAndClick(PWALoginPage.objFacebookLoginButtonInFbPageWeb, "Login Button");
			switchToWindow(1);
			waitForElementDisplayed(PWALandingPages.objWebProfileIcon, 20);
			if (verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile icon")) {
				logger.info("User Logged in Successfully");
				extent.extentLogger("Logged in", "User Logged in Successfully");
			}
		}
		logout();
	}

	public void forgotPasswordEmail() throws Exception {
		extent.HeaderChildNode("Verifications in Forgot Password page for Email Id");

		verifyElementPresentAndClick(PWALoginPage.objLoginBtnWEB, "Login button");
		waitTime(5000);
		verifyElementPresentAndClick(PWALoginPage.objForgotPasswordTxt, "Forgot password");

		type(PWALoginPage.objEmailField, "igsss12345igs@gmail.com", "Email field");
		click(PWALoginPage.objForgotPasswordLinkButtonWEB, "Reset password button");
		try {
			Boolean Message = getWebDriver().findElement(By.xpath("//*[@class='toastMessage']")).isDisplayed();
			if (Message == true) {
				extent.extentLogger("Toast", "The user could not be found message displayed");
				logger.info("The user could not be found message displayed");
			} else {
				System.out.println("Toast message is not displayed");
			}
		} catch (Exception e) {
			System.out.println("Toast message is not displayed");
		}
		waitTime(3000);

		int lenText = findElement(PWALoginPage.objEmailField).getAttribute("value").length();
		for (int i = 0; i < lenText; i++) {
                getWebDriver().findElement(PWALoginPage.objEmailField).sendKeys(Keys.BACK_SPACE);
		}

		waitTime(3000);
		type(PWALoginPage.objEmailField, "Zee5latest@gmail", "Email field");

		if (getWebDriver().findElement(PWALoginPage.objForgotPasswordLinkButtonWEB).isEnabled() == false) {
			logger.info("'Send Password reset link' button is not highlighted when user enters a invalid email id.");
			extent.extentLogger("Invalid Email",
					"'Send Password reset link' button is not highlighted when user enters a invalid email id.");
		}

		type(PWALoginPage.objEmailField, ".com", "Email field");

		if (checkElementDisplayed(PWALoginPage.objForgotPasswordMessage, "Message")) {
			logger.info("Supporting description is displayed");
			extent.extentLogger("Forgot password", "Supporting description is displayed");
		}

		if (getWebDriver().findElement(PWALoginPage.objForgotPasswordLinkButtonWEB).isEnabled() == true) {
			logger.info("'Send Password reset link' button is highlighted when user enters a valid email id.");
			extent.extentLogger("Valid Email",
					"'Send Password reset link' button is highlighted when user enters a valid email id.");
		}
		click(PWALoginPage.objForgotPasswordLinkButtonWEB, "Reset password button");

		try {
			Boolean Message = getWebDriver().findElement(By.xpath("//*[@class='toastMessage']")).isDisplayed();
			if (Message == true) {
				extent.extentLogger("Toast",
						"'Password reset link has been sent to your registered Email ID' message displayed");
				logger.info(" 'Password reset link has been sent to your registered Email ID' message displayed");
			} else {
				System.out.println("Toast message is not displayed");
			}
		} catch (Exception e) {
			System.out.println("Toast message is not displayed");
		}

	}

	public void forgotPasswordMobileNumber() throws Exception {
		extent.HeaderChildNode("Verifications in Forgot Password page for Mobile Number");

		JSClick(PWALoginPage.objLoginBtnWEB, "Login button");

		verifyElementPresentAndClick(PWALoginPage.objForgotPasswordTxt, "Forgot password");
		waitTime(2000);
		type(PWALoginPage.objEmailField, "789221", "Email field");
		if (getWebDriver().findElement(PWALoginPage.objForgotPasswordLinkButtonWEB).isEnabled() == false) {
			logger.info("Continue button is not highlighted when user enter invalid mobile number");
			extent.extentLogger("Continue", "Continue button is not highlighted when user enter invalid mobile number");
		}

		type(PWALoginPage.objEmailField, "5214", "Email field");
		if (checkElementDisplayed(PWALoginPage.objForgotPasswordMessage, "Message")) {
			logger.info("Supporting description is displayed");
			extent.extentLogger("Forgot password", "Supporting description is displayed");
		}
		if (getWebDriver().findElement(PWALoginPage.objForgotPasswordLinkButtonWEB).isEnabled() == true) {
			logger.info("Continue button is not highlighted when user enter invalid mobile number");
			extent.extentLogger("Continue", "Continue button is not highlighted when user enter invalid mobile number");
		}
		click(PWALoginPage.objForgotPasswordLinkButtonWEB, "Continue button");
		waitTime(3000);
		checkElementDisplayed(PWALoginPage.objNewPasswordField, "New password page");
		type(PWALoginPage.objNewPasswordField, "User@123", "Password field");
		type(PWALoginPage.objConfirmNewPasswordField, "User@123", "Confirm Password field");
		click(PWALoginPage.objSetNewPasswordButton, "Continue button");
		if (checkElementDisplayed(PWALoginPage.objOTPVerifyPage, "OTP verification page")) {
			logger.info("User is redirected to verify otp page");
			extent.extentLogger("OTP", "User is redirected to verify otp page");
		}
		Back(4);
	}

	public void calenderFunctionality() throws Exception {
		if (checkElementDisplayed(PWASignupPage.objYearPickerTab, "Year")) {
			click(PWASignupPage.objDayPickerTab, "Day picker");
			click(PWASignupPage.objDayPickerTabValue, "Day picker value");
			click(PWASignupPage.objMonthPickerTab, "Month Picker");
			click(PWASignupPage.objMonthPickerTabValue, "Month Picker value");
			click(PWASignupPage.objYearPickerTab, "Year Picker");
			if (checkElementDisplayed(PWASignupPage.objYearPickerTabValueNotActive, "Further year") == false) {
				logger.info("User is not allowed to select future date/year in calender tab");
				extent.extentLogger("Calender", "User is not allowed to select future date/year in calender tab");
			}
			click(PWASignupPage.objYearPickerTabValue, "Year Picker value");
		} else {
			click(PWALoginPage.objDateOfBirthField, "Date Of Birth Field");
			checkElementDisplayed(PWALoginPage.objCalenderPopUp, "Calender PopUp");
			click(PWALoginPage.objSelectDateInCalender, "Date in Calender");
		}
	}

	/**
	 * Method for twitter login
	 * @throws Exception
	 */
	public void twitterLogin() throws Exception {
		extent.HeaderChildNode("Login through Twitter");
		verifyElementPresentAndClick(PWALoginPage.objLoginBtnWEB, "Login button");
		waitForElementDisplayed(PWALoginPage.objLoginPageheader, 10);
		waitForElementDisplayed(PWALoginPage.objTwitterIcon, 10);
		checkElementDisplayed(PWALoginPage.objTwitterIcon, "Twitter icon");
		waitTime(1000);
		JSClick(PWALoginPage.objTwitterIcon, "twitter Icon");
		switchToWindow(2);
		if (checkElementDisplayed(PWALandingPages.objWebProfileIcon, "Profile icon")) {
			logger.info("User Logged in Successfully");
			extent.extentLogger("Logged in", "User Logged in Successfully");
			logout();
		} else {
			verifyElementPresent(PWALoginPage.objTwitterEmaildField, " Email Field");
			type(PWALoginPage.objTwitterEmaildField, "zee5latest@gmail.com", "Emial Field");
			verifyElementPresent(PWALoginPage.objTwitterPasswordField, " Password Field");
			type(PWALoginPage.objTwitterPasswordField, "User@123", "Password Field");
			verifyElementPresentAndClick(PWALoginPage.objTwitterSignInButton, "Login Button");
			getWebDriver().close();
			switchToParentWindow();
			waitForElementDisplayed(PWALandingPages.objWebProfileIcon, 20);
			if (checkElementDisplayed(PWALandingPages.objWebProfileIcon, "Profile icon")) {
				logger.info("User Logged in Successfully");
				extent.extentLogger("Logged in", "User Logged in Successfully");
				logout();
			} else {
				logger.info("User is not logged in Successfully");
				extent.extentLoggerFail("Logged in", "User is not logged in Successfully");
				Back(1);
			}
		}
	}

	public void premiumPopUp() throws Exception {
		extent.HeaderChildNode(
				"Verifing that Subscribe now or Login pop is displayed when user click on premium content");
//		while (!(checkElementDisplayed(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content"))) {
//			scrollDownWEB();
//		}

		for (int scroll = 0; scroll <= 4; scroll++) {
			if (checkElementDisplayed(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content")) {
				break;
			} else
				scrollByWEB();
		}

		click(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content");
		waitForElementDisplayed(PWAPremiumPage.objPremiumPopUp, 15);
		if (checkElementDisplayed(PWAPremiumPage.objPremiumPopUp, "Premium PopUp")) {
			verifyElementPresentAndClick(PWAPremiumPage.objClosePremiumPopup, "Premium PopUp Close icon");
			extent.HeaderChildNode("Verifing that premium content videos in landscape mode");
			if (checkElementDisplayed(PWALiveTVPage.objPlayerInlineSubscriptionLink,
					"Player inline Subscribtion link")) {
				logger.info(
						"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
				extent.extentLogger("Maximize icon",
						"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
			}
		} else {
			extent.HeaderChildNode("Verifing that premium content videos in landscape mode");
			waitForPlayerAdToComplete2("Video Player");
			waitForElementDisplayed(PWAPlayerPage.objPlayerscreen, 120);
			pause();
			// click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
//				if(checkElementDisplayed(PWAPlayerPage.objPlayerPause, "Pause icon"))
//				{
//					click(PWAPlayerPage.objPlayerPause, "Pause icon");
//				}
			verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize icon");
			click(PWAPlayerPage.maximizeBtn, "Maximize icon");
			for (int i = 0; i < 5; i++) {
				if (checkElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize icon")) {
					logger.info("User is able to watch Premium content in landscape mode");
					extent.extentLogger("Landscape mode", "User is able to watch Premium content in landscape mode");
					break;
				} else {
					click(PWAPlayerPage.objPlayer, "player screen");
				}
			}
		}
		Back(1);
		extent.HeaderChildNode("Verifing that user is able to watch the free Content");
		verifyElementPresentAndClick(PWALiveTVPage.objFilterOption("FREE Channels"), "Free Channels filter");
		waitForElementDisplayed(PWALiveTVPage.objFirstfreeContentCard, 5);
		verifyElementPresentAndClick(PWALiveTVPage.objFirstfreeContentCard, "Free Content card");
		// waitForElementDisplayed(PWAPremiumPage.objPremiumPopUp, 5);
		if (!(checkElementDisplayed(PWAPremiumPage.objPremiumPopUp, "Premium PopUp"))) {
			logger.info("user is able to watch the free Content");
			extent.extentLogger("Free content", "user is able to watch the free Content");
		}
		extent.HeaderChildNode("Verifing that free content videos in landscape mode");
		waitForPlayerAdToComplete2("Video Player");
//			JSClick(PWAPlayerPage.objPlayer, "player screen");
//			if(checkElementDisplayed(PWAPlayerPage.objPlayerPause, "Pause icon"))
//			{
//				JSClick(PWAPlayerPage.objPlayerPause, "Pause icon");
//			}
		waitForElementDisplayed(PWAPlayerPage.objPlayerscreen, 120);
		pause();
		verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize icon");
		JSClick(PWAPlayerPage.maximizeBtn, "Maximize icon");
		for (int i = 0; i < 5; i++) {
			if (checkElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize icon")) {
				logger.info("User is able to watch free content in landscape mode");
				extent.extentLogger("Landscape mode", "User is able to watch free content in landscape mode");
				break;
			} else {
				JSClick(PWAPlayerPage.objPlayer, "player screen");
			}
		}
		Back(1);
	}

	public void pause() {
		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(By.xpath("//*[@class='kaltura-player-container']"));
		actions.moveToElement(menuOption).perform();
		getWebDriver().findElement(By.xpath("//i[@class='playkit-icon playkit-icon-pause']")).click();
	}

	public void Back_TO_TopArrow_Web(String usertype) throws Exception {

		scrollToBottomOfPageWEB();
		if (usertype.equalsIgnoreCase("Guest")) {
			if (checkElementDisplayed(PWAHomePage.objWhatWonderingPopUp, "Wondering popUp")) {
				waitTime(3000);
				click(PWAHomePage.objWhatWonderingPopUpCloseIcon, "Close icon");
			}
		}
		// waitForElementDisplayed(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, 20);
		if (checkElementDisplayed(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top")) {
			click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");
			System.out.println("Scrolled back to top using Back to top button");
		}

	}

	/*
	 * public void remainderOptionOnUpcomingShow() throws Exception { // Click on
	 * date waitForElement(PWALiveTVPage.objActiveEPGContent, 20,
	 * "Active EPG Content"); waitTime(10000);
	 * waitForElement(PWALiveTVPage.objTomorrowDate, 60, "Tomorrow date");
	 * waitForElementAndClick(PWALiveTVPage.objTomorrowDate, 60, "Tomorrow date");
	 * FilterLanguage(); while
	 * (!(checkElementDisplayed(PWALiveTVPage.objparticularShowTime,
	 * "choosed time"))) { waitTime(3000); getWebDriver().findElement(By.
	 * xpath("//div[@class='outerTimeContainer']/child::div[contains(@class, 'ic_back rightArrow')]"
	 * )).click(); } waitTime(6000); // Verify Share and Remainder option is
	 * available waitForElement(PWALiveTVPage.objShowNamewebChannelGuide,10,
	 * "Show"); verifyElementPresent(PWALiveTVPage.objShowNamewebChannelGuide,
	 * "Show"); JSClick(PWALiveTVPage.objShowNamewebChannelGuide, "Show");
	 * verifyElementPresent(PWALiveTVPage.objShareOption, "Share option"); if
	 * (checkElementDisplayed(PWALiveTVPage.objRemainderButton,
	 * "Reminder option for upcoming show ")) {
	 * verifyElementPresentAndClick(PWALiveTVPage.objRemainderButton,
	 * "Reminder option");
	 *
	 * extent.extentLogger("Reminder option", "User can click on Reminder option");
	 * logger.info("User can click on Reminder option"); } else {
	 * extent.extentLoggerFail("Remainder option",
	 * "User can not click on Reminder option");
	 * logger.info("User can not click on Reminder option"); } // Click on close
	 * button verifyElementPresentAndClick(PWALiveTVPage.objPopupCloseButton,
	 * "Close button"); }
	 */

	public void FilterLanguage() throws Exception {
		click(PWALiveTVPage.objFilterLanguageChannelGuide, "Filter language");
		int size = findElements(PWALiveTVPage.objSelectedlang).size();
		for (int i = 1; i <= size; i++) {
			getWebDriver().findElement(By.xpath("//div[contains(@class,'selectedLanguage language noSelect')]"))
					.click();

		}
		click(PWALiveTVPage.objKannadaLang, "Kannada language");
		click(PWALiveTVPage.objApplyBtn, "Apply button");

	}

	/**
	 * ================================MANASA
	 * SUBSCRIPTION==================================
	 *
	 */

	/*
	 * Validating if selected Content language is displayed in the Regional Pack
	 */
	public void contentLanguageVerify(String userType) throws Exception {
		if (userType.contains("Guest") || userType.contains("NonSubscribedUser")) {
			extent.HeaderChildNode("Validating if selected Content language is displayed in the Regional Pack");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtnWEB, "Language Button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, "Content Language");
			List<WebElement> selectedLanguages = getWebDriver().findElements(PWAHamburgerMenuPage.objSelectedLanguages);
			System.out.println(selectedLanguages.size());
			ArrayList<String> contentLanguages = new ArrayList<String>();
			for (int i = 1; i <= selectedLanguages.size(); i++) {
				System.out.println("Selected Content Language : " + getWebDriver().findElement(By.xpath(
						"((//div[@class='checkboxWrap checkedHighlight'])//child::*[@class='commonName'])[" + i + "]"))
						.getText());
				contentLanguages.add(getWebDriver().findElement(By.xpath(
						"((//div[@class='checkboxWrap checkedHighlight'])//child::*[@class='commonName'])[" + i + "]"))
						.getText());
			}
			System.out.println(contentLanguages);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplyBtn, "Apply Button");
			waitTime(2000);
			verifyElementPresentAndClick(PWAHomePage.objWEBSubscribeBtn, "Buy Plan CTA");
			waitTime(5000);
			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "Have a Code");
//			List<WebElement> selectedRegionalLanguages = getWebDriver().findElements(PWASubscriptionPages.objPackTypes);
//			System.out.println("selectedRegionalLanguages size : " + selectedRegionalLanguages.size());
//			for (int i = 2; i <= selectedRegionalLanguages.size(); i++) {
//				System.out.println(getText(PWASubscriptionPages.objPackType(i)));
//				if (contentLanguages.contains(getText(PWASubscriptionPages.objPackType(i)))) {
//					System.out.println("Regional pack is displayed as per the selected content language");
//					getWebDriver().findElement(By.xpath(
//							"(//span[@class='noSelect'][.='" + getText(PWASubscriptionPages.objPackType(i)) + "'])"))
//							.click();
//					List<WebElement> packs = getWebDriver().findElements(PWASubscriptionPages.objPackTitle);
//					System.out.println("Number of packs available " + packs.size());
//					for (int k = 1; k <= packs.size(); k++) {
//						logger.info("Pack Type : " + getWebDriver()
//								.findElement(By.xpath("((//div[@class='planDescription']))[" + k + "]")).getText());
//						extent.extentLogger("Pack Type", "Pack Type : " + getWebDriver()
//								.findElement(By.xpath("((//div[@class='planDescription']))[" + k + "]")).getText());
//						logger.info("Pack Amount : " + getWebDriver()
//								.findElement(By.xpath("(//p[@class='currency'])[" + k + "]")).getText());
//						extent.extentLogger("Pack Amount", "Pack Amount : " + getWebDriver()
//								.findElement(By.xpath("(//p[@class='currency'])[" + k + "]")).getText());
//						logger.info("Pack Duration : " + getWebDriver()
//								.findElement(By.xpath("(//p[@class='duration'])[" + k + "]")).getText());
//						extent.extentLogger("Pack Duration", "Pack Duration : " + getWebDriver()
//								.findElement(By.xpath("(//p[@class='duration'])[" + k + "]")).getText());
//					}
//				}
//			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	/*
	 * Zee Subscription Page Validation
	 */
	public void verifyUIofZEESubscriptionPage(String userType) throws Exception {
		if (userType.contains("Guest") || userType.contains("NonSubscribedUser")) {
			extent.HeaderChildNode("Subscription Page Validation");
			verifyElementPresentAndClick(PWAHomePage.objWEBSubscribeBtn, "Buy Plan CTA");
			extent.HeaderChildNode("Validating if Have a code section is displayed on Zee subscription screen.");
			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "Have a Code section");
//			String packTitle = getText(PWASubscriptionPages.objPackCategoryTabSelected);
//			logger.info(packTitle);
//			extent.extentLogger("Pack Title", packTitle + " is displayed");
			String packDescription = getText(PWASubscriptionPages.objPackDescription);
			logger.info(packDescription);
			extent.extentLogger("Pack Description", packDescription + " is displayed");
//			extent.HeaderChildNode("Verifying the Default selected Pack ");
//			String defaultSelectedPackTitle = getText(PWASubscriptionPages.objSelectedSubscriptionPlanType);
//			logger.info("Default Selected Pack Type " + defaultSelectedPackTitle);
//			extent.extentLogger("Default Selected Pack Type", "Default Selected Pack Type " + defaultSelectedPackTitle);
			String defaultSelectedPackAmount = getText(PWASubscriptionPages.objSelectedSubscriptionPlanAmount);
			logger.info("Default Selected Pack Amount " + defaultSelectedPackAmount);
			extent.extentLogger("Default Selected Pack Amount",
					"Default Selected Pack Type " + defaultSelectedPackAmount);
			String defaultSelectedPackDuration = getText(PWASubscriptionPages.objSelectedSubscriptionPlanDuration);
			logger.info("Default Selected Pack Duration " + defaultSelectedPackDuration);
			extent.extentLogger("Default Selected Pack Duration",
					"Default Selected Pack Duration " + defaultSelectedPackDuration);
			extent.HeaderChildNode("Verifying the URL of the page");
			String url = getWebDriver().getCurrentUrl();
			logger.info("URL of the page : " + url);
			extent.extentLogger("URL", "URL of the page : " + url);
			extent.HeaderChildNode("Validating if the Coupon code accepts special characters");
			String code = "zee5pt20@&*";
			// verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "'Have A
			// Code?' field");

			type(PWASubscriptionPages.objHaveACodetoenter, code, "Prepaid Code");
			String codeVerify = findElement(PWASubscriptionPages.objHaveACodetoenter).getAttribute("value");

			System.out.println(codeVerify);
			if (code.equals(codeVerify)) {
				logger.info("Coupon code accepts special characters");
				extent.extentLogger("Coupon code", "Coupon code accepts special characters");
			} else {
				logger.info("Coupon code does not accept special characters");
				extent.extentLogger("Coupon code", "Coupon code does not accept special characters");
			}
			verifyElementPresentAndClick(PWASubscriptionPages.objApplyBtn, "Apply Button");
			waitTime(2000);
			verifyElementPresent(PWASubscriptionPages.objAppliedCodeFailureMessage, "Failure message");
			String failureMsg = getText(PWASubscriptionPages.objAppliedCodeFailureMessage);
			logger.info(failureMsg);
			extent.extentLogger("Failure Message", failureMsg + " is displayed");
			waitTime(2000);
			verifyElementPresentAndClick(PWASubscriptionPages.objremovebtn, "remove Button");
			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "Have A Code section");
			type(PWASubscriptionPages.objHaveACodetoenter, "ZEE5CITI", "Prepaid Code");
			verifyElementPresentAndClick(PWASubscriptionPages.objApplyBtn, "Apply Button");
			waitTime(2000);
			boolean ele1 = verifyElementPresent(PWASubscriptionPages.objAppliedSuccessfullyMessage,
					"Applied Successfully message");
			String successMessage = getText(PWASubscriptionPages.objAppliedSuccessfullyMessage);
			logger.info(successMessage);
			extent.extentLogger("Success Message", successMessage + " is displayed");
			waitTime(2000);
			verifyElementPresentAndClick(PWASubscriptionPages.objCancelBtn, "Change Button");
			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "Have A Code section");
			type(PWASubscriptionPages.objHaveACodetoenter, "zee5citi", "Prepaid Code");
			verifyElementPresentAndClick(PWASubscriptionPages.objApplyBtn, "Apply Button");
			waitTime(2000);
			boolean ele2 = verifyElementPresent(PWASubscriptionPages.objAppliedSuccessfullyMessage,
					"Applied Successfully message");
			String successMsg = getText(PWASubscriptionPages.objAppliedSuccessfullyMessage);
			logger.info(successMsg);
			extent.extentLogger("Success Message", successMsg + " is displayed");
			waitTime(2000);
			extent.HeaderChildNode("Validating if the Coupon code is case insensitive");
			if (ele1 && ele2 == true) {
				logger.info("Coupon code is case insensitive");
				extent.extentLogger("Coupon code", "Coupon code is case insensitive");
			} else {
				logger.info("Coupon code is case sensitive");
				extent.extentLogger("Coupon code", "Coupon code is case sensitive");
			}
			extent.HeaderChildNode(
					"Validating the plans with discounted amount is displayed if applied code is successful.");
			List<WebElement> discountedPackAmount = getWebDriver().findElements(PWASubscriptionPages.objPackAmount);
			System.out.println(discountedPackAmount.size());
			for (int i = 1; i <= discountedPackAmount.size(); i++) {
				logger.info("Discounted Pack Amount : "
						+ getWebDriver().findElement(By.xpath("(//span[@class='price'])[" + i + "]")).getText());
				extent.extentLogger("Discounted Pack Amount", "Discounted Pack Amount : "
						+ getWebDriver().findElement(By.xpath("(//span[@class='price'])[" + i + "]")).getText());
			}
			waitTime(2000);
			verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount1, "Discounted pack");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			waitTime(5000);
			paymentPageValidation(userType);
		}
	}

	/*
	 * Validating the UI of My Subscription Page
	 */
	public void verifyUIofMySubscriptionPage(String userType) throws Exception {
		waitTime(10000);
		if (userType.contains("NonSubscribedUser") || (userType.contains("SubscribedUser"))) {
			extent.HeaderChildNode("Validating the UI of My Subscription Page");
			verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			JSClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				checkElementDisplayed(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
				logger.info("Browse All Packs is not displayed as expected for NonSubscribed User");
				extent.extentLogger("", "Browse All Packs is not displayed as expected for NonSubscribed User");
			} else {
				verifyElementPresent(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			}
		}
		if (userType.contains("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"Validating if Empty state screen is displayed when user has No Active Subscriptions");
			checkElementDisplayed(PWAHamburgerMenuPage.objEmptyStateScreen, "Empty State Screen");
			scrollDownWEB();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objSubscriptionTeaserBanner,
					"Subscription Teaser Banner");
			waitTime(10000);
			if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription Page")) {
				logger.info("Navigated to Subscription Page");
				extent.extentLogger("Subscription Page", "Navigated to Subscription Page");
			} else {
				logger.error("Not navigated to Subscription Page");
				extent.extentLoggerFail("Subscription Page", "Not navigated to Subscription Page");
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/*
	 * Validating the UI of My Transactions Page and Active/Expired Cards
	 */
	public void validatingActiveAndExpiredCardsinMyTransactionPage(String userType) throws Exception {
		if (userType.contains("NonSubscribedUser") || userType.contains("SubscribedUser")) {
			extent.HeaderChildNode("Validating the UI of My Transactions Page");
			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
			JSClick(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
			Thread.sleep(3000);
			extent.HeaderChildNode(
					"Validating if Empty state screen is displayed when user doesn't have any purchase history");
			checkElementDisplayed(PWAHamburgerMenuPage.objEmptyStateScreen, "Empty State Screen");
			boolean NoTransactionPresent = checkElementDisplayed(PWAHamburgerMenuPage.objNoTransaction,
					"No Transactions");
			if (NoTransactionPresent == false) {
				extent.HeaderChildNode("Validating the UI of Active/Expired Cards");
				List<WebElement> packs = getWebDriver().findElements(By.xpath("//p[@class='packTitle']"));
				System.out.println("No of Packs : " + packs.size());
				if (packs.size() > 1) {
					String status = getText(PWAHamburgerMenuPage.objMyTransactionPackStatus);
					logger.info("Pack Status :" + status);
					extent.extentLogger("Pack Status :", "Pack Status :" + status);
					if (status.equalsIgnoreCase("Active")) {
						String title = getText(PWAHamburgerMenuPage.objPackTitle);
						logger.info("Pack Title :" + title);
						extent.extentLogger("Pack Title :", "Pack Title :" + title);
						String price = getText(PWAHamburgerMenuPage.objPackPrice);
						logger.info("Pack Price :" + price);
						extent.extentLogger("Pack Price :", "Pack Price :" + price);
						String duration = getText(PWAHamburgerMenuPage.objPackDuration);
						logger.info("Pack Duration :" + duration);
						extent.extentLogger("Pack Duration :", "Pack Duration :" + duration);
						String renewalStatus = getText(PWAHamburgerMenuPage.objMyTransactionAutoRenewalStatus);
						logger.info("Pack Renewal Status :" + renewalStatus);
						extent.extentLogger("Pack Renewal Status :", "Pack Renewal Status :" + renewalStatus);
					}
					String status1 = getText(PWAHamburgerMenuPage.objMyTransactionPackStatus1);
					logger.info("Pack Status :" + status1);
					extent.extentLogger("Pack Status :", "Pack Status :" + status1);
					if (status1.equalsIgnoreCase("EXPIRED")) {
						String title1 = getText(PWAHamburgerMenuPage.objPackTitle1);
						logger.info("Pack Title :" + title1);
						extent.extentLogger("Pack Title :", "Pack Title :" + title1);
						if (checkElementDisplayed(PWAHamburgerMenuPage.objPackPrice1, "Pack Price")) {
							String price1 = getText(PWAHamburgerMenuPage.objPackPrice1);
							logger.info("Pack Price :" + price1);
							extent.extentLogger("Pack Price :", "Pack Price :" + price1);
						}
						String duration1 = getText(PWAHamburgerMenuPage.objPackDuration1);
						logger.info("Pack Duration :" + duration1);
						extent.extentLogger("Pack Duration :", "Pack Duration :" + duration1);
						String renewalStatus1 = getText(PWAHamburgerMenuPage.objMyTransactionAutoRenewalStatus1);
						logger.info("Pack Renewal Status :" + renewalStatus1);
						extent.extentLogger("Pack Renewal Status :", "Pack Renewal Status :" + renewalStatus1);
					}
				} else {
					String status = getText(PWAHamburgerMenuPage.objMyTransactionPackStatus);
					logger.info("Pack Status :" + status);
					extent.extentLogger("Pack Status :", "Pack Status :" + status);
					String title = getText(PWAHamburgerMenuPage.objPackTitle);
					logger.info("Pack Title :" + title);
					extent.extentLogger("Pack Title :", "Pack Title :" + title);
					if (checkElementDisplayed(PWAHamburgerMenuPage.objPackPrice1, "Pack Price")) {
						String price = getText(PWAHamburgerMenuPage.objPackPrice);
						logger.info("Pack Price :" + price);
						extent.extentLogger("Pack Price :", "Pack Price :" + price);
					}
					String duration = getText(PWAHamburgerMenuPage.objPackDuration);
					logger.info("Pack Duration :" + duration);
					extent.extentLogger("Pack Duration :", "Pack Duration :" + duration);
					String renewalStatus = getText(PWAHamburgerMenuPage.objMyTransactionAutoRenewalStatus);
					logger.info("Pack Renewal Status :" + renewalStatus);
					extent.extentLogger("Pack Renewal Status :", "Pack Renewal Status :" + renewalStatus);
				}
			}
			extent.HeaderChildNode(
					"Validating if user is navigated to Subscription screen post tapping on subscription teaser banner");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objSubscriptionTeaserBanner,
					"Subscription Teaser Banner") == true) {
				click(PWAHamburgerMenuPage.objSubscriptionTeaserBanner, "Subscription Teaser Banner");
				waitTime(5000);
				if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription Page") == true) {
					logger.info("Navigated to Subscription Page");
					extent.extentLogger("Subscription Page", "Navigated to Subscription Page");
				} else {
					logger.info("Not navigated to Subscription Page");
					extent.extentLogger("Subscription Page", "Not navigated to Subscription Page");
				}
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	/**
	 * Payment Page Validation
	 */
	public void paymentPageValidation(String userType) throws Exception {
		extent.HeaderChildNode("Payment Page Validation");
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWASubscriptionPages.objEmailIDTextField, "Email ID field")) {
				click(PWASubscriptionPages.objEmailIDTextField, "Email ID field");
				type(PWASubscriptionPages.objEmailIDTextField, "igszee5test123g@gmail.com", "Email Id");
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "Continue Button");
				// Password Popup
//				verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
				verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
				type(PWASubscriptionPages.objPasswordFieldHidden, "igs@12345", "Password Field");
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "Continue Button");
			}
		}

		extent.HeaderChildNode("Validating the payment gateway using Credit/Debit Card");
		waitTime(10000);
		WebElement iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
		Thread.sleep(5000);

		Thread.sleep(5000);

		Thread.sleep(5000);
		scrollUp();

		Thread.sleep(5000);
		getWebDriver().switchTo().frame(iframeElement);
//		checkElementDisplayed(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
		verifyElementPresent(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
//		verifyElementPresentAndClick(PWASubscriptionPages.objarrowbtn, "arrow button");
		verifyElementPresent(PWASubscriptionPages.objEnterCreditAndDebitCardDetails, "Enter Credit/Debit Card Details");
		verifyElementPresent(PWASubscriptionPages.objCardNumber, "Enter Card Number Field");
		verifyElementPresent(PWASubscriptionPages.objExpiry, "Expiry Field");
		verifyElementPresent(PWASubscriptionPages.objCVV, "CVV Field");
		verifyElementPresent(PWASubscriptionPages.objCreditDebitProceedToPay, "Proceed To Pay Button");
		verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
		extent.HeaderChildNode("Validating the payment gateway using Paytm");
		verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
		verifyElementPresent(PWASubscriptionPages.objPaytmProceedToPay, "Send OTP Button");
		getWebDriver().switchTo().defaultContent();
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		if (userType.equals("Guest")) {
			logout();
		}
	}

	/**
	 * ================================MANASA
	 * PremiumPage==================================
	 *
	 */

	public void landingPagesValidation(String tabName) throws Exception {
		String TCID = null;
		if(tabName.equalsIgnoreCase("Premium"))	{
			if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0045 , TC_PWA_GST_0046 , TC_PWA_GST_0047 , TC_PWA_GST_0048 , TC_PWA_GST_0049 , TC_PWA_GST_0050 , TC_PWA_GST_0054";
			if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0046 , TC_PWA_NS_0047 ,TC_PWA_NS_0048 , TC_PWA_NS_0049 , TC_PWA_NS_0050, TC_PWA_NS_0051, TC_PWA_NS_0052 , TC_PWA_NS_0056";
			if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0043 , TC_PWA_SUB_0044 , TC_PWA_SUB_0045 , TC_PWA_SUB_0046 , TC_PWA_SUB_0047, TC_PWA_SUB_0048 , TC_PWA_SUB_0049 , TC_PWA_SUB_0054";
			extent.HeaderChildNode(TCID +" Premium Page validation");
		}

		if(tabName.equalsIgnoreCase("Music")) {
			if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0150, TC_PWA_GST_0151, TC_PWA_GST_0152, TC_PWA_GST_0153 , TC_PWA_GST_0154 , TC_PWA_GST_0155 , TC_PWA_GST_0156 , TC_PWA_GST_0160";
			if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0212 ,TC_PWA_NS_0213 ,TC_PWA_NS_0214, TC_PWA_NS_0215, TC_PWA_NS_0216, TC_PWA_NS_0217, TC_PWA_NS_0218, TC_PWA_NS_0222";
			if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0179 , TC_PWA_SUB_0180, TC_PWA_SUB_0181 ,TC_PWA_SUB_0182, TC_PWA_SUB_0183, TC_PWA_SUB_0184, TC_PWA_SUB_0185,TC_PWA_SUB_0190";
			extent.HeaderChildNode(TCID +" Music Page validation");
		}
		//extent.HeaderChildNode(tabName + " Page Validation");
		navigateToAnyScreenOnWeb(tabName);
		Actions actions = new Actions(getWebDriver());
		WebElement contentCard = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
		actions.moveToElement(contentCard).build().perform();
		// update
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		waitTime(3000);
		if (verifyElementEnabled(PWAHomePage.objActiveTab, "Active tab")) {
			String tab = getText(PWAHomePage.objActiveTab);
			System.out.println(tab);
			logger.info(tab + " tab is highlighted");
			extent.extentLoggerPass("Tab", tab + " tab is highlighted");
		} else {
			logger.error(tabName + " tab is not highlighted");
			extent.extentLoggerFail("Tab", tabName + " tab is not highlighted");
		}
		// check if tray is loaded
		for (int i = 1; i <= 2; i++) {
			if (checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray")) {
				System.out.println("Tray is loaded for " + i + " scroll");
				logger.info("Tray is loaded for " + i + " scroll");
				extent.extentLoggerPass("Tray load", "Tray is loaded for " + i + " scroll");
			} else {
				ScrollToTheElement(PWAPremiumPage.objTrayTitle(i));
				verifyElementPresent(PWAPremiumPage.objTrayTitle(i), "Tray");
			}
		}
		scrollDownWEB();
		verifyElementPresent(PWAMusicPage.objMusicNextArrowBtn, "Next Arrow Button");
		JSClick(PWAMusicPage.objMusicNextArrowBtn, "Next Arrow Button");
		waitTime(3000);
		if (verifyElementPresent(PWAMusicPage.objMusicPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLoggerPass("Tray is rotated", "Tray is rotated");
		} else {
			logger.error("Tray is not rotated");
			extent.extentLoggerFail("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAMusicPage.objMusicPreviousArrowBtn, "Previous Arrow Button");
		if (verifyElementPresent(PWAPremiumPage.objViewAllBtn, "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "More Button");
			waitTime(3000);
			if (verifyElementPresent(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.info("Navigated to More Page");
				extent.extentLoggerPass("View All", "Navigated to More Page");
			} else {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("View All", "Not navigated to More Page");
			}
		}
		Back(1);
		waitTime(2000);

		waitTime(2000);
		if (verifyElementPresent(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			JSClick(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}
		waitTime(2000);
		for (int i = 0; i < 5; i++) {
			if (findElements(PWAPremiumPage.objMinuteContent).size() > 0) {
				logger.info("Minute content is displayed");
				extent.extentLogger("Minute content", "Minute content is displayed");
				break;
			} else {
				logger.info("Minute content is not displayed");
				extent.extentLogger("Minute content", "Minute content is not displayed");
				partialScrollDown();
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		if (verifyElementPresent(PWAHomePage.objHomePage, "Home Page")) {
			logger.info("Home Page is displayed");
			extent.extentLogger("Home Page", "Home Page is displayed");
		} else {
			logger.info("Home Page is not displayed");
			extent.extentLogger("Home Page", "Home Page is not displayed");
		}
	}

	public void landingPagesTrailerAndPopUpValidation(String userType, String tabName) throws Exception {
		String TCID = null;
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0057";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0059";
		extent.HeaderChildNode(TCID  + " Page Carousel Validation");
		navigateToAnyScreenOnWeb(tabName);
//		Actions actions = new Actions(getWebDriver());
//		WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
//		actions.moveToElement(menuOption).perform();
		JSClick(PWAPremiumPage.objWEBMastheadCarousel, "Carousel");
		waitTime(5000);
		if (userType.contains("Guest")) {
			mandatoryRegistrationPopUp(userType);
			if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Why Register Pop Up")) {
				click(PWASearchPage.objCloseRegisterDialog, "Close Button");
			} else {
				logger.info("Why Register pop up is not displayed");
			}
		}
		if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
			verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");
		}
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Not navigated to Consumption Page");
		}
		if (checkElementDisplayed(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button")) {
			watchTrailerButtonFunctionality(userType);
		} else {
			logger.info("Trailer is not available for the selected content");
			extent.extentLogger("Trailer", "Trailer is not available for the selected content");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/*
	 * Validation of Complete Profile/Tell us more about you section
	 */
	public void verifyCompleteYourProfilePopUp() throws Exception {
		extent.HeaderChildNode("Validating if user is able to fill Complete Profile/Tell us more about you section");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objFirstName, "First Name Field");
		type(CompleteYourProfilePopUp.objFirstName, "Test", "First Name Field");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objLastName, "Last Name Field");
		type(CompleteYourProfilePopUp.objLastName, "User", "Last Name Field");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objDay, "Day Field");
		click(CompleteYourProfilePopUp.objDateSelector, "Date");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objMonth, "Month Field");
		click(CompleteYourProfilePopUp.objDateSelector, "Month");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objYear, "Year Field");
		click(CompleteYourProfilePopUp.objDateSelector, "Year");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objGenderFemale, "Gender Field");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objMobileNo, "Mobile Number");
		type(CompleteYourProfilePopUp.objMobileNo, "95839633299", "Mobile Number");
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objCloseBtn, "Close Button");
	}

	@SuppressWarnings("unused")
	public void trayTitleAndContentValidationWithApiData(String tab, String api) throws Exception {
		extent.HeaderChildNode(tab + " page validation with Api response");
		navigateToAnyScreenOnWeb(tab);
		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
		actions.moveToElement(menuOption).build().perform();

		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);

		Response resp = ResponseInstance.getResponseForPages("home", languageSmallText); // changes
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[2].title"); // changes
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[2].items"); // changes
		System.out.println(contentList.size());
		// partialScrollDown();
		partialScroll(); // changes
		partialScroll(); // changes
		waitTime(2000); // changes
		List<WebElement> card = getWebDriver().findElements(By.xpath("((//div[@class='slick-list'])[3]//img)")); // changes
		System.out.println(card.size());
		for (int i = 0; i < card.size(); i++) {
			// API DATA
			String title = resp.jsonPath().getString("buckets[1].items[" + i + "].title"); // changes
			String businessType = resp.jsonPath().getString("buckets[2].items[" + i + "].business_type");
			String minuteType_isDRM = null;
			minuteType_isDRM = resp.jsonPath().getString("buckets[2].items[" + i + "].is_drm"); // changes

			apiTitleList.add(title);
			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("((//div[@class='slick-list'])[3]//img)[" + (i + 1) + "]")); // changes
			actions.moveToElement(contentCard).build().perform();

			// to get metadata from content
			String contentMetadata = getAttributValue("title",
					By.xpath("((//div[@class='slick-list'])[3]//img)[" + (i + 1) + "]")); // changes

			// String trayTitle = apiTitleList.get(i);
//			System.out.println("UI data : " + contentMetadata);
//			System.out.println("api data : " + apiTitleList.get(i));
			logger.info("UI data " + contentMetadata); // changes
			logger.info("API data " + apiTitleList.get(i));
			extent.extentLogger("UI data ", "UI data " + contentMetadata);
			extent.extentLogger("API data ", "API data " + apiTitleList.get(i));
			if (contentMetadata.equalsIgnoreCase(apiTitleList.get(i))) {
				logger.info("Metadata on the content card is valid with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is valid with Api data");
			} else {
				logger.info("Metadata on the content card is not valid with Api data");
				extent.extentLoggerFail("Metadata", "Metadata on the content card is not valid with Api data");
			}

			// MINUTELY CONTENT CHECK
			waitTime(1000);
//			System.out.println(minuteType_isDRM);
//			if (minuteType_isDRM == null) {
//				System.out.println("No minute content attached");
//			} else {
//				System.out.println("Minute content present");

			if (checkElementDisplayed(PWAPremiumPage.specificContentisMinuteimage(Tray_Title, i + 1),
					"Minute Content")) {
				logger.info("MinuteContent is Present");
				extent.extentLogger("MinuteContent", "MinuteContent is Present");
			} else {
				logger.info("MinuteContent is not Present");
				extent.extentLogger("MinuteContent", "MinuteContent is not Present");
			}
//			}

			// PREMIUM ICON CHECK
			waitTime(1000);
			if (businessType.contains("premium")) {
				if (checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i + 1),
						"Premium icon")) {
					logger.info("Premium icon is Present");
					extent.extentLogger("Premium icon", "Premium icon is Present");
				} else {
					logger.info("Premium icon is not Present");
					extent.extentLoggerFail("Premium icon", "Premium icon not Present");
				}

			} else if (businessType.contains("advertisement") || businessType.contains("free")) {
				if (!checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i), "Premium icon")) {
					logger.info("premium icon not present and Content is NonPremium");
					extent.extentLogger("Premium icon", "premium icon not present and Content is NonPremium");
				} else {
					logger.info("premium icon is present");
					extent.extentLoggerFail("Premium icon", "premium icon is present");
				}
			}

			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Icon")) {
				logger.info("Play icon is displayed");
				extent.extentLogger("Play", "Play icon is displayed");
			} else {
				logger.info("Play icon is not displayed");
				extent.extentLogger("Play", "Play icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Icon")) {
				logger.info("Share icon is displayed");
				extent.extentLogger("Share", "Share icon is displayed");
			} else {
				logger.info("Share icon is not displayed");
				extent.extentLogger("Share", "Share icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardWatchlistBtn, "Watchlist Icon")) {
				logger.info("Watchlist icon is displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is displayed");
			} else {
				logger.info("Watchlist icon is not displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is not displayed");
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public String allSelectedLanguages() throws Exception {
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtnWEB, "Language button");
		waitTime(2000);
		waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2, "Content languages");
		logger.info("Fetching selected content languages to be sent as API parameters");
		extent.extentLogger("", "Fetching selected content languages to be sent as API parameters");
		waitTime(2000);
		List<WebElement> allSelectedLanguages = getWebDriver().findElements(PWAHamburgerMenuPage.objSelectedLanguages);
		String langtext = "";
		for (int i = 0; i < allSelectedLanguages.size(); i++) {
			// System.out.println(i);
			langtext = allSelectedLanguages.get(i).getAttribute("for").replace("content_", "") + "," + langtext;
			// System.out.println(langtext.replaceAll(",$",""));
		}
		String finalLangString = langtext.replaceAll(",$", "");
		logger.info("Content Languages selected : " + finalLangString);
		extent.extentLogger("", "Content Languages selected : " + finalLangString);
		waitForElementAndClick(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, 2, "Apply Button");
		return finalLangString;
	}

	public void watchTrailerButtonFunctionality(String userType) throws Exception {
		extent.HeaderChildNode("Watch Trailer Button Validation");
		click(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button");
		if (userType.contains("Guest")) {
			if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Why Register Pop Up")) {
				click(PWASearchPage.objCloseRegisterDialog, "Close Button");
			} else {
				logger.info("Why Register pop up is not displayed");
				extent.extentLogger("Register popup", "Why Register pop up is not displayed");
			}
		}
		waitTime(20000);
		if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
			verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");
		}
		if (userType.contains("NonSubscribedUser") || (userType.contains("Guest"))) {
			checkElementDisplayed(PWAPremiumPage.objSubscribeNowAndGoAdFree, "Subscribe Now And Go Ad Free Message");
			checkElementDisplayed(PWAPremiumPage.objGetPremium, "Get Premium Button");
		}
	}

	public void premiumPageTrayTitleAndContentValidationWithApiData(String tab, String api) throws Exception {
		extent.HeaderChildNode(tab + " page validation with Api response");
		navigateToAnyScreenOnWeb(tab);
		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
		actions.moveToElement(menuOption).build().perform();

		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);

		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
//		ScrollToElement(PWAMusicPage.objTrayTitle(Tray_Title), "Tray title");
		partialScrollDown();
		List<WebElement> card = getWebDriver().findElements(By.xpath("((//div[@class='slick-list'])[2]//img)"));
		System.out.println(card.size());
		for (int i = 0; i < card.size(); i++) {
			// API DATA
			String title = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			String businessType = resp.jsonPath().getString("buckets[1].items[" + i + "].business_type");

			apiTitleList.add(title);

			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();

			// to get metadata from content
			String contentMetadata = getAttributValue("title",
					By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));

			logger.info("UI data " + contentMetadata);
			logger.info("API data " + apiTitleList.get(i));
			extent.extentLogger("UI data ", "UI data " + contentMetadata);
			extent.extentLogger("API data ", "API data " + apiTitleList.get(i));
			if (contentMetadata.equalsIgnoreCase(apiTitleList.get(i))) {
				logger.info("Metadata on the content card is validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is validated with Api data");
			} else {
				logger.info("Metadata on the content card is not validated with Api data");
				extent.extentLoggerFail("Metadata", "Metadata on the content card is not validated with Api data");
			}

			// PREMIUM ICON CHECK
			waitTime(1000);
			if (businessType.contains("premium")) {
				if (checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i + 1),
						"Premium icon")) {
					logger.info("Premium icon is Present");
					extent.extentLogger("Premium icon", "Premium icon is Present");
				} else {
					logger.info("Premium icon is not Present");
					extent.extentLoggerFail("Premium icon", "Premium icon not Present");
				}

			} else if (businessType.contains("advertisement") || businessType.contains("free")) {
				if (!checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i), "Premium icon")) {
					logger.info("premium icon not present and Content is NonPremium");
					extent.extentLogger("Premium icon", "premium icon not present and Content is NonPremium");
				} else {
					logger.info("premium icon is present");
					extent.extentLoggerFail("Premium icon", "premium icon is present");
				}
			}

			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Icon")) {
				logger.info("Play icon is displayed");
				extent.extentLogger("Play", "Play icon is displayed");
			} else {
				logger.info("Play icon is not displayed");
				extent.extentLogger("Play", "Play icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Icon")) {
				logger.info("Share icon is displayed");
				extent.extentLogger("Share", "Share icon is displayed");
			} else {
				logger.info("Share icon is not displayed");
				extent.extentLogger("Share", "Share icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardWatchlistBtn, "Watchlist Icon")) {
				logger.info("Watchlist icon is displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is displayed");
			} else {
				logger.info("Watchlist icon is not displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is not displayed");
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/**
	 * ================================MANASA
	 * MusicPage==================================
	 *
	 */

	@SuppressWarnings("unused")
	public void musicPageValidation(String tabName, String userType, String searchText) throws Exception {
		String TCID = null;
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0162 , TC_PWA_GST_0163";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0225 , TC_PWA_NS_0226";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0193 , TC_PWA_SUB_0194";
		extent.HeaderChildNode("Music Page Playback Validation for Free Content and Premium Content");
		navigateToAnyScreenOnWeb(tabName);
		Actions actions = new Actions(getWebDriver());
		WebElement player = getWebDriver().findElement(PWAPlayerPage.objPlaybackVideoOverlay);
		if (checkElementDisplayed(PWAPremiumPage.objWEBMastheadCarousel, "Carousel")) {
			click(PWAPremiumPage.objWEBMastheadCarousel, "Carousel");
			mandatoryRegistrationPopUp(userType);

			waitTime(10000);

			if (BROWSER.equals("Firefox")) {
				waitForPlayerLoaderToComplete();
			}
			waitForPlayerAdToComplete("Video Player");

			if (BROWSER.equals("Chrome")) {
				pausePlayer();
			} else {
				firefoxpause();
			}

			// actions.moveToElement(player).build().perform();
			click(PWAPlayerPage.maximizeBtn, "Maximize button");
			waitTime(1000);
			click(PWAPlayerPage.minimizeBtn, "Minimize button");
			waitTime(1000);


			if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0164";
			if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0227";
			if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0195";

			if (checkElementDisplayed(PWAMusicPage.objRecommendedVideos, "Recommended tray")) {
				logger.info("Recommended videos is displayed in consumption page");
				extent.extentLogger("Recommended tray", "Recommended videos is displayed in consumption page");
			} else {
				logger.info("Recommended videos  is not displayed in consumption page");
				extent.extentLogger("Recommended tray", "Recommended videos is not displayed in consumption page");
			}
			Back(1);
		} else {
			musicFreeContentPlaybackValidation(userType);
		}
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, searchText, "Search Field");

		click(PWASearchPage.objspecificSearch, "Searched content");
		if (findElements(PWAMusicPage.objPremiumTagContentCard(searchText)).size() > 0) {

			if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0157";
			if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0219";
			if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0186";
			extent.HeaderChildNode(TCID + "Verify the premium tag is given on top left for SVOD content card");
			logger.info("Premium tag is displayed");
			extent.extentLogger("Premium Tag", "Premium Tag is displayed");
			click(PWAMusicPage.objPremiumTagContentTumbnail(searchText), "Premium");

			if (userType.equals("SubscribedUser")) {
				if (BROWSER.equals("Firefox")) {
					waitForPlayerLoaderToComplete();
				}
				waitForPlayerAdToComplete("Video Player");
				if (BROWSER.equals("Chrome")) {
					pausePlayer();
				} else {
					firefoxpause();
				}
//				actions.moveToElement(player).build().perform();
				click(PWAPlayerPage.maximizeBtn, "Maximize button");
				waitTime(1000);
				click(PWAPlayerPage.minimizeBtn, "Minimize button");
				waitTime(1000);
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void musicFreeContentPlaybackValidation(String userType) throws Exception {
		extent.HeaderChildNode("Free Content Playback Validation");

		verifyElementPresent(PWAMusicPage.objFreeMusicContentCard, "Free Content Card");
		JSClick(PWAMusicPage.objFreeMusicContentCard, "Free Content Card");
		mandatoryRegistrationPopUp(userType);

		waitTime(10000);
		if (BROWSER.equals("Firefox")) {
			waitForPlayerLoaderToComplete();
		}
		waitForPlayerAdToComplete("Video Player");

		if (BROWSER.equals("Chrome")) {
			pausePlayer();
		} else {
			firefoxpause();
		}

		// actions.moveToElement(player).build().perform();
		click(PWAPlayerPage.maximizeBtn, "Maximize button");
		waitTime(1000);
		click(PWAPlayerPage.minimizeBtn, "Minimize button");
		waitTime(1000);

		if (checkElementDisplayed(PWAMusicPage.objRecommendedVideos, "Recommended tray")) {
			logger.info("Recommended videos is displayed in consumption page");
			extent.extentLogger("Recommended tray", "Recommended videos is displayed in consumption page");
		} else {
			logger.info("Recommended videos  is not displayed in consumption page");
			extent.extentLogger("Recommended tray", "Recommended videos is not displayed in consumption page");
		}
		Back(1);
	}

	public void trayTitleAndContentValidationWithApiDataGuest(String tab, String api, String userType)
			throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(tab + " page validation with Api response");
			navigateToAnyScreenOnWeb(tab);
			Actions actions = new Actions(getWebDriver());
			WebElement menuOption = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
			actions.moveToElement(menuOption).build().perform();

			String languageSmallText = allSelectedLanguages();
			System.out.println(languageSmallText);

			Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
			List<String> apiTitleList = new LinkedList<String>();
			String Tray_Title = resp.jsonPath().getString("buckets[1].title");
			System.out.println("The Title of the Tray is " + Tray_Title + "");
			List<String> contentList = resp.jsonPath().getList("buckets[1].items");
			System.out.println(contentList.size());
			// ScrollToElement(PWAMusicPage.objTrayTitle(Tray_Title), "Tray title");
			partialScrollDown();
			List<WebElement> card = getWebDriver().findElements(By.xpath("((//div[@class='slick-list'])[2]//img)"));
			System.out.println(card.size());
			for (int i = 0; i < card.size(); i++) {
				// API DATA
				String title = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
				String businessType = resp.jsonPath().getString("buckets[1].items[" + i + "].business_type");

				apiTitleList.add(title);

				WebElement contentCard = getWebDriver()
						.findElement(By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));
				actions.moveToElement(contentCard).build().perform();

				// to get metadata from content
				String contentMetadata = getAttributValue("title",
						By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));

				System.out.println("UI data : " + contentMetadata);
				System.out.println("api data : " + apiTitleList.get(i));

				logger.info("UI data " + contentMetadata);
				logger.info("API data " + apiTitleList.get(i));
				extent.extentLogger("UI data ", "UI data " + contentMetadata);
				extent.extentLogger("API data ", "API data " + apiTitleList.get(i));
				if (contentMetadata.equalsIgnoreCase(apiTitleList.get(i))) {
					logger.info("Metadata on the content card is validated with Api data");
					extent.extentLogger("Metadata", "Metadata on the content card is validated with Api data");
				} else {
					logger.info("Metadata on the content card is not validated with Api data");
					extent.extentLoggerFail("Metadata", "Metadata on the content card is not validated with Api data");
				}

				// PREMIUM ICON CHECK
				waitTime(1000);
				if (businessType.contains("premium")) {
					if (checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i + 1),
							"Premium icon")) {
						logger.info("Premium icon is Present");
						extent.extentLogger("Premium icon", "Premium icon is Present");
					} else {
						logger.info("Premium icon is not Present");
						extent.extentLoggerFail("Premium icon", "Premium icon not Present");
					}

				} else if (businessType.contains("advertisement") || businessType.contains("free")) {
					if (!checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i),
							"Premium icon")) {
						logger.info("premium icon not present and Content is NonPremium");
						extent.extentLogger("Premium icon", "premium icon not present and Content is NonPremium");
					} else {
						logger.info("premium icon is present");
						extent.extentLoggerFail("Premium icon", "premium icon is present");
					}
				}

				waitTime(1000);
				if (checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Icon")) {
					logger.info("Play icon is displayed");
					extent.extentLogger("Play", "Play icon is displayed");
				} else {
					logger.info("Play icon is not displayed");
					extent.extentLogger("Play", "Play icon is not displayed");
				}
				waitTime(1000);
				if (checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Icon")) {
					logger.info("Share icon is displayed");
					extent.extentLogger("Share", "Share icon is displayed");
				} else {
					logger.info("Share icon is not displayed");
					extent.extentLogger("Share", "Share icon is not displayed");
				}
				waitTime(1000);
				if (checkElementDisplayed(PWAPremiumPage.objContentCardWatchlistBtn, "Watchlist Icon")) {
					logger.info("Watchlist icon is displayed");
					extent.extentLogger("Watchlist", "Watchlist icon is displayed");
				} else {
					logger.info("Watchlist icon is not displayed");
					extent.extentLogger("Watchlist", "Watchlist icon is not displayed");
				}
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	public void musicPageTrayTitleAndContentValidationWithApiData(String tab, String api, String userType)
			throws Exception {
		String TCID = null;
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0158 , TC_PWA_GST_0159";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0220 , TC_PWA_NS_0221";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0187 , TC_PWA_SUB_0189";

		extent.HeaderChildNode(TCID + "Music page validation with Api response");
		waitTime(5000);
		navigateToAnyScreenOnWeb(tab);
		waitTime(5000);

		waitForElementDisplayed(PWAMusicPage.objPremiumTag, 30);
		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);
		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
//		partialScrollDown();
		scrollByWEB();
		for (int i = 0; i < 5; i++) {
			String titles = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			// System.out.println("Api data " +titles);
			logger.info("Api data " + titles);
			extent.extentLogger("Api data ", "Api data " + titles);
			apiTitleList.add(titles);
			Actions actions = new Actions(getWebDriver());
			WebElement contentCard = getWebDriver().findElement(By.xpath(
					"(//div[@class='slick-list']//div[@class='content' or @class='clickWrapper'])[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();
			String trayTitle = apiTitleList.get(i);
			logger.info("UI data " + titles);
			extent.extentLogger("UI data ", "UI data " + titles);
			if (trayTitle.equalsIgnoreCase(apiTitleList.get(i))) {
				logger.info("Metadata on the content card is validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is validated with Api data");
			} else {
				logger.info("Metadata on the content card is not validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is not validated with Api data");
			}
			waitTime(2000);
			verifyElementPresent(PWAPremiumPage.objContentCardPlayBtn, "Play Button");
			waitTime(2000);
			verifyElementPresent(PWAPremiumPage.objContentCardShareBtn, "Share Button");
//			waitTime(1000);
//			verifyElementEnabled(PWAPremiumPage.objContentCardWatchlistBtn, "Add to Watchlist Button");
		}
	}

	/**
	 * ================================VINAY Language and Language
	 * Settings==================================
	 *
	 */

	public void LanguageModule(String userType) throws Exception {
		extent.HeaderChildNode("Language setting Module");
		// Validate language selection option is displayed
		// click on language button
		Thread.sleep(5000);

		partialScroll();
		partialScroll();
		boolean staleElement2 = true;
		while (staleElement2) {
			try {
				Thread.sleep(5000);
				verifyElementPresentAndClick(PWAHomePage.objLanguageBtn, "Language button");
				staleElement2 = false;
			} catch (StaleElementReferenceException e) {
				staleElement2 = true;
			}
		}

		// click(PWAHomePage.objLanguageBtn, "Language button");

		// Verify display language screen is displayed
		if (getElementPropertyToString("class", PWAHamburgerMenuPage.objDisplayLang, "Display language")
				.contains("headerSelected")) {
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objDisplayLang, "Display language")
							.contains("headerSelected"),
					true, "Display screen is displayed on tapping language option");
			extent.extentLogger("Verify Display language screen is displayed",
					"Display screen is displayed on tapping language option");
			logger.info("Display screen is displayed on tapping language option");
		} else {
			softAssert.assertAll();
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objDisplayLang, "Display language")
							.contains("headerSelected"),
					false, "Display screen is not displayed on tapping language option");
			extent.extentLogger("Verify Display language screen is displayed",
					"Display screen is nt displayed on tapping language option");
			logger.info("Display screen is not displayed on tapping language option");
		}

		// Verify that default display language is English
		String defaultLang = getElementPropertyToString("class", PWALanguageSettingsPage.objSelectedLang,
				"Default Language");
		if (defaultLang.contains("checkedHighlight")) {
			String selectedLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("English"), "Language");
			if (selectedLang.equals("English")) {
				softAssert.assertEquals(selectedLang.equals("English"), true,
						selectedLang + " language is selected by default");
				extent.extentLogger("Verify default language", "English is selected by defalut");
				logger.info(selectedLang + " language is selected by default");
			} else {
				softAssert.assertAll();
				extent.extentLoggerFail("Verify default language", "English is selected by defalut");
				logger.info("By default " + selectedLang + " is displayed");
			}
		}

		// Verify user can select desired display language
		// Verify user can Hindi language
		JSClick(PWALanguageSettingsPage.objLanguage("Hindi"), "Hindi display language");
		// Verify selected language
		String HindiLang = getElementPropertyToString("class", PWALanguageSettingsPage.objSelectedLang,
				"Default Language");
		if (HindiLang.contains("checkedHighlight")) {
			String selectedDisplayLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("Hindi"), "Language");
			extent.extentLogger("Selected display language", selectedDisplayLang + " is selected in display screen ");
			logger.info(selectedDisplayLang + " is selected from display screen");
		} else {
			extent.extentLoggerFail("Select display language", "Unable to select the display language");
			logger.info("Unable to select the display language");
		}
		// Verify user can Marathi language
		JSClick(PWALanguageSettingsPage.objLanguage("Marathi"), "Marathi display language");
		// Verify selected language
		String MaratiLang = getElementPropertyToString("class", PWALanguageSettingsPage.objSelectedLang,
				"Default Language");
		if (MaratiLang.contains("checkedHighlight")) {
			String selectedDisplayLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("Marathi"), "Language");
			extent.extentLogger("Selected display language", selectedDisplayLang + " is selected in display screen ");
			logger.info(selectedDisplayLang + " is selected from display screen");
		} else {
			extent.extentLoggerFail("Select display language", "Unable to select the display language");
			logger.info("Unable to select the display language");
		}
		// Verify user can Telugu language
		JSClick(PWALanguageSettingsPage.objLanguage("Telugu"), "Telugu display language");
		// Verify selected language
		getElementPropertyToString("class", PWALanguageSettingsPage.objSelectedLang, "Default Language");
		if (MaratiLang.contains("checkedHighlight")) {
			String selectedDisplayLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("Telugu"), "Language");
			extent.extentLogger("Selected display language", selectedDisplayLang + " is selected in display screen ");
			logger.info(selectedDisplayLang + " is selected from display screen");
		} else {
			extent.extentLoggerFail("Select display language", "Unable to select the display language");
			logger.info("Unable to select the display language");
		}

		// Verify selected Display language is applied
		// Select Kannada display language
		JSClick(PWALanguageSettingsPage.objLanguage("Kannada"), "Kannada display language");
		// Verify selected language
		String selectedLangInDisplayScreen = getElementPropertyToString("class",
				PWALanguageSettingsPage.objSelectedLang, "Default Language");
		if (selectedLangInDisplayScreen.contains("checkedHighlight")) {
			String selectedDisplayLang = getElementPropertyToString("innerText",
					PWALanguageSettingsPage.objLanguage("Kannada"), "Language");
			extent.extentLogger("Selected display language", selectedDisplayLang + " is selected in display screen ");
			logger.info(selectedDisplayLang + " is selected from display screen");
		} else {
			extent.extentLoggerFail("Select display language", "Unable to select the display language");
			logger.info("Unable to select the display language");
		}
		// Verify the selected language is applied in home page
		JSClick(PWALanguageSettingsPage.objApplyBtn, "Apply button");
		JSClick(PWALanguageSettingsPage.objApplyBtn, "Apply button");
		boolean staleElement = true;
		while (staleElement) {

			try {
				Thread.sleep(5000);
				verifyElementPresent(PWALanguageSettingsPage.objTrayHeader, "Tray title");

			} catch (StaleElementReferenceException e) {
				staleElement = true;
			}

			String trayHeader = getElementPropertyToString("class", PWALanguageSettingsPage.objTrayHeader,
					"Tray header");
			staleElement = false;
			if (trayHeader.contains("kn_regionalLang")) {
				softAssert.assertEquals(trayHeader.contains("kn_regionalLang"), true,
						"The selected display language is applied");
				extent.extentLogger(" Verify selected display Languge",
						"The selected display langguage is applied successfully");
				logger.info("The selected display language is applied successfully");
			} else {
				softAssert.assertAll();
				extent.extentLoggerFail(" Verify selected display Languge",
						"The selected display langguage is not applied successfully");
				logger.info("The selected display language is not applied successfully");
			}
		}
		// Click on Language button
		partialScroll();
		partialScroll();
		JSClick(PWAHomePage.objLanguageBtn, "Language button");
		// Select English
		JSClick(PWALanguageSettingsPage.objEnglishLang, "English language");
		JSClick(PWALanguageSettingsPage.objApplyBtn, "Apply button");
		JSClick(PWALanguageSettingsPage.objApplyBtn, "Apply button");
		Thread.sleep(5000);
		partialScroll();
		Thread.sleep(5000);
		partialScroll();
		Thread.sleep(5000);
		boolean staleElement1 = true;
		while (staleElement1) {
			try {

				JSClick(PWAHomePage.objLanguageBtn, "Language button");
				staleElement1 = false;
			} catch (StaleElementReferenceException e) {
				staleElement1 = true;
			}
		}

		// Click on Content language button
		JSClick(PWAHamburgerMenuPage.objContentLanguage, "Content language");
		// Verify user is navigated to Content Language screen post tapping content
		// language option
		if (getElementPropertyToString("class", PWAHamburgerMenuPage.objContentLanguage, "Content language")
				.contains("headerSelected")) {
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objContentLanguage, "Content language")
							.contains("headerSelected"),
					true, "Content language screen is displayed on tapping content language option");
			extent.extentLogger("Verify Content language screen is displayed",
					"Content screen is displayed on tapping Content language option");
			logger.info("Content screen is displayed on tapping Content language option");
		} else {
			softAssert.assertAll();
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objContentLanguage, "Content language")
							.contains("headerSelected"),
					false, "Content language screen is not displayed on tapping content language option");
			extent.extentLoggerFail("Verify Content language screen is displayed",
					"Content language screen is not displayed on tapping content language option");
			logger.info("Content language screen is not displayed on tapping Content language option");
		}
		int sele = findElements(PWALanguageSettingsPage.objSelectedLang).size();
		for (int i = 0; i <= sele; i++) {
			Thread.sleep(2000);
			click(PWALanguageSettingsPage.objSelectedLang, "Selected language");
		}
//			JSClick(PWALanguageSettingsPage.objSelectedLang, "Selected language");
//			Thread.sleep(2000);
//			JSClick(PWALanguageSettingsPage.objSelectedLang, "Selected language");

		// Verify user can select multiple Content languages

		for (int i = 1; i <= 3; i++) {
			String language = getElementPropertyToString("innerText", PWALanguageSettingsPage.objAllLangByindex(i),
					"Language");
			Thread.sleep(1000);
			click(PWALanguageSettingsPage.objAllLangByindex(i), language + " Language");
		}
		Thread.sleep(5000);
		int size = getWebDriver().findElements(PWALanguageSettingsPage.objSelectedLang).size();
		if (size > 1) {
			softAssert.assertEquals(size > 1, true, "User can select multiple languages");
			extent.extentLogger("Selected content languages : ", "Selected content languages : " + size);
			extent.extentLogger("Verify user can select multiple content languages",
					"User can select multiple Content languages");
			logger.info("User can select multiple Content languages");
		} else {
			softAssert.assertAll();
			extent.extentLoggerFail("Verify user can select multiple content languages",
					"User can not select multiple Content languages");
			logger.info("User can not select multiple Content languages");
		}

		// Verify user should not be able to apply the changes if he deselect all the
		// language.
		int selectedlang = getWebDriver().findElements(PWALanguageSettingsPage.objSelectedLang).size();
		for (int i = 1; i <= selectedlang; i++) {
			click(PWALanguageSettingsPage.objSelectedLang, "Selected language");
		}

		// Verify apply button is disabled
		String disabledApplyBtn = getElementPropertyToString("class", PWALanguageSettingsPage.objDisabledApplyButton,
				"Apply button");
		if (disabledApplyBtn.contains("disable")) {
			softAssert.assertEquals(disabledApplyBtn.contains("disable"), true,
					"User can not apply changes if he deselect all the content languages");
			extent.extentLogger("Verify Content language screen",
					"User can not apply changes if he deselect all the content languages");
			logger.info("User can not apply changes if he deselect all the content languages");
		} else {
			softAssert.assertEquals(disabledApplyBtn.contains("disable"), false,
					"User can apply changes if he deselect all the content languages");
			extent.extentLogger("Verify Content language screen",
					"User can apply changes if he deselect all the content languages");
			logger.info("User can apply changes if he deselect all the content languages");
		}

		// Verify User able to Switch to Content Language section from Display Language
		// and Content language
		// click on Display language
		JSClick(PWAHamburgerMenuPage.objDisplayLang, "Display language");
		// Verify user is navigated to display screen
		if (getElementPropertyToString("class", PWAHamburgerMenuPage.objDisplayLang, "Display language")
				.contains("headerSelected")) {
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objDisplayLang, "Display language")
							.contains("headerSelected"),
					true, "Display screen is displayed on tapping language option");
			extent.extentLogger("Verify Display language screen is displayed",
					"Display screen is displayed on tapping language option");
			logger.info("Display screen is displayed on tapping language option");
		} else {
			softAssert.assertAll();
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objDisplayLang, "Display language")
							.contains("headerSelected"),
					false, "Display screen is not displayed on tapping language option");
			extent.extentLogger("Verify Display language screen is displayed",
					"Display screen is nt displayed on tapping language option");
			logger.info("Display screen is not displayed on tapping language option");
		}
		// Verify user is navigated to content language screen post tapping content
		// language screen
		JSClick(PWAHamburgerMenuPage.objContentLanguage, "Content language");
		if (getElementPropertyToString("class", PWAHamburgerMenuPage.objContentLanguage, "Content language")
				.contains("headerSelected")) {
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objContentLanguage, "Content language")
							.contains("headerSelected"),
					true, "Content language screen is displayed on tapping content language option");
			extent.extentLogger("Verify Content language screen is displayed",
					"Content screen is displayed on tapping Content language option");
			logger.info("Content screen is displayed on tapping Content language option");
		} else {
			softAssert.assertAll();
			softAssert.assertEquals(
					getElementPropertyToString("class", PWAHamburgerMenuPage.objContentLanguage, "Content language")
							.contains("headerSelected"),
					false, "Content language screen is not displayed on tapping content language option");
			extent.extentLoggerFail("Verify Content language screen is displayed",
					"Content language screen is not displayed on tapping content language option");
			logger.info("Content language screen is not displayed on tapping Content language option");
		}

		// Verify user can close the pop up by clicking anywhere in the application
		// click on home button
		if (userType.equals("NonSubscribedUser")) {
			getWebDriver().findElement(By.xpath("//body")).click();
		} else {
			getWebDriver().findElement(By.xpath("//html")).click();
		}
//			 JSClick(PWALanguageSettingsPage.objRandomClick, "Random clicking");

		// Verify the Language pop up
		if (checkElementDisplayed(PWAHamburgerMenuPage.objDisplayLang, "Language Pop up") == false) {
			logger.info("Langugae Pop up is closed after clicking anywhere on the application");
			extent.extentLogger("Verify Pop up",
					"Langugae Pop up is closed after clicking anywhere on the application");
		} else {
			logger.info("Langugae Pop up did not closed after clicking anywhere on the application");
			extent.extentLoggerFail("Verify Pop up",
					"Langugae Pop up did not closed after clicking anywhere on the application");
			JSClick(PWAHomePage.objLanguageBtn, "Language button");
		}

		getWebDriver().get(URL);

	}


	/**
	 * Method for player validation
	 * @param userType
	 * @throws Exception
	 */
	public void Kaltura(String userType) throws Exception {
		extent.HeaderChildNode("Kaltura Playability");
		String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie4");
		searchvideoandselect(keyword1, userType, "Movie");

		Thread.sleep(2000);
		String keyword2 = getParameterFromXML("tvshow");
		searchvideoandselect(keyword2, userType, "ZEE5 Originals");

		Thread.sleep(2000);
		String keyword3 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("trailerOfPremiumMovie");
		searchvideoandselect(keyword3, userType, "trailer");

		Thread.sleep(2000);
		String keyword4 = getParameterFromXML("music");
		searchvideoandselect(keyword4, userType, "Music");

		Thread.sleep(2000);
		String keyword5 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeEpisode4");
		searchvideoandselect(keyword5, userType, "show");

		Thread.sleep(2000);
		String keyword6 = getParameterFromXML("news");
		searchvideoandselect(keyword6, userType, "news");

		String Value = null;
		waitTime(5000);

		partialScroll();
		partialScroll();

		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(PWAHomePage.objMoreMenuBtn);
		actions.moveToElement(menuOption).perform();
		// click(PWAHomePage.objTabName("Live TV"), "Live TV Tab");
		click(PWAHomePage.objLiveTVtab, "Live TV Tab");
		waitTime(5000);
		mandatoryRegistrationPopUp(userType);
		System.out.println("Selecting Free content from LIVETV tray and validating Kaltura playability");
		extent.extentLogger("Selecting Free content from LIVETV tray and validating Kaltura playability",
				"Selecting Free content from LIVETV tray and validating Kaltura playability");
		Value = checkPremiumORFreeFromLIVETVPageTrayAndSelect("FREE Channels", "FREE");
		System.out.println(Value);
		waitTime(5000);
		System.out.println("Selected Tumbnail Value : " + Value);
		if (Value != null) {
			PremiumFreeZeeOriginalKaltura(Value, userType);
		} else {
			System.out.println("No Tray");
			getWebDriver().get(URL);
		}

	}

	public void searchvideoandselect(String str, String userType, String type) throws Exception {
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, str, "Search Field");
		Thread.sleep(3000);
		if (type.equals("Movie")) {
			click(PWASearchPage.objSearchMoviesTab, "Movies tab");
		}
		Thread.sleep(3000);
		waitTime(3000);
		if (type.equalsIgnoreCase("news")) {
			click(PWASearchPage.objSearchNewsTab, "SearchNewsTab");
			Thread.sleep(1000);
			click(PWASearchPage.objFirstAssetImgSearchNavigationTab, "First data after search");
		} else {

			click(PWASearchPage.objspecificSearch, "Searched content");
		}

		Thread.sleep(5000);
		if (type.equals("ZEE5 Originals") || type.equals("Music")) {
			Thread.sleep(5000);
			if (type.equals("Music")) {
				if (checkElementDisplayed(PWAPlayerPage.objWhyRegister, "Why Register Popup")) {
					click(PWAPlayerPage.objCloseRegisterDialog, "Close button");
				}
			}

			Actions actions = new Actions(getWebDriver());
			WebElement menuOption = getWebDriver().findElement(PWAHomePage.objMoreMenuBtn);
			actions.moveToElement(menuOption).perform();
			System.out.println("Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
			extent.extentLogger("Navigated to tab : " + getText(PWAHomePage.objSeletedTab),
					"Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
			logger.info("Navigated to tab : " + getText(PWAHomePage.objSeletedTab));

		} else if (type.equals("trailer")) {
			extent.extentLogger("Verify Navigation", "User is navigated to Trailer consumption screen");
			logger.info("User is navigated to Trailer consumption screen");
		} else {
			System.out.println("Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
			extent.extentLogger("Navigated to tab : " + getText(PWAHomePage.objSeletedTab),
					"Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
			logger.info("Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
		}

		if (type.equals("ZEE5 Originals")) {
			if (checkElementDisplayed(PWAHomePage.objKalGetPremium, "Get Premium")) {
				click(PWAHomePage.objKalGetPremiumPlayicon, "Play Button");
			}
		}

		if (userType.equals("SubscribedUser")) {
			if (checkElementDisplayed(PWAHomePage.objKalGetFirstEpisode, "Get First Episode")) {
				click(PWAHomePage.objKalGetFirstEpisodePlayicon, "Play Button");
			}
		}

		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
			}
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
		}

		if (userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(CompleteYourProfilePopUp.objCompleteYourProfileTxt,
					"Complete Your Profile pop up")) {
				click(CompleteYourProfilePopUp.objCloseBtn, "Close Button");
			}
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
		}

		waitTime(5000);

		if (checkElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
			extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");
		} else {
			extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			waitForPlayerAdToComplete("Video Player");
		}
		pausePlayer();
		if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
			System.out.println("Video is playing");
			extent.extentLogger("Verify video Playability", "User is able to play video");
			logger.info("User is able to play video");
		} else {
			System.out.println("Video is not playing");
			extent.extentLoggerFail("Verify video Playability", "Playback video failed");
			logger.info("Video playback failed");
		}

		if (!checkElementDisplayed(PWAPlayerPage.objprogressBar, "Progress bar")) {
			logger.info("Progress bar for LiveTv is not present");
			extent.extentLogger("Progress bar", "Progress bar for LiveTv is not present");
		}
		getWebDriver().get(URL);
	}

	public String checkPremiumORFreeFromLIVETVPageTrayAndSelect(String str, String premiumORfree) throws Exception {

		String ValueOfPremiumTumbnail = null;
		System.out.println("Check premium and select");
		List<WebElement> tumnails = getWebDriver()
				.findElements(By.xpath("(((((//div[@class='trayContentWrap']//div[@class='trayHeader']//h2[.='" + str
						+ "']))//parent::*//parent::*)//child::*[2])//child::*//div[@class='slick-track'])//child::*//div[@class='clickWrapper']"));
		System.out.println("Number of Tumbnails : " + tumnails.size());
		boolean flag = false;
		for (int j = 1; j <= 5; j++) {
			for (int i = 1; i <= tumnails.size(); i++) {
				WebElement specificTumbnail = getWebDriver().findElement(

						By.xpath("(((((//div[@class='trayContentWrap']//div[@class='trayHeader']//h2[.='" + str
								+ "'])//parent::*//parent::*)//child::*[2])//child::*//div[@class='slick-track'])//child::*//div[@class='clickWrapper']//figure//a[@class='noSelect content '])["
								+ i + "]"));

				if (checkElementDisplayed(PWAHomePage.objLIVETVIsPremiumTumbnail(str, i), "Premium") == true) {
					System.out.println("premium Tumbnail");

					ValueOfPremiumTumbnail = getAttributValue("title", PWAHomePage.objLIVETvTumbnailTitle(str, i));
					System.out.println("Premium LIVETV Tumbnail Title : " + ValueOfPremiumTumbnail);
					if (premiumORfree.equals("PREMIUM")) {
						clickByElement(specificTumbnail, "Specific Tumbnail from Premium");
						flag = true;
						break;
					}
				} else if (checkElementDisplayed(PWAHomePage.objLIVETVIsPremiumTumbnail(str, i), "Premium") == false) {
					System.out.println("No premium Tumbnail");
					ValueOfPremiumTumbnail = getAttributValue("title", PWAHomePage.objLIVETvTumbnailTitle(str, i));
					System.out.println("Non-Premium LIVETV Tumbnail Title : " + ValueOfPremiumTumbnail);
					if (premiumORfree.equals("FREE")) {
						clickByElement(specificTumbnail, "Specific Tumbnail from Free");
						flag = true;
						break;
					}
				}
			}
			if (flag == true) {
				break;
			}
			swipeLIVETVTumbnailToLeft(str);
		}
		return ValueOfPremiumTumbnail;
	}

	public void PremiumFreeZeeOriginalKaltura(String Value, String userType) throws Exception {
		// Thread.sleep(10000);
		if (checkElementDisplayed(PWAHomePage.objKalturaGetPremium, "Get Premium") == true) {
			System.out.println("Navigated to Title : " + getText(PWAHomePage.objKalturaGetPremiumCardTitle));
			extent.extentLogger("Navigated to Title : " + getText(PWAHomePage.objKalturaGetPremiumCardTitle),
					"Navigated to Title : " + getText(PWAHomePage.objKalturaGetPremiumCardTitle));
			waitTime(5000);
			click(PWAHomePage.objKalturaPremiumContentImg, "Play Button");
			waitTime(8000);
			waitTime(5000);
			if (userType.equals("Guest")) {
				if (checkElementDisplayed(PWAPlayerPage.objWEBCloseBtnLoginPopup,
						"Register popup close button") == true) {
					click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				}
			}
//
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
					checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link");
				}
			}
			waitTime(5000);
			if (checkElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
				extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");

				if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
					if (checkElementDisplayed(PWAPlayerPage.objAd, "AD")) {
						waitForPlayerAdToComplete("Video Player");
					}
				}
				if (BROWSER.equals("Chrome")) {
					pausePlayer();

				} else {
					firefoxpause();
				}
				if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
					System.out.println("Video is playing");
					extent.extentLogger("User is able to play video", "User is able to play video");
					logger.info("User is able to play video");
				} else {
					System.out.println("Video is not playing");
					extent.extentLoggerFail("Playback video failed", "Playback video failed");
					logger.info("Video playback failed");
				}

			} else {
				extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
			}
			System.out.println("Playing Episode : " + getText(PWAHomePage.objKalconsumptionMetaDiv));
			System.out.println("Type :" + getText(PWAHomePage.objKalconsumptionMetainfo));
		} else if (checkElementDisplayed(PWAHomePage.objKalGetFirstEpisode, "Get First Episode") == true) {
			System.out.println("Navigated to Title : " + getText(PWAHomePage.objKalGetTitle));
			extent.extentLogger("Navigated to Title : " + getText(PWAHomePage.objKalGetTitle),
					"Navigated to Title : " + getText(PWAHomePage.objKalGetTitle));
			waitTime(5000);
			click(PWAHomePage.objKalGetFirstEpisodePlayicon, "Play Button");
			waitTime(8000);
			waitTime(5000);
			if (userType.equals("Guest")) {
				if (checkElementDisplayed(PWAPlayerPage.objWEBCloseBtnLoginPopup,
						"Register popup close button") == true) {
					click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				}
			}
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
					checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link");
				}
			}
			waitTime(5000);
			if (checkElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
				extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");

				if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
					if (checkElementDisplayed(PWAPlayerPage.objAd, "AD")) {
						waitForPlayerAdToComplete("Video Player");
					}
				}
				if (BROWSER.equals("Chrome")) {
					pausePlayer();

				} else {
					firefoxpause();
				}
				if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
					System.out.println("Video is playing");
					extent.extentLogger("User is able to play video", "User is able to play video");
					logger.info("User is able to play video");
				} else {
					System.out.println("Video is not playing");
					extent.extentLoggerFail("Playback video failed", "Playback video failed");
					logger.info("Video playback failed");
				}

			} else {
				extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
			}
			System.out.println("Playing Episode : " + getText(PWAHomePage.objKalconsumptionMetaDiv));
			System.out.println("Type :" + getText(PWAHomePage.objKalconsumptionMetainfo));
		} else { // MOVIE
			waitTime(8000);
			waitTime(5000);
			if (userType.equals("Guest")) {
				if (checkElementDisplayed(PWAPlayerPage.objWEBCloseBtnLoginPopup,
						"Register popup close button") == true) {
					click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				}
			}
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
					checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link");
				}
			}
			// FOR MOVIE
			if (checkElementDisplayed(PWAHomePage.objPlaybackMovieTitle(Value), "Title") == true) {
				System.out.println("Navigated to Title : " + getText(PWAHomePage.objPlaybackMovieTitle(Value)));
				extent.extentLogger("Navigated to Title : " + getText(PWAHomePage.objPlaybackMovieTitle(Value)),
						"Navigated to Title : " + getText(PWAHomePage.objPlaybackMovieTitle(Value)));
				if (checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link") == true) { // guest
																													// or
																													// nonsubscribed
					waitTime(5000);
					if (checkElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
						extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");

						if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
							if (checkElementDisplayed(PWAPlayerPage.objAd, "AD")) {
								waitForPlayerAdToComplete("Video Player");
							}
						}
						if (BROWSER.equals("Chrome")) {
							pausePlayer();

						} else {
							firefoxpause();
						}
						if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
							System.out.println("Video is playing");
							extent.extentLogger("User is able to play video", "User is able to play video");
							logger.info("User is able to play video");
						} else {
							System.out.println("Video is not playing");
							extent.extentLoggerFail("Playback video failed", "Playback video failed");
							logger.info("Video playback failed");
						}

					} else {
						extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
					}
					System.out.println("Playing Movie: " + getText(PWAHomePage.objKalconsumptionMetaDiv));
					System.out.println("Type :" + getText(PWAHomePage.objKalconsumptionMetainfo));
				} else { // subscribed
					waitTime(5000);
					if (checkElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
						extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");

						if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
							if (checkElementDisplayed(PWAPlayerPage.objAd, "AD")) {
								waitForPlayerAdToComplete("Video Player");
							}
						}
						if (BROWSER.equals("Chrome")) {
							pausePlayer();

						} else {
							firefoxpause();
						}
						if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
							System.out.println("Video is playing");
							extent.extentLogger("User is able to play video", "User is able to play video");
							logger.info("User is able to play video");
						} else {
							System.out.println("Video is not playing");
							extent.extentLoggerFail("Playback video failed", "Playback video failed");
							logger.info("Video playback failed");
						}

					} else {
						extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
					}
					System.out.println("Playing Movie: " + getText(PWAHomePage.objKalconsumptionMetaDiv));
					System.out.println("Type :" + getText(PWAHomePage.objKalconsumptionMetainfo));
				}
			}
			// FOR LIVETV
			if (checkElementDisplayed(PWAHomePage.objPlaybackLIVETVTitle1, "LiveTV title") == true) {
				System.out.println("Navigated to Title : " + getText(PWAHomePage.objPlaybackLIVETVTitle1));
				extent.extentLogger("Navigated to Title : " + getText(PWAHomePage.objPlaybackLIVETVTitle1),
						"Navigated to Title : " + getText(PWAHomePage.objPlaybackLIVETVTitle1));
				if (checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link") == true) { // guest
																													// or
																													// nonsubscribed
					waitTime(5000);
					if (checkElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
						extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");

						if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
							if (checkElementDisplayed(PWAPlayerPage.objAd, "AD")) {
								waitForPlayerAdToComplete("Video Player");
							}
						}
						if (BROWSER.equals("Chrome")) {
							pausePlayer();

						} else {
							firefoxpause();
						}
						if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
							System.out.println("Video is playing");
							extent.extentLogger("User is able to play video", "User is able to play video");
							logger.info("User is able to play video");
						} else {
							System.out.println("Video is not playing");
							extent.extentLoggerFail("Playback video failed", "Playback video failed");
							logger.info("Video playback failed");
						}

					} else {
						extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
					}
					System.out.println("Playing : " + getText(PWAHomePage.objKalLivetvPlaying));
					System.out.println("Channel :" + getText(PWAHomePage.objKalLivetvChannel));
				} else { // subscribed
					waitTime(5000);
					if (checkElementDisplayed(PWAHomePage.objKalKalturaPlayer, "Kaltura Player")) {
						extent.extentLogger("Navigated to Kaltura Player", "Navigated to Kaltura Player");

						if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
							if (checkElementDisplayed(PWAPlayerPage.objAd, "AD")) {
								waitForPlayerAdToComplete("Video Player");
							}
						}
						if (BROWSER.equals("Chrome")) {
							pausePlayer();
						} else {
							firefoxpause();
						}
						if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
							System.out.println("Video is playing");
							extent.extentLogger("User is able to play video", "User is able to play video");
							logger.info("User is able to play video");
						} else {
							System.out.println("Video is not playing");
							extent.extentLoggerFail("Playback video failed", "Playback video failed");
							logger.info("Video playback failed");
						}

					} else {
						extent.extentLoggerFail("Not Navigated to Kaltura Player", "Not Navigated to Kaltura Player");
					}
					System.out.println("Playing : " + getText(PWAHomePage.objKalLivetvPlaying));
					System.out.println("Channel :" + getText(PWAHomePage.objKalLivetvChannel));
				}
			}
		}
		waitTime(3000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register popup close button") == true) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
			}
		}
		Thread.sleep(3000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
		}
		try {
			// click(By.xpath("//div[@class='zeeLogo noSelect']//child::*"), "Zee Logo");
			getWebDriver().get(URL);
		} catch (Exception e) {
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				if (checkElementDisplayed(PWAPlayerPage.objWEBCloseBtnLoginPopup,
						"Register popup close button") == true) {
					click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
				}
			}
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
					checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeNowLink, "Subscription Link");
				}
			}
			click(By.xpath("//div[@class='zeeLogo noSelect']//child::*"), "Zee Logo");
		}
		waitTime(3000);
	}

	public void checkDurationandProgressVideo(String userType) throws Exception {
		extent.HeaderChildNode("checkDurationandProgressVideo");
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie4");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(4000);
		JSClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(5000);
		mandatoryRegistrationPopUp(userType);

		checkElementDisplayed(PWASearchPage.objFirstAssetImgSearchNavigationTab, "Searched result");
		JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, "First Searched result");

		Thread.sleep(10000);
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Why Register Popup") == true) {
				click(PWAPlayerPage.objCloseBtn, "Close Register Popup");
			}
		}
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		// Content elapsed time should update with the content playback
		if (userType.equals("Guest")) {
			String currentDuration = getText(PWAPlayerPage.objcurrenttime);
			System.out.println("Current time: " + currentDuration);
		} else {
			String currentDuration = getText(PWAPlayerPage.objcurrenttime);
			System.out.println("Elapsed time: " + currentDuration);
		}
		String totalDuration = getText(PWAPlayerPage.objtotaltime);
		System.out.println("Total time: " + totalDuration);
		String progress = null;
		if (checkElementDisplayed(PWAPlayerPage.objprogressBar, "ProgressBar")) {
			progress = getAttributValue("style", PWAPlayerPage.objprogressProgress);
			System.out.println("Progress : " + progress);
		}
		Thread.sleep(5000);
		verifyElementPresentAndClick(PWAPlayerPage.forward10SecBtn, "10 sec forward");
		verifyElementPresentAndClick(PWAPlayerPage.playBtn, "Play button");
		// Waiting for some time
		Thread.sleep(10000);
		Thread.sleep(10000);
		System.out.println("Waited for 5 sec");
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		String currentDuration1 = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time: " + currentDuration1);
		String totalDuration1 = getText(PWAPlayerPage.objtotaltime);
		System.out.println("Total time: " + totalDuration1);
		String progress1 = getAttributValue("style", PWAPlayerPage.objprogressProgress);
		System.out.println("Progress : " + progress1);
		// Validate the availability and functionality of progress bar button
		if (!progress.equals(progress1)) {
			System.out.println("Progress Bar is functional");
			extent.extentLogger("Progress Bar is functional", "Progress Bar is functional");
			logger.info("Progress Bar is functional");
		} else {
			System.out.println("Progress Bar is not functional");
			extent.extentLoggerFail("Progress Bar is not functional", "Progress Bar is not functional");
			logger.info("Progress Bar is not functional");
		}
	}

	public void swipeLIVETVTumbnailToLeft(String str) throws InterruptedException {
		try {
			WebElement sourceLocator = getWebDriver().findElement(
					By.xpath("(((((((//div[@class='trayContentWrap']//div[@class='trayHeader']//h2[.='" + str
							+ "']))//parent::*//parent::*)//child::*[2])//child::*//div[@class='slick-track'])//child::*//div[@class='clickWrapper']//figure//div[@class='noSelect content'])[3])"));
			WebElement targetLocator = getWebDriver().findElement(
					By.xpath("(((((((//div[@class='trayContentWrap']//div[@class='trayHeader']//h2[.='" + str
							+ "']))//parent::*//parent::*)//child::*[2])//child::*//div[@class='slick-track'])//child::*//div[@class='clickWrapper']//figure//div[@class='noSelect content'])[2])"));
			Thread.sleep(4000);
			Actions action = new Actions(getWebDriver());
			action.dragAndDrop(sourceLocator, targetLocator).build().perform();
		} catch (Exception e) {
			System.out.println("No trays to swipe");
		}
	}

	/**
	 * ================================SUSHMA
	 * MoviePage==================================
	 *
	 */

	public void Moviepage(String usertype, String Tabname) throws Exception {

		landingPagesValidationMovie(Tabname, usertype);
		landingPagesTrailerAndPopUpValidationMovie(usertype, Tabname);
		trayTitleAndContentValidationWithApiDataMovie(Tabname, "movies");
		premiumAndFreeMovie(usertype, Tabname);

	}

	public void landingPagesValidationMovie(String tabName, String userType) throws Exception {
		String TCID = null;
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0110";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0122";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0116";
		extent.HeaderChildNode(TCID+ "Verify whether user is able to navigate Movie landing page when user tap on Movie from Categories listed in Home page and it is highlighted.");
		//extent.HeaderChildNode(tabName + " Page Validation");
		navigateToAnyScreenOnWeb(tabName);
		waitTime(3000);
		if (checkElementDisplayed(PWAHomePage.objActiveTab, "Active tab")) {
			String tab = getText(PWAHomePage.objActiveTab);
			System.out.println(tab);
			logger.info(tab + " tab is highlighted");
			extent.extentLogger("Tab", tab + " tab is highlighted");
		} else {
			logger.error(tabName + " tab is not highlighted");
			extent.extentLoggerFail("Tab", tabName + " tab is highlighted");
		}

/*		// check if tray is loaded
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0113";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0125";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0119";
		extent.HeaderChildNode(TCID+ "Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation("Movies");*/

		// partialScrollDown();

		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");

		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");

		}

		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0114";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0126";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0120";
		extent.HeaderChildNode(TCID + "Verify the \" More\" option given on tray right side top and functionality of More");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");

			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}

		Back(1);

		waitTime(2000);

		for (int i = 0; i < 5; i++) {
			if (findElements(PWAPremiumPage.objMinuteContent).size() > 0) {
				logger.info("Minute content is displayed");
				extent.extentLogger("Minute content", "Minute content is displayed");
				break;

			} else {
				logger.info("Minute content is not displayed");
				extent.extentLogger("Minute content", "Minute content is not displayed");
				partialScrollDown();
			}

		}

//		dismissDisplayContentLanguagePopUp();
		waitTime(5000);
		partialScrollDown();
		partialScrollDown();
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0120";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0132";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0127";
		extent.HeaderChildNode(TCID + "Verify at right side bottom arrow is given to navigate top of screen without scrolling");
		Back_TO_TopArrow_Web(userType);

		for (int i = 0; i < 5; i++) {
			if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is displayed");
				break;

			} else {
				logger.info("Premium tag is not displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is not displayed");
				partialScrollDown();
			}

		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void landingPagesTrailerAndPopUpValidationMovie(String userType, String tabName) throws Exception {
		String TCID = null;
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0121";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0133";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0128";

		extent.HeaderChildNode(TCID + "Landing Page Carousel Validation");

		waitTime(5000);

		getWebDriver()
				.findElement(By.xpath("(//a[contains(@class,'noSelect')][contains(text(),'" + tabName + "')])[1]"))
				.click();
		waitTime(7000);
		// verifyElementPresentAndClick(PWAHomePage.objTabName(tabName), tabName);
		// waitTime(5000);
		waitForElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarousel, 10);
		checkElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card");
		mandatoryRegistrationPopUp(userType);
		click(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card");
		waitTime(5000);
		if (BROWSER.equals("Firefox")) {
			waitForPlayerLoaderToComplete();
		}
		if (checkElementDisplayed(PWAPlayerPage.objPlayer, "player screen")) {
			logger.info("User is navigated to consumption page after tapping on content in listed collection");
			extent.extentLogger("Consumption page",
					"User is navigated to consumption page after tapping on content in listed collection");
		}

		if (userType.contains("NonSubscribedUser") || (userType.contains("Guest"))) {

			if (checkElementDisplayed(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button")) {
				mandatoryRegistrationPopUp(userType);
				JSClick(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button");
				waitTime(10000);
				if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
					verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");

				}
			} else {
				logger.info("Trailer is not available for the selected content");
				extent.extentLogger("Trailer", "Trailer is not available for the selected content");
				if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
					verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");
				}
			}
		}
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0112";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0124";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0118";
		extent.HeaderChildNode(TCID + "Verify on Tap of 'Zee5' Logo user should navigate to homepage.");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void premiumAndFreeMovie(String userType, String Tab) throws Exception {
		String TCID = null;
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0123";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0135";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0129";
		extent.HeaderChildNode(TCID+ " Verifing movies premium content");
		navigateToAnyScreenOnWeb("Movies"); // changed
		// navigateToAnyScreenOnWeb("Movies");
		Actions actions = new Actions(getWebDriver());
		WebElement contentCard = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
		actions.moveToElement(contentCard).build().perform();

		waitForElementDisplayed(PWAMoviesPage.objPremiumContentCard, 30);
		checkElementDisplayed(PWAMoviesPage.objPremiumContentCard, "Premium Content");
		mandatoryRegistrationPopUp(userType);
		JSClick(PWAMoviesPage.objPremiumContentCard, "Premium Content");

		if (BROWSER.equals("Chrome")) {
			if(userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
				if (checkElementDisplayed(PWASubscriptionPages.objBuyPlanCTAAtConsumptionPage, "Buy Plan CTA")) {
					logger.info(
							"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
					extent.extentLoggerPass("Maximize icon",
							"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
				}
				else if(checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage, "You're watching a trailer")) {
					ScrubToPlayerEnd();
				}
			}
			else if(userType.equalsIgnoreCase("SubscribedUser")) {
				if (verifyElementPresent(PWAPlayerPage.objPlayerscreen, "Playback Overlay")) {
					waitTime(5000);
					moviePausePlayer();
					WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
					waitTime(2000);
					Actions move = new Actions(getWebDriver());
					Action action = (Action) move.dragAndDropBy(scrubber, 580, 0).build();
					action.perform();
					JSClick(PWAPlayerPage.objPlayerPlay, "Play icon");
				}
			}
		} else {
			waitForPlayerLoaderToComplete();
			if (verifyElementPresent(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay")) {
				firefoxpause();
				WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
				waitTime(10000);
				Actions move = new Actions(getWebDriver());
				Action action = (Action) move.dragAndDropBy(scrubber, 610, 0).build();
				action.perform();
				click(PWAPlayerPage.objPlayerPlay, "Play icon");
			}
		}

		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0124";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0136";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0131";
		// JSClick(PWAMoviesPage.objPremiumContentCard, "PremiumContent"); // changed
		extent.HeaderChildNode(TCID+ "Verifing that premium content videos in landscape mode");
		waitTime(15000);
		if (checkElementDisplayed(PWASubscriptionPages.objBuyPlanCTAAtConsumptionPage, "Buy Plan CTA")) {
//			verifyElementPresentAndClick(PWAPremiumPage.objClosePremiumPopup, "Premium PopUp Close icon");
			logger.info(
					"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
			extent.extentLogger("Maximize icon",
					"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
			Back(1);
		} else {
			waitTime(3000);
			// waitForPlayerAdToComplete2("Video Player");
			if (BROWSER.equals("Chrome")) {
				if (verifyElementPresent(PWAPlayerPage.objPlayerscreen, "Playback Overlay")) {
					moviePausePlayer();
				}
			} else {
				waitForPlayerLoaderToComplete();
				if (verifyElementPresent(PWAPlayerPage.objPlayerscreen, "Playback Overlay")) {
					firefoxpause();
				}
			}
			click(PWAPlayerPage.maximizeBtn, "Maximize icon");
			for (int i = 0; i < 5; i++) {
				if (checkElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize icon")) {
					if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
						logger.info("User is able to watch Trailer for premium content in landscape mode");
						extent.extentLogger("Landscape mode",
								"User is able to watch Trailer for premium content in landscape mode");
					} else {
						logger.info("User is able to watch premium content in landscape mode");
						extent.extentLogger("Landscape mode",
								"User is able to watch premium content in landscape mode");
					}
					waitTime(3000);
					click(PWAPlayerPage.minimizeBtn, "Minimize icon");
					break;
				} else {
					click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
				}
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			navigateToAnyScreenOnWeb("Movies");
			waitForElementDisplayed(PWAHomePage.objHighlightedTab("Movies"), 10);
		}
		waitTime(5000);
		extent.HeaderChildNode("Verifing free movie content");
		mandatoryRegistrationPopUp(userType);
//		System.out.println(chkPremiumORFreeFromVideosTabAndSelect("Free Movies", "FREE", userType));
//		if (!chkPremiumORFreeFromVideosTabAndSelect("Free Movies", "FREE", userType).equals("")) {
		if(swipeTillTrayAndClickFirstAsset(userType, 50, "Free Movies", "Free Movies tray", "Movies")) {
			waitTime(3000);
			if (userType.equalsIgnoreCase("Guest")) {
				if (checkElementDisplayed(PWAPlayerPage.objRegisterPopUp, "Register PopUp")) {
					verifyElementPresentAndClick(PWAPlayerPage.objCloseRegisterDialog, "Register popup close icon");
				}
			}
			if (userType.equalsIgnoreCase("Guest")) {
				if (checkElementDisplayed(PWAPlayerPage.objAdultView, "AdultContent")) {
					logger.info("Maximize icon is not displayed since the content is adult view");
					extent.extentLogger("Maximize icon",
							"Maximize icon is not displayed since the content is adult view");
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
				} else {
					waitForPlayerAdToComplete2("Video Player");
					if (BROWSER.equals("Chrome")) {
						moviePausePlayer();
					} else {
						if (verifyElementPresent(PWAPlayerPage.objPlayerscreen, "Playback Overlay")) {
							firefoxpause();
						}
					}
					extent.HeaderChildNode("Verifing free movie content in landscape");
					click(PWAPlayerPage.maximizeBtn, "Maximize icon");
					for (int i = 0; i < 5; i++) {
						if (checkElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize icon")) {
							logger.info("User is able to watch free content in landscape mode");
							extent.extentLogger("Landscape mode",
									"User is able to watch free content in landscape mode");
							waitTime(3000);
							click(PWAPlayerPage.minimizeBtn, "Minimize icon");
							break;
						} else {
							click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
						}
					}
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
				}
			} else if(userType.equalsIgnoreCase("NonSubscribedUser")) {
				waitForPlayerAdToComplete2("Video Player");
				if (BROWSER.equals("Chrome")) {
					moviePausePlayer();
				} else {
					if (verifyElementPresent(PWAPlayerPage.objPlayerscreen, "Playback Overlay")) {
						firefoxpause();
					}
				}
				extent.HeaderChildNode("Verifing free movie content in landscape");
				click(PWAPlayerPage.maximizeBtn, "Maximize icon");
				for (int i = 0; i < 5; i++) {
					if (checkElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize icon")) {
						logger.info("User is able to watch free content in landscape mode");
						extent.extentLogger("Landscape mode", "User is able to watch free content in landscape mode");
						waitTime(3000);
						click(PWAPlayerPage.minimizeBtn, "Minimize icon");
						break;
					} else {
						click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
					}
				}
			}
		} else {
			logger.info("No free movies displayed");
			extent.extentLoggerWarning("Landscape mode", "No free movies displayed");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/**
	 * Method to Pause the Player
	 */
	public boolean moviePausePlayer() throws InterruptedException {
		boolean playerPaused = false;
		for (int trial = 0; trial <= 4; trial++) {
			try {
				waitTime(3000);
				Actions actions = new Actions(getWebDriver());
				WebElement menuOption = getWebDriver().findElement(PWAPlayerPage.objPlaybackVideoOverlay);
				actions.moveToElement(menuOption).perform();
				click(PWAPlayerPage.objPlayerPause, "Player Pause");
				try {
					getWebDriver().findElement(PWAPlayerPage.playBtn);
					extent.extentLogger("playerPaused", "Paused the Player");
					logger.info("Paused the Player");
					playerPaused = true;
					break;
				} catch (Exception e) {
				}
			} catch (Exception e) {
				Thread.sleep(1000);
				if (trial == 4) {
					extent.extentLoggerFail("errorOccured", "Error when handling Player");
					logger.error("Error when handling Player");
				}
			}
		}
		return playerPaused;
	}

	/**
	 * Video Player or Live Player Ad verify
	 *
	 * @param playerType
	 * @throws Exception
	 */
	public void waitForPlayerAdToComplete2(String playerType) throws Exception {
		boolean adWasDisplayed = false;
		boolean playerDisplayed = false;
		int confirmCount = 0;
		main: for (int trial = 0; trial < 90; trial++) {
			try {
				getWebDriver().findElement(PWAPlayerPage.objAd);
				adWasDisplayed = true;
				if (trial == 5) {
					logger.info("Ad play in progress");
					extent.extentLogger("AdPlayInProgress", "Ad play in progress");
				}
				if (Math.floorMod(trial, 10) == 0)
					System.out.println("Ad play in progress");
				Thread.sleep(1000);
			} catch (Exception e) {
				try {
					if (playerType.equals("Live Player")) {
						getWebDriver().findElement(PWAPlayerPage.objLivePlayerLiveTag);
					} else if (playerType.equals("Video Player")) {
						if (BROWSER.equals("Chrome")) {
							click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
							checkElementDisplayed(PWAPlayerPage.maximizeBtn, "Maximize icon");
							click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
						} else {
							Actions actions = new Actions(getWebDriver());
							WebElement menuOption = getWebDriver()
									.findElement(By.xpath("//div[@class='playkit-overlay-action']"));
							actions.moveToElement(menuOption).perform();
							checkElementDisplayed(PWAPlayerPage.maximizeBtn, "Maximize icon");
						}
						// getWebDriver().findElement(PWAPlayerPage.maximizeBtn);
					}
					playerDisplayed = true;
					// Thread.sleep(1000);
					confirmCount++;
					if (confirmCount == 1) {
						if (adWasDisplayed == false) {
							logger.info("Ad did not play");
							extent.extentLogger("AdDidNotPlay", "Ad did not play");
						} else {
							logger.info("Ad play complete");
							extent.extentLogger("AdPlayComplete", "Ad play complete");
						}
						break main;
					}
				} catch (Exception e1) {
					Thread.sleep(1000);
				}
			}
		}
		if (playerDisplayed == false && adWasDisplayed == false) {
			logger.error("Ad play failure");
			extent.extentLoggerFail("failedAd", "Ad play failure");
		}
	}

	public String chkPremiumORFreeFromVideosTabAndSelect(String str, String premiumORfree, String usertype)
			throws Exception {
		boolean foundContent = false;
		ScrollToTheElementWEB(PWAMoviesPage.TextToXpath(str));
		waitTime(5000);
		String ValueOfPremiumTumbnail = null;
		int p = 0;
		extent.extentLogger("", "Checking availability of " + premiumORfree + " content");
		logger.info("Checking availability of " + premiumORfree + " content");
		main: for (int j = 0; j < 5; j++) {
			List<WebElement> tumnails = findElements(By.xpath("//div[@class='trayHeader']/child::h2[contains(text(),'"
					+ str
					+ "')]/parent::*/following-sibling::*/child::*/child::div/child::*/child::*/child::*/child::*/child::a/child::figure"));
			System.out.println("numberofThumnails:" + tumnails.size());
			for (int i = 1 + p; i <= tumnails.size(); i++) {
				System.out.println(i);
				WebElement specificTumbnail = getWebDriver()
						.findElement(By.xpath("(//div[@class='trayHeader']/child::h2[contains(text(),'" + str
								+ "')]/parent::*/following-sibling::*/child::*/child::div/child::*/child::*/child::*/child::*/child::a/child::figure)["
								+ i + "]"));
				boolean elevisibility = checkElementDisplayed(PWAHomePage.objVideoIsPremiumTumbnail(str, i),
						"Premium Card");
				if (elevisibility == true) {
					ValueOfPremiumTumbnail = getAttributValue("title", PWAHomePage.objVideoTumbnailTitle(str, i));
					System.out.println("Premium Tumbnail Title : " + ValueOfPremiumTumbnail);
					if (premiumORfree.equals("PREMIUM")) {
						clickByElement(specificTumbnail, "Specific Tumbnail from Premium");
						foundContent = true;
						break main;
					}
				} else if (elevisibility == false) {
					ValueOfPremiumTumbnail = getAttributValue("title", PWAHomePage.objVideoTumbnailTitle(str, i));
					System.out.println("Non-Premium Tumbnail Title : " + ValueOfPremiumTumbnail);
					if (premiumORfree.equals("FREE")) {
						clickByElement(specificTumbnail, "Specific Tumbnail from Non-Premium");
						foundContent = true;
						break main;
					}
				}
			}
			if (foundContent) {
				p = tumnails.size();
				getWebDriver().findElement(By.xpath("//div[@class='trayHeader']/child::h2[contains(text(),'" + str
						+ "')]/parent::*/following-sibling::*/child::*/child::button[@class='slick-arrow slick-next']"))
						.click();
				waitTime(3000);
				return ValueOfPremiumTumbnail;
			}
		}
		return "";
	}

	/**
	 * ================================BINDU
	 * Search==================================
	 *
	 */

	public void SearchResultsScreen(String UserType) throws Exception {

		switch (UserType) {
		case "Guest":
			extent.HeaderChildNode("Guest user");
			extent.extentLogger("Accessing as Guest User", "Accessing as Guest User");
			logger.info("Accessing as Guest User");
			landingOnSearchscreen();
//			MicrophoneVoiceInput();
			liveTvsearch("Republic TV");
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovie");
			movieSearchResults(keyword);
			PartlySpeltAsset("natasaa", UserType);
			MultipleKeywordsSearch("Natasarvabhowma Kannada Drama");
			LanguageSearch("Kannada");
			GenreSearch("Comedy");

			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("NonSubscribedUser");
			extent.extentLogger("Accessing as NonSubscribedUser User", "Accessing as NonSubscribedUser User");
			logger.info("Accessing as NonSubscribedUser User");
			landingOnSearchscreen();
//			MicrophoneVoiceInput();
			liveTvsearch("Republic TV");
			String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovie");
			movieSearchResults(keyword1);
			PartlySpeltAsset("Natasaa", UserType);
			MultipleKeywordsSearch("Natasarvabhowma Kannada Drama");
			LanguageSearch("Kannada");
			GenreSearch("Comedy");

			break;

		case "SubscribedUser":
			extent.HeaderChildNode("SubscribedUser");
			extent.extentLogger("Accessing as SubscribedUser User", "Accessing as SubscribedUser User");
			logger.info("Accessing as SubscribedUser User");
			landingOnSearchscreen();
//			MicrophoneVoiceInput();
			liveTvsearch("Republic TV");
			String keyword2 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovie");
			movieSearchResults(keyword2);
			PartlySpeltAsset("Natasaa", UserType);
			MultipleKeywordsSearch("Natasarvabhowma Kannada Drama");
			LanguageSearch("Kannada");
			GenreSearch("Comedy");
			searchemptystateScreen("Natasarvabhowma");
		}
	}

	public void landingOnSearchscreen() throws Exception {
		extent.HeaderChildNode("Validating that user lands on search landing screen");
		waitForElementDisplayed(PWAHomePage.objSearchBtn, 10);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		checkElementDisplayed(PWASearchPage.objVoiceSearchButton, "Voice seach icon");

		if (checkElementDisplayed(PWASearchPage.objSearchEditBox, "Search EditBox")) {
			logger.info("User landed on Search landing screen post tapping on search icon");
			extent.extentLogger("Search landingscreen",
					"User landed on Search landing screen post tapping on search icon");
		}
	}

	public void MicrophoneVoiceInput() throws Exception {
		extent.HeaderChildNode("Validating that user is asked to give the voice input post tapping on microphone icon");
		if (BROWSER.equals("Chrome")) {
			verifyElementPresentAndClick(PWASearchPage.objVoiceSearchButton, "Voice search icon");
			waitTime(2000);
			logger.info("Voice Search Icon is present in Chrome Browser and clicked on Voice Search Icon ");
			extent.extentLogger("Voice input",
					"Voice Search Icon is present in Chrome Browser and clicked on Voice Search Icon");

			Robot robot = new Robot();
			robot.keyPress(KeyEvent.VK_TAB);
			waitTime(2000);
			robot.keyPress(KeyEvent.VK_TAB);
			waitTime(2000);
			robot.keyPress(KeyEvent.VK_ENTER);

			waitTime(2000);
			click(PWASearchPage.objVoiceSearchButton, "Voice seach icon");
			String searchBarText = getAttributValue("placeholder", PWASearchPage.objSearchEditBox);
			logger.info("String displayed on search field :" + searchBarText);
			extent.extentLogger("", "String displayed on search field :" + searchBarText);
			if (searchBarText.equalsIgnoreCase("Speak to Search on ZEE5")) {
				logger.info("User is asked to give the voice input");
				extent.extentLogger("Voice input", "User is asked to give the voice input");
			} else {
				logger.error("User is not asked to give the voice input");
				extent.extentLoggerFail("Voice input", "User is not asked to give the voice input");
			}

		} else {
			logger.error("Voice Search Icon is not applicable for Firefox Browser");
			extent.extentLoggerFail("Voice Search icon", "Voice Search Icon is not applicable for Firefox Browser");
		}

		Back(1);
	}

	public void liveTvsearch(String title) throws Exception {
		extent.HeaderChildNode(
				"Validating that Live TV card is displayed when user searches by any On Going Live TV content name");
		waitTime(3000);

//		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
//		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);

		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}
		waitTime(10000);
		if (checkElementDisplayed(PWALiveTVPage.objLivelogo, "Live logo")) {
			logger.info("Live Channel card is displayed");
			extent.extentLogger("Live Channel card", "Live Tv card is displayed");
		} else {
			logger.info("Live Channel card is not displayed");
			extent.extentLogger("Live Channel card", "Live Tv card is not displayed");
		}
		waitTime(3000);
		click(PWALiveTVPage.objLivelogo, "Live logo");
		waitTime(3000);
		Back(2);
	}

	public void movieSearchResults(String title) throws Exception {

		extent.HeaderChildNode("Validating that user is able to search Movie");

		waitTime(4000);

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);

		type(PWASearchPage.objSearchEditBox, title, "Search bar");

		waitTime(3000);

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getWebDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getWebDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");

			if (getWebDriver().findElements(By.xpath(
					"(//div[@class='listingGrid']//div[@class='metaData']//h3[contains(@class,'cardTitle')]//span[@class='highLight'])"))
					.size() > 0) {
				logger.info("Related search results are displayed");
				extent.extentLogger("Related search results", "Related search results are displayed");

			} else {
				logger.info("Related search results are not displayed");
				extent.extentLogger("Related search results", "Related search results are not displayed");
			}
		}

//	verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
//
//	clearField(PWASearchPage.objSearchEditBox, "Search Bar");

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");

		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		Back(1);

	}

	public void PartlySpeltAsset(String title, String userType) throws Exception {
		extent.HeaderChildNode("Validating that user is able to search Partly spelt asset name");

		waitTime(6000);

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);
		mandatoryRegistrationPopUp(userType);
		type(PWASearchPage.objSearchEditBox, title, "Search bar");

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getWebDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getWebDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");

			if (getWebDriver().findElements(By.xpath(
					"(//div[@class='listingGrid']//div[@class='metaData']//h3[contains(@class,'cardTitle')]//span[@class='highLight'])"))
					.size() > 0) {
				logger.info("Related search results are displayed");
				extent.extentLogger("Partlyspelt Asset search results", "Related search results are displayed");

			} else {
				logger.info("Related search results are not displayed");
				extent.extentLogger("Related search results", "Related search results are not displayed");
			}
		}

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");

		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		Back(1);

	}

	public void MultipleKeywordsSearch(String title) throws Exception {
		extent.HeaderChildNode("Validating that user is able to search through MultipleKeywords");

		waitTime(3000);

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);

		type(PWASearchPage.objSearchEditBox, title, "Search bar");

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getWebDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getWebDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");

			if (getWebDriver()
					.findElements(
							By.xpath("//div[@class='clickWrapper']//div[@class='dateTime']//span[@class='items']"))
					.size() > 0)

			{
				waitTime(4000);
				logger.info("Related search results are displayed");
				extent.extentLogger("Related search Results", "Related search results are displayed");
			}

			else {
				logger.info("Related search results are not displayed");
				extent.extentLogger("Related search Results", "Related search  results are not displayed");
			}

		}

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");

		clearField(PWASearchPage.objSearchEditBox, "Search Bar");

		Back(1);

	}

	public void LanguageSearch(String language) throws Exception {
		extent.HeaderChildNode("Validating that user is able to search content by Language");

		waitTime(3000);

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);

		type(PWASearchPage.objSearchEditBox, language, "Search bar");

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getWebDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
//	 tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getWebDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");
			int k = 1;
			for (k = 1; k <= 3; k++) {
				List<WebElement> AssetMetadata = getWebDriver().findElements(
						By.xpath("(//div[@class='clickWrapper'])[" + k + "]/child::div[@class='dateTime']/child::*"));
				// System.out.println(AssetMetadata.size());

				for (int j = 1; j <= AssetMetadata.size(); j++) {
					String metadata = getWebDriver().findElement(By.xpath("((//div[@class='clickWrapper'])[" + k
							+ "]/child::div[@class='dateTime']/child::*)[" + j + "]")).getText();
					// System.out.println(metadata);
					if (metadata.contains(language)) {
						logger.info("User can search a content by language");
						extent.extentLogger("Language search", "User can search a content by language");
					}

				}
			}
		}

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");

		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		Back(1);

	}

	public void GenreSearch(String genre) throws Exception {
		extent.HeaderChildNode("Validating that user is able to search content by Genre");

		waitTime(3000);

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);

		type(PWASearchPage.objSearchEditBox, genre, "Search bar");

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getWebDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		// tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getWebDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			waitTime(4000);
			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");
			int k = 1;
			for (k = 1; k <= 3; k++) {
				List<WebElement> AssetMetadata = getWebDriver().findElements(
						By.xpath("(//div[@class='clickWrapper'])[" + k + "]/child::div[@class='dateTime']/child::*"));
				// System.out.println(AssetMetadata.size());

				for (int j = 1; j <= AssetMetadata.size(); j++) {
					String metadata = getWebDriver().findElement(By.xpath("((//div[@class='clickWrapper'])[" + k
							+ "]/child::div[@class='dateTime']/child::*)[" + j + "]")).getText();
					// System.out.println(metadata);
					if (metadata.contains(genre)) {
						logger.info("User can search a content by Genre");
						extent.extentLogger("Genre search", "User can search a content by Genre");
					}
				}
			}
		}
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		Back(1);
	}

//This method is only for Subscribed User
	public void searchemptystateScreen(String title) throws Exception {

		extent.HeaderChildNode("Validating that empty state screen is displayed");

		waitTime(3000);

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);

		type(PWASearchPage.objSearchEditBox, title, "Search bar");

		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);

		if (getPlatform().equals("Android")) {
			getDriver().hideKeyboard();
			logger.info("Hiding keyboard was Successfull");
			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
		}

		List<WebElement> tabs = getWebDriver().findElements(By.xpath("//div[contains(@class,'noSelect tabMenuItem')]"));
		tabs.size();
		for (int i = 1; i <= tabs.size(); i++) {
			WebElement eleTab = getWebDriver()
					.findElement(By.xpath("(//div[contains(@class,'noSelect tabMenuItem')])[" + i + "]"));
			String tabName = eleTab.getText();
			eleTab.click();

			logger.info(tabName + " tab is displayed and clicked on " + tabName + " tab");
			extent.extentLogger("Related search results",
					tabName + " tab is displayed and clicked on " + tabName + " tab");

			if (getWebDriver().findElements(By.xpath(
					"(//div[@class='listingGrid']//div[@class='metaData']//h3[contains(@class,'cardTitle')]//span[@class='highLight'])"))
					.size() > 0) {
				logger.info("Related search results are displayed");
				extent.extentLogger("Related search results", "Related search results are displayed");

			} else if (getWebDriver().findElements(By.xpath("//h3[contains(@class,'cardTitle')]")).size() > 0) {
				logger.info("Search results are displayed");
				extent.extentLogger("Search results", "Search results are displayed");
			} else {
				checkElementDisplayed(PWASearchPage.objEmptyStateScreenErrormsg, "Empty state screen");
			}
		}

		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");

		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
		Back(1);

	}

	/**
	 * ================================BINDU
	 * ZeeOriginals==================================
	 *
	 */

	public void Zee5OriginalsScreen(String UserType, String Tabname) throws Exception {

		switch (UserType) {

		case "Guest":
			landingPagesValidationZeeoriginals(Tabname);
			zee5originalstrayvalidation(Tabname);
			mandatoryRegistrationPopUp(UserType);
			extent.HeaderChildNode("Web Series page tray asset validation");
			trayTitleAndContentValidationWithApiDataZeeoriginals(Tabname, "zeeoriginals");
			ValidatingPremiumTag(Tabname);
			mandatoryRegistrationPopUp(UserType);
			ConsumptionScreen(Tabname);
			Subscriptionpopup(UserType, Tabname, "Top ZEE5 Web Series");
			break;

		case "NonSubscribedUser":
			landingPagesValidationZeeoriginals(Tabname);
			zee5originalstrayvalidation(Tabname);
			extent.HeaderChildNode("Web Series page tray asset validation");
			trayTitleAndContentValidationWithApiDataZeeoriginals(Tabname, "zeeoriginals");
			ValidatingPremiumTag(Tabname);
			mandatoryRegistrationPopUp(UserType);
			ConsumptionScreen(Tabname);
			Subscriptionpopup(UserType, Tabname, "Top ZEE5 Web Series");
			break;

		case "SubscribedUser":
			landingPagesValidationZeeoriginals(Tabname);
			zee5originalstrayvalidation(Tabname);
			extent.HeaderChildNode("Web Series page tray asset validation");
			trayTitleAndContentValidationWithApiDataZeeoriginals(Tabname, "zeeoriginals");
			ValidatingPremiumTag(Tabname);
			mandatoryRegistrationPopUp(UserType);
			ConsumptionScreen(Tabname);
			Subscriptionpopup(UserType, Tabname, "Top ZEE5 Web Series");
		}
	}

//public void dismissDisplayContentLanguagePopUp() throws Exception {
//		extent.HeaderChildNode("Dismiss Display and Content Language Pop Ups");
//		waitForElementAndClickIfPresent(PWAHomePage.objContinueDisplayContentLangPopup,90,"Continue on Display Language Pop Up");
//		Thread.sleep(5000);
//		waitForElementAndClickIfPresent(PWAHomePage.objContinueDisplayContentLangPopup,10,"Continue on Content Language Pop Up");
//	}

	public void landingPagesValidationZeeoriginals(String tabName) throws Exception {
		extent.HeaderChildNode("ZEE5 Originals Page Validation");
		navigateToAnyScreenOnWeb(tabName);
		waitTime(3000);
		if (verifyElementEnabled(PWAHomePage.objActiveTab, "Active tab")) {
			String tab = getText(PWAHomePage.objActiveTab);
			System.out.println(tab);
			logger.info(tab + " tab is highlighted");
			extent.extentLogger("Tab", tab + " tab is highlighted");
		} else {
			logger.error(tabName + " tab is not highlighted");
			extent.extentLoggerFail("Tab", tabName + " tab is not highlighted");
		}

		waitTime(3000);
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");

		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");

		}

		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");

		waitTime(3000);
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");

			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}

		}

		Back(1);

		waitTime(2000);

		for (int i = 0; i < 5; i++) {
			if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is displayed");
				break;

			} else {
				logger.info("Premium tag is not displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is not displayed");
				partialScrollDown();
			}

		}

		waitTime(2000);

		for (int i = 0; i < 5; i++) {
			if (findElements(PWAPremiumPage.objMinuteContent).size() > 0) {
				logger.info("Minute content is displayed");
				extent.extentLogger("Minute content", "Minute content is displayed");
				break;

			} else {
				logger.info("Minute content is not displayed");
				extent.extentLogger("Minute content", "Minute content is not displayed");
				partialScrollDown();
			}

		}

		waitTime(2000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Back To Top Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Back To Top Arrow icon");
		}

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void trayTitleAndContentValidationWithApiDataZeeoriginals(String Tabname, String api) throws Exception {
		navigateToAnyScreenOnWeb(Tabname);
		String languageSmallText = allSelectedLanguagesWEB();
		System.out.println(languageSmallText);
		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		logger.info("The Title of the Tray is " + Tray_Title + "");
		extent.extentLogger("Metadata", "The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
		partialScrollDown();
		Actions actions = new Actions(getWebDriver());
		for (int i = 0; i < 5; i++) {
			String title = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			logger.info("Api data : " + title);
			extent.extentLogger("", "Api data : " + title);
			apiTitleList.add(title);
			waitTime(6000);
			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("(//div[@class='slick-list']//div[@class='content'])[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();
			String trayTitle = apiTitleList.get(i);
			logger.info("UI data " + trayTitle);

			if (trayTitle.equalsIgnoreCase(title)) {
				logger.info("Metadata on the content card is validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is validated with Api data");
			} else {
				logger.error("Metadata on the content card is not validated with Api data");
				extent.extentLoggerFail("Metadata", "Metadata on the content card is not validated with Api data");
			}
			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Button");
			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Button");

		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void ValidatingPremiumTag(String Tabname) throws Exception {
		extent.HeaderChildNode("Validating Promo of the Premium Content ");

		navigateToAnyScreenOnWeb(Tabname);
		waitTime(3000);

//		for(int i=0;i<5;i++){
//			if (findElements(PWAMusicPage.objPremiumTag).size() > 0)
//			{
//				logger.info("Premium tag is displayed");
//				extent.extentLogger("Premium Tag", "Premium Tag is displayed");
//				break;
//
//			}
//			else
//			{
//				logger.info("Premium tag is not displayed");
//				extent.extentLoggerFail("Premium Tag", "Premium Tag is not displayed");
//				//PartialSwipe("UP",1);
//				JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
//			    jse.executeScript("window.scrollTo(0, 300)");
//
//			}
//
//		}

		waitTime(4000);
		if (checkElementDisplayed(PWAZee5OriginalPage.objPremiumCard, "Premium Card"))

		{

			click(PWAZee5OriginalPage.objPremiumCard, "Premium card");
			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Register popup")) {
				waitTime(3000);
				click(PWAPlayerPage.objCloseRegisterDialog, "Register popup close icon");
			}
			if (checkElementDisplayed(CompleteYourProfilePopUp.objCompleteYourProfileTxt,
					"Complete Your Profile pop up")) {
				click(CompleteYourProfilePopUp.objCloseBtn, "Close Button");

			}

			if (checkElementDisplayed(PWAPlayerPage.objWatchPromo, "Watch Promo icon")) {

				click(PWAPlayerPage.objWatchPromo, "Watch Promo icon");
				waitTime(2000);
				checkElementDisplayed(PWAPlayerPage.objPlayerPromoMetadata, "Promo Content");
				logger.info("User can able to watch Promo from the selected content");
				extent.extentLogger("Popup Screen", "User can able to watch Promo from the selected content");
				Back(1);
			}

			Back(1);
		}

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void ConsumptionScreen(String Tabname) throws Exception {
		extent.HeaderChildNode("Validation of the Consumption Screen with content autoplaying");

		navigateToAnyScreenOnWeb(Tabname);
		Thread.sleep(4000);
		verifyElementPresentAndClick(PWAZee5OriginalPage.objCarousel, "Carousel Card");

		if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Why Register popup")) {
			waitTime(3000);
			click(PWAPlayerPage.objCloseRegisterDialog, "Register popup close icon");
		}

		if (checkElementDisplayed(PWAPlayerPage.objSubscriptionpopup, "Subscription popup")) {
			waitTime(3000);
			click(PWAPlayerPage.ObjSubscriptionpopupCloseIcon, "Subscription popup close icon");
		}
		if (checkElementDisplayed(CompleteYourProfilePopUp.objCompleteYourProfileTxt, "Complete Your Profile pop up")) {
			click(CompleteYourProfilePopUp.objCloseBtn, "Complete your profile popup Close Button");

		}

		waitTime(3000);

		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "User is navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "User is not navigated to Consumption Page");
		}

		Back(1);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void zeePWAVerifySubscriptionPopUpAfterTwentySecondsPlayback(String userType) throws Exception {
		HeaderChildNode("Verify Subscription popup after trailer is played");
		System.out.println("Verify Subscription popup after trailer is played");
		click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieWithTrailer");
			zeeSearchForContentAndClickOnFirstResult(keyword);
			waitForElement(PWASubscriptionPages.objGetPremiumPopupTitle, 21, "Subscribe Pop Up");
			if (verifyElementPresent(PWASubscriptionPages.objGetPremiumPopupTitle, "Subscribe Pop Up")) {
				click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close button");
			}
		}
	}

	@SuppressWarnings("rawtypes")
	public void playerTap() throws Exception {

		if (getPlatform().equalsIgnoreCase("Android")) {
			int deviceWidth = getDriver().manage().window().getSize().width;
			int deviceHeight = getDriver().manage().window().getSize().height;
			int x = deviceWidth / 2;
			int y = deviceHeight / 4;
			TouchAction act = new TouchAction(getDriver());
			act.tap(PointOption.point(x, y)).perform();
			extent.extentLogger("playerTap", "Tapped on the Player");
			logger.info("Tapped on the Player");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			Actions action = new Actions(getWebDriver());
			action.moveToElement(findElement(PWAPlayerPage.objPlaybackVideoOverlay));
			action.perform();
		}

	}

	public void wouldYouLikeToPopupClose() throws Exception {
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
	}

	/**
	 * ====================SATISH - UserActions==========================
	 *
	 */

	public void AddContentsToWatchList() throws Exception {

		// Adding Episodes to Watch list
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		// Enter an episode
		type(PWASearchPage.objSearchEditBox, "Grand Premiere - Comedy Khiladigalu Season 3", "Search edit box");
		waitTime(3000);
		type(PWASearchPage.objSearchEditBox, " ", "Search bar");
		waitTime(5000);
		// Click on the first episode
		click(PWASearchPage.objFirstContentCardNameAfterSearch1(1), "Episode");
		waitTime(3000);
		if (checkElementDisplayed(PWAAddToWatchListPage.objCompleteProfilePopUp, "Complete profile Popup") == true) {
			click(PWAAddToWatchListPage.objClosePopup, "Close button");
		}
		// Click on Add to watch list
		click(PWAPlayerPage.watchListBtn, "Add to Watch list");
		wouldYouLikeToPopupClose();
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		// Enter an episode
		type(PWASearchPage.objSearchEditBox, "Everyone delighted about Adya's pregnancy - Gattimela",
				"Search edit box");
		waitTime(3000);
		type(PWASearchPage.objSearchEditBox, " ", "Search bar");
		waitTime(5000);
		wouldYouLikeToPopupClose();
		// Click on the first episode
		click(PWASearchPage.objFirstContentCardNameAfterSearch1(1), "Episode");
		if (checkElementDisplayed(PWAAddToWatchListPage.objCompleteProfilePopUp, "Complete profile Popup") == true) {
			click(PWAAddToWatchListPage.objClosePopup, "Close button");
		}
		waitTime(3000);
		// Click on Add to watch list
		click(PWAPlayerPage.watchListBtn, "Add to Watch list");
		wouldYouLikeToPopupClose();
		// Adding movies to Watch list
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		// Enter a movie
		type(PWASearchPage.objSearchEditBox, "Ee Preethi Yeke Bhoomi Melide", "Search edit box");
		waitTime(3000);
		type(PWASearchPage.objSearchEditBox, " ", "Search bar");
		wouldYouLikeToPopupClose();
		waitTime(5000);
		// Click on the first Movie
		click(PWASearchPage.objFirstContentCardNameAfterSearch1(1), "Movie");
		if (checkElementDisplayed(PWAAddToWatchListPage.objCompleteProfilePopUp, "Complete profile Popup") == true) {
			click(PWAAddToWatchListPage.objClosePopup, "Close button");
		}
		waitTime(3000);
		// Click on Add to watch list
		click(PWAPlayerPage.watchListBtn, "Add to Watch list");

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		// Enter a Movie
		type(PWASearchPage.objSearchEditBox, "doddmane hudga", "Search edit box");
		waitTime(3000);
		type(PWASearchPage.objSearchEditBox, " ", "Search bar");
		wouldYouLikeToPopupClose();
		waitTime(5000);
		// Click on the Movie
		click(PWASearchPage.objFirstContentCardNameAfterSearch1(1), "Movie");
		if (checkElementDisplayed(PWAAddToWatchListPage.objCompleteProfilePopUp, "Complete profile Popup") == true) {
			click(PWAAddToWatchListPage.objClosePopup, "Close button");
		}
		waitTime(3000);
		// Click on Add to watch list
		click(PWAPlayerPage.watchListBtn, "Add to Watch list");

		// Adding Video clip
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		// Enter a Video clip
		type(PWASearchPage.objSearchEditBox, "Gravitas: Why are Sweden-China ties turning hostile?", "Search edit box");
		waitTime(3000);
		type(PWASearchPage.objSearchEditBox, " ", "Search bar");
		waitTime(5000);
		// Click on the first Video
		click(PWASearchPage.objFirstContentCardNameAfterSearch1(1), "Video clip");
		waitTime(3000);
		// Click on Add to watch list
		click(PWAPlayerPage.watchListBtn, "Add to Watch list");
		wouldYouLikeToPopupClose();
		// click on home page
		click(PWAHomePage.objTabName("Home"), "Home tab");
		if (checkElementDisplayed(PWAAddToWatchListPage.objCloseBtnForVideoClipPopup, "Pop up") == true) {
			click(PWAAddToWatchListPage.objCloseBtnForVideoClipPopup, "Close button");
		}
	}

	/*
	 * My Reminder section for subscribed user
	 */
	public void MyReminder() throws Exception {
		extent.HeaderChildNode("MyReminder Scenarios Validations");
		// Verify user is navigate to EPG section from Live TV
		if (getPlatform().equalsIgnoreCase("Android")) {
			navigateToAnyScreen("Live TV");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			navigateToAnyScreenOnWeb("Live TV");
		}
		wouldYouLikeToPopupClose();
		// Click on Channel guide
		click(PWALiveTVPage.objChannelGuideToggle, "Channel Guide");
		if (findElement(PWALiveTVPage.objChannelGuideToggle).getAttribute("class").contains("active")) {
			extent.extentLogger("Verify Navigation", "User is navigated to EPG section post tapping Channel guide");
			logger.info("User is navigated to EPG section post tapping Channel guide");
		} else {
			extent.extentLoggerFail("Verify Navigation",
					"User did not navigated to EPG section post tapping Channel guide");
			logger.info("User did not navigated to EPG section post tapping Channel guide");
		}

		// Verify EPG section contains Title and the description of the respective show
		waitTime(5000);
		if (verifyElementPresent(PWALiveTVPage.objShowTitle, "Show title") == true) {
			String title = getElementPropertyToString("innerText", PWALiveTVPage.objShowTitle, "Show title");
			extent.extentLogger("Verify Show title", "The show tile is displayed and the show title is : " + title);
			logger.info("The show tile is displayed and the show title is : " + title);
		} else {
			extent.extentLoggerFail("Verify Show title", "The show tile is not displayed");
			logger.info("The show tile is not displayed");
		}
		// click on any show
		click(PWALiveTVPage.objFutureChannelInfo, "Show");
		if (checkElementDisplayed(PWALiveTVPage.objShowDesc, "Show description") == true) {
			extent.extentLogger("Verify descrption of the show", "The description of the show is :"
					+ getElementPropertyToString("innerText", PWALiveTVPage.objShowDesc, "Show title"));
			logger.info("The description of the show is :"
					+ getElementPropertyToString("innerText", PWALiveTVPage.objShowDesc, "Show title"));
		} else {
			extent.extentLoggerFail("Verify descrption of the show", "Show description is not displayed");
			logger.info("Show description is not displayed");
		}
		// Click on close button
		click(PWALiveTVPage.objPopupCloseButton, "Close button");
		// Click on date
		click(PWALiveTVPage.objTomorrowDate, "Tomorrow date");
		FilterLanguage("Bengali");
		// Verify Share and Reminder option is available
		click(PWALiveTVPage.objBanglaShow1, "Show detail");
		verifyElementPresent(PWALiveTVPage.objShareOption, "Share option");
		verifyElementPresent(PWALiveTVPage.objRemainderButton, "Reminder option for upcoming show ");

		// Verify user can click on Reminder option
		// click on Reminder option
		click(PWALiveTVPage.objRemainderButton, "Reminder option");
		if (getWebDriver().findElement(PWALiveTVPage.objRemainderButton).getAttribute("class")
				.contains("btnIconActive")) {
			extent.extentLogger("Verify user can Click on Reminder option", "User can click on Reminder option");
			logger.info("User can click on Reminder option");
		} else {
			softAssert.assertAll();
			extent.extentLoggerFail("Verify user can Click on Reminder option",
					"User can not click on Reminder option");
			logger.info("User can not click on Reminder option");
		}

		// Click on close button
		click(PWALiveTVPage.objPopupCloseButton, "Close button");
		waitTime(3000);
		scrollToTopOfPageWEB();
		FilterLanguage("Kannada");
		waitTime(3000);
		if (getPlatform().equalsIgnoreCase("Android")) {
			Swipe("Up", 1);
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			scrollUp();
		}
		waitTime(3000);
		// Verify user can not add Movies to Reminder
		// Select any movie
		click(PWALiveTVPage.objMovieShow, "Movie show");
		if (checkElementDisplayed(PWALiveTVPage.objRemainderButton, "Reminder button") == false) {
			extent.extentLogger("Verify Movie show don't have Reminder option",
					"Reminder option is not available for Movie show");
			logger.info("Reminder option is not available for Movie show");
		} else {
			extent.extentLoggerFail("Verify Movie show don't have Reminder option",
					"Reminder option is available for Movie show");
			logger.info("Reminder option is available for Movie show");

		}
		// Click on close button
		click(PWALiveTVPage.objPopupCloseButton, "Close button");

		if (getPlatform().equalsIgnoreCase("Android")) {
			Swipe("Down", 1);
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			scrollDownWEB();
		}
		getWebDriver().navigate().refresh();
		click(PWALiveTVPage.objTomorrowDate, "Tomorrow date");
		FilterLanguage("Malayalam");
		// Select any show to add Reminder
		waitTime(2000);
		click(PWALiveTVPage.objMalayalamShow, "Show ");
		// Click on Reminder
		click(PWALiveTVPage.objRemainderButton, "Reminder");
		click(PWALiveTVPage.objPopupCloseButton, "Close button");
		// Verify user is navigated Reminder screen from Home screen
		if (getPlatform().equalsIgnoreCase("Android")) {
			navigateToAnyScreen("Home");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			navigateToAnyScreenOnWeb("Home");
		}

		// Verify user is navigated to Reminder screen from Home page
		String activeTab = getWebDriver().findElement(PWAHomePage.objActiveTab).getText();
		if (activeTab.equals("Home")) {
			extent.extentLogger("Verify current tab", "User is in " + activeTab + " tab");
			logger.info("User is in Home tab");
		} else {
			extent.extentLoggerFail("Verify current tab", "User is not in Home tab");
			logger.info("User is not in Home tab");
		}
		if (getPlatform().equalsIgnoreCase("Android")) {
			// Click on Hamburger menu
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			// Click on My account
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyAccount, "My account");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			// Click on My account
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
		}
		// Click on My Reminders
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyRemainder, "My Reminder");
		// Verify user is navigated to My Reminder screen
		if (checkElementDisplayed(PWAMyRemindersPage.objMyReminderHeader, "My Reminder Header") == true) {
			extent.extentLogger("Verify the Navigation ",
					"User is Navigated to "
							+ getWebDriver().findElement(PWAMyRemindersPage.objMyReminderHeader).getText()
							+ " screen from " + activeTab + "page");
			logger.info("User is Navigated to "
					+ getWebDriver().findElement(PWAMyRemindersPage.objMyReminderHeader).getText() + " screen from "
					+ activeTab + "page");
		} else {
			extent.extentLoggerFail("Verify Navigation ",
					"User failed to navigate from Home page to My Reminders screen");
			logger.info("User failed to navigate from Home page to My Reminders screen");
		}
		// Verify that Remove all button is displayed
		if (checkElementDisplayed(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all option") == true) {
			extent.extentLogger("Verify Remove all option is displayed",
					"Remove all option is displayed in Reminder screen");
			logger.info("Remove all option is displayed in Reminder screen");
		} else {
			softAssert.assertAll();
			extent.extentLoggerFail("Verify Remove all option is displayed",
					"Remove all option is not displayed in Reminder screen");
			logger.info("Remove all option is not displayed in Reminder screen");
		}
		// Verify that added reminder contents contains title, start and end time
		// verify title is displayed

		int totalContentsInReminder = getWebDriver().findElements(PWAMyRemindersPage.objTotalContentsInReminder).size();
		System.out.println(totalContentsInReminder);
		for (int i = 0; i < totalContentsInReminder; i++) {
			if (findElements(PWAMyRemindersPage.objTotalContentsInReminder).get(i).isDisplayed()) {
				extent.extentLogger("Verify title", "The content name at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objTotalContentsInReminder).get(i).getText());
				logger.info("The content name at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objTotalContentsInReminder).get(i).getText());
			} else {
				extent.extentLoggerFail("Verify title", "Content title is not displayed in Reminder screen");
				logger.info("Content title is not displayed in Reminder screen");
			}
		}
		// Verify Start and end time
		int dateTime = getWebDriver().findElements(PWAMyRemindersPage.objDateTime).size();
		for (int i = 0; i < dateTime; i++) {
			if (findElements(PWAMyRemindersPage.objDateTime).get(i).isDisplayed()) {
				extent.extentLogger("Verify date and time", "The date and time at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objDateTime).get(i).getText());
				logger.info("The date and time at index " + i + " is "
						+ findElements(PWAMyRemindersPage.objDateTime).get(i).getText());
			} else {
				extent.extentLoggerFail("Verify date and time", "Date and time is not displayed in Reminder screen");
				logger.info("Date and time is not displayed in Reminder screen");
			}
		}
		// Verify user is able to delete the content by tapping on cancel button
		int contentsBeforeDeleting = getWebDriver().findElements(PWAAddToWatchListPage.objCancelBtn).size();
		click(PWAAddToWatchListPage.objCancelBtn(1), " Cancel button");
		int contentsAfterDeleting = getWebDriver().findElements(PWAAddToWatchListPage.objCancelBtn).size();
		if (contentsAfterDeleting < contentsBeforeDeleting) {
			extent.extentLogger("Verify cancel button", "User successfully deleted the content from Reminder screen");
			logger.info("User Successfully deleted the content from Reminder screen");
		} else {
			extent.extentLoggerFail("Verify cancel button",
					"User can not delete the contents from the reminder screen");
			logger.info("User can not delete the contents from the reminder screen");
		}
		// Verify the Remove all functionality
		// click on Remove all
		click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all");
		// Verify contents are deleted
		if (checkElementDisplayed(PWAMyRemindersPage.objNoReminderMessage, "No Reminder message") == true) {
			extent.extentLogger("Verify Remove all option",
					"User successfully deleted all the contents from the Reminder screen");
			logger.info("User successfully deleted all the contents from the Reminder screen");
		} else {
			softAssert.assertAll();
			extent.extentLogger("Verify Remove all option",
					"User can not  delete all the contents from the Reminder screen");
			logger.info("User can not  delete all the contents from the Reminder screen");
		}

		// Verify We have nothing to remind you message is displayed
		if (checkElementDisplayed(PWAMyRemindersPage.objNoReminderMessage, "No Reminder message") == true) {
			extent.extentLogger("Verify No reminder message",
					"The message " + getWebDriver().findElement(PWAMyRemindersPage.objNoReminderMessage).getText()
							+ " is displayed when there is no contents are available");
			logger.info("The message " + getWebDriver().findElement(PWAMyRemindersPage.objNoReminderMessage).getText()
					+ " is displayed when there is no contents are available");
		} else {
			softAssert.assertAll();
			extent.extentLogger("Verify No Reminder message",
					"The message We have nothing to remind you message is not displayed");
			logger.info("The message We have nothing to remind you message is not displayed");
		}

		// verify device back button functionality
		// Click on device back button
		getWebDriver().navigate().back();
		// Verify user is navigated to Home screen
		if (activeTab.equals("Home")) {
			extent.extentLogger("Verify current tab",
					"User is navigated to " + activeTab + " tab after pressing device back button");
			logger.info("User is navigated to previous page after clicking on device back button");
		} else {
			extent.extentLoggerFail("Verify current tab",
					"User did not navigate to previos page after clicking on device back button");
			logger.info("User did not navigate to previos page after clicking on device back button");
		}

	}

	public void FilterLanguage(String lang) throws Exception {
		click(PWALiveTVPage.objFilterLanguageChannelGuide, "Filter language");
		int size = findElements(PWALiveTVPage.objSelectedlang).size();
		for (int i = 1; i <= size; i++) {
			click(PWALiveTVPage.objSelectedlang, "Selected language");
		}
		click(PWALiveTVPage.objSelectLang(lang), lang + " language");
		click(PWALiveTVPage.objApplyBtn, "Apply button");
//		click(PWALiveTVPage.objApplyBtn,"Apply button");
	}

	public void ValidatingWebPwaCarousalinalltabs(String UserType) throws Exception {
		switch (UserType) {
		case "Guest":
			extent.HeaderChildNode("User Type Guest");
			System.out.println("User Type Guest");
			// enterURLInBrowser("chrome", "https://newpwa.zee5.com");
			carouseldots("carouselDots", "home");
			// carouseldots("carouselDots","kids");
			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("User Type Loggedin User");
			System.out.println("User Type Loggedin User");
			// ZeePWALogin("Mobile", "Nonsubscribed");
			carouseldots("carouselDots", "home");
			carouseldots("carouselDots", "kids");
			break;

		case "SubscribedUser":
			extent.HeaderChildNode("User Type Subcribed User");
			System.out.println("User Type Subcribed User");
			// ZeePWALogin("E-mail", "Subscribed");
			carouseldots("carouselDots", "home");
			carouseldots("carouselDots", "kids");
		}
	}

	public void carouseldots(String carouselDots, String page) throws Exception {
		extent.HeaderChildNode("Carousal dots functionality");
//System.out.println("22222");
		Response resp = ResponseInstance.getResponseForPages(page, "en,kn");
		if (resp == null) {
			System.out.println("No response");
		} else {
//System.out.println("33333");
//waitTime(3000);
			waitForElementDisplayed(PWAHomePage.objZeeLogo, 10);
//navigateToAnyScreen(page);
			int hits = getCountweb(TextToXpathusingclass(carouselDots));
			System.out.println(hits);
			if (hits == 7) {
				System.out.println("The number of carousal dots are equal to the number of carousals present");
			} else {
				System.out.println("The number of carousal dots are not equal to the number of carousals present");
			}
			for (int i = 1; i < 3; i++) {
				int j = i - 1;
				String Carouseltitle = resp.jsonPath().getString("buckets[0].items[" + j + "].title");
				verifyElementPresentAndClick(TextToXpathusingclasswithindex("carouselDots", i),
						"clicked on carousal dot");
				System.out.println("clicked on " + i + " carousal dot");
				if (checkElementDisplayed(Text_To_Xpath(Carouseltitle), "carousal metadata for " + i + " index ")) {
					System.out.println("The carousel dot for " + i
							+ "th index is navigating to the respective carousel and verified ");
				} else {
					System.out.println(
							"The carousel dot for " + i + "th index is not navigating to the respective carousel ");
				}
			}
		}
	}

	public By TextToXpathusingclass(String text) throws Exception {
		return By.xpath("//div[@class='" + text + "']");
	}

	public By TextToXpathusingclasswithindex(String text, int i) throws Exception {
		return By.xpath("(//*[@class='" + text + "'])[" + i + "]");
	}


	/**
	 * Function to verify the About Us screen
	 *
	 */

	public void AboutUsScreenValidation() throws Exception {
		HeaderChildNode("About us screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
		if (checkElementDisplayed(PWAHomePage.objWhatToWatchPopUp, "wondering what to watch pop up")) {
			verifyElementPresentAndClick(PWAHomePage.objWhatToWatchCloseButton, "Pop up close button");
		}
		JSClick(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objAboutUsTextInPage, "About Us Screen page")) {
			logger.info("User is navigated to About Us screen");
			extent.extentLogger("About Us", "User is navigated to About Us screen");
		}
		String aboutUsURL = getWebDriver().getCurrentUrl();
		if (aboutUsURL.contains("aboutus")) {
			logger.info("About Us screen is opened in webview");
			extent.extentLogger("About Us", "About Us screen is opened in webview");

		} else {
			logger.info("About Us screen is not opened in webview");
		}
		verifyElementPresent(PWAHamburgerMenuPage.objAboutUsInfo, "Brief information of the application");
		waitTime(5000);
		Back(1);
	}

	/**
	 * Function to verify the About Us screen for Subscribed user
	 *
	 */
	public void SubscribedUserAboutUsScreenValidation() throws Exception {
		HeaderChildNode("About us screen");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objAboutUsTextInPage, "About Us Screen page")) {
			logger.info("User is navigated to About Us screen");
			extent.extentLogger("About Us", "User is navigated to About Us screen");
		}
		System.out.println("Current URL is " + getWebDriver().getCurrentUrl());
		String aboutUsURL = getWebDriver().getCurrentUrl();
		if (aboutUsURL.contains("aboutus")) {
			logger.info("About Us screen is opened in webview");
			extent.extentLogger("About Us", "About Us screen is opened in webview");

		}
		verifyElementPresent(PWAHamburgerMenuPage.objAboutUsInfo, "Brief information of the application");
		partialScroll();
		checkElementDisplayed(PWAHamburgerMenuPage.objHyperLink, "Hyperlink on About Us Screen");
		logger.info("Hyperlink present on About Us screen is" + getText(PWAHamburgerMenuPage.objHyperLink));
		if (checkElementDisplayed(PWAHamburgerMenuPage.objHyperLink, "Hyperlink in About Us screen")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHyperLink, "Hyperlink");
			logger.info("User is navigated to respective page " + getWebDriver().getCurrentUrl());
			extent.extentLogger("About Us", "User is navigated to respective page " + getWebDriver().getCurrentUrl());
		}
		waitTime(5000);
		Back(1);
		waitTime(4000);
		Back(1);
	}

	/**
	 * Function to verify the Help Center screen
	 */
	public void HelpCenterScreenValidation() throws Exception {
		HeaderChildNode("Help Center Screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		partialScroll();
//		if (checkElementDisplayed(PWAHomePage.objWhatToWatchPopUp, "wondering what to watch pop up")) {
//			verifyElementPresentAndClick(PWAHomePage.objWhatToWatchCloseButton, "Pop up close button");
//		}
		waitTime(2000);
		verifyElementPresent(PWAHamburgerMenuPage.objHelpCenterOption, "Help Center option");
		JSClick(PWAHamburgerMenuPage.objHelpCenterOption, "Help Center option");
		switchToWindow(2);
		if (verifyElementPresent(PWAHamburgerMenuPage.objHelpUsHeader, "Help Center screen")) {
			logger.info("User is navigated to Help Center screen");
			extent.extentLoggerPass("Help Center", "User is navigated to Help Center screen");
		}
		gettingStartedVerifications();
		myAccountVerifications();
		quickLinksVerifications();
		// Write to Us button
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objWritetous, "Write to us button");
		switchToWindow(3);
		if (verifyElementPresent(PWAHamburgerMenuPage.objContactUs, "Contact Us page")) {
			logger.info("User is navigated to Contact Us page");
			extent.extentLoggerPass("Contact Us", "User is navigated to Contact Us page");
		}
		WriteToUs();
		getWebDriver().close();
		waitTime(2000);
		switchToWindow(2);
		getWebDriver().close();
		switchToParentWindow();
	}

	/**
	 * Function to Validating Contact Us page in Help Center
	 *
	 */

	public void WriteToUs() throws Exception {

		waitTime(3000);
		checkElementDisplayed(PWAHamburgerMenuPage.objContactUs, "Contact Us page");

		checkElementDisplayed(PWAHamburgerMenuPage.objSelectYourCountry, "Select your country field");

		checkElementDisplayed(PWAHamburgerMenuPage.objAutofilledcountry, "Auto filled country name");

		checkElementDisplayed(PWAHamburgerMenuPage.objDropDown, "Select your country drop down");

		checkElementDisplayed(PWAHamburgerMenuPage.objRegisteredMobileNumber, "Registered mobile number field");

		checkElementDisplayed(PWAHamburgerMenuPage.objCountryCode, "Auto filled country code");

		checkElementDisplayed(PWAHamburgerMenuPage.objEmailField, "Email ID field");

		checkElementDisplayed(PWAHamburgerMenuPage.objEmailIDAsterisk, "Email ID '*' symbol");

		checkElementDisplayed(PWAHamburgerMenuPage.objText, "Tell us more about you issue text message");

		checkElementDisplayed(PWAHamburgerMenuPage.objContentOption, "Content radio button");
		checkElementDisplayed(PWAHamburgerMenuPage.objProductOption, "Product radio button");

		checkElementDisplayed(PWAHamburgerMenuPage.objEnquiryOption, "Enquiry radio button");

		checkElementDisplayed(PWAHamburgerMenuPage.objFeedbackOption, "Feedback radio button");

		if (checkElementDisplayed(PWAHamburgerMenuPage.objContentAsDefault, "Content radio button")) {
			logger.info("Content radio option is enabled by default");
			extent.extentLogger("Content", "Content radio option is enabled by default");
		}

		checkElementDisplayed(PWAHamburgerMenuPage.objSelectCategory, "Select category field");

		checkElementDisplayed(PWAHamburgerMenuPage.objVideoNotPlaying, "Video not palying option as default");

		checkElementDisplayed(PWAHamburgerMenuPage.objErrorMessage, "Error message text");

		checkElementDisplayed(PWAHamburgerMenuPage.objErrorMessageAsterisk, "Error message '*' symbol");

		checkElementDisplayed(PWAHamburgerMenuPage.objSubmitButton, "SUBMIT button");

		checkElementDisplayed(PWAHamburgerMenuPage.objResetButton, "RESET button");

		if (getWebDriver().findElement(PWAHamburgerMenuPage.objSubmitButton).isEnabled() == false) {
			logger.info("Submit is disabled by default");
			extent.extentLogger("Submit", "Submit is disabled by default");
		}

		if (getWebDriver().findElement(PWAHamburgerMenuPage.objResetButton).isEnabled() == true) {
			logger.info("Reset is enabled by default");
			extent.extentLogger("Reset", "Reset is enabled by default");
		}

		verifyElementPresent(PWAHamburgerMenuPage.objErrorMessageAsterisk,
				"Mandatory Email ID field is highlighted by '*' symbol");

		verifyElementPresent(PWAHamburgerMenuPage.objErrorMessageAsterisk,
				"Mandatory Error message field is highlighted by '*' symbol");

		verifyElementPresent(PWAHamburgerMenuPage.objPlatformAsterisk,
				"Mandatory Platform drop down is highlighted by '*' symbol");

		type(PWAHamburgerMenuPage.objEmailField, "bhavana9518@gmail.com", "Email Id");

		type(PWAHamburgerMenuPage.objErrorMessageField, "Video couldn't play", "Error message");

		if (getWebDriver().findElement(PWAHamburgerMenuPage.objSubmitButton).isEnabled() == true) {
			logger.info("Submit is enabled by giving mandatory inputs");
			extent.extentLogger("Submit", "Submit is enabled by giving mandatory inputs");
		}

	}

	/**
	 * Function to verify the Terms of Use in Hamburger menu
	 *
	 */

	public void TermsOfUseValidation() throws Exception {
		HeaderChildNode("Terms of Use screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objTermsOfUseOption, "Terms of Use option");
		partialScroll();
		JSClick(PWAHamburgerMenuPage.objTermsOfUseOption, "Terms of Use option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objTermsOfUseScreen, "Terms of Use screen")) {
			logger.info("User is navigated to Terms of Use screen");
			extent.extentLogger("Terms of Use", "User is navigated to Terms of Use screen");
		}
		System.out.println("Current URL is " + getWebDriver().getCurrentUrl());
		String termsOfUseURL = getWebDriver().getCurrentUrl();
		if (termsOfUseURL.contains("termsofuse")) {
			logger.info("Terms of Use screen is opened in webview");
			extent.extentLogger("Terms of Use", "Terms of Use screen is opened in webview");

		}
		waitTime(5000);
		Back(1);
	}

	/**
	 * Function to verify the Terms of Use screen for Subscribed user
	 *
	 */
	public void SubscribedUserTermsOfUseValidation() throws Exception {
		HeaderChildNode("Terms of Use screen");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objTermsOfUseOption, "Terms of Use option");
		partialScroll();
		JSClick(PWAHamburgerMenuPage.objTermsOfUseOption, "Terms of Use option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objTermsOfUseScreen, "Terms of Use screen")) {
			logger.info("User is navigated to Terms of Use screen");
			extent.extentLogger("Terms of Use", "User is navigated to Terms of Use screen");
		}
		System.out.println("Current URL is " + getWebDriver().getCurrentUrl());
		String termsOfUseURL = getWebDriver().getCurrentUrl();
		if (termsOfUseURL.contains("termsofuse")) {
			logger.info("Terms of Use screen is opened in webview");
			extent.extentLogger("Terms of Use", "Terms of Use screen is opened in webview");

		}
		checkElementDisplayed(PWAHamburgerMenuPage.objTermsAndConditions, "Terms and conditions of application");
		checkElementDisplayed(PWAHamburgerMenuPage.objOfferTermsAndConditions, "Offers Terms and conditions");
		partialScroll();
		scrollDownWEB();
		checkElementDisplayed(PWAHamburgerMenuPage.objOfferDUration, "Offer duration");
		partialScroll();
		checkElementDisplayed(PWAHamburgerMenuPage.objCashbackByAmazonPay,
				"Steps to get Cashback for payment by Amazon pay");
		checkElementDisplayed(PWAHamburgerMenuPage.objCashbackByAnyBankCard,
				"Steps to get 30% Cashback on any Bank Credit/Debit card");
		checkElementDisplayed(PWAHamburgerMenuPage.objCashbackOnPaytm, "Steps to get 50% Paytm Cashback");
		waitTime(5000);
		Back(1);
	}

	/**
	 * Function to verify the Privacy Policy in Hamburger menu
	 *
	 */
	public void PrivacyPolicyValidation() throws Exception {
		HeaderChildNode("Privacy Policy screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objPrivacyPolicy, "Privacy Policy option");
		partialScroll();
		JSClick(PWAHamburgerMenuPage.objPrivacyPolicy, "Privacy Policy option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objPrivacyPolicyScreen, "Privacy Policy screen")) {
			logger.info("User is navigated to Privacy Policy screen");
			extent.extentLogger("Privacy Policy", "User is navigated to Privacy Policy screen");
		}
		String privacyPolicyURL = getWebDriver().getCurrentUrl();
		if (privacyPolicyURL.contains("privacyPolicyURL")) {
			logger.info("Privacy Policy screen is opened in webview");
			extent.extentLogger("Privacy Policy", "Privacy Policy screen is opened in webview");

		}
		verifyElementPresent(PWAHamburgerMenuPage.objPrivacyPolicyInfo, "Legal information of the application");
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objSecurityInfo, "Security Information of the application");
		waitTime(5000);
		Back(1);
	}

	/**
	 * Function to verify the Privacy Policy screen for Subscribed user
	 *
	 */

	public void SubscribedUserPrivacyPolicyValidation() throws Exception {
		HeaderChildNode("Privacy Policy screen");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objPrivacyPolicy, "Privacy Policy option");
		partialScroll();
		JSClick(PWAHamburgerMenuPage.objPrivacyPolicy, "Privacy Policy option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objPrivacyPolicyScreen, "Privacy Policy screen")) {
			logger.info("User is navigated to Privacy Policy screen");
			extent.extentLogger("Privacy Policy", "User is navigated to Privacy Policy screen");
		}
		System.out.println("Current URL is " + getWebDriver().getCurrentUrl());
		String privacyPolicyURL = getWebDriver().getCurrentUrl();
		if (privacyPolicyURL.contains("privacyPolicyURL")) {
			logger.info("Privacy Policy screen is opened in webview");
			extent.extentLogger("Privacy Policy", "Privacy Policy screen is opened in webview");
		}
		verifyElementPresent(PWAHamburgerMenuPage.objLinkOnPrivacyPolicy, "Hyper link in Privacy Policy Screen");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLinkOnPrivacyPolicy, "Hyperlink");
		waitTime(5000);
		String link = getWebDriver().getCurrentUrl();
		if (link.contains("pagenotfound")) {
			logger.info("User is not able to navigate to the Contact Us page");
			extent.extentLoggerFail("Hyper link", "User is not able to navigate to the Contact Us page");
		}
		waitTime(5000);
		Back(1);
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objPrivacyPolicyInfo, "Legal information of the application");
		verifyElementPresent(PWAHamburgerMenuPage.objSecurityInfo, "Security Information of the application");
		partialScroll();
		waitTime(5000);
		Back(1);
	}

	/**
	 * Function to verify the Build version in Hamburger menu
	 *
	 */

	public void BulidVersionValidation() throws Exception {
		HeaderChildNode("Build version");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		checkElementDisplayed(PWAHamburgerMenuPage.objBuildVersion, "Build Version");
		String version = getText(PWAHamburgerMenuPage.objBuildVersion);
		logger.info("Build version is : " + version);
		extent.extentLogger("version", "Build version is : " + version);
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
	}

	/**
	 * Function to verify the FAQ's in Help Center Screen under Getting started
	 * category
	 */

	public void gettingStartedVerifications() throws Exception {
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Popular Topics"), "Popular Topics tab");
		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Where can I view my subscription information?"),
				"Where can I view my subscription information?");

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to Where can I view my subscription information? page");
			extent.extentLoggerPass("Article",
					"User is navigated to Where can I view my subscription information? page");
		}
		Back(1);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Registering with ZEE5"),
				"Registering with ZEE5");

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to Registeing with ZEE5 page");
			extent.extentLoggerPass("Article", "User is navigated to Registering with ZEE5 page");
		}
		Back(1);

		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How do I watch ZEE5 on my television?"),
				"How do I watch ZEE5 on my telivision");

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to How do I watch ZEE5 on my telivision page");
			extent.extentLoggerPass("Article", "User is navigated to How do I watch ZEE5 on my telivision page");
		}
		Back(1);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How can I delete"),
				"How can I delete / log out a registered device?");

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to How can I delete / log out a registered device? page");
			extent.extentLoggerPass("Article",
					"User is navigated to How can I delete / log out a registered device? page");
		}
		Back(1);
	}

	/**
	 * Function to verify the FAQ's in Help Center Screen under My Account category
	 */

	public void myAccountVerifications() throws Exception {
		verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("My Account"), "My Account tab");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Managing your subscription"),
				"Managing your subscription");

//		switchToWindow(3);

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to Managing your Subscription  page");
			extent.extentLoggerPass("Article", "User is navigated to Managing your Subscription  page");
		}
		Back(1);

//		getWebDriver().close();
//		switchToWindow(2);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I can"),
				"I can't sign in to ZEE5");

//		switchToWindow(3);

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to I can't sign in to ZEE5 page");
			extent.extentLoggerPass("Article", "User is navigated to I can't sign in to ZEE5 page");
		}
		Back(1);

//		getWebDriver().close();
//		switchToWindow(2);

		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I purchased a subscription, but it’s not working"),
				"I purchased a subscription, but it’s not working");

//		switchToWindow(3);

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to I purchased a subscription, but it’s not working page");
			extent.extentLoggerPass("Article",
					"User is navigated to I purchased a subscription, but it’s not working page");
		}
		Back(1);

//		getWebDriver().close();
//		switchToWindow(2);

		verifyElementPresentAndClick(
				PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How many devices can I watch on?"),
				"I want to update my profile information");

//		switchToWindow(3);

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to I want to update my profile information  page");
			extent.extentLoggerPass("Article", "User is navigated to I want to update my profile information page");
		}
		Back(1);

//		getWebDriver().close();
//		switchToWindow(2);
	}

	/**
	 * Function to verify the FAQ's in Help Center Screen under Quick Links category
	 */
	public void quickLinksVerifications() throws Exception {
		verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Offers & Partnerships"),
				"Offers & Partnerships tab");
//		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How Can I"), "How Can I");

//		switchToWindow(3);

//		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
//			logger.info("User is navigated to How Can I page");
//			extent.extentLoggerPass("Article", "User is navigated to How Can I page");
//		}
//		Back(1);

//		getWebDriver().close();
//		switchToWindow(2);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("ZEE5 Offers"), "ZEE5 Offers");

//		switchToWindow(3);

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to ZEE5 Offers page");
			extent.extentLoggerPass("Article", "User is navigated to ZEE5 Offers page");
		}
		Back(1);

//		getWebDriver().close();
//		switchToWindow(2);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("ZEE5 Partnerships"),
				"ZEE5 Partnerships");

//		switchToWindow(3);

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to ZEE5 Partnerships page");
			extent.extentLoggerPass("Article", "User is navigated to ZEE5 Partnerships page");
		}
		Back(1);

//		getWebDriver().close();
//		switchToWindow(2);

//		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I purchased a subscription"),
//				"I purchased a subscription but it's not working");

//		switchToWindow(3);

//		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
//			logger.info("User is navigated to I purchased a subscription but it's not working page");
//			extent.extentLoggerPass("Article", "User is navigated to I purchased a subscription but it's not working page");
//		}
//		Back(1);

//		getWebDriver().close();
//		switchToWindow(2);

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Applying a code in ZEE5"),
				"Applying a code in ZEE5");

//		switchToWindow(3);

		if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
			logger.info("User is navigated to Applying a code in ZEE5 page");
			extent.extentLoggerPass("Article", "User is navigated to Applying a code in ZEE5 page");
		}
		Back(1);

//		getWebDriver().close();
//		switchToWindow(2);
	}

	/**
	 * Function to verify the Display language and Static pages Content language
	 */
	public void contentLanguagewithDisplayLanguage(String userType) throws Exception {
		// Changing display language to Kannada
		verifyElementPresentAndClick(PWAHomePage.objLanguage, "Language button");
		verifyElementPresentAndClick(PWAHomePage.objKannadaWEB, "Kannada option");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
		// About Us
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		if (userType.contains("Guest")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objAboutUsinKannada, "About Us option in kannada");
		} else {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objAboutUsinKannada2, "About Us option in kannada");
		}
		String title1 = getText(PWAHamburgerMenuPage.objAboutUsTextInPage);
		System.out.println("Title " + title1);
		if (title1.contains("About Us")) {
			logger.info("Content of the About Us page is not according to the display language");
			extent.extentLoggerFail("About Us",
					"Content of the page About Us is not according to the display language");
		}
		// Back(1);//update
		// Terms of Use
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		if (userType.contains("Guest")) {
			JSClick(PWAHamburgerMenuPage.objTermsInKannada, "Terms of Use option in Kannada");
		} else if (userType.contains("NonSubscribedUser") || userType.contains("SubscribedUser")) {
			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objTermsInKannada2, "Terms of Use option in Kannada");
			JSClick(PWAHamburgerMenuPage.objTermsInKannada2, "Terms of Use option in Kannada");
		}
		String title2 = getText(PWAHamburgerMenuPage.objTermsOfUseScreen);
		System.out.println("Title " + title2);
		if (title2.contains("Terms of Use")) {
			logger.info("Content of the Terms of Use page is not according to the display language");
			extent.extentLoggerFail("Terms of Use",
					"Content of the Terms of Use page is not according to the display language");
		}
		waitTime(5000);
		Back(1);
		// Privacy Policy
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objPrivacyPolicyInKannadA,
				"Privacy Policy option in Kannada");
//		if (userType.contains("Guest")) {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPrivacyPolicyInKannadA,
//					"Privacy Policy option in Kannada");
//		} else {
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPrivacyPolicyInKannadA2,
//					"Privacy Policy option in Kannada");
//		}
		String title3 = getText(PWAHamburgerMenuPage.objPrivacyPolicyScreen);
		System.out.println("Title " + title3);
		if (title3.contains("Privacy Policy")) {
			logger.info("Content of the Privacy Policy page is not according to the display language");
			extent.extentLoggerFail("Privacy Policy",
					"Content of the Privacy Policy page is not according to the display language");
		}
		waitTime(5000);
		Back(1);
		// Changing display language to English
		verifyElementPresentAndClick(PWAHomePage.objLanguage, "Language button");
		verifyElementPresentAndClick(PWAHomePage.objEnglishWEB, "English option");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
	}

	/*
	 * =========================================BHAVANA External
	 * Links========================
	 */

	public void LinksValidation(String userType) throws Exception {
		if (userType.contains("Guest")) {
			extent.HeaderChildNode("Guest user scenarios");
			InternalLinksValidation();
			ExternalLinksValidation();
		}

//		else if (userType.contains("NonSubscribedUser")) {
//			extent.HeaderChildNode("NonSubscribed User scenarios");
//			// ZeeWEBPWALogin("NonSubscribedUser");
//			InternalLinksValidation();
//			ExternalLinksValidation();
//		} else if (userType.contains("SubscribedUser")) {
//			extent.HeaderChildNode("subscribed scenarios");
//			// ZeeWEBPWALogin("SubscribedUser");
//			InternalLinksValidation();
//			ExternalLinksValidation();
//		}
	}


	public void InternalLinksValidation() throws Exception {

		extent.HeaderChildNode("TC_PWA_GST_0609: Verify the Internal Links, deep-link open on landing page within the webpage");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		JSClick(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
		waitTime(2000);
		verifyElementPresent(PWAHomePage.objAboutUsInFooterSection, "About Us in footer section");
		waitTime(2000);
		JSClick(PWAHomePage.objAboutUsInFooterSection, "About Us in footer section");
		waitTime(4000);
		if (checkElementDisplayed(PWAHomePage.objAboutUs, "About Us screen")) {
			logger.info("User is navigated to About Us Screen");
		}
		// Back(1);
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objHelp, "Help Center in footer section");
		JSClick(PWAHomePage.objHelp, "Help Center in footer section");
		waitTime(8000);
		switchToWindow(2);
		waitTime(5000);
		if (checkElementDisplayed(PWAHomePage.objHelpScreen, "Help Center screen")) {
			logger.info("User is navigated to Help Center Screen");
		}
		getWebDriver().close();
		switchToParentWindow();
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objPrivacyPolicyInFooterSection, "Privacy Policy in footer section");
		waitTime(5000);
		JSClick(PWAHomePage.objPrivacyPolicyInFooterSection, "Privacy Policy in footer section");
		if (checkElementDisplayed(PWAHomePage.objPrivacyPolicy, "Privacy Policy screen")) {
			logger.info("User is navigated to Privacy Policy Screen");
		}
		Back(1);
		waitTime(5000);
		verifyElementPresentAndClick(PWAHomePage.objTermsOfUseInfooterSection, "Terms of Use in footer section");
		if (checkElementDisplayed(PWAHomePage.objTerms, "Terms of Use screen")) {
			logger.info("User is navigated to Terms of Use Screen");
		}
		Back(1);
	}

	/**
	 * Function to verify external links
	 */

public void ExternalLinksValidation() throws Exception {

		extent.HeaderChildNode("TC_PWA_GST_0610: Verify the External Links, deep-link open in new web page");
		// Instagram
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		JSClick(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objInstagramIcon, "Instagram icon");
		JSClick(PWAHomePage.objInstagramIcon, "Instagram icon");
		waitTime(3000);
		switchToWindow(2);
		waitTime(3000);
		if (checkElementDisplayed(PWAHomePage.objInstagramPage, "Instagram page follow button")) {
			logger.info("User is navigated to Instagram page");
		}
		getWebDriver().close();
		switchToParentWindow();
		// Twitter
		partialScroll();
		scrollDownWEB();
		verifyElementPresent(PWAHomePage.objTwitterIcon, "Twitter icon");
		JSClick(PWAHomePage.objTwitterIcon, "Twitter icon");
		waitTime(3000);
		switchToWindow(2);
		if (checkElementDisplayed(PWAHomePage.objTwitterPage, "Twitter page follow button")) {
			logger.info("User is navigated to Twitter page");
		}
		getWebDriver().close();
		switchToParentWindow();
		partialScroll();
		scrollDownWEB();
		// Facebook
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objFacebookIcon, "Facebook icon");
		JSClick(PWAHomePage.objFacebookIcon, "Facebook icon");
		waitTime(3000);
		switchToWindow(2);
		String facebook = getWebDriver().getCurrentUrl();
		if (facebook.contains("facebook")) {
			logger.info("User is redirected to facebook page");
			extent.extentLogger("Facebook", "User is redirected to facebook page");
		}
		getWebDriver().close();
		switchToParentWindow();
		waitTime(5000);
		// android play store
		verifyElementPresent(PWAHomePage.objAndroidPlayStoreIcon, "Google play store icon");
		JSClick(PWAHomePage.objAndroidPlayStoreIcon, "Google play store icon");
		waitTime(3000);
		switchToWindow(2);
		if (checkElementDisplayed(PWAHomePage.objGooglePlayLogo, "Android Google Play icon") == true) {
			logger.info("User is navigated to Android Google Play store");
			extent.extentLogger("Google play store", "User is redirected to Google paly store page");
		}
		getWebDriver().close();
		switchToParentWindow();
		waitTime(5000);
		// iOS app store
		verifyElementPresent(PWAHomePage.objIoSAppStoreIcon, "iOS app store icon");
		JSClick(PWAHomePage.objIoSAppStoreIcon, "iOS app store icon");
		waitTime(3000);
		switchToWindow(2);
		String iOSURL = getWebDriver().getCurrentUrl();
		if (iOSURL.contains("apple")) {
			logger.info("User is redirected to iOS app store page");
			extent.extentLogger("iOS app store", "User is redirected to iOS app store page");
		}
		getWebDriver().close();
		switchToParentWindow();
	}

	/**
	 * ===============================BHAVANA CONTENT
	 * DETAILS============================
	 *
	 */

	public void contentDetailsValidation(String userType) throws Exception {
		HeaderChildNode("Content Details Module");
		if (userType.contentEquals("Guest")) {
			extent.HeaderChildNode("Guest user scenarios");
			logger.info("Accessing as Guest User");
			ContentDetails("Guest");

		} else if (userType.contentEquals("NonSubscribedUser")) {
			extent.HeaderChildNode("Non subscribed scenarios");
			logger.info("Accessing as Non subscribed User");
			// ZeeWEBPWALogin("NonSubscribedUser");
			ContentDetails("NonSubscribedUser");
			checkDurationandProgressVideocontent("NonSubscribedUser");

		} else if (userType.contentEquals("SubscribedUser")) {
			extent.HeaderChildNode("Subscribed scenarios");
			logger.info("Accessing as Subscribed User");
			// ZeeWEBPWALogin("SubscribedUser");
			ContentDetails("SubscribedUser");
			checkDurationandProgressVideocontent("SubscribedUser");
		}
	}

	public void checkDurationandProgressVideocontent(String userType) throws Exception {
		extent.HeaderChildNode("checkDurationandProgressVideo");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchBtnWEB, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("timedAnchorEpisode");

		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
//	hideKeyboard();
		waitTime(3000);
		click(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(10000);
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		// Content elapsed time should update with the content playback
		if (userType.equals("Guest")) {
			String currentDuration = getText(PWAPlayerPage.objcurrenttime);
			System.out.println("Current time: " + currentDuration);
		} else {
			String currentDuration = getText(PWAPlayerPage.objcurrenttime);
			System.out.println("Elapsed time: " + currentDuration);
		}
		String totalDuration = getText(PWAPlayerPage.objtotaltime);
		System.out.println("Total time: " + totalDuration);
		String progress = null;
		if (checkElementDisplayed(PWAPlayerPage.objprogressBar, "ProgressBar")) {
			progress = getAttributValue("style", PWAPlayerPage.objprogressProgress);
			System.out.println("Progress : " + progress);
		}
		Thread.sleep(5000);
		verifyElementPresentAndClick(PWAPlayerPage.forward10SecBtn, "10 sec forward");
		verifyElementPresentAndClick(PWAPlayerPage.playBtn, "Play button");
		// Waiting for some time
		Thread.sleep(10000);
		Thread.sleep(10000);
		System.out.println("Waited for 5 sec");
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		String currentDuration1 = getText(PWAPlayerPage.objcurrenttime);
		System.out.println("Current time: " + currentDuration1);
		String totalDuration1 = getText(PWAPlayerPage.objtotaltime);
		System.out.println("Total time: " + totalDuration1);
		String progress1 = getAttributValue("style", PWAPlayerPage.objprogressProgress);
		System.out.println("Progress : " + progress1);
		// Validate the availabilty and functionality of progress bar button
		if (!progress.equals(progress1)) {
			System.out.println("Progress Bar is functional");
			extent.extentLogger("Progress Bar is functional", "Progress Bar is functional");
			logger.info("Progress Bar is functional");
		} else {
			System.out.println("Progress Bar is not functional");
			extent.extentLoggerFail("Progress Bar is not functional", "Progress Bar is not functional");
			logger.info("Progress Bar is not functional");
		}
		// Content duration should be static on the player
		if (totalDuration.contains(totalDuration1)) {
			System.out.println("Content duration is static");
			extent.extentLogger("Content duration is static", "Content duration is static");
			logger.info("Content duration is static");
		} else {
			System.out.println("Content duration is not static");
			extent.extentLoggerFail("Content duration is not static", "Content duration is not static");
			logger.info("Content duration is not static");
		}
	}

	public void ContentDetails(String userType) throws Exception {

		extent.HeaderChildNode("Content details Validation");
		waitTime(5000);
		verifyElementPresentAndClick(PWASearchPage.objSearchBtnWEB, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("consumptionsShow");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(5000);
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(10000);
		System.out.println("Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
		extent.extentLogger("Navigated to tab : " + getText(PWAHomePage.objSeletedTab),
				"Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
		logger.info("Navigated to tab : " + getText(PWAHomePage.objSeletedTab));
		waitTime(5000);
		if (checkElementDisplayed(PWAShowsPage.objShowdeatilPlayIcon, "ShowDetailPage")) {
			System.out.println("Navigated to ShowdetailPage");
			extent.extentLogger("Navigated to ShowdetailPage", "Navigated to ShowdetailPage"); // any
			logger.info("Navigated to ShowdetailPage");
		}
		if (checkElementDisplayed(PWAShowsPage.objEpisodeTrayinShowdetailPage, "Episode Tray below Feature carousel")) {
			System.out.println("Episode Tray below Feature carousel is present");
			extent.extentLogger("Episode Tray below Feature carousel is present",
					"Episode Tray below Feature carousel is present");
			logger.info("Episode Tray below Feature carousel is present");
		}
		if (checkElementDisplayed(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown")) {
			click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
			waitTime(5000);
			List<WebElement> objShowDetailEpisodeDropdownValuesSize = getWebDriver().findElements(By.xpath(
					"(((//div[@class='AllEpisodesListDiv']//div[@class='allEpisodeSelect']//div)[6])[@aria-expanded='true']//div)//span"));
			waitTime(3000);
			System.out.println("DropDown Size : " + objShowDetailEpisodeDropdownValuesSize.size());
			ArrayList<String> Listofepisode = new ArrayList<String>();
			for (int i = 1; i < objShowDetailEpisodeDropdownValuesSize.size(); i++) {
				Listofepisode.add(getAttributValue("aria-label", PWAShowsPage.objShowDetailEpisodeDropdownValues(i)));
			}
			System.out.println("Episodes Listed in dropdown " + Listofepisode);
		}
		// To scroll elements in drop down
		List<WebElement> objShowDetailEpisodeDropdownValuesSize = getWebDriver().findElements(By.xpath(
				"(((//div[@class='AllEpisodesListDiv']//div[@class='allEpisodeSelect']//div)[6])[@aria-expanded='true']//div)//span"));
		waitTime(3000);
		if (objShowDetailEpisodeDropdownValuesSize.size() > 6) {
			JavascriptExecutor je = (JavascriptExecutor) getWebDriver();
			je.executeScript("arguments[0].scrollIntoView(true);",
					objShowDetailEpisodeDropdownValuesSize.get(objShowDetailEpisodeDropdownValuesSize.size() - 5));
		}
		waitTime(3000);
		System.out.println("Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown));
		extent.extentLogger("Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown),
				"Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown));
		logger.info("Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown));
		List<WebElement> objShowDetailNonSelectedEpisodeDropdownValues = getWebDriver().findElements(By.xpath(
				"((((//div[@class='AllEpisodesListDiv']//div[@class='allEpisodeSelect']//div)[6])[@aria-expanded='true']//div)//span[@aria-selected='false'])"));
		waitTime(3000);
		ArrayList<String> ListofNonSelectedEpisode = new ArrayList<String>();
		for (int i = 1; i < objShowDetailNonSelectedEpisodeDropdownValues.size(); i++) {
			ListofNonSelectedEpisode
					.add(getAttributValue("aria-label", PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(i)));
		}
		System.out.println("NON Selected Episode : " + ListofNonSelectedEpisode);
		JSClick(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Non-Selected Episode");
		JSClick(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		System.out.println("Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown));
		extent.extentLogger("Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown),
				"Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown));
		logger.info("Selected Episode : " + getText(PWAShowsPage.objSelectedEpisodeinDropdown));
		JSClick(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		scrolltillBackToArrowAppears();
		if (checkElementDisplayed(PWAShowsPage.objShowdeatilPlayIcon, "ShowDetailPage")) {
			System.out.println("Navigated to Top");
			extent.extentLogger("Navigated to Top of page", "Navigated to Top of page");
			logger.info("Navigated to Top");
		}
		verifyElementPresent(PWAShowsPage.objShareIcon, "Share icon");
		waitTime(3000);
		click(PWAShowsPage.objShareIcon, "Share icon");
//		WebShareFunctionalityContent();

		// Watchhistory is showing at back-end response properly
		Response resp = ResponseInstance
				.getResponse("https://gwapi.zee5.com/content/tvshow/0-6-1392?translation=en&country=IN");
		extent.extentLogger("BackEnd data : ", "BackEnd data : ");
		logger.info("BackEnd data : ");
		System.out.println("Show : " + resp.jsonPath().getString("original_title"));
		extent.extentLogger("Show : " + resp.jsonPath().getString("original_title"),
				"Show : " + resp.jsonPath().getString("id"));
		logger.info("Show : " + resp.jsonPath().getString("original_title"));
		System.out.println("id : " + resp.jsonPath().getString("id"));
		extent.extentLogger("id : " + resp.jsonPath().getString("id"), "id : " + resp.jsonPath().getString("id"));
		logger.info("id : " + resp.jsonPath().getString("id"));
		System.out.println("duration : " + resp.jsonPath().getString("duration"));
		extent.extentLogger("duration : " + resp.jsonPath().getString("duration"),
				"duration : " + resp.jsonPath().getString("duration"));
		logger.info("duration : " + resp.jsonPath().getString("duration"));
		System.out.println("asset_Type : " + resp.jsonPath().getString("asset_type"));
		extent.extentLogger("asset_Type : " + resp.jsonPath().getString("asset_type"),
				"asset_Type : " + resp.jsonPath().getString("asset_type"));
		logger.info("asset_Type : " + resp.jsonPath().getString("asset_type"));
		// check for reco trays

		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			checkElementDisplayed(PWAShowsPage.objWatchLatestCTA, "Watch latest episode CTA");// i tried this..but it is
																								// not clicking
			// waitTime(3000);
			click(PWAShowsPage.objWatchLatestCTAPlayicon, "Watch latest episode CTA"); // RUN NOW
			waitTime(15000);
			Response recoresp = null;
			if (userType.equals("NonSubscribedUser")) {
				recoresp = ResponseInstance.getRECOResponse(
						"https://gwapi.zee5.com/content/reco?asset_id=0-1-manual_2voun4m1qsh0&country=IN&translation=en&languages=en,kn&version=6&region=KA",
						NonSubUsername, NonSubPassword);
			} else if (userType.equals("SubscribedUser")) {
				recoresp = ResponseInstance.getRECOResponse(
						"https://gwapi.zee5.com/content/reco?asset_id=0-1-manual_2voun4m1qsh0&country=IN&translation=en&languages=en,kn&version=6&region=KA",
						SubUsername, SubPassword);
			}
			String recotray = recoresp.jsonPath().getString("buckets[0].title");
			waitTime(3000);
			System.out.println("recoTray : " + recotray);

			waitTime(3000);
			try {
				scrollToTheElementWEB(TextToXpath(recotray));
				if (checkElementDisplayed(TextToXpath(recotray), "tray")) {
					extent.extentLogger("RECO Tray", "RECO Tray");
					logger.info("RECO Tray");
				} else {
					extent.extentLoggerFail("RECO Tray", "NO RECO Tray");
					logger.info("NO RECO Tray");
				}

			} catch (Exception e) {
				extent.extentLoggerFail("RECO Tray", "NO RECO Tray");
				logger.info("NO RECO Tray");
			}
		}
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}
	}

	public void scrollToTheElementWEB(By element) throws Exception {
		JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
		waitTime(3000);
		jse.executeScript("arguments[0].scrollIntoView(true);", findElement(element));
		jse.executeScript("window.scrollBy(0,-50)", "");
	}

	public void scrolltillBackToArrowAppears() throws Exception {
		// scrollToBottomOfPage();
		scrollDownWEB();
		for (int i = 1; i <= 10; i++) {
			// Swipe("UP", 1);
			partialScroll();
			if (checkElementDisplayed(PWAShowsPage.objBackToTopArrow, "Back to Top Arrow")) {
				waitTime(2000);
				click(PWAShowsPage.objBackToTopArrow, "BackToTop Arrow");
				break;
			}
		}
	}

	/*
	 * Function to validate the Web Share functionality
	 */
	public void WebShareFunctionalityContent() throws Exception {
		// click on share Option
		// Verify Facebook share option
		Thread.sleep(2000);
		verifyElementPresent(PWAPlayerPage.facebookShareBtn, "Facebook share option");
		Thread.sleep(2000);
		// Verify Twitter share option
		verifyElementPresent(PWAPlayerPage.twitterShareBtn, "Twitter share option");
		Thread.sleep(2000);
		// Verify Email Share option
		verifyElementPresent(PWAPlayerPage.emailShareBtn, "Email share option");
		Thread.sleep(2000);
		// Click on Facebook Share option
		click(PWAPlayerPage.facebookShareBtn, "Facebook share option");
		Thread.sleep(2000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}
		// Switch to window
		verifyAlert();
		switchToWindow(2);
		Thread.sleep(2000);
		// Verify user is navigate to Facebook page
		if (checkElementDisplayed(PWALiveTVPage.objPostToFacebookBtn, "Post to Facebook")) {
			verifyElementPresentAndClick(PWALiveTVPage.objPostToFacebookBtn, "Post to Facebook");
			waitTime(3000);
			verifyAlert();
			switchToWindow(1);
			waitTime(3000);
		} else {
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookEmailField, "Facebook Email field");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}
			getWebDriver().findElement(PWALiveTVPage.objFacebookEmailField).sendKeys("helloigs6@gmail.com");
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookPasswordField, "Facebook Password field");
			getWebDriver().findElement(PWALiveTVPage.objFacebookPasswordField).sendKeys("hello@12345");
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookLoginBtn, "Facebook Login button");
			waitTime(2000);
			verifyAlert();
			waitTime(2000);
			verifyElementPresentAndClick(PWALiveTVPage.objPostToFacebookBtn, "Post to Facebook");
			waitTime(3000);
			verifyAlert();
			switchToWindow(1);
			waitTime(3000);
		}

		// Click on Share option
		click(PWAPlayerPage.shareBtn, "Share Option");
		Thread.sleep(2000);

		// Click on Twitter share option
		click(PWAPlayerPage.twitterShareBtn, "Twitter share option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}
		Thread.sleep(2000);
		// Verify user is navigated to Twitter page
		switchToWindow(2);
		Thread.sleep(2000);
		verifyAlert();
		waitTime(3000);
		checkElementDisplayed(PWALiveTVPage.objTwitterEmailField, "Twitter Email field");
		waitTime(2000);
		click(PWALiveTVPage.objTwitterEmailField, "Twitter Email field");
		getWebDriver().findElement(PWALiveTVPage.objTwitterEmailField).sendKeys("zee5latest@gmail.com");
		waitTime(2000);
		verifyElementPresentAndClick(PWALiveTVPage.objTwitterPasswordField, "Twitter Password field");
		getWebDriver().findElement(PWALiveTVPage.objTwitterPasswordField).sendKeys("User@123");
		verifyElementPresentAndClick(PWALiveTVPage.objTwitterLoginButton, "Twitter Login button");
		waitTime(2000);
		verifyAlert();
		waitTime(2000);
		verifyElementPresentAndClick(PWALiveTVPage.objTweetButton, "Tweet button");
		waitTime(2000);
		verifyAlert();
		switchToParentWindow();
		Thread.sleep(2000);
	}

	/**
	 * Method to verify the tray rotate
	 * @throws Exception
	 */
	public void RotateTrayValidation() throws Exception {
		extent.HeaderChildNode("Tray Rotate Icon Validation");
		waitTime(5000);
		partialScrollDown();
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
		}
		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
	}

	public void mouseHover() {
		Actions action = new Actions(getWebDriver());
		WebElement player = getWebDriver().findElement(PWAPlayerPage.objPlaybackVideoOverlay);
		action.moveToElement(player).build().perform();
	}

	public void newsPlayerIconValidations() throws Exception {
		extent.HeaderChildNode("Validation of Player Controls");
//	waitForPlayerAdToComplete("Video Player");
		waitTime(5000);
		mouseHover();
		click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
		waitTime(2000);
//	click(PWAPlayerPage.objPlaybackVideoOverlay, "player screen");
		mouseHover();
		checkElementDisplayed(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds icon");
		checkElementDisplayed(PWAPlayerPage.pauseBtn, "Play/Pause icon");
		checkElementDisplayed(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds icon");
		checkElementDisplayed(PWAPlayerPage.settingsBtn, "Settings icon");
	}

	public void FullScreen() throws Exception {
		extent.HeaderChildNode("Validating full screen mode");
//		waitForPlayerAdToComplete("Video Player");
		try {
			mouseHover();
			waitTime(5000);
			JSClick(PWAPlayerPage.maximizeBtn, "Maximize button");
			waitTime(2000);
			mouseHover();
			JSClick(PWAPlayerPage.minimizeBtn, "Minimize button");
		} catch (Exception e) {
		}
	}

	public void newsTrayValidation() throws Exception {
		extent.HeaderChildNode("Verifing the trays displayed in News Tab");
		String languageSmallText = allSelectedLanguagesWEB();
		System.out.println(languageSmallText);
		Response resp = ResponseInstance.getResponseForPages("news", languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		List<String> apitotaltrays = resp.jsonPath().getList("buckets");
		System.out.println(apitotaltrays.size());
		for (int i = 1; i < apitotaltrays.size(); i++) {
			String traytitle = resp.jsonPath().getString("buckets[" + i + "].title");
			apiTitleList.add(traytitle);
		}
		System.out.println("api: " + apiTitleList);
		List<String> uiTitleList = new LinkedList<String>();
		List<WebElement> uitotaltrays = findElements(By.xpath("//*[@class='titleLink']"));
		System.out.println(uitotaltrays.size());
		for (int j = 0; j < 4; j++) {
			// String trayTitle
			// =findElement(By.xpath("(//*[@class='titleLink'])["+(j+1)+"]")).getText();
			String trayTitle = apiTitleList.get(j);
			uiTitleList.add(trayTitle);
			partialScrollDown();
			if (apiTitleList.get(j).equalsIgnoreCase(uiTitleList.get(j))) {
				logger.info("API title: " + apiTitleList.get(j) + " is verified with UI title: " + uiTitleList.get(j));
				extent.extentLogger("Tray validation",
						"API title: " + apiTitleList.get(j) + " is verified with UI title: " + uiTitleList.get(j));
			}
		}
		System.out.println("UI: " + uiTitleList);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	/**
	 * ===============================YASHASWINI
	 * LandingPage============================
	 *
	 */

	public void ContinuewatchingTray(String userType) throws Exception {
		extent.HeaderChildNode("Landing page module: Continue watching tray");
		partialScroll();
		waitTime(2000);
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue watching tray") == false) {
				logger.info("Continue Watching tray is not displayed for Guest User");
				extent.extentLogger("Continue Watching tray", "Continue Watching tray is not displayed for Guest User");
			} else {
				logger.error("Continue Watching tray is displayed for Guest User");
				extent.extentLoggerFail("Continue Watching tray", "Continue Watching tray is displayed for Guest User");
			}
		}
		if ((userType.equals("NonSubscribedUser") || (userType.equals("SubscribedUser")))) {
			if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue watching tray")) {
				logger.info("Continue Watching tray is displayed for logged in User");
				extent.extentLogger("Continue Watching tray", "Continue Watching tray is displayed for logged in User");
			} else {
				logger.error("Continue Watching tray is not displayed for logged in user");
				extent.extentLoggerFail("Continue Watching tray",
						"Continue Watching tray is not displayed for logged in user");
			}
		}
	}

	public void LandingPagegap(String text, String Moviename, String userType) throws Exception {
		HeaderChildNode("Validation functionality of MyProfile option,View All button");
		verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
		if (checkElementDisplayed(PWAHomePage.objHomeInHambugerMenu, "Home button")) {
			logger.info("Home button is highlighted in Hamburger Menu");
			extent.extentLogger("Home", "Home button is highlighted in Hamburger Menu");
		}
		click(PWAHomePage.objHamburgerMenu, "Hamburger Menu");
		waitTime(5000);
//		Actions actions = new Actions(getWebDriver());
//		WebElement contentcard = getWebDriver().findElement(PWAHomePage.objTabName("TV Shows"));
//		actions.moveToElement(contentcard).perform();
//		waitTime(5000);
//		if (checkElementDisplayed(PWAHomePage.objHoverMenu("TV Shows"), "TV Shows menu")) {
//			logger.info("TV Shows tab overlay is displayed when mouse hover is performed");
//			extent.extentLogger("TV Shows", "TV Shows tab overlay is displayed when mouse hover is performed");
//		}
//		verifyElementPresentAndClick(PWAHomePage.objOverlayTray, "Overlay Tray");
//		String Tray = getText(PWAHomePage.objOverlayTray);
//		System.out.println(Tray);
//		if (checkElementDisplayed(PWAHomePage.objOverlayTrayActive(Tray), "Overlay Tray in tv shows page")) {
//			logger.info("Clicked on overlay menu Tray option and tray is highlighted");
//			extent.extentLogger("Tray", "Clicked on overlay menu Tray option and tray is highlighted");
//		}
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, text, "Search field");
		waitTime(5000);
		click(PWASearchPage.objspecificSearch, "Searched content");
		waitTime(35000);
		waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Player Inline Subscription Link");
		if (verifyElementPresent(PWASubscriptionPages.objGetPremiumButton, "Player Inline Subscription Link")) {
//			checkElementDisplayed(PWASubscriptionPages.objLoginSectionInPopup, "Login section");
			verifyElementPresentAndClick(PWASubscriptionPages.objLoginLink, "Login button");
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, SubUsername, "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, SubPassword, "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(10000);
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
			verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button");
		}
		// click(PWAHomePage.objZeelogo1, "Zee logo");
//		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
//			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
//		}
		verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon");
		JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Watchlist"), "My watchlist");
		// verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My
		// Reminders"), "My Reminders");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Transactions"), "My Transactions");
		verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("Logout"), "Logout option");
		verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon");
		JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
		verifyElementPresent(PWAPremiumPage.objViewAllBtn, "View all button");
		JSClick(PWAPremiumPage.objViewAllBtn, "View all button");
		waitTime(5000);
		scrollByWEB();
		if (checkElementDisplayed(PWAHomePage.objUpArrow, "Up Arrow")) {
			logger.info("User is able to scroll in view all page");
			extentLogger("View all", "User is able to scroll in view all page");
		}
		click(PWAPremiumPage.obj1stContentInViewAllPage, "Content");
		if (!checkElementDisplayed(PWAPremiumPage.objViewAllPage, "Veiw all")) {
			logger.info("User is navigated from view all content to respective page");
			extentLogger("View all", "User is navigated from view all content to respective page");
		}
		click(PWAHomePage.objZeelogo1, "Zee logo");
		logout();
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, ExpiredUserName, "Email Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, ExpiredUserPassword, "Password field");

		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(7000);
		if (checkElementDisplayed(PWALoginPage.objCleverTapPopUp, "clever tap pop up")) {
			WebElement popup = getWebDriver().findElement(PWALoginPage.objCleverTapPopUp);
			popup.click();

		}
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, Moviename, "Search field");
		waitTime(5000);
//		click(PWASearchPage.objAssetTitleSearchNavigationTab, "Movie");
		JSClick(PWASearchPage.objAssetTitleSearchNavigationTab, "Movie");
		waitTime(5000);
		if (verifyElementPresent(PWASubscriptionPages.objGetPremiumButton, "Player Inline Subscription Link")) {
			logger.info("Premium contents are not played for expired user");
			extent.extentLogger("Premium", "Premium contents are not played for expired user");
//			click(PWASearchPage.objSubscribepopupCLoseButton, "close button");
		}
		click(PWAHomePage.objZeelogo1, "Zee logo");
		logout();
	}

	@SuppressWarnings("unused")
	public void guesttrayTitleAndContentValidationWithApiData(String tab, String api) throws Exception {
		extent.HeaderChildNode(tab + " page validation with Api response");
		navigateToAnyScreenOnWeb(tab);
		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
		actions.moveToElement(menuOption).build().perform();

		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);

		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
		partialScrollDown();
		List<WebElement> card = getWebDriver().findElements(By.xpath("((//div[@class='slick-list'])[2]//img)"));
		System.out.println(card.size());
		for (int i = 0; i < card.size(); i++) {
			// API DATA
			String title = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			String businessType = resp.jsonPath().getString("buckets[1].items[" + i + "].business_type");
			String minuteType_isDRM = null;
			minuteType_isDRM = resp.jsonPath().getString("buckets[1].items[" + i + "].is_drm");

			apiTitleList.add(title);
			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();

			// to get metadata from content
			String contentMetadata = getAttributValue("title",
					By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));

			// String trayTitle = apiTitleList.get(i);
			System.out.println("UI data : " + contentMetadata);
			System.out.println("api data : " + apiTitleList.get(i));
			logger.info("UI data " + title);
			logger.info("API data " + apiTitleList.get(i));
			extent.extentLogger("UI data ", "UI data " + contentMetadata);
			extent.extentLogger("API data ", "API data " + apiTitleList.get(i));
			if (contentMetadata.equalsIgnoreCase(apiTitleList.get(i))) {
				logger.info("Metadata on the content card is valid with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is valid with Api data");
			} else {
				logger.info("Metadata on the content card is not valid with Api data");
				extent.extentLoggerFail("Metadata", "Metadata on the content card is not valid with Api data");
			}

			// MINUTELY CONTENT CHECK
			waitTime(1000);
//			System.out.println(minuteType_isDRM);
//			if (minuteType_isDRM == null) {
//				System.out.println("No minute content attached");
//			} else {
//				System.out.println("Minute content present");

			if (checkElementDisplayed(PWAPremiumPage.specificContentisMinuteimage(Tray_Title, i + 1),
					"Minute Content")) {
				logger.info("MinuteContent is Present");
				extent.extentLogger("MinuteContent", "MinuteContent is Present");
			} else {
				logger.info("MinuteContent is not Present");
				extent.extentLogger("MinuteContent", "MinuteContent is not Present");
			}
//			}

			// PREMIUM ICON CHECK
			waitTime(1000);
			if (businessType.contains("premium")) {
				if (checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i + 1),
						"Premium icon")) {
					logger.info("Premium icon is Present");
					extent.extentLogger("Premium icon", "Premium icon is Present");
				} else {
					logger.info("Premium icon is not Present");
					extent.extentLoggerFail("Premium icon", "Premium icon not Present");
				}

			} else if (businessType.contains("advertisement") || businessType.contains("free")) {
				if (!checkElementDisplayed(PWAPremiumPage.specificContentPremiumIcon(Tray_Title, i), "Premium icon")) {
					logger.info("premium icon not present and Content is NonPremium");
					extent.extentLogger("Premium icon", "premium icon not present and Content is NonPremium");
				} else {
					logger.info("premium icon is present");
					extent.extentLoggerFail("Premium icon", "premium icon is present");
				}
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Icon")) {
				logger.info("Play icon is displayed");
				extent.extentLoggerPass("Play", "Play icon is displayed");
			} else {
				logger.error("Play icon is not displayed");
				extent.extentLoggerFail("Play", "Play icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Icon")) {
				logger.info("Share icon is displayed");
				extent.extentLoggerPass("Share", "Share icon is displayed");
			} else {
				logger.error("Share icon is not displayed");
				extent.extentLoggerFail("Share", "Share icon is not displayed");
			}
//			waitTime(1000);
//			if (checkElementDisplayed(PWAPremiumPage.objContentCardWatchlistBtn, "Watchlist Icon")) {
//				logger.info("Watchlist icon is displayed");
//				extent.extentLoggerPass("Watchlist", "Watchlist icon is displayed");
//			} else {
//				logger.error("Watchlist icon is not displayed");
//				extent.extentLoggerFail("Watchlist", "Watchlist icon is not displayed");
//			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void FreeContentAndPremiumContent(String userType) throws Exception {
		extent.HeaderChildNode("Landing page module: Free And Premium Content availability");
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie2");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWASearchPage.objSpecificSearch(keyword), "Searched Show");
		waitTime(10000);
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Register popup ")) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Register Pop up close button");
			}
		}
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}
		Back(1);
		PremiumContent(userType);

		navigateHome();
		extent.HeaderChildNode("Verify whether \"Explore In Your Language\" rail is present in Home Landing Page");
		scrollToElement(PWAHomePage.objtrayname("Explore In Your Language"));

		extent.HeaderChildNode(
				"Verify whether \"Explore In Your Language\" collection page is opened when user click on \"More\" CTA");
//		scrollToElement(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("Explore in your Language"));
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("Explore In Your Language"),
				"Explore In Your Language");
		waitTime(3000);
//		click(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("Explore in your Language"), "Explore in your Language");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "More Page")) {
			logger.info("Navigated to More Page");
			extent.extentLogger("View All", "Navigated to More Page");
		} else {
			logger.error("Not navigated to More Page");
			extent.extentLoggerFail("View All", "Not navigated to More Page");
		}
	}

	public void PremiumContent(String userType) throws Exception {
		type(PWASearchPage.objSearchEditBox, "The Villain", "Search Field");
		JSClick(PWASearchPage.objSpecificSearch1("The Villain"), "Searched Content");
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			verifyElementPresent(PWAPlayerPage.objGetPremium, "Teaser Button below the player");
		}
		waitTime(10000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			if (checkElementDisplayed(PWASubscriptionPages.objGetPremiumButton, "Player Inline Subscription Link")) {
				logger.info("Navigated to Consumption Page without trailer content");
				extent.extentLogger("Consumption Page", "Navigated to Consumption Page without trailer content");
			} else {
				logger.info("Navigated to Consumption Page with trailer content");
				extent.extentLogger("Consumption Page", "Navigated to Consumption Page with trailer content");
			}
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void landingpagePropertiesValidation(String userType, String tabname) throws Exception {
		extent.HeaderChildNode("Validating " + tabname + "page Properties");
		navigateToAnyScreenOnWeb(tabname);
		if (!verifyElementPresent(PWALandingPages.obj_Pwa_HamburgerMenu, "Hamburger Menu")) {
			logger.error("HamburgerMenu icon is not displayed");
			extent.extentLoggerFail("HamburgerMenu", "HamburgerMenu icon is not displayed");
		}
		// Zee5Logo
		if (!verifyElementPresent(PWALandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo")) {
			logger.error("Zee5 Logo is not displayed");
			extent.extentLoggerFail("Zee5 Logo", "Zee5 Logo is not displayed");
		}
		// Search button
		if (!verifyElementPresent(PWALandingPages.obj_Pwa_SearchBtn, "Search button")) {
			logger.error("Search button is not displayed");
			extent.extentLoggerFail("Search", "Search button is not displayed");
		}
		// Subscription_button
		waitTime(2000);

		extent.HeaderChildNode("Validating Buy Plan CTA on Header ");
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			if (checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Buy Plan CTA on Header")) {
				logger.error("Buy Plan CTA should not displayed on Header for Subscribed User");
				extent.extentLoggerFail("Buy Plan CTA on Header",
						"Buy Plan CTA should not displayed on Header for Subscribed User");
			} else {
				logger.info("Buy Plan CTA is not displayed on Header is expected for Subscribed User");
				extent.extentLoggerPass("Buy Plan CTA",
						"Buy Plan CTA is not displayed on Header is expected for Subscribed User");
			}
		} else {
			if (!verifyElementPresent(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Buy Plan CTA on Header")) {
				logger.error("Buy Plan CTA is not displayed on Header");
				extent.extentLoggerFail("Buy Plan CTA on Header", "Buy Plan CTA is not displayed on Header");
			}
		}
		waitTime(2500);

		// Joystick
		if (tabname == "Play") {
			extent.HeaderChildNode("Verify the Joystick icon is given on top left for all Play content card");
			waitTime(4500);
			if (!checkElementDisplayed(PWAMusicPage.objJoystickCornerTag, "joystick icon")) {
				logger.error("Joystick Icon functionality failure");
				extent.extentLoggerFail("joystick Icon", "Joystick Icon functionality failure");
			} else {
				logger.info("Joystick Icon functionality Passed");
				extent.extentLoggerPass("joystick Icon", "Joystick Icon functionality Passed");
			}
		}

		extent.HeaderChildNode("Verify On click More/button (>) given at the end of the each tray to rotate the tray");
		scrollToTheElementWEB(PWAPremiumPage.objNextArrowBtn);
		if (verifyElementPresent(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button")) {
			waitTime(3000);
			JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
			logger.info("Tray is rotated");
			extent.extentLoggerPass("Tray is rotated", "Tray is rotated");
		} else {
			logger.error("Tray is not rotated");
			extent.extentLoggerFail("Tray is not rotated", "Tray is not rotated");
		}
		scrollToTopOfPageWEB();
		waitTime(3000);

		extent.HeaderChildNode("Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
		new WebDriverWait(getWebDriver(), 15);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
		} catch (Exception e) {
			e.getMessage();
		}
		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + " second content title :"
				+ secondCarouselTitle + " and third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + " second content title :" + secondCarouselTitle
				+ " and third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}
		partialScroll();
		if (verifyElementPresent(PWAPremiumPage.objViewAllBtn, "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "More Button");
			if (!verifyElementPresent(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("View All", "Not navigated to More Page");
			}
		}
		Back(1);
		waitTime(2000);
		WebHomepageTrayTitleAndContentValidationWithApiData(tabname, ResponseInstance.getResponse());
	}

	public static void scrollUp() {
		js.executeScript("window.scrollBy(0,-250)", "");
	}

	public void BackWeb(int x) {

		try {

			for (int i = 0; i < x; i++) {
				getWebDriver().navigate().back();
				logger.info("Back button is tapped");
				extent.extentLogger("Back", "Back button is tapped");
			}
		} catch (Exception e) {
			logger.error(e);
		}
	}

	public boolean navigateToAnyScreen(String screen) throws Exception {
		for (int i = 0; i < 3; i++) {
			try {
				verifyElementPresentAndClick(PWAHomePage.objTabName(screen), " selected screen :" + screen);
				break;
			} catch (Exception e) {
				try {
					swipeOnTab("Left");
					verifyElementPresentAndClick(PWAHomePage.objTabName(screen), " selected screen :" + screen);
					break;
				} catch (Exception exc) {
					swipeOnTab("Right");
				}
			}
		}
		return false;
	}

	@SuppressWarnings("rawtypes")
	public void swipeOnTab(String dire) throws InterruptedException {
		extent.HeaderChildNode("Swipping on tab");
		touchAction = new TouchAction(getDriver());
		Dimension size = getDriver().findElement(PWAHomePage.objTabContBar).getSize();
		if (dire.equalsIgnoreCase("Left")) {
			int startx = (int) (size.width * 0.5);
			int endx = (int) (size.width * 0.1);
			int starty = size.height / 2;
			touchAction.press(PointOption.point(startx, starty))
					.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
					.moveTo(PointOption.point(endx, starty)).release().perform();
		} else if (dire.equalsIgnoreCase("Right")) {
			int startx = (int) (size.width * 0.5);
			int endx = (int) (size.width * 0.9);
			int starty = size.height / 2;
			touchAction.press(PointOption.point(startx, starty))
					.waitAction(WaitOptions.waitOptions(Duration.ofMillis(1000)))
					.moveTo(PointOption.point(endx, starty)).release().perform();
		}
	}

	/**
	 * Method for language selection
	 * @throws Exception
	 */
	public void selectLanguages() throws Exception {
		extent.extentLogger("", "Language selection");
		waitTime(5000);
		click(PWAHamburgerMenuPage.objLanguageBtnWeb, "Language Button");
		waitTime(3000);
		checkElementDisplayed(PWAHamburgerMenuPage.objContentLanguageBtn, "Content Languages");
		JSClick(PWAHamburgerMenuPage.objContentLanguageBtn, "Content Languages");
		waitTime(3000);
		unselectAllContentLanguages();
		clickElementWithWebLocator(PWAHamburgerMenuPage.objUnselectedKannadaContentLanguage);
		logger.info("Selected content language Kannada");
		extent.extentLogger("", "Selected content language Kannada");
		clickElementWithWebLocator(PWAHamburgerMenuPage.objUnselectedHindiContentLanguage);
		logger.info("Selected content language Hindi");
		extent.extentLogger("", "Selected content language Hindi");
		clickElementWithWebLocator(PWAHamburgerMenuPage.objUnselectedEnglishContentLanguage);
		logger.info("Selected content language English");
		extent.extentLogger("", "Selected content language English");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		waitTime(3000);
	}

	public void landingPagesValidationWeb(String tabName) throws Exception {
		extent.HeaderChildNode("Landing Pages Validation");
		navigateToAnyScreenOnWeb(tabName);
		// waitTime(5000);
		String tab = getText(PWAHomePage.objActiveTab);
		System.out.println(tab);
		logger.info(tab + " tab is highlighted");
		extent.extentLogger("Tab", tab + " tab is highlighted");
		partialScroll();
		// check if tray is loaded

		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(4000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.error("Not navigated to View All Page");
				extent.extentLoggerFail("View All", "Not navigated to View All Page");
			}
		}
		waitTime(3000);
		Back(1);
		waitTime(4000);
		for (int i = 0; i < 5; i++) {
			if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is displayed");
				break;
			} else {
				logger.info("Premium tag is not displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is not displayed");
				partialScroll();
			}
		}
		for (int i = 0; i < 5; i++) {
			if (findElements(PWAPremiumPage.objMinuteContent).size() > 0) {
				logger.info("Minute content is displayed");
				extent.extentLogger("Minute content", "Minute content is displayed");
				break;

			} else {
				logger.info("Minute content is not displayed");
				extent.extentLogger("Minute content", "Minute content is not displayed");
				partialScroll();
			}
		}
//		partialScroll();
//		partialScroll();
		scrollToElement(PWAMusicPage.objArrowToNavigateTop);
		verifyElementPresentAndClick(PWAMusicPage.objArrowToNavigateTop, "Back to Top arrow");
		// waitTime(2000);

	}

//public static void partialScroll() {
//		JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
//		jse.executeScript("window.scrollBy(0,250)", "");
//	}

	public void landingPagesTrailerAndPopUpValidationWeb(String userType, String tabName) throws Exception {
		mandatoryRegistrationPopUp(userType);
		extent.HeaderChildNode("Landing Page Carousel Validation");
		waitTime(2000);
		JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
		if (tabName.equals("Shows")) {
			for (int i = 0; i <= 10; i++) {
				try {
					WebElement premiumText = getWebDriver().findElement(PWAHomePage.objWEBShowsPagePlayCarousel);
					executor.executeScript("arguments[0].click();", premiumText);
					logger.info("Clicked on Carousel card");
					extent.extentLogger("", "Clicked on Carousel card");
					break;
				} catch (Exception e) {
					Thread.sleep(2000);
					try {
						getWebDriver().findElement(PWAHomePage.objWEBShowsPagePlayCarousel).click();
						logger.info("Clicked on Carousel card");
						extent.extentLogger("", "Clicked on Carousel card");
						break;
					} catch (Exception e1) {
						logger.error("Failed to click on Carousel card");
						extent.extentLoggerFail("", "Failed to click on Carousel card");
					}
				}
			}
		} else {
			verifyElementPresentAndClick(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card");
		}
		waitTime(5000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Not navigated to Consumption Page");
		}
		if (checkElementDisplayed(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button")) {
			watchTrailerButtonFunctionalityShows(userType);
		} else {
			logger.info("Trailer is not available for the selected content");
			extent.extentLogger("Trailer", "Trailer is not available for the selected content");
		}
		click(PWAHomePage.objZeelogo1, "Zee Logo");
	}

	public void watchTrailerButtonFunctionalityShows(String userType) throws Exception {
		extent.HeaderChildNode("Watch Trailer Button Validation");
		click(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button");
		waitTime(4000);
		if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
				"'You're watching a trailer' message on the player")) {
			extent.extentLoggerFail("", "Watch Trailer Button functionality failed");
			logger.error("Watch Trailer Button functionality failed");
		}
	}

	public void verifyLandscapeforFreeContentWeb() throws Exception {
		String userType = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(userType);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("consumptionsShow");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows Tab");
		waitTime(4000);
		click(PWASearchPage.objspecificSearch, "Searched content");
		// verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword),
		// "Search Result");
		waitTime(4000);
		partialScroll();
		checkElementDisplayed(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Second Episode set");
		waitTime(5000);
		click(PWAShowsPage.objEpisodeCard, "First Episode Card");
		waitForPlayerAdToComplete("Video Player");
		mouseHover();
		click(PWAPlayerPage.pauseBtn, "Pause button");
		click(PWAPlayerPage.maximizeBtn, "Maximize button");
		waitTime(2000);
		mouseHover();
		click(PWAPlayerPage.minimizeBtn, "Minimize button");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objShowTitle, "Shows Title");
		verifyElementPresent(PWAHamburgerMenuPage.objShowName, "Shows Name");
		verifyElementPresent(PWAHamburgerMenuPage.objEpisodeNumberInShows, "Shows Episode Number");
		waitTime(3000);
		click(PWAHomePage.objZeelogo1, "Zee Logo");
		verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		// JSClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");

	}

	/**
	 * Method to verify landscape mode for premium content
	 * @throws Exception
	 */
	public void verifyLandscapeforPremiumContentWeb() throws Exception {
		String userType = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, "Gattimela" + "\n", "Search Edit box Baarish");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows Tab");
		waitTime(4000);
		JSClick(PWASearchPage.objspecificSearch, "Searched content");
		waitTime(8000);
		partialScroll();
//		JSClick(PWAShowsPage.objEpisodeCardTwo, "Second Episode Card");
		JSClick(PWAShowsPage.objEpisodeCard, "First Episode Card");
		waitForPlayerAdToComplete("Video Player");
		mouseHover();
		JSClick(PWAPlayerPage.pauseBtn, "Pause button");
		JSClick(PWAPlayerPage.maximizeBtn, "Maximize button");
		waitTime(2000);
		mouseHover();
		JSClick(PWAPlayerPage.minimizeBtn, "Minimize button");
		JSClick(PWAPlayerPage.playBtn, "Play button");
		if (checkElementDisplayed(PWASubscriptionPages.objGetPremiumButton, "Inline Subscription link")) {
			JSClick(PWASubscriptionPages.objGetPremiumButton, "Inline Subscription link");
		} else {
			logger.info("Trailer is playing");
			extent.extentLogger("", "Trailer is playing");
		}
	}

	public void VerifyExternalLinkInShowsLandingPageWeb() throws Exception {
		HeaderChildNode("Verify ExternalLink In ShowsLanding Page");
		boolean foundTray = false;
		int i = 0, j = 0;
		String trayTitleInUI = "";
		int noOfSwipes = 70;
		main: for (i = 0; i <= noOfSwipes; i++) {
			ArrayList<WebElement> trays = new ArrayList<WebElement>();
			trays = (ArrayList<WebElement>) getWebDriver().findElements(PWALandingPages.objTrayTitle);
			for (int traycount = 0; traycount < trays.size(); traycount++) {
				if (trays.get(traycount).getAttribute("innerText").equalsIgnoreCase("Play & Win")) {
					trayTitleInUI = trays.get(traycount).getText();
					foundTray = true;
					System.out.println("found in xpath");
					break main;
				}
			}
			scrollDownByY(300);
			waitTime(2000);
			logger.info("Scrolled down");
			extent.extentLogger("scrolled", "Scrolled down");
			if (i == noOfSwipes) {
				logger.error("Play & Win is not displayed");
				extent.extentLoggerFail("failedToLocate", "Play & Win is not displayed");
			}
		}
		if (foundTray == true) {
			for (j = i; j <= noOfSwipes; j++) {
				if (waitForElementPresence(PWAShowsPage.objPlayAndWinFirstItem, 1, trayTitleInUI + " tray")) {
					System.out.println("found");
					break;
				} else {
					scrollDownByY(250);
					waitTime(2000);
					logger.info("Scrolled down");
					extent.extentLogger("scrolled", "Scrolled down");
					if (j == noOfSwipes) {
						logger.error("First item is not displayed");
						extent.extentLoggerFail("failedToLocate", "First item is not displayed");
					}
				}
			}
		}
		if (checkElementDisplayed(PWAShowsPage.objPlayAndWin, "Tray Play & Win")) {
			Set<String> totalHandles = getWebDriver().getWindowHandles();
			String originalHandle = getWebDriver().getWindowHandle();
			System.out.println("Total handles: " + totalHandles.size());
			click(PWAShowsPage.objPlayAndWin, "Play and Win tray");
			waitTime(4000);
			click(PWAShowsPage.objPlayAndWinViewAllFirstItem, "First item");
			waitTime(4000);
			Set<String> totalHandlesAfterClick = getWebDriver().getWindowHandles();
			System.out.println("Total handles after click: " + totalHandlesAfterClick.size());
			System.out.println("now: " + getWebDriver().getWindowHandle());
			if (totalHandlesAfterClick.size() > totalHandles.size()) {
				logger.info("External Window is opened after click");
				extent.extentLogger("New web page loaded", "External Window is opened after click");
			} else {
				logger.info("External Window failed to open");
				extent.extentLogger("New web page is not loaded", "External Window failed to open");
			}
			getWebDriver().switchTo().window(originalHandle);
			navigateToHome();

		} else {
			logger.info("Play and Win tray is not displayed");
		}
	}

//public void RotateTrayValidation() throws Exception {
//	extent.HeaderChildNode("Tray Rotate Icon Validation");
//		partialScroll();
//	verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
//	if(checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button"))
//	{
//		logger.info("Tray is rotated");
//		extent.extentLogger("Tray is rotated", "Tray is rotated");
//		}else {
//			logger.info("Tray is not rotated");
//			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
//		}
//		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
//}

//public void navigateToAnyScreen(String screen) throws Exception {
//	for (int i = 0; i < 3; i++) {
//		try {
//			verifyElementPresentAndClick(PWAHomePage.objTabName(screen), " selected screen :" + screen);
//			break;
//		} catch (Exception e) {
//			try {
//				swipeOnTab("Left");
//				verifyElementPresentAndClick(PWAHomePage.objTabName(screen), " selected screen :" + screen);
//				break;
//			} catch (Exception exc) {
//				swipeOnTab("Right");
//			}
//		}
//	}
//}

	/**
	 * Method to navigate home page
	 */
	public void navigateToHome() {
		String url = getParameterFromXML("url");
		getWebDriver().get(url);
	}

	/**
	 * Modified reco scripts
	 */

	/**
	 * ===============================Tanisha Recommendation
	 * Web============================
	 *
	 */

	public void verificationOfRecoTalamoosWeb(String userType) throws Exception {
		if (userType.equals("Guest")) {
			playContentsToTriggerRecoApiWeb(userType);
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Home", "Trending on ZEE5");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "TV Shows", "Trending Shows");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Movies", "Trending Movies");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Music", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "News", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Premium", "Trending Now");

			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Kids", "Trending on ZEE5");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Videos", "Recommended for you");
			//
			verifyRecoTrayAndPlayContentInDetailsPage(userType, "consumptionsPage");
		} else if (userType.equals("NonSubscribedUser")) {
			playContentsToTriggerRecoApiWeb(userType);
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Home", "Trending on ZEE5");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Premium", "Trending Now");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "TV Shows", "Trending Shows");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Movies", "Trending Movies");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Music", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "News", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Kids", "Trending on ZEE5");

			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Kids", "Trending on ZEE5");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Videos", "Recommended for you");
			//
			verifyRecoTrayAndPlayContentInDetailsPage(userType, "consumptionsPage");
		} else if (userType.equals("SubscribedUser")) {
			playContentsToTriggerRecoApiWeb(userType);
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Home", "Trending on ZEE5");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Home", "You may also like");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Home", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "TV Shows", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Home", "Because you watched");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Premium", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Movies", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "News", "Recommended for you");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Music", "Recommended for you");

			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Kids", "Trending on ZEE5");
			verifyRecoTrayAndPlayContentWithoutAPIWeb(userType, "Videos", "Recommended for you");
			//
			verifyRecoTrayAndPlayContentInDetailsPage(userType, "consumptionsPage");
		} else {
			logger.error("Incorrect userType passed to method");
			extent.extentLogger("incorrectUser", "Incorrect userType passed to method");
		}
	}

	public void playContentsToTriggerRecoApiWeb(String userType) throws Exception {
		extent.HeaderChildNode("Play different contents to trigger Recommendation API");
		playAContentForRecoWeb("Music", getParameterFromXML("musicToTriggerReco"), userType);
		playAContentForRecoWeb("Movies", getParameterFromXML("movieToTriggerReco"), userType);
		playAContentForRecoWeb("Episode", Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("episodeToTriggerReco"), userType);
		playAContentForRecoWeb("News", getParameterFromXML("newsToTriggerReco"), userType);
	}

	public void verifyRecoTrayAndPlayContentWithoutAPIWeb(String userType, String tabName, String recoTrayTitle)
			throws Exception {
		extent.HeaderChildNode(tabName + " tab: Validation of \"" + recoTrayTitle + "\" tray");
		logger.info(tabName + " tab: Verification of " + recoTrayTitle);
		extent.extentLogger("recoverification", tabName + " : Verification of " + recoTrayTitle);
		String nextPageTitle = "";
		boolean firstAssetClicked = false;
		if (navigateToAnyScreenOnWeb(tabName)) {
			firstAssetClicked = swipeTillTrayAndClickFirstAsset(userType, 15, recoTrayTitle,
					"\"" + recoTrayTitle + "\" tray", tabName);
			if (firstAssetClicked) {
				try {
					nextPageTitle = getText(PWAShowsPage.objShowsTitle);
					logger.info("Shows Details page is displayed");
					extent.extentLogger("showDetails", "Shows Details page is displayed");
				} catch (Exception e) {
					try {
						nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
						logger.info("Player screen is displayed");
						extent.extentLogger("playerScreen", "Player screen is displayed");
					} catch (Exception e1) {
						nextPageTitle = "";
					}
				}
			}
			if (!nextPageTitle.equals("")) {
				logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
				extent.extentLogger("playerScreen",
						"Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
				if (!userType.equals("SubscribedUser"))
					try {
						getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
					} catch (Exception e) {
					}
				try {
					getWebDriver().findElement(By.xpath("//a[text()='Home']")).click();
				} catch (Exception e) {
				}
			} else {
				logger.error("Failed to navigate to consumption/details page: \"" + nextPageTitle + "\"");
				extent.extentLoggerFail("playerScreen",
						"Failed to navigate to consumption/details page: \"" + nextPageTitle + "\"");
			}
		}
	}

	public void verifyRecoTrayAndPlayContentInDetailsPage(String userType, String page) throws Exception {
		extent.HeaderChildNode("Verification of talamoos trays in : Consumptions page");
		String content = "";
		if (page.equals("detailsPage"))
			content = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("consumptionsShow");
		else
			content = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("musicToTriggerReco");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, content + "\n", "Search Edit box: " + content);
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		String contentPlayed = "";
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(content), "Search Result");
		if (page.equals("consumptionsPage")) {
			click(PWASearchPage.objCloseRegisterDialog, "Close in Pop Up");
			if (waitForElementPresence(PWAPlayerPage.objContentTitleInConsumptionPage, 30, "Player screen")) {
				contentPlayed = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
				logger.info("Content played: " + contentPlayed);
				extent.extentLogger("contentPlayed", "Content played: " + contentPlayed);
			}
		}
		if (page.equals("detailsPage")) {
			if (waitForElementPresence(PWAShowsPage.objShowsTitle, 2, "Shows Details page")) {
				contentPlayed = getText(PWAShowsPage.objShowsTitle);
				logger.info("Show Details page displayed: " + contentPlayed);
				extent.extentLogger("showDetails", "Show Details page displayed: " + contentPlayed);
			}
		}
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		logger.info("Content ID fetched from URL: " + contentID);
		extent.extentLogger("contentPlayed", "Content ID fetched from URL: " + contentID);
		verifyRecoTraysFromDetailsPage(userType, contentID);
		try {
			getWebDriver().findElement(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn).click();
		} catch (Exception e) {
		}
	}

	public void playAContentForRecoWeb(String contentType, String searchKey, String userType) throws Exception {
		logger.info("Playing content to initiate Reco API: " + contentType);
		// handle mandatory pop up
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("contentplay", "Playing content to initiate Reco API: " + contentType);
		waitTime(2000);
		verifyElementPresent(PWAHomePage.objSearchBtn, "Search icon");
		JSClick(PWAHomePage.objSearchBtn, "Search icon");
		waitTime(1500);
		type(PWASearchPage.objSearchEditBox, searchKey + "\n", "Search Edit box: " + searchKey);
		waitTime(4000);
		waitForElement(PWASearchPage.objSearchedResult(searchKey), 10, "Search Result");
		String contentPlayed = "";
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(searchKey), "Search Result");
		if (!userType.equals("SubscribedUser"))
			try {
				getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
			} catch (Exception e) {
			}
		if (waitForElementPresence(PWAPlayerPage.objContentTitleInConsumptionPage, 30, "Player screen")) {
			contentPlayed = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
			logger.info("Content played: " + contentPlayed);
			extent.extentLogger("contentPlayed", "Content played: " + contentPlayed);
			waitForPlayerAdToComplete("Video Player");
			logger.info("Playing content for some time to trigger Reco API");
			extent.extentLogger("contentPlayed", "Playing content for some time to trigger Reco API");
			waitTime(30000);
		}
	}

	public boolean swipeTillTrayAndClickFirstAsset(String userType, int noOfSwipes, String trayTitle, String message,
			String tab) throws Exception {
		int swipeCount = 0;
		String trayTitleInUI = "", temp = "";
		boolean found = false, titleDisplayed = false;
		List<WebElement> trays;
		ArrayList<String> titles = new ArrayList<String>();
		for (int i = 0; i <= noOfSwipes; i++) {
			trays = new ArrayList<WebElement>();
			trays = getWebDriver().findElements(PWALandingPages.objTrayTitle);
			for (int tr = 0; tr < trays.size(); tr++) {
				try {
					titles.add(trays.get(tr).getAttribute("innerText"));
				} catch (Exception e) {
				}
			}
			for (int traycount = 0; traycount < titles.size(); traycount++) {
				temp = titles.get(traycount);
				if (temp.toLowerCase().contains(trayTitle.toLowerCase())) {
					trayTitleInUI = temp;
					if (!titleDisplayed) {
						logger.info(trayTitleInUI + " is present in " + tab + " page");
						extent.extentLogger("trayfound", trayTitleInUI + " is present in " + tab + " page");
						titleDisplayed = true;
					}
					if (trayTitle.equals("Shows")) {
						try {
							// handle mandatory pop up
							mandatoryRegistrationPopUp(userType);
							getWebDriver().findElement(PWALandingPages.objFirstAssetInTrayIndex(trayTitleInUI)).click();
							found = true;
						} catch (Exception e) {
						}
					} else {
						// handle mandatory pop up
						mandatoryRegistrationPopUp(userType);
						try {
							JSClick(PWALandingPages.objFirstAssetInTrayIndex(trayTitleInUI), "First Asset");
							if (!userType.equals("SubscribedUser")) {
								try {
									getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
								} catch (Exception e) {
								}
							}
							found = true;
						} catch (Exception e1) {
						}
					}
					if (found == true) {
						// handle mandatory pop up
						mandatoryRegistrationPopUp(userType);
						waitTime(2000);
						return true;
					} else {
						scrollDownByY(150);
					}
				}
			}
			scrollDownByY(350);
			waitTime(5000);
			swipeCount++;
			logger.info("Scrolled down");
			extent.extentLogger("scrolled", "Scrolled down");
			if (swipeCount == noOfSwipes) {
				logger.error("Failed to locate reco tray " + trayTitle);
				extent.extentLoggerFail("failedToLocate", "Failed to locate reco card " + trayTitle);
				logger.error("Failed to locate first card");
				extent.extentLoggerFail("failedToLocate", "Failed to locate first card");
			}
		}
		return false;
	}

	/**
	 * Method will swipe till the tray specified in parameters and click on first asset card
	 * @param userType
	 * @param noOfSwipes
	 * @param trayTitle
	 * @param message
	 * @param tab
	 * @return
	 * @throws Exception
	 */
	public boolean swipeTillTrayAndClickFirstAssetType2(String userType, int noOfSwipes, String trayTitle,
			String message, String tab) throws Exception {
		int swipeCount = 0;
		String trayTitleInUI = "", temp = "";
		boolean found = false, titleDisplayed = false;
		List<WebElement> trays;
		ArrayList<String> titles = new ArrayList<String>();
		for (int i = 0; i <= noOfSwipes; i++) {
			trays = new ArrayList<WebElement>();
			trays = getWebDriver().findElements(PWALandingPages.objTrayTitle);
			for (int tr = 0; tr < trays.size(); tr++) {
				try {
					titles.add(trays.get(tr).getAttribute("innerText"));
				} catch (Exception e) {
				}
			}
			for (int traycount = 0; traycount < titles.size(); traycount++) {
				temp = titles.get(traycount);
				if (temp.toLowerCase().contains(trayTitle.toLowerCase())) {
					trayTitleInUI = temp;
					if (!titleDisplayed) {
						logger.info(trayTitleInUI + " is present in " + tab + " page");
						extent.extentLogger("trayfound", trayTitleInUI + " is present in " + tab + " page");
						titleDisplayed = true;
					}
					if (trayTitle.equals("Shows")) {
						try {
							// handle mandatory pop up
							mandatoryRegistrationPopUp(userType);
							getWebDriver().findElement(PWALandingPages.objFirstAssetInTrayIndexType2(trayTitleInUI))
									.click();
							found = true;
						} catch (Exception e) {
						}
					} else {
						// handle mandatory pop up
						mandatoryRegistrationPopUp(userType);
						try {
							JSClick(PWALandingPages.objFirstAssetInTrayIndexType2(trayTitleInUI), "First Asset");
							if (!userType.equals("SubscribedUser")) {
								try {
									getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
								} catch (Exception e) {
								}
							}
							found = true;
						} catch (Exception e1) {
						}
					}
					if (found == true) {
						// handle mandatory pop up
						mandatoryRegistrationPopUp(userType);
						waitTime(2000);
						return true;
					} else {
						scrollDownByY(150);
					}
				}
			}
			scrollDownByY(350);
			waitTime(5000);
			swipeCount++;
			logger.info("Scrolled down");
			extent.extentLogger("scrolled", "Scrolled down");
			if (swipeCount == noOfSwipes) {
				logger.error("Failed to locate reco tray " + trayTitle);
				extent.extentLoggerFail("failedToLocate", "Failed to locate reco card " + trayTitle);
				logger.error("Failed to locate first card");
				extent.extentLoggerFail("failedToLocate", "Failed to locate first card");
			}
		}
		return false;
	}

	public void verifyRecoTraysFromDetailsPage(String userType, String firstAssetID) throws Exception {
		Response recoResp = ResponseInstance.getRecoTraysInDetailsPage(userType, firstAssetID);
		ArrayList<String> recoTraysInDetailsPage = getAllRecoTraysFromDetails(recoResp);
		String trayTitleUI = "", title = "";
		for (int tray = 0; tray < recoTraysInDetailsPage.size(); tray++) {
			String trayTitleAPI = recoTraysInDetailsPage.get(tray);
			trayTitleUI = swipeTillTray(5, trayTitleAPI, "\"" + trayTitleAPI + "\" tray");
			if (tray == 0 && !trayTitleUI.equals("")) {// Verify content play for one reco tray in content details
				try {
					title = getWebDriver().findElement(PWALandingPages.objFirstAssetInTrayTitle(trayTitleUI))
							.getAttribute("data-minutelytitle").toString();
				} catch (Exception e) {
				}
				// handle mandatory pop up
				mandatoryRegistrationPopUp(userType);
				waitForElementAndClick(PWALandingPages.objFirstAssetInTrayIndex(trayTitleAPI), 5,
						"First asset " + title);
				try {
					getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
				} catch (Exception e) {
				}
				String nextPageTitle = "";
				if (waitForElementPresence(PWAShowsPage.objShowsTitle, 2, "Shows Details page")) {
					nextPageTitle = getText(PWAShowsPage.objShowsTitle);
				} else if (waitForElementPresence(PWAPlayerPage.objContentTitleInConsumptionPage, 2, "Player screen")) {
					nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
				}
				if (nextPageTitle.equals(title)) {
					logger.info("Navigated to the correct consumption/details page: \"" + title + "\"");
					extent.extentLogger("playerScreen",
							"Navigated to the correct consumption/details page: \"" + title + "\"");
				} else {
					logger.error("Failed to navigate to consumption/details page: \"" + title + "\"");
					extent.extentLoggerFail("playerScreen",
							"Failed to navigate to consumption/details page: \"" + title + "\"");
				}
				Back(1);
				try {
					getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
				} catch (Exception e) {
				}
			}
		}
	}

	public ArrayList<String> getAllRecoTraysFromDetails(Response response) {
		int numberOfTrays = 0;
		ArrayList<String> recoTrays = new ArrayList<String>();
		try {
			numberOfTrays = response.jsonPath().get("buckets.size()");
		} catch (Exception e) {
			logger.error("API error observed");
			extent.extentLoggerFail("apValue", "API error observed");
			return null;
		}
		for (int tray = 0; tray < numberOfTrays; tray++) {
			recoTrays.add(response.jsonPath().get("buckets[" + tray + "].title").toString());

		}
		logger.info("Reco trays in details page fetched from API: " + recoTrays);
		extent.extentLogger("apValue", "Reco trays in details page fetched from API: " + recoTrays);
		return recoTrays;
	}

	public String swipeTillTray(int noOfSwipes, String trayTitle, String message) throws Exception {
		boolean foundTray = false;
		int i = 0, j = 0;
		String trayTitleInUI = "";
		main: for (i = 0; i <= noOfSwipes; i++) {
			ArrayList<WebElement> trays = new ArrayList<WebElement>();
			trays = (ArrayList<WebElement>) getWebDriver().findElements(PWALandingPages.objTrayTitle);
			for (int traycount = 0; traycount < trays.size(); traycount++) {
				if (trays.get(traycount).getAttribute("innerText").equalsIgnoreCase(trayTitle)) {
					trayTitleInUI = trays.get(traycount).getText();
					foundTray = true;
					break main;
				}
			}
			scrollDownByY(200);
			waitTime(2000);
			logger.info("Scrolled down");
			extent.extentLogger("scrolled", "Scrolled down");
			if (i == noOfSwipes) {
				logger.error(message + " is not displayed");
				extent.extentLoggerFail("failedToLocate", message + " is not displayed");
			}
		}
		if (foundTray == true) {
			for (j = i; j <= noOfSwipes; j++) {
				if (waitForElementPresence(PWALandingPages.objTrayTitleInUI(trayTitleInUI), 1,
						trayTitleInUI + " tray")) {
					break;
				} else {
					scrollDownByY(150);
					waitTime(2000);
					logger.info("Scrolled down");
					extent.extentLogger("scrolled", "Scrolled down");
					if (j == noOfSwipes) {
						logger.error(message + " is not displayed");
						extent.extentLoggerFail("failedToLocate", message + " is not displayed");
					}
				}
			}
		}
		if (!trayTitleInUI.equals("")) {// Scroll till first card of the tray
			for (int k = j; k <= noOfSwipes; k++) {
				try {
					getWebDriver().findElement(PWALandingPages.objFirstAssetInTrayIndex(trayTitleInUI));
					logger.info("Located first asset under " + trayTitleInUI);
					extent.extentLogger("firstAsset", "Located first asset under " + trayTitleInUI);
					scrollDownByY(150);
					return trayTitleInUI;
				} catch (Exception e) {
					scrollDownByY(150);
					waitTime(2000);
					logger.info("Scrolled down");
					extent.extentLogger("scrolled", "Scrolled down");
				}
			}
		}
		return "";
	}

	public void watchlistCheck(String userType) throws Exception {
		watchlistMovies("Gooli", userType);
		watchlistEpisode("Anika tries to be careful", userType);
		watchlistVideo("Top 10 funny life", userType);
		watchlistMusic("Yennenu soda", userType);
	}

	public void watchlistMovies(String text, String userType) throws Exception {
		extent.HeaderChildNode("Validation of Watchlist icon in Movies Consumption Page for " + userType + " User");
		// click(PWAHomePage.objZeelogo1, "zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, text, "Search field");
		waitTime(5000);
		click(PWASearchPage.objSearchMoviesTab, "Movies tab");
		click(PWASearchPage.objspecificSearch, "Searched content");
		// verifyElementPresentAndClick(PWASearchPage.objSearchedResult(text), "Search
		// Result");
		waitTime(8000);
//		if (checkElementDisplayed(PWASearchPage.objSubscribepopup, "Subscribepopup")) {
//			click(PWASearchPage.objSubscribepopupCLoseButton, "close button");
//		}

		if (checkElementDisplayed(PWAPlayerPage.watchListBtn, "Watchlist")) {
			logger.info("Watchlist button is displayed in movie consumption page");
			extent.extentLogger("Watchlist", "Watchlist button is displayed in movie consumption page");
			if (userType.equals("Guest")) {
				JSClick(PWAPlayerPage.watchListBtn, "Watchlist");
				checkElementDisplayed(PWAPlayerPage.watchListLoginPopup,
						"When guest user tries to click on watchlist login popup");
				JSClick(PWAPlayerPage.watchListLoginPopupCloseButton, "Close button in popup");
			}
			// click(PWAHomePage.objZeelogo1, "Zee logo");
		}
	}

	public void watchlistEpisode(String text, String userType) throws Exception {
		extent.HeaderChildNode("Validation of Watchlist icon in Episode Consumption Page for " + userType + " User");
		// click(PWAHomePage.objZeelogo1, "zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, text, "Search field");
		waitTime(5000);
		// click(PWASearchPage.objAssetTitleSearchNavigationTab, "Episode");
		click(PWASearchPage.objspecificSearch, "Searched content");
		waitTime(8000);
		if (checkElementDisplayed(PWASearchPage.objMandatoryPopup, "SignIn popup")) {
			click(PWASearchPage.objMandatoryPopupCloseButton, "close button");
		}
		if (checkElementDisplayed(PWAPlayerPage.watchListBtn, "Watchlist")) {
			logger.info("Watchlist button is displayed in Episode consumption page");
			extent.extentLogger("Watchlist", "Watchlist button is displayed in Episode consumption page");
			if (userType.equals("Guest")) {
				click(PWAPlayerPage.watchListBtn, "Watchlist");
				checkElementDisplayed(PWAPlayerPage.watchListLoginPopup,
						"When guest user tries to click on watchlist login popup");
				click(PWAPlayerPage.watchListLoginPopupCloseButton, "Close button in popup");
			}
			// click(PWAHomePage.objZeelogo1, "Zee logo");
		}
	}

	public void watchlistVideo(String text, String userType) throws Exception {
		extent.HeaderChildNode("Validation of Watchlist icon in Video Consumption Page for " + userType + " User");
		// click(PWAHomePage.objZeelogo1, "zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, text, "Search field");
		waitTime(5000);
		// click(PWASearchPage.objAssetTitleSearchNavigationTab, "Video");
		click(PWASearchPage.objspecificSearch, "Searched content");
		waitTime(8000);
		if (checkElementDisplayed(PWASearchPage.objSubscribepopup, "Subscribepopup")) {
			click(PWASearchPage.objSubscribepopupCLoseButton, "close button");
		}
		if (checkElementDisplayed(PWAPlayerPage.watchListBtn, "Watchlist")) {
			logger.info("Watchlist button is displayed in Video consumption page");
			extent.extentLogger("Watchlist", "Watchlist button is displayed in Video consumption page");
			if (userType.equals("Guest")) {
				click(PWAPlayerPage.watchListBtn, "Watchlist");
				checkElementDisplayed(PWAPlayerPage.watchListLoginPopup,
						"When guest user tries to click on watchlist login popup");
				click(PWAPlayerPage.watchListLoginPopupCloseButton, "Close button in popup");
			}
			// click(PWAHomePage.objZeelogo1, "Zee logo");
		}
	}

	public void watchlistMusic(String text, String userType) throws Exception {
		extent.HeaderChildNode("Validation of Watchlist icon in Music Consumption Page for " + userType + " User");
		// click(PWAHomePage.objZeelogo1, "zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, text, "Search field");
		waitTime(5000);
		// click(PWASearchPage.objAssetTitleSearchNavigationTab, "Music");
		click(PWASearchPage.objspecificSearch, "Searched content");
		waitTime(8000);
		if (checkElementDisplayed(PWASearchPage.objMandatoryPopup, "SignIn popup")) {
			click(PWASearchPage.objMandatoryPopupCloseButton, "close button");
		}
		if (checkElementDisplayed(PWAPlayerPage.watchListBtn, "Watchlist")) {
			logger.info("Watchlist button is displayed in Music consumption page");
			extent.extentLogger("Watchlist", "Watchlist button is displayed in Music consumption page");
			if (userType.equals("Guest")) {
				click(PWAPlayerPage.watchListBtn, "Watchlist");
				checkElementDisplayed(PWAPlayerPage.watchListLoginPopup,
						"When guest user tries to click on watchlist login popup");
				click(PWAPlayerPage.watchListLoginPopupCloseButton, "Close button in popup");
			}
			// click(PWAHomePage.objZeelogo1, "Zee logo");
		}
	}

	public void mouseHoverWatchlist() {
		Actions action = new Actions(getWebDriver());
		WebElement player = getWebDriver().findElement(PWAAddToWatchListPage.objFirstContentInWatchlist);
		action.moveToElement(player).build().perform();
	}

	public void registerandCheckCW() throws Exception {
		extent.HeaderChildNode("Registering as new user and checking Continue Watching Tray");
		click(PWALoginPage.objSignUpBtnWEB, "Sign up button");
		waitTime(3000);
		waitForElementDisplayed(PWALoginPage.objSignUpHeaderInSignUpPageWeb, 10);
		checkElementDisplayed(PWALoginPage.objSignUpHeaderInSignUpPageWeb, "SignUp Page");

		checkElementDisplayed(PWALoginPage.objEmailField, "Email/PhoneNo Field");

		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, RandomStringGenerator(5) + "@gmail.com", "Email Field");

		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, NonSubPassword, "Password field");
		calenderFunctionality();
		click(PWASignupPage.objGenderMaleBtn, "Gender Option");
		waitTime(5000);
		click(PWASignupPage.objSignUpButtonHighlightedWeb, "Sign up Button");
		waitTime(3000);
		if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue Watching tray") == false) {
			extent.extentLogger("Verify Continue Watching tray",
					"Continue watching tray is not displayed for guest user");
			logger.info("Continue watching tray is not displayed for guest user");
		} else {
			softAssert.assertAll();
			extent.extentLoggerFail("Verify Continue Watching tray",
					"Continue watching tray is displaying for guest user");
			logger.info("Continue watching tray is displaying for guest user");
		}
		logout();
	}

	public void audioTrackSelection() throws Exception {
		HeaderChildNode("Audio Track Functionality");
		click(PWAHomePage.objZeeLogo, "Zee logo");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWAHomePage.objSearchField, audioTrackContent + "\n", "Search");
		waitTime(5000);

		verifyElementPresentAndClick(PWASearchPage.objFirstSearchResult, "Searched content");
		waitTime(3500);

		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Settings icon");
		verifyElementPresentAndClick(PWAPlayerPage.objPlayerAudioTrackIcon, "Audio Track icon");
		waitTime(5000);
		int size = getWebDriver().findElements(PWAPlayerPage.objPlayerAudioTracksAvailable).size();
		if (size == 0) {
			logger.info("Audio Tracks unavailable");
			extent.extentLogger("quality", "Audio Tracks unavailable");
		} else {
			for (int i = 1; i <= size; i++) {
				logger.info("Audio Tracks available : "
						+ getAttributValue("innerText", PWAPlayerPage.objAllQualityOptions(i)));
				extent.extentLogger("audio", "Audio Tracks available : "
						+ getAttributValue("innerText", PWAPlayerPage.objAllQualityOptions(i)));
			}
			// Select audio tracks
			List<WebElement> unselected = findElements(PWAPlayerPage.objPlayerUnSelectedAudioTrack);
			ArrayList<String> tracks = new ArrayList<String>();
			for (int i = 0; i < unselected.size(); i++) {
				tracks.add(unselected.get(i).getText());
			}
			for (int i = 0; i < tracks.size(); i++) {
				String selectedTrackBefore = getText(PWAPlayerPage.objPlayerSelectedAudioTrack);
				logger.info("Audio Track before selection: " + selectedTrackBefore);
				extent.extentLogger("quality", "Audio Track before selection: " + selectedTrackBefore);
				String track = tracks.get(i);
				waitTime(5000);
				click(PWAPlayerPage.objPlayerUnSelectedAudioTrack(track), "Audio Track " + track);
				waitTime(3000);
				click(PWAPlayerPage.settingsBtn, "Settings icon");
				waitTime(3000);
				click(PWAPlayerPage.objPlayerAudioTrackIcon, "Audio Track icon");
				waitTime(3000);
				String selectedTrackAfter = getElementPropertyToString("innerText",
						PWAPlayerPage.objPlayerSelectedAudioTrack, "Selected Audio Track");
				logger.info("Audio Track after selection : " + selectedTrackAfter);
				extent.extentLogger("quality", "Quality option after selection: " + selectedTrackAfter);
				if (selectedTrackBefore.equals(selectedTrackAfter)) {
					logger.error("Audio Track selection unsuccessful");
					extent.extentLoggerFail("quality", "Audio Track selection unsuccessful");
				} else {
					logger.info("Audio Track selection successful");
					extent.extentLogger("quality", "Audio Track selection successful");
				}
			}
		}
	}

	/**
	 * Method to validate traytitle and content with API in News page
	 * @param tab
	 * @param api
	 * @throws Exception
	 */
	@SuppressWarnings("unused")
	public void trayTitleAndContentValidationWithApiDataNews(String tab, String api) throws Exception {

		extent.HeaderChildNode(tab + " page validation with Api response");
		navigateToAnyScreenOnWeb(tab);
		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
		actions.moveToElement(menuOption).build().perform();

		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);

		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
		partialScrollDown();
		List<WebElement> card = getWebDriver().findElements(By.xpath("((//div[@class='slick-list'])[2]//img)"));
		System.out.println(card.size());
		for (int i = 0; i < card.size(); i++) {
			// API DATA
			String title = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			String businessType = resp.jsonPath().getString("buckets[1].items[" + i + "].business_type");

			apiTitleList.add(title);
			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();

			// to get metadata from content
			String contentMetadata = getAttributValue("title",
					By.xpath("((//div[@class='slick-list'])[2]//img)[" + (i + 1) + "]"));

			// String trayTitle = apiTitleList.get(i);
			logger.info("UI data " + title);
			logger.info("API data " + apiTitleList.get(i));
			extent.extentLogger("API data ", "API data " + apiTitleList.get(i));
			waitTime(2000);
			extent.extentLogger("UI data ", "UI data " + contentMetadata);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Icon")) {
				logger.info("Play icon is displayed");
				extent.extentLogger("Play", "Play icon is displayed");
			} else {
				logger.info("Play icon is not displayed");
				extent.extentLogger("Play", "Play icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Icon")) {
				logger.info("Share icon is displayed");
				extent.extentLogger("Share", "Share icon is displayed");
			} else {
				logger.info("Share icon is not displayed");
				extent.extentLogger("Share", "Share icon is not displayed");
			}
			waitTime(1000);
			if (checkElementDisplayed(PWAPremiumPage.objContentCardWatchlistBtn, "Watchlist Icon")) {
				logger.info("Watchlist icon is displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is displayed");
			} else {
				logger.info("Watchlist icon is not displayed");
				extent.extentLogger("Watchlist", "Watchlist icon is not displayed");
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void launchCheck(String userType) throws Exception {
		HeaderChildNode("Verify after launch user can see signup/login option");
		if (userType.equals("Guest")) {
//			if (checkElementDisplayed(PWALoginPage.objSignUpBtnWEB, "Sign Up button")) {
//				logger.info("Guest user can see Sign Up option after launch");
//				extentLoggerPass("Launch", "Guest user can see Sign Up option after launch");
//			} else {
//				logger.error("Guest user cannot see Sign Up option after launch");
//				extentLoggerFail("", "Guest user should see Sign Up option after launch");
//			}
			if (checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login button")) {
				logger.info("Guest user can see Login option after launch");
				extentLoggerPass("Launch", "Guest user can see Login option after launch");
			} else {
				logger.error("Guest user cannot see Login option after launch\"");
				extentLoggerFail("", "Guest user should see Login option after launch");
			}
		}
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			if (!checkElementDisplayed(PWALoginPage.objSignUpBtnWEB, "Sign up button")) {
				logger.info(userType + "cannot see option signup after launch");
				extentLoggerPass("Launch", userType + "cannot see option signup after launch");
			} else {
				logger.info("User should not see Sign Up option after launch");
				extentLoggerFail("", "User should not see Sign Up option after launch");
			}
			if (!checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login button")) {
				logger.info(userType + "cannot see option login after launch");
				extentLoggerPass("Launch", userType + "cannot see option login after launch");
			} else {
				logger.info("User should not see Login option after launch");
				extentLoggerFail("", "User should not see Login option after launch");
			}
		}
	}

	/**
	 * Author : Lakshmi
	 */
	public void landingPagesValidationclub(String tabName) throws Exception {
		extent.HeaderChildNode(tabName + "Pages Validation");
		verifyElementPresentAndClick(PWAHomePage.objTabName(tabName), tabName);
		// waitTime(5000);
		String tab = getText(PWAHomePage.objActiveTab);
		System.out.println(tab);
		logger.info(tab + " tab is highlighted");
		extent.extentLogger("Tab", tab + " tab is highlighted");

		for (int i = 1; i <= 2; i++) {
			if (checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray")) {
				System.out.println("Tray is loaded for " + i + " scroll");
				logger.info("Tray is loaded for " + i + " scroll");
				extent.extentLogger("Tray load", "Tray is loaded for " + i + " scroll");
			} else {
				ScrollToTheElement(PWAPremiumPage.objTrayTitle(i));
				checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray");
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		// check if tray is loaded
		scrollDownWEB();
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
		}
		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(5000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		Back(1);
		waitTime(2000);

		waitTime(2000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}

		waitTime(3000);
		Back(1);
		waitTime(4000);
		for (int i = 0; i < 5; i++) {
			if (findElements(PWAMusicPage.objclubTag).size() > 0) {
				logger.info("club tag is displayed");
				extent.extentLogger("club Tag", "club Tag is displayed");
				break;
			} else {
				logger.info("club tag is not displayed");
				extent.extentLogger("club Tag", "club Tag is not displayed");
				partialScroll();
			}
		}
		for (int i = 0; i < 5; i++) {
			if (findElements(PWAPremiumPage.objMinuteContent).size() > 0) {
				logger.info("Minute content is displayed");
				extent.extentLogger("Minute content", "Minute content is displayed");
				break;

			} else {
				logger.info("Minute content is not displayed");
				extent.extentLogger("Minute content", "Minute content is not displayed");
				partialScroll();
			}
		}
		partialScroll();
		partialScroll();
		verifyElementPresentAndClick(PWAMusicPage.objArrowToNavigateTop, "Back to Top arrow");
		// waitTime(2000);
		click(PWAHomePage.objZeelogo1, "Zee Logo");
	}

	public void trayTitleAndContentValidationWithApiDataClub(String tab, String api) throws Exception {
		extent.HeaderChildNode(tab + " page tray asset validation");
		waitTime(5000);
		getWebDriver().findElement(By.xpath("(//a[contains(@class,'noSelect')][contains(text(),'" + tab + "')])[1]"))
				.click();
		// waitTime(7000);
		// navigateToAnyScreenOnWeb(tab);
		waitForElementDisplayed(PWAMusicPage.objPremiumTag, 30);
		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);
		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
		partialScrollDown();
		for (int i = 0; i < 5; i++) {
			String titles = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			// System.out.println("Api data " +titles);
			logger.info("Api data " + titles);
			extent.extentLogger("Api data ", "Api data " + titles);
			apiTitleList.add(titles);
			Actions actions = new Actions(getWebDriver());
			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("(//div[@class='slick-list']//div[@class='content'])[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();
			String trayTitle = apiTitleList.get(i);
			logger.info("UI data " + titles);
			extent.extentLogger("UI data ", "UI data " + titles);
			if (trayTitle.equalsIgnoreCase(apiTitleList.get(i))) {
				logger.info("Metadata on the content card is validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is validated with Api data");
			} else {
				logger.info("Metadata on the content card is not validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is not validated with Api data");
			}
			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Button");
			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Button");
			waitTime(1000);
			verifyElementEnabled(PWAPremiumPage.objContentCardWatchlistBtn, "Add to Watchlist Button");
		}
	}

	public void landingPagesTrailerAndPopUpValidationClub(String userType, String tabName) throws Exception {
		extent.HeaderChildNode(tabName + "Page Carousel Validation");

		waitTime(5000);

		getWebDriver()
				.findElement(By.xpath("(//a[contains(@class,'noSelect')][contains(text(),'" + tabName + "')])[1]"))
				.click();
		waitTime(7000);
		// verifyElementPresentAndClick(PWAHomePage.objTabName(tabName), tabName);
		// waitTime(5000);
		waitForElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarousel, 10);
		checkElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card");
		mandatoryRegistrationPopUp(userType);
		click(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card");
		waitTime(5000);
		if (BROWSER.equals("Firefox")) {
			waitForPlayerLoaderToComplete();
		}
		if (checkElementDisplayed(PWAPlayerPage.objPlayer, "player screen")) {
			logger.info("User is navigated to consumption page after tapping on content in listed collection");
			extent.extentLogger("Consumption page",
					"User is navigated to consumption page after tapping on content in listed collection");
		}
		checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup");
		checkElementDisplayed(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen,
				"Subscribe CTA with Club Icon below the Player");
		checkElementDisplayed(PWAPremiumPage.objSubscribeNowAndGoAdFree, "Subscribe Now And Go Ad Free Message");
		if (userType.contains("NonSubscribedUser") || (userType.contains("Guest"))) {

			if (checkElementDisplayed(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button")) {
				mandatoryRegistrationPopUp(userType);
				JSClick(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button");
				waitTime(10000);
				if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
					verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");

				}
			} else {
				logger.info("Trailer is not available for the selected content");
				extent.extentLogger("Trailer", "Trailer is not available for the selected content");
				if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
					verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");
				}
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		Playverification(userType);
		waitTime(5000);
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {

			extent.HeaderChildNode("Verification of buttons in other display language (PWA2_4352)");

			verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			waitTime(2000);
			clickElementWithWebLocator(PWAHamburgerMenuPage.objUnselectedKannadaContentLanguage);

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton,
					"Apply button on content language screen");
			waitTime(3000);
			navigateToAnyScreenOnWeb("ಕ್ಲಬ್");
			// verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply
			// button on content language screen");
			// waitForElementAndClick(PWAHamburgerMenuPage.objgetclubinKannada, 20, "Get
			// club");
			verifyElementPresent(PWAHamburgerMenuPage.objgetclubinKannada, "Get club in kannada");
			JSClick(PWAHamburgerMenuPage.objgetclubinKannada, "Get club in kannada");
			waitTime(5000);
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
			verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			waitTime(2000);

			clickElementWithWebLocator(PWAHamburgerMenuPage.objUnselectedEnglishContentLanguage);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton,
					"Apply button on content language screen");
		}
	}

	public void Playverification(String userType) throws InterruptedException, Exception {

		if (userType.equalsIgnoreCase("Guest"))

		{
			extent.HeaderChildNode("Before TV content play verification (PWA24_423)");
			navigateToAnyScreenOnWeb("Club");
			Actions actions = new Actions(getWebDriver());
			WebElement menuOption = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
			actions.moveToElement(menuOption).build().perform();
			waitTime(5000);
			if (checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"),
					"First Content Card Of Before TV Tray")) {
				click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");
				waitTime(10000);
				String a = getText(PWAHamburgerMenuPage.objeposidedate);
				System.out.println(a);
				// Boolean.parseBoolean(a);
				waitForElement(PWASubscriptionPages.objGetPremiumPopupTitle, 40, "Get Premium Popup Title");
				waitTime(2000);
				checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Get Premium Popup Title");
				waitTime(2000);
				verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");
				waitTime(2000);
				verifyElementPresentAndClick(PWASubscriptionPages.objPopup99Plan, "99 Plan in Popup");
				waitTime(2000);
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "Popup Proceed Button");

				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
				type(PWALoginPage.objEmailField, "sharath@mailnesia.com", "Email Field");
				waitTime(3000);
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objproceedbtn, "Proceed button");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, "sharathdv", "Password field");
				waitTime(5000);
				click(PWAHamburgerMenuPage.objproceed2btn, "Proceed button");
				waitTime(3000);

				if (waitForElement(PWASubscriptionPages.objUpgradePopupTitle, 20, "Subscribe Pop Up")) {

					verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");

				}
				String b = getText(PWAHamburgerMenuPage.objeposidedate);
				System.out.println(b);
				// Boolean.parseBoolean(b);
				if (a.equalsIgnoreCase(b)) {
					logger.info(" Navigated to Before tv eposide");
					extent.extentLogger("", " Navigated to Before tv eposide");
				} else {
					logger.info("Not Navigated to Before tv eposide");
					extent.extentLoggerFail("", "Not Navigated to Before tv eposide");
				}
				logout();
			}
		}
	}

	public void popupvalidationforCTAClubAnsPremium(String userType, String tabName) throws Exception {
		extent.HeaderChildNode(tabName + " page Carousel validation");
		checkElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarouselgetclub, "Get Club on carousel banner");
		checkElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarouselPlay, "Play button  on carousel banner");

		if (userType.equals("SubscribedUser")) {

			if (tabName.equals("Club")) {
				logout();
				extent.HeaderChildNode("Login as club User");
				// String SubscribedUsername =
				// Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().getParameter("SubscribedUserName");
				// String SubscribedPassword =
				// Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().getParameter("SubscribedPassword");
				verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
				type(PWALoginPage.objEmailField, "testzee5_6@gmail.com", "Email Field");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, "123456", "Password field");
				waitTime(5000);
				click(PWALoginPage.objWebLoginButton, "Login Button");
				waitTime(3000);
				verifyElementExist(PWAZee5OriginalPage.objWEBMastheadCarouselPlay, "Play button  on carousel banner");
				logout();
				ZeeWEBPWALogin(userType);
				// verifyElementExist(PWAZee5OriginalPage.objWEBMastheadCarouselPlay, "Play
				// button on carousel banner");
				checkElementDisplayed(PWAHomePage.objSearchBtn, "Search button");
				click(PWAHomePage.objSearchBtn, "Search button");
				type(PWASearchPage.objSearchEditBox, "Bebaakee ", "Search field");
				click(PWASearchPage.objspecificSearch, "Searched content");
				if (checkElementDisplayed(PWAHomePage.objKalGetFirstEpisode, "Get First Episode")) {
					click(PWAHomePage.objKalGetFirstEpisodePlayicon, "Play Button");
				}
			}
			if (tabName.equals("Premium")) {
				// verifyElementExist(PWAZee5OriginalPage.objWEBMastheadCarouselPlay, "Play
				// button on carousel banner");
				checkElementDisplayed(PWAHomePage.objSearchBtn, "Search button");
				click(PWAHomePage.objSearchBtn, "Search button");
				type(PWASearchPage.objSearchEditBox, "Abhay ", "Search field");
				click(PWASearchPage.objspecificSearch, "Searched content");
				if (checkElementDisplayed(PWAHomePage.objKalGetFirstEpisode, "Get First Episode")) {
					click(PWAHomePage.objKalGetFirstEpisodePlayicon, "Play Button");
				}
			}
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void VerifyCTA(String userType) throws Exception {
		String clubShow = getParameterFromXML("clubShow");
		String premiumShow = getParameterFromXML("premiumShow");
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Guest User: Verify Get Club CTA on Carousel banner for club content");
			navigateToAnyScreenOnWeb("Club");
			waitForElementPresence(PWAHomePage.objGetClubCta, 10, "\"Get Club\" CTA on Carousel banner");
			extent.HeaderChildNode("Guest User: Verify Get Premium CTA on Carousel banner for premium content");
			navigateToAnyScreenOnWeb("Premium");
			waitForElementPresence(PWAHomePage.objGetPremiumCta, 10, "\"Get Premium\" CTA on Carousel banner");
			extent.HeaderChildNode("Guest User: Verify Get Club CTA on show details banner of a club content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, clubShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(clubShow), "Searched content : " + clubShow);
			verifyElementPresent(PWAShowsPage.objGetClubCTAInShowDetails,
					"\"Get Club\" CTA on Club Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode("Guest User: Verify Get Premium CTA on show details banner of a premium content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, premiumShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(premiumShow), "Searched content : " + premiumShow);
			verifyElementPresent(PWAShowsPage.objGetPremiumCTAInShowDetails,
					"\"Get Premium\" CTA on Premium Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

			extent.HeaderChildNode(
					"Verify whether subscription page show All Access tab with 499 selected when click on\"SUBCRIBE NOW\" CTA from Premium Content of Carousel banner");
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Buy Plan CTA on Header");
			verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
			navigateHome();
			// Login with club user
			extent.HeaderChildNode("Club User: Verify Play CTA on Carousel banner for club content");
			// loginWithUserEmail("testzee5_6@gmail.com","123456");
			loginWithUserEmail("edpwa4@mailnesia.com", "1234567");
			navigateToAnyScreenOnWeb("Club");
			verifyElementPresent(PWAHomePage.objPlayBtn, "\"Play\" CTA on Carousel banner");
			extent.HeaderChildNode("Club User: Verify Upgrade CTA on Carousel banner for premium content");
			navigateToAnyScreenOnWeb("Premium");
			verifyElementPresent(PWAHomePage.objUpgradeBtn, "\"Upgrade\" CTA on Carousel banner");
			extent.HeaderChildNode(
					"Club User: Verify Watch First Episode CTA on show details banner of a club content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, clubShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(clubShow), "Searched content : " + clubShow);
			verifyElementPresent(PWAHomePage.objKalGetFirstEpisode,
					"\"Watch first episode\" CTA on Club Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode("Club User: Verify Upgrade CTA on show details banner of a premium content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, premiumShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(premiumShow), "Searched content : " + premiumShow);
			verifyElementPresent(PWAShowsPage.objUpgradeCTAInShowDetails,
					"\"Upgrade\" CTA on Premium Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			logout();
		}
		if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Non Subscribed User: Verify Get Club CTA on Carousel banner for club content");
			navigateToAnyScreenOnWeb("Club");
			waitForElementPresence(PWAHomePage.objGetClubCta, 10, "\"Get Club\" CTA on Carousel banner");
			extent.HeaderChildNode(
					"Non Subscribed User: Verify Get Premium CTA on Carousel banner for premium content");
			navigateToAnyScreenOnWeb("Premium");
			waitForElementPresence(PWAHomePage.objGetPremiumCta, 10, "\"Get Premium\" CTA on Carousel banner");
			extent.HeaderChildNode("Non Subscribed User: Verify Get Club CTA on show details banner of a club content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, clubShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(clubShow), "Searched content : " + clubShow);
			verifyElementPresent(PWAShowsPage.objGetClubCTAInShowDetails,
					"\"Get Club\" CTA on Club Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode(
					"Non Subscribed User: Verify Get Premium CTA on show details banner of a premium content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, premiumShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(premiumShow), "Searched content : " + premiumShow);
			verifyElementPresent(PWAShowsPage.objGetPremiumCTAInShowDetails,
					"\"Get Premium\" CTA on Premium Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

			extent.HeaderChildNode(
					"Verify whether subscription page show All Access tab with 499 selected when click on\"SUBCRIBE NOW\" CTA from Premium Content of Carousel banner");
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Buy Plan CTA on Header");
			verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
			navigateHome();
		}
		if (userType.equalsIgnoreCase("SubscribedUser")) {
			extent.HeaderChildNode("Subscribed User: Verify Play CTA on Carousel banner for club content");
			navigateToAnyScreenOnWeb("Club");
			verifyElementPresent(PWAHomePage.objPlayBtn, "\"Play\" CTA on Carousel banner");
			extent.HeaderChildNode("Subscribed User: Verify Play CTA on Carousel banner for premium content");
			navigateToAnyScreenOnWeb("Premium");
			verifyElementPresent(PWAHomePage.objPlayBtn, "\"Play\" CTA on Carousel banner");
			extent.HeaderChildNode(
					"Subscribed User: Verify Watch first episode CTA on show details banner of a club content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, clubShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(clubShow), "Searched content : " + clubShow);
			verifyElementPresent(PWAHomePage.objKalGetFirstEpisode,
					"\"Watch first episode\" CTA on Club Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			extent.HeaderChildNode(
					"Subscribed User: Verify Watch first episode CTA on show details banner of a premium content");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, premiumShow + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objSearchedResult(premiumShow), "Searched content : " + premiumShow);
			verifyElementPresent(PWAHomePage.objKalGetFirstEpisode,
					"\"Watch first episode\" CTA on Premium Show Details Page Banner");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
	}

	public void loginWithUserEmail(String userid, String pwd) throws Exception {
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "" + userid, "Email Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "" + pwd, "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(3000);
	}

	/**
	 * Method to validate traytitle and content with API
	 * @param tabName
	 * @param api
	 * @throws Exception
	 */
	public void trayTitleAndContentValidationWithApiDataHome(String tabName, String api) throws Exception {
		// extent.HeaderChildNode(" HLS_020 :User mouse hovered on any thumbnail/Content
		// metadata is displayed");
		waitTime(2000);
//		getWebDriver()
//				.findElement(By.xpath("(//a[contains(@class,'noSelect')][contains(text(),'" + tabName + "')])[1]"))
//				.click();
		// waitTime(7000);
		navigateToAnyScreenOnWeb(tabName);
//		waitForElementDisplayed(PWAMusicPage.objPremiumTag, 30);
		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);
		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
		partialScrollDown();
		for (int i = 0; i < 5; i++) {
			String titles = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			// System.out.println("Api data " +titles);
			logger.info("Api data " + titles);
			extent.extentLogger("Api data ", "Api data " + titles);
			apiTitleList.add(titles);
			Actions actions = new Actions(getWebDriver());
			WebElement contentCard = getWebDriver()
					.findElement(By.xpath("(//div[@class='slick-list']//div[@class='content'])[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();
			String trayTitle = apiTitleList.get(i);
			logger.info("UI data " + titles);
			extent.extentLogger("UI data ", "UI data " + titles);
			if (trayTitle.equalsIgnoreCase(apiTitleList.get(i))) {
				logger.info("Metadata on the content card is validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is validated with Api data");
			} else {
				logger.info("Metadata on the content card is not validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is not validated with Api data");
			}

			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Button");
			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Button");
			waitTime(1000);
			verifyElementEnabled(PWAPremiumPage.objContentCardWatchlistBtn, "Add to Watchlist Button");
		}
	}

	/**
	 * Method for home page validation
	 * @param userType
	 * @param tabName
	 * @throws Exception
	 */
	public void Homepagevalidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode(" HLS_012 : Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
		navigateToAnyScreenOnWeb("Home");
		new WebDriverWait(getWebDriver(), 15);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

		} catch (Exception e) {
			e.getMessage();
		}
		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + " second content title :"
				+ secondCarouselTitle + " and third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + " second content title :" + secondCarouselTitle
				+ " and third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}
		extent.HeaderChildNode(" HLS_020 : User mouse hovered on any thumbnail/Content metadata is displayed");
		trayTitleAndContentValidationWithApiDataHome(tabName, "home");

		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(" HLS_013 : Verify Metadata and CTA's in carousels.");
			if (tabName.equals("Premium")) {
				verifyElementPresent(PWAHamburgerMenuPage.objplay, "Play button ");
				verifyElementPresent(PWAHamburgerMenuPage.objGetpremium, "Get premium button ");
				verifyMetadataOnCarousel("Premium", "premiumcontents");
			}
			if (tabName.equals("Club")) {
				verifyElementPresent(PWAHamburgerMenuPage.objplay, "Play button ");
				verifyElementPresent(PWAHamburgerMenuPage.objClub, "Get club button");
				// verifyMetadataOnCarousel("Club", "");
			}
		}
		/*
		 * extent.HeaderChildNode(" HLS_014 : Verify The Rails are displayed");
		 *
		 * waitTime(3000); scrollDownWEB();
		 * verifyElementPresent(PWAHamburgerMenuPage.objrail, "Rails");
		 *
		 * extent.HeaderChildNode("HLS_018 : Verify that user is able to rotate tray");
		 * JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		 * logger.info("Tray is rotated"); extent.extentLogger("Tray is rotated",
		 * "Tray is rotated"); JSClick(PWAPremiumPage.objPreviousArrowBtn,
		 * "Previous Arrow Button"); waitTime(2000);
		 *
		 * extent.HeaderChildNode("HLS_015 : Verify View All button functionality"); if
		 * (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
		 * click(PWAPremiumPage.objViewAllBtn, "View All Button"); waitTime(5000); if
		 * (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
		 * logger.info("Navigated to View All Page"); extent.extentLogger("View All",
		 * "Navigated to View All Page"); Back(1); } else {
		 * logger.info("Not navigated to View All Page");
		 * extent.extentLogger("View All", "Not navigated to View All Page"); } }
		 */

		extent.HeaderChildNode(" HLS_014 : Verify The Rails are displayed");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode("HLS_018 : Verify that user is able to rotate tray");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		waitTime(1000);
		logger.info("Tray is rotated");
		extent.extentLogger("Tray is rotated", "Tray is rotated");
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");

		extent.HeaderChildNode("HLS_015 : Verify More button functionality");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "More Button");
			waitTime(5000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.info("Navigated to More Page");
				extent.extentLogger("More", "Navigated to More Page");
				Back(1);
			} else {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("More", "Not navigated to More Page");
			}
		}

		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(" HLS_016 : Verify the Continue Watching tray is not displayed ");
			waitTime(3000);
			if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue Watching tray") == false) {
				extent.extentLogger("Verify Continue Watching tray",
						"Continue watching tray is not displayed for guest user");
				logger.info("Continue watching tray is not displayed for guest user");
			} else {
				softAssert.assertAll();
				extent.extentLoggerFail("Verify Continue Watching tray",
						"Continue watching tray is displaying for guest user");
				logger.info("Continue watching tray is displaying for guest user");
			}
		}

		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {

			extent.HeaderChildNode(" HLS_017 : Verify the premium tag for all premium content card");
			waitTime(3000);
			for (int i = 0; i < 10; i++) {
				if (getWebDriver().findElements(PWAHamburgerMenuPage.objpremiumcard).size() > 0) {
					logger.info("Premium tag is displayed");
					extent.extentLogger("Tag", "Premium Tag is isplayed");
					break;
				} else {
					scrollDownByY(300);
					if (i == 4) {
						logger.info("Premium tag is not displayed");
						extent.extentLogger("Tag", "Premium Tag is not displayed");
					}
				}
			}
			scrollToElement(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn);
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");
		}

		extent.HeaderChildNode(" HLS_019 : Availability and functionality of play, Share icons");
		Actions actions = new Actions(getWebDriver());
		WebElement contentCard = getWebDriver()
				.findElement(By.xpath("(//div[@class='slick-list']//div[@class='content'])[" + 2 + "]"));
		actions.moveToElement(contentCard).build().perform();
		waitTime(1000);
		checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Button");
		JSClick(PWAPremiumPage.objContentCardPlayBtn, "Play Button");

		waitTime(1000);
		checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Button");
		JSClick(PWAPremiumPage.objContentCardShareBtn, "Share Button");
//		Back(1);
		waitTime(1000);
//		verifyElementEnabled(PWAPremiumPage.objContentCardWatchlistBtn, "Add to Watchlist Button");
//		JSClick(PWAPremiumPage.objContentCardWatchlistBtn, "Add to Watchlist Button");
//		if (userType.equalsIgnoreCase("Guest")) {
//			if (checkElementDisplayed(PWAHomePage.objLoginRequiredPopUpHeader, "Login Required PopUp Header")) {
//				extent.extentLogger(
//						"Login popup is displayed when clicked on 'Add to Watchlist' icon on tray content card",
//						"Login popup is displayed when clicked on 'Add to Watchlist' icon on tray content card for guest user");
//				logger.info(
//						"Login popup is displayed when clicked on 'Add to Watchlist' icon on tray content card for guest user");
//				click(PWAHomePage.objPopupCloseicon(), "Popup Close icon");
//
//			} else {
//				extent.extentLoggerFail(
//						"Login popup is not displayed when clicked on 'Add to Watchlist' icon on tray content card",
//						"Login popup is not displayed when clicked on 'Add to Watchlist' icon on tray content card");
//				logger.info(
//						"Login popup is not displayed when clicked on 'Add to Watchlist' icon on tray content card");
//			}
//		}

//		extent.HeaderChildNode(" HLS_021 : Verify the availability of the Footer section at bottom");
//		boolean found=false;
//		for(int i=0;i<30;i++) {
//			if(checkElementDisplayed(PWAHamburgerMenuPage.objfooter,"Footer")) {
//				found=true;
//				break;
//			}
//			else {
//				scrollDownByY(300);
//				scrollDownByY(300);
//				scrollDownByY(300);
//			}
//		}
//		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer section in Home Tab");

		extent.HeaderChildNode(" HLS_021 : Verify the availability of the Footer section at bottom ");
		waitTime(3000);
		scrollToBottomOfPageWEB();
		// scrollDownWEB();
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer section");
	}

	public String verifyShowsDetailsMetaData() throws Exception {
		// Watchhistory is showing at back-end response properly
		String contentURL = getDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		logger.info("ContentID fetched from URL: " + contentID);
		extent.extentLogger("", "ContentID fetched from URL: " + contentID);
		Response resp = ResponseInstance
				.getResponse("https://gwapi.zee5.com/content/tvshow/" + contentID + "?translation=en&country=IN");
		extent.extentLogger("BackEnd data : ", "Backend data fetched: ");
		logger.info("Backend data fetched: ");
		String show = resp.jsonPath().getString("original_title");
		String id = resp.jsonPath().getString("id");
		String subtype = resp.jsonPath().getString("asset_subtype");
		String genre = resp.jsonPath().getString("genre[0].value");
		String totalSeasons = resp.jsonPath().getString("total_seasons");
		String totalEpisodes = resp.jsonPath().getString("seasons[0].total_episodes");
		String releaseDate = resp.jsonPath().getString("release_date");
		String ageRating = resp.jsonPath().getString("age_rating");
		extent.extentLogger("", "Show : " + show);
		logger.info("Show : " + show);
		extent.extentLogger("", "id : " + id);
		logger.info("Content ID : " + id);
		extent.extentLogger("", "Asset Type : " + subtype);
		logger.info("Asset Type : " + subtype);
		extent.extentLogger("", "Total Seasons : " + totalSeasons);
		logger.info("Total Seasons : " + totalSeasons);
		extent.extentLogger("", "Total Episodes : " + totalEpisodes);
		logger.info("Total Episodes : " + totalEpisodes);
		extent.extentLogger("", "Age Rating : " + ageRating);
		logger.info("Age Rating : " + ageRating);
		extent.extentLogger("", "Release Date : " + releaseDate);
		logger.info("Release Date : " + releaseDate);
		extent.extentLogger("", "Genre : " + genre);
		logger.info("Genre : " + genre);
		// Verification on front end
		String titleui = findElement(PWAPlayerPage.objContentShowTitle).getText();
		if (titleui.equals(show)) {
			extent.extentLogger("", "API Show Title: " + show + " is displayed in UI");
			logger.info("API Show Title: " + show + " is displayed in UI");
		} else {
			extent.extentLoggerFail("", "API fetched show title is " + show + " and UI displays title " + titleui);
			logger.info("API fetched show title is " + show + " and UI displays title " + titleui);
		}
		List<WebElement> meta = findElements(PWAShowsPage.metainfolist);
		ArrayList<String> metalist = new ArrayList<String>();
		for (int i = 0; i < meta.size(); i++) {
			metalist.add(meta.get(i).getText());
		}
		extent.extentLogger("", "Meta data fetched from front end : " + metalist);
		logger.info("Meta data fetched from front end : " + metalist);
		for (int i = 0; i < meta.size(); i++) {
			String currentmeta = meta.get(i).getText();
			if (i == 0) {
				if (currentmeta.contains(totalEpisodes)) {
					extent.extentLogger("", "Total Episodes : " + currentmeta + " is displayed in UI");
					logger.info("Total Episodes : " + currentmeta + " is displayed in UI");
				} else {
					extent.extentLoggerFail("",
							"API fetched number of episodes is " + totalEpisodes + " and UI displays " + currentmeta);
					logger.info(
							"API fetched number of episodes is " + totalEpisodes + " and UI displays " + currentmeta);
				}
			} else if (i == 1) {
				if (releaseDate.contains(currentmeta)) {
					extent.extentLogger("", "Release Year : " + currentmeta + " is displayed in UI");
					logger.info("Release Year : " + currentmeta + " is displayed in UI");
				} else {
					extent.extentLoggerFail("",
							"API fetched release year is " + releaseDate + " and UI displays " + currentmeta);
					logger.info("API fetched release year is " + releaseDate + " and UI displays " + currentmeta);
				}
			} else if (i == 2) {
				if (genre.contains(currentmeta)) {
					extent.extentLogger("", "Genre : " + currentmeta + " is displayed in UI");
					logger.info("Genre : " + currentmeta + " is displayed in UI");
				} else {
					extent.extentLoggerFail("", "API fetched genre is " + genre + " and UI displays " + currentmeta);
					logger.info("API fetched genre is " + genre + " and UI displays " + currentmeta);
				}
			}
		}
		if (metalist.contains(ageRating)) {
			extent.extentLogger("", "Age Rating : " + ageRating + " is displayed in UI");
			logger.info("Age Rating : " + ageRating + " is displayed in UI");
		} else {
			extent.extentLoggerFail("", "API fetched Age Rating is " + ageRating + " is not displayed in UI");
			logger.info("API fetched Age Rating is " + ageRating + " is not displayed in UI");
		}

		return contentID;
	}

	public void Shows(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_041: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode(" HLS_042 : Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
		new WebDriverWait(getWebDriver(), 15);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

		} catch (Exception e) {
			e.getMessage();
		}
		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + ", Second content title :"
				+ secondCarouselTitle + " and Third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + ", Second content title :" + secondCarouselTitle
				+ " and Third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}

		extent.HeaderChildNode(" HLS_043 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode("HLS_046,HLS_044 : Verify that user is able to rotate tray");
		verifyElementPresent(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			waitTime(3000);
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		Back(1);
		extent.HeaderChildNode(" HLS_045 : Verify the premium tag  for all premium content card");
		waitTime(3000);
		for (int i = 0; i < 10; i++) {
			if (getWebDriver().findElements(PWAHomePage.objClubTag).size() > 0) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is isplayed");
				break;
			} else {
				scrollDownByY(300);
				if (i == 4) {
					logger.info("Premium tag is not displayed");
					extent.extentLogger("Premium Tag", "Premium Tag is not displayed");
				}
			}
		}
		click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");
		extent.HeaderChildNode(" HLS_047 : Navigate to the TV show Details Screen");
		mandatoryRegistrationPopUp(userType);
		String nextPageTitle = "";
		boolean firstAssetClicked = swipeTillTrayAndClickFirstAsset(userType, 15, "Trending Shows",
				"Trending Shows tray", tabName);
		if (firstAssetClicked) {
			try {
				nextPageTitle = getText(PWAShowsPage.objShowsTitle);
				logger.info("Shows Details page is displayed: " + nextPageTitle);
				extent.extentLogger("showDetails", "Shows Details page is displayed: " + nextPageTitle);
			} catch (Exception e) {
				try {
					nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
					logger.info("Player screen is displayed: " + nextPageTitle);
					extent.extentLogger("playerScreen", "Player screen is displayed: " + nextPageTitle);
				} catch (Exception e1) {
					nextPageTitle = "";
				}
			}
		}
		if (!nextPageTitle.equals("")) {
			logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			extent.extentLogger("playerScreen", "Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			screencapture();
			if (!userType.equals("SubscribedUser"))
				try {
					getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
				} catch (Exception e) {
				}
			try {
				getWebDriver().findElement(By.xpath("//a[text()='Home']")).click();
			} catch (Exception e) {
			}
		} else {
			logger.error("Failed to navigate to Details page: \"" + nextPageTitle + "\"");
			extent.extentLoggerFail("playerScreen", "Failed to navigate to Details page: \"" + nextPageTitle + "\"");
		}

		extent.HeaderChildNode(" HLS_049 : Verify play Free content from the show page");
		mandatoryRegistrationPopUp(userType);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("consumptionsShow");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Shows"), "Shows Tab");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(4000);
		partialScroll();
		checkElementDisplayed(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Second Episode set");
		waitTime(2000);
		click(PWAShowsPage.objEpisodeCard, "First Episode Card");
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		click(PWAHomePage.objZeelogo1, "Zee Logo");

		extent.HeaderChildNode(" HLS_050 : Verify play Premium content from the show page");
		verifyLandscapeforPremiumContentWeb();

		navigateToAnyScreenOnWeb("Shows");

		extent.HeaderChildNode(" HLS_051 : Verify the Play and share CTA buttons ");
		trayTitleAndContentValidationWithApiDataMovie(tabName, "tvshows");

		extent.HeaderChildNode("HLS_052 :Verify the right side bottom arrow ");
		scrollToBottomOfPageWEB();
		logger.info("Scrolled Up the page");
		if (scrollToElement(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn)) {
			click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow icon");
		} else {
			logger.error("Back to Top Arrow icon is not displayed");
			extent.extentLoggerFail("", "Back to Top Arrow icon is not displayed");
		}

		extent.HeaderChildNode(
				" HLS_053 :Verify the Before TV are available, HLS_054 :Verify the  Before TV content playback");
		waitTime(2000);
		// Before Zee TV
		mandatoryRegistrationPopUp(userType);
		nextPageTitle = "";
		firstAssetClicked = swipeTillTrayAndClickFirstAssetType2(userType, 15, "Premiere Episodes | Before Zee TV",
				"Before Zee TV tray", tabName);
		if (firstAssetClicked) {
			try {
				nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
				logger.info("Player screen is displayed");
				extent.extentLogger("playerScreen", "Player screen is displayed");
			} catch (Exception e1) {
				nextPageTitle = "";
			}
		}
		if (!nextPageTitle.equals("")) {
			logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			extent.extentLogger("playerScreen", "Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			if (!userType.equals("SubscribedUser"))
				try {
					getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
				} catch (Exception e) {
				}
			try {
				getWebDriver().findElement(By.xpath("//a[text()='Home']")).click();
			} catch (Exception e) {
			}
		} else {
			logger.error("Failed to navigate to Consumptions page: \"" + nextPageTitle + "\"");
			extent.extentLoggerFail("playerScreen",
					"Failed to navigate to Consumptions page: \"" + nextPageTitle + "\"");
		}
	}

	/**
	 * Method for silentRegistration viaEmail
	 * @param userType
	 * @throws Exception
	 */
	public void silentRegistrationViaEmail(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("HLS_003 : Silent registration via email");
			navigationToMyPlanFromHome("NewRegister");
		}
	}

	/**
	 * Method for login via socialmedia credentials
	 * @param userType
	 * @throws Exception
	 */
	public void SocialLogin(String userType) throws Exception {

		switch (userType) {
		case "Guest":
			extent.HeaderChildNode("HLS_004 : login via User Social Login Credentials");
			extent.HeaderChildNode("Guest user ");
			if (checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login")) {
				extent.extentLogger("Not Logged in", "User is not logged in");
				logger.info("User is not logged in");
				noLogoutOption();
				waitTime(5000);
				getWebDriver().get(URL);
				facebookLogin();
				twitterLogin();
                checkCleverTapPopupDisplayedAndDismiss();
                gmailLogin();
				if (!checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login")) {
					logout();
				}
				waitTime(4000);
				// SANITY
				// phoneNumberRegistration();
				// forgotPasswordMobileNumber();
			}else{
                logout();
                extent.extentLogger("Logged out", "User was logged in before, logged out");
                logger.info("User is logged out");
                noLogoutOption();
                getWebDriver().get(URL);
                facebookLogin();
                twitterLogin();
                checkCleverTapPopupDisplayedAndDismiss();
                gmailLogin();
                if (!checkElementDisplayed(PWALoginPage.objLoginBtnWEB, "Login")) {
                    logout();
                }
            }
			break;
		case "NonSubscribedUser":
			extent.HeaderChildNode("Non-Subscribed user ");
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objProfileIconInProfilePage, "profile icon");
			JSClick(PWAHamburgerMenuPage.objProfileIconInProfilePage, "profile icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMyAccountOptionsText("My Profile"), "My Profile page");
			click(PWAHamburgerMenuPage.objProfileTextWEB, "profile");

			changePasswordFuncionality();
		}
	}

    public void checkCleverTapPopupDisplayedAndDismiss() throws Exception {
        if (checkElementDisplayed(PWALoginPage.objCleverTapPopUp, "clever tap pop up")) {
            WebElement popup = getWebDriver().findElement(PWALoginPage.objCleverTapPopUp);
            popup.click();
            logger.info("Closed Clever tap pop up");
            extent.extentLogger("", "Closed Clever tap pop up");
        }
    }

	public void clublogin() throws Exception {

		extent.HeaderChildNode("Login as club User");
		// String SubscribedUsername =
		// Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().getParameter("SubscribedUserName");
		// String SubscribedPassword =
		// Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().getParameter("SubscribedPassword");
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "testzee5_6@gmail.com", "Email Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "123456", "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(3000);
	}

	public void swipeTillTrayAndVerifyPlayback(String userType, String tabName, String trayTitle) throws Exception {
		String nextPageTitle = "";
		boolean firstAssetClicked = false;
		firstAssetClicked = swipeTillTrayAndClickFirstAsset(userType, 15, trayTitle, "\"" + trayTitle + "\" tray",
				tabName);
		if (firstAssetClicked) {
			try {
				nextPageTitle = getText(PWAShowsPage.objShowsTitle);
				logger.info("Shows Details page is displayed");
				extent.extentLogger("showDetails", "Shows Details page is displayed");
			} catch (Exception e) {
				try {
					nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
					logger.info("Player screen is displayed");
					extent.extentLogger("playerScreen", "Player screen is displayed");
				} catch (Exception e1) {
					nextPageTitle = "";
				}
			}
		}
		if (!nextPageTitle.equals("")) {
			logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			extent.extentLogger("playerScreen", "Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			if (!userType.equals("SubscribedUser"))
				try {
					getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
				} catch (Exception e) {
				}
			try {
				getWebDriver().findElement(By.xpath("//a[text()='Home']")).click();
			} catch (Exception e) {
			}
		} else {
			logger.error("Failed to navigate to consumption/details page: \"" + nextPageTitle + "\"");
			extent.extentLoggerFail("playerScreen",
					"Failed to navigate to consumption/details page: \"" + nextPageTitle + "\"");
		}
	}

	public boolean verifyAutoPlay(String Tabname) throws Exception {
		boolean autoplayingItemsPresent = false;
		boolean autoPlayed = false;
		int autoplayItem = 0;
		// String languageSmallText = allSelectedLanguages();
		Response tabResponse = ResponseInstance.getResponseForPages(Tabname.toLowerCase(), "en,hi,kn");
		int carouselItemsCount = tabResponse.jsonPath().get("buckets[0].items.size()");
		System.out.println(carouselItemsCount);
		if (carouselItemsCount > 7)
			carouselItemsCount = 7;
		for (int i = 0; i < carouselItemsCount; i++) {
			try {
				if (tabResponse.jsonPath().get("buckets[0].items[" + i + "].tags[0]").toString().equals("Autoplay")) {
					autoplayItem = i;
					autoplayingItemsPresent = true;
					break;
				}
			} catch (Exception e) {
			}
		}
		if (autoplayingItemsPresent == false) {
			logger.info("Autoplay could not be verified because no Autoplaying Carousel Items");
			extent.extentLoggerWarning("Autoplay",
					"Autoplay could not be verified because no Autoplaying Carousel Items");
		} else {
			navigateToAnyScreen(Tabname);
			click(PWAHamburgerMenuPage.carouselDot(autoplayItem + 1), "Carousel Dot " + (autoplayItem + 1) + "");
			waitTime(3000);
			if (verifyElementPresent(PWANewsPage.objRight, "Right facing arrow on Carousel")) {
				logger.info("Autoplay is begun and verified by presence of Right facing arrow");
				extent.extentLoggerPass("", "Autoplay is begun and verified by presence of Right facing arrow");
				autoPlayed = true;
			} else {
				logger.error("Autoplay has failed");
				extent.extentLoggerFail("", "Autoplay has failed");
				autoPlayed = false;
			}
			if (verifyElementPresent(PWANewsPage.objLeft, "Left facing arrow on Carousel")) {
				logger.info("Autoplay is begun and verified by presence of Left facing arrow");
				extent.extentLoggerPass("", "Autoplay is begun and verified by presence of Left facing arrow");
			} else {
				logger.error("Autoplay has failed");
				extent.extentLoggerFail("", "Autoplay has failed");

			}
		}
		if (autoPlayed)
			return true;
		else
			return false;
	}

	public void RSVODlogin() throws Exception {

		extent.HeaderChildNode("Login as club User");
		// String SubscribedUsername =
		// Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().getParameter("SubscribedUserName");
		// String SubscribedPassword =
		// Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest().getParameter("SubscribedPassword");
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "boat@mailnesia.com", "Email Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "123456", "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(3000);
	}

	public void Clubvalidation(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_066: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);
		extent.HeaderChildNode(" HLS_067 : Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
		new WebDriverWait(getWebDriver(), 15);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

		} catch (Exception e) {
			e.getMessage();
		}
		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + ", Second content title :"
				+ secondCarouselTitle + ", Third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + ", Second content title :" + secondCarouselTitle
				+ ", Third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}

		extent.HeaderChildNode(" HLS_068 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode(" HLS_069,HLS_07 : Verify On click View All/> ");

		verifyElementPresent(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			waitTime(3000);
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		Back(1);
		waitTime(2000);

		extent.HeaderChildNode(" HLS_071 : Verify the Club tag  for all Club content card");
		waitTime(3000);
		for (int i = 0; i < 10; i++) {
			if (getWebDriver().findElements(PWAHomePage.objClubTag).size() > 0) {
				logger.info("Club tag is displayed");
				extent.extentLogger("Premium Tag", "Club Tag is isplayed");
				break;
			} else {
				scrollDownByY(300);
				if (i == 4) {
					logger.info("Club tag is not displayed");
					extent.extentLogger("Premium Tag", "Club Tag is not displayed");
				}
			}
		}
		click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");
		extent.HeaderChildNode(" HLS_073 : Verify user can play any club movie content");
		// navigateToAnyScreenOnWeb(tabName);
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Ammana Mane", "Search Field");
		waitForElementDisplayed(PWASearchPage.objFirstSearchedAssetTitle, 20);
		waitTime(5000);
		String FirstSearchedAssetTitle1 = findElement(PWASearchPage.objFirstSearchedAssetTitle).getText();
		click(PWASearchPage.objFirstSearchedAssetTitle, "First Searched Asset Title: " + FirstSearchedAssetTitle1);
		waitTime(7000);
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
					"'You're watching a trailer' message on the player")) {
				logger.error("Trailer is not played");
				extent.extentLoggerFail("Trailer", "Trailer is not played");
			} else {
				logger.info("Trailer is played for club movie content");
				extent.extentLogger("", "Trailer is played for club movie content");
			}
		} else {
			if (pausePlayer()) {
				logger.info("User is able to play club movie content");
				extent.extentLogger("", "Club movie content failed to play");
			}
		}

		extent.HeaderChildNode(" HLS_074: Verify user can play any before tv content.");
		navigateHome();
		checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");
		click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");

		waitTime(10000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("content is able to play");
			extent.extentLogger("", "content is able to play");
		} else {
			logger.info("content is not able to play");

			extent.extentLogger("Consumption Page", "content is not able to play");
		}

		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("HLS_082 :Verify Subscribe CTA with Club Icon is displayed below the player");
			click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card");
			checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeWithClub,
					"Subscribe with Club Icon below the player");
		}
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			navigateToHome();
			extent.HeaderChildNode("HLS_079 :Subscription popup availability at the end of the play back");
			zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
			if (waitForElement(PWASubscriptionPages.objGetPremiumPopupTitle, 20, "Subscribe Pop Up for Club Movie")) {
				click(PWASubscriptionPages.objPopupCloseButton, "Subscribe Pop Up Close Button");
			}
		}

		navigateToHome();
		navigateToAnyScreenOnWeb("Club");
		extent.HeaderChildNode("HLS_080 :Verify that Play, share, watchlist CTA");
		trayTitleAndContentValidationWithApiDataMovie(tabName, "club");

		extent.HeaderChildNode("HLS_081 :Verify the right side bottom arrow ");
		scrollToBottomOfPageWEB();
		logger.info("Scrolled Up the page");
		if (verifyElementPresent(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow icon")) {
			click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow icon");
		} else {
			logger.error("Back to Top Arrow icon is not displayed");
			extent.extentLoggerFail("", "Back to Top Arrow icon is not displayed");
		}
	}

	/**
	 * Method for premium page validation
	 * @param tabName
	 * @param userType
	 * @throws Exception
	 */
	public void Premiumvalidation(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_083: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode(" HLS_084 : Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
		new WebDriverWait(getWebDriver(), 15);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

		} catch (Exception e) {
			e.getMessage();
		}
		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + " second content title :"
				+ secondCarouselTitle + " and third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + " second content title :" + secondCarouselTitle
				+ " and third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}

		extent.HeaderChildNode(" HLS_085 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode("HLS_087 : Next-Prvious functionality");
		// scrollDownWEB();
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		waitTime(4000);
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");

		extent.HeaderChildNode(" HLS_086 : Verify On click More/>");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "More Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.info("Navigated to More Page");
				extent.extentLogger("More", "Navigated to More Page");
			} else {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("More", "Not navigated to More Page");
			}
		}
		Back(1);
		waitTime(2000);

		if (userType.equalsIgnoreCase("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(" HLS_088 : Verify the Premium tag for content card");
			waitTime(3000);
			scrollDownWEB();
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objpremiumcard, "Premium Tag");
		}

		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(" HLS_089 : Verify guest user able to play any  Premium content ");
			navigateToAnyScreenOnWeb("Premium");
			Actions actions = new Actions(getWebDriver());
			WebElement element = getWebDriver().findElement(PWASubscriptionPages.objZEE5Logo);
			actions.moveToElement(element).perform();
			waitTime(3000);
			verifyElementPresentAndClick(PWAPremiumPage.objWEBMastheadCarousel, "Carousel");
			waitTime(3000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("Content is able to play");
				extent.extentLogger("Consumption Page", "Content is able to play");
			} else {
				logger.info("Content is not able to play");
				extent.extentLoggerFail("Consumption Page", "Content is not able to play");
			}
			Back(1);
		}

		if (userType.equalsIgnoreCase("SubscribedUser")) {
			extent.HeaderChildNode(" HLS_090 : Verify Premium pack user can play any Premium content");
			navigateToAnyScreenOnWeb("Premium");
			Actions actions = new Actions(getWebDriver());
			WebElement element = getWebDriver().findElement(PWAHamburgerMenuPage.objZeeLogo1);
			actions.moveToElement(element).perform();
			verifyElementPresentAndClick(PWAPremiumPage.objWEBMastheadCarousel, "Carousel");
			waitTime(3000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("Content is able to play");
				extent.extentLogger("Consumption Page", "Content is able to play");
			} else {
				logger.info("Content is not able to play");
				extent.extentLogger("Consumption Page", "Content is not able to play");
			}
		}
		verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_094 : Verify player Inline subscription link availability at the end of the play back");
			click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
			if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
				zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
				waitTime(10000);
				if (userType.equalsIgnoreCase("Guest")) {
					if (waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA")) {
						waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
						waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA");
						waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
						waitTime(3000);
						Back(1);
						String exp = getWebDriver().getCurrentUrl();
						waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
						String act = getWebDriver().getCurrentUrl();
						if (exp != act) {
							logger.info("User navigated to next content");
							extent.extentLoggerPass("", "User navigated to next content");
						} else {
							logger.info("User is not navigated to next content");
							extent.extentLoggerPass("", "User is not navigated to next content");
						}
						waitTime(3000);
						Back(1);
						waitForElement(PWASubscriptionPages.objExistUserText, 20, "Are you a Zee5 Subscriber? - Text");
						waitForElementAndClick(PWASubscriptionPages.objLoginLink, 20, "Login Link");
						waitForElement(PWASubscriptionPages.objLoginPage, 20, "Navigated to Login page");
						waitTime(3000);
						Back(1);
					}

				} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
					if (waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA")) {
						waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
						waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA");
						Back(1);
						String exp = getWebDriver().getCurrentUrl();
						waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
						String act = getWebDriver().getCurrentUrl();
						if (exp != act) {
							logger.info("User navigated to next content");
							extent.extentLoggerPass("", "User navigated to next content");
						} else {
							logger.info("User is not navigated to next content");
							extent.extentLoggerPass("", "User is not navigated to next content");
						}
						Back(1);
					}
				}
			}
			Back(2);
			navigateToAnyScreenOnWeb("Premium");
			extent.HeaderChildNode("HLS_095 :Verify that Play, share, watchlist CTA");
			trayTitleAndContentValidationWithApiDataMovie(tabName, "premium");

			extent.HeaderChildNode("HLS_096 :Verify the right side bottom arrow ");
			waitTime(2000);
			scrollToBottomOfPageWEB();
			waitTime(5000);

			logger.info("Scrolled Up the page");
			if (checkElementDisplayed(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow icon")) {
				waitTime(2000);
				click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow icon");
				logger.info("Back to Top Arrow icon is displayed");
				extent.extentLoggerPass("", "Back to Top Arrow icon is displayed");
			} else {
				logger.error("Back to Top Arrow icon is not displayed");
				extent.extentLoggerFail("", "Back to Top Arrow icon is not displayed");
			}

			if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("HLS_097 :Verify Buy Plan CTA with crown Icon is displayed below the player");
				zeeSearchForContentAndClickOnFirstResult("Khaali Peeli");
				waitTime(3000);
				String currentUrl = getWebDriver().getCurrentUrl();
				System.out.println(currentUrl);
				verifyElementPresent(PWAHamburgerMenuPage.objTextBelowThePlayerAtNewpwa,
						"Text below the player - Ad-Free with Premium now at 50%OFF : ₹499/year");
				waitTime(3000);
				verifyElementPresent(PWAHamburgerMenuPage.objSubscribebtn, "Buy Plan with Crown Icon below the player");
			}
		}
	}

	public boolean waitforchannelguideToLoad() throws Exception {
		for (int i = 0; i < 15; i++) {
			if (checkElementExist(PWALiveTVPage.objChannelWrapper)) {
				return true;
			} else {
				waitTime(10000);
			}
		}
		extent.extentLoggerFail("", "channel guide failed to load even after waiting for 2 minutes");
		logger.error("channel guide failed to load even after waiting for 2 minutes");
		return false;
	}

	/**
	 * Method for stories page validation
	 * @param userType
	 * @param tabName
	 * @throws Exception
	 */
	public void storiesvalidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("HLS_145: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode(" HLS_146 : Verify the rails name and content are loaded for first 2 scroll");
		dataValidationOnScrollForStories();

		extent.HeaderChildNode("HLS_147 :Verify the right side bottom arrow ");
		scrollDownByY(300);
		scrollDownByY(300);
		logger.info("Scrolled down the Stories page");
		verifyElementPresentAndClick(PWALandingPages.objNavigateToTopStories, "Back to Top arrow");

		extent.HeaderChildNode("HLS_148 : Verify user is navigate to Story consumption page/ article page");
		String cardTitle = getElementPropertyToString("innerText", PWAHomePage.objStoriesPageCardTitle,
				"Story title in Landing");
		logger.info("Title of the Story in Stories page: " + cardTitle);
		extent.extentLogger("", "Title of the Story in Stories page: " + cardTitle);
		JSClick(PWAHomePage.objStoriesPageCardTitle, "Story card");
		String cardTitleConsum = getElementPropertyToString("innerText", PWAHomePage.objStoriesPageConsumptionsTitle,
				"Story title in Consumptions");
		logger.info("Title of the Story in Article page: " + cardTitleConsum);
		extent.extentLogger("", "Title of the Story in Article page: " + cardTitleConsum);
		if (cardTitle.equals(cardTitleConsum)) {
			logger.info("Successful navigation to consumption page");
			extent.extentLogger("", "Successful navigation to consumption page");
		} else {
			logger.error("Navigation failed to consumption page");
			extent.extentLoggerFail("", "Navigation failed to consumption page");
		}
	}

	public void dataValidationOnScrollForStories() throws Exception {
		ArrayList<String> list1titles = new ArrayList<>();
		for (int j = 0; j < 5; j++) {
			try {
				String title = findElement(By.xpath("(//h3[@class='cardTitle'])[" + j + "]")).getText();
				list1titles.add(title);
			} catch (Exception e) {
				scrollDownByY(100);
			}
		}
		logger.info("Titles fetched from Stories page before Swiping down : " + list1titles);
		extent.extentLogger("", "Titles fetched from Stories page before Swiping down : " + list1titles);
		scrollDownByY(300);
		scrollDownByY(300);
		scrollDownByY(300);
		logger.info("Scrolled down the Stories page");
		extent.extentLogger("", "Scrolled down the Stories page");
		ArrayList<String> list2titles = new ArrayList<>();
		for (int j = 5; j < 10; j++) {
			try {
				String title = findElement(By.xpath("(//h3[@class='cardTitle'])[" + j + "]")).getText();
				list2titles.add(title);
			} catch (Exception e) {
				scrollDownByY(100);
			}
		}
		logger.info("Titles fetched from Stories page after Swiping down : " + list2titles);
		extent.extentLogger("", "Titles fetched from Stories page after Swiping down : " + list2titles);

		if (list1titles.equals(list2titles)) {
			logger.error("Titles fetched are same after swiping, contents failed to load");
			extent.extentLoggerFail("", "Titles fetched are same after swiping, contents failed to load");
		} else {
			logger.info("Titles fetched are different after swiping, contents have loaded successfully");
			extent.extentLoggerPass("",
					"Titles fetched are different after swiping, contents have loaded successfully");
		}
	}

	/**
	 * Method for video page validation
	 * @param userType
	 * @param tabName
	 * @throws Exception
	 */
	public void videoValidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("HLS_149: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode(" HLS_150 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode(" HLS_152 : Verify Next-Previous functionality");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		waitTime(5000);
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.error("Tray is not rotated");
			extent.extentLoggerFail("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");

		extent.HeaderChildNode(" HLS_151 : Verify on click More/> ");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "More Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.info("Navigated to More Page");
				extent.extentLogger("More", "Navigated to More Page");
			} else {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("More", "Not navigated to More Page");
			}
		}

		extent.HeaderChildNode(" HLS_155 : erify whether user is navigate to consumption page  ");
		checkElementDisplayed(PWAHamburgerMenuPage.obj2ndcontentCard, "2nd card");
		click(PWAHamburgerMenuPage.objFirstCard, "First card");
		waitTime(3000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Not navigated to Consumption Page");
		}

		Back(1);
		// waitTime(2000);
		navigateToAnyScreenOnWeb("Videos");

		extent.HeaderChildNode("HLS_153 :Verify that Play, share, watchlist CTA");
		musicPageTrayTitleAndContentValidationWithApiData(tabName, "videos", userType);

		extent.HeaderChildNode("HLS_154 :Verify the right side bottom arrow ");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}

		extent.HeaderChildNode("HLS_156 : Verify that Recommended Songs Videos are displayed right side of the player");
		swipeTillTrayAndClickFirstAsset(userType, 20, "ZEE5 Top 20", "ZEE5 Top 20 tray", tabName);
		mandatoryRegistrationPopUp(userType);
		waitForPlayerAdToComplete2("Video Player");
		waitTime(5000);
		if (checkElementDisplayed(PWAMusicPage.objRecommendedSongsVideosTray, "Recommended Songs Videos tray")) {
			logger.info("Recommended songs videos are displayed right side of the player");
			extent.extentLogger("Recommended tray", "Recommended songs videos are displayed right side of the player");
		} else {
			logger.error("Recommended songs videos is not displayed in consumption page");
			extent.extentLoggerFail("Recommended tray",
					"Recommended songs videos are not displayed right side of the player");
		}
		Back(1);
		// Actions actions = new Actions(getWebDriver());
		// WebElement player =
		// getWebDriver().findElement(PWAPlayerPage.objPlaybackVideoOverlay);
//		if (checkElementDisplayed(PWAPremiumPage.objWEBMastheadCarousel, "Carousel")) {
//			JSClick(PWAPremiumPage.objWEBMastheadCarousel, "Carousel");
//
//			// actions.moveToElement(player).build().perform();
//			// click(PWAPlayerPage.maximizeBtn, "Maximize button");
//			// waitTime(1000);
//			// click(PWAPlayerPage.minimizeBtn, "Minimize button");
//			waitTime(1000);
//
//			if (checkElementDisplayed(PWAMusicPage.objRecommendedVideos, "Recommended tray")) {
//				logger.info("Recommended songs videos is displayed in consumption page");
//				extent.extentLogger("Recommended tray", "Recommended songs videos is displayed in consumption page");
//			} else {
//				logger.error("Recommended songs videos is not displayed in consumption page");
//				extent.extentLoggerFail("Recommended tray", "Recommended songs videos is not displayed in consumption page");
//			}
//			Back(1);
//		}
	}

	public void Zee5OriginalsValidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("HLS_157: Verify user navigation " + tabName + "page");

		PWAPagesNavigationAndTabHighlight(tabName);
		extent.HeaderChildNode(" HLS_158 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);// update

		extent.HeaderChildNode(" HLS_159 : Verify On click View All/> ");
		scrollDownWEB();
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLoggerFail("Tray is not rotated", "Tray is not rotated");// update
		}
		click(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			waitTime(5000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLoggerFail("View All", "Not navigated to View All Page");// update
			}
		}
		Back(1);

		extent.HeaderChildNode("HLS_161 :Verify that Play, share, watchlist CTA");
		trayTitleAndContentValidationWithApiDataZeeoriginals(tabName, "zeeoriginals");

		extent.HeaderChildNode("HLS_162 :Verify the right side bottom arrow ");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}

		waitTime(2000);
		extent.HeaderChildNode("HLS_163 : Verify the Premium icons are displayed ");
		for (int i = 0; i < 5; i++) {
			if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is displayed");
				break;

			} else {
				logger.info("Premium tag is not displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is not displayed");
				partialScrollDown();
			}

		}
//		for (int i = 0; i < 5; i++) {
//			if (findElements(PWAMusicPage.objPremiumTag).size() > 0) {
//				logger.info("club tag is displayed");
//				extent.extentLogger("club Tag", "club Tag is displayed");
//				break;
//
//			} else {
//				logger.info("club tag is not displayed");
//				extent.extentLogger("club Tag", "club Tag is not displayed");
//				partialScrollDown();
//			}
//
//		}

		extent.HeaderChildNode("HLS_164 : Verify the Premium user is able to watch all the zee originals shows");
		if (userType.equalsIgnoreCase("Subscribeduser")) {
			navigateToAnyScreenOnWeb(tabName);
			swipeTillTrayAndClickFirstAsset(userType, 15, "Best of ZEE5 Originals in Kannada",
					"Best of ZEE5 Originals in Hindi tray", tabName);
//			scrollToTheElementWEB(PWAHomePage.objtrayname("Best of ZEE5 Originals in Hindi"));
//			checkElementDisplayed(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
//			click(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");

			// click(PWAShowsPage.objFirstAssetTitleFirstRail, "Content Title in Details
			// Page");
			waitForElementPresence(PWAPlayerPage.objPlaybackVideoOverlay, 20, "Player");
			checkElementDisplayed(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
			click(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
			waitTime(10000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("user is able to watch the zee originals shows");
				extent.extentLogger("zee originals shows", "user is able to watch the zee originals shows");
			} else {
				logger.info("user is not able to watch the zee originals shows");
				extent.extentLoggerFail("zee originals shows", "user is not able to watch the zee originals shows");// update
			}
		}

		if (userType.equalsIgnoreCase("Clubuser")) {
			extent.HeaderChildNode(
					"HLS_165 : Verify the Club user is able to watch all the zee originals shows from Zee originals page");
			navigateToAnyScreenOnWeb("ZEE5 Originals");
			checkElementDisplayed(PWAHamburgerMenuPage.objClubcontentcard, "content card");
			click(PWAHamburgerMenuPage.objClubcontentcard, "content card");
			waitTime(3000);
			JSClick(PWAShowsPage.objEpisodeCard, "First Episode Card");

			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("club user is able to watch the zee originals shows");
				extent.extentLogger("zee originals shows", "club user is able to watch the zee originals shows");
			} else {
				logger.info("club user is not able to watch the zee originals shows");
				extent.extentLoggerFail("zee originals shows",
						" club user is not able to watch the zee originals shows");// update
			}
			Back(1);
		}
		extent.HeaderChildNode("HLS_166 : Verify user is able to watch the First Episode of the originals shows");
		navigateToAnyScreenOnWeb("ZEE5 Originals");
		scrollToTheElementWEB(PWAHomePage.objtrayname("Best of ZEE5 Originals in Kannada"));
		checkElementDisplayed(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
		click(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
		checkElementDisplayed(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
		click(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");

		waitTime(3000);
		waitForElementPresence(PWAPlayerPage.objPlaybackVideoOverlay, 20, "Player");
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("user is able to watch the First Episode");
			extent.extentLogger("zee originals shows", "user is able to watch the First Episode");
		} else {
			logger.info("user is not able to watch the First Episode");
			extent.extentLoggerFail("zee originals shows", " user is not  able to watch the First Episode");// update
		}
		navigateToAnyScreenOnWeb("ZEE5 Originals");

		extent.HeaderChildNode(
				"HLS_167 : Verify user can Navigate to the Original shows Details Screen post click on any Show Thumbnail Card");
		navigateToAnyScreenOnWeb("ZEE5 Originals");
		// scrollToTheElementWEB(PWAHomePage.objtrayname("Best of ZEE5 Originals in
		// Hindi"));
		JSClick(PWAHamburgerMenuPage.objFirstcontentCard, "First Card");
		waitTime(3000);

		checkElementDisplayed(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
		click(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
		waitTime(5000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("user is able to watch the zee originals shows");
			extent.extentLogger("zee originals shows", "user is navigated to the zee5originals shows");
		} else {
			logger.info("user is not navigated to the zee originals shows");
			extent.extentLoggerFail("zee originals shows", "user is not navigated to the zee 5riginals shows");// update
		}
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"HLS_168 : Verify the GET CLUB CTA is displayed on the  Club originals detail screen");
			navigateToAnyScreenOnWeb("ZEE5 Originals");
			checkElementDisplayed(PWAHamburgerMenuPage.objClubcontentcard, " club content card");
			click(PWAHamburgerMenuPage.objClubcontentcard, "club content card");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objClub, "GET CLUB");
			Back(1);

			extent.HeaderChildNode(
					"HLS_169 : Verify the GET Premium CTA is displayed on the  Club originals detail screen");

			String keyword = "Rangbaaz";
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWAHomePage.objSearchField, keyword + "\n", "Search");
			click(PWASearchPage.objSearchedResult(keyword), "Search Result");
			verifyElementPresent(PWAShowsPage.objGetPremiumCTAInShowDetails, "Get Premium CTA in originals details");
			checkElementDisplayed(PWAShowsPage.objShowdeatilPlayIcon, "Play icon in originals details");
			Back(1);
		}
	}

	/**
	 * Method for play page validation
	 * @param tabName
	 * @param userType
	 * @throws Exception
	 */
	public void PlayValidation(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_098: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode(" HLS_099 : Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
		new WebDriverWait(getWebDriver(), 15);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

		} catch (Exception e) {
			e.getMessage();
		}

		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + " second content title :"
				+ secondCarouselTitle + " and third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + " second content title :" + secondCarouselTitle
				+ " and third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}

		extent.HeaderChildNode(" HLS_100 : Verify the rails name and content are loaded for first 2 scroll");
		for (int i = 1; i <= 2; i++) {
			if (checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray")) {
				System.out.println("Tray is loaded for " + i + " scroll");
				logger.info("Tray is loaded for " + i + " scroll");
				extent.extentLogger("Tray load", "Tray is loaded for " + i + " scroll");
			} else {
				ScrollToTheElement(PWAPremiumPage.objTrayTitle(i));
				checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray");
			}
		}

		extent.HeaderChildNode(" HLS_102 : Verify Next-Previous Functionality");
		verifyElementPresent(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		waitTime(5000);
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.info("Tray is not rotated");
			extent.extentLogger("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		waitTime(3000);

		extent.HeaderChildNode(" HLS_101 : Verify On click More/>");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "More Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.info("Navigated to More Page");
				extent.extentLogger("More", "Navigated to More Page");
			} else {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("More", "Not navigated to More Page");
			}
		}
		Back(1);
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		waitTime(3000);

		extent.HeaderChildNode("HLS_103 :Verify the Joystick icon is given on top left for all Play content card");
		navigateToAnyScreenOnWeb("Play");
		partialScroll();
		verifyElementPresent(PWAMusicPage.objJoysticktag, "joystick icon");

		extent.HeaderChildNode("HLS_104 :Verify the right side bottom arrow ");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			JSClick(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

		extent.HeaderChildNode("HLS_105 :Verify user is navigate to respective games screen");
		navigateToAnyScreenOnWeb(tabName);
		waitTime(5000);
		swipeTillTrayAndClickFirstAsset(userType, 20, "Top Played Game", "Top Played Game tray", tabName);
//		if (checkElementDisplayed(PWAPremiumPage.objWEBMastheadCarousel, "Carousel")) {
//			verifyElementPresentAndClick(PWAPlayPage.objPlayNowButton, "Play Now button of Carousel");
//		}
		switchToWindow(2);
		waitTime(2500);
		String currentUrl = getWebDriver().getCurrentUrl();
		logger.info("Current URL: " + currentUrl);
		extent.extentLogger("", "Current URL: " + currentUrl);
		if (currentUrl.contains("games")) {
			logger.info("Navigated to Games screen");
			extent.extentLoggerPass("", "Navigated to Games screen");
		} else {
			logger.info("Failed to navigate to Games screen");
			extent.extentLoggerFail("", "Failed to navigate to Games screen");
		}
		getWebDriver().close();
		switchToParentWindow();

		extent.HeaderChildNode("HLS_107 :Verify the Game content should be available in the Search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Danger Dash ", "Search Field");
		verifyElementPresent(PWAMusicPage.objJoysticktagAtSearchedResultPage, "joystick icon");

		extent.HeaderChildNode(
				"HLS_108 :Verify whether user is able to navigate to Game content from the Search result");
		checkElementDisplayed(PWASearchPage.objFirstSearchedAssetTitle, "First search result");
		JSClick(PWASearchPage.objFirstSearchedAssetTitle, "First search result");
		switchToWindow(2);
		waitTime(2500);
		String aludigamesURL = getWebDriver().getCurrentUrl();
		if (aludigamesURL.contains("ludigames")) {
			logger.info("Game screen is opened in webview");
			extent.extentLoggerPass("Game", "Game screen is opened in webview");
		} else {
			logger.info(" Game screen is not opened in webview");
			extent.extentLoggerFail("Game", "Game screen is not opened in webview");
		}
		getWebDriver().close();
		switchToParentWindow();
	}

	public void pagesTrayValidation(String tabName) throws Exception {
		int endindex = 0;
		// String languageSmallText = allSelectedLanguages();
		Response resp = ResponseInstance.getResponseForPages(tabName.toLowerCase(), "en,hi,kn");
		List<String> apiTitleList = new LinkedList<String>();
		List<String> apitotaltrays;
		int trays = 0;
		if (tabName.equalsIgnoreCase("live tv")) {
			apitotaltrays = resp.jsonPath().getList("genres");
			if (apitotaltrays.size() > 5)
				trays = 5;
			else
				trays = apitotaltrays.size();
			for (int i = 0; i < trays; i++) {
				String traytitle = resp.jsonPath().getString("genres[" + i + "].value");
				apiTitleList.add(traytitle);
			}
			endindex = trays;
		} else {
			apitotaltrays = resp.jsonPath().getList("buckets");
			if (apitotaltrays.size() > 5)
				trays = 5;
			else
				trays = apitotaltrays.size();
			for (int i = 1; i < trays; i++) {
				String traytitle = resp.jsonPath().getString("buckets[" + i + "].title");
				if (!traytitle.contains("ZEEPLEX"))
					apiTitleList.add(traytitle);
			}
			endindex = apiTitleList.size();
		}
		logger.info("Trays from API: " + apiTitleList);
		extent.extentLogger("", "Trays from API: " + apiTitleList);
		for (int j = 0; j < endindex; j++) {
			String apititle = apiTitleList.get(j);
			for (int swipe = 0; swipe < 5; swipe++) {
				try {
					findElement(By.xpath("(//div[@class='trayHeader'])//h2[.=\"" + apititle + "\"]")).getText();
					logger.info("Located Tray " + apititle + " in UI");
					extent.extentLogger("", "Located Tray " + apititle + " in UI");
					break;
				} catch (Exception e) {
					scrollDownByY(350);
					if (swipe == 4) {
						logger.error("Failed to locate Tray " + apititle + " in UI");
						extent.extentLoggerFail("", "Failed to locate Tray " + apititle + " in UI");
					}
				}
			}
		}
		scrollToElement(PWAZee5OriginalPage.objNavigateToTop);
		verifyElementPresentAndClick(PWAZee5OriginalPage.objNavigateToTop, "Back to Top Arrow");
	}

	public void kaltura(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("HLS_194 :Validate the Player Controls on Live Content playback");
		PlayerIconVaidationsWeb();
		playerControlOperations();
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		extent.HeaderChildNode(
				"HLS_212 :Verify that watch credits button CTA is display at the end credit rolling screen at End of the content ");
		WatchCredit(userType);
		extent.HeaderChildNode("HLS_208 :Validate the UI/UX of upnext rail");
		upnext(userType);

	}

	/**
     * Method to verify users subscription journey
     * @param userType
     * @param tabName
     * @throws Exception
     */
	public void Subscriptionjourney(String userType, String tabName) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode(
					"HLS_216 :Verify the user is navigating to the Subscription page by clicking on the Subscribe button across the application");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			waitTime(3000);
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
				logger.info("User is navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is navigated to Subscription page");

			} else {
				logger.info("User is not navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			waitTime(5000);
		}
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("HLS_217 :Validating BuySubscription under MyPlans");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Button");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objPlans, "My Plans")) {
				checkElementDisplayed(PWAHamburgerMenuPage.objBuySubscription, "Buy Subscription");
				click(PWAHamburgerMenuPage.objBuySubscription, "Buy Subscription");
				// checkElementDisplayed(PWAHamburgerMenuPage.objHaveAPrepaidCode, "Have a
				// Prepaid Code");
			}
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
				logger.info("User is navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is navigated to Subscription page");

			} else {
				logger.info("User is not navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

			extent.HeaderChildNode("HLS_218 : Validating HaveAPrepaidCode under MyPlans");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Button");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objPlans, "My Plans")) {
				// checkElementDisplayed(PWAHamburgerMenuPage.objBuySubscription, "Buy
				// Subscription");
				checkElementDisplayed(PWAHamburgerMenuPage.objHaveAPrepaidCode, "Have a Prepaid Code");
				click(PWAHamburgerMenuPage.objHaveAPrepaidCode, "Have a Prepaid Code");
			}
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
				logger.info("User is navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is navigated to Subscription page");

			} else {
				logger.info("User is not navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		}
		if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_219 : Navigate to Subscription flow from by clicking on Get Premium CTA below the player");
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieNoTrailer2");
			zeeSearchForContentAndClickOnFirstResult(keyword);
			waitTime(2000);
			verifyElementPresentAndClick(PWASubscriptionPages.objTeaserGetPremiumButton, "Get Premium Teaser CTA");
			zeeVerifyGetPremiumPopup();
			waitTime(2000);
			zeePaymentPageValidationAndNavigateToHomePage();

			extent.HeaderChildNode(
					"HLS_220 : Navigate to Subscription Flow From Player In-line Subscribe link on Player");
			String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieNoTrailer2");
			zeeSearchForContentAndClickOnFirstResult(keyword1);
//			waitTime(2000);
//			checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Get Premium Popup Title");
//			waitTime(2000);
//			verifyElementPresentAndClick(PWASubscriptionPages.objPopupCloseButton, "Popup Close Button");
			waitTime(2000);
			verifyElementPresentAndClick(PWAPlayerPage.objSubscribeNowLink, "In-Line Subscribe Link on Player");
			zeeVerifyGetPremiumPopup();
			waitTime(2000);
			zeePaymentPageValidationAndNavigateToHomePage();
		}
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"HLS_221: Validate that user should select pack and navigate to account info screen.");

			// Scenario no. 89
			waitTime(5000);
			click(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			// driver.findElement(PWAHomePage.objSubscribeButton).click();
			waitTime(5000);
			verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription Page");
			waitTime(3000);
			verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
			waitTime(3000);
//			String selectedPackCategory = findElement(PWASubscriptionPages.objPackCategoryTabSelected).getText();
//			System.out.println("Selected Pack Category is: " + selectedPackCategory);
//			waitTime(3000);
			String defaultSelectedPlan = findElement(PWASubscriptionPages.objSelectedSubscriptionPlanAmount).getText();
			System.out.println("Plan Selected By Default is: " + defaultSelectedPlan);
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount1, "499 pack is selected");
			ScrollToElement(PWASubscriptionPages.objContinueBtn, "Continue");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			waitTime(5000);
			verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Section");
//			zeePWASelectedPackDisplayValidation();

			extent.HeaderChildNode(
					"HLS_222: Validate that user is navigated to Payment options screen post successful sign in");
			verifyElementPresent(PWALoginPage.objEmailField, "Email ID Text Field");
			waitTime(3000);
			type(PWALoginPage.objEmailField, "igszee5testing@gmail.com", "Email Id");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted,
					"Continue Button in Account Info Page Highlighted");
			waitTime(3000);
			verifyElementPresent(PWASubscriptionPages.objPasswordField, "Enter Password Text Field");
			waitTime(3000);
//			verifyElementPresent(PWASubscriptionPages.objProceedBtnDisabled, "Disabled Proceed Button");
//			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objPasswordField, "Password Field");
			waitTime(3000);
			type(PWASubscriptionPages.objPasswordField, "igs@12345", "Password Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objProceedButtonInPassword, "Continue Button");
			waitTime(3000);
			checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
			logout();

		}
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
//			extent.HeaderChildNode("HLS_225: Verify Club pack is available under club section in Select pack page");
//
//			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
//			waitTime(3000);
//			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
//				logger.info("User is navigated to Subscription page");
//				extent.extentLogger("Subscription page", "User is navigated to Subscription page");
//
//			} else {
//				logger.info("User is not navigated to Subscription page");
//				extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
//			}
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objClubAccess, "club access");
//
//			if (checkElementDisplayed(PWAHamburgerMenuPage.objPackactive, "Active pack")) {
//
//				String tab = getText(PWAHamburgerMenuPage.objPackactive);
//				System.out.println(tab);
//				logger.info(tab + " pack is highlighted");
//				extent.extentLogger("pack", tab + " pack is highlighted");
//			} else {
//
//				logger.info(" pack is not highlighted");
//				extent.extentLoggerFail("pack", " pack is not highlighted");
//			}
//			verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount, "299 pack is selected");
//
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

			extent.HeaderChildNode(
					"HLS_223: Verify the JUSPAY iframe loads when the user navigate to the PAYMENT page");
			waitTime(5000);
			click(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			// driver.findElement(PWAHomePage.objSubscribeButton).click();
			waitTime(5000);
			verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title");
			waitTime(3000);
			verifyElementPresent(PWASubscriptionPages.objSelectPackHighlighted, "Select Pack Section");
//			waitTime(3000);
//			String selectedPackCategory = findElement(PWASubscriptionPages.objPackCategoryTabSelected).getText();
//			System.out.println("Selected Pack Category is: " + selectedPackCategory);
			waitTime(3000);
			String defaultSelectedPlan = findElement(PWASubscriptionPages.objSelectedSubscriptionPlanAmount).getText();
			System.out.println("Plan Selected By Default is: " + defaultSelectedPlan);
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount1, "499 pack is selected");
			ScrollToElement(PWASubscriptionPages.objContinueBtn, "Continue");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			waitTime(5000);
			checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
			// verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

//			extent.HeaderChildNode("HLS_227: Validate that user is successfully purchased the subscription pack");

//			waitTime(5000);
//		    WebElement iframeElement = null;
//			if (getPlatform().equalsIgnoreCase("Android")) {
//				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
//				Thread.sleep(5000);
//				Thread.sleep(5000);
//				Thread.sleep(5000);
//				getWebDriver().switchTo().frame(iframeElement);
//			} else if (getPlatform().equalsIgnoreCase("Web")) {
//				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
//				Thread.sleep(5000);
//				Thread.sleep(5000);
//				Thread.sleep(5000);
//				getWebDriver().switchTo().frame(iframeElement);
	//		}
//
//			verifyElementPresent(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
//			JSClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
//			waitTime(5000);
//			verifyElementPresent(PWASubscriptionPages.objEnterCreditAndDebitCardDetails,
//					"Enter Credit/Debit Card Details");
//			verifyElementPresent(PWASubscriptionPages.objCardNumber, "Enter Card Number Field");
//			verifyElementPresent(PWASubscriptionPages.objExpiry, "Expiry Field");
//			verifyElementPresent(PWASubscriptionPages.objCVV, "CVV Field");
			// Back(1);
//			waitTime(5000);
//			if (getPlatform().equals("Android")) {
//				extent.HeaderChildNode("Validating the payment gateway using Paytm");
//				getWebDriver().switchTo().frame(iframeElement);
//				verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
//				getWebDriver().switchTo().defaultContent();
//			} else if (getPlatform().equalsIgnoreCase("Web")) {
//				extent.HeaderChildNode("Validating the payment gateway using Wallet");
//				verifyElementPresent(PWASubscriptionPages.objWallets, "Wallets");
//				click(PWASubscriptionPages.objWallets, "Wallets");
//				getWebDriver().switchTo().defaultContent();
//			}
//			waitTime(5000);
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	}

	/**
	 * Method for mysubscription page validation
	 * @param userType
	 * @throws Exception
	 */
	public void MySubscription(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("HLS_229: Validate that My Subscription button is displayed under My Account menu.");
			if (verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
				JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");

				if (verifyElementPresent(PWAHamburgerMenuPage.objWEBMyAccount, "My Account")) {
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
					Thread.sleep(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objMySubscriptionPage, "My Subscription Page");
					Thread.sleep(5000);
				}
			}
		}
		if (userType.equalsIgnoreCase("Subscribeduser")) {
			extent.HeaderChildNode(
					"HLS_230: Validate that all the active subscription plans are displayed in my subscription screen");
			if (verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
				JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");

				if (verifyElementPresent(PWAHamburgerMenuPage.objWEBMyAccount, "My Account")) {
					verifyElementPresent(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
					Thread.sleep(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objMySubscriptionPage, "My Subscription Page");
					Thread.sleep(5000);
				}

				verifyElementPresent(PWAHamburgerMenuPage.objMYSubscriptionActiveStatus, "My active status");
			}

		}
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"HLS_231: Validate that no active subscription plans are displayed in my subscription screen.");
			if (verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
				JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");

				if (verifyElementPresent(PWAHamburgerMenuPage.objWEBMyAccount, "My Account")) {
					verifyElementPresent(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
					Thread.sleep(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objMySubscriptionPage, "My Subscription Page");
					Thread.sleep(5000);
				}

				verifyElementPresent(PWAHamburgerMenuPage.objNoActiveSubscription, "No active status");
				verifyElementPresent(PWAHamburgerMenuPage.objSubscriptionTeaserBanner, " subscription teaser banner ");
			}
		}
	}

	/**
	 * Method for myTransactions page validation
	 * @param userType
	 * @throws Exception
	 */
	public void MyTransactions(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("HLS_232: Validate that My Transactions button is displayed under My Account menu.");
			if (verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
				JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");

				if (verifyElementPresent(PWAHamburgerMenuPage.objWEBMyAccount, "My Account")) {
					verifyElementPresent(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
					Thread.sleep(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionPage, "My Transactions Page");
					Thread.sleep(5000);
				}

			}

		}
		if (userType.equalsIgnoreCase("Subscribeduser")) {
			extent.HeaderChildNode(
					"HLS_233: Validate that all the active subscription plans are displayed in my subscription screen");
			if (verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
				JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");

				if (verifyElementPresent(PWAHamburgerMenuPage.objWEBMyAccount, "My Account")) {
					verifyElementPresent(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
					Thread.sleep(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionPage, "My Transactions Page");
					Thread.sleep(5000);
				}

				verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionPackStatus, "My active status");
			}

		}
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"HLS_234: verify Empty state screen with subscription teaser banner is displayed when user doesn't have any purchase history");
			if (verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
				JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");

				if (verifyElementPresent(PWAHamburgerMenuPage.objWEBMyAccount, "My Account")) {
					verifyElementPresent(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
					verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
					Thread.sleep(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionPage, "My Transactions Page");
					Thread.sleep(5000);
				}
				waitTime(3000);

				verifyElementPresent(PWAHamburgerMenuPage.objNoTranscationText, "No Transation");
				verifyElementPresent(PWAHamburgerMenuPage.objSubscriptionTeaserBanner, " subscription teaser banner ");

			}
		}
	}

	public void upgrade(String userType, String tabName) throws Exception {
		if (userType.equalsIgnoreCase("Clubuser")) {
			extent.HeaderChildNode("HLS_235: Verify User is navigated to Subscription page post tap on Upgrade CTA ");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Upgrade button");
			waitTime(3000);
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
				logger.info("User is navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is navigated to Subscription page");

			} else {
				logger.info("User is not navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
			}
			extent.HeaderChildNode(
					"HLS_236: Verify upgrade pop up is displayed for Rsvod user on playing premium content");

			navigateToAnyScreenOnWeb("Club");
			checkElementDisplayed(PWAHamburgerMenuPage.objClubcontentcard, "content card");
			click(PWAHamburgerMenuPage.objClubcontentcard, "content card");
			waitTime(3000);
			checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeWithClub,
					"Subscribe with Club Icon below the player");
			click(PWAHamburgerMenuPage.objSubscribeWithClub, "Subscribe with Club Icon below the player");
			waitTime(3000);
			if (verifyElementPresent(PWASubscriptionPages.objUpgradePopupTitle, "Subscribe Pop Up")) {

				extent.HeaderChildNode(
						"HLS_237: Verify On clicking on proceed button payment screen with the Plan Price, Discount, rounding off, and Payable Price displayed.");
				verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");
				waitTime(2000);
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "Popup Proceed Button");
				verifyElementPresent(PWAHamburgerMenuPage.objPlanPrice, "Plan price");
				verifyElementPresent(PWAHamburgerMenuPage.objDiscount, "Discount");
				verifyElementPresent(PWAHamburgerMenuPage.objRoundoff, "Round off");
				verifyElementPresent(PWAHamburgerMenuPage.objTotalPayable, "Total Payable");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

			extent.HeaderChildNode(
					"HLS_238:Verify Entitled premium contents are playing post upgrading to All-access plan for club user.");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Upgrade button");
			verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount, "pack is selected");
			ScrollToElement(PWASubscriptionPages.objContinueBtn, "Continue");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			waitTime(5000);
		}

	}

	public void upgrade(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Clubuser")) {
			extent.HeaderChildNode("HLS_235: Verify User is navigated to Subscription page post tap on Upgrade CTA ");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Upgrade button");
			waitTime(3000);
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
				logger.info("User is navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is navigated to Subscription page");

			} else {
				logger.info("User is not navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
			}
			extent.HeaderChildNode(
					"HLS_236: Verify upgrade pop up is displayed for Rsvod user on playing premium content");

			navigateToAnyScreenOnWeb("Club");
			checkElementDisplayed(PWAHamburgerMenuPage.objClubcontentcard, "content card");
			click(PWAHamburgerMenuPage.objClubcontentcard, "content card");
			waitTime(3000);
			checkElementDisplayed(PWAHamburgerMenuPage.objSubscribeWithClub,
					"Subscribe with Club Icon below the player");
			click(PWAHamburgerMenuPage.objSubscribeWithClub, "Subscribe with Club Icon below the player");
			waitTime(3000);
			if (verifyElementPresent(PWASubscriptionPages.objUpgradePopupTitle, "Subscribe Pop Up")) {

				extent.HeaderChildNode(
						"HLS_237: Verify On clicking on proceed button payment screen with the Plan Price, Discount, rounding off, and Payable Price displayed.");
				verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");
				waitTime(2000);
				verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "Popup Proceed Button");
				verifyElementPresent(PWAHamburgerMenuPage.objPlanPrice, "Plan price");
				verifyElementPresent(PWAHamburgerMenuPage.objDiscount, "Discount");
				verifyElementPresent(PWAHamburgerMenuPage.objRoundoff, "Round off");
				verifyElementPresent(PWAHamburgerMenuPage.objTotalPayable, "Total Payable");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

			extent.HeaderChildNode(
					"HLS_238:Verify Entitled premium contents are playing post upgrading to All-access plan for club user.");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Upgrade button");
			verifyElementPresentAndClick(PWASubscriptionPages.objPackAmount, "pack is selected");
			ScrollToElement(PWASubscriptionPages.objContinueBtn, "Continue");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			waitTime(5000);
		}
	}

	public void unselectAllContentLanguages() throws Exception {
		List<WebElement> selectedLanguages = getWebDriver().findElements(PWAHamburgerMenuPage.objSelectedLanguages);
		for (int i = 0; i < selectedLanguages.size(); i++) {
			clickElementWithWebElement(selectedLanguages.get(i));
		}
	}

	// ------------------------------------------------------DFP------------------------------------------------------------------------

	public void playerScrubTillMidWeb() {
		WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
		WebElement progressBar = getWebDriver().findElement(PWAPlayerPage.objPlayerProgressBar);
		Actions action = new Actions(getWebDriver());
		action.clickAndHold(scrubber).moveToElement(progressBar, 150, 0).release().perform();
	}

	public void playerScrubTillLastWeb() {
		WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
		WebElement progressBar = getWebDriver().findElement(PWAPlayerPage.objPlayerProgressBar);
		Actions action = new Actions(getWebDriver());
		action.clickAndHold(scrubber).moveToElement(progressBar, 350, 0).release().perform();
	}

	public void DFPValidation(String userType, String dfpAdContent) throws Exception {

		if (!(userType.equalsIgnoreCase("SubscribedUser"))) {
			click(PWAHomePage.objSearchBtn, "Search Icon");
			type(PWASearchPage.objSearchEditBox, dfpAdContent + "\n", "Search Edit box: " + dfpAdContent);
			waitTime(4000);
			waitForElement(PWASearchPage.objSearchResult(dfpAdContent), 10, "Search Result");
			click(PWASearchPage.objSearchResult(dfpAdContent), "Search Result");
			waitTime(5000);
			click(PWAPremiumPage.obj1stContentInShowDetailPage, "Content Card");
			mandatoryRegistrationPopUp(userType);

			// PRE-ROLL
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("Ad play in progress");
				extent.extentLogger("Ad", "Ad play in progress");
				waitTime(5000);
				waitForPlayerAdToComplete("Video Player");
			} else {
				logger.info("Ad is not available for the content");
				extent.extentLogger("Ad", "Ad is not available for the content");
			}

			waitTime(6000);
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
			playerScrubTillMidWeb();
			click(PWAPlayerPage.objPlayerPlay, "Play Icon");

			// MID-ROLL
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("Ad play in progress");
				extent.extentLogger("Ad", "Ad play in progress");
				waitTime(5000);
				waitForPlayerAdToComplete("Video Player");
			} else {
				logger.info("Ad is not available for the content");
				extent.extentLogger("Ad", "Ad is not available for the content");
			}

			waitTime(6000);
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
			playerScrubTillLastWeb();
			click(PWAPlayerPage.objPlayerPlay, "Play Icon");

			// POST-ROLL
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("Ad play in progress");
				extent.extentLogger("Ad", "Ad play in progress");
				waitTime(5000);
				waitForPlayerAdToComplete("Video Player");
			} else {
				logger.info("Ad is not available for the content");
				extent.extentLogger("Ad", "Ad is not available for the content");
			}

		}
	}

	public void TVODLogin() throws Exception {
		extent.extentLogger("", "Login through TVOD User");
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(5000);
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "tvod@mailnesia.com", "Email Field");
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "123456", "Password field");
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(5000);

	}

	/**
	 * Method to navigate to specified page and check whether tab is Highlighted
	 * @param Tabname
	 * @throws Exception
	 */
	public void PWAPagesNavigationAndTabHighlight(String Tabname) throws Exception {
		click(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		navigateToAnyScreenOnWeb(Tabname);
		if (verifyElementPresent(PWAHomePage.objHighlightedTab(Tabname), "Highlighted " + Tabname)) {
			logger.info(Tabname + " tab is highlighted, user is able to navigate to " + Tabname + " landing page");
			extent.extentLogger("",
					Tabname + " tab is highlighted, user is able to navigate to " + Tabname + " landing page");
		} else {
			logger.error(Tabname + " tab is not highlighted, user failed to navigate to " + Tabname + " landing page");
			extent.extentLoggerFail("",
					Tabname + " tab is not highlighted, user failed to " + Tabname + " landing page");
		}
	}

	public List<String> InititalSetUpOfConviva(String userType, String zeeTab) throws Exception {
		List<String> returnList = new ArrayList<String>();
		JavascriptExecutor js = (JavascriptExecutor) getWebDriver();
		js.executeScript("window.open('https://google.com/')");
		extent.extentLogger("", "Opened : https://google.com/");
		logger.info("Opened : https://google.com/");
		waitTime(3000);
		String googleTab = "";
		for (String winHandle : getWebDriver().getWindowHandles()) {
			if (!winHandle.equals(zeeTab)) {
				googleTab = winHandle;
				System.out.println("googleTab : " + googleTab);
				getWebDriver().switchTo().window(googleTab);
				break;
			}
		}

		String publicIP = getYourPublicIP();
		getWebDriver().switchTo().window(googleTab);
		getWebDriver().close();// Close Google tab
		logger.info("Closed Google Tab");
		extent.extentLogger("", "Closed Google Tab");
		// -----------------------------------------------------------------------------
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		js.executeScript("window.open('https://pulse.conviva.com/')");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/");
		logger.info("Opened : https://pulse.conviva.com/");
		String convivaTab = "";
		for (String winHandle : getWebDriver().getWindowHandles()) {
			if (!winHandle.equals(zeeTab) && !winHandle.equals(googleTab)) {
				convivaTab = winHandle;
				System.out.println("convivaTab : " + convivaTab);
				getWebDriver().switchTo().window(convivaTab);
				logger.info("Switched to Conviva Tab");
				extent.extentLogger("", "Switched to Conviva Tab");
				break;
			}
		}
		returnList.add(convivaTab);
		waitTime(3000);
		loginToConviva("murali.appadi@zee.esselgroup.com", "Ch@ng3m3!!");
		waitTime(3000);
		click(PWAConvivaPage.objUserTypeDropdown, "User Type dropdown in Conviva");
		waitTime(3000);
		click(PWAConvivaPage.objAdminUser, "Admin User");
		waitTime(7000);
		addIPToDeviceValidation(publicIP);

		String content = "Robin Hood Forever Enemies";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		waitTime(5000);
		waitForPlayerAdToComplete("Video Player");
		waitTime(10000);
		logger.info("Waited for 10 seconds");
		extent.extentLoggerPass("", "Waited for 10 seconds");
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(5000);
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		click(PWAConvivaPage.objMonitorSessionID(content), "Monitor Session ID");
		String clientID = getElementPropertyToString("data-value", PWAConvivaPage.objClientID, "Client ID");
		extent.extentLogger("", "Client ID Fetched : " + clientID);
		logger.info("Client ID Fetched : " + clientID);
		returnList.add(clientID);
		String viewerID = getElementPropertyToString("data-value", PWAConvivaPage.objViewerID, "Viewer ID");
		extent.extentLogger("", "Viewer ID Fetched : " + viewerID);
		logger.info("Viewer ID Fetched : " + viewerID);
		returnList.add(viewerID);
		getWebDriver().get("https://pulse.conviva.com/app/pulse/filters");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/filters");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/filters");
		frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objSearchFilterField, "Filter Search Field");
		type(PWAConvivaPage.objSearchFilterField, "For_Automation", "Filter Search Field");
		click(PWAConvivaPage.objFiltersSortButton, "Filter Sort button");
		click(PWAConvivaPage.objFiltersEditButton, "Edit button");
		waitTime(5000);
		clearField(PWAConvivaPage.objClientIDVlaueField, "Client Field");
		type(PWAConvivaPage.objClientIDVlaueField, clientID, "Client Field");
		click(PWAConvivaPage.objSaveFilterButton, "Save Filter button");
		applyAutomationFilter();
		return returnList;
	}

	public String verifyAttemptsAndConcurrentPlayCount(String userType, String zeeTab, String convivaTab)
			throws Exception {
		extent.HeaderChildNode("ID 1 : Attempts metric on Pulse");
		System.out.println("------------------- ID 1 : Attempts metric on Pulse -------------------");
		String attemptsContent = "Jhende to enquire about the prospective groom";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, attemptsContent, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(attemptsContent), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(attemptsContent), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		getWebDriver().get(contentURL);
		waitTime(5000);
		waitForPlayerAdToComplete("Video Player");
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds");
		logger.info("Waited for 20 seconds");
		String attempts = getElementPropertyToString("innerText", PWAConvivaPage.objAttempts, "Attempts");
		if (attempts.trim().equals("1")) {
			extent.extentLogger("", "Attempts displayed as 1, expected behavior");
			logger.info("Attempts displayed as 1, expected behavior");
		} else {
			extent.extentLoggerFail("", "Attempts displayed as " + attempts + " instead of 1");
			logger.error("Attempts displayed as " + attempts + " instead of 1");
		}
		extent.HeaderChildNode("ID 2 : Concurrent Plays metric on Pulse");
		System.out.println("------------------- ID 2 : Concurrent Plays metric on Pulse -------------------");
		String concurrentPlays = getElementPropertyToString("innerText", PWAConvivaPage.objConcurrentPlays,
				"Concurrent Plays");
		if (concurrentPlays.trim().equals("1")) {
			extent.extentLogger("", "Concurrent Plays displayed as 1, expected behavior");
			logger.info("Concurrent Plays displayed as 1, expected behavior");
		} else {
			extent.extentLoggerFail("", "Concurrent Plays displayed as " + concurrentPlays + " instead of 1");
			logger.error("Concurrent Plays displayed as " + concurrentPlays + " instead of 1");
		}
		extent.HeaderChildNode("ID 11 : Average Frame Rate");
		System.out.println("------------------- ID 11 : Average Frame Rate -------------------");
		String afr = getElementPropertyToString("innerText", PWAConvivaPage.objAverageFrameRate, "Concurrent Plays");
		if (afr.trim().equals("0 fps")) {
			extent.extentLoggerFail("", "AverageFrame Rate displayed as " + afr);
			logger.error("AverageFrame Rate displayed as " + afr);
		} else {
			extent.extentLogger("", "AverageFrame Rate displayed as " + afr);
			logger.info("AverageFrame Rate displayed as " + afr);
		}
		return contentID;
	}

	public void verifyVideoStartupTime(String userType, String zeeTab, String convivaTab, String viewerID,
			String contentID) throws Exception {
		extent.HeaderChildNode("ID 4 : Video Startup Time (VST) with pre-roll");
		System.out.println("------------------- ID 4 : Video Startup Time (VST) with pre-roll -------------------");
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		click(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID), "Monitor Session ID of Playing content");
		String vst = "";
		try {
			vst = getElementPropertyToString("innerText", PWAConvivaPage.objVST, "VST");
			extent.extentLogger("", "VST Displayed : " + vst);
			logger.info("VST Displayed : " + vst);
		} catch (Exception e) {
			vst = "";
		}
		if (vst.equalsIgnoreCase("Value Not Available") || vst.equals("") || vst.equals(null)) {
			extent.extentLoggerFail("", "Invalid VST displayed");
			logger.error("Invalid VST displayed");
		}
	}

	public void verifyAveragePercentageComplete(String userType, String zeeTab, String convivaTab, String contentID)
			throws Exception {
		mandatoryRegistrationPopUp(userType);
		extent.HeaderChildNode("ID 5 : Average % Complete");
		System.out.println("------------------- ID 5 : Average % Complete -------------------");
		waitTime(10000);
		extent.extentLogger("", "Waited for 10 seconds for Conviva to get updated");
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(7000);
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		click(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID), "Monitor Session ID of Playing content");
		String avgPercentageComplete = getElementPropertyToString("innerText", PWAConvivaPage.objAvgPercentageComplete,
				"Avrage Percentage Complete");
		if (avgPercentageComplete.equalsIgnoreCase("N/A")) {
			extent.extentLoggerFail("", "'N/A' is displayed as Average % Complete");
			logger.error("'N/A' is displayed as Average % Complete");
		} else {
			extent.extentLogger("", "Average % Complete Displayed : " + avgPercentageComplete);
			logger.info("Average % Complete Displayed : " + avgPercentageComplete);
		}
	}

	public void verifyPause(String userType, String zeeTab, String convivaTab, String contentID) throws Exception {
		extent.HeaderChildNode("ID 6 : Verify Pause");
		System.out.println("------------------- ID 6 : Verify Pause -------------------");
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		pausePlayer();
		String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Current Duration displayed on the player : " + currentDuration);
		logger.info("Current Duration displayed on the player : " + currentDuration);
		screencapture();
		getWebDriver().switchTo().window(convivaTab);
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		if (verifyElementPresentAndClick(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID),
				"Monitor Session ID of Playing content")) {
			waitTime(10000);
			waitTime(10000);
			extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
			logger.info("Waited for 20 seconds for Conviva to get updated");
			waitTime(10000);
			waitTime(10000);
			extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
			logger.info("Waited for 20 seconds for Conviva to get updated");
			String totalPlayingTime = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time : " + totalPlayingTime);
			logger.info("Total Playing Time : " + totalPlayingTime);
			waitTime(10000);
			waitTime(10000);
			extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
			logger.info("Waited for 20 seconds for Conviva to get updated");
			String totalPlayingTimeAftrWait = getElementPropertyToString("innerText",
					PWAConvivaPage.objTotalPlayingTime, "Total Playing Time");
			extent.extentLogger("", "Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			logger.info("Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			if (totalPlayingTime.equals(totalPlayingTimeAftrWait)) {
				extent.extentLogger("", "No change in Total Playing time because content is paused");
				logger.info("No change in Total Playing time because content is paused");
			} else {
				extent.extentLoggerFail("", "Total Playing time has not remained constant for paused content");
				logger.error("Total Playing time has not remained constant for paused content");
			}
		}
	}

	public void verifyExitBeforeVideoStart(String userType, String zeeTab, String convivaTab) throws Exception {
		extent.HeaderChildNode("ID 9 : Exit Before Video Starts");
		System.out.println("------------------- ID 9 : Exit Before Video Starts -------------------");
		String content = "Love U Ganesha";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		getWebDriver().get(contentURL);
		waitTime(7000);
		for (int i = 0; i < 3; i++) {
			try {
				findElement(PWAPlayerPage.objAd);
				logger.info("Ad play in progress");
				extent.extentLogger("AdPlayInProgress", "Ad play in progress");
				break;
			} catch (Exception e) {
				waitTime(2000);
			}
		}
		Back(1);
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		if (checkElementDisplayed(PWAConvivaPage.objMonitorSessionIDExitBeforeVideoStart(contentID),
				"Exit Before Video Start entry")) {
			logger.info("Exit Before Video Start is displayed for content " + content + " in Device Validation page");
			extent.extentLogger("",
					"Exit Before Video Start is displayed for content " + content + " in Device Validation Page");
			click(PWAConvivaPage.objMonitorSessionIDExitBeforeVideoStart(contentID),
					"Monitor Session ID of Exit Before Video Start content");
			String sessionStatus = getElementPropertyToString("innerText", PWAConvivaPage.objSessionStatus,
					"Session Status");
			if (sessionStatus.equalsIgnoreCase("Exit Before Video Start")) {
				extent.extentLogger("",
						"Session status is displayed as Exit Before Video Start in Device Validation Details page");
				logger.info("Session status is displayed as Exit Before Video Start in Device Validation Details page");
			} else {
				extent.extentLoggerFail("", "Session Status Displayed : " + sessionStatus);
				logger.error("Session Status Displayed : " + sessionStatus);
			}
		} else {
			logger.error("Exit Before Video Start is not displayed for content " + content);
			extent.extentLoggerFail("", "Exit Before Video Start is not displayed for content " + content);
		}

	}

	public void verifyClickOnProgressBar(String userType, String zeeTab, String convivaTab) throws Exception {
		extent.HeaderChildNode("ID 13 : Verify Click On Progress Bar");
		System.out.println("------------------- ID 13 :Verify Click On Progress Bar -------------------");
		String content = "Love U Ganesha";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		click(PWAPlayerPage.playBtn, "Play button");
		click(PWAPlayerPage.progressBar, "Progress bar");
		waitForPlayerAdToComplete("Video Player");
		String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Current Duration displayed on the player : " + currentDuration);
		logger.info("Current Duration displayed on the player : " + currentDuration);
		String[] timeAfterClick = currentDuration.split(":");
		int timeAfterClickMin = Integer.parseInt(timeAfterClick[0]) * 60;
		int timeAfterClickSec = Integer.parseInt(timeAfterClick[1]);
		int timeAfterClickSeconds = timeAfterClickMin + timeAfterClickSec;
		logger.info("Time fetched after clicking on Progress Bar in seconds: " + timeAfterClickSeconds);
		extent.extentLogger("timeBeforeForward",
				"Time fetched after clicking on Progress Bar in seconds: " + timeAfterClickSeconds);
		screencapture();
		getWebDriver().switchTo().window(convivaTab);
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		if (verifyElementPresentAndClick(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID),
				"Monitor Session ID of Playing content")) {
			String totalPlayingTime = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time : " + totalPlayingTime);
			logger.info("Total Playing Time : " + totalPlayingTime);
			waitTime(10000);
			waitTime(10000);
			extent.extentLogger("", "Waited for 20 seconds");
			String totalPlayingTimeAftrWait = getElementPropertyToString("innerText",
					PWAConvivaPage.objTotalPlayingTime, "Total Playing Time");
			extent.extentLogger("", "Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			logger.info("Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			String hourString = "", temp = "", minString = "", secString = "";
			try {
				hourString = totalPlayingTimeAftrWait.split(" hour, ")[0].trim();
				System.out.println("hour string : " + hourString);
				temp = totalPlayingTimeAftrWait.split(" hour, ")[1];
				minString = temp.split(" min, ")[0].trim();
				System.out.println("minute string : " + minString);
				secString = temp.split(" min, ")[1].split(" sec")[0];
				System.out.println("second string : " + secString);
			} catch (Exception e) {
				extent.extentLoggerFail("", "Failed to fetch Playing time");
				logger.error("Failed to fetch Playing time");
			}
			int hourInt = 0, minInt = 0, secInt = 0, convivaSecondsInt = 0;
			try {
				hourInt = Integer.parseInt(hourString) * 3600;
			} catch (Exception e) {
			}
			try {
				minInt = Integer.parseInt(minString) * 60;
			} catch (Exception e) {
			}
			try {
				secInt = Integer.parseInt(secString);
			} catch (Exception e) {
			}
			convivaSecondsInt = hourInt + minInt + secInt;
			extent.extentLogger("", "Total Playing Time in seconds: " + convivaSecondsInt);
			logger.info("Total Playing Time in seconds: " + convivaSecondsInt);
			screencapture();
			if (convivaSecondsInt > timeAfterClickSeconds && convivaSecondsInt <= timeAfterClickSeconds + 60) {
				extent.extentLogger("", "Conviva Dashboard Pulse update after click on Progress Bar is successful");
				logger.info("Conviva Dashboard Pulse update after click on Progress Bar  is successful");
			} else {
				extent.extentLoggerFail("",
						"Conviva Dashboard Pulse update after click on Progress Bar is unsuccessful");
				logger.error("Conviva Dashboard Pulse update after click on Progress Bar is unsuccessful");
			}
		}
	}

	public void verifyScrubOnProgressBar(String userType, String zeeTab, String convivaTab) throws Exception {
		String totalPlayingTime = "", totalPlayingTimeAftrWait = "", temp = "", hourString = "", minString = "",
				secString = "";
		int hourInt = 0, minInt = 0, secInt = 0, convivaSecondsInt = 0;
		extent.HeaderChildNode("ID 14 : Verify Scrub On Progress Bar");
		System.out.println("------------------- ID 14 :Scrub Click On Progress Bar -------------------");
		String content = "Mother Teresa";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		getWebDriver().get(contentURL);
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		click(PWAPlayerPage.playBtn, "Play button");
		Actions act = new Actions(getWebDriver());
		WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
		act.moveToElement(scrubber, 200, 0).click().build().perform();
		waitForPlayerAdToComplete("Video Player");
		String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Current Duration displayed on the player : " + currentDuration);
		logger.info("Current Duration displayed on the player : " + currentDuration);
		String[] timeAfterClick = currentDuration.split(":");
		int timeAfterClickMin = Integer.parseInt(timeAfterClick[0]) * 60;
		int timeAfterClickSec = Integer.parseInt(timeAfterClick[1]);
		int timeAfterClickSeconds = timeAfterClickMin + timeAfterClickSec;
		logger.info("Time fetched after scrubbing on Progress Bar in seconds: " + timeAfterClickSeconds);
		extent.extentLogger("timeBeforeForward",
				"Time fetched after scrubbing on Progress Bar in seconds: " + timeAfterClickSeconds);
		screencapture();
		getWebDriver().switchTo().window(convivaTab);
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		if (verifyElementPresentAndClick(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID),
				"Monitor Session ID of Playing content")) {
			totalPlayingTime = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time : " + totalPlayingTime);
			logger.info("Total Playing Time : " + totalPlayingTime);
			waitTime(10000);
			waitTime(10000);
			extent.extentLogger("", "Waited for 20 seconds");
			totalPlayingTimeAftrWait = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			logger.info("Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			hourString = totalPlayingTimeAftrWait.split(" hour, ")[0].trim();
			System.out.println("hour string : " + hourString);
			temp = totalPlayingTimeAftrWait.split(" hour, ")[1];
			minString = temp.split(" min, ")[0].trim();
			System.out.println("minute string : " + minString);
			secString = temp.split(" min, ")[1].split(" sec")[0];
			System.out.println("second string : " + secString);
			try {
				hourInt = Integer.parseInt(hourString) * 3600;
			} catch (Exception e) {
			}
			try {
				minInt = Integer.parseInt(minString) * 60;
			} catch (Exception e) {
			}
			try {
				secInt = Integer.parseInt(secString);
			} catch (Exception e) {
			}
			convivaSecondsInt = hourInt + minInt + secInt;
			extent.extentLogger("", "Total Playing Time in seconds: " + convivaSecondsInt);
			logger.info("Total Playing Time in seconds: " + convivaSecondsInt);
			screencapture();
			if (convivaSecondsInt > timeAfterClickSeconds && convivaSecondsInt <= timeAfterClickSeconds + 60) {
				extent.extentLogger("", "Conviva Dashboard Pulse update after scrub on Progress Bar is successful");
				logger.info("Conviva Dashboard Pulse update after scrub on Progress Bar  is successful");
			} else {
				extent.extentLoggerFail("",
						"Conviva Dashboard Pulse update after click on Progress Bar is unsuccessful");
				logger.error("Conviva Dashboard Pulse update after scrub on Progress Bar is unsuccessful");
			}
		}

		extent.HeaderChildNode("ID 15 : Verify Fast forward and Rewind");
		System.out.println("------------------- ID 15 : Verify Fast Forward and Rewind -------------------");
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds");
		click(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds");
		// click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		// click(PWAPlayerPage.playBtn, "Play button");
		// waitForPlayerAdToComplete("Video Player");
		currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Current Duration displayed on the player : " + currentDuration);
		logger.info("Current Duration displayed on the player : " + currentDuration);
		timeAfterClick = currentDuration.split(":");
		timeAfterClickMin = Integer.parseInt(timeAfterClick[0]) * 60;
		timeAfterClickSec = Integer.parseInt(timeAfterClick[1]);
		int timeAfterForwardSeconds = timeAfterClickMin + timeAfterClickSec;
		logger.info("Time fetched after clicking on Forward button in seconds: " + timeAfterForwardSeconds);
		extent.extentLogger("timeBeforeForward",
				"Time fetched after clicking on Forward button in seconds: " + timeAfterForwardSeconds);
		screencapture();
		getWebDriver().switchTo().window(convivaTab);
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		if (verifyElementPresentAndClick(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID),
				"Monitor Session ID of Playing content")) {
			totalPlayingTime = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time : " + totalPlayingTime);
			logger.info("Total Playing Time : " + totalPlayingTime);
			waitTime(10000);
			waitTime(10000);
			extent.extentLogger("", "Waited for 20 seconds");
			totalPlayingTimeAftrWait = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			logger.info("Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			hourString = totalPlayingTimeAftrWait.split(" hour, ")[0].trim();
			System.out.println("hour string : " + hourString);
			temp = totalPlayingTimeAftrWait.split(" hour, ")[1];
			minString = temp.split(" min, ")[0].trim();
			System.out.println("minute string : " + minString);
			secString = temp.split(" min, ")[1].split(" sec")[0];
			System.out.println("second string : " + secString);
			try {
				hourInt = Integer.parseInt(hourString) * 3600;
			} catch (Exception e) {
			}
			try {
				minInt = Integer.parseInt(minString) * 60;
			} catch (Exception e) {
			}
			try {
				secInt = Integer.parseInt(secString);
			} catch (Exception e) {
			}
			convivaSecondsInt = hourInt + minInt + secInt;
			extent.extentLogger("", "Total Playing Time in seconds: " + convivaSecondsInt);
			logger.info("Total Playing Time in seconds: " + convivaSecondsInt);
			screencapture();
			if (convivaSecondsInt > timeAfterForwardSeconds && timeAfterForwardSeconds <= timeAfterClickSeconds + 50) {
				extent.extentLogger("", "Conviva Dashboard Pulse update after Forward is successful");
				logger.info("Conviva Dashboard Pulse update after Forward is successful");
			} else {
				extent.extentLoggerFail("", "Conviva Dashboard Pulse update after Forward is unsuccessful");
				logger.error("Conviva Dashboard Pulse update after Forward is unsuccessful");
			}
		}

		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAPlayerPage.objSubTitleOverlay, "Playback Overlay");
		click(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds");
		click(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds");
		// click(PWAPlayerPage.playBtn, "Play button");
		waitTime(2000);
		currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Current Duration displayed on the player : " + currentDuration);
		logger.info("Current Duration displayed on the player : " + currentDuration);
		timeAfterClick = currentDuration.split(":");
		timeAfterClickMin = Integer.parseInt(timeAfterClick[0]) * 60;
		timeAfterClickSec = Integer.parseInt(timeAfterClick[1]);
		int timeAfterRewindSeconds = timeAfterClickMin + timeAfterClickSec;
		logger.info("Time fetched after clicking on Rewind button in seconds: " + timeAfterRewindSeconds);
		extent.extentLogger("timeBeforeForward",
				"Time fetched after clicking on Rewind button in seconds: " + timeAfterRewindSeconds);
		screencapture();
		getWebDriver().switchTo().window(convivaTab);
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		if (verifyElementPresentAndClick(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID),
				"Monitor Session ID of Playing content")) {
			totalPlayingTime = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time : " + totalPlayingTime);
			logger.info("Total Playing Time : " + totalPlayingTime);
			waitTime(10000);
			waitTime(10000);
			extent.extentLogger("", "Waited for 20 seconds");
			totalPlayingTimeAftrWait = getElementPropertyToString("innerText", PWAConvivaPage.objTotalPlayingTime,
					"Total Playing Time");
			extent.extentLogger("", "Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			logger.info("Total Playing Time after waiting for 20 seconds: " + totalPlayingTimeAftrWait);
			try {
				hourString = totalPlayingTimeAftrWait.split(" hour, ")[0].trim();
				System.out.println("hour string : " + hourString);
				temp = totalPlayingTimeAftrWait.split(" hour, ")[1];
				minString = temp.split(" min, ")[0].trim();
				System.out.println("minute string : " + minString);
				secString = temp.split(" min, ")[1].split(" sec")[0];
				System.out.println("second string : " + secString);
			} catch (Exception e) {
				extent.extentLoggerFail("", "Failed to fetch time");
				logger.error("Failed to fetch time");
			}
			try {
				hourInt = Integer.parseInt(hourString) * 3600;
			} catch (Exception e) {
			}
			try {
				minInt = Integer.parseInt(minString) * 60;
			} catch (Exception e) {
			}
			try {
				secInt = Integer.parseInt(secString);
			} catch (Exception e) {
			}
			convivaSecondsInt = hourInt + minInt + secInt;
			extent.extentLogger("", "Total Playing Time in seconds: " + convivaSecondsInt);
			logger.info("Total Playing Time in seconds: " + convivaSecondsInt);
			screencapture();
			if (convivaSecondsInt > timeAfterRewindSeconds && timeAfterRewindSeconds <= timeAfterClickSeconds + 30) {
				extent.extentLogger("", "Conviva Dashboard Pulse update after Rewind is successful");
				logger.info("Conviva Dashboard Pulse update after Rewind is successful");
			} else {
				extent.extentLoggerFail("", "Conviva Dashboard Pulse update after Rewind is unsuccessful");
				logger.error("Conviva Dashboard Pulse update after Rewind is unsuccessful");
			}
		}
	}

	@SuppressWarnings("unused")
	public void verifySessionClose(String userType, String zeeTab, String convivaTab) throws Exception {
		extent.HeaderChildNode("ID 20 : Verify Session Close");
		System.out.println("------------------- ID 20 : Verify Session Close -------------------");
		String content = "To The Rescue";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		getWebDriver().get(contentURL);
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objSubTitleOverlay, "Playback Overlay");
		String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Current Duration displayed on the player : " + currentDuration);
		logger.info("Current Duration displayed on the player : " + currentDuration);
		navigateToHome();
		extent.extentLogger("", "Navigated to Home Page to close session");
		logger.info("Navigated to Home Page to close session");
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds");
		logger.info("Waited for 20 seconds");
		String concurrentPlays = getElementPropertyToString("innerText", PWAConvivaPage.objConcurrentPlays,
				"Concurrent Plays");
		if (concurrentPlays.trim().equals("0") || concurrentPlays.trim().equals("1")) {
			extent.extentLogger("", "Concurrent Plays displayed as 0, expected behavior for session close");
			logger.info("Concurrent Plays displayed as 0, expected behavior for session close");
		} else {
			extent.extentLoggerFail("",
					"Concurrent Plays displayed as " + concurrentPlays + " instead of 0 or 1 for session closed");
			logger.error("Concurrent Plays displayed as " + concurrentPlays + " instead of 0 or 1 for session closed");
		}

		extent.HeaderChildNode("ID 21 : Verify Session Ended");
		System.out.println("------------------- ID 21 : Verify Session Ended -------------------");
		content = "Simba Junior: In New York";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		contentURL = getWebDriver().getCurrentUrl();
		abc = contentURL.split("/");
		contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		getWebDriver().get(contentURL);
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		click(PWAPlayerPage.playBtn, "Play button");
		Actions act = new Actions(getWebDriver());
		WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
		WebElement seekbar = getWebDriver().findElement(PWAPlayerPage.objPlayerSeekBar);
		System.out.println(seekbar.getSize().getWidth());
		System.out.println(scrubber.getLocation().getX());
		int x = seekbar.getSize().getWidth();
		act.moveToElement(scrubber, 655, 0).click().build().perform();
		extent.extentLogger("", "Scrubbed to end of the player");
		logger.info("Scrubbed to end of the player");
		mandatoryRegistrationPopUp(userType);
		screencapture();
		waitTime(15000);
		extent.extentLogger("", "Waited for 15 seconds to complete the play");
		logger.info("Waited for 15 seconds to complete the play");
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/reports/54");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/reports/54");
		logger.info("Opened : https://pulse.conviva.com/reports/54");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		concurrentPlays = getElementPropertyToString("innerText", PWAConvivaPage.objConcurrentPlays,
				"Concurrent Plays");
		if (concurrentPlays.trim().equals("0")) {
			extent.extentLogger("", "Concurrent Plays displayed as 0, expected behavior for session ended");
			logger.info("Concurrent Plays displayed as 0, expected behavior for session ended");
		} else {
			extent.extentLoggerFail("",
					"Concurrent Plays displayed as " + concurrentPlays + " instead of 0 for session ended");
			logger.error("Concurrent Plays displayed as " + concurrentPlays + " instead of 0 for session ended");
		}

	}

	public void verifyPlayAfterMidRoll(String userType, String zeeTab, String convivaTab) throws Exception {

		extent.HeaderChildNode("ID 27, ID 29 : Verify Play After Mid Roll");
		System.out.println("------------------- ID 27, ID 29 : Verify Play After Mid Roll -------------------");
		String content = "Robin Hood Forever Enemies";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		getWebDriver().get(contentURL);
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
		click(PWAPlayerPage.playBtn, "Play button");
		Actions act = new Actions(getWebDriver());
		WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
		act.moveToElement(scrubber, 450, 0).click().build().perform();
		extent.extentLogger("", "Scrubbed to middle of the player");
		logger.info("Scrubbed to middle of the player");
		mandatoryRegistrationPopUp(userType);
		screencapture();
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objSubTitleOverlay, "Playback Overlay");
		String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Current Duration displayed on the player after midroll: " + currentDuration);
		logger.info("Current Duration displayed on the player after midroll: " + currentDuration);
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		if (checkElementDisplayed(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID),
				"Monitor Session ID of Playing content")) {
			extent.extentLogger("", "Session is maintained in Pulse after the midroll");
			logger.info("Session is maintained in Pulse after the midroll");
		} else {
			extent.extentLoggerFail("", "Session is not maintained in Pulse after the midroll");
			logger.error("Session is not maintained in Pulse after the midroll");
		}

	}

	public void verifyPlayAfterPostRoll(String userType, String zeeTab, String convivaTab) throws Exception {

		extent.HeaderChildNode("ID 28 : Verify Play After Post Roll");
		System.out.println("------------------- ID 28 : Verify Play After Post Roll -------------------");
		String content = "Robin Hood And The Invincible Knight";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);
		getWebDriver().get(contentURL);
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.objSubTitleOverlay, "Playback Overlay");
		click(PWAPlayerPage.playBtn, "Play button");
		Actions act = new Actions(getWebDriver());
		WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
		act.moveToElement(scrubber, 700, 0).click().build().perform();
		waitTime(2000);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "Scrubbed to end of the player");
		logger.info("Scrubbed to end of the player");
		screencapture();
		String consumptionPageTitle = "";
		for (int i = 0; i < 30; i++) {
			try {
				findElement(PWAPlayerPage.objAd);
				if (Math.floorMod(i, 5) == 0) {
					logger.info("Postroll Ad play in progress");
					extent.extentLogger("AdPlayInProgress", "Postroll Ad play in progress");
				}
			} catch (Exception e) {
			}
			try {
				consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
						"Content Title").toString();
				System.out.println(consumptionPageTitle);
				if (!consumptionPageTitle.equalsIgnoreCase(content)) {
					logger.info("Current content play complete, next content playing : " + consumptionPageTitle);
					extent.extentLogger("",
							"Current content play complete, next content playing : " + consumptionPageTitle);
					break;
				} else
					waitTime(5000);
			} catch (Exception e) {
				waitTime(5000);
			}
		}
		screencapture();
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		extent.extentLogger("", "Waited for 10 seconds for Conviva to get updated");
		logger.info("Waited for 10 seconds for Conviva to get updated");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		waitTime(3000);
		if (checkElementDisplayed(PWAConvivaPage.objMonitorSessionIDPlayedContent(contentID),
				"Monitor Session ID of Played content")) {
			extent.extentLogger("", "Session is maintained in Pulse after the postroll");
			logger.info("Session is maintained in Pulse after the postroll");
		} else {
			extent.extentLoggerFail("", "Session is not maintained in Pulse after the postroll");
			logger.error("Session is not maintained in Pulse after the postroll");
		}

	}

	@SuppressWarnings({ "unused", "rawtypes" })
	public ArrayList verifyPlayOnAdClick(String userType, String zeeTab, String convivaTab) throws Exception {
		ArrayList<String> returnString = new ArrayList<String>();
		extent.HeaderChildNode("ID 29 : Verify Play On Ad Click");
		System.out.println("------------------- ID 29 : Verify Play On Ad Click -------------------");
		String content = "Episode 1 - Spring Foolery";
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objZeeLogo, "Zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(content), 10, "Search Result");
		click(PWASearchPage.objSearchedResult(content), "Search Result");
		String contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID played : " + contentID);
		logger.info("Content ID played : " + contentID);

		Response resp = null;
		for (int i = 0; i < 10; i++) {
			resp = ResponseInstance.getContentDetails(contentID, "content");
			// System.out.println(resp.getBody().asString());
			if (!resp.getBody().asString().contains("\"error_code\":401")) {
				break;
			} else
				waitTime(1000);
		}
		String contentTitleAPI = resp.jsonPath().get("title").toString().trim();
		returnString.add(contentTitleAPI);
		String contentIdAPI = resp.jsonPath().get("id").toString().trim();
		returnString.add(contentID);
		String durationAPI = resp.jsonPath().get("duration").toString();
		returnString.add(durationAPI);
		String episodeNumber = resp.jsonPath().get("orderid").toString();
		returnString.add(episodeNumber);
		String assetTypeAPI = resp.jsonPath().get("asset_subtype").toString().trim();
		returnString.add(assetTypeAPI);
		String tvshowAPI = "";
		if (assetTypeAPI.equalsIgnoreCase("episode")) {
			tvshowAPI = resp.jsonPath().get("tvshow.title").toString();
		}
		returnString.add(tvshowAPI);
		String oriLangAPI = resp.jsonPath().get("languages[0]");
		returnString.add(oriLangAPI);
		String releaseDateAPI = resp.jsonPath().get("release_date");
		releaseDateAPI = releaseDateAPI.split("T")[0];
		String yr = releaseDateAPI.split("-")[0];
		String month = releaseDateAPI.split("-")[1];
		String date = releaseDateAPI.split("-")[2];
		releaseDateAPI = dateConversionForConviva(date + "/" + month + "/" + yr);
		System.out.println(releaseDateAPI);
		returnString.add(releaseDateAPI);
		int genreAPIsize = resp.jsonPath().get("genre.size()");
		String genreAPI = "";
		for (int i = 0; i < genreAPIsize; i++) {
			String genrevalue = resp.jsonPath().get("genre[" + i + "]").toString().split("value=")[1].split("}")[0];
			genreAPI = genreAPI + genrevalue + " ";
		}
		genreAPI = genreAPI.trim();
		returnString.add(genreAPI);
		String siteExp = contentURL.split("://")[1].split("/")[0];
		returnString.add(siteExp);
		for (int i = 0; i < 3; i++) {
			try {
				findElement(PWAPlayerPage.objAd);
				logger.info("Ad play in progress");
				extent.extentLogger("AdPlayInProgress", "Ad play in progress");
				waitTime(5000);
				break;
			} catch (Exception e) {
				waitTime(5000);
			}
		}

		WebElement AdTimeContainer = getWebDriver().findElement(PWAConvivaPage.objAdUi);
		int Adx = AdTimeContainer.getLocation().getX();
		System.out.println(Adx);
		int Ady = AdTimeContainer.getLocation().getY();
		System.out.println(Ady);
		int clickx = Adx;
		int clicky = Ady - 10;
		Actions act = new Actions(getWebDriver());
		act.moveToElement(AdTimeContainer).moveByOffset(5, -20).click().build().perform();
		logger.info("Clicked on Ad overlay");
		extent.extentLogger("AdPlayInProgress", "Clicked on Ad overlay");
		waitTime(3000);

		String AdTab = "";
		for (String winHandle : getWebDriver().getWindowHandles()) {
			if (!winHandle.equals(zeeTab) && !winHandle.equals(convivaTab)) {
				AdTab = winHandle;
				System.out.println("AdTab : " + AdTab);
				getWebDriver().switchTo().window(AdTab);
				String AdUrl = getWebDriver().getCurrentUrl();
				logger.info("Ad URL Displayed: " + AdUrl);
				extent.extentLogger("", "Ad URL Displayed: " + AdUrl);
				getWebDriver().switchTo().window(AdTab).close();
				logger.info("Closed the Ad Tab");
				extent.extentLogger("", "Closed the Ad Tab");
				break;
			}
		}
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		getWebDriver().get("https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		extent.extentLogger("", "Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		logger.info("Opened : https://pulse.conviva.com/app/pulse/device_validation/?live=true");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		click(PWAConvivaPage.objDeviceValidationFilter, "Device validation filter");
		click(PWAConvivaPage.objDeviceValidation("For_Automation"), "Device filter");
		if (checkElementDisplayed(PWAConvivaPage.objMonitorSessionIDStartedNotJoinedContent(contentID),
				"Monitor Session ID of 'Started- Not Joined' content")) {
			extent.extentLogger("", "Session is maintained in Pulse on Ad Click before content play");
			logger.info("Session is maintained in Pulse on Ad Click before content play");
		} else {
			extent.extentLoggerFail("", "Session is not maintained in Pulse on Ad Click before content play");
			logger.error("Session is not maintained in Pulse on Ad Click before content play");
		}
		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to Zee5 Tab");
		extent.extentLogger("", "Switched to Zee5 Tab");
		act.moveToElement(AdTimeContainer).moveByOffset(5, -20).click().build().perform();
		logger.info("Clicked on Ad overlay to resume Ad Play");
		extent.extentLogger("AdPlayInProgress", "Clicked on Ad overlay to resume Ad Play");
		waitForPlayerAdToComplete("Video Player");
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		waitTime(10000);
		waitTime(10000);
		extent.extentLogger("", "Waited for 20 seconds for Conviva to get updated");
		logger.info("Waited for 20 seconds for Conviva to get updated");
		frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		if (checkElementDisplayed(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID),
				"Monitor Session ID of Playing content")) {
			extent.extentLogger("", "Session is maintained in Pulse after Ad play");
			logger.info("Session is maintained in Pulse after Ad play");
		} else {
			extent.extentLoggerFail("", "Session is not maintained in Pulse after Ad play");
			logger.error("Session is not maintained in Pulse after Ad play");
		}
		extent.HeaderChildNode("ID 42 : Verify CDN mapping");
		System.out.println("------------------- ID 42 : Verify CDN mapping -------------------");
		String cdn = "";
		for (int i = 0; i < 5; i++) {
			try {
				getWebDriver().findElement(PWAConvivaPage.objMonitorSessionIDPlayingContent(contentID)).click();
				extent.extentLogger("", "Clicked on Monitor Session ID of Playing content");
				logger.info("Clicked on Monitor Session ID of Playing content");
				cdn = getElementPropertyToString("innerText", PWAConvivaPage.objCDN, "CDN");

				break;
			} catch (Exception e) {
			}
		}
		if (cdn.equals("") || cdn.equalsIgnoreCase("NA") || cdn.equals(null) || cdn.equalsIgnoreCase("UNKNOWN")) {
			extent.extentLoggerFail("", "Inalid CDN is displayed :" + cdn);
			logger.error("Inalid CDN is displayed : " + cdn);
		} else {
			extent.extentLogger("", "CDN displayed : " + cdn);
			logger.info("CDN displayed : " + cdn);
		}
		return returnString;
	}

	/**
	 * CONVIVA
	 */

	@SuppressWarnings({ "unchecked", "rawtypes", "unused" })
	public void ConvivaVerification(String userType) throws Exception {
		extent.HeaderChildNode("Conviva launch, login and initial setup");
		System.out.println("------------------- Conviva launch, login and initial setup -------------------");
		String zeeTab = getWebDriver().getWindowHandle();
		System.out.println("zeeTab : " + zeeTab);
		List<String> tabAndIDs = InititalSetUpOfConviva(userType, zeeTab);
		String convivaTab = tabAndIDs.get(0);
		String clientID = tabAndIDs.get(1);
		String viewerID = tabAndIDs.get(2);
		String contentID = verifyAttemptsAndConcurrentPlayCount(userType, zeeTab, convivaTab);
		verifyVideoStartupTime(userType, zeeTab, convivaTab, viewerID, contentID);
		verifyAveragePercentageComplete(userType, zeeTab, convivaTab, contentID);
		verifyPause(userType, zeeTab, convivaTab, contentID);
		verifyExitBeforeVideoStart(userType, zeeTab, convivaTab);
		verifyClickOnProgressBar(userType, zeeTab, convivaTab);
		verifyScrubOnProgressBar(userType, zeeTab, convivaTab);
		verifySessionClose(userType, zeeTab, convivaTab);
		verifyPlayAfterMidRoll(userType, zeeTab, convivaTab);
		verifyPlayAfterPostRoll(userType, zeeTab, convivaTab);
		ArrayList assetDetails = verifyPlayOnAdClick(userType, zeeTab, convivaTab);
		String userAgentExpected = verifyDeviceTags(userType, zeeTab, convivaTab);
		assetDetails.add(userAgentExpected);
		verifyRequiredTags(assetDetails);
		verifyCustomTags(assetDetails, zeeTab, convivaTab);
	}

	@SuppressWarnings("unused")
	public String verifyDeviceTags(String userType, String zeeTab, String convivaTab) throws Exception {
		extent.HeaderChildNode("ID 45 : Verify Device Tags");
		System.out.println("------------------- ID 45 : Verify Device Tags -------------------");
		String browserExp = "", browserVersionExp = "", OSExp = "", OSVersionExp = "", UserAgentExpected = "";
		String browserActual = "", browserVersionActual = "", deviceHWTypeActual = "", deviceOSActual = "",
				deviceOSFamilyActual = "", deviceOSVersionActual = "", playerFWNameActual = "";
		getWebDriver().switchTo().window(zeeTab);
		JavascriptExecutor js = (JavascriptExecutor) getWebDriver();
		js.executeScript("window.open('https://google.com/')");
		String ChromeVersionTab = "";
		System.out.println(getWebDriver().getWindowHandles());
		for (String winHandle : getWebDriver().getWindowHandles()) {
			if (!winHandle.equals(zeeTab) && !winHandle.equals(convivaTab)) {
				ChromeVersionTab = winHandle;
				System.out.println("ChromeVersionTab : " + ChromeVersionTab);
				getWebDriver().switchTo().window(ChromeVersionTab);
				getWebDriver().get("chrome://version/");
				extent.extentLogger("", "Opened : chrome://version/");
				logger.info("Opened : chrome://version/");
				browserExp = "Chrome";
				logger.info("Browser fetched : " + browserExp);
				extent.extentLogger("", "Browser fetched : " + browserExp);
				browserVersionExp = getElementPropertyToString("innerText", PWAConvivaPage.objChromeVersionFromChrome,
						"Chrome Version");
				browserVersionExp = "Chrome " + browserVersionExp;
				logger.info("Browser version fetched : " + browserVersionExp);
				extent.extentLogger("", "Browser version fetched : " + browserVersionExp);
				OSExp = getElementPropertyToString("innerText", PWAConvivaPage.objSystemOSFromChrome, "System OS");
				logger.info("OS fetched : " + OSExp);
				extent.extentLogger("", "OS fetched : " + OSExp);
				OSVersionExp = getElementPropertyToString("innerText", PWAConvivaPage.objSystemOSVersionFromChrome,
						"System OS Version");
				logger.info("OS Version fetched : " + OSVersionExp);
				extent.extentLogger("", "OS version fetched : " + OSVersionExp);
				OSVersionExp = OSExp + " " + OSVersionExp.split(" ")[0];
				UserAgentExpected = getElementPropertyToString("innerText", PWAConvivaPage.objUserAgentFromChrome,
						"User Agent");
				logger.info("User Agent fetched : " + UserAgentExpected);
				extent.extentLogger("", "User Agent fetched : " + UserAgentExpected);
				getWebDriver().switchTo().window(ChromeVersionTab).close();
				logger.info("Closed the Chrome Version info Tab");
				extent.extentLogger("", "Closed the Chrome Version info Tab");
				break;
			}
		}
		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		browserActual = getElementPropertyToString("innerText", PWAConvivaPage.objBrowserName, "Browser");
		logger.info("Browser fetched from Conviva Tab : " + browserActual);
		extent.extentLogger("", "Browser fetched from Conviva Tab : " + browserActual);
		if (browserActual.equals(browserExp)) {
			logger.info("Verified correct Browser");
			extent.extentLogger("", "Verified correct Browser");
		} else {
			logger.error("Verified incorrect Browser");
			extent.extentLoggerFail("", "Verified incorrect Browser");
		}

		browserVersionActual = getElementPropertyToString("innerText", PWAConvivaPage.objBrowserVersion,
				"Browser Version");
		logger.info("Browser Version fetched from Conviva Tab : " + browserVersionActual);
		extent.extentLogger("", "Browser Version fetched from Conviva Tab : " + browserVersionActual);
		if (browserVersionActual.equals(browserVersionExp)) {
			logger.info("Verified correct Browser Version");
			extent.extentLogger("", "Verified correct Browser Version");
		} else {
			logger.error("Verified incorrect Browser Version");
			extent.extentLoggerFail("", "Verified incorrect Browser Version");
		}

		deviceHWTypeActual = getElementPropertyToString("innerText", PWAConvivaPage.objDeviceHardwareType,
				"Device HW Type");
		logger.info("Device Hardware Type fetched from Conviva Tab : " + deviceHWTypeActual);
		extent.extentLogger("", "Device Hardware Type fetched from Conviva Tab : " + deviceHWTypeActual);
		if (deviceHWTypeActual.equals("Desktop")) {
			logger.info("Verified correct Device Hardware Type");
			extent.extentLogger("", "Verified correct Device Hardware Type");
		} else {
			logger.error("Verified incorrect Device Hardware Type");
			extent.extentLoggerFail("", "Verified incorrect Device Hardware Type");
		}
		deviceOSActual = getElementPropertyToString("innerText", PWAConvivaPage.objDeviceOS, "Device OS");
		logger.info("Device OS fetched from Conviva Tab : " + deviceOSActual);
		extent.extentLogger("", "Device OS fetched from Conviva Tab : " + deviceOSActual);
		if (deviceOSActual.equals(OSVersionExp)) {
			logger.info("Verified correct Device OS");
			extent.extentLogger("", "Verified correct Device OS");
		} else {
			logger.error("Verified incorrect Device OS");
			extent.extentLoggerFail("", "Verified incorrect Device OS");
		}
		deviceOSFamilyActual = getElementPropertyToString("innerText", PWAConvivaPage.objDeviceOSFamily,
				"Device OS Family");
		logger.info("Device OS Family fetched from Conviva Tab : " + deviceOSFamilyActual);
		extent.extentLogger("", "Device OS Family fetched from Conviva Tab : " + deviceOSFamilyActual);
		if (deviceOSFamilyActual.equals(OSExp)) {
			logger.info("Verified correct Device OS Family");
			extent.extentLogger("", "Verified correct Device OS Family");
		} else {
			logger.error("Verified incorrect Device OS Family");
			extent.extentLoggerFail("", "Verified incorrect Device OS Family");
		}
		playerFWNameActual = getElementPropertyToString("innerText", PWAConvivaPage.objPlayerFrameworkName,
				"Player FW Name");
		logger.info("Player Framework Name fetched from Conviva Tab : " + playerFWNameActual);
		extent.extentLogger("", "Player Framework Name fetched from Conviva Tab : " + playerFWNameActual);
		if (playerFWNameActual.equals("Kaltura Player")) {
			logger.info("Verified correct Player Framework Name");
			extent.extentLogger("", "Verified correct Player Framework Name");
		} else {
			logger.error("Verified incorrect Player Framework Name");
			extent.extentLoggerFail("", "Verified incorrect Player Framework Name");
		}
		return UserAgentExpected;
	}

	@SuppressWarnings("rawtypes")
	public void verifyRequiredTags(ArrayList assetDetails) throws Exception {
		extent.HeaderChildNode("ID 46 : Verify Required Tags");
		System.out.println("------------------- ID 46 : Verify Required Tags -------------------");
		String contentTitleAPI = assetDetails.get(0).toString();
		extent.extentLogger("", "Content Title from API: " + contentTitleAPI);
		logger.info("Content Title from API: " + contentTitleAPI);
		String contentIdAPI = assetDetails.get(1).toString();
		extent.extentLogger("", "Content ID from API: " + contentIdAPI);
		logger.info("Content ID from API: " + contentIdAPI);
		String assetNameExpected = "[" + contentIdAPI + "]" + " " + contentTitleAPI;
		String assetDurationAPI = assetDetails.get(2).toString();
		extent.extentLogger("apidata", "Asset Duration fetched from API: " + assetDurationAPI);
		logger.info("Asset Duration fetched from API: " + assetDurationAPI);

		String AssetNameActual = getElementPropertyToString("innerText", PWAConvivaPage.objAssetName, "Asset Name");
		logger.info("Asset Name from Conviva Tab : " + AssetNameActual);
		extent.extentLogger("", "Asset Name from Conviva Tab :  " + AssetNameActual);
		if (AssetNameActual.equals(assetNameExpected)) {
			logger.info("Verified correct Asset Name");
			extent.extentLogger("", "Verified correct Asset Name");
		} else {
			logger.error("Verified incorrect Asset Name");
			extent.extentLoggerFail("", "Verified incorrect Asset Name");
		}

		String AssetDurationActual = getElementPropertyToString("innerText", PWAConvivaPage.objAssetDuration,
				"Asset Duration");
		logger.info("Asset Duration from Conviva Tab : " + AssetDurationActual);
		extent.extentLogger("", "Asset Duration from Conviva Tab :  " + AssetDurationActual);
		if (AssetDurationActual.split(" ")[0].equals(assetDurationAPI)) {
			logger.info("Verified correct Asset Duration");
			extent.extentLogger("", "Verified correct Asset Duration");
		} else {
			logger.error("Verified incorrect Asset Duration");
			extent.extentLoggerFail("", "Verified incorrect Asset Name");
		}

	}

	@SuppressWarnings({ "unused", "rawtypes" })
	public void verifyCustomTags(ArrayList assetDetails, String zeeTab, String convivaTab) throws Exception {
		extent.HeaderChildNode("ID 47 : Verify Custom Tags");
		System.out.println("------------------- ID 47 : Verify Custom Tags -------------------");
		String contentTitleAPI = assetDetails.get(0).toString();
		extent.extentLogger("", "Content Title from API: " + contentTitleAPI);
		logger.info("Content Title from API: " + contentTitleAPI);
		String contentIdAPI = assetDetails.get(1).toString();
		extent.extentLogger("", "Content ID from API: " + contentIdAPI);
		logger.info("Content ID from API: " + contentIdAPI);
		String assetNameExpected = "[" + contentIdAPI + "]" + " " + contentTitleAPI;
		String episodeNumberAPI = assetDetails.get(3).toString();
		extent.extentLogger("apidata", "Episode number fetched from API: " + episodeNumberAPI);
		logger.info("Episode number fetched from API: " + episodeNumberAPI);
		String assetTypeAPI = assetDetails.get(4).toString();
		extent.extentLogger("", "Content Type fetched from API: " + assetTypeAPI);
		logger.info("Content Type fetched from API: " + assetTypeAPI);
		String tvShowAPI = assetDetails.get(5).toString();
		extent.extentLogger("apidata", "Show fetched from API: " + tvShowAPI);
		logger.info("Show fetched from API: " + tvShowAPI);
		String oriLangAPI = assetDetails.get(6).toString();
		extent.extentLogger("", "Language from API: " + oriLangAPI);
		logger.info("Language from API: " + oriLangAPI);
		String releaseDateAPI = assetDetails.get(7).toString();
		extent.extentLogger("", "Release Date from API: " + releaseDateAPI);
		logger.info("Release Date from API: " + releaseDateAPI);
		String genreAPI = assetDetails.get(8).toString();
		extent.extentLogger("", "Genre from API: " + genreAPI);
		logger.info("Genre from API: " + genreAPI);
		String siteExp = assetDetails.get(9).toString();
		extent.extentLogger("", "Expected Site: " + siteExp);
		logger.info("Expected Site: " + siteExp);
		String userAgentExp = assetDetails.get(10).toString();
		extent.extentLogger("", "Expected UserAgent fetched from Chrome: " + userAgentExp);
		logger.info("Expected UserAgent fetched from Chrome: " + userAgentExp);

		getWebDriver().switchTo().window(zeeTab);
		logger.info("Switched to ZEE5 Tab");
		extent.extentLogger("", "Switched to ZEE5 Tab");
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		partialScroll();
		String version = getText(PWAHamburgerMenuPage.objBuildVersion);
		logger.info("App Build version is : " + version);
		extent.extentLogger("version", "App Build version is : " + version);

		getWebDriver().switchTo().window(convivaTab);
		logger.info("Switched to Conviva Tab");
		extent.extentLogger("", "Switched to Conviva Tab");
		WebElement frameElement = getWebDriver().findElement(PWAConvivaPage.objIframePulse4);
		getWebDriver().switchTo().frame(frameElement);
		String contentTypeAct = getElementPropertyToString("innerText", PWAConvivaPage.objContentType, "Content Type");
		logger.info("Content Type fetched from Conviva Tab : " + contentTypeAct);
		extent.extentLogger("", "Content Type fetched from Conviva Tab : " + contentTypeAct);
		if (contentTypeAct.equals(assetTypeAPI)) {
			logger.info("Verified correct Content Type");
			extent.extentLogger("", "Verified correct Content Type");
		} else {
			logger.error("Verified incorrect Browser");
			extent.extentLoggerFail("", "Verified incorrect Browser");
		}
		String deviceAct = getElementPropertyToString("innerText", PWAConvivaPage.objDevice, "Device");
		logger.info("Device fetched from Conviva Tab : " + deviceAct);
		extent.extentLogger("", "Device fetched from Conviva Tab : " + deviceAct);
		if (deviceAct.equals("Web")) {
			logger.info("Verified correct Device");
			extent.extentLogger("", "Verified correct Device");
		} else {
			logger.error("Verified incorrect Device");
			extent.extentLoggerFail("", "Verified incorrect Device");
		}
		String appVersionAct = getElementPropertyToString("innerText", PWAConvivaPage.objAppVersion,
				"ZEE5 App Version");
		logger.info("ZEE5 App Version fetched from Conviva Tab : " + appVersionAct);
		extent.extentLogger("", "ZEE5 App Version fetched from Conviva Tab : " + appVersionAct);
		if (appVersionAct.equals(version.split(" ")[1])) {
			logger.info("Verified correct ZEE5 App Version");
			extent.extentLogger("", "Verified correct ZEE5 App Version");
		} else {
			logger.error("Verified incorrect ZEE5 App Version");
			extent.extentLoggerFail("", "Verified incorrect ZEE5 App Version");
		}
		String langAct = getElementPropertyToString("innerText", PWAConvivaPage.objAudioLanguage, "Original Language");
		logger.info("Audio Language fetched from Conviva Tab : " + langAct);
		extent.extentLogger("", "Audio Language fetched from Conviva Tab : " + langAct);
		if (langAct.equals("en")) {
			logger.info("Verified correct Audio Language");
			extent.extentLogger("", "Verified correct Audio Language");
		} else {
			logger.error("Verified incorrect Audio Language");
			extent.extentLoggerFail("", "Verified incorrect Audio Language");
		}
		String categoryAct = getElementPropertyToString("innerText", PWAConvivaPage.objCategory, "Category");
		logger.info("Category fetched from Conviva Tab : " + categoryAct);
		extent.extentLogger("", "Category fetched from Conviva Tab : " + categoryAct);
		if (categoryAct.equals(assetTypeAPI)) {
			logger.info("Verified correct Category");
			extent.extentLogger("", "Verified correct Category");
		} else {
			logger.error("Verified incorrect Category");
			extent.extentLoggerFail("", "Verified incorrect Category");
		}
		String contentIDAct = getElementPropertyToString("innerText", PWAConvivaPage.objContentIDC, "Content ID");
		logger.info("Content ID fetched from Conviva Tab : " + contentIDAct);
		extent.extentLogger("", "Content ID fetched from Conviva Tab : " + contentIDAct);
		if (contentIDAct.equals(contentIdAPI)) {
			logger.info("Verified correct Content ID");
			extent.extentLogger("", "Verified correct Content ID");
		} else {
			logger.error("Verified incorrect Content ID");
			extent.extentLoggerFail("", "Verified incorrect Content ID");
		}
		String episodeNameAct = getElementPropertyToString("innerText", PWAConvivaPage.objEpisodeName, "Episode Name");
		logger.info("Episode Name fetched from Conviva Tab : " + episodeNameAct);
		extent.extentLogger("", "Episode Name fetched from Conviva Tab : " + episodeNameAct);
		if (episodeNameAct.equals(contentTitleAPI)) {
			logger.info("Verified correct Episode Name");
			extent.extentLogger("", "Verified correct Episode Name");
		} else {
			logger.error("Verified incorrect Episode Name");
			extent.extentLoggerFail("", "Verified incorrect Episode Name");
		}
		String episodeNumberAct = getElementPropertyToString("innerText", PWAConvivaPage.objEpisodeNumber,
				"Episode Number");
		logger.info("Episode Number fetched from Conviva Tab : " + episodeNumberAct);
		extent.extentLogger("", "Episode Number fetched from Conviva Tab : " + episodeNumberAct);
		if (episodeNumberAct.equals(episodeNumberAPI)) {
			logger.info("Verified correct Episode Number");
			extent.extentLogger("", "Verified correct Episode Number");
		} else {
			logger.error("Verified incorrect Episode Number");
			extent.extentLoggerFail("", "Verified incorrect Episode Number");
		}
		String genreAct = getElementPropertyToString("innerText", PWAConvivaPage.objGenreC, "Genre");
		logger.info("Genre fetched from Conviva Tab : " + genreAct);
		extent.extentLogger("", "Genre fetched from Conviva Tab : " + genreAct);
		if (genreAct.equals(genreAPI)) {
			logger.info("Verified correct Genre");
			extent.extentLogger("", "Verified correct Genre");
		} else {
			logger.error("Verified incorrect Genre");
			extent.extentLoggerFail("", "Verified incorrect Genre");
		}
		String originalLangAct = getElementPropertyToString("innerText", PWAConvivaPage.objOriginalLang,
				"Original Language");
		logger.info("Original Language fetched from Conviva Tab : " + originalLangAct);
		extent.extentLogger("", "Original Language fetched from Conviva Tab : " + originalLangAct);
		if (originalLangAct.equals(oriLangAPI)) {
			logger.info("Verified correct Original Language");
			extent.extentLogger("", "Verified correct Original Language");
		} else {
			logger.error("Verified incorrect Original Language");
			extent.extentLoggerFail("", "Verified incorrect Original Language");
		}
		String releaseDateAct = getElementPropertyToString("innerText", PWAConvivaPage.objPubDate, "Release Language");
		logger.info("Release Date fetched from Conviva Tab : " + releaseDateAct);
		extent.extentLogger("", "Release Date fetched from Conviva Tab : " + releaseDateAct);
		if (releaseDateAct.equals(releaseDateAPI)) {
			logger.info("Verified correct Release Date");
			extent.extentLogger("", "Verified correct Release Date");
		} else {
			logger.error("Verified incorrect Release Date");
			extent.extentLoggerFail("", "Verified incorrect Release Date");
		}
		scrollDownByY(150);
		String rootIDAct = getElementPropertyToString("innerText", PWAConvivaPage.objRootID, "Root ID");
		logger.info("Root ID fetched from Conviva Tab : " + rootIDAct);
		extent.extentLogger("", "Root ID fetched from Conviva Tab : " + rootIDAct);
		if (rootIDAct.equals(contentIdAPI)) {
			logger.info("Verified correct Root ID");
			extent.extentLogger("", "Verified correct Root ID");
		} else {
			logger.error("Verified incorrect Root ID");
			extent.extentLoggerFail("", "Verified incorrect Root ID");
		}
		String showAct = getElementPropertyToString("innerText", PWAConvivaPage.objShow, "Show");
		logger.info("Show fetched from Conviva Tab : " + showAct);
		extent.extentLogger("", "Show fetched from Conviva Tab : " + showAct);
		if (showAct.equals(tvShowAPI)) {
			logger.info("Verified correct Show");
			extent.extentLogger("", "Verified correct Show");
		} else {
			logger.error("Verified incorrect Show");
			extent.extentLoggerFail("", "Verified incorrect Show");
		}
		String siteAct = getElementPropertyToString("innerText", PWAConvivaPage.objSite, "Site");
		logger.info("Site fetched from Conviva Tab : " + siteAct);
		extent.extentLogger("", "Site fetched from Conviva Tab : " + siteAct);
		if (siteAct.equals(siteExp)) {
			logger.info("Verified correct Site");
			extent.extentLogger("", "Verified correct Site");
		} else {
			logger.error("Verified incorrect Site");
			extent.extentLoggerFail("", "Verified incorrect Site");
		}
		String userAgentAct = getElementPropertyToString("innerText", PWAConvivaPage.objUserAgent, "UserAgent");
		logger.info("UserAgent from Conviva Tab : " + userAgentAct);
		extent.extentLogger("", "UserAgent from Conviva Tab : " + userAgentAct);
		if (userAgentAct.equals(userAgentExp)) {
			logger.info("Verified correct UserAgent");
			extent.extentLogger("", "Verified correct UserAgent");
		} else {
			logger.error("Verified incorrect UserAgent");
			extent.extentLoggerFail("", "Verified incorrect UserAgent");
		}

	}

	public String dateConversionForConviva(String dateToConvert) throws Exception {
		// System.out.println("Date in String format sent: "+dateToConvert);
		Date date = new SimpleDateFormat("dd/MM/yyyy").parse(dateToConvert);
		// System.out.println("Date in Date format for Java: "+date);
		SimpleDateFormat formatter = new SimpleDateFormat("MMMM d, yyyy");
		String convertedDate = formatter.format(date);
		// System.out.println("Date in required String format : "+convertedDate);
		return convertedDate;
	}

	@SuppressWarnings("unused")
	public static String getValuesFromLocalStorage(String key) {
		WebStorage webStorage = (WebStorage) new Augmenter().augment(getWebDriver());
		LocalStorage localStorage = webStorage.getLocalStorage();
		SessionStorage sessionStorage = webStorage.getSessionStorage();
		return localStorage.getItem(key);
	}

	public void loginToConviva(String userid, String password) throws Exception {
		type(PWAConvivaPage.objUserNameField, userid, "Email Field");
		click(PWAConvivaPage.objNextButton, "Next button");
		type(PWAConvivaPage.objPasswordField, password, "Email Field");
		click(PWAConvivaPage.objSignInButton, "Sign In button");
	}

	public String getYourPublicIP() throws Exception {
		click(PWAConvivaPage.objSearchEditField, "Google Search field");
		type(PWAConvivaPage.objSearchEditField, "Whats my ip", "Search Edit Field");
		click(PWAConvivaPage.objWhatsMyIPSuggestion, "Google Suggestion");
		String myIP = getElementPropertyToString("innerText", PWAConvivaPage.objPublicIP, "Public IP");
		extent.extentLogger("", "Public IP fetched: " + myIP);
		logger.info("Public IP fetched: " + myIP);
		return myIP;
	}

	public void addIPToDeviceValidation(String ip) throws Exception {
		getWebDriver().get("https://pulse.conviva.com/device_validation/manage");
		waitTime(3000);
		scrollDownByY(300);
		click(PWAConvivaPage.objManageIPSortButton("For_Automation"), "Sort button");
		click(PWAConvivaPage.objEditIP("For_Automation"), "Edit button");
		clearField(PWAConvivaPage.objIPAddressField, "IP Address");
		waitTime(3000);
		type(PWAConvivaPage.objIPAddressField, ip, "IP Address");
		click(PWAConvivaPage.objUpdateButton, "Update button");
	}

	public void applyAutomationFilter() throws Exception {
		getWebDriver().get("https://pulse.conviva.com/reports/54/filters");
		waitTime(5000);
		// click(PWAConvivaPage.objFiltersButton,"Filters button");
		List<WebElement> filters = getWebDriver().findElements(PWAConvivaPage.objDeleteFilters);
		for (int i = 0; i < filters.size(); i++) {
			filters.get(i).click();
		}
		type(PWAConvivaPage.objFiltersEditField, "For_Automation", "Filters edit field");
		click(PWAConvivaPage.objForAutomationFilterSuggestion, "For_Automation filter suggestion");
		click(PWAConvivaPage.objApplyFilter, "Apply button");

	}

	@SuppressWarnings("unused")
	public void PWAVerifyTitleInAnchorTags(String userType) throws Exception {
		extent.HeaderChildNode("Task PWA2-6003 : SEO - Anchor Text and Link for Top Navigation, Mega Menu & Footer");
		logger.info("Task PWA2-6003 : SEO - Anchor Text and Link for Top Navigation, Mega Menu & Footer");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		Actions act = new Actions(getWebDriver());

		{
			// Home Mega Menu Bar
			extent.extentLogger("", "---------- Home Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Home");
			String anchorTitleForHomeExp = "Watch TV Shows, Originals, Movies & Live News Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForHomeExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForHomeExp);
			String anchorTitleForHome = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Home"),
					"Home anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForHome);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForHome);
			if (anchorTitleForHome.equals(anchorTitleForHomeExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}

		{
			// Movies Mega Menu Bar
			extent.extentLogger("", "---------- Movies Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Movies");
			String anchorTitleForMoviesExp = "Watch Movies Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForMoviesExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForMoviesExp);
			String anchorTitleForMovies = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Movies"),
					"Movies anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForMovies);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForMovies);
			if (anchorTitleForMovies.equals(anchorTitleForMoviesExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}

		{
			// TV Shows Mega Menu Bar
			extent.extentLogger("", "---------- TV Shows Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("TV Shows");
			String anchorTitleForShowsExp = "Watch TV Serials & Shows Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForShowsExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForShowsExp);
			String anchorTitleForShows = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Shows"),
					"Shows anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForShows);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForShows);
			if (anchorTitleForShows.equals(anchorTitleForShowsExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}

		{
			// Play Mega Menu Bar
			extent.extentLogger("", "---------- Play Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Play");
			String anchorTitleForPlayExp = "Play Game Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForPlayExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForPlayExp);
			String anchorTitleForPlay = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Play"),
					"Play anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForPlay);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForPlay);
			if (anchorTitleForPlay.equals(anchorTitleForPlayExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}

		{
			// Music Mega Menu Bar
			extent.extentLogger("", "---------- Music Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Music");
			String anchorTitleForMusicExp = "Watch Music Videos Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForMusicExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForMusicExp);
			String anchorTitleForMusic = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Music"),
					"Music anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForMusic);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForMusic);
			if (anchorTitleForMusic.equals(anchorTitleForMusicExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}

		{
			// Stories Mega Menu Bar
			extent.extentLogger("", "---------- Stories Mega Menu Bar verification -----------");
			String anchorTitleForStoriesExp = "Stories";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForStoriesExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForStoriesExp);
			String anchorTitleForStories = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Stories"),
					"Stories anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForStories);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForStories);
			if (anchorTitleForStories.equals(anchorTitleForStoriesExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
			navigateToHome();
		}

		{
			// Web Series Mega Menu Bar
			extent.extentLogger("", "---------- Web Series Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Web Series");
			String anchorTitleForZEE5OriginalsExp = "Watch ZEE5 Original Web Series & Movies";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForZEE5OriginalsExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForZEE5OriginalsExp);
			String anchorTitleForZEE5Originals = getElementPropertyToString("title",
					PWAHomePage.objHomeBarText("ZEE5 Originals"), "ZEE5 Originals anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForZEE5Originals);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForZEE5Originals);
			if (anchorTitleForZEE5Originals.equals(anchorTitleForZEE5OriginalsExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}

		{
			// Rent Mega Menu Bar
			extent.extentLogger("", "---------- Rent Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Rent");
			String anchorTitleForZeeplexExp = "Rent & Watch Movies on ZEEPLEX";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForZeeplexExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForZeeplexExp);
			String anchorTitleForZeeplex = getElementPropertyToString("title", PWAHomePage.objHomeBarText("ZEEPLEX"),
					"ZEE5 Originals anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForZeeplex);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForZeeplex);
			if (anchorTitleForZeeplex.equals(anchorTitleForZeeplexExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}

		{
			// News Mega Menu Bar
			extent.extentLogger("", "---------- News Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("News");
			String anchorTitleForNewsExp = "Watch Latest News & Updates";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForNewsExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForNewsExp);
			String anchorTitleForNews = getElementPropertyToString("title", PWAHomePage.objHomeBarText("News"),
					"News anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForNews);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForNews);
			if (anchorTitleForNews.equals(anchorTitleForNewsExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
			navigateToHome();
		}

		{
			// Premium Mega Menu Bar
			extent.extentLogger("", "---------- Premium Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Premium");
			String anchorTitleForPremiumExp = "ZEE5 Premium Package Subscription";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForPremiumExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForPremiumExp);
			String anchorTitleForPremium = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Premium"),
					"Premium anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForPremium);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForPremium);
			if (anchorTitleForPremium.equals(anchorTitleForPremiumExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}

		{
			// Kids Mega Menu Bar
			extent.extentLogger("", "---------- Kids Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Kids");
			String anchorTitleForKidsExp = "Watch Kids Shows, Cartoons. Movies & Videos Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForKidsExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForKidsExp);
			String anchorTitleForKids = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Kids"),
					"Kids anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForKids);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForKids);
			if (anchorTitleForKids.equals(anchorTitleForKidsExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}

		{
			// Live TV Mega Menu Bar
			extent.extentLogger("", "---------- Live TV Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Live TV");
			String anchorTitleForLiveTVExp = "Watch Live TV Channels Online";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForLiveTVExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForLiveTVExp);
			String anchorTitleForLiveTV = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Live TV"),
					"Live TV anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForLiveTV);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForLiveTV);
			if (anchorTitleForLiveTV.equals(anchorTitleForLiveTVExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}

		{
			// Videos Mega Menu Bar
			extent.extentLogger("", "---------- Videos Mega Menu Bar verification -----------");
			navigateToAnyScreenOnWeb("Videos");
			String anchorTitleForVideosExp = "Watch Official Films Videos";
			logger.info("Expected Anchor tag title attribute value: " + anchorTitleForVideosExp);
			extent.extentLogger("", "Expected Anchor tag title attribute value: " + anchorTitleForVideosExp);
			String anchorTitleForVideos = getElementPropertyToString("title", PWAHomePage.objHomeBarText("Videos"),
					"Videos anchor title");
			logger.info("Anchor tag title attribute value in UI: " + anchorTitleForVideos);
			extent.extentLogger("", "Anchor tag title attribute value in UI: " + anchorTitleForVideos);
			if (anchorTitleForVideos.equals(anchorTitleForVideosExp)) {
				logger.info("Anchor tag title attribute value matched with expected value");
				extent.extentLogger("", "Anchor tag title attribute value matched with expected value");
			} else {
				logger.error("Anchor tag title attribute value did not match with expected value");
				extent.extentLoggerFail("", "Anchor tag title attribute value did not match with expected value");
			}
		}
	}

	public void PWAVerifyImageWebP(String userType) throws Exception {
		extent.HeaderChildNode("Task PWA2-6030 : Serve WebP image instead of JPEG");
		logger.info("Task PWA2-6030 : Serve WebP image instead of JPEG");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		waitTime(4000);
		String imageSource = getElementPropertyToString("src", PWAHomePage.objMastheadCarouselCurrentContentWeb,
				"Carousel Card");
		if (imageSource.contains("f_webp")) {
			logger.info("Tag img src attribute value contains f_webp as expected");
			extent.extentLoggerPass("", "Tag img src attribute value contains f_webp as expected");
		} else {
			logger.info("Tag img src attribute value does not contain f_webp");
			extent.extentLoggerFail("", "Tag img src attribute value does not contain f_webp");
		}
		if (imageSource.contains("f_auto")) {
			logger.info("Tag img src attribute value should not contain f_auto");
			extent.extentLoggerFail("", "Tag img src attribute value should not contain f_auto");
		} else {
			logger.info("Tag img src attribute value does not contain f_auto as expected");
			extent.extentLoggerPass("", "Tag img src attribute value does not contain f_auto as expected");
		}
	}

	public void PWAVerifyMetaTags(String userType) throws Exception {
		extent.HeaderChildNode(
				"Task PWA2-6005 : SEO - Meta Tags for Static Pages, Originals, Kids, Videos, Music Videos & Live TV");
		logger.info(
				"Task PWA2-6005 : SEO - Meta Tags for Static Pages, Originals, Kids, Videos, Music Videos & Live TV");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		extent.extentLogger("", "-------------- Meta Tags for Home Tab --------------");
		String homeTitleExpected = "ZEE5 - Watch TV Shows, 100+ Originals, Movies, News & Live TV Online";
		String homeDescExpected = "Watch premieres of your favourite TV show episodes a day before telecast on ZEE5 & explore blockbuster movies, 100+ original content, music videos, live TV channels, news in HD quality & language of your choice.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Home", homeTitleExpected, homeDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for ZEEPLEX Tab --------------");
		String zeeplexTitleExpected = "ZEEPLEX - Rent & Watch Latest Releases in Movies on ZEE5";
		String zeeplexDescExpected = "Rent a movie online on ZEEPLEX for as low as ₹99 and watch your choice of movie from new blockbuster releases to premier movies. Find the latest and popular movies on ZEE5 today.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "ZEEPLEX", zeeplexTitleExpected, zeeplexDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Club Tab --------------");
		String clubTitleExpected = "ZEE5 Club Pack: Subscribe and Watch Premier Episodes before TV Telecast, Selected ZEE5 Original and Movies on ZEE5";
		String clubDescExpected = "Join the ZEE5 Club to watch premieres of TV show episodes a day before telecast. Enjoy ZEE5-Alt Balaji Original Web Series, your favourite Zindagi Shows, Live TV, Kids Entertainment, Movies, Latest News & much more. Watch on 2 devices at a time.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Club", clubTitleExpected, clubDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Search Screen --------------");
		String searchTitleExpected = "Search for Shows, Movies, Originals, Live TV Channels & More on ZEE5";
		String searchDescExpected = "Search for your favourite ZEE5 shows, movies, originals, live TV channels, music videos, news and much more. Browse through the abundant options that you can watch and select what suits your mood.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Search", searchTitleExpected, searchDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Login Screen --------------");
		String loginTitleExpected = "Login to ZEE5 & watch the Best Shows, Movies, News and More";
		String loginDescExpected = "Login to ZEE5 and enjoy the Latest and the best of TV Shows, Movies, Originals, News, Live TV Channels and much more.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Login", loginTitleExpected, loginDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Sign Up Screen --------------");
		String signUpTitleExpected = "Register with ZEE5 - Enjoy Uninterrupted Video Experience and Help us serve you better";
		String signUpDescExpected = "Register with ZEE5 and enjoy the best of Bollywood & Hollywood movies, TV Shows, News and much more in Hindi, Marathi, English and other Regional Languages.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "SignUp", signUpTitleExpected, signUpDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Subscribe Screen --------------");
		String subscribeTitleExpected = "Subscribe to ZEE5 - Avail the Best offers with ZEE5 Premium & Club Subscription Plans";
		String subscribeDescExpected = "Get ZEE5 premium membership to watch latest episodes Premier before TV, All ZEE5 Originals, Movies, Live TV Channels & latest News online. Avail the best offers with ZEE5 monthly & yearly subscription plans; Watch all shows on 5 devices at a time";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Subscribe", subscribeTitleExpected,
				subscribeDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for ZEE5 Originals Screen --------------");
		String zee5OriginalsTitleExpected = "ZEE5 Originals - Watch ZEE5 Originals Web Series and Movies Online in HD";
		String zee5OriginalsDescExpected = "Explore ZEE5 Originals shows, movies and short films in HD quality. Explore new Web Series and Movies in Hindi, Marathi, English and other regional languages.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "ZEE5 Originals", zee5OriginalsTitleExpected,
				zee5OriginalsDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Web Series Page --------------");
		String webSeries = "Poison";
		String home = getParameterFromXML("url");
		String url = home + "zee5originals/details/poison/0-6-1558";
		String webSeriesPageTitleExpected = webSeries + " Web Series - Watch ZEE5 Originals Show " + webSeries
				+ " Online in HD on ZEE5";
		String webSeriesPageDescExpected = webSeries + " - ZEE5 Originals Web Series. 👀 Watch " + webSeries
				+ " full Web Series online in HD quality on ZEE5. Explore the star cast and watch all episodes of all seasons only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, webSeriesPageTitleExpected,
				webSeriesPageDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Web Series Season Page --------------");
		webSeries = "Poison";
		String season = "1";
		url = home + "zee5originals/details/poison/0-6-1558/episodes";
		String webSeriesSeasonPageTitleExpected = webSeries + " Season " + season
				+ " - Watch All Episodes of ZEE5 Originals Show " + webSeries + " " + season + " in HD on ZEE5";
		String webSeriesSeasonPageDescExpected = webSeries + " Season " + season
				+ " Episodes - Watch all episodes of the ZEE5 Originals Web Series " + webSeries + " " + season
				+ ", online. Explore trailers, teasers & download all episodes in HD only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, webSeriesSeasonPageTitleExpected,
				webSeriesSeasonPageDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Specific Episode Page --------------");
		mandatoryRegistrationPopUp(userType);
		webSeries = "Poison";
		season = "1";
		String episode = "1";
		String episodeTitle = "The Hunter's Scent";
		url = home + "zee5originals/details/poison/0-6-1558/episode-1-the-hunters-scent/0-1-202652";
		String episodeTitleExpected = "Watch " + webSeries + " Season " + season + " Episode " + episode + " - "
				+ episodeTitle + " online in HD on ZEE5";
		String episodeDescExpected = "Watch " + webSeries + " ZEE5 Originals Web Series, Season " + season + " Episode "
				+ episode + ", " + episodeTitle + ". Explore all the episodes of Poison in HD quality on ZEE5. ";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, episodeTitleExpected, episodeDescExpected);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "-------------- Meta Tags for Web Series Season Page --------------");
		webSeries = "Poison";
		season = "2";
		url = home + "zee5originals/details/poison/0-6-1558/season-2/episodes";
		webSeriesSeasonPageTitleExpected = webSeries + " Season " + season
				+ " - Watch All Episodes of ZEE5 Originals Show " + webSeries + " " + season + " in HD on ZEE5";
		webSeriesSeasonPageDescExpected = webSeries + " Season " + season
				+ " Episodes - Watch all episodes of the ZEE5 Originals Web Series " + webSeries + " " + season
				+ ", online. Explore trailers, teasers & download all episodes in HD only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, webSeriesSeasonPageTitleExpected,
				webSeriesSeasonPageDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Specific Episode Page --------------");
		mandatoryRegistrationPopUp(userType);
		webSeries = "Poison";
		season = "2";
		episode = "1";
		episodeTitle = "Dark Horse";
		url = home + "zee5originals/details/poison/0-6-1558/episode-1-the-hunters-scent/0-1-202652";
		episodeTitleExpected = "Watch " + webSeries + " Season " + season + " Episode " + episode + " - " + episodeTitle
				+ " online in HD on ZEE5";
		episodeDescExpected = "Watch " + webSeries + " ZEE5 Originals Web Series, Season " + season + " Episode "
				+ episode + ", " + episodeTitle + ". Explore all the episodes of Poison in HD quality on ZEE5. ";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, episodeTitleExpected, episodeDescExpected);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "-------------- Meta Tags for Trailer Page --------------");
		mandatoryRegistrationPopUp(userType);
		webSeries = "Poison";
		season = "2";
		url = home + "zee5originals/details/poison/0-6-1558/poison-2-trailer/0-1-416653";
		String trailerTitleExpected = webSeries + " " + season + " Trailer - Watch " + webSeries + " " + season
				+ " Official Trailer in HD on ZEE5";
		String trailerDescExpected = webSeries + " " + season + " Official Trailer - Watch " + webSeries + " " + season
				+ " ZEE5 Originals Web Series trailer online in HD quality. Explore trailers, teasers & download all episodes in HD only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, trailerTitleExpected, trailerDescExpected);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "-------------- Meta Tags for Kids Tab --------------");
		String kidsTitleExpected = "Watch Kids Shows and Animated Movies Online in HD on ZEE5";
		String kidsDescExpected = "Watch Kids TV shows and movies online in HD. Find all popular kids shows, series and animated movies on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Kids", kidsTitleExpected, kidsDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Specific Kids Show Page Page --------------");
		webSeries = "Sa Re Ga Ma Pa Li'l Champs 2019";
		url = home + "kids/kids-shows/sa-re-ga-ma-pa-lil-champs-2019/0-6-1317";
		webSeriesSeasonPageTitleExpected = "Watch " + webSeries + " Kids Show Online on ZEE5";
		webSeriesSeasonPageDescExpected = "Watch " + webSeries
				+ " Show online in HD. Also explore kid’s latest movies, videos & show’s episodes on ZEE5..";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, webSeriesSeasonPageTitleExpected,
				webSeriesSeasonPageDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Videos Tab --------------");
		String videosTitleExpected = "Watch Film Videos, Promo Videos, Trailers and Music Videos Free Online on ZEE5";
		String videosDescExpected = "Enjoy watching movie videos, promo videos, music videos, Bollywood songs and celebrity gossips in 12 different languages online for free on ZEE5";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Videos", videosTitleExpected, videosDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Live TV Tab --------------");
		String liveTVTitleExpected = "Live Streaming TV Shows, News, Movies, TV Channels Online in HD on ZEE5";
		String liveTVDescExpected = "Enjoy 90+ Live TV channels online only on ZEE5 in HD. With ZEE5, watch your favourite TV shows, news, movies & entertainment videos live in Hindi, English other regional languages.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, "Live TV", liveTVTitleExpected, liveTVDescExpected);
		extent.extentLogger("", "-------------- Meta Tags for Specific Channel Page --------------");
		mandatoryRegistrationPopUp(userType);
		String channel = "TV9 Marathi News";
		url = home + "channels/details/tv9-marathi/0-9-257";
		String channelTitleExpected = "Watch " + channel + " Channel Live Online in HD on ZEE5";
		String channelDescExpected = "Watch live streaming of " + channel
				+ " channel in HD quality. Also explore other live channel steaming like News, Entertainment, Music and more only on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, channelTitleExpected, channelDescExpected);
		extent.extentLogger("", "-------------- Meta Tags Channel Guide Page --------------");
		url = home + "tvguide";
		String channelGuideTitleExpected = "ZEE5 TV Guide Listings : View Schedule for all Live TV Channels on ZEE5";
		String channelGuideDescExpected = "View TV guide listings for all the Live TV Channels and explore the shows schedules on ZEE5. Know when to watch your favourite TV shows live online.";
		PWAVerifyMetaTagsThroughExternalPageSource(userType, url, channelGuideTitleExpected, channelGuideDescExpected);
		mandatoryRegistrationPopUp(userType);

	}

	public void PWAVerifyMetaTagsForTwitter(String userType) throws Exception {

		extent.HeaderChildNode("Task PWA2-5652 : SEO - Title, Description and OG for Twitter");
		logger.info("Task PWA2-5652 : SEO - Title, Description and OG for Twitter");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		extent.extentLogger("", "-------------- Meta Tags for Shows Tab --------------");
		String home = getParameterFromXML("url");
		getWebDriver().get(home + "tvshows");
		logger.info("Navigated to Shows page");
		extent.extentLogger("", "Navigated to Shows page");
		waitTime(4000);
		String showTitleExpected = "Watch Best TV Shows, Serials, Spoilers & Full Episodes Online | ZEE5";
		String showDescExpected = "Enjoy top TV Shows, TV Serials in Hindi, Marathi and other regional languages online in Full HD. Explore latest episodes of all your favourite shows aired on ZEE channels on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showTitleExpected, showDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for Shows Details Page --------------");
		getWebDriver().get(home + "tvshows/details/kundali-bhagya/0-6-366");
		logger.info("Navigated to Shows Details page");
		extent.extentLogger("", "Navigated to Shows Details page");
		waitTime(4000);
		String showDetailsTitleExpected = "Kundali Bhagya TV Serial, Watch Tomorrow's Full Episodes Online Before TV on ZEE5";
		String showDetailsDescExpected = "Enjoy tomorrow's Premiere Episodes before tv; latest & full episodes of Kundali Bhagya TV serial online, starring Sanjay Gagnani,Anjum Fakih,Shraddha Arya,Naveen Saini,Abhishek Kapur,Ruhi Chaturvedi,Anisha Hinduja,Dheeraj Dhoopar,Manit Joura,Supriya Shukla. Watch best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showDetailsTitleExpected,
				showDetailsDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for List Episodes Page --------------");
		getWebDriver().get(home + "tvshows/details/kundali-bhagya/0-6-366/episodes");
		logger.info("Navigated to List Episodes page");
		extent.extentLogger("", "Navigated to List Episodes page");
		waitTime(4000);
		String showListEpisodesTitleExpected = "Watch & Enjoy All the Episodes of Kundali Bhagya TV Serial Online on ZEE5";
		String showListEpisodesDescExpected = "Binge Watch Kundali Bhagya TV Serial Online. Now select & watch your favorite episodes from the complete list of Kundali Bhagya episodes, starring Sanjay Gagnani,Anjum Fakih,Shraddha Arya,Naveen Saini,Abhishek Kapur,Ruhi Chaturvedi,Anisha Hinduja,Dheeraj Dhoopar,Manit Joura,Supriya Shukla. Watch all the episodes in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showListEpisodesTitleExpected,
				showListEpisodesDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for Specific Episode Page --------------");
		getWebDriver().get(
				home + "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-october-27-2020/0-1-manual_1skn6kk1den8");
		logger.info("Navigated to Specific Episode page");
		extent.extentLogger("", "Navigated to Specific Episode page");
		waitTime(4000);
		String showSpecificEpisodeTitleExpected = "Watch Kundali Bhagya TV Serial 27th October 2020 Full Episode Online on ZEE5";
		String showSpecificEpisodeDescExpected = "Enjoy 27th October 2020's full episode of Kundali Bhagya TV serial online, starring Dheeraj Dhoopar, Anjum Fakih, Shraddha Arya. Watch Kareena threatens Sameer to stay away from Srishti full episode. View best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showSpecificEpisodeTitleExpected,
				showSpecificEpisodeDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for Specific Spoiler Page --------------");
		getWebDriver().get(home
				+ "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-october-28-2020-episode-spoiler/0-1-manual_a61qrpapbio0");
		logger.info("Navigated to Specific Spoiler page");
		extent.extentLogger("", "Navigated to Specific Spoiler page");
		waitTime(4000);
		String showSpecificSpoilerTitleExpected = "Watch Kundali Bhagya TV Serial Spoiler of 28th October 2020 Online on ZEE5";
		String showSpecificSpoilerDescExpected = "Enjoy 28th October 2020's spoiler of Kundali Bhagya TV serial online, starring Dheeraj Dhoopar, Anjum Fakih, Shraddha Arya. Watch best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showSpecificSpoilerTitleExpected,
				showSpecificSpoilerDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for Specific Webisode Page --------------");
		getWebDriver().get(home
				+ "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-october-27-2020-webisode/0-1-manual_37msvkdj6utg");
		logger.info("Navigated to Specific Webisode page");
		extent.extentLogger("", "Navigated to Specific Webisode page");
		waitTime(4000);
		String showWebisodeTitleExpected = "Watch Kundali Bhagya TV Serial Webisode of 27th October 2020 Online on ZEE5";
		String showWebisodeDescExpected = "Enjoy 27th October 2020's webisode of Kundali Bhagya TV serial online, starring Dheeraj Dhoopar, Anjum Fakih, Shraddha Arya. Watch best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showWebisodeTitleExpected,
				showWebisodeDescExpected);

		extent.extentLogger("", "-------------- Meta Tags for Week Short Page --------------");
		getWebDriver().get(home
				+ "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-week-in-short-19th-october-2020-to-24th-october-2020/0-1-manual_2goo4apg01ug");
		logger.info("Navigated to Week Short page");
		extent.extentLogger("", "Navigated to Week Short page");
		waitTime(4000);
		String showWeekShortTitleExpected = "Watch Kundali Bhagya TV Serial Full Week's Episodes in Short 19th October 2020 - 24th October 2020 Online on ZEE5";
		String showWeekShortDescExpected = "Enjoy 19th October 2020 - 24th October 2020's full week in short episode of Kundali Bhagya TV serial online, starring Dheeraj Dhoopar, Anjum Fakih, Shraddha Arya. Watch best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5.";
		PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(userType, showWeekShortTitleExpected,
				showWeekShortDescExpected);

	}

	public void PWABreadcrumbImplementation(String userType) throws Exception {
		extent.HeaderChildNode(
				"Task PWA2-5569 : Desktop - Showcase breadcrumb at front-end for user and search engine bot");
		logger.info("Task PWA2-5569 : Desktop - Showcase breadcrumb at front-end for user and search engine bot");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String home = getParameterFromXML("url");
		extent.extentLogger("", "-------------- Breadcrumb verification in My Profile screen--------------");
		if (!userType.equals("Guest")) {
			click(PWAHomePage.objOpenProfile, "Profile icon");
			click(PWAHomePage.objOpenProfileIcon, "My Profile");
			verifyElementPresent(PWAHomePage.objMyProfileBreadCrumb, "My Profile Breadcrumb");
			click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
			String currentUrl = getWebDriver().getCurrentUrl();
			logger.info("Current url after navigation: " + currentUrl);
			extent.extentLogger("", "Current url after navigation: " + currentUrl);
			if (home.equals(currentUrl)) {
				logger.info("Navigated to Home Page");
				extent.extentLogger("", "Navigated to Home Page");
				logger.info("Breadcrumb navigation is successful");
				extent.extentLogger("", "Breadcrumb navigation is successful");
			} else {
				logger.error("Failed to navigate to Home Page");
				extent.extentLoggerFail("", "Failed to navigate to Home Page");
				logger.error("Breadcrumb navigation unsuccessful");
				extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
			}

		}
		extent.extentLogger("", "-------------- Breadcrumb verification in View All screen--------------");
		Response tabResponse = ResponseInstance.getResponseForPages("home", "en,hi,kn");
		String trayTitle = tabResponse.jsonPath().get("buckets[1].title");
		swipeTillTray(5, trayTitle, "\"" + trayTitle + "\" tray");
		click(PWALandingPages.objViewAllOfTray(trayTitle), "View all button for tray " + trayTitle);
		verifyElementPresent(PWAHomePage.objViewAllBreadCrumb("Home", trayTitle), trayTitle + " Breadcrumb");
		click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
		String currentUrl = getWebDriver().getCurrentUrl();
		logger.info("Current url after navigation: " + currentUrl);
		extent.extentLogger("", "Current url after navigation: " + currentUrl);
		if (home.equals(currentUrl)) {
			logger.info("Navigated to Home Page");
			extent.extentLogger("", "Navigated to Home Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Home Page");
			extent.extentLoggerFail("", "Failed to navigate to Home Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}
		extent.extentLogger("", "-------------- Breadcrumb verification in Player --------------");
		String movie = "Robin Hood Forever Enemies";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, movie, "Search Field");
		click(PWASearchPage.objSearchMoviesTab, "Movies tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(movie), "Searched content");
		waitTime(5000);
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Why Register Popup") == true) {
				click(PWAPlayerPage.objCloseBtn, "Close Register Popup");
			}
		}
		verifyElementPresent(PWAHomePage.objMovieBreadCrumb(movie), movie + " Breadcrumb");
		click(PWAHomePage.objBreadCrumb(2), "Movies breadcrumb");
		currentUrl = getWebDriver().getCurrentUrl();
		if (currentUrl.equals(home + "movies")) {
			logger.info("Navigated to Movies Page");
			extent.extentLogger("", "Navigated to Movies Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Movies Page");
			extent.extentLoggerFail("", "Failed to navigate to Movies Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}
		click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
		currentUrl = getWebDriver().getCurrentUrl();
		logger.info("Current url after navigation: " + currentUrl);
		extent.extentLogger("", "Current url after navigation: " + currentUrl);
		if (home.equals(currentUrl)) {
			logger.info("Navigated to Home Page");
			extent.extentLogger("", "Navigated to Home Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Home Page");
			extent.extentLoggerFail("", "Failed to navigate to Home Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}
		extent.extentLogger("", "-------------- Breadcrumb verification in Live TV --------------");
		navigateToAnyScreenOnWeb("Live TV");
		verifyElementPresent(PWAHomePage.objLivePlayerBreadCrumb, "Live TV Breadcrumb");
		click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
		currentUrl = getWebDriver().getCurrentUrl();
		logger.info("Current url after navigation: " + currentUrl);
		extent.extentLogger("", "Current url after navigation: " + currentUrl);
		if (home.equals(currentUrl)) {
			logger.info("Navigated to Home Page");
			extent.extentLogger("", "Navigated to Home Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Home Page");
			extent.extentLoggerFail("", "Failed to navigate to Home Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}

		extent.extentLogger("", "-------------- Breadcrumb verification in Show Details --------------");
		String show = "Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, show, "Search Field");
		click(PWASearchPage.objSearchShowsTab, "Shows tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(show), "Searched content");
		verifyElementPresent(PWAHomePage.objShowDetailsBreadCrumb(show), show + " Breadcrumb");
		click(PWAHomePage.objBreadCrumb(2), "Shows breadcrumb");
		currentUrl = getWebDriver().getCurrentUrl();
		if (currentUrl.equals(home + "tvshows")) {
			logger.info("Navigated to Shows Page");
			extent.extentLogger("", "Navigated to Shows Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Shows Page");
			extent.extentLoggerFail("", "Failed to navigate to Shows Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}
		click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
		currentUrl = getWebDriver().getCurrentUrl();
		logger.info("Current url after navigation: " + currentUrl);
		extent.extentLogger("", "Current url after navigation: " + currentUrl);
		if (home.equals(currentUrl)) {
			logger.info("Navigated to Home Page");
			extent.extentLogger("", "Navigated to Home Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Home Page");
			extent.extentLoggerFail("", "Failed to navigate to Home Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}
		extent.extentLogger("", "-------------- Breadcrumb verification in Channels --------------");
		navigateToAnyScreenOnWeb("Live TV");
		String channel = getElementPropertyToString("innerText",
				PWALandingPages.objFirstAssetInTrayIndex("FREE Channels"), "Channel Title");
		System.out.println(channel);
		click(PWALandingPages.objFirstAssetInTrayIndex("FREE Channels"), "First card under Free Channels");
		verifyElementPresent(PWAHomePage.objChannelsBreadCrumb(channel), channel + " Breadcrumb");
		click(PWAHomePage.objBreadCrumb(2), "Channel breadcrumb");
		currentUrl = getWebDriver().getCurrentUrl();
		if (currentUrl.equals(home + "channels")) {
			logger.info("Navigated to Channels Page");
			extent.extentLogger("", "Navigated to Channels Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Channels Page");
			extent.extentLoggerFail("", "Failed to navigate to Channels Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}
		click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
		currentUrl = getWebDriver().getCurrentUrl();
		logger.info("Current url after navigation: " + currentUrl);
		extent.extentLogger("", "Current url after navigation: " + currentUrl);
		if (home.equals(currentUrl)) {
			logger.info("Navigated to Home Page");
			extent.extentLogger("", "Navigated to Home Page");
			logger.info("Breadcrumb navigation is successful");
			extent.extentLogger("", "Breadcrumb navigation is successful");
		} else {
			logger.error("Failed to navigate to Home Page");
			extent.extentLoggerFail("", "Failed to navigate to Home Page");
			logger.error("Breadcrumb navigation unsuccessful");
			extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
		}
		extent.extentLogger("", "-------------- Breadcrumb verification in My Subscriptions --------------");
		if (userType.equals("SubscribedUser") || userType.equals("ClubUser")) {
			click(PWAHomePage.objOpenProfile, "Profile icon");
			click(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
			verifyElementPresent(PWAHomePage.objMySubscriptionsBreadCrumb, "My Subscriptions Breadcrumb");
			click(PWAHomePage.objBreadCrumb(2), "My Profile breadcrumb");
			verifyElementPresent(PWAHomePage.objMyProfileBreadCrumb, "My Profile page");
			click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
			currentUrl = getWebDriver().getCurrentUrl();
			logger.info("Current url after navigation: " + currentUrl);
			extent.extentLogger("", "Current url after navigation: " + currentUrl);
			if (home.equals(currentUrl)) {
				logger.info("Navigated to Home Page");
				extent.extentLogger("", "Navigated to Home Page");
				logger.info("Breadcrumb navigation is successful");
				extent.extentLogger("", "Breadcrumb navigation is successful");
			} else {
				logger.error("Failed to navigate to Home Page");
				extent.extentLoggerFail("", "Failed to navigate to Home Page");
				logger.error("Breadcrumb navigation unsuccessful");
				extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
			}
			click(PWAHomePage.objBreadCrumb(1), "Home breadcrumb");
			currentUrl = getWebDriver().getCurrentUrl();
			logger.info("Current url after navigation: " + currentUrl);
			extent.extentLogger("", "Current url after navigation: " + currentUrl);
			if (home.equals(currentUrl)) {
				logger.info("Navigated to Home Page");
				extent.extentLogger("", "Navigated to Home Page");
				logger.info("Breadcrumb navigation is successful");
				extent.extentLogger("", "Breadcrumb navigation is successful");
			} else {
				logger.error("Failed to navigate to Home Page");
				extent.extentLoggerFail("", "Failed to navigate to Home Page");
				logger.error("Breadcrumb navigation unsuccessful");
				extent.extentLoggerFail("", "Breadcrumb navigation unsuccessful");
			}
		}
	}

	public void PWASubtitleSelection(String userType) throws Exception {
		extent.HeaderChildNode(
				"Task PWA2-4178 : If subtitle language is selected; the same should be enables by default for next contents.");
		logger.info(
				"Task PWA2-4178 : If subtitle language is selected; the same should be enables by default for next contents.");
		String content = "Kundali Bhagya";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		click(PWASearchPage.objSearchShowsTab, "Shows tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(content), "Searched content");
		waitTime(4000);
		partialScroll();
		checkElementDisplayed(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Second Episode set");
		waitTime(5000);
		click(PWAShowsPage.objEpisodeCard, "First Episode Card");
		if (!(userType.equals("SubscribedUser") || userType.equals("ClubUser"))) {
			waitForPlayerAdToComplete("Video Player");
		}
		click(PWAPlayerPage.objSubTitleOverlay, "Playback Overlay");
		click(PWAHomePage.objSubtitleButton, "Subtitle button");
		click(PWAHomePage.objSubtitleEnglish, "Subtitle English");
		/////////////////////////////////////////////////////
		WebElement progressBar = findElement(PWAPlayerPage.progressBar);
		int progressBarWidth = progressBar.getSize().getWidth();
		System.out.println(progressBarWidth);
		int progressBarX = progressBar.getLocation().getX();
		System.out.println(progressBarX);
		int progressBarEndX = progressBarX + progressBarWidth;
		System.out.println(progressBarEndX);
		WebElement scrubber = findElement(PWAPlayerPage.objPlayerScrubber);
		int scrubberX = scrubber.getLocation().getX();
		System.out.println(scrubberX);
		int offset = progressBarEndX - scrubberX - 10;
		/////////////////////////////////////
		Actions act = new Actions(getWebDriver());
		act.moveToElement(scrubber, offset, 0).click().build().perform();
		waitTime(2000);
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "Scrubbed to end of the player");
		logger.info("Scrubbed to end of the player");
		waitTime(10000);
		if (!(userType.equals("SubscribedUser") || userType.equals("ClubUser"))) {
			extent.extentLogger("", "Postroll Ad play check");
			logger.info("Postroll Ad play check");
			waitForPlayerAdToComplete("Video Player");
			extent.extentLogger("", "Preroll Ad play check");
			logger.info("Preroll Ad play check");
			waitForPlayerAdToComplete("Video Player");
		}
		click(PWAPlayerPage.objSubTitleOverlay, "Playback Overlay");
		click(PWAHomePage.objSubtitleButton, "Subtitle button");
		verifyElementPresent(PWAHomePage.objSubtitleEnglishSelected, "Subtitle English tickmarked");
	}

	public void PWAVerifyMetaTagsThroughScriptPageSource(String userType, String tab, String expectedTitle,
			String expectedDesc) throws Exception {
		navigateToHome();
		navigateToAnyScreenOnWeb(tab);
		logger.info("Expected title : " + expectedTitle);
		extent.extentLogger("", "Expected title : " + expectedTitle);
		logger.info("Expected description : " + expectedDesc);
		extent.extentLogger("", "Expected description : " + expectedDesc);
		String pageSource = getWebDriver().getPageSource();
		System.out.println(pageSource);
		String title = pageSource.split("title")[1].split(">")[1].split("<")[0].replace("&amp;", "&");
		logger.info("Actual <title> value : " + title);
		extent.extentLogger("", "Actual <title> value : " + title);
		String ogtitle = pageSource.split("og:title\" content=\"")[1].split("\"><")[0].replace("&amp;", "&");
		logger.info("Actual og:title content value : " + ogtitle);
		extent.extentLogger("", "Actual og:title content value : " + ogtitle);
		String ogdescription = pageSource.split("og:description\" content=\"")[1].split("\"><")[0].replace("&amp;",
				"&");
		logger.info("Actual og:description content value : " + ogdescription);
		extent.extentLogger("", "Actual og:description content value : " + ogdescription);
		if (title.equals(expectedTitle)) {
			logger.info("<title> value is as expected");
			extent.extentLogger("", "<title> value is as expected");
		} else {
			logger.error("<title> value is not as expected");
			extent.extentLoggerFail("", "<title> value is not as expected");
		}
		if (ogtitle.equals(expectedTitle)) {
			logger.info("og:title content value is as expected");
			extent.extentLogger("", "og:title content value is as expected");
		} else {
			logger.error("og:title content value is not as expected");
			extent.extentLoggerFail("", "og:title content value is not as expected");
		}
		if (ogdescription.equals(expectedDesc)) {
			logger.info("og:description content value is as expected");
			extent.extentLogger("", "og:description content value is as expected");
		} else {
			logger.error("og:description content value is not as expected");
			extent.extentLoggerFail("", "og:description content value is not as expected");
		}

	}

	public void PWAVerifyMetaTagsThroughExternalPageSource(String userType, String navigationPoint,
			String expectedTitle, String expectedDesc) throws Exception {
		navigateToHome();
		if (navigationPoint.equalsIgnoreCase("Search"))
			click(PWAHomePage.objSearchBtn, "Search icon");
		else if (navigationPoint.equalsIgnoreCase("Login"))
			click(PWALoginPage.objWebLoginBtn, "Login button");
		else if (navigationPoint.equalsIgnoreCase("SignUp"))
			click(PWALoginPage.objSignUpBtnWEB, "Sign up for FREE button");
		else if (navigationPoint.equalsIgnoreCase("Subscribe"))
			click(PWAHomePage.objSubscribeBtn, "Subscribe button");
		else if (navigationPoint.contains(".com"))
			getWebDriver().get(navigationPoint);
		else
			navigateToAnyScreenOnWeb(navigationPoint);
		logger.info("Expected title : " + expectedTitle);
		extent.extentLogger("", "Expected title : " + expectedTitle);
		logger.info("Expected description : " + expectedDesc);
		extent.extentLogger("", "Expected description : " + expectedDesc);
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		waitTime(3000);
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objOgTitle, "Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		logger.info("Actual og:title content value : " + ogtitle);
		extent.extentLogger("", "Actual og:title content value : " + ogtitle);
		String ogdescription = getElementPropertyToString("innerText", PWAHomePage.objOgDesc, "Title");
		ogdescription = ogdescription.replace("&amp;", "&").replace("&#x27;", "'");
		logger.info("Actual og:description content value : " + ogdescription);
		extent.extentLogger("", "Actual og:description content value : " + ogdescription);
		if (ogtitle.equals(expectedTitle)) {
			logger.info("og:title content value is as expected");
			extent.extentLogger("", "og:title content value is as expected");
		} else {
			logger.error("og:title content value is not as expected");
			extent.extentLoggerFail("", "og:title content value is not as expected");
		}
		if (ogdescription.equals(expectedDesc)) {
			logger.info("og:description content value is as expected");
			extent.extentLogger("", "og:description content value is as expected");
		} else {
			logger.error("og:description content value is not as expected");
			extent.extentLoggerFail("", "og:description content value is not as expected");
		}

	}

	public void PWAVerifyMetaTagsThroughExternalPageSourceForTwitter(String userType, String expectedTitle,
			String expectedDesc) throws Exception {
		logger.info("Expected title : " + expectedTitle);
		extent.extentLogger("", "Expected title : " + expectedTitle);
		logger.info("Expected description : " + expectedDesc);
		extent.extentLogger("", "Expected description : " + expectedDesc);
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		waitTime(3000);
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgTitle, "Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		logger.info("Actual twitter:title content value : " + ogtitle);
		extent.extentLogger("", "Actual twitter:title content value : " + ogtitle);
		String ogdescription = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgDesc, "Title");
		ogdescription = ogdescription.replace("&amp;", "&").replace("&#x27;", "'");
		logger.info("Actual twitter:description content value : " + ogdescription);
		extent.extentLogger("", "Actual twitter:description content value : " + ogdescription);
		if (ogtitle.equals(expectedTitle)) {
			logger.info("twitter:title content value is as expected");
			extent.extentLogger("", "twitter:title content value is as expected");
		} else {
			logger.error("twitter:title content value is not as expected");
			extent.extentLoggerFail("", "twitter:title content value is not as expected");
		}
		if (ogdescription.equals(expectedDesc)) {
			logger.info("twitter:description content value is as expected");
			extent.extentLogger("", "twitter:description content value is as expected");
		} else {
			logger.error("twitter:description content value is not as expected");
			extent.extentLoggerFail("", "twitter:description content value is not as expected");
		}
	}

	public String getLanguageComplete(String languageAPI) throws Exception {
		if (languageAPI.equals("kn"))
			return "Kannada";
		else if (languageAPI.equals("en"))
			return "English";
		else if (languageAPI.equals("mr"))
			return "Marati";
		else if (languageAPI.equals("hi"))
			return "Hindi";
		else if (languageAPI.equals("te"))
			return "Telugu";
		else if (languageAPI.equals("ta"))
			return "Tamil";
		else if (languageAPI.equals("ml"))
			return "Malayalam";
		else if (languageAPI.equals("bn"))
			return "Bengali";
		else
			return "";
	}

	public void PWAVerifyPageFreezeForChannel(String userType) throws Exception {
		extent.HeaderChildNode("Defect PWA2-5158 : \"&xplorHD\" channel consumption screen verification");
		logger.info("Defect PWA2-5158 : \"&xplorHD\" channel consumption screen verification");
		String content = "xplorHD";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchedResult(content), "Searched content");
		waitTime(4000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			// verifyElementPresent(PWAPlayerPage.subscribePopUp, "Subscription popup");
			verifyElementPresent(PWAPlayerPage.objSubscribeNowLink, "Subscription popup");
			// verifyElementPresentAndClick(PWAPlayerPage.ObjSubscriptionpopupCloseIcon,
			// "Subscription popup close icon");
			// verifyElementPresent(PWALiveTVPage.objPlayerInlineSubscriptionLink, "Player
			// inline Subscribtion link");
			verifyElementPresent(PWAPlayerPage.objSubscribeNowLink, "Player inline Subscribtion link");
		} else {
			verifyElementPresent(PWAPlayerPage.objLiveTag, "Live Tag");
			verifyElementPresent(PWAPlayerPage.pauseBtn, "Play/Pause icon");
			verifyElementPresent(PWAPlayerPage.settingsBtn, "Settings icon");
		}
	}

	public void PWAEmbedFunctionality(String userType) throws Exception {
		extent.HeaderChildNode("Task PWA2-5554 : Embed functionality check");
		logger.info("Task PWA2-5554 : Embed functionality check");
		String content = "Kundali Bhagya";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, content, "Search edit");
		waitTime(2000);
		click(PWASearchPage.objSearchShowsTab, "Shows tab");
		waitTime(2000);
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(content), "Searched content");
		waitTime(4000);
		partialScroll();
		checkElementDisplayed(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Second Episode set");
		waitTime(5000);
		click(PWAShowsPage.objEpisodeCard, "First Episode Card");
		waitTime(10000);
		partialScroll();
		click(PWAPlayerPage.objEmbedButton, "Embed button");
		verifyElementPresent(PWAPlayerPage.objEmbedHeader, "Embed Video header");
		verifyElementPresent(PWAPlayerPage.objEmbedText, "Embed text");
		verifyElementPresent(PWAPlayerPage.objEmbedCheckbox, "Embed Checkbox");
		verifyElementPresent(PWAPlayerPage.objEmbedStartAtText, "Start At text");
		verifyElementPresent(PWAPlayerPage.objEmbedStartAtValue, "Start At value 0:00");
		verifyElementPresent(PWAPlayerPage.objEmbedCopyButton, "Embed Copy button");
		verifyElementPresent(PWAPlayerPage.objEmbedCloseButton, "Embed Close button");
		String embedtext = getElementPropertyToString("innerText", PWAPlayerPage.objEmbedText, "Embed text");
		if (embedtext.contains("start=\"0:00\"")) {
			logger.error("The Embed text contains \'start=\"0:00\"\' even though checkbox is unchecked");
			extent.extentLoggerFail("", "The Embed text contains \'start=\"0:00\"\' even though checkbox is unchecked");
		} else {
			logger.info(
					"The Embed text does not contain \'start=\"0:00\"\' because checkbox is unchecked, expected behavior");
			extent.extentLogger("",
					"The Embed text does not contain \'start=\"0:00\"\' because checkbox is unchecked, expected behavior");
		}
		click(PWAPlayerPage.objEmbedCheckbox, "Embed Checkbox");
		embedtext = getElementPropertyToString("innerText", PWAPlayerPage.objEmbedText, "Embed text");
		if (embedtext.contains("start=\"0:00\"")) {
			logger.info("The Embed text contains \'start=\"0:00\"\' because checkbox is checked, expected behavior");
			extent.extentLogger("",
					"The Embed text contains \'start=\"0:00\"\' because checkbox is checked, expected behavior");
		} else {
			logger.error("The Embed text does not contain \'start=\"0:00\"\' even though checkbox is checked");
			extent.extentLoggerFail("",
					"The Embed text does not contain \'start=\"0:00\"\' even though checkbox is checked");
		}
		findElement(PWAPlayerPage.objEmbedStartAtValue).clear();
		logger.info("Cleared Start At text value");
		extent.extentLogger("", "Cleared Start At text value");
		type(PWAPlayerPage.objEmbedStartAtValue, "16:19", "Start duration");
		waitTime(2000);
		embedtext = getElementPropertyToString("innerText", PWAPlayerPage.objEmbedText, "Embed text");
		if (embedtext.contains("start=\"16:19\"")) {
			logger.info("The Embed text contains \'start=\"16:19\"\' after entering Start At value 16:19");
			extent.extentLogger("", "The Embed text contains \'start=\"16:19\"\' after entering Start At value 16:19");
		} else {
			logger.error("The Embed text does not contain \'start=\"16:19\"\' after entering Start At value 16:19");
			extent.extentLoggerFail("",
					"The Embed text does not contain \'start=\"16:19\"\' after entering Start At value 16:19");
		}
		click(PWAPlayerPage.objEmbedCloseButton, "Embed Close button");
		if (checkElementDisplayed(PWAPlayerPage.objEmbedHeader, "Embed Video header")) {
			logger.error("Embed Close button functionality failed");
			extent.extentLoggerFail("", "Embed Close button functionality failed");
		} else {
			logger.info("Embed Close button functionality passed");
			extent.extentLogger("", "Embed Close button functionality passed");
		}
	}

	public void PWAClickOnPromotionalBanners(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("Defect PWA2-5286 : Click on Promotional Banner");
			logger.info("Defect PWA2-5286 : Click on Promotional Banner");
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			String currentUrl = "", homeUrl = "";
			homeUrl = getParameterFromXML("url");
			click(PWAHomePage.objSubscribeBtn, "Subscribe button");
			List<WebElement> carouselDots = findElements(PWAHomePage.objPromotionalBannerCarouselDots);
			for (int dot = 0; dot < carouselDots.size(); dot++) {
				click(PWAHomePage.objPromotionalBannerCarouselDots(dot + 1), "Carousel Dot " + (dot + 1));
				click(PWAHomePage.objPromotionalBanner, "Promotional Banner " + (dot + 1));
				currentUrl = getWebDriver().getCurrentUrl();
				logger.info("Current URL : " + currentUrl);
				extent.extentLogger("", "Current URL : " + currentUrl);
				if (currentUrl.equals(homeUrl + "myaccount/subscription")) {
					logger.info("Click on Promotional Banner shows no response, expected behavior");
					extent.extentLogger("", "Click on Promotional Banner shows no response, expected behavior");
				} else {
					logger.error("Click on Promotional Banner has caused page navigation");
					extent.extentLoggerFail("", "Click on Promotional Banner has caused page navigation");
				}
			}
			getWebDriver().navigate().back();
			logger.info("Called driver back");
			extent.extentLogger("", "Called driver back");
			currentUrl = getWebDriver().getCurrentUrl();
			logger.info("Current URL : " + currentUrl);
			extent.extentLogger("", "Current URL : " + currentUrl);
			if (currentUrl.equals(homeUrl)) {
				logger.info("Navigated back to Home page");
				extent.extentLogger("", "Navigated back to Home page");
			} else {
				logger.error("Failed to navigate back to Home page");
				extent.extentLoggerFail("", "Failed to navigate back to Home page");
			}
		}
	}

	public void PWAZeeplexDisclaimer(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-5409 : ZEEPLEX-Addition of disclaimer text for user on frontend");
		logger.info("PWA2-5409 : ZEEPLEX-Addition of disclaimer text for user on frontend");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		navigateToAnyScreenOnWeb("ZEEPLEX");
		String disclaimerText = getElementPropertyToString("innerText", PWAHomePage.objZeePlexDisclaimer,
				"Disclaimer text");
		String expectedDisclaimerText = "ZEEPLEX is not part of Premium plan";
		if (disclaimerText.contains(expectedDisclaimerText)) {
			logger.info("Expected Disclaimer text is displayed : " + expectedDisclaimerText);
			extent.extentLogger("titles", "Expected Disclaimer text is displayed : " + expectedDisclaimerText);
		} else {
			logger.info("Disclaimer text displayed : " + disclaimerText);
			extent.extentLogger("titles", "Disclaimer text displayed : " + disclaimerText);
			logger.error("Expected Disclaimer text is not displayed");
			extent.extentLoggerFail("", "Expected Disclaimer text is not displayed");
		}

	}

	public void verifyMandatoryRegistrationPopUpCount(String userType) throws Exception {
		String home = getParameterFromXML("url");
		String url = "";
		JavascriptExecutor js = (JavascriptExecutor) getWebDriver();
		if (userType.equals("Guest")) {
			js.executeScript("window.localStorage.setItem('mandatoryRegistrationPopupCount','0')");
			extent.HeaderChildNode("PWA2-6113 : Mandatory Registration allow video views from 5 to 2");
			logger.info("PWA2-6113 : Mandatory Registration allow video views from 5 to 2");
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			url = home + "movies/details/robin-hood-enemies-forever/0-0-103560";
			getWebDriver().get(url);
			logger.info("First content is played");
			extent.extentLogger("", "First content is played");
			if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up")) {
				click(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up close icon");
			}
			waitForPlayerAdToComplete("Video");
			String count = js.executeScript("return window.localStorage.getItem('mandatoryRegistrationPopupCount')")
					.toString();
			logger.info("mandatoryRegistrationPopupCount value in local Storage : " + count);
			extent.extentLogger("", "mandatoryRegistrationPopupCount value in local Storage : " + count);

			url = home + "movies/details/robin-hood-and-the-invincible-knight/0-0-103553";
			getWebDriver().get(url);
			logger.info("Second content is played");
			extent.extentLogger("", "Second content is played");
			if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up")) {
				click(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up close icon");
			}
			waitForPlayerAdToComplete("Video");
			count = js.executeScript("return window.localStorage.getItem('mandatoryRegistrationPopupCount')")
					.toString();
			logger.info("mandatoryRegistrationPopupCount value in local Storage : " + count);
			extent.extentLogger("", "mandatoryRegistrationPopupCount value in local Storage : " + count);

			url = home + "movies/details/robin-hood-kings-return/0-0-144742";
			getWebDriver().get(url);
			logger.info("Third content is played");
			extent.extentLogger("", "Third content is played");
			checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Create New Account Popup");
			if (checkElementDisplayed(PWAPlayerPage.objCloseRegisterDialog, "Create New Account Pop Up close icon")) {
				logger.error("Close icon in Create New Account Pop Up should not be displayed on playing 3rd content");
				extent.extentLoggerFail("",
						"Close icon in Create New Account Pop Up should not be displayed on playing 3rd content");
			} else {
				logger.info(
						"Close icon in Create New Account Pop Up is not displayed on playing 3rd content, expected behavior");
				extent.extentLogger("",
						"Close icon in Create New Account Pop Up is not displayed on playing 3rd content, expected behavior");
			}
			count = js.executeScript("return window.localStorage.getItem('mandatoryRegistrationPopupCount')")
					.toString();
			logger.info("mandatoryRegistrationPopupCount value in local Storage : " + count);
			extent.extentLogger("", "mandatoryRegistrationPopupCount value in local Storage : " + count);
			if (count.equals("2")) {
				logger.info("mandatoryRegistrationPopupCount update is as expected");
				extent.extentLogger("", "mandatoryRegistrationPopupCount update is as expected");
			} else {
				logger.error("mandatoryRegistrationPopupCount update is not as expected");
				extent.extentLoggerFail("", "mandatoryRegistrationPopupCount update is not as expected");
			}
			mandatoryRegistrationPopUp(userType);
		}
		extent.HeaderChildNode("PWA2-5454 : Handling country mismatch in URL");
		logger.info("PWA2-5454 : Handling country mismatch in URL");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String currentUrl = getWebDriver().getCurrentUrl();
		if (currentUrl.contains("global")) {
			logger.error("Home page contains \"global\" in the URL");
			extent.extentLoggerFail("", "Home page contains \"global\" in the URL");
		} else {
			logger.info("Home page does not contain \"global\" in the URL, expected behavior");
			extent.extentLogger("", "Home page does not contain \"global\" in the URL, expected behavior");
		}
		extent.HeaderChildNode("Task PWA2-5455 : Handling language mismatch in URL");
		logger.info("Task PWA2-5455 : Handling language mismatch in URL");
		click(PWAHomePage.objLanguage, "Language button");
		click(PWAHomePage.objMarathiWEB, "Marathi Display language");
		click(PWAHamburgerMenuPage.objApply, "Apply button on Display Langauge dropdown");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objApplybutton, "Apply button on Content Language dropdown");
		url = home + "hi/movies/details/comedy-couple/0-0-213623";
		getWebDriver().get(url);
		logger.info("Navigated to url: " + url);
		extent.extentLogger("", "Navigated to url: " + url);
		waitTime(10000);
		currentUrl = getWebDriver().getCurrentUrl();
		if (currentUrl.contains("mr/movies/details/comedy-couple/0-0-213623")) {
			logger.info("Current url fetched : " + currentUrl);
			extent.extentLogger("", "Current url fetched : " + currentUrl);
			logger.info("Redirection to set display language successful");
			extent.extentLoggerPass("", "Redirection to set display language successful");
		} else {
			logger.info("Current url fetched : " + currentUrl);
			extent.extentLogger("", "Current url fetched : " + currentUrl);
			logger.error("Redirection to set display language failed");
			extent.extentLoggerFail("", "Redirection to set display language failed");
		}
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objLanguage, "Language button");
		click(PWAHomePage.objEnglishWEB, "English Display language");
		click(PWAHamburgerMenuPage.objApply, "Apply button on Display Langauge dropdown");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objApplybutton, "Apply button on Content Language dropdown");
		waitTime(4000);
		extent.HeaderChildNode("PWA2-3873 : \"Recommended Videos for You\" next to the player on Videos playback");
		url = home + "videos/details/forbidden-love-press-conference/0-0-224005";
		logger.info("Launched video Forbidden Love Press Conference");
		extent.extentLogger("", "Launched video Forbidden Love Press Conference");
		getWebDriver().get(url);
		waitTime(5000);
		String trayName = getElementPropertyToString("innerText", PWAHomePage.objTrayBesidePlayer,
				"tray beside player");
		logger.info("Tray name displayed beside player: " + trayName);
		extent.extentLogger("", "Tray name displayed beside player: " + trayName);
		if (trayName.equals("Recommended Videos for You")) {
			logger.info("Expected tray name is displayed");
			extent.extentLogger("", "Expected tray name is displayed");
		} else {
			logger.error("Tray name should be Recommended Videos for You");
			extent.extentLoggerFail("", "Tray name should be Recommended Videos for You");
		}
		extent.HeaderChildNode("PWA2-4421 : guest token should not be refreshed if user logs in or logs out");
		logger.info("PWA2-4421 : guest token should not be refreshed if user logs in or logs out");
		if ((userType.equals("Guest"))) {
			String guestToken1 = js.executeScript("return window.localStorage.getItem('guestToken')").toString();
			logger.info("Guest Token fetched from local storage before login: " + guestToken1);
			extent.extentLogger("", "Guest Token fetched from local storage before login: " + guestToken1);
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");
			loginWithUserEmail(Username, Password);
			String guestToken2 = js.executeScript("return window.localStorage.getItem('guestToken')").toString();
			logger.info("Guest Token fetched from local storage after login: " + guestToken2);
			extent.extentLogger("", "Guest Token fetched from local storage after login: " + guestToken2);
			if (guestToken1.equals(guestToken2)) {
				logger.info("Same Guest Token before and after login, expected behavior");
				extent.extentLogger("", "Same Guest Token before and after login, expected behavior");
			} else {
				logger.error("Guest Token is not same before and after login");
				extent.extentLoggerFail("", "Guest Token is not same before and after login");
			}
			logout();
		} else {
			String guestToken1 = js.executeScript("return window.localStorage.getItem('guestToken')").toString();
			logger.info("Guest Token fetched from local storage before logout: " + guestToken1);
			extent.extentLogger("", "Guest Token fetched from local storage before logout: " + guestToken1);
			logout();
			String guestToken2 = js.executeScript("return window.localStorage.getItem('guestToken')").toString();
			logger.info("Guest Token fetched from local storage after logout: " + guestToken2);
			extent.extentLogger("", "Guest Token fetched from local storage after logout: " + guestToken2);
			if (guestToken1.equals(guestToken2)) {
				logger.info("Same Guest Token before and after logout, expected behavior");
				extent.extentLogger("", "Same Guest Token before and after logout, expected behavior");
			} else {
				logger.error("Guest Token is not same before and after logout");
				extent.extentLoggerFail("", "Guest Token is not same before and after logout");
			}
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");
			loginWithUserEmail(Username, Password);

		}

	}

	public void verifyPremiumPopUpForPremiumLiveChannel(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-4699 : Verify Subscription Pop Up For Premium Live Channel");
		logger.info("PWA2-4699 : Verify Subscription Pop Up For Premium Live Channel");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String channel = "Zee Kannada";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, channel + "\n", "Search Edit box: " + channel);
		waitTime(4000);
		verifyElementPresent(PWASearchPage.objSearchedResult(channel), "Search Result");
		click(PWALiveTVPage.objLivelogo, "Live logo");
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			verifyElementPresent(PWAPlayerPage.subscribePopUp, "Subscription popup");
			verifyElementPresentAndClick(PWAPlayerPage.ObjSubscriptionpopupCloseIcon, "Subscription popup close icon");
			verifyElementPresent(PWALiveTVPage.objPlayerInlineSubscriptionLink, "Player inline Subscribtion link");
		} else {
			verifyElementPresent(PWAPlayerPage.objLiveTag, "Live Tag");
			verifyElementPresent(PWAPlayerPage.pauseBtn, "Play/Pause icon");
			verifyElementPresent(PWAPlayerPage.settingsBtn, "Settings icon");
		}

	}

	public void verifyClubTagForLiveTVContents(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-3700 : Club badge for Live TV channels");
		logger.info("PWA2-3700 : Club badge for Live TV channels");
		boolean foundPremium = false, foundClub = false;
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		navigateToAnyScreenOnWeb("Live TV");
		for (int i = 0; i < 4; i++) {
			List<WebElement> premiumIcons = findElements(PWAHomePage.objPremiumIcon);
			if (premiumIcons.size() > 0) {
				logger.error("Premium icon found for Live contents in Live TV Tab");
				extent.extentLoggerFail("", "Premium icon found for Live contents in Live TV Tab");
				foundPremium = true;
				break;
			} else {
				Swipe("UP", 1);
			}
		}
		if (foundPremium == false) {
			logger.info("Premium icon not found for Live contents in Live TV Tab, expected behavior");
			extent.extentLogger("", "Premium icon not found for Live contents in Live TV Tab, expected behavior");
		}
		click(PWAHomePage.objBackToTopArrow, "Back to Top arrow");
		waitTime(2000);
		for (int i = 0; i < 4; i++) {
			List<WebElement> clubIcons = findElements(PWAHomePage.objClubIcon);
			if (clubIcons.size() > 0) {
				logger.info("Club icon found for Live contents in Live TV Tab, expected behavior");
				extent.extentLogger("", "Club icon found for Live contents in Live TV Tab, expected behavior");
				foundClub = true;
				break;
			} else {
				scrollDownByY(300);
				logger.info("Scrolled down ..");
				extent.extentLogger("", "Scrolled down ..");
			}
		}
		if (foundClub == false) {
			logger.error("Club icon not found for Live contents in Live TV Tab");
			extent.extentLoggerFail("", "Club icon not found for Live contents in Live TV Tab");
		}

	}

	public void PWAVerifyZeePlexContents(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-7202 : Any trailer featured in the collection is showcased in the front-end");
		logger.info("PWA2-7202 : Any trailer featured in the collection is showcased in the front-end");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String tab = "ZEEPLEX";
		navigateToAnyScreenOnWeb(tab);
		Response tabResponse = ResponseInstance.getResponseForPages(tab.toLowerCase(), "en,hi,kn");
		int items = tabResponse.jsonPath().get("buckets[0].items.size()");
		String title = "", type = "";
		partialScroll();
		partialScroll();
		for (int i = 0; i < items; i++) {
			title = tabResponse.jsonPath().get("buckets[0].items[" + i + "].title");
			type = tabResponse.jsonPath().get("buckets[0].items[" + i + "].asset_subtype");
			logger.info("API returned title: " + title + " of asset_subtype: " + type);
			extent.extentLogger("", "API returned title: " + title + " of asset_subtype: " + type);
			verifyElementPresent(PWAMoviesPage.objTVODTitle(title), title + " in UI");
		}

	}

	public void PWAVerifyWatchTrailerCTA(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-7034 : \"Watch trailer\" CTA for shows and zee-original contents.");
		logger.info("PWA2-7034 : \"Watch trailer\" CTA for shows and zee-original contents.");
		extent.extentLogger("", "-------------- Validation for Shows content --------------");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String showcontent = "Kritika reveals about her marriage with Prithvi - Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, showcontent, "Search edit");
		waitTime(2000);
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchedResult(showcontent), "Searched content");
		waitTime(4000);
		partialScroll();
		verifyElementPresentAndClick(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button");
		waitTime(4000);
		if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
				"'You're watching a trailer' message on the player")) {
			extent.extentLoggerFail("", "Watch Trailer Button functionality failed");
			logger.error("Watch Trailer Button functionality failed");
		}

		extent.extentLogger("", "-------------- Validation for ZEE5 Originals content --------------");
		String zee5content = "The Three B.Techs";
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, zee5content, "Search edit");
		waitTime(2000);
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchedResult(zee5content), "Searched content");
		waitTime(4000);
		partialScroll();
		verifyElementPresentAndClick(PWAPremiumPage.objWatchTrailerBtn, "Watch Trailer Button");
		waitTime(4000);
		if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
				"'You're watching a trailer' message on the player")) {
			extent.extentLoggerFail("", "Watch Trailer Button functionality failed");
			logger.error("Watch Trailer Button functionality failed");
		}
		mandatoryRegistrationPopUp(userType);
	}

	public void PWAWatchPromoAndVerifyTitle(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-6936 : \"undefined Trailer\" Meta title - fix verification");
		logger.info("PWA2-6936 : \"undefined Trailer\" Meta title - fix verification");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String showcontent = "Baarish";
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, showcontent, "Search edit");
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab("Shows"), "Shows Tab");
		waitTime(2000);
		click(PWASearchPage.objSearchedResult(showcontent), "Searched content");
		waitTime(4000);
		partialScroll();
		click(PWAPlayerPage.objWatchPromo, "Watch Promo icon");
		waitTime(4000);
		if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
				"'You're watching a trailer' message on the player")) {
			extent.extentLoggerFail("", "Watch Trailer Button functionality failed");
			logger.error("Watch Trailer Button functionality failed");
		}
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
				"Content Title").toString();
		extent.extentLogger("", "Navigated to the consumption page: " + consumptionPageTitle);
		logger.info("Navigated to the consumption page " + consumptionPageTitle);
		if (consumptionPageTitle.contains(showcontent)) {
			extent.extentLogger("", "Navigated to the correct consumption page");
			logger.info("Navigated to the correct consumption page");
		} else {
			extent.extentLoggerFail("n", "Failed to navigate to the correct Consumption page");
			logger.error("Failed to navigate to the correct Consumption page");
		}
		mandatoryRegistrationPopUp(userType);

	}

	public void PWAWatchMovieAndThenClickTrailer(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			navigateToHome();
			extent.HeaderChildNode("PWA2-6932 : Plays any movie for sometime and tap on \"Watch trailer\" CTA");
			logger.info("PWA2-6932 : Plays any movie for sometime and tap on \"Watch trailer\" CTA");
			click(PWAHomePage.objSearchBtn, "Search icon");
			String movie = "Popcorn Monkey Tiger";
			type(PWASearchPage.objSearchEditBox, movie, "Search edit");
			waitTime(3000);
			click(PWASearchPage.objSearchMoviesTab, "Movies tab");
			click(PWASearchPage.objspecificSearch, "Searched content");
			waitTime(10000);
			try {
				Actions act = new Actions(getWebDriver());
				WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
				act.moveToElement(scrubber, 200, 0).click().build().perform();
				extent.extentLogger("", "Scrubbed the player");
				logger.info("Scrubbed the player");
				waitTime(10000);
			} catch (Exception e) {
			}
			waitTime(7000);
			click(PWASearchPage.objWEBWatchTrailerBtn, "Watch Trailer option");
			waitTime(4000);
			if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
					"'You're watching a trailer' message on the player")) {
				extent.extentLoggerFail("", "Watch Trailer Button functionality failed");
				logger.error("Watch Trailer Button functionality failed");
			}
		}
	}

	public void PWAWatchNewsVODAndThenClickAnotherContent(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-6995 : Play any news VOD content and play any other content from the same page");
		logger.info("PWA2-6995 : Play any news VOD content and play any other content from the same page");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		navigateToAnyScreenOnWeb("News");
		swipeTillTrayAndClickFirstAsset(userType, 15, "Trending News", "Trending News tray", "News");
		String consumptionTitle1 = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
				"Content Title in Consumption Page").toString();
		extent.extentLogger("", "Consumption page title: " + consumptionTitle1);
		logger.info("Consumption page title: " + consumptionTitle1);
		mouseHover();
		click(PWAPlayerPage.pauseBtn, "Pause button");
		swipeTillTrayAndClickFirstAsset(userType, 15, "Viral News", "Viral News tray", "Consumptions");
		String consumptionTitle2 = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
				"Content Title in Consumption Page").toString();
		extent.extentLogger("", "Consumption page title: " + consumptionTitle2);
		logger.info("Consumption page title: " + consumptionTitle2);
		if (consumptionTitle1.equals(consumptionTitle2)) {
			extent.extentLoggerFail("", "Content click in VOD News Consumptions has failed");
			logger.error("Content click in VOD News Consumptions has failed");
		}
		mouseHover();
		String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		System.out.println("Current Duration: " + currentDuration);
		extent.extentLogger("", "Current Duration: " + currentDuration);
		logger.info("Current Duration: " + currentDuration);
		waitTime(10000);
		mouseHover();
		String currentDuration10 = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
				"Current duration");
		extent.extentLogger("", "Duration after some time: " + currentDuration10);
		logger.info("Duration after some time: " + currentDuration10);
		if (currentDuration.equals(currentDuration10)) {
			extent.extentLoggerFail("", "Content play from VOD News Consumptions has failed");
			logger.error("Content play from VOD News Consumptions has failed");
		} else {
			extent.extentLogger("", "Content play from VOD News Consumptions has passed");
			logger.info("Content play from VOD News Consumptions has passed");
		}
	}

	public void PWAClickSubscribeDuringAdPlay(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("PWA2-6823 : Ad and Content play after clicking Subscribe below player");
			logger.info("PWA2-6823 : Ad and Content play after clicking Subscribe below player");
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			click(PWAHomePage.objSearchBtn, "Search icon");
			String content = "Prithvi offers Sarla a fake apology - Kundali Bhagya";
			type(PWASearchPage.objSearchEditBox, content, "Search edit");
			waitTime(3000);
			click(PWASearchPage.objspecificSearch, "Searched content");
			if (userType.equals("Guest")) {
				waitTime(3000);
				if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Why Register Pop Up")) {
					click(PWASearchPage.objCloseRegisterDialog, "Close Button");
				}
			}

			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("Ad play in progress");
				extent.extentLogger("", "Ad play in progress");
				click(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, "Subscribe button below player during Ad Play");
				verifyElementPresent(PWASubscriptionPages.objSubscribepopup, "Subscribe popup");
				click(PWAPremiumPage.objClosePremiumPopup, "Subscribe popup close button");
				waitForPlayerAdToComplete("Video Player");
				mouseHover();
				String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
						"Current duration");
				System.out.println("Current Duration: " + currentDuration);
				extent.extentLogger("", "Current Duration: " + currentDuration);
				if (currentDuration.equals("") || currentDuration.equals(null)) {
					extent.extentLoggerFail("", "Ad and Content failed to resume after dismissing pop up");
					logger.error("Ad and Content failed to resume after dismissing pop up");
				} else {
					extent.extentLogger("", "Ad and Content resumed after dismissing pop up, expected behavior");
					logger.info("Ad and Content resumed after dismissing pop up, expected behavior");
				}
			}
		}
	}

	public void PWAVmaxAdForMusicAndNews(String userType) throws Exception {
		mandatoryRegistrationPopUp(userType);
		extent.HeaderChildNode("PWA2-6880 : Content is getting paused with mute state verification");
		logger.info("PWA2-6880 : Content is getting paused with mute state verification");
		if (userType.equals("SubscribedUser")) {
			navigateToHome();
			navigateToAnyScreenOnWeb("Music");
			waitTime(10000);
			verifyElementPresentAndClick(PWAPlayerPage.objFirstCardFigureFromTray, "First card image from first rail");
			waitTime(5000);
		}
		verifyElementPresentAndClick(PWAPlayerPage.objCardBesidePlayerImage, "Card beside player");
		waitTime(10000);
		Actions act = new Actions(getWebDriver());
		WebElement overlay = findElement(PWAPlayerPage.objSubTitleOverlay);
		int overlayX = overlay.getLocation().getX();
		int overlayY = overlay.getLocation().getY();
		try {
			act.moveToElement(overlay, (overlayX + 10), (overlayY + 10)).build().perform();
			getWebDriver().findElement(PWAPlayerPage.objMuteUnmute);
		} catch (Exception e) {
		}
		verifyElementPresent(PWAPlayerPage.objMuteButton, "Mute button");
	}

	public void PWALatestEpisodeInURLAndCheckSubscribe(String userType) throws Exception {
		extent.HeaderChildNode(
				"PWA2-6993 : Appending the playback URL as \"latest/latest1\" and verifying Subscribe CTA");
		logger.info("PWA2-6993 : Appending the playback URL as \"latest/latest1\" and verifying Subscribe CTA");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String home = getParameterFromXML("url");
		extent.extentLogger("", "---------- Appending \"latest\" to show url -----------");
		String url = home + "zee5originals/details/baarish/0-6-2614/latest";
		getWebDriver().get(url);
		logger.info("URL opened: " + url);
		extent.extentLogger("", "URL opened: " + url);
		waitTime(5000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			verifyElementPresent(PWAPlayerPage.objGetPremium, "Subscribe button below player");
		} else {
			if (checkElementDisplayed(PWAPlayerPage.objGetPremium,
					"Subscribe button below player for Subscribed user")) {
				extent.extentLoggerFail("",
						"Subscribe button below player should not be displayed for Subscribed user");
				logger.error("Subscribe button below player should not be displayed for Subscribed user");
			}
		}
		mandatoryRegistrationPopUp(userType);
		extent.extentLogger("", "---------- Appending \"latest1\" to show url -----------");
		url = home + "zee5originals/details/poison/0-6-1558/latest1";
		getWebDriver().get(url);
		logger.info("URL opened: " + url);
		extent.extentLogger("", "URL opened: " + url);
		waitTime(5000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			verifyElementPresent(PWAPlayerPage.objGetPremium, "Subscribe button below player");
		} else {
			if (checkElementDisplayed(PWAPlayerPage.objGetPremium,
					"Subscribe button below player for Subscribed user")) {
				extent.extentLoggerFail("",
						"Subscribe button below player should not be displayed for Subscribed user");
				logger.error("Subscribe button below player should not be displayed for Subscribed user");
			}
		}
		mandatoryRegistrationPopUp(userType);
	}

	public void PWAVerifyingRefreshForShowDetailsAndConsumptions(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-6897 : Refreshing show detail page and episode consumption page");
		logger.info("PWA2-6897 : Refreshing show detail page and episode consumption page");
		extent.extentLogger("", "---------- Refreshing show detail page -----------");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String show = "Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, show, "Search Field");
		click(PWASearchPage.objSearchShowsTab, "Shows tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(show), "Searched content");
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String showPageTitleBeforeRefresh = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
				"Show Title").toString();
		logger.info("Show Title displayed before refresh: " + showPageTitleBeforeRefresh);
		extent.extentLogger("", "Show Title displayed before refresh: " + showPageTitleBeforeRefresh);
		String url = getWebDriver().getCurrentUrl();
		logger.info("URL displayed: " + url);
		extent.extentLogger("", "URL displayed: " + url);
		getWebDriver().get(url);
		logger.info("Refreshed page");
		extent.extentLogger("", "Refreshed page");
		waitTime(5000);
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String showPageTitleAfterRefresh = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
				"Show Title").toString();
		logger.info("Show Title displayed after refresh: " + showPageTitleAfterRefresh);
		extent.extentLogger("", "Show Title displayed after refresh: " + showPageTitleAfterRefresh);
		if (showPageTitleAfterRefresh.equals(showPageTitleBeforeRefresh) && !showPageTitleAfterRefresh.equals("")
				&& !showPageTitleAfterRefresh.equals(null)) {
			logger.info("Page refresh successful");
			extent.extentLogger("", "Page refresh successful");
		} else {
			extent.extentLoggerFail("", "Page refresh failed");
			logger.error("Page refresh failed");
		}
		extent.extentLogger("", "---------- Refreshing episode detail page -----------");
		mandatoryRegistrationPopUp(userType);
		click(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		click(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Second Episode set");
		waitTime(5000);
		click(PWAShowsPage.objEpisodeCard, "First Episode Card");
		mandatoryRegistrationPopUp(userType);
		String consumptionPageTitleBeforeRefresh = getElementPropertyToString("innerText",
				PWAPlayerPage.objContentTitle, "Content Title").toString();
		logger.info("Episode Title displayed before refresh: " + consumptionPageTitleBeforeRefresh);
		extent.extentLogger("", "Episode Title displayed before refresh: " + consumptionPageTitleBeforeRefresh);
		url = getWebDriver().getCurrentUrl();
		logger.info("URL displayed: " + url);
		extent.extentLogger("", "URL displayed: " + url);
		getWebDriver().get(url);
		logger.info("Refreshed page");
		extent.extentLogger("", "Refreshed page");
		mandatoryRegistrationPopUp(userType);
		waitTime(5000);
		String consumptionPageTitleAfterRefresh = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
				"Content Title").toString();
		logger.info("Show Title displayed after refresh: " + consumptionPageTitleAfterRefresh);
		extent.extentLogger("", "Show Title displayed after refresh: " + consumptionPageTitleAfterRefresh);
		if (consumptionPageTitleAfterRefresh.equals(consumptionPageTitleBeforeRefresh)
				&& !consumptionPageTitleAfterRefresh.equals("") && !consumptionPageTitleAfterRefresh.equals(null)) {
			logger.info("Page refresh successful");
			extent.extentLogger("", "Page refresh successful");
		} else {
			extent.extentLoggerFail("", "Page refresh failed");
			logger.error("Page refresh failed");
		}
	}

	public void PWAVerifyNextContentPlayAfterBeforeTVContent(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("PWA2-6852 : Verify next content play after before TV content");
			logger.info("PWA2-6852 : Verify next content play after before TV content");
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			swipeTillTrayAndClickAsset(userType, 15, "Before Zee TV", "Before TV tray", "Home");
			waitTime(7000);
			String contentPlayed = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
					"Content Title").toString();
			logger.info("Content name playing: " + contentPlayed);
			extent.extentLogger("", "Content name playing: " + contentPlayed);
			if (checkElementDisplayed(PWAPlayerPage.subscribePopUp, "Subscription popup")) {
				waitTime(3000);
				click(PWAPlayerPage.ObjSubscriptionpopupCloseIcon, "Subscription popup close icon");
			}
			waitTime(7000);
			waitForPlayerAdToComplete("Video Player");
			String nextContent = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle, "Content Title")
					.toString();
			logger.info("Content name playing: " + nextContent);
			extent.extentLogger("", "Content name playing: " + nextContent);
			if (contentPlayed.equals(nextContent)) {
				logger.error("Next content failed to play after before tv promo play");
				extent.extentLoggerFail("", "Next content failed to play after before tv promo play");
			} else {
				logger.info("Next content played successfully after before tv promo play");
				extent.extentLogger("", "Next content played successfully after before tv promo play");
			}
		}
	}

	public boolean swipeTillTrayAndClickAsset(String userType, int noOfSwipes, String trayTitle, String message,
			String tab) throws Exception {
		int swipeCount = 0;
		String trayTitleInUI = "", temp = "";
		boolean found = false, titleDisplayed = false;
		List<WebElement> trays;
		ArrayList<String> titles = new ArrayList<String>();
		for (int i = 0; i <= noOfSwipes; i++) {
			trays = new ArrayList<WebElement>();
			trays = getWebDriver().findElements(PWALandingPages.objTrayTitle);
			for (int tr = 0; tr < trays.size(); tr++) {
				try {
					titles.add(trays.get(tr).getAttribute("innerText"));
				} catch (Exception e) {
				}
			}
			for (int traycount = 0; traycount < titles.size(); traycount++) {
				temp = titles.get(traycount);
				if (temp.toLowerCase().contains(trayTitle.toLowerCase())) {
					trayTitleInUI = temp;
					if (!titleDisplayed) {
						logger.info(trayTitleInUI + " is present in " + tab + " page");
						extent.extentLogger("trayfound", trayTitleInUI + " is present in " + tab + " page");
						titleDisplayed = true;
					}
					if (trayTitle.equals("Shows")) {
						try {
							// handle mandatory pop up
							mandatoryRegistrationPopUp(userType);
							getWebDriver().findElement(PWALandingPages.objFirstAssetInTrayIndex(trayTitleInUI)).click();
							found = true;
						} catch (Exception e) {
						}
					} else {
						// handle mandatory pop up
						mandatoryRegistrationPopUp(userType);
						try {
							JSClick(PWALandingPages.objFirstAssetInTrayIndex(trayTitleInUI), "First Asset");
							found = true;
						} catch (Exception e1) {
						}
					}
					if (found == true) {
						// handle mandatory pop up
						mandatoryRegistrationPopUp(userType);
						waitTime(2000);
						return true;
					} else {
						scrollDownByY(150);
					}
				}
			}
			scrollDownByY(350);
			waitTime(5000);
			swipeCount++;
			logger.info("Scrolled down");
			extent.extentLogger("scrolled", "Scrolled down");
			if (swipeCount == noOfSwipes) {
				logger.error("Failed to locate tray " + trayTitle);
				extent.extentLoggerFail("failedToLocate", "Failed to locate card " + trayTitle);
				logger.error("Failed to locate first card");
				extent.extentLoggerFail("failedToLocate", "Failed to locate card");
			}
		}
		return false;
	}

	public void PWAClickSubscribeDuringTrailerPlay(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			extent.HeaderChildNode("PWA2-6864 : Trailer play after clicking Subscribe below player");
			logger.info("PWA2-6864 : Trailer play after clicking Subscribe below player");
			click(PWAHomePage.objSearchBtn, "Search icon");
			String content = "Soojidaara | Trailer";
			type(PWASearchPage.objSearchEditBox, content, "Search edit");
			waitTime(3000);
			click(PWASearchPage.objspecificSearch, "Searched content");
			if (userType.equals("Guest")) {
				waitTime(3000);
				if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Why Register Pop Up")) {
					click(PWASearchPage.objCloseRegisterDialog, "Close Button");
				}
			}
			waitTime(5000);
			click(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, "Subscribe button below player during Ad Play");
			verifyElementPresent(PWASubscriptionPages.objSubscribepopup, "Subscribe popup");
			click(PWAPremiumPage.objClosePremiumPopup, "Subscribe popup close button");
			mouseHover();
			String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
					"Current duration");
			System.out.println("Current Duration: " + currentDuration);
			extent.extentLogger("", "Current Duration: " + currentDuration);
			if (currentDuration.equals("") || currentDuration.equals(null)) {
				extent.extentLoggerFail("", "Trailer failed to resume after dismissing pop up");
				logger.error("Trailer failed to resume after dismissing pop up");
			} else {
				extent.extentLogger("", "Trailer resumed after dismissing pop up, expected behavior");
				logger.info("Trailer resumed after dismissing pop up, expected behavior");
			}
		}
	}

	public void PWAVerifyNewsVODPlay(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-6926 : Verify error is not displayed on playing News VOD Content");
		logger.info("PWA2-6926 : Verify error is not displayed on playing News VOD Content");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String home = getParameterFromXML("url");
		ArrayList<String> urlsToOpen = new ArrayList<String>();
		urlsToOpen.add(home
				+ "news/details/international-womens-day-2021-date-history-significance-and-theme-of-the-day/0-0-newsauto_626t9qsgl500");
		urlsToOpen.add(
				home + "news/details/budget-2021-p-chidambaram-talks-about-budget-2021/0-0-newsauto_6u2nna3ugl70)");
		urlsToOpen.add(home + "news/details/bank-of-maharashtra-gold-loans-pre-roll/0-0-newsauto_47pt91la0ag0");
		urlsToOpen.add(
				home + "news/details/dixon-technologies-cfo-on-growth-run-rate-and-more/0-0-newsauto_1smvmfh58ep8");
		urlsToOpen.add(
				home + "news/details/budget-2021-who-gets-affected-by-proposed-epf-changes/0-0-newsauto_5g26jf84rkg0");
		urlsToOpen.add(home + "news/details/government-to-unveil-securities-related-laws/0-0-newsauto_6m35kvcf4lm0");
		String currentUrl = "";
		for (int i = 0; i < urlsToOpen.size(); i++) {
			currentUrl = urlsToOpen.get(i);
			getWebDriver().get(currentUrl);
			logger.info("Navigated to News VOD content : " + currentUrl);
			extent.extentLogger("", "Navigated to News VOD content : " + currentUrl);
			waitTime(4000);
			if (checkElementDisplayed(PWAHomePage.objOopsNoInfo, "Oops! No Information available")) {
				extent.extentLoggerFail("", "News VOD content play failed");
				logger.error("News VOD content play failed");
			} else {
				String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
						"Content Title").toString();
				if (consumptionPageTitle.equals("") || consumptionPageTitle.equals(null)) {
					extent.extentLoggerFail("", "Failed to fetch News VOD content title");
					logger.error("Failed to fetch News VOD content title");
				} else {
					extent.extentLogger("", "News VOD content title : " + consumptionPageTitle);
					logger.info("News VOD content title : " + consumptionPageTitle);
				}
			}
		}
	}

	public void PWAVerifyImageAssetForZee5Logo(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-6964 : Verify Image Asset For Zee5 Logo");
		logger.info("PWA2-6964 : Verify Image Asset For Zee5 Logo");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		extent.extentLogger("", "---------- Verify ZEE5 Logo src attribute value in Home page-----------");
		String source = getElementPropertyToString("src", PWAHomePage.objZeeLogo, "ZEE5 Logo").toString();
		extent.extentLogger("", "Value of src attribute of ZEE5 Logo: " + source);
		logger.info("Value of src attribute of ZEE5 Logo: " + source);
		if (source.contains("/images/ZEE5_logo.svg")) {
			extent.extentLogger("", "SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
			logger.info("SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
		} else {
			extent.extentLoggerFail("", "SVG image is not used in place of PNG for ZEE5 Logo");
			logger.error("SVG image is not used in place of PNG for ZEE5 Logo");
		}
		if (userType.equals("Guest")) {
			extent.extentLogger("",
					"---------- Verify ZEE5 Logo src attribute value in Forgot Password page-----------");
			click(PWALoginPage.objLoginBtnWEB, "Login button");
			waitTime(5000);
			click(PWALoginPage.objForgotPasswordTxt, "Forgot Password link");
			String sourceInForgotPassPage = getElementPropertyToString("src",
					PWAHomePage.objZeeLogoInForgotPasswordPage, "ZEE5 Logo").toString();
			extent.extentLogger("", "Value of src attribute of ZEE5 Logo: " + sourceInForgotPassPage);
			logger.info("Value of src attribute of ZEE5 Logo: " + sourceInForgotPassPage);
			if (sourceInForgotPassPage.contains("/images/ZEE5_logo.svg")) {
				extent.extentLogger("", "SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
				logger.info("SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
			} else {
				extent.extentLoggerFail("", "SVG image is not used in place of PNG for ZEE5 Logo");
				logger.error("SVG image is not used in place of PNG for ZEE5 Logo");
			}
		}
		extent.extentLogger("", "---------- Verify ZEE5 Logo src attribute value in Show Details page-----------");
		navigateToHome();
		String show = "Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, show, "Search Field");
		click(PWASearchPage.objSearchShowsTab, "Shows tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(show), "Searched content");
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String sourceInShowPage = getElementPropertyToString("src", PWAHomePage.objZeeLogo, "ZEE5 Logo").toString();
		extent.extentLogger("", "Value of src attribute of ZEE5 Logo: " + sourceInShowPage);
		logger.info("Value of src attribute of ZEE5 Logo: " + sourceInShowPage);
		if (sourceInShowPage.contains("/images/ZEE5_logo.svg")) {
			extent.extentLogger("", "SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
			logger.info("SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
		} else {
			extent.extentLoggerFail("", "SVG image is not used in place of PNG for ZEE5 Logo");
			logger.error("SVG image is not used in place of PNG for ZEE5 Logo");
		}
		extent.extentLogger("", "---------- Verify ZEE5 Logo src attribute value in Consumptions page-----------");
		navigateToHome();
		String episode = "Prithvi offers Sarla a fake apology - Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, episode, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSpecificSearch(episode), "Searched content");
		String sourceInPlayerPage = getElementPropertyToString("src", PWAHomePage.objZeeLogo, "ZEE5 Logo").toString();
		extent.extentLogger("", "Value of src attribute of ZEE5 Logo: " + sourceInPlayerPage);
		logger.info("Value of src attribute of ZEE5 Logo: " + sourceInPlayerPage);
		if (sourceInPlayerPage.contains("/images/ZEE5_logo.svg")) {
			extent.extentLogger("", "SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
			logger.info("SVG image is used in place of PNG for ZEE5 Logo, expected behavior");
		} else {
			extent.extentLoggerFail("", "SVG image is not used in place of PNG for ZEE5 Logo");
			logger.error("SVG image is not used in place of PNG for ZEE5 Logo");
		}
		mandatoryRegistrationPopUp(userType);
	}

	public void TasksAndDefects(String userType) throws Exception {
		// PWAVerifyTitleInAnchorTags(userType);
		PWAVerifyImageWebP(userType);
//		PWAVerifyMetaTags(userType);
//		PWABreadcrumbImplementation(userType);
		PWASubtitleSelection(userType);
		PWAVerifyPageFreezeForChannel(userType);
//		PWAEmbedFunctionality(userType);
//		PWAClickOnPromotionalBanners(userType);
		PWAZeeplexDisclaimer(userType);
		// ------
		// verifyPremiumPopUpForPremiumLiveChannel(userType);
		verifyMandatoryRegistrationPopUpCount(userType);
		// verifyClubTagForLiveTVContents(userType);
		PWAVerifyMetaTagsForTwitter(userType);
		// PWAVerifyZeePlexContents(userType);
		PWAVerifyWatchTrailerCTA(userType);
		PWAWatchPromoAndVerifyTitle(userType);
		PWAWatchMovieAndThenClickTrailer(userType);
		PWAWatchNewsVODAndThenClickAnotherContent(userType);
		// PWAClickSubscribeDuringAdPlay(userType);
		PWAVmaxAdForMusicAndNews(userType);
		PWALatestEpisodeInURLAndCheckSubscribe(userType);
		PWAVerifyingRefreshForShowDetailsAndConsumptions(userType);
		PWAVerifyNewsVODPlay(userType);
		PWAVerifyImageAssetForZee5Logo(userType);
	}

	/**
	 * Method for webseries page validation
	 * @param userType
	 * @param tabName
	 * @throws Exception
	 */
	public void webSeriesValidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("HLS_157: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode(" HLS_158 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);// update

		extent.HeaderChildNode(" HLS_160 : Verify Next-Previous functionality");
		// scrollDownWEB();
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		waitTime(5000);
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.error("Tray is not rotated");
			extent.extentLoggerFail("Tray is not rotated", "Tray is not rotated");// update
		}
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");

		extent.HeaderChildNode(" HLS_159 : Verify On click More/> ");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "More Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.info("Navigated to More Page");
				extent.extentLogger("More", "Navigated to More Page");
			} else {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("More", "Not navigated to More Page");// update
			}
		}
		Back(1);

		extent.HeaderChildNode("HLS_161 :Verify that Play and Share CTA");
		trayTitleAndContentValidationWithApiDataZeeoriginals(tabName, "webseries");

		extent.HeaderChildNode("HLS_162 :Verify the right side bottom arrow ");
		navigateToAnyScreenOnWeb(tabName);
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			JSClick(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}
		waitTime(5000);

		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("HLS_163 : Verify the Premium icons are displayed ");
			scrollToElement(PWAMusicPage.objPremiumTag);
			if (checkElementDisplayed(PWAMusicPage.objPremiumTag, "Premium Tag")) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is displayed");
			} else {
				logger.error("Premium tag is not displayed");
				extent.extentLoggerFail("Premium Tag", "Premium Tag is not displayed");
			}
		}

		extent.HeaderChildNode("HLS_164 : Verify the Premium user is able to watch all the zee originals shows");
		if (userType.equalsIgnoreCase("Subscribeduser")) {
			navigateToAnyScreenOnWeb(tabName);
			swipeTillTrayAndClickFirstAsset(userType, 15, "ZEE5 Kannada Originals", "ZEE5 Kannada Originals tray",
					tabName);
			waitTime(5000);
			checkElementDisplayed(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
			click(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("user is able to watch the zee originals shows");
				extent.extentLogger("zee originals shows", "user is able to watch the zee originals shows");
			} else {
				logger.info("user is not able to watch the zee originals shows");
				extent.extentLoggerFail("zee originals shows", "user is not able to watch the zee originals shows");// update
			}
		}

		extent.HeaderChildNode("HLS_166 : Verify user is able to watch the First Episode of the originals shows");
		navigateToAnyScreenOnWeb(tabName);
		swipeTillTrayAndClickFirstAsset(userType, 15, "Best of ZEE5 Originals in Kannada",
				"Best of ZEE5 Originals in Kannada tray", tabName);
		waitTime(3500);
		JSClick(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
		waitTime(3500);
		checkElementDisplayed(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
		click(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
		waitTime(8000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("user is able to watch the First Episode");
			extent.extentLogger("zee originals shows", "user is able to watch the First Episode");
		} else {
			logger.info("user is not able to watch the First Episode");
			extent.extentLoggerFail("zee originals shows", " user is not  able to watch the First Episode");// update
		}

		extent.HeaderChildNode(
				"HLS_167 : Verify user can Navigate to the Original shows Details Screen post click on any Show Thumbnail Card");
		navigateToAnyScreenOnWeb(tabName);
		JSClick(PWAHamburgerMenuPage.objFirstcontentCard, "First Card");
		waitTime(3000);
		checkElementDisplayed(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
		click(PWAHamburgerMenuPage.objFirstAssetImageFirstRail, "1 st card");
		waitTime(5000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("user is able to watch the zee originals shows");
			extent.extentLogger("zee originals shows", "user is navigated to the zee5originals shows");
		} else {
			logger.info("user is not navigated to the zee originals shows");
			extent.extentLoggerFail("zee originals shows", "user is not navigated to the zee 5riginals shows");// update
		}

		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"HLS_169 : Verify the Buy Plan CTA is displayed on the  zee5 originals detail screen");
			String keyword = "Rangbaaz";
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWAHomePage.objSearchField, keyword + "\n", "Search");
			JSClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
			verifyElementPresent(PWAShowsPage.objGetPremiumCTAInShowDetails, "Buy Plan CTA in originals details");
			verifyElementPresent(PWAShowsPage.objShowdeatilPlayIcon, "Play icon in originals details");
			Back(1);
		}
	}

	public void defects(String userType, String tabName) throws Exception {
		PWA2OFFAirShowsValidation(userType);
		PWA2EduauraaPageValidation(userType);
		PWA2KidsPageValidation(userType);
		// PWA2ZeeplexValidation(userType);
		PWA2NewsPageAndZeeplexValidation(userType);
		PWA2SubscriptionFlowValidation(userType);
		PWA2MetaDataNavigationValidation(userType);
		PWA2SubscriptionAndFooterValidation(userType);
	}

	public void Hindilanguageselection() throws Exception {
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objHindiWEB, " Hindi option");
		String a = getText(PWAHomePage.objHindiWEB);
		extent.extentLogger("", "selected display language : " + a);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
	}

	public void Kannadalanguageselection() throws Exception {
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objKannadaWEB, "Kannada option");
		String a = getText(PWAHomePage.objKannadaWEB);
		extent.extentLogger("", "selected display language : " + a);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
		waitTime(3000);
	}

	public void EnglishLanguageselection() throws Exception

	{
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);

		verifyElementPresentAndClick(PWAHomePage.objEnglishWEB, "English option");

		String b = getText(PWAHomePage.objEnglishWEB);
		extent.extentLogger("", "selected display language : " + b);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
	}

	@SuppressWarnings("unused")
	public void upnextrail(String userType) throws Exception {
		String totalDuration = "", currentDuration = "", currentUrl = "", contentURL = "", midRollUrl = "",
				postRollUrl = "";
		contentURL = getWebDriver().getCurrentUrl();
		String[] abc = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		extent.extentLogger("", "Content ID fetched from URL: " + contentID);
		logger.info("Content ID fetched from URL: " + contentID);
		Response respContent = null;
		for (int i = 0; i < 10; i++) {
			respContent = ResponseInstance.getContentDetails(contentID, "content");
			// System.out.println(resp.getBody().asString());
			if (!respContent.getBody().asString().contains("\"error_code\":401")) {
				waitTime(1000);
				break;
			} else
				waitTime(1000);
		}
		// System.out.println(respContent.getBody().asString());
		mandatoryRegistrationPopUp(userType);
		String durationAPI = "";
		try {
			durationAPI = respContent.jsonPath().get("duration").toString().trim();
		} catch (Exception e) {
		}
		durationAPI = "1208";
		extent.extentLogger("", "Total Duration in seconds from API: " + durationAPI);
		logger.info("Total Duration in seconds from API: " + durationAPI);
		int durationfullInt = Integer.parseInt(durationAPI);
		durationfullInt = durationfullInt - 5;
		String durationfull = String.valueOf(durationfullInt);
		postRollUrl = contentURL + "?t=" + durationfull;
		getWebDriver().get(postRollUrl);
		mandatoryRegistrationPopUp(userType);
		currentUrl = getWebDriver().getCurrentUrl();
		extent.extentLogger("", "Current URL: " + currentUrl);
		String upnextTrayCardTitle = "";
		for (int i = 0; i < 50; i++) {
			try {
				upnextTrayCardTitle = getElementPropertyToString("innerText",
						PWAPlayerPage.objPlayerUpnextTrayCardTitle, "");
				logger.info("Up Next Rail on player is displayed");
				extent.extentLogger("", "Up Next Rail on player is displayed");
				logger.info("First Card Title fetched from Up Next Rail : " + upnextTrayCardTitle);
				extent.extentLogger("", "First Card Title fetched from Up Next Rail : " + upnextTrayCardTitle);
				upnextTrayCardTitle = upnextTrayCardTitle.replace("'", "");
				break;
			} catch (Exception e) {
			}
		}
		mandatoryRegistrationPopUp(userType);
		// Verify the Upnext content is auto playing
		getResponseUpNextRail.getResponse1();
		String episodeName = getText(PWAPlayerPage.objContentName);
		String APIData = getResponseUpNextRail.getMediaContentName();
		logger.info("Up Next First Card Title returned by API : " + APIData);
		extent.extentLogger("", "Up Next First Card Title returned by API : " + APIData);
		APIData = APIData.replace("'", "");
		if (APIData.contains(upnextTrayCardTitle)) {
			softAssert.assertEquals(APIData, upnextTrayCardTitle);
			extent.extentLoggerPass("Upnext Rail", "Card displayed in Upnext rail matches with API");
			logger.info("Card displayed in Upnext rail matches with API");
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				waitForPlayerAdToComplete("Video");
				mandatoryRegistrationPopUp(userType);
				// waitForPlayerAdToComplete("Video");
			} else
				waitTime(10000);
			try {
				String contentPlayed = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
						"Content Title").toString();
				extent.extentLogger("Upnext Rail", "Up Next Content played in UI :" + contentPlayed);
				logger.info("Up Next Content played in UI :" + contentPlayed);
				contentPlayed = contentPlayed.replace("'", "");
				if (APIData.contains(contentPlayed)) {
					extent.extentLoggerPass("Upnext Rail", "Upnext content played matches with API");
					logger.info("Upnext content played matches with API");
				} else {
					extent.extentLoggerFail("", "Upnext content played does not match with API");
					logger.error("Upnext content played does not match with API");
				}
			} catch (Exception e) {
			}

		} else {
			softAssert.assertNotEquals(APIData, upnextTrayCardTitle);
			extent.extentLoggerFail("Verify UpNext Rail", "Card displayed in Upnext rail does not match with API");
			logger.error("Card displayed in Upnext rail does not match with API");
		}
		mandatoryRegistrationPopUp(userType);
	}

	public void zeeVerifyGetPremiumPopup() throws Exception {
		HeaderChildNode("Verify Subscription Page");

		waitTime(2000);
		// checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Get
		// Premium Popup Title");
		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objDefaultSelectedPack, "Default Selected Package");
		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objPackAmount1, "499 Plan in Popup");
		waitTime(2000);
		verifyElementPresentAndClick(PWASubscriptionPages.objPopupProceedBtn, "continue Button");
	}

	public void pwaverifychannelheadertext(String userType) throws Exception {
		extent.HeaderChildNode("Channels Details page Header <H1> tag text validation (PWA2-7391)");
		navigateToAnyScreenOnWeb("Channels");
		waitTime(4000);
		// scrollToElement(PWAHamburgerMenuPage.objchannelname("Zee TV"));
		// waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objchannelname("Zee TV"), "Channel name");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objchanneltitle("List of Zee TV Serials"), "Channel title");
		String channeltitle = getText(PWAHamburgerMenuPage.objchanneltitle("List of Zee TV Serials"));
		logger.info("The channel title : " + channeltitle);
		extent.extentLogger("", "The channel title : " + channeltitle);
		if (channeltitle.equals("List of Zee TV Serials")) {
			logger.info("H1 tag should be displayed as \"List of Zee TV Serials\". , Expected behaviour");
			extent.extentLogger(" ", "H1 tag should be displayed as \"List of Zee TV Serials\". , Expected behaviour");
		} else {
			logger.error(
					"Channels Details page Header displayed as \"List of Zee TV serials\" instead of \"List of Zee TV Serials\" ");
			extent.extentLoggerFail(" ",
					"Channels Details page Header displayed as \"List of Zee TV serials\" instead of \"List of Zee TV Serials\"");
		}
	}

	public void pwaverifyprocedtopayforvijayabank(String userType) throws Exception {
		if (userType.equals("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"\"vijaya\" Net banking, screen navigates to PayU page instead of Net-Banking page (PWA2-7458)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribed button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinueButton, "Continue button");
			checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
			checkElementDisplayed(PWASubscriptionPages.objAccountInfoDetails,
					"Account Info Details in Payments Section");
			// checkElementDisplayed(PWAHamburgerMenuPage.objTotalPayable,"Total amount");
			String a = getText(PWAHamburgerMenuPage.objTotalPayable);
			System.out.println(a);
			waitTime(5000);
			waitTime(5000);
			WebElement iframeElement = null;
			if (getPlatform().equalsIgnoreCase("Android")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			} else if (getPlatform().equalsIgnoreCase("Web")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking, "Net banking");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("Vijaya Bank"), "Payment option");
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objproceedtopay, "Procced to pay");
			click(PWAHamburgerMenuPage.objproceedtopay, "Procced to pay");
			waitTime(3000);

			if (checkElementDisplayed(PWAHamburgerMenuPage.objpayupage, "Pay U page")) {
				logger.info(
						"\"Vijaya Bank\" Net banking navigates to PayU page instead of respective net-Banking page.");
				extent.extentLoggerFail("",
						"\"Vijaya Bank\" Net banking navigates to PayU page instead of respective net-Banking page.");
			} else {
				logger.info(
						"User should be navigated to the \"Vijaya Bank\" Net banking page or \"vijaya bank\" option should be removed from net-banking section payments page.,expected behaviour");
				extent.extentLoggerPass("",
						"User should be navigated to the \"Vijaya Bank\" Net banking page or \"vijaya bank\" option should be removed from net-banking section payments page.,expected behaviour");
			}
			Back(1);
			verifyElementPresent(PWAHomePage.objZeeLogo, "Zee logo");
			click(PWAHomePage.objZeeLogo, "Zee logo");
		}
	}

	public void pwaverifyzeezestHDchanneldetailpage(String userType) throws Exception {
		extent.HeaderChildNode("when user click on \"Zee Zest HD\" from Channel landing page (PWA2-7422)");
		navigateToAnyScreenOnWeb("Channels");
		// scrollToElement(PWAHamburgerMenuPage.objchannelname("Zee Zest HD"));
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objchannelname("Zee Zest HD"), "Channel name");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objchanneltitle("List of Zee Zest HD Serials"), "Channel title");
		if (verifyElementPresent(PWAHamburgerMenuPage.objchanneltitle("List of Zee Zest HD Serials"),
				"Channel title")) {
			logger.info(
					"\"List of Zee Zest HD Serials \" channel details page should be displayed properly, expected behaviour");
			extent.extentLoggerPass("",
					"\"List of Zee Zest HD Serials \" channel details page should be displayed properly, expected behaviour");
		} else {
			logger.info(
					"\"Oops! No information Available\" error page displayed when user click on  \"Zee Zest HD\" from Channel landing page");
			extent.extentLoggerPass("",
					"\"Oops! No information Available\" error page displayed when user click on  \"Zee Zest HD\" from Channel landing page");
		}
	}

	public void pwaverifycontentfrommywatchlist(String userType, String tabName) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("content playing from \"my watchlist\" validation (PWA2-7421)");
			click(PWAHomePage.objZeelogo1, "zee logo");
			navigateToAnyScreenOnWeb("Premium");
			// verifyElementPresent(PWAHamburgerMenuPage.objClubcontentcard, "Club content
			// card");
			verifyElementPresent(PWAHamburgerMenuPage.objPremiumcontentcard, "Premium content card");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objPremiumcontentcard, "Premium content card");

			/*
			 * //if (checkElementDisplayed(PWASearchPage.objSubscribepopup,
			 * "Subscribepopup")) { click(PWASearchPage.objSubscribepopupCLoseButton,
			 * "close button"); }
			 */

			if (checkElementDisplayed(PWAHamburgerMenuPage.objPlayBtn, "Play Icon")) {
				JSClick(PWAHamburgerMenuPage.objPlayBtn, "Play Icon");
			}

			partialScroll();
			if (checkElementDisplayed(PWAPlayerPage.watchListBtn, "Watchlist")) {
				logger.info("Watchlist button is displayed in movie consumption page");
				extent.extentLogger("Watchlist", "Watchlist button is displayed in movie consumption page");
				JSClick(PWAPlayerPage.watchListBtn, "Watchlist");
				checkElementDisplayed(PWAPlayerPage.watchListLoginPopup,
						"When guest user tries to click on watchlist login popup");
				JSClick(PWAPlayerPage.watchListLoginButton, "Login button");
				waitTime(2000);

				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
				type(PWALoginPage.objEmailField, NonSubUsername, "Email Field");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, NonSubPassword, "Password field");

				waitTime(5000);
				JSClick(PWALoginPage.objWebLoginButton, "Login Button");
				waitTime(3000);
				/*
				 * if (checkElementDisplayed(PWASearchPage.objSubscribepopup, "Subscribepopup"))
				 * { click(PWASearchPage.objSubscribepopupCLoseButton, "close button"); }
				 */
				verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "My Profile");
				JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "My Profile");
				waitTime(5000);

				JSClick(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
				/*
				 * if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup,
				 * "WouldYouLikeClosePopup") == true) {
				 * click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup"); }
				 */
				waitTime(3000);
				JSClick(PWAAddToWatchListPage.objEpisodeTab, "Episode tab");
				verifyElementPresent(PWAHamburgerMenuPage.objcontentcardinmywatchlist, "content card in my watchlist");
				JSClick(PWAHamburgerMenuPage.objcontentcardinmywatchlist, "content card in my watchlist");
				waitTime(3000);
				if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
					logger.info("Screen should redirect to particular contents consumption screen, expected behaviour");
					extent.extentLogger("Consumption Page",
							"Screen should redirect to particular contents consumption screen, expected behaviour");
				} else {
					logger.info(
							"Screen is redirected to page not found and\"404! not found\"info message is displayed on the screen.");
					extent.extentLoggerFail("Consumption Page",
							"Screen is redirected to page not found and\"404! not found\"info message is displayed on the screen.");
				}
			}
		}
	}

	public void pwamandatoryregpopupforzeeoriginalcontent(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"Mandatory Registration popup displayed for the Specific Non-Elligible Zee5Original Content \"Dev DD2\" (PWA2-7419)");
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, "Dev DD2", "Search Field");
			waitTime(3000);
			verifyElementPresent(PWASearchPage.objFirstSearch, "searched content");
			JSClick(PWASearchPage.objFirstSearch, "searched content");
			waitTime(5000);
			mandatoryRegistrationPopUp(userType);
			verifyElementPresent(PWAHamburgerMenuPage.objPlayBtn, "play button ");
			JSClick(PWAHamburgerMenuPage.objPlayBtn, "play button ");
			waitTime(3000);
			if (checkElementDisplayed(PWAAddToWatchListPage.objCompleteProfilePopUp,
					"Complete profile Popup") == true) {

				logger.info(
						"Mandatory Registration popup displayed for the Specific Non-Eligible Zee5Original Content \"Dev DD2\".");
				extent.extentLoggerFail("Consumption Page",
						"Mandatory Registration popup displayed for the Specific Non-Eligible Zee5Original Content \"Dev DD2\".");
			} else {
				logger.info(
						"Mandatory Registration popup should not be displayed for Non eligible Zee5Originals show Episode, expected behaviour.");
				extent.extentLoggerPass("Consumption Page",
						"Mandatory Registration popup should not be displayed for Non eligible Zee5Originals show Episode , expected behaviour");
			}
		}
	}

	public void pwaverifyallchannelsscreen(String userType) throws Exception {
		extent.HeaderChildNode("Screen redirected to 'live-news ' landing page validation  (PWA2-7386)");
		navigateToAnyScreenOnWeb("News");
		// scrollToBottomOfPageWEB();
		ScrollToTheElement(PWAHomePage.objtrayname("All Channels"));
		waitTime(3000);
		verifyElementPresent(PWAPremiumPage.objViewAllBtn1("All Channels"), "View All Button");
		JSClick(PWAPremiumPage.objViewAllBtn1("All Channels"), "View All Button");
		waitTime(5000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objchanneltitle("List of TV Channels"), "Channel title")) {
			logger.info("Screen should redirect to 'live-news 'collection page , expected behaviour");
			extent.extentLoggerPass("View All",
					"Screen should redirect to 'live-news 'collection page, expected behaviour");
		} else {
			logger.error("Screen is redirected to Tv-channel landing page. ");
			extent.extentLoggerFail("", "Screen is redirected to Tv-channel landing page.");
		}
	}

	public void pwaverifythecontentplaybackinvedioscarousel(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"\" Tazaa-Shakeela\" from the carousel on  Videos Landing page  validation  (PWA2-7385)");

			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, "Taaza - Shakeela ", "Search Field");
			waitTime(2500);
			JSClick(PWASearchPage.objFirstSearch, "searched content");

			click(PWAPlayerPage.objPlayerSettings, "Setting icon");
			waitTime(2500);
			// Click on Quality

			if (checkElementDisplayed(PWAPlayerPage.objPlayerQualityButton, "Quality option")) {
				logger.info("content should able to play , expected behaviour");
				extent.extentLogger("Consumption Page", "content should able to play, expected behaviour");
			} else {
				logger.info(" Infinite Loader is observed on the consumption page ");
				extent.extentLoggerFail("Consumption Page", " Infinite Loader is observed on the consumption page ");
			}
		}
	}

	public void pwaverifyzeeoriginalscontentshouldnotdisplayintvshows(String userType) throws Exception {
		extent.HeaderChildNode("Zee-original contents is displayed in Tv-shows collection page.(PWA2-7383)");
		navigateToAnyScreenOnWeb("Channels");
		scrollToElement(PWAHamburgerMenuPage.objchannelname("Zee TV"));
		verifyElementPresent(PWAHamburgerMenuPage.objchannelname("Zee TV"), "Channel name");
		JSClick(PWAHamburgerMenuPage.objchannelname("Zee TV"), "Zee TV");
		waitTime(3000);

		if (checkElementDisplayed(PWAHamburgerMenuPage.objpremiumcard, "Premium card")) {
			logger.info("Zee-original contents is displayed in between off-air shows.");
			extent.extentLoggerFail("Consumption Page", "Zee-original contents is displayed in between off-air shows.");
		} else {
			logger.info(
					"  Zee original contents should not be displayed in Tv-shows collection page , expected behaviour");
			extent.extentLoggerPass("Consumption Page",
					" Zee original contents should not be displayed in Tv-shows collection page , expected behaviour ");
		}

	}

	public void pwaverifyzeeTVshowstextvalidation(String userType) throws Exception {
		extent.HeaderChildNode("\"Zee Tv-shows \"text validation based on the display language (PWA2-7372)");
		navigateToAnyScreenOnWeb("Channels");
		scrollToElement(PWAHamburgerMenuPage.objchannelname("Zee TV"));
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objchannelname("Zee TV"), "Channel name");
		waitTime(3000);
		Kannadalanguageselection();
		verifyElementPresent(PWAHamburgerMenuPage.objchanneltitle("Zee TV Shows"), "Channel title");
		String channeltitle = getText(PWAHamburgerMenuPage.objchanneltitle("Zee TV Shows"));
		if (channeltitle.equals("Zee TV Shows")) {
			logger.info("Header text \"zee tv shows\" is not translated based on the selected display language."
					+ channeltitle);
			extent.extentLoggerFail("Consumption Page",
					"Header text \"zee tv shows\" is not translated based on the selected display language."
							+ channeltitle);
		} else {
			logger.info(
					"Header text \"zee tv shows \"should be translated based on the selected display language. , expected behaviour"
							+ channeltitle);
			extent.extentLoggerPass("Consumption Page",
					" Header text \"zee tv shows \"should be translated based on the selected display language. , expected behaviour "
							+ channeltitle);
		}

		// verifyElementPresent(PWAHamburgerMenuPage.objchanneltitle("Zee TV Shows"),
		// "Channel title");
		String breadcrumb = getText(PWAHamburgerMenuPage.objthreebreadcrumb);
		if (breadcrumb.equals("Zee TV")) {
			logger.info(
					"Header text \"zee tv \" is not translated based on the selected display language." + breadcrumb);
			extent.extentLoggerFail("Consumption Page",
					"Header text \"zee tv shows\" is not translated based on the selected display language."
							+ breadcrumb);
		} else {
			logger.info(
					"Header text \"zee tv  \"should be translated based on the selected display language. , expected behaviour"
							+ breadcrumb);
			extent.extentLoggerPass("Consumption Page",
					" Header text \"zee tv shows \"should be translated based on the selected display language. , expected behaviour "
							+ breadcrumb);
		}

		EnglishLanguageselection();

	}

	public void pwaverifythesubscriptionpage(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"\"Oops no information | Go Home\" message is displayed on the subscription page when the user clicks on \"Subscribe\" CTA in Header for the first time  (PWA2-7369)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribed button");
			waitTime(2000);

			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title")) {
				logger.info(" The subscription page should be displayed properly, expected behaviour");
				extent.extentLoggerPass("Consumption Page",
						"The subscription page should be displayed properly, expected behaviour");
			} else {
				logger.info("\"Oops no information | Go Home\" message is displayed on the subscription page");
				extent.extentLoggerFail("Consumption Page",
						" \"Oops no information | Go Home\" message is displayed on the subscription page");
			}
		}
	}

	public void pwacontentspecificvalidation(String userType) throws Exception {
		extent.HeaderChildNode("\"Family Food Fight Australian Season 2\" content validation (PWA2-7365)");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Family Food Fight Australian Season 2 ", "Search Field");
		waitTime(3000);
		JSClick(PWASearchPage.objFirstSearch, "search content");
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info(" User should be navigated to the respective show details screen, expected behaviour");
			extent.extentLoggerPass("Consumption Page",
					"User should be navigated to the respective show details screen , expected behaviour");
		} else {
			logger.info("\"Oops no information | Go Home\" message is displayed on the subscription page");
			extent.extentLoggerFail("Consumption Page",
					" \"Oops no information | Go Home\" message is displayed on the subscription page");
		}
	}

	public void pwaverifyEpisodecolelctionpage(String userType) throws Exception {
		extent.HeaderChildNode(" \"Jash Kotha Tui, Kisher Eto Taara? Season 2\" content validation (PWA2-6717)");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Jash Kotha Tui, Kisher Eto Taara? Season 2 ", "Search Field");
		waitTime(3000);
		JSClick(PWASearchPage.objFirstSearch, "search content");
		waitTime(3000);
		scrollToElement(PWAPremiumPage.objViewAllBtn1("Season 1"));
		waitTime(3000);
		JSClick(PWAPremiumPage.objViewAllBtn1("Season 1"), " Season 1 See All Button");

		if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
			logger.info("User should be navigated to the Season Episode Colelction Page,  expected behaviour");
			extent.extentLoggerPass("Consumption Page",
					" User should be navigated to the Season Episode Colelction Page, expected behaviour");
		} else {
			logger.info(
					"404 Not Found screen displayed when user click on \"View All\" CTA on Season 1 Rail on the Specific Show \"Jash Kotha Tui, Kisher Eto Taara? Season 2\"");
			extent.extentLoggerFail("Consumption Page",
					" 404 Not Found screen displayed when user click on \"View All\" CTA on Season 1 Rail on the Specific Show \"Jash Kotha Tui, Kisher Eto Taara? Season 2\"");
		}
	}

	public void pwaverifyHowitworksdisplayed(String userType) throws Exception {
		extent.HeaderChildNode("How it works verification (PWA2-6777)");
		if (userType.equalsIgnoreCase("Guest")) {
			navigateToAnyScreenOnWeb("ZEEPLEX");
		}
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab, "Zeeplex tab");
		}
		verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent, "Zee plex content");
		ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
		click(PWAHamburgerMenuPage.objTrailer, "Trailer");
		waitTime(5000);
		partialScroll();
		partialScroll();
		partialScroll();
		waitTime(3000);
		if (verifyElementPresent(PWAHamburgerMenuPage.objhowitworks, "How it works ?")) {
			logger.info(
					"\"How it works?\" CTA should be displayed below the \"ZEEPLEX brings Blockbuster Movies in the comfort of your home\"Text in zee plex landing page, expected behaviour");
			extent.extentLoggerPass(" ",
					"\"How it works?\" CTA should be displayed below the \"ZEEPLEX brings Blockbuster Movies in the comfort of your home\"Text in zee plex landing page, expected behaviour");
		} else {
			logger.info("\"How it works?\" CTA fails to display.");
			extent.extentLoggerFail(" ", " \"How it works?\" CTA fails to display. ");
		}
	}

	public void pwaverifythemetatag(String userType) throws Exception {
		extent.HeaderChildNode("\"Zee TV APAC\" Channel metadata displayed (PWA2-7402)");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, " KumKum Bhagya ", "Search Field");
		waitTime(3000);
		click(PWASearchPage.objfirstdata, "search content");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objmetadataoncard, "content matadata type");
		String metadata = getText(PWAHamburgerMenuPage.objmetadataoncard);
		System.out.println(metadata);
		click(PWAHamburgerMenuPage.objmetadataoncard, "content matadata type");
//		scrollToElement(PWAShowsPage.objFirstContentInTray);
//		verifyElementPresent(PWAShowsPage.objFirstContentInTray, "First content in tray");
//		click(PWAShowsPage.objFirstContentInTray, "First content in tray");
//		waitTime(3000);
//		partialScroll();
//		verifyElementPresent(PWAHamburgerMenuPage.objmetadatainconsumption, "Metadata in consumption ");
//		String a = getText(PWAHamburgerMenuPage.objmetadatainconsumption);
		verifyElementPresent(PWAHamburgerMenuPage.objchanneltitle("List of Zee TV Serials"), "Channel title");
		String channeltitle = getText(PWAHamburgerMenuPage.objchanneltitle("List of Zee TV Serials"));
		logger.info("The channel title : " + channeltitle);
		extent.extentLogger("", "The channel title : " + channeltitle);
		if (channeltitle.equals("List of Zee TV Serials")) {
			logger.info("H1 tag should be displayed as \"List of Zee TV Serials\". , Expected behaviour");
			extent.extentLogger(" ", "H1 tag should be displayed as \"List of Zee TV Serials\". , Expected behaviour");
		} else {
			logger.error(
					"Channels Details page Header displayed as \"List of Zee TV serials\" instead of \"List of Zee TV Serials\" ");
			extent.extentLoggerFail(" ",
					"Channels Details page Header displayed as \"List of Zee TV serials\" instead of \"List of Zee TV Serials\"");
		}
	}

	public void pwazeekannadacontentvalidation(String userType) throws Exception {
		extent.HeaderChildNode("Zee Kannada Channel metadata displayed (PWA2-7382)");
		navigateToAnyScreenOnWeb("Channels");
		waitTime(3000);
		scrollToElement(PWAHamburgerMenuPage.objchannelname("Zee Kannada"));
		verifyElementPresent(PWAHamburgerMenuPage.objchannelname("Zee Kannada"), "Channel name");
		JSClick(PWAHamburgerMenuPage.objchannelname("Zee Kannada"), "Channel name");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objcontentcardthroughtext("Drama Juniors Season 3"),
				"Content card")) {
			scrollToElement(PWAHamburgerMenuPage.objcontentcardthroughtext("Drama Juniors Season 3"));
			click(PWAHamburgerMenuPage.objcontentcardthroughtext("Drama Juniors Season 3"), "Content card");
			verifyElementPresent(PWAHamburgerMenuPage.objmetadataoncard, "content matadata type");
			String metadata = getText(PWAHamburgerMenuPage.objmetadataoncard);

			if (metadata.contentEquals("Zee Telugu")) {
				logger.info(
						"Only Kannada or specific channel related language content should be displayed in respective channel details page., expected behaviour");
				extent.extentLoggerPass(" ",
						" Only Kannada or specific channel related language content should be displayed in respective channel details page., expected behaviour");
			} else {
				logger.info("\"Drama Juniors Season 3\" a tamil show is displayed in \"Zee Kannada\" channel.");
				extent.extentLoggerFail(" ",
						"\"Drama Juniors Season 3\" a tamil show is displayed in \"Zee Kannada\" channel.");
			}

		}
	}

	public void pwaverifytheplaybackinconsumptionpage(String userType) throws Exception {
		extent.HeaderChildNode("\"Kumkum bhagya 19 Feb\" consumption screen validation (PWA2-7382)");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Killer abducts Pragya from the hospital - Kumkum Bhagya ",
				"Search Field");
		waitTime(3000);
		click(PWASearchPage.objfirstdata, "search content");
		waitTime(3000);

		// verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button");
		mandatoryRegistrationPopUp(userType);
		JSClick(PWAPlayerPage.pauseBtn, "Pause button");
		if (verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button")) {
			logger.info("Content should be played without any interruption., expected behaviour");
			extent.extentLoggerPass(" ", "Content should be played without any interruption., expected behaviour");
		} else {
			logger.info("Blank Screen is displayed for Kumkum bhagya 19 Feb episode.");
			extent.extentLoggerFail(" ", "Blank Screen is displayed for Kumkum bhagya 19 Feb episode.");
		}
	}

	public void accountinfopage() throws Exception {
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Section");
		waitTime(3000);
		waitTime(3000);
		waitTime(3000);
		type(PWASubscriptionPages.objEmailIDTextField, "igszee5testing@gmail.com", "Email Id");
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted,
				"Proceed Button in Account Info Page Highlighted");
		waitTime(3000);
		// Password Popup
		verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
		waitTime(3000);
		// verifyElementPresent(PWASubscriptionPages.objProceedBtnDisabled, "Disabled
		// Proceed Button");
		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
		waitTime(3000);
		type(PWASubscriptionPages.objPasswordFieldHidden, "igs@12345", "Password Field");

		waitTime(3000);
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnEnabled, "Enabled Proceed Button");
		waitTime(3000);

	}

	public void pwapaymentpagevalidation(String userType) throws Exception {
		extent.HeaderChildNode("error message is displayed on the Payment page validation (PWA2-7656)");
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue Button");
			waitTime(5000);
			if (userType.equals("Guest")) {
				accountinfopage();
			}
			PWAIframe();
			verifyElementPresent(PWAHamburgerMenuPage.objPaymentoption("UPI"), "Payment option");
			click(PWAHamburgerMenuPage.objPaymentoption("UPI"), "Payment option");
			waitTime(3000);
			checkElementDisplayed(PWAHamburgerMenuPage.objenterupiid, "Enter upi Details");
			click(PWAHamburgerMenuPage.objenterupiid, "Enter upi Details");
			type(PWAHamburgerMenuPage.objenterupiid, "866@upi", "Email Field");
			verifyElementPresent(PWAHamburgerMenuPage.objupiproceedtopay, "verify");
			click(PWAHamburgerMenuPage.objupiproceedtopay, "verify");
			waitTime(10000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objsomethingmess, "Something went wrong message ")) {
				logger.info("\"Something went Wrong. Please Retry the Payment\" message is display");
				extent.extentLoggerFail(" ", "\"Something went Wrong. Please Retry the Payment\" message is display");
			} else {
				logger.info(
						"\"Something went Wrong. Please Retry the Payment\" message should not display, expected behaviour");
				extent.extentLoggerPass(" ",
						"\"Something went Wrong. Please Retry the Payment\" message should not display, expected behaviour");

			}
			// verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
			navigateHome();
			if (userType.equals("Guest")) {
				logout();
			}
		}
	}

	public void pwaDRMmessageforpremiumcontent(String userType) throws Exception {
		extent.HeaderChildNode("DRM message is displayed on the Player (PWA2-7516) and (PWA2-7518)");
		navigateToAnyScreenOnWeb("Movies");
		JSClick(PWAHamburgerMenuPage.objpremiumcard, "Premium card");
		waitTime(50000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objdrmmessageonplayer, "DRM message")) {
			logger.info("DRM message displayed on player screen post playing premium contents");
			extent.extentLoggerFail(" ", "DRM message displayed on player screen post playing premium contents");
		} else {
			logger.info(
					"Premium content should be played properly on the Safari and Chrome browsers, expected behaviour");
			extent.extentLoggerPass(" ",
					"Premium content should be played properly on the Safari and Chrome browsers, expected behaviour");

		}
	}

	public void pwaverifycrownicon(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("Error message is displayed on the Player (PWA2-7816)");
		navigateToAnyScreenOnWeb(tabName);
		Tamillanguageselection();
		if (verifyElementPresent(PWAHamburgerMenuPage.objcrownicon, "Crown icon")) {

			logger.info(
					"Crown symbol should be displayed on Get Premium CTA on carousel when display language is change to Tamil., expected behaviour");
			extent.extentLoggerPass(" ",
					"Crown symbol should be displayed on Get Premium CTA on carousel when display language is change to Tamil., expected behaviour");
		} else {
			logger.info(
					"Crown icon is not displaying on Get Premium CTA on carousel when display language is changed to Tamil.");
			extent.extentLoggerFail(" ",
					"Crown icon is not displaying on Get Premium CTA on carousel when display language is changed to Tamil.");

		}
		EnglishLanguageselection();
	}

	public void pwaverifygetpremiuminlinetext(String userType, String tabName) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode(" Get premium inline text validation (PWA2-7688)");
			navigateToAnyScreenOnWeb("Movies");
			verifyElementPresent(PWAHamburgerMenuPage.objcluborpremiumcontentcard, "Premium card");
			JSClick(PWAHamburgerMenuPage.objcluborpremiumcontentcard, "Premium card");
			waitForElement(PWAPlayerPage.objSubscribeNowLink, 20, "Subscription link");
			String text = getText(PWAHamburgerMenuPage.objsubscriptionlinkmessage);
			System.out.println(text);
			extent.extentLogger("", "Subscription text : " + text);
			if (text.contentEquals("To Watch this Premium Content")) {

				logger.info(" \"To Watch this Premium Content\" text should be displayed., expected behaviour");
				extent.extentLoggerPass(" ",
						" \"To Watch this Premium Content\" text should be displayed,  expected behaviour");
			} else {
				logger.info("\"You Need Premium Membership to watch this video\" text displayed");
				extent.extentLoggerFail(" ", "\"You Need Premium Membership to watch this video\" text displayed");

			}
		}
	}

	public void pwaverifypackdiscountamt(String userType, String tabName) throws Exception {
		if (userType.equals("NonSubscribedUser")) {
			logout();
			extent.HeaderChildNode("Pack discount amount validation in my subscription page (PWA2-7800)");

			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "25off@mailnesia.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			JSClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			verifyElementPresent(PWAHamburgerMenuPage.objpackdiscountamtinmysubscriptionpage, "Pack discount");
			String packdiscountamt = getText(PWAHamburgerMenuPage.objpackdiscountamtinmysubscriptionpage);
			System.out.println(packdiscountamt);
			extent.extentLogger("", "Pack discount text : " + packdiscountamt);
			if (packdiscountamt.contentEquals("749")) {

				logger.info("Plan Price INR749 should be displayed for 25% off annual pack user., expected behaviour");
				extent.extentLoggerPass(" ",
						"Plan Price INR749 should be displayed for 25% off annual pack user. ,  expected behaviour");
			} else {
				logger.info(
						"INR 499 Price displayed on the My subscription and Explore Premium Page for 25% off annual pack user(INR749) ");
				extent.extentLoggerFail(" ",
						"INR 499 Price displayed on the My subscription and Explore Premium Page for 25% off annual pack user(INR749) ");

			}
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
			logout();
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");

			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, Username, "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, Password, "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
		}
	}

	public void pwaverifyOTPscreen(String uaerType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("\"Verify OTP\" CTA in OTP verification screen validation (PWA2-7795)");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueWith499, "Continue Button");
			verifyElementPresentAndClick(PWASubscriptionPages.objEmailIDTextField, "Email ID Text Field");
			waitTime(3000);
			type(PWASubscriptionPages.objEmailIDTextField, "0000000000", "Mobile number");
			verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted,
					"Proceed Button in Account Info Page Highlighted");
			waitTime(60000);
			String verifybtn = getText(PWAHamburgerMenuPage.objverifybtninaccountinfopage);
			System.out.println(verifybtn);
			extent.extentLogger("", "verify text in account info page : " + verifybtn);
			if (verifybtn.contentEquals("Verify")) {
				logger.info("\"Verify\" CTA is displayed instead of \"Verify OTP\" CTA in OTP verification screen.");
				extent.extentLoggerFail(" ",
						"\"Verify\" CTA is displayed instead of \"Verify OTP\" CTA in OTP verification screen.");
			} else {
				logger.info(
						"\"Verify OTP\" CTA should be displayed in \"OTP verification\" screen., expected behaviour ");
				extent.extentLoggerPass(" ",
						"\"Verify OTP\" CTA should be displayed in \\\"OTP verification\\\" screen., expected behaviour ");
			}
			navigateHome();
		}
	}

	public void pwaverifypaynowoptioninpaymentpage(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"\"Proceed to pay \"CTA is displayed instead of \"Pay now\"  CTA validation (PWA2-7793)");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueWith499, "Continue Button");
			waitTime(5000);

			PWAIframe();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking, "Net banking");
			waitTime(6000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("Airtel Payments Bank"),
					"Payment option");
			verifyElementPresent(PWAHamburgerMenuPage.objproceedtopay, "Procced to pay");
			String proceedtopay = getText(PWAHamburgerMenuPage.objproceedtopay);
			System.out.println(proceedtopay);
			extent.extentLogger("", " proceed to pay text : " + proceedtopay);
			if (proceedtopay.contentEquals("Proceed to pay")) {
				logger.info("\"Proceed to pay \"CTA is displayed instead of \"Pay now\" CTA .");
				extent.extentLoggerFail(" ", "\"Proceed to pay \"CTA is displayed instead of \"Pay now\" CTA . ");
			} else {
				logger.info("\"Pay now\" CTA should be displayed. , expected behaviour ");
				extent.extentLoggerPass(" ", "\"Pay now\" CTA should be displayed., expected behaviour ");
			}
		}
	}

	public void pwaverifyloginthroughsubscriptionpage(String userType) throws Exception {

		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"Subscription page validation when user login through the subscription page(PWA2-7687)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objloginbtninsubscriptionpage, "Login button");
			waitTime(5000);
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");

			// verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, Username, "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, Password, "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title")) {
				logger.info("The user should be navigated back to the subscription page., expected behaviour");
				extent.extentLoggerPass(" ",
						"The user should be navigated back to the subscription page.,  expected behaviour");
			} else {
				logger.info("\"Error\" page is displayed when the user tries to login ");
				extent.extentLoggerFail(" ", "\"Error\" page is displayed when the user tries to login");

			}
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
			Back(1);
			logout();
		}
	}

	public void pwaverifygetpremiumctabelowplayer(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			navigateHome();
			extent.HeaderChildNode(" Get premium CTA validation below the player for premium content (PWA2-7694)");
			navigateToAnyScreenOnWeb("Movies");
			verifyElementPresent(PWAHamburgerMenuPage.objcluborpremiumcontentcard, "Premium card");
			JSClick(PWAHamburgerMenuPage.objcluborpremiumcontentcard, "Premium card");
			waitForElement(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, 30, "Get Premium Link below the Player");
			String getpremiumtext = getText(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen);
			System.out.println(getpremiumtext);
			extent.extentLogger("", "Subscription text : " + getpremiumtext);
			if (getpremiumtext.equalsIgnoreCase("Buy Plan")) {

				logger.info(" \"Buy Plan\" CTA should be displayed on below the player., expected behaviour");
				extent.extentLoggerPass(" ",
						" \"Buy Plan\" CTA should be displayed on below the player. ,  expected behaviour");
			} else {
				logger.info(
						"\"Subscribe\" CTA displayed instead of \"Buy Plan\" on the Below player strip for Premium Content playback.");
				extent.extentLoggerFail(" ",
						"\"Subscribe\" CTA displayed instead of \"Buy Plan\" on the Below player strip for Premium Content playback.");
			}
		}
	}

	public void pwaverifyexplorepremiumctainsubscriptionpage(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					" \"Explore Premium\" CTA validation on the Subscription Page. (PWA2-7704) (PWA2-7710)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objloginbtninsubscriptionpage, "Login button");
			waitTime(5000);
			// verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "shivarajmc26@gmail.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objExplorePremium, "Explore premium")) {
				logger.info(
						" \"Explore Premium\" CTA should be displayed on the Subscription Page., expected behaviour");
				extent.extentLoggerPass(" ",
						"\"Explore Premium\" CTA should be displayed on the Subscription Page. ,  expected behaviour");
			} else {
				logger.info("Pack Upgrade page is displayed.");
				extent.extentLoggerFail(" ", "Pack Upgrade page is displayed.");
			}
			navigateHome();
			logout();
		}
	}

	public void pwaToWatchthisPremiumContenttextverify(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode(
					" Before TV Episode , Zee5Originals Premium 2nd Episode entitlement - Player Inline Text sentence validation (PWA2-7781)");
			navigateToAnyScreenOnWeb("TV Shows");
			scrollToElement(PWAHomePage.objFirstContentCardOfTray("Before"));
			if (checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"),
					"First Content Card Of Before TV Tray")) {
				click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");
				waitForElement(PWASubscriptionPages.objsubscribebtnonplayer, 40, "Buy Plan text on player");
				String text = getText(PWAHamburgerMenuPage.objsubscriptionlinkmessage);
				System.out.println(text);
				extent.extentLogger("", "Subscription text : " + text);
				if (text.contentEquals("To Watch this Premium Content")) {

					logger.info(" \"To Watch this Premium Content\" text should be displayed., expected behaviour");
					extent.extentLoggerPass(" ",
							" \"To Watch this Premium Content\" text should be displayed,  expected behaviour");
				} else {
					logger.info("\"You Need Premium Membership to watch this video\" text displayed");
					extent.extentLoggerFail(" ", "\"You Need Premium Membership to watch this video\" text displayed");

				}
			}
//			navigateToAnyScreenOnWeb("Web Series");
//			swipeTillTrayAndClickFirstAsset(userType, 5 , "Top ZEE5 Web Series", "Top ZEE5 Web Series", "Web Series");
//			waitTime(5000);
//			JSClick(PWAShowsPage.objSecondAssetImageFirstRail, "Second card under Tray");

		}
	}

	public void pwaverifylanguagesettingspopup(String userType) throws Exception {
		extent.HeaderChildNode(" Language setting pop-up validation in Consumption screen (PWA2-7778)");
		navigateHome();
		navigateToAnyScreenOnWeb("Movies");
		waitTime(5000);
		JSClick(PWAHamburgerMenuPage.objFirstcontentCard, "First Card");
		waitTime(5000);
		click(PWAHamburgerMenuPage.objLanguageBtnWeb, "Language Button");
		waitTime(2000);
		if (verifyElementPresent(PWAHamburgerMenuPage.objContentLanguageBtn, "Content Languages")) {
			logger.info("Language Setting pop-up should be displayed, expected behaviour");
			extent.extentLoggerPass(" ", " Language Setting pop-up should be displayed ,  expected behaviour");
		} else {
			logger.info("Language Setting pop-up is not displayed in Consumption screen.");
			extent.extentLoggerFail(" ", "Language Setting pop-up is not displayed in Consumption screen.");

		}
		click(PWAHamburgerMenuPage.objLanguageBtnWeb, "Language Button");
	}

	public void pwaHaveacodeinputfieldvalidation(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode(
					"\"Have a code?\" input field fails to display again when user clicks on \"Change\" CTA (PWA2-7782) (PWA2-7698");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "'Have A Code?' field");
			waitTime(3000);
			if (platform.equalsIgnoreCase("Android")) {
				type(PWASubscriptionPages.objHaveACode, "NRTDC1" + "\n", "'Have A Code?' field");
			} else if (platform.equalsIgnoreCase("Web")) {
				type(PWASubscriptionPages.objHaveACodetoenter, "NRTDC1", "'Have A Code?' field");
			}

			// driver.findElement(PWASubscriptionPages.objHaveACode).sendKeys("ZEE5PTM20");
			// hideKeyboard();
			waitTime(5000);
			click(PWASubscriptionPages.objApplyBtn, "Apply Button");

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objchangebtn, "change Button");
			if (verifyElementPresent(PWASubscriptionPages.objHaveACode, "'Have A Code?' field")) {
				logger.info("It responds to the \"Have a code?\" link again.");
				extent.extentLoggerFail(" ", "It responds to the \"Have a code?\" link again.");
			} else {
				logger.info("It should open a promo code field again with a clear cell., expected behaviour");
				extent.extentLoggerPass(" ",
						" It should open a promo code field again with a clear cell. ,  expected behaviour");

			}
		}
		navigateHome();
	}

	public void pwavalidatediscountprice(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Discount Calculted price on the payment gateway validation (PWA2-7692)");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "sprint49Premium@mailnesia.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "ABCD1234", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);

			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			JSClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			checkElementDisplayed(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			waitTime(5000);
			click(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			// verifyElementPresent(PWASubscriptionPages.objContinueBtn, "Continue button");
			String text = getText(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage);
			System.out.println(text);
			extent.extentLogger("", " continue text : " + text);
			if (text.contentEquals("Continue ")) {
				logger.info(
						"\"Continue with INR499 per year\", or \"Continue with INR99 Per month\" CTA should be displayed for Expired user, expected behaviour");
				extent.extentLoggerPass(" ",
						"\"Continue with INR499 per year\", or \"Continue with INR99 Per month\" CTA should be displayed for Expired user, expected behaviour");
			} else {
				logger.info(
						"\"Upgrade to Annual/Monthly Plan\" CTA displayed on the Subscription page for Expired users.");
				extent.extentLoggerFail(" ",
						"\"Upgrade to Annual/Monthly Plan\" CTA displayed on the Subscription page for Expired users.");
			}

			if (verifyElementPresent(PWASubscriptionPages.objHaveACode, "'Have A Code?' field")) {
				logger.info("\"Have a Code?\" CTA text should be displayed for the Expired users, expected behaviour");
				extent.extentLoggerPass(" ",
						"\"Have a Code?\" CTA text should be displayed for the Expired users, expected behaviour");
			} else {
				logger.info("\"Have a Code?\" CTA text fails to displayed for the Expired users.");
				extent.extentLoggerFail(" ", "\"Have a Code?\" CTA text fails to displayed for the Expired users.");
			}
		}
		// verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		navigateHome();
		if (userType.equals("Guest")) {
			logout();
		}
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(" Discount Calculted price on the payment gateway validation (PWA2-7754)");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "sam@s.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);

			verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			JSClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			checkElementDisplayed(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue button");
			verifyElementPresent(PWAHamburgerMenuPage.objamtinpaymentpage, "Amount");
			String text = getText(PWAHamburgerMenuPage.objamtinpaymentpage);
			System.out.println(text + ".00");
			String text1 = "Rs" + text + ".00";
			// System.out.println(text);
			extent.extentLogger("", "Amount in payment page : " + text1);

			waitTime(5000);
			PWAIframe();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking, "Net banking");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("Airtel Payments Bank"),
					"Payment option");
			waitTime(3000);
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objproceedtopayindex(1), "Procced to pay");
			click(PWAHamburgerMenuPage.objproceedtopayindex(1), "Procced to pay");
			waitTime(3000);
			waitForElement(PWAHamburgerMenuPage.objtotalamount2, 20, "Total amount");
			String totalamt2 = getText(PWAHamburgerMenuPage.objtotalamount2);
			System.out.println(totalamt2);
			extent.extentLogger("", "pack Amount in payment Process page : " + totalamt2);
			waitTime(5000);
			Back(1);
			waitForElement(PWASubscriptionPages.objZEE5Logo, 20, "Zee5 Logo");
			if (text1 != (totalamt2)) {
				logger.info("correct Amount is displayed : " + text1);
				extent.extentLogger("", "correct Amount is displayed : " + text1);
			} else {
				logger.info("Incorrect Differential Amount is displayed : " + text1);
				extent.extentLoggerFail("", "Incorrect Differential Amount is displayed :" + text1);
			}
		}
		Back(1);
		// verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		if (userType.equals("Guest")) {
			navigateHome();

			logout();
		}
	}

	public void pwaverifystepnoinAcconuInfopage(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					" stepper 2 and 3 should not display in account info page for password screen(PWA2-7702)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue Button");
			waitTime(5000);
			verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Section");
			// zeePWASelectedPackDisplayValidation();
			verifyElementPresentAndClick(PWASubscriptionPages.objEmailIDTextField, "Email ID Text Field");
			waitTime(3000);
			type(PWASubscriptionPages.objEmailIDTextField, "igszee5testing@gmail.com", "Email Id");
			hideKeyboard();
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted,
					"Proceed Button in Account Info Page Highlighted");
			waitTime(3000);
			// Password Popup
			verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
			waitTime(3000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objstep2and3, "Step 2 and 3")) {
				logger.info("Stepper \"step 2 of 3\" displayed on the Enter Password popup on the account info page.");
				extent.extentLoggerFail(" ",
						"Stepper \"step 2 of 3\" displayed on the Enter Password popup on the account info page.");
			} else {
				logger.info(
						"Stepper \"step 2 of 3\" should not be displayed on the Enter Password popup on the account info page, expected behaviour");
				extent.extentLoggerPass(" ",
						"Stepper \"step 2 of 3\" should not be displayed on the Enter Password popup on the account info page,expected behaviour");

			}

		}
		// verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		navigateHome();
	}

	public void pwaverifyHaveacode(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Have a Code is visible for Upgrade Journey validation (PWA2-7965)");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "sprint49Premium@mailnesia.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "ABCD1234", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);

			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			JSClick(PWAHamburgerMenuPage.objMySubscription, "My Subscription");
			checkElementDisplayed(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			click(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
			waitTime(5000);
			// verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue
			// button");
			if (checkElementDisplayed(PWASubscriptionPages.objHaveACode, "'Have A Code?' field")) {
				logger.info("\"Have a Code?\" CTA text is displayed for upgrade journey");
				extent.extentLoggerFail(" ", "\"Have a Code?\" CTA text is displayed for upgrade journey");
			} else {
				logger.info("We should NOT see ‘Have a code’ CTA anywhere in Upgrage journey, expected behaviour");
				extent.extentLoggerPass(" ",
						"We should NOT see ‘Have a code’ CTA anywhere in Upgrage journey, expected behaviour");
			}
			// verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
			navigateHome();
			logout();
		}
	}

	public void pwaHaveagiftcardinputvalidation(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode("\"Have a Gift Card?\" is accepting 'e' alphabet validation (PWA2-7756)");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue Button");
			waitTime(5000);

			if (userType.equals("Guest")) {
				accountinfopage();
			}
//			PWAIframe();
//			verifyElementPresent(PWAHamburgerMenuPage.objnetbanking, "Net banking");
			scrollToBottomOfPageWEB();
			verifyElementPresent(PWAHamburgerMenuPage.objhaveagiftcard, "Have a gift card");
			JSClick(PWAHamburgerMenuPage.objhaveagiftcard, "Have a gift card");
			verifyElementPresent(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "Enter card details");
			JSClick(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "Enter card details");
			type(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "1abcdefghijklmnopqrstuvwxyz1",
					"card number");
			String cardnumber = findElement(PWAHamburgerMenuPage.objgiftcardnumber).getAttribute("value");
			System.out.println(cardnumber);
			extent.extentLogger("", " cardnumber  : " + cardnumber);
			if (cardnumber.toLowerCase().contains("a") || cardnumber.toLowerCase().contains("b")
					|| cardnumber.toLowerCase().contains("c") || cardnumber.toLowerCase().contains("d")
					|| cardnumber.toLowerCase().contains("e") || cardnumber.toLowerCase().contains("f")
					|| cardnumber.toLowerCase().contains("g") || cardnumber.toLowerCase().contains("h")
					|| cardnumber.toLowerCase().contains("i") || cardnumber.toLowerCase().contains("j")
					|| cardnumber.toLowerCase().contains("k") || cardnumber.toLowerCase().contains("l")
					|| cardnumber.toLowerCase().contains("v") || cardnumber.toLowerCase().contains("q")
					|| cardnumber.toLowerCase().contains("m") || cardnumber.toLowerCase().contains("w")
					|| cardnumber.toLowerCase().contains("r") || cardnumber.toLowerCase().contains("n")
					|| cardnumber.toLowerCase().contains("x") || cardnumber.toLowerCase().contains("s")
					|| cardnumber.toLowerCase().contains("o") || cardnumber.toLowerCase().contains("y")
					|| cardnumber.toLowerCase().contains("t") || cardnumber.toLowerCase().contains("p")
					|| cardnumber.toLowerCase().contains("z") || cardnumber.toLowerCase().contains("u")) {
				logger.info("The alphabet is accepted and the place holder is overlapped.");
				extent.extentLoggerFail("", "The alphabet is accepted and the place holder is overlapped.");
			} else {
				logger.info("\"Have a Gift Card?\" field shouldn't accept alphabets., expected behavior");
				extent.extentLoggerPass(" ",
						"\"Have a Gift Card?\" field shouldn't accept alphabets., expected behavior");
			}
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");

			if (userType.equals("Guest")) {
				logout();
			}
		}
	}

	public String addSeparator(String startEpisode, String input) throws Exception {

		int noOfDigits = startEpisode.length();
		String pat = "";
		for (int i = 0; i < noOfDigits; i++) {
			pat = pat + ".";
		}
		String episode = "E";
		for (int i = 1; i <= noOfDigits; i++) {
			episode = episode + input.charAt(i);
		}
		String REGEX = "E" + pat;
		String REPLACE = " . ";

		Pattern p = Pattern.compile(REGEX);
		Matcher m = p.matcher(input);
		String desc = m.replaceAll(REPLACE);

		return (episode + desc);

	}

	public void pwaEpisodedropdownrangeandcontentrangevalidation(String userType) throws Exception {
		extent.HeaderChildNode(
				"PWA2-7491 : Incorrect Episode Dropdown range displayed with respect to the content rails for the On-Air Show ");
		logger.info(
				"PWA2-7491 : Incorrect Episode Dropdown range displayed with respect to the content rails for the On-Air Show ");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String showcontent = "Gattimela";
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, showcontent, "Search edit");
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows Tab");
		waitTime(2000);
		click(PWASearchPage.objSearchedResult(showcontent), "Searched content");
		waitTime(4000);
		partialScroll();
		waitTime(1000);
		partialScroll();
		String episodeDropdown = getElementPropertyToString("innerText", PWAShowsPage.objShowDetailsEpisodeDropdownText,
				"Episode Dropdown");
		logger.info("Episode dropdown displayed in Consumptions page : " + episodeDropdown);
		extent.extentLogger("", "Episode dropdown displayed in Consumptions page : " + episodeDropdown);
		String startingEpisode = episodeDropdown.split("Episodes")[1].trim().split("-")[0].trim();
		String endingEpisode = episodeDropdown.split("-")[1].trim();
		int startingEpisodeInt = 0, endingEpisodeInt = 0;
		startingEpisodeInt = Integer.parseInt(startingEpisode);
		System.out.println(startingEpisodeInt);
		endingEpisodeInt = Integer.parseInt(endingEpisode);
		System.out.println(endingEpisodeInt);
		String endingEpisodeInt1 = "E" + endingEpisodeInt;
		System.out.println(endingEpisodeInt1);
		checkElementDisplayed(PWAHamburgerMenuPage.objepisodenumberbelowthecard, "Episode number ");
		String a = getText(PWAHamburgerMenuPage.objepisodenumberbelowthecard);
		if (a.contains(endingEpisodeInt1)) {
			logger.info("Episode larger number is displayed first as expected");
			extent.extentLoggerPass("", "Episode larger number is displayed first as expected");
		} else {
			logger.error("Episode larger number is not displayed first");
			extent.extentLoggerFail("", "Episode larger number is not displayed first");
		}
	}

	public void pwaheadertextvalidationinsubscriptionpage(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode("Header Text are not displayed as per the VD validation (PWA2-7819)");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Blockbuster Movies"),
					"Blockbuster movies");
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("4500+ Blockbuster Movies"),
					"4500+ Blockbuster Movies")) {
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"Corresponding or related content or description should be displayed, expected behaviour");
			} else {
				logger.info("A blank screen is displayed for Blockbuster Movies ");
				extent.extentLoggerFail(" ", "A blank screen is displayed for Blockbuster Movies ");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Web Series"), "Web Series");
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("Unlimlted Web series"),
					"Unlimlted Web series")) {
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"Corresponding or related content or description should be displayed, expected behaviour");
			} else {
				logger.info("A blank screen is displayed for Unlimlted Web series");
				extent.extentLoggerFail(" ", "A blank screen is displayed for Unlimlted Web series");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);

//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Ad free"), "Ad free");
//			waitTime(3000);
//			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("Ad-Free Entertainment"),
//					"Ad-Free Entertainment")) {
//				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
//				extent.extentLoggerPass("",
//						"Corresponding or related content or description should be displayed, expected behaviour");
//			} else {
//				logger.info("A blank screen is displayed for Ad free Entertainment");
//				extent.extentLoggerFail(" ", "A blank screen is displayed for Ad free Entertainment");
//
//			}
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
//			waitTime(3000);

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Payment based Offers"), "Before TV");
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("See Payment Based Offers"),
					"TV shows 24 Hours Before TV")) {
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"Corresponding or related content or description should be displayed, expected behaviour");
			} else {
				logger.info("A blank screen is displayed for TV shows 24 Hours Before TV");
				extent.extentLoggerFail(" ", "A blank screen is displayed for TV shows 24 Hours Before TV");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode(
					"For some of the content languages all the perk slides or benefits slides are blank validation (PWA2-7684)");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Blockbuster Movies"),
					"Blockbuster movies");
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("4500+ Blockbuster Movies"),
					"4500+ Blockbuster Movies")) {
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"Corresponding or related content or description should be displayed, expected behaviour");
			} else {
				logger.info("A blank screen is displayed for Blockbuster Movies ");
				extent.extentLoggerFail(" ", "A blank screen is displayed for Blockbuster Movies ");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Web Series"), "Web Series");
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("200+ Web series"), "200+ Web series")) {
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"Corresponding or related content or description should be displayed, expected behaviour");
			} else {
				logger.info("A blank screen is displayed for 200+ Web series");
				extent.extentLoggerFail(" ", "A blank screen is displayed for 200+ Web series");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);

//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Ad free"), "Ad free");
//			waitTime(3000);
//			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("Watch Ad-Free"), "Watch Ad-Free")) {
//				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
//				extent.extentLoggerPass("",
//						"Corresponding or related content or description should be displayed, expected behaviour");
//			} else {
//				logger.info("A blank screen is displayed for Ad free");
//				extent.extentLoggerFail(" ", "A blank screen is displayed for Ad free");
//
//			}
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
//			waitTime(3000);

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Payment based Offers"), "Before TV");
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objperksidetitle("See Payment Based Offers"),
					"Watch Before TV")) {
				logger.info("Corresponding or related content or description should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"Corresponding or related content or description should be displayed, expected behaviour");
			} else {
				logger.info("A blank screen is displayed for See Payment Based Offers");
				extent.extentLoggerFail(" ", "A blank screen is displayed for See Payment Based Offers");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
	}

	public void pwaverifyplanpriceinsubscriptionpage(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			Kannadalanguageselection();

			extent.HeaderChildNode(
					"\"{{plan_price}}\" text is displayed instead of the pack price validation (PWA2-7693)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue Button");
			waitTime(5000);
			String planprice = getText(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage);
			System.out.println(planprice);
			extent.extentLogger("", "selected plan price  : " + planprice);
			if (planprice.contains("1") || planprice.contains("2") || planprice.contains("3") || planprice.contains("4")
					|| planprice.contains("5") || planprice.contains("6") || planprice.contains("7")
					|| planprice.contains("8") || planprice.contains("9") || planprice.contains("10")) {
				logger.info(" Pack price should be displayed instead of \"plan_price\", expected behaviour");
				extent.extentLoggerPass("",
						"Pack price should be displayed instead of \"plan_price\" , expected behaviour");
			} else {
				logger.info("\"plan_price\" text is displayed instead of the pack price");
				extent.extentLoggerFail(" ", "\"plan_price\" text is displayed instead of the pack price");
			}
			navigateHome();
			EnglishLanguageselection();
		}
	}

	public void pwaverifyshowscontentinbeforetv(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode("Header Text are not displayed as per the VD validation (PWA2-7789)");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("Blockbuster Movies"), "Before TV");
			waitTime(3000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objmoviecontentinsubscriptionpage, "movie content")) {
				logger.info("TV shows Contents should be listed on the Before TV Benefits drawer, expected behaviour");
				extent.extentLoggerPass("",
						"TV shows Contents should be listed on the Before TV Benefits drawer, expected behaviour");
			} else {
				logger.info("Movie contents listed on the Subscription page Before TV Benefits Drawer.");
				extent.extentLoggerFail(" ",
						"Movie contents listed on the Subscription page Before TV Benefits Drawer.");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
	}

	public void TasksAndDefectssprint57(String userType) throws Exception {
		pwaverifychannelheadertext(userType);
//		pwaverifyprocedtopayforvijayabank(userType);
		pwaverifyzeezestHDchanneldetailpage(userType);
		pwaverifycontentfrommywatchlist(userType, "Premium");
		pwamandatoryregpopupforzeeoriginalcontent(userType);
		pwaverifyallchannelsscreen(userType);
		pwaverifythecontentplaybackinvedioscarousel(userType);
		pwaverifyzeeoriginalscontentshouldnotdisplayintvshows(userType);
		pwaverifyzeeTVshowstextvalidation(userType);
		pwaverifythesubscriptionpage(userType);
		pwacontentspecificvalidation(userType);
		pwaverifyEpisodecolelctionpage(userType);
		// pwaverifyHowitworksdisplayed(userType);
		pwaverifythemetatag(userType);
		pwazeekannadacontentvalidation(userType);
		pwaverifytheplaybackinconsumptionpage(userType);
		pwapaymentpagevalidation(userType);
		pwaDRMmessageforpremiumcontent(userType);
		pwaverifycrownicon(userType, "Premium");
		pwaverifygetpremiuminlinetext(userType, "Home");
		pwaverifypackdiscountamt(userType, "Home");
		// ------------------
		pwaverifyOTPscreen(userType);
		pwaverifypaynowoptioninpaymentpage(userType);
		pwaverifyloginthroughsubscriptionpage(userType);
		pwaverifygetpremiumctabelowplayer(userType);
		pwaverifyexplorepremiumctainsubscriptionpage(userType);
		pwaToWatchthisPremiumContenttextverify(userType);
		pwaverifylanguagesettingspopup(userType);
		pwaHaveacodeinputfieldvalidation(userType);
		pwavalidatediscountprice(userType);
		pwaverifystepnoinAcconuInfopage(userType);
		pwaverifyHaveacode(userType);
		pwaHaveagiftcardinputvalidation(userType);
		pwaEpisodedropdownrangeandcontentrangevalidation(userType);
		pwaheadertextvalidationinsubscriptionpage(userType);
		pwaverifyplanpriceinsubscriptionpage(userType);
		pwaverifyshowscontentinbeforetv(userType);
	}

	public void Tamillanguageselection() throws Exception {
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		verifyElementPresentAndClick(PWAHomePage.objTamilWEB, "Tamil option");
		String a = getText(PWAHomePage.objTamilWEB);
		extent.extentLogger("", "selected display language : " + a);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
		waitTime(3000);
	}

//========================Sprint 58========================
	public void Sprint58(String userType) throws Exception {
		// PWA2-7598
		PWAVerifyH1Tags(userType);
		// PWA2-7597
		PWAVerifyH1TagsWithText(userType);
		// PWA2-7916
		PWAVerifyDisplayLanguageInPlayerSkip(userType);
		// Satish
		// PWA2-7920
//		PWAVerifyPlanTitleInSubscriptionPlanPage(userType);
		// PWA2-7954
//		PWAVerifyUpgradeToAnnualPlanInSubscriptionPlanPage(userType);
		// PWA2-7725
		PWAVerifyToastMessageDisplayedInsteadOfInlineErrorMessageOnAccountInfoPage(userType);
		// PWA2-7910
//		PWAVerifyAutoRenewedDateIsUpdatedForPreviousOnesInTransactionsPage(userType);
		// PWA2-7925
		PWAVerifyGetPremiumCTADisplayedForSubscribedUserWithParentalPin(userType);
		// PWA2-7767
		PWAVerifyRightClickPasteInEmailIDFieldInAccountsInfoPage(userType);
		// PWA2-7492 - Task
		PWAVerifySEODetailsOfChannelsPage(userType);
		// PWA2-7318 - Task
//		PWAVerifyChangeInHTagsAndMetadataShowcasing(userType);

	}

	public void PWAVerifyH1Tags(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-7598 : H1 tag in Landing Page Source");
		logger.info("PWA2-7598 : H1 tag in Landing Page Source");
		mandatoryRegistrationPopUp(userType);
		String[] tabs = { "Premium", "TV Shows", "Movies", "Web Series", "Kids" };
		String[] expectedTagText = { "ZEE5 Premium", "TV Shows", "Movies", "Original Web Series & Movies",
				"Kids Shows and Movies" };
		for (int i = 0; i < tabs.length; i++) {
			extent.extentLogger("", "----------- H1 tag in " + tabs[i] + " Page Source ------------");
			navigateToHome();
			navigateToAnyScreenOnWeb(tabs[i]);
			String urlLink = getWebDriver().getCurrentUrl();
			checkTagWithTextInSource(urlLink, "h1", expectedTagText[i]);
		}
	}

	public void PWAVerifyH1TagsWithText(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-7597 : H1 tag in Zee5Originals Show Trailer and Live TV Channel Playback pages");
		logger.info("PWA2-7597 : H1 tag in Zee5Originals Show Trailer and Live TV Channel Playback pages");
		extent.extentLogger("", "----- Verification of H1 tag in Zee5Originals Show Trailer page ------");
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		String keyword = "Poison";
		JSClick(PWAHomePage.objSearchBtn, "Search icon");
		waitTime(1500);
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(2500);
		JSClick(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows tab");
		waitTime(2500);
		JSClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(4000);
		JSClick(PWAPlayerPage.objWatchPromo, "Watch Promo icon");
		waitTime(2000);
		try {
			String title = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleInPlayerPage, "");
			extent.extentLogger("", "Content title from UI: " + title);
			logger.info("Content title from UI: " + title);
			String urlLink = getWebDriver().getCurrentUrl();
			checkTagWithTextInSource(urlLink, "h1", title);
		} catch (Exception e) {
			extent.extentLoggerFail("", "Failed to fetch Content title from UI");
			logger.error("Failed to fetch Content title from UI");
		}
		extent.extentLogger("", "----- Verification of H1 tag in Live TV Channel Playback page ------");
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		navigateToAnyScreenOnWeb("Live TV");
		click(PWALandingPages.objFirstAssetInTrayIndex("FREE Channels"), "First card under Free Channels");
		waitTime(5000);
		try {
			String title = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleInPlayerPage, "");
			extent.extentLogger("", "Content title from UI: " + title);
			logger.info("Content title from UI: " + title);
			String urlLink = getWebDriver().getCurrentUrl();
			checkTagWithTextInSource(urlLink, "h1", title);
		} catch (Exception e) {
			extent.extentLoggerFail("", "Failed to fetch Content title from UI");
			logger.error("Failed to fetch Content title from UI");
		}

	}

	@SuppressWarnings({ "unused", "resource" })
	public void checkTagWithTextInSource(String urlLink, String tag, String text) throws Exception {
		boolean foundOpeningTag = false, foundClosingTag = false, foundText = false;
		String path = System.getProperty("user.dir") + "\\webpagesource.txt";
		URL url = new URL(urlLink);
		try (BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
				BufferedWriter writer = new BufferedWriter(new FileWriter(path));) {
			String line;
			while ((line = reader.readLine()) != null) {
				writer.write(line);
			}
		}
		BufferedReader br = new BufferedReader(new FileReader(path));
		String line = "", doc = "", temp = "";
		while ((line = br.readLine()) != null) {
			doc = doc + line;
		}
		if (doc.contains("<" + tag)) {
			extent.extentLogger("", "Source contains Opening tag for " + tag);
			logger.info("Source contains Opening tag for " + tag);
			doc = doc.split("<" + tag)[1];
			doc = "<" + tag + doc;
			if (doc.contains("</" + tag + ">")) {
				extent.extentLogger("", "Source contains Closing tag for " + tag);
				logger.info("Source contains Closing tag for " + tag);
				doc = doc.split("</" + tag + ">")[0];
				doc = doc + "</" + tag + ">";
				temp = doc.split("<" + tag)[1].split(">")[1].split("</" + tag)[0];
				logger.info("Text displayed in source : " + temp);
				extent.extentLogger("", "Text displayed in source : " + temp);
				logger.info("Expected text between the tags : " + text);
				extent.extentLogger("", "Expected text between the tags : " + text);
				temp = replacingSpecialCharsInAString(temp, "&amp;", "&");
				if (temp.equals(text)) {
					extent.extentLoggerPass("", "Source contains text between the tags as expected");
					logger.info("Source contains text between the tags as expected");
				} else {
					extent.extentLoggerFail("", "Source contains incorrect text between the tags");
					logger.error("Source contains incorrect text between the tags");
				}
			} else {
				extent.extentLoggerFail("", "Source does not contain Closing tag for " + tag);
				logger.error("Source does not contain Closing tag for " + tag);
			}
		} else {
			extent.extentLoggerFail("", "Source does not contain Opening tag for " + tag);
			logger.error("Source does not contain Opening tag for " + tag);
		}

	}

	public void PWAVerifyMyTransactionDetails(String userType) throws Exception {

		/*
		 * if(userType.equals("SubscribedUser")) { String username="tanisha@a.com";
		 * String password="igs123"; Response subResponse=null; String subStartDate="";
		 * SimpleDateFormat requiredFormat = new
		 * SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); java.text.DateFormat actualFormat
		 * = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
		 * subResponse=ResponseInstance.getSubscriptionDetails(username, password); int
		 * transactions=subResponse.jsonPath().get("$.size()");
		 * System.out.println(transactions); for(int i=0;i<transactions;i++) {
		 * subStartDate=subResponse.jsonPath().get("subscription_start["+i+"]").toString
		 * (); actualFormat.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
		 * java.util.Date startdate = actualFormat.parse(subStartDate);
		 * subStartDate=requiredFormat.format(startdate).toString();
		 * System.out.println(subStartDate);
		 *
		 *
		 * }/* navigateToHome(); logout(); loginWithUserEmail(username, password);
		 * click(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
		 * click(PWAHamburgerMenuPage.objMyTransactions, "My Transactions");
		 * Thread.sleep(3000);
		 *
		 * List<WebElement> packs =
		 * getWebDriver().findElements(By.xpath("//p[@class='packTitle']"));
		 * System.out.println("No of Packs : " + packs.size()); String status =
		 * getText(PWAHamburgerMenuPage.objMyTransactionPackStatus);
		 * logger.info("Pack Status :" + status); extent.extentLogger("Pack Status :",
		 * "Pack Status :" + status); String title =
		 * getText(PWAHamburgerMenuPage.objPackTitle); logger.info("Pack Title :" +
		 * title); extent.extentLogger("Pack Title :", "Pack Title :" + title); String
		 * price = getText(PWAHamburgerMenuPage.objPackPrice);
		 * logger.info("Pack Price :" + price); extent.extentLogger("Pack Price :",
		 * "Pack Price :" + price); String duration =
		 * getText(PWAHamburgerMenuPage.objPackDuration); logger.info("Pack Duration :"
		 * + duration); extent.extentLogger("Pack Duration :", "Pack Duration :" +
		 * duration); String renewalStatus =
		 * getText(PWAHamburgerMenuPage.objMyTransactionAutoRenewalStatus);
		 * logger.info("Pack Renewal Status :" + renewalStatus);
		 * extent.extentLogger("Pack Renewal Status :", "Pack Renewal Status :" +
		 * renewalStatus);
		 *
		 * }
		 */
	}

	public void PWAVerifyDisplayLanguageInPlayerSkip(String userType) throws Exception {
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("PWA2-7916 : Skip CTA in required display language");
			logger.info("PWA2-7916 : Skip CTA in required display language");
			navigateToHome();
			waitTime(4000);
			mandatoryRegistrationPopUp(userType);
			String content = "Natasaarvabhowma";
			String language = "Marathi";
			JSClick(PWAHomePage.objLanguage, "Language button");
			waitTime(2000);
			JSClick(PWAHomePage.objMarathiWEB, "Marathi Display language");
			waitTime(2000);
			JSClick(PWAHamburgerMenuPage.objApply, "Apply button on Display Langauge dropdown");
			waitTime(3000);
			JSClick(PWAHamburgerMenuPage.objApply, "Apply button on Content Language dropdown");
			waitTime(8000);
			JSClick(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, content, "Search field");
			waitTime(5000);
			JSClick(PWASearchPage.objSearchMoviesTab, "Movies tab");
			verifyElementPresentAndClick(PWASearchPage.objFirstSearch, "Search Result");
			waitTime(14000);
			if (checkElementDisplayed(PWAPlayerPage.objSkipButtonInEnglish, "Skip Button in English")) {
				logger.error("Skip button is displayed in English instead of " + language + " Language");
				extent.extentLoggerFail("", "Skip button is displayed in English instead of " + language + " Language");
			} else {
				// write code for skip in required display language
				logger.info("Skip button is displayed in selected " + language + "  Language");
				extent.extentLoggerPass("", "Skip button should be displayed in selected " + language + " Language");
			}
			navigateToHome();
			waitTime(2000);
			JSClick(PWAHomePage.objLanguage, "Language button");
			JSClick(PWAHomePage.objEnglishWEB, "English Display language");
			JSClick(PWAHamburgerMenuPage.objApply, "Apply button on Display Langauge dropdown");
			waitTime(3000);
			JSClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on Content Language dropdown");
			waitTime(4000);
			mandatoryRegistrationPopUp(userType);
		}
	}

	public void PWAVerifyPlanTitleInSubscriptionPlanPage(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"PWA2-7920 : 'Premium' plan title should be displayed in 'Your Premium ₹99 for 1 Month plan is active' text post changing display language to Telugu/Marathi");
			logger.info(
					"PWA2-7920 : 'Premium' plan title should be displayed in 'Your Premium ₹99 for 1 Month plan is active' text post changing display language to Telugu/Marathi");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			logout();
			loginWithUserEmail("gdmplex@mailnesia.com", "123456");
			selectDisplayLanguage("Telugu");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			waitTime(1000);
			click(PWAHamburgerMenuPage.objMySubscriptionOption, "My Subscription Option");
			waitTime(1000);
			if (verifyElementExist(PWAHamburgerMenuPage.objMySubscriptionPageTitle, "My Subscription Page Title")) {
				logger.info("Navigated to My Subscription page");
				extent.extentLoggerPass("", "Navigated to My Subscription page");
				ScrollToTheElementWEB(PWAHamburgerMenuPage.objBrowseAllPacks);
				click(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
				if (verifyElementExist(PWAHamburgerMenuPage.objBrowseAllPacksPageDescriptionText,
						"Browse All Packs Page Description Text")) {
					logger.info("Navigated to plan selection page");
					extent.extentLoggerPass("", "Navigated to plan selection page");
					String descriptionText = getText(PWAHamburgerMenuPage.objBrowseAllPacksPageDescriptionText);
					if (descriptionText.contains("{{plan_title}}")) {
						logger.error(
								"{{plan_title}} is displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
						extent.extentLoggerFail("",
								"{{plan_title}} is displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
					} else {
						logger.info(
								"{{plan_title}} is not displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
						extent.extentLoggerPass("",
								"{{plan_title}} is not displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
					}
					if (descriptionText.contains("Premium")) {
						logger.info(
								"Premium is displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
						extent.extentLoggerPass("",
								"Premium is displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
					} else {
						logger.error(
								"Premium is not displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
						extent.extentLoggerFail("",
								"Premium is not displayed in the Desctiption text on plan selection page post changing the display language to Telugu/Marathi");
					}
				} else {
					logger.error("Not navigated to plan selection page");
					extent.extentLoggerFail("", "Not navigated to plan selection page");
				}
			} else {
				logger.error("Not navigated to My Subscription page");
				extent.extentLoggerFail("", "Not navigated to My Subscription page");
			}
			waitTime(2000);
			Back(1);
			waitTime(2000);
			click(PWAHomePage.objRegLangHomeTab, "Home tab");
			selectDisplayLanguage("English");
		}
	}

	public void selectDisplayLanguage(String displayLanguage) throws Exception {
		extent.extentLogger("", "Changing Display Language to " + displayLanguage);
		waitTime(5000);
		click(PWAHamburgerMenuPage.objLanguageBtnWeb, "Language Button");
		waitTime(2000);
		waitForElementAndClick(PWAHamburgerMenuPage.objDisplayLang, 2, "Content Languages");
		waitTime(2000);
		click(PWAHamburgerMenuPage.objUnselectedContentLanguage(displayLanguage), displayLanguage + " Language");
		logger.info("Selected Display language " + displayLanguage);
		extent.extentLogger("", "Selected Display language " + displayLanguage);
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		waitTime(8000);
	}

	public void PWAVerifyUpgradeToAnnualPlanInSubscriptionPlanPage(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"PWA2-7954 : \"upgrade to annual plan\" incorrect title is displayed on subscription screen for active 99 pack user");
			logger.info(
					"PWA2-7954 : \"upgrade to annual plan\" incorrect title is displayed on subscription screen for active 99 pack user");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
//			logout();
//			loginWithUserEmail("gdmplex@mailnesia.com", "123456");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			waitTime(1000);
			click(PWAHamburgerMenuPage.objMySubscriptionOption, "My Subscription Option");
			waitTime(1000);
			if (verifyElementExist(PWAHamburgerMenuPage.objMySubscriptionPageTitle, "My Subscription Page Title")) {
				logger.info("Navigated to My Subscription page");
				extent.extentLoggerPass("", "Navigated to My Subscription page");
				ScrollToTheElementWEB(PWAHamburgerMenuPage.objBrowseAllPacks);
				click(PWAHamburgerMenuPage.objBrowseAllPacks, "Browse All Packs");
				if (verifyElementExist(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText,
						"Browse All Packs Page Title Text")) {
					logger.info("Navigated to plan selection page");
					extent.extentLoggerPass("", "Navigated to plan selection page");
					String descriptionText = getText(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText);
					if (descriptionText.contains("upgrade to annual plan")) {
						logger.error(
								"\"upgrade to annual plan\" is displayed as the Title text on plan selection page");
						extent.extentLoggerFail("",
								"\"upgrade to annual plan\" is displayed as the Title text on plan selection page");
					} else {
						logger.info(
								"\"upgrade to annual plan\" is not displayed as the Title text on plan selection page");
						extent.extentLoggerPass("",
								"\"upgrade to annual plan\" is not displayed as the Title text on plan selection page");
					}
					if (descriptionText.contains("Upgrade now")) {
						logger.info("\"Upgrade now\" is displayed as the Title text on plan selection page");
						extent.extentLoggerPass("",
								"\"Upgrade now\" is displayed as the Title text on plan selection page");
					} else {
						logger.error("\"Upgrade now\" now is not displayed as the Title text on plan selection page");
						extent.extentLoggerFail("",
								"\"Upgrade now\" is not displayed as the Title text on plan selection page");
					}
				} else {
					logger.error("Not navigated to plan selection page");
					extent.extentLoggerFail("", "Not navigated to plan selection page");
				}
			} else {
				logger.error("Not navigated to My Subscription page");
				extent.extentLoggerFail("", "Not navigated to My Subscription page");
			}
			waitTime(2000);
			Back(1);
			waitTime(2000);
//			Back(1);
//			waitTime(2000);
			click(PWASubscriptionPages.objZeeLogo, "Zee5 Logo");
//			logout();
		}
	}

	public void PWAVerifyToastMessageDisplayedInsteadOfInlineErrorMessageOnAccountInfoPage(String userType)
			throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-7725 : \"Either OTP is not valid or Expired\" toast message displayed instead of inline Error message on Account info page \"Verify OTP\" screen");

			logger.info(
					"PWA2-7725 : \"Either OTP is not valid or Expired\" toast message displayed instead of inline Error message on Account info page \"Verify OTP\" screen");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			waitTime(3000);
			// Actions action = new Actions(getWebDriver());
			// action.moveToElement(findElement(PWAHomePage.objMastheadCarouselCurrentContent)).build().perform();

			for (int i = 0; i < 5; i++) {
				try {

					JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
					executor.executeScript("arguments[0].click();",
							findElement(PWAHomePage.objGetPremiumGetClubButton));
					logger.info("Clicked on " + "Get Premium CTA On MastHead Carousel");
					extent.extentLogger("clickedElement", "Clicked on " + "Get Premium CTA On MastHead Carousel");
					break;
				} catch (Exception e) {
					Thread.sleep(1000);
					logger.error(e);
				}
			}
			waitTime(2000);
			if (verifyElementExist(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText,
					"Browse All Packs Page Title Text")) {
				logger.info("Navigated to plan selection page");
				extent.extentLoggerPass("", "Navigated to plan selection page");
				verifyElementPresent(PWASubscriptionPages.objContinueBtnWithINR, "Continue Button");
				JSClick(PWASubscriptionPages.objContinueBtnWithINR, "Continue Button");
				waitTime(4500);
				if (verifyElementPresent(PWASubscriptionPages.objAccountInfoTitle1, "Account Info Title")) {
					//
					logger.info("Navigated to Account Info page");
					extent.extentLoggerPass("", "Navigated to Account Info page");
					type(PWASubscriptionPages.objEmailIDTextField, "9876543211", "Email ID Text Field");
					waitTime(10000);
					verifyElementPresent(PWASubscriptionPages.objContinueBtnForEmailOrMobile, "Continue Button");
					JSClick(PWASubscriptionPages.objContinueBtnForEmailOrMobile, "Continue Button");
					waitTime(4000);
					if (verifyElementPresent(PWASubscriptionPages.objVerifyOTPTitle, "Verify OTP Title")) {
						logger.info("Navigated to plan selection page");
						extent.extentLoggerPass("", "Navigated to plan selection page");
						type(PWASubscriptionPages.objOTPTextField1, "1", "First OTP Text Field");
						waitTime(2000);
						type(PWASubscriptionPages.objOTPTextField2, "1", "Second OTP Text Field");
						waitTime(2000);
						type(PWASubscriptionPages.objOTPTextField3, "1", "Third OTP Text Field");
						waitTime(2000);
						type(PWASubscriptionPages.objOTPTextField4, "1", "Fourth OTP Text Field");
						waitTime(2000);
						click(PWASubscriptionPages.objVerifyButton, "Verify Button");
						waitTime(2000);
						verifyElementPresent(PWASubscriptionPages.objInvalidOTPErrorMessage,
								"Invalid OTP Error Message");
					} else {
						logger.error("Not navigated to plan selection page");
						extent.extentLoggerFail("", "Not navigated to plan selection page");
					}
				} else {
					logger.error("Not navigated to Account Info page");
					extent.extentLoggerFail("", "Not navigated to Account Info page");
				}
			} else {
				logger.error("Not navigated to plan selection page");
				extent.extentLoggerFail("", "Not navigated to plan selection page");
			}
			waitTime(2000);
			Back(1);
			waitTime(2000);
			Back(1);
			waitTime(2000);
//			click(PWASubscriptionPages.objZeeLogo, "Zee5 Logo");
		}
	}

	@SuppressWarnings("unused")
	public void PWAVerifyAutoRenewedDateIsUpdatedForPreviousOnesInTransactionsPage(String userType) throws Exception {
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"PWA2-7910 : Previously purchased Pack Duration/Date is updated with the latest auto-renewed pack Duration/Date in my transaction page");
			logger.info(
					"PWA2-7910 : Previously purchased Pack Duration/Date is updated with the latest auto-renewed pack Duration/Date in my transaction page");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
//			logout();
//			loginWithUserEmail("gdmplex@mailnesia.com", "123456");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objProfileIconWEB, "Profile Icon");
			waitTime(1000);
			click(PWAHamburgerMenuPage.objMyTransactionsOption, "My Transactions Option");
			waitTime(1000);
			if (verifyElementExist(PWAHamburgerMenuPage.objMyTransactionsPageTitle, "My Transactions Page Title")) {
				logger.info("Navigated to My Transactions page");
				extent.extentLoggerPass("", "Navigated to My Transactions page");
				List<WebElement> PlanPurchaseDatesList = getWebDriver()
						.findElements(PWASubscriptionPages.objPlanPurchaseDate);
				ArrayList<String> PlanPurchaseDatesArray = new ArrayList<String>();
				String LatestTransactionDate = findElement(PWASubscriptionPages.objPlanPurchaseDate(1)).getText();
				System.out.println("LatestTransactionDate: " + LatestTransactionDate);
				for (int i = 2; i <= PlanPurchaseDatesList.size(); i++) {
					String date = findElement(PWASubscriptionPages.objPlanPurchaseDate(i)).getText();
					PlanPurchaseDatesArray.add(date);
					System.out.println("array: " + PlanPurchaseDatesArray);
					System.out.println("Value: " + date);
				}
				if (PlanPurchaseDatesArray.contains(LatestTransactionDate)) {
					logger.error(
							"Previously purchased Pack Date is updated with the latest auto-renewed pack Date in my transaction page");
					extent.extentLoggerFail("",
							"Previously purchased Pack Date is updated with the latest auto-renewed pack Date in my transaction page");
				} else {
					logger.info(
							"Previously purchased Pack Date is not updated with the latest auto-renewed pack Date in my transaction page");
					extent.extentLoggerPass("",
							"Previously purchased Pack Date is not updated with the latest auto-renewed pack Date in my transaction page");
				}

				List<WebElement> PlanPurchaseDurationsList = getWebDriver()
						.findElements(PWASubscriptionPages.objPlanDuration);
				ArrayList<String> PlanPurchaseDurationsArray = new ArrayList<String>();
				String LatestTransactionDuration = findElement(PWASubscriptionPages.objPlanDuration(1)).getText();
				System.out.println("LatestTransactionDuration: " + LatestTransactionDuration);
				for (int i = 2; i <= PlanPurchaseDatesList.size(); i++) {
					String date = findElement(PWASubscriptionPages.objPlanDuration(i)).getText();
					PlanPurchaseDurationsArray.add(date);
					System.out.println("array: " + PlanPurchaseDurationsArray);
					System.out.println("Value: " + date);
				}
				if (PlanPurchaseDurationsArray.contains(LatestTransactionDuration)) {
					logger.error(
							"Previously purchased Pack Duration is updated with the latest auto-renewed pack Duration in my transaction page");
					extent.extentLoggerFail("",
							"Previously purchased Pack Duration is updated with the latest auto-renewed pack Duration in my transaction page");
				} else {
					logger.info(
							"Previously purchased Pack Duration is not updated with the latest auto-renewed pack Duration in my transaction page");
					extent.extentLoggerPass("",
							"Previously purchased Pack Duration is not updated with the latest auto-renewed pack Duration in my transaction page");
				}

			} else {
				logger.error("Not navigated to My Transactions page");
				extent.extentLoggerFail("", "Not navigated to My Transactions page");
			}
			waitTime(2000);
			Back(1);
			waitTime(2000);
			Back(1);
			waitTime(2000);
//			click(PWASubscriptionPages.objZeeLogo, "Zee5 Logo");
			logout();

		}
	}

	public void PWAVerifyGetPremiumCTADisplayedForSubscribedUserWithParentalPin(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-7925 : \"Get premium \"CTA is displayed on consumption page for the subscribed users with parental pin logged in via guest checkout");
			logger.info(
					"PWA2-7925 : \"Get premium \"CTA is displayed on consumption page for the subscribed users with parental pin logged in via guest checkout");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			waitTime(3000);
//			loginWithUserEmail("25off@mailnesia.com", "123456");
			Actions action = new Actions(getWebDriver());
			action.moveToElement(findElement(PWAHomePage.objMastheadCarouselCurrentContent)).build().perform();

			for (int i = 0; i < 5; i++) {
				try {

					JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
					executor.executeScript("arguments[0].click();",
							findElement(PWAHomePage.objPlayIconWithGetPremiumCTAOnCarousel));
					logger.info("Clicked on " + "Play Icon with Get Premium CTA On MastHead Carousel");
					extent.extentLogger("clickedElement",
							"Clicked on " + "Play Icon with Get Premium CTA On MastHead Carousel");
					break;
				} catch (Exception e) {
					Thread.sleep(1000);
					logger.error(e);
				}
			}
			waitTime(2000);
			waitForElementAndClick(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, 30,
					"Get Premium Link below the Player");
			waitTime(2000);
			if (verifyElementExist(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText,
					"Browse All Packs Page Title Text")) {
				logger.info("Navigated to plan selection page");
				extent.extentLoggerPass("", "Navigated to plan selection page");
				click(PWASubscriptionPages.objContinueBtn, "Continue Button");
				waitTime(2000);
				if (verifyElementExist(PWASubscriptionPages.objAccountInfoTitle, "Account Info Title")) {
					logger.info("Navigated to Account Info page");
					extent.extentLoggerPass("", "Navigated to Account Info page");
					type(PWASubscriptionPages.objEmailIDTextField, "25off@mailnesia.com", "Email ID Text Field");
					waitTime(2000);
					click(PWASubscriptionPages.objContinueBtn, "Continue Button");
					waitTime(3000);
					// Password Popup
					verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
					waitTime(3000);
					verifyElementPresent(PWASubscriptionPages.objProceedBtnDisabled, "Disabled Proceed Button");
					waitTime(3000);
					verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
					waitTime(3000);
					type(PWASubscriptionPages.objPasswordFieldHidden, "123456", "Password Field");
					waitTime(3000);
					verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnEnabled, "Enabled Proceed Button");
					waitTime(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field");
					type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin2player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin3player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin4player, "1", "ParentalLockPin");
					waitTime(4000);
					if (verifyIsElementDisplayed(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen,
							"Get Premium CTA below the Player")) {
						logger.error("Get Premium CTA below the Player is visible");
						extent.extentLoggerFail("checkElementPresent", "Get Premium CTA below the Player is displayed");
					} else {
						logger.info("Get Premium CTA below the Player is not displayed");
						extent.extentLoggerPass("checkElementPresent",
								"Get Premium CTA below the Player is not displayed");
					}

					if (verifyIsElementDisplayed(PWAPlayerPage.objSubscribeNowLink,
							"In-Line Get Premium CTA On Player Screen")) {
						logger.error("In-Line Get Premium CTA On Player Screen is visible");
						extent.extentLoggerFail("checkElementPresent",
								"In-Line Get Premium CTA On Player Screen is displayed");
					} else {
						logger.info("In-Line Get Premium CTA On Player Screen is not displayed");
						extent.extentLoggerPass("checkElementPresent",
								"In-Line Get Premium CTA On Player Screen is not displayed");
					}

					logout();
				}
			}
		}
	}

	public void PWAVerifyRightClickPasteInEmailIDFieldInAccountsInfoPage(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-7767 : \"Email Id or mobile number \"place holder is selected and user is unable to paste the input in \"Email Id or mobile number \"field on account info page");
			logger.info(
					"PWA2-7767 : \"Email Id or mobile number \"place holder is selected and user is unable to paste the input in \"Email Id or mobile number \"field on account info page");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			waitTime(3000);
			// Actions action = new Actions(getWebDriver());
			// action.moveToElement(findElement(PWAHomePage.objMastheadCarouselCurrentContent)).build().perform();

			for (int i = 0; i < 5; i++) {
				try {

					JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
					executor.executeScript("arguments[0].click();",
							findElement(PWAHomePage.objPlayIconWithGetPremiumCTAOnCarousel1));
					logger.info("Clicked on " + "Play Icon with Get Premium CTA On MastHead Carousel");
					extent.extentLogger("clickedElement",
							"Clicked on " + "Play Icon with Get Premium CTA On MastHead Carousel");
					break;
				} catch (Exception e) {
					Thread.sleep(1000);
					logger.error(e);
				}
			}
			waitTime(2000);
			waitForElementAndClick(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, 30,
					"Get Premium Link below the Player");
			waitTime(2000);
			if (verifyElementExist(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText,
					"Browse All Packs Page Title Text")) {
				logger.info("Navigated to plan selection page");
				extent.extentLoggerPass("", "Navigated to plan selection page");
				verifyElementPresent(PWASubscriptionPages.objContinueBtnWithINR, "Continue Button");
				JSClick(PWASubscriptionPages.objContinueBtnWithINR, "Continue Button");
				waitTime(4500);

				if (verifyElementExist(PWASubscriptionPages.objAccountInfoTitle1, "Account Info Title")) {
					logger.info("Navigated to Account Info page");
					extent.extentLoggerPass("", "Navigated to Account Info page");
					String ctc = "igstesting@emailid.com";
					StringSelection stringSelection = new StringSelection(ctc);
					Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
					clpbrd.setContents(stringSelection, null);
					Actions actions = new Actions(getWebDriver());
					WebElement element = findElement(PWASubscriptionPages.objEmailIDTextField);
					actions.contextClick(element).perform();
					waitTime(2000);
					Robot robot = new Robot();
					robot.keyPress(KeyEvent.VK_DOWN);
					robot.keyRelease(KeyEvent.VK_DOWN);
					robot.keyPress(KeyEvent.VK_DOWN);
					robot.keyRelease(KeyEvent.VK_DOWN);
					robot.keyPress(KeyEvent.VK_ENTER);
					robot.keyRelease(KeyEvent.VK_ENTER);
					waitTime(2000);
					String PastedEmail = element.getAttribute("value");
					System.out.println("Pasted Email: " + PastedEmail);
					if (ctc.equals(PastedEmail)) {
						logger.info("Right-click and Paste in the Email ID field is successful");
						extent.extentLoggerPass("", "Right-click and Paste in the Email ID field is successful");
					} else {
						logger.error("Failed to Right-click and Paste in the Email ID field");
						extent.extentLoggerFail("", "Failed to Right-click and Paste in the Email ID field");
					}

				} else {
					logger.error("Failed to navigate to Account Info page");
					extent.extentLoggerFail("", "Failed to navigate to Account Info page");
				}

			} else {
				logger.error("Failed to navigate to plan selection page");
				extent.extentLoggerFail("", "Failed to navigate to plan selection page");
			}
		}
	}

	public void PWAVerifySEODetailsOfChannelsPage(String userType) throws Exception {

		extent.HeaderChildNode("PWA2-7492 : Channel pages - SEO details to be updated.");
		logger.info("PWA2-7492 : Channel pages - SEO details to be updated.");
		extent.extentLogger("", "----- Verifying if the user can navigate to the channel page ------");
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWAHomePage.objMoreMenuIcon, "More Menu Icon");
		waitTime(5000);
//		verifyElementPresent(PWAHomePage.objMoreMenuTabs("Live TV"), "Live TV Tab");
		JSClick(PWAHomePage.objMoreMenuTabs("Channels"), "Channels Tab");
		if (verifyElementPresent(PWALandingPages.objChannelsLandingPageTitle, "Channels Landing Page Title")) {
			logger.info("Navigate to Channels Landing page");
			extent.extentLoggerPass("", "Navigate to Channels Landing page");
			extent.extentLogger("", "----- Verifying if the user can see the URL, when landed on channel page ------");
			logger.info("----- Verifying if the user can see the URL, when landed on channel page ------");
			String getUrl = getWebDriver().getCurrentUrl();
//			System.out.println("expectedURL: "+getParameterFromXML("url")+"tv-channels");
//			System.out.println("currURL: "+getUrl);
			if (getUrl.equals(getParameterFromXML("url") + "tv-channels")) {
				logger.info("Current URL matches the Channels Landing page URL");
				extent.extentLoggerPass("", "Current URL matches the Channels Landing page URL");
			} else {
				logger.error("Current URL does not match the Channels Landing page URL");
				extent.extentLoggerFail("", "Current URL does not match the Channels Landing page URL");
			}

			extent.extentLogger("",
					"----- Verifying if the user can see the title  when landed on TV Channels landing page ------");
			logger.info(
					"----- Verifying if the user can see the title  when landed on TV Channels landing page ------");
			String ChannelsLandingPageTitle = findElement(PWALandingPages.objChannelsLandingPageTitle).getText();
//			System.out.println(ChannelsLandingPageTitle);
			if (ChannelsLandingPageTitle.equals("List of TV Channels")) {
				logger.info("Title of the Channels Landing Page matches \"List of TV Channels\"");
				extent.extentLoggerPass("", "Title of the Channels Landing Page matches \"List of TV Channels\"");
			} else {
				logger.error("Title of the Channels Landing Page does not match \"List of TV Channels\"");
				extent.extentLoggerFail("",
						"Title of the Channels Landing Page does not match \"List of TV Channels\"");
			}

			extent.extentLogger("", "----- Verifying the H1 tag on the Tv channel List landing page ------");
			logger.info("----- Verifying the H1 tag on the Tv channel List landing page ------");
			checkTagWithTextInSource(getUrl, "h1", "List of TV Channels");

			extent.extentLogger("", "----- Verifying the SEO Title on the TV Channel listing page ------");
			logger.info("----- Verifying the SEO Title on the TV Channel listing page ------");
			checkTagWithTextInSource(getUrl, "title", "Watch ZEE TV Channels Online on ZEE5");

			extent.extentLogger("", "----- Verifying the SEO description on the TV Channel listing page ------");
			logger.info("----- Verifying the SEO description on the TV Channel listing page ------");
			checkAttributeTextWithTextInSource(getUrl, "name=\"description\" content=\"",
					"Browse through ZEE5's channel list including ZEE TV, ZEE Marathi, ZEE News, BBC World, CNN and more channels in English, Hindi and other regional languages. Watch your favourite tv channel from ZEE5's channel list");

			extent.extentLogger("",
					"----- Verifying if the user can navigate to the channel Details page from the Channel listing page ------");
			logger.info(
					"----- Verifying if the user can navigate to the channel Details page from the Channel listing page ------");
			String titleOfFirstChannelCard = findElement(PWALandingPages.objFirstChannelCard).getAttribute("title");
			JSClick(PWALandingPages.objFirstChannelCard, "First Channel Card");

			String h1TagOfFirstChannelInDetailPage = findElement(By.tagName("h1")).getText();
			if (h1TagOfFirstChannelInDetailPage.contains(titleOfFirstChannelCard)) {
				logger.info("Navigated to the correct channel detail page");
				extent.extentLoggerPass("", "Navigated to the correct channel detail page");
			} else {
				logger.error("Navigated to incorrect channel detail page");
				extent.extentLoggerFail("", "Navigated to incorrect channel detail page");
			}

			extent.extentLogger("",
					"----- Verifying if the user can see the URL,  when landed on channel details page ------");
			logger.info("----- Verifying if the user can see the URL,  when landed on channel details page ------");
			String getDetailPageUrl = getWebDriver().getCurrentUrl();
			String expectedDetailPageUrl = getParameterFromXML("url") + "tv-channels/"
					+ titleOfFirstChannelCard.toLowerCase() + "/0-9-" + titleOfFirstChannelCard.toLowerCase();
//			System.out.println("expectedURL: "+expectedDetailPageUrl);
//			System.out.println("currURL: "+getDetailPageUrl);
			if (getDetailPageUrl.equals(expectedDetailPageUrl)) {
				logger.info("Current URL matches the Channel detail page URL");
				extent.extentLoggerPass("", "Current URL matches the Channel detail page URL");
			} else {
				logger.error("Current URL does not match the Channel detail page URL");
				extent.extentLoggerFail("", "Current URL does not match the Channel detail page URL");
			}

			extent.extentLogger("",
					"----- Verifying if the user can see the title  when landed on TV Channels landing page ------");
			logger.info(
					"----- Verifying if the user can see the title  when landed on TV Channels landing page ------");
			String titleOfFirstChannelInDetailPage = getWebDriver().getTitle();
//			System.out.println(titleOfFirstChannelInDetailPage);
			if (titleOfFirstChannelInDetailPage
					.equals("Watch " + titleOfFirstChannelCard + " Serials & Shows on ZEE5.")) {
				logger.info("Navigated to the correct channel detail page");
				extent.extentLoggerPass("", "Navigated to the correct channel detail page");
			} else {
				logger.error("Navigated to incorrect channel detail page");
				extent.extentLoggerFail("", "Navigated to incorrect channel detail page");
			}

			extent.extentLogger("", "----- Verifying the H1 tag on the Tv channel details page ------");
			logger.info("----- Verifying the H1 tag on the Tv channel details page ------");
			checkTagWithTextInSource(getDetailPageUrl, "h1", "List of " + titleOfFirstChannelCard + " Serials");

			extent.extentLogger("", "----- Verifying the SEO Title on the TV Channel details  page ------");
			logger.info("----- Verifying the SEO Title on the TV Channel details  page ------");
			checkTagWithTextInSource(getDetailPageUrl, "title",
					"Watch " + titleOfFirstChannelCard + " Serials & Shows on ZEE5.");

		} else {
			logger.error("Failed to navigate to Channels Landing page");
			extent.extentLoggerFail("", "Failed to navigate to Channels Landing page");
		}
	}

	@SuppressWarnings({ "unused", "resource" })
	public void checkAttributeTextWithTextInSource(String urlLink, String attributeText, String text) throws Exception {
		boolean foundOpeningTag = false, foundClosingTag = false, foundText = false;
		String path = System.getProperty("user.dir") + "\\webpagesource.txt";
		URL url = new URL(urlLink);
		try (BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
				BufferedWriter writer = new BufferedWriter(new FileWriter(path));) {
			String line;
			while ((line = reader.readLine()) != null) {
				writer.write(line);
			}
		}
		BufferedReader br = new BufferedReader(new FileReader(path));
		String line = "", doc = "", temp = "";
		while ((line = br.readLine()) != null) {
			doc = doc + line;
		}

		if (doc.contains(attributeText)) {
			extent.extentLogger("", "Source contains attribute text " + attributeText);
			logger.info("Source contains attribute text " + attributeText);
			doc = doc.split(attributeText)[1];
			temp = doc.split("\"")[0];
//        	doc=attributeText+doc;
			temp = replacingSpecialCharsInAString(temp, "&#x27;", "'");
			if (temp.equals(text)) {
				extent.extentLoggerPass("", "Source contains text in Content as expected");
				logger.info("Source contains text in Content as expected");
			} else {
				extent.extentLoggerFail("", "Source contains incorrect text in Content");
				logger.error("Source contains incorrect text in Content");
			}
		}
	}

	public String replacingSpecialCharsInAString(String text, String splitText, String splitTextToBeEntered)
			throws Exception {
		String[] textArray;
		System.out.println(text);
		textArray = text.split(splitText);
		System.out.println("String Array: " + Arrays.toString(textArray));
		String res = textArray[0];
		for (int i = 1; i < textArray.length; i++) {
			res = res.concat(splitTextToBeEntered);
			res = res.concat(textArray[i]);
		}
		System.out.println(res);
		return res;
	}

//====================COMBO OFFER=========================

	public void ComboOfferPremiumPlex(String userType) throws Exception {
//		if(!userType.equals("Guest")) {
//			logout();
//		}
//		PWASearchEntryPointValidations(userType, "299", "Inline");
//		PWASearchEntryPointValidations(userType, "299", "BelowPlayer");
//		PWASearchEntryPointValidations(userType, "299", "KnowMore");
//
//		PWAZeePLEXPageEntryPointValidations(userType, "299", "Inline");
//		PWAZeePLEXPageEntryPointValidations(userType, "299", "BelowPlayer");
//		PWAZeePLEXPageEntryPointValidations(userType, "299", "KnowMore");

		if (userType.equals("Guest")) {
			deeplinkConsumptionScreen499Login();
			deeplinkConsumptionScreen499Register();
			deeplinkConsumptionScreen249Login();
			deeplinkConsumptionScreen249Register();
			PWASearchEntryPointValidations(userType, "299", "Inline");
			zeePWASubscriptionFlowFromHomePageHeaderSubscribeButton(userType, getPlatform());
		} else if (userType.equals("NonSubscribedUser")) {
			deeplinkConsumptionScreen499();
			deeplinkConsumptionScreen249();
			PWASearchEntryPointValidations(userType, "299", "Inline");
		} else if (userType.equals("SubscribedUser")) {
			PWASearchEntryPointValidations(userType, "299", "Inline");
		}

		if (userType.equals("Guest")) {
			deeplinkSubscriptionLogin();
			deeplinkSubscriptionRegister();
			zeePWASubscriptionFlowFromHomePageHeaderSubscribeButtonRegister(userType, getPlatform());
		} else if (userType.equals("NonSubscribedUser")) {
			deeplinkSubscriptionNonSub();
		}

		if (userType.equals("Guest")) {
			PlexLandingPage499Login();
			PlexLandingPage499Register();
			PlexLandingPage249Login();
			PlexLandingPage249Register();
		} else if (userType.equals("NonSubscribedUser")) {
			PlexLandingPage499Nonsub();
			PlexLandingPage249Nonsub();
		}
	}

	public void watchNowCTA() throws Exception {
		verifyElementPresent(PWAComboOfferPage.objWatchNowCTA, "Watch Now CTA");
		click(PWAComboOfferPage.objWatchNowCTA, "Watch Now CTA");
		verifyElementPresent(PWAComboOfferPage.objExpiresDaysTxt, "Expires in days text");
		verifyElementPresent(PWAComboOfferPage.objWatchNowCTAInPlayer, "Watch Now CTA - inPlayer");
		verifyElementPresent(PWAComboOfferPage.objExpiresinDaysTxtBelowThePlayer,
				"Expires in days text below the player");
		click(PWAComboOfferPage.objwatchNowCTAInPlayer, "Watch Now CTA inPlayer");
		verifyElementPresent(PWAComboOfferPage.objWatchTimeTxtPopUp, "Watch Time text");
		verifyElementPresent(PWAComboOfferPage.objHourTime, "Hour Time text");
		compareText(PWAComboOfferPage.objYouWillHaveHoursToFinishTheMovieOnceStartedPlaybackTxt,
				"You will have 4 hours to finish the movie once started playback");
		compareText(PWAComboOfferPage.objPopUpDescription,
				"You can watch the movie multiple times during the 4 hour period after first playback");
		verifyElementPresent(PWAComboOfferPage.objAgreeAndWatchNow, "Agree and Watch Now");
	}

	public void ValidateCTAsAndValidateComboOfferScreen() throws Exception {
		validateComboScreenOnClickingCTABelowPlayer();
		navigateToHome();
		validateComboScreenOnClickingCTAInlinePlayer();
//		navigateToHome();
//		playingContentFromwatchListOnClickingCTABelowPlayer();
		navigateToHome();
		validateComboScreenOnClickingCTAInlinePlayerRentNow();
		navigateToHome();
		validateComboScreenOnClickingCTAKnowMore();
		navigateToHome();
		validateComboScreenOnClickingRentNowCTA();
	}

	public void validateComboScreenOnClickingRentNowCTA() throws Exception {
		navigationFromZeeplexScreen("RentNow");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		validatePaymentPageNavigation();
	}

	public void validateComboScreenOnClickingCTABelowPlayer() throws Exception {
		navigationFromZeeplexScreen("Trailer");
		validateConsumptionScreen();
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		validatePaymentPageNavigation();
	}

	public void validateComboScreenOnClickingCTAInlinePlayer() throws Exception {
		navigationFromZeeplexScreen("Trailer");
		validateConsumptionScreen();
		click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now CTA in-player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		validatePaymentPageNavigation();
	}

	public void validateComboScreenOnClickingCTAKnowMore() throws Exception {
		navigationFromZeeplexScreen("Trailer");
		validateConsumptionScreen();
		click(PWAComboOfferPage.objComboOfferWidget, "Know More Wedget");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
	}

	public void validatePaymentPageNavigation() throws Exception {
		scrollDownWEB();
		scrollDownWEB();
		if (userType.equals("Guest") || userType.equals("SubscribedUser")) {
			click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		} else if (userType.equals("SubscribedUser")) {
			click(PWAComboOfferPage.objUpgradeBtn, "Upgrade Button");
		}
		if (verifyElementDisplayed(PWAComboOfferPage.objOnlyRentMovieCheckBox)) {
			click(PWAComboOfferPage.objRentMovieBtn, "Rent Movie Button");
		}
		if (!userType.equals("Guest")) {
			scrollUp();
			scrollUp();
			scrollUp();
			verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment Header");
		}
	}

	public void login() throws Exception {
		HeaderChildNode("Login - Non subscribed user with No Active Radhe Rental");
		String Username = "anything@mailnesia.com";
		String Password = "123456";
		click(PWAHomePage.objNotNow, "Notification popup");
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, Username, "Email Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, Password, "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(3000);
	}

	/**
	 * Subscription Flow From Home Page Header Subscribe Button Register
	 */
	public void zeePWASubscriptionFlowFromHomePageHeaderSubscribeButtonRegister(String userType, String platform)
			throws Exception {
		HeaderChildNode("PWA Subscription Flow From Home Page Header Subcribe Button");

		// Scenario no. 89
		waitTime(5000);
		click(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
//		driver.findElement(PWAHomePage.objSubscribeButton).click();
		waitTime(5000);
		zeePWASelectPackPageValidation();
		type(PWALoginPage.objEmailField, RandomStringGenerator(6) + "007@gmail.com", "Email ID");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		type(PWALoginPage.objPasswordField, "igs@12345", "Password Button");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		zeePWAPaymentPageValidation();
		navigateBackFromPayTmWalletAndLogout(platform, userType);
	}

	public void playingContentFromwatchListOnClickingCTABelowPlayer() throws Exception {
		if (!userType.equals("Guest")) {
			watchList();
			validateConsumptionScreen();
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
			verifyComboScreen();
			termsOfService();
			privacyPolicy();
		}
	}

	public void playingContentFromwatchListOnClickingCTAInlinePlayer() throws Exception {
		if (!userType.equals("Guest")) {
			watchList();
			validateConsumptionScreen();
			click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now CTA in-player");
			verifyComboScreen();
			termsOfService();
			privacyPolicy();
		}
	}

	public void validateComboScreenOnClickingCTAInlinePlayerRentNow() throws Exception {
		navigationFromZeeplexScreen("RentForINR");
		rentPopUp();
	}

	public void navigationFromZeeplexScreen(String CTAToBeclicked) throws Exception {
		HeaderChildNode(
				"Naviagte to consumption/combo offer screen after clicking " + CTAToBeclicked + " in ZEEPLEX Screen");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		waitTime(3000);
		scrollDownWEB();
		scrollDownWEB();
		contentTitle = getText(PWAComboOfferPage.objRentNowTitle);
		ClickOnCTAInZeePlexScreen(CTAToBeclicked);
	}

	public void ClickOnCTAInZeePlexScreen(String CTAToBeclicked) throws Exception {
		if (CTAToBeclicked.equalsIgnoreCase("Trailer")) {
			click(PWAComboOfferPage.objTrailer, "Trailer CTA");
		} else if (CTAToBeclicked.equalsIgnoreCase("RentForINR")) {
			click(PWAComboOfferPage.objRentForINR, "Rent for INR");
		} else if (CTAToBeclicked.equalsIgnoreCase("RentNow")) {
			click(PWAComboOfferPage.objRentNow, "Rent Now");
		} else if (CTAToBeclicked.equalsIgnoreCase("KnowMore")) {
			click(PWAComboOfferPage.objComboOfferWidget, "Know More");
		} else if (CTAToBeclicked.equalsIgnoreCase("WatchNow")) {
			verifyElementPresent(PWAComboOfferPage.objExpiresDaysTxt, "Expires day text");
			click(PWAComboOfferPage.objWatchNowCTA, "Watch now");
		}
	}

	public void watchList() throws Exception {
		HeaderChildNode("Validating Combo offer from watchlist");
		waitTime(5000);
		JSClick(PWAHomePage.objProfileMenu, "Profile");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHomePage.objMyWatchListIcon, "My Watchlist");
		verifyElementPresentAndClick(PWAComboOfferPage.objWatchListZeeplexTab, "ZEEPLEX Tab");
		verifyElementPresentAndClick(PWAComboOfferPage.objFirstContentTitle, "First content");
	}

	public void validateConsumptionScreen() throws Exception {
		HeaderChildNode("Validate CTA's in consumptions screen");
//		waitTime(60000);
//		waitTime(15000);
		waitForElementPresence(PWAComboOfferPage.objRentNowInPlayer, 180, "Rent Now CTA in-player");
		verifyElementPresent(PWAComboOfferPage.objwatchFullContentByRentingIt, "watch full content by renting it");
		verifyElementPresent(PWAComboOfferPage.objRentNowInPlayer, "Rent Now CTA in-player");
		verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyElementPresent(PWAComboOfferPage.objComboOfferWidget, "Combo Offer Widget below the player");
//		verifyElementPresent(PWAComboOfferPage.objKnowMore, "Know More CTA below the player");
	}

	public void verifyComboScreen() throws Exception {
		HeaderChildNode("Validating Text and CTA's in combo offer screen");
		scrollDownWEB();
//		verifyElementPresent(PWAHamburgerMenuPage.objApply, "Beneficiary Text");
		verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail");
		verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail");

		compareText(PWAComboOfferPage.objRentalValidateTxt, "Rental validity 21 Days");
		compareText(PWAComboOfferPage.objWatchTimevalidateTxt, "Watch Time validity 4 hours");
		compareText(PWAComboOfferPage.obj4000blockusterTxt, "4000+ blockbuster movies");
		compareText(PWAComboOfferPage.objzee5OriginalTxt, "ZEE5 Originals and Web Series");
		compareText(PWAComboOfferPage.objWatchshowsTxt, "Watch shows before TV");
		compareText(PWAComboOfferPage.objWatchAdTxt, "Watch Ad Free");
		String SaveAmount = getText(PWAComboOfferPage.objDiscount).replace("Save ₹", "");
		compareText(PWAComboOfferPage.objDiscount, "Save ₹" + SaveAmount);
		compareText(PWAComboOfferPage.objTotalDiscount, "Save ₹" + SaveAmount);

		scrollDownWEB();
		scrollDownWEB();
		if (userType.equals("Guest") || userType.equals("SubscribedUser")) {
			verifyElementPresent(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		} else if (userType.equals("SubscribedUser")) {
			verifyElementPresent(PWAComboOfferPage.objUpgradeBtn, "Upgrade Button");
		}

		if (verifyElementDisplayed(PWAComboOfferPage.objOnlyRentMovieCheckBox)) {
			verifyElementPresent(PWAComboOfferPage.objRentMovieBtn, "Rent Movie Button");
		}
	}

	public void rentPopUp() throws Exception {
		HeaderChildNode("Validating text and CTA's in Rent PopUp");
		verifyElementPresent(PWAComboOfferPage.objRentPopUp, "Rent PopUP");

		if (contentTitle.equals(getText(PWAComboOfferPage.objTitle))) {
			logger.info("" + contentTitle + "\" Title of the Content matches");
			extent.extentLoggerPass("", "" + contentTitle + "\" Title of the Content matches");
		} else {
			logger.info("" + contentTitle + "\"Title of the Content does not matches");
			extent.extentLoggerFail("", "" + contentTitle + "\"Title of the Content does not matches");
		}

		if (verifyElementPresent(PWAComboOfferPage.objReleasetxt, "Released By text")) {
			logger.info("Released By Text :- " + getText(PWAComboOfferPage.objReleasetxt));
			extent.extentLoggerPass("", "Released By Text :- " + getText(PWAComboOfferPage.objReleasetxt));
		}
		verifyElementPresent(PWAComboOfferPage.objrentvalidityCard, "Rent Validity Card");
		compareText(PWAComboOfferPage.objLefftBannerrentvalidationTxt, "Rental Validity");
		String date = getText(PWAComboOfferPage.objLeftBannerDays).replace(" Days", "");
		compareText(PWAComboOfferPage.objLeftBannerDays, date + " Days");
		compareText(PWAComboOfferPage.objLeftBannerDesc,
				"You have " + date + " days to start watching the movie once rented");
		verifyElementPresent(PWAComboOfferPage.objWatchTimeCard, "Watch Time Card");
		compareText(PWAComboOfferPage.objWatchTimeTxt, "Watch Time");
		compareText(PWAComboOfferPage.objHoursTxt, "4 hours");
		compareText(PWAComboOfferPage.objRightBannerDesc,
				"You will have 4 hours to finish the movie once started playback");

		List<WebElement> ExpirePoint = findElements(PWAComboOfferPage.objExpirePoints);
		compareText(ExpirePoint.get(0), "You can watch the movie multiple times during the 4 hour period");
		compareText(ExpirePoint.get(1), "This is a non-refundable transaction");
		compareText(ExpirePoint.get(2),
				"This content is only available for rent and not a part of Premium or Club Subscription");
		compareText(ExpirePoint.get(3), "You can play your content on the supported devices");
		compareText(ExpirePoint.get(4), "Learn more about ZEEPLEX");
	}

	public void compareText(By Locator, String Text) throws Exception {
		if (getText(Locator).equals(Text)) {
			logger.info("'" + Text + "' text is matched");
			extent.extentLoggerPass("", "'" + Text + "' text is matched");
		} else {
			logger.info("'" + Text + "' text is not matched");
			extent.extentLoggerFail("", "'" + Text + "' text is not matched");
		}
	}

	public void compareText(WebElement element, String Text) throws Exception {
		if (element.getText().equals(Text)) {
			logger.info("'" + Text + "' text is matched");
			extent.extentLoggerPass("", "'" + Text + "' text is matched");
		} else {
			logger.info("'" + Text + "' text is not matched");
			extent.extentLoggerFail("", "'" + Text + "' text is not matched");
		}
	}

	public void termsOfService() throws Exception {
		HeaderChildNode("Validating Terms of Service");
		scrollDownWEB();
		click(PWAComboOfferPage.objTermsOfService, "Terms of Service");
		switchToWindow(2);
		if (verifyElementPresent(PWAComboOfferPage.objTermsOfServiceTitle, "Terms of Service")) {
			logger.info("Navigated to Terms of Service");
			extent.extentLoggerPass("", "Navigated to Terms of Service");
			getWebDriver().close();
			switchToParentWindow();
		} else {
			logger.info("Not Navigated to Terms of Service");
			extent.extentLoggerFail("", "Not Navigated to Terms of Service");
		}
	}

	public void privacyPolicy() throws Exception {
		HeaderChildNode("Validating Privacy and Policy");
		scrollDownWEB();
		click(PWAComboOfferPage.objPrivacyPolicy, "Privacy Policy");
		switchToWindow(2);
		if (verifyElementPresent(PWAComboOfferPage.objPrivacyPolicyTitle, "Privacy Policy")) {
			logger.info("Navigated to Privacy Policy");
			extent.extentLoggerPass("", "Navigated to Privacy Policy");
			getWebDriver().close();
			switchToParentWindow();
		} else {
			logger.info("Not Navigated to Privacy Policy");
			extent.extentLoggerFail("", "Not Navigated to Privacy Policy");
		}
	}

	public void pwainsprint(String userType, String premiumPlan) throws Exception {
		if (userType.equals("NonSubscribedUser")) {
			// 5
			extent.HeaderChildNode("Verify that user is getting new subscription page while purchasing TVOD plan");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
			click(PWAHamburgerMenuPage.objTrailer, "Trailer");
			click(PWAComboOfferPage.objRentNowInConsumptionPage, "Rent Now");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objonlymovierent, "Only movie rent");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objrentmovie, "rent movie");
			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info("User should get new subscription page while purchasing TVOD plan,expected behaviour");
				extent.extentLoggerPass("",
						"User should get new subscription page while purchasing TVOD plan, expected behaviour");
				// Back(1);
			} else {
				logger.info("User not getting new subscription page while purchasing TVOD plan");
				extent.extentLoggerFail("", "User not getting  new subscription page while purchasing TVOD plan");
			}

			// 105
			extent.HeaderChildNode(
					"Verify that user is getting all the payment modes available for TVOD plan purchase");

			PWAIframe();
			verifyElementPresent(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			verifyElementPresent(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresent(PWAHamburgerMenuPage.objnetbanking, "Net banking");
			Back(1);
			Back(1);

			// 16
			extent.HeaderChildNode(
					"Verify that On entering card details of any credit card , Optional payment will be applicable");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");

			PWAIframe();
			// scrollToTopOfPageWEB();
			verifyElementPresentAndClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			verifyElementPresentAndClick(PWASubscriptionPages.objEnterCreditAndDebitCardDetails,
					"Enter Credit/Debit Card Details");
			type(PWASubscriptionPages.objEnterCreditAndDebitCardDetails, "6587", "Enter Credit/Debit Card Details");

			if (verifyElementPresent(PWASubscriptionPages.objWallets, "Wallets")) {
				logger.info(
						"Optional payment should be applicable if user enters any credit card details,expected behaviour");
				extent.extentLoggerPass("",
						"Optional payment should be applicable if user enters any credit card details,expected behaviour");
				// Back(1);
			} else {
				logger.info("Optional payment is not applicable if user enters any credit card details");
				extent.extentLoggerFail("",
						"Optional payment is not applicable if user enters any credit card details");
			}
			if (verifyElementPresent(PWAHamburgerMenuPage.objnetbanking, "Net banking")) {
				logger.info(
						"Optional payment should be applicable if user enters any credit card details,expected behaviour");
				extent.extentLoggerPass("",
						"Optional payment should be applicable if user enters any credit card details,expected behaviour");
				// Back(1);
			} else {
				logger.info("Optional payment is not applicable if user enters any credit card details");
				extent.extentLoggerFail("",
						"Optional payment is not applicable if user enters any credit card details");
			}

			// 106
			extent.HeaderChildNode(
					"Verify that user is able to purchase the TVOD plan using any available payment mode successfully");
			verifyElementPresentAndClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");

			Back(1);
			Back(1);

			// 12
			extent.HeaderChildNode(
					"Verify that on clicking  continue CTA user will get new screen Add credit card/Debit Card");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");

			PWAIframe();
			verifyElementPresent(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			if (checkElementDisplayed(PWASubscriptionPages.objCardNumber, "Enter Card Number Field")) {
				logger.info(
						"On clicking Continue user should get New screen to Add Credit card/Debit Card,expected behaviour");
				extent.extentLoggerPass("",
						"On clicking Continue user should get New screen to Add Credit card/Debit Card, expected behaviour");
				// Back(1);
			} else {
				logger.info("On clicking Continue user didnot navigated to New screen to Add Credit card/Debit Card");
				extent.extentLoggerFail("",
						"On clicking Continue user didnot navigated to New screen to Add Credit card/Debit Card");
			}

		}
		// 6
		if (userType.equals("Guest")) {

			extent.HeaderChildNode("Verify Guest user logged in with non subscribed use but already rented plex");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			verifyElementPresentAndClick(PWASubscriptionPages.objEmailIDTextField, "Email ID Text Field");
			waitTime(3000);
			type(PWASubscriptionPages.objEmailIDTextField, "zeetvodpass@g.co", "Email Id");

			hideKeyboard();
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted,
					"Proceed Button in Account Info Page Highlighted");
			waitTime(3000);
			// Password Popup
			verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
			waitTime(3000);

			// verifyElementPresent(PWASubscriptionPages.objProceedBtnDisabled, "Disabled
			// Proceed Button");
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
			waitTime(3000);

			type(PWASubscriptionPages.objPasswordFieldHidden, "123456", "Password Field");

			hideKeyboard();
			waitTime(3000);
			verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnEnabled, "Enabled Proceed Button");
			waitTime(5000);
			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info(
						"User should be redircted to Payment page and selected plan price should be displayed,expected behaviour");
				extent.extentLoggerPass("",
						"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
				// Back(1);
			} else {
				logger.info("User not redircted to Payment page and selected plan price should be displayed");
				extent.extentLoggerFail("",
						"User not redircted to Payment page and selected plan price should be displayed");
			}
			Back(1);

			Back(1);
			logout();

			// 9
			extent.HeaderChildNode(
					"Verify that user logged in with migrated premium user with expired Rental is redircetd "
							+ "to payment page on clicking Rent for Rs 299 CTA from Rental pop up");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "club1212@gmail.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
			click(PWAHamburgerMenuPage.objTrailer, "Trailer");
			click(PWAComboOfferPage.objRentNowInConsumptionPage, "Rent Now");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objonlymovierent, "Only movie rent");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objrentmovie, "rent movie");
			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info(
						"User should be redircted to Payment page and selected plan price should be displayed,expected behaviour");
				extent.extentLoggerPass("",
						"User should be redircted to Payment page and selected plan price should be displayed,expected behaviour");
				Back(1);
			} else {
				logger.info("User not redircted to Payment page and selected plan price should be displayed");
				extent.extentLoggerFail("",
						"User not redircted to Payment page and selected plan price should be displayed");
			}
		}

		if (userType.equals("SubscribedUser")) {
			// 5
			extent.HeaderChildNode("Verify Guest user logged in with subscribed user < 499 with active Radhe "
					+ "and clicks on Upgrade To 499 CTA from Upgrade To 499 pop up");
			logout();

			navigateToAnyScreenOnWeb("ZEEPLEX");
			ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
			click(PWAHamburgerMenuPage.objTrailer, "Trailer");
			click(PWAComboOfferPage.objRentNowInConsumptionPage, "Rent Now");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objrentmovie, "Rent button");
			PWAComboOfferLoginInSubscriptionFlow(userType, "299");
			if (premiumPlan.equalsIgnoreCase("299")) {
				PWAVerifyUpgradeToComboOfferPopup();
			}

			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info(
						"User should be redircted to Payment page and selected plan price should be displayed,expected behaviour");
				extent.extentLoggerPass("",
						"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
				Back(1);
			} else {
				logger.info("User not redircted to Payment page and selected plan price should be displayed");
				extent.extentLoggerFail("",
						"User not redircted to Payment page and selected plan price should be displayed");
			}
		}
	}

	// -------------------Satish Combo
	// Offer-----------------------------------------------------------------

	public void PWAComboOfferLoginInSubscriptionFlow(String userType, String premiumPlan) throws Exception {
		extent.HeaderChildNode("Combo Offer - Login In Subscription Flow");
		logger.info("Combo Offer - Login In Subscription Flow");
		waitTime(2000);
		if (premiumPlan.equals("799")) {
			PWALoginInSubscriptionFlow(getParameterFromXML("SubscribedUserName799"),
					getParameterFromXML("SubscribedPassword799"));
		} else if (premiumPlan.equals("999")) {
			PWALoginInSubscriptionFlow(getParameterFromXML("SubscribedUserName999"),
					getParameterFromXML("SubscribedPassword999"));
		} else if (premiumPlan.equals("299")) {
			PWALoginInSubscriptionFlow(getParameterFromXML("SubscribedUserName299"),
					getParameterFromXML("SubscribedPassword299"));
		} else if (premiumPlan.equals("499")) {
			PWALoginInSubscriptionFlow(getParameterFromXML("SubscribedUserName499"),
					getParameterFromXML("SubscribedPassword499"));
		} else if (premiumPlan.equals("99")) {
			PWALoginInSubscriptionFlow(getParameterFromXML("SubscribedUserName99"),
					getParameterFromXML("SubscribedPassword99"));
		} else if (premiumPlan.equals("749")) {
			PWALoginInSubscriptionFlow(getParameterFromXML("SubscribedUserName749"),
					getParameterFromXML("SubscribedPassword749"));
		} else if (premiumPlan.equals("599")) {
			PWALoginInSubscriptionFlow(getParameterFromXML("SubscribedUserName599"),
					getParameterFromXML("SubscribedPassword599"));
		} else {
			PWALoginInSubscriptionFlow(getParameterFromXML("SubscribedUserName"),
					getParameterFromXML("SubscribedPassword"));
		}
	}

	public void PWALoginInSubscriptionFlow(String userName, String password) throws Exception {
		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Page");
		waitTime(2000);
		type(PWASubscriptionPages.objEmailIDTextField, userName, "Email Id");
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnGuestCheckOut, "Continue Button");
		verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password");
		verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
		type(PWASubscriptionPages.objPasswordFieldHidden, password, "Password Field");
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnGuestCheckOut, "Continue Button");
	}

	public void PWAVerifyComboPopupRentMovieFor() throws Exception {
		extent.HeaderChildNode("Verifying Rent Movie For Popup");
		logger.info("Verifying Rent Movie For Popup");
		waitTime(5000);
		verifyElementPresent(PWAComboOfferPage.objRentMovieForTitle, "Rent Movie For Title");
		waitTime(3000);
		String currentPlanDescriptionText = getText(PWAComboOfferPage.objCurrentPlanTextDesc);
		verifyElementPresent(PWAComboOfferPage.objCurrentPlanTextDesc, currentPlanDescriptionText);
		waitTime(3000);
		verifyElementPresentAndClick(PWAComboOfferPage.objComboPopupRentMovieBtn, "Rent Movie Button");

	}

	public void PWAVerifyUpgradeToComboOfferPopup() throws Exception {
		extent.HeaderChildNode("Verifying Upgrade To Combo Offer Popup");
		logger.info("Verifying Upgrade To Combo Offer Popup");
		waitTime(5000);
		verifyElementPresent(PWAComboOfferPage.objUpgradeToComboOfferPopupTitle, "Upgrade To Combo Offer Popup Title");
		waitTime(3000);
		String currentPlanDescriptionText = getText(PWAComboOfferPage.objCurrentPlanTextDesc);
		verifyElementPresent(PWAComboOfferPage.objCurrentPlanTextDesc, currentPlanDescriptionText);
		waitTime(3000);
		verifyElementPresentAndClick(PWAComboOfferPage.objUpgradeToComboOfferPopupUpgradeBtn, "Upgrade Button");

	}

	/**
	 * Search For Content And Click On First Result
	 */
	public void PWASearchForContent(String contentName) throws Exception {
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		type(PWASearchPage.objSearchEditBox, contentName + "\n", "Search bar");
		waitTime(5000);
		waitForElementDisplayed(PWASearchPage.objFirstSearchedAssetTitle(contentName), 20);

	}

	public void PWAClickOnFirstSearchedResult(String contentName) throws Exception {

		waitTime(5000);
		String FirstSearchedAssetTitle = findElement(PWASearchPage.objFirstSearchedAssetTitle(contentName)).getText();
		click(PWASearchPage.objFirstSearchedAssetTitle(contentName),
				"First Searched Asset Title: " + FirstSearchedAssetTitle);

	}

	public void PWASearchEntryPointValidations(String userType, String premiumPlan, String CTAToBeClicked)
			throws Exception {

		extent.HeaderChildNode("Search Entry Point Validations");
		logger.info("Search Entry Point Validations");

		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		PWASearchForContent(getParameterFromXML("comboOfferMovie"));
		extent.extentLogger("ZEEPLEX Logo Validation",
				"TestCase 50:Verify, when user searches for TVOD[Combo Offer configurable Movie] contents plex logo should be visible");
		verifyElementPresent(
				PWASearchPage.objZEEPLEXLogoFirstSearchedAssetTitle(getParameterFromXML("comboOfferMovie")),
				"ZEEPLEX logo in metadata of searched TVOD: " + getParameterFromXML("comboOfferMovie"));
		PWAClickOnFirstSearchedResult(getParameterFromXML("comboOfferMovie"));
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (CTAToBeClicked.equalsIgnoreCase("Inline")) {
				validateConsumptionScreen();
				click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now CTA in-player");
			} else if (CTAToBeClicked.equalsIgnoreCase("BelowPlayer")) {
				validateConsumptionScreen();
				click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
			} else if (CTAToBeClicked.equalsIgnoreCase("KnowMore")) {
				validateConsumptionScreen();
				click(PWAComboOfferPage.objComboOfferWidget, "Combo Offer Wedget");
			}
			waitTime(2000);
			verifyComboScreen();
			verifyElementPresentAndClick(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
			waitTime(2000);
			if (userType.equals("Guest")) {
				PWAComboOfferLoginInSubscriptionFlow(userType, premiumPlan);
				if (premiumPlan.equalsIgnoreCase("799")) {
					PWAVerifyComboPopupRentMovieFor();
				} else if (premiumPlan.equalsIgnoreCase("299")) {
					PWAVerifyUpgradeToComboOfferPopup();
				} else {
					PWAVerifyComboPopupRentMovieFor();
				}
			}
			verifyElementPresent(PWASubscriptionPages.objPaymentHighlighted, "Make Payment Screen");
			navigateHome();
			if (userType.equals("Guest")) {
				logout();
			}
		} else if (userType.equals("SubscribedUser")) {
			waitTime(5000);
			if (waitForElementPresence(PWAPlayerPage.objResumePlayerCTA, 10, "Resume CTA on Player")) {
				verifyElementPresent(PWAPlayerPage.objResumePlayerCTA, "Resume CTA on Player");
			} else if (waitForElementPresence(PWAComboOfferPage.objWatchNowCTA, 10, "Watch Now CTA on Player")) {
				verifyElementPresent(PWAComboOfferPage.objWatchNowCTA, "Watch Now CTA on Player");
			}
		}
	}

	public void PWAZeePLEXPageEntryPointValidations(String userType, String premiumPlan, String CTAToBeClicked)
			throws Exception {
		extent.HeaderChildNode("Search Entry Point Validations");
		logger.info("Search Entry Point Validations");
		navigateToHome();
		mandatoryRegistrationPopUp(userType);
		navigationFromZeeplexScreen(CTAToBeClicked);
		verifyComboScreen();
		verifyElementPresentAndClick(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		waitTime(2000);
		PWAComboOfferLoginInSubscriptionFlow(userType, premiumPlan);
		if (premiumPlan.equalsIgnoreCase("799")) {
			PWAVerifyComboPopupRentMovieFor();
			zeePWAPaymentPageValidation();
		} else if (premiumPlan.equalsIgnoreCase("299")) {
			PWAVerifyUpgradeToComboOfferPopup();
			zeePWAPaymentPageValidation();
		} else {
			PWAVerifyComboPopupRentMovieFor();
			zeePWAPaymentPageValidation();
		}
		logout();
	}

	/**
	 * Kartheek
	 */

	public void ComboOfferPremiumPlexSub(String userType) throws Exception {
		// Text For Combo Offer On Subscription Page
		TextForComboOfferOnSubscriptionPage(userType);
		RadheComboOfferTextSubscriptionPage(userType);
		premiumBenefitsOnSubscriptionPage(userType);
		oneTimeRadheRentaltextIsDisplayed(userType);
		TextWithMoreThan(userType);
		yearPremiumPlanPostPurchasing(userType);
	}

	public void TextForComboOfferOnSubscriptionPage(String userType) throws Exception {

		extent.HeaderChildNode(
				"-----Verify that users are able to see the Text for Combo offer on subscription page----");
		logger.info("-----Verify that users are able to see the Text for Combo offer on subscription page----");
		navigateHome();
		mandatoryRegistrationPopUp(userType);
		waitTime(5000);
		click(PWAHomePage.objByPlan, "By Plan Button");
		waitTime(5000);
//			String TextForComboOffer = findElement(PWASubscriptionPages.objTextForComboOffer).getText();
//
//			if(TextForComboOffer.equals("Radhe Combo Offer")) {
//				logger.info("Page Title: " + TextForComboOffer + " is displayed");
//				extent.extentLoggerPass("Page Title","Page Title: " + TextForComboOffer + " is displayed");
//		}else {
//			logger.error("Page Title: " + TextForComboOffer + " is not displayed");
//			extent.extentLoggerFail("Page Title","Page Title: " + TextForComboOffer + " is not displayed");
//		}
	}

	public void RadheComboOfferTextSubscriptionPage(String userType) throws Exception {
		extent.HeaderChildNode("Verify that text for Radhe combo is displayed on on subscription page");
		logger.info("Verify that text for Radhe combo is displayed on on subscription page");
		String TextForComboOffer = findElement(PWASubscriptionPages.objTextForComboOffer).getText();

		if (TextForComboOffer.equals("Radhe Combo Offer")) {
			logger.info("Page Title: " + TextForComboOffer + " is displayed");
			extent.extentLoggerPass("Page Title", "Page Title: " + TextForComboOffer + " is displayed");
		} else {
			logger.error("Page Title: " + TextForComboOffer + " is not displayed");
			extent.extentLoggerFail("Page Title", "Page Title: " + TextForComboOffer + " is not displayed");
		}
	}

	public void premiumBenefitsOnSubscriptionPage(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify that Radhe combo offer text change is displayed under premium benefits on subscription page");
		logger.info(
				"Verify that Radhe combo offer text change is displayed under premium benefits on subscription page");
//		String TextForComboOffer = findElement(PWASubscriptionPages.objTextForComboOffer).getText();

		String comboRadheYearZee5Premium = findElement(PWASubscriptionPages.objComboRadheYearZee5Premium).getText();

		String BlockbusterMovie = findElement(PWASubscriptionPages.objBlockbusterMovie).getText();

		String PlushWebSeries = findElement(PWASubscriptionPages.obj200PlushWebSeries).getText();

		String WatchBeforeTv = findElement(PWASubscriptionPages.objWatchBeforeTv).getText();

		String WatchAddFree = findElement(PWASubscriptionPages.objWatchAddFree).getText();

		if (comboRadheYearZee5Premium.equals("Radhe + 1 Year ZEE5 Premium")) {
			logger.info("Combo " + comboRadheYearZee5Premium + " is displayed");
			extent.extentLoggerPass("Combo", "Combo " + comboRadheYearZee5Premium + " is displayed");
		} else {
			logger.error("Combo " + comboRadheYearZee5Premium + " is not displayed");
			extent.extentLoggerFail("Combo", "Combo " + comboRadheYearZee5Premium + " is not displayed");
		}

		if (BlockbusterMovie.equals("Blockbuster Movies")) {
			logger.info("4500+ " + BlockbusterMovie + " is displayed");
			extent.extentLoggerPass("4500+", "4500+ " + BlockbusterMovie + " is displayed");
		} else {
			logger.error("4500+ " + BlockbusterMovie + " is not displayed");
			extent.extentLoggerFail("4500+", "4500+ " + BlockbusterMovie + " is not displayed");
		}
		if (PlushWebSeries.equals("Web Series")) {
			logger.info("200+ " + PlushWebSeries + " is displayed");
			extent.extentLoggerPass("200+", "200+ " + PlushWebSeries + " is displayed");
		} else {
			logger.error("200+ " + PlushWebSeries + " is not displayed");
			extent.extentLoggerFail("200+", "200+ " + PlushWebSeries + " is not displayed");
		}
		if (WatchBeforeTv.equals("Before TV")) {
			logger.info("Watch " + WatchBeforeTv + " is displayed");
			extent.extentLoggerPass("Watch", "Watch " + WatchBeforeTv + " is displayed");
		} else {
			logger.error("Watch " + WatchBeforeTv + " is not displayed");
			extent.extentLoggerFail("Watch", "Watch " + WatchBeforeTv + " is not displayed");
		}
		if (WatchAddFree.equals("Watch Ad-free")) {
			logger.info("Watch " + WatchAddFree + " is displayed");
			extent.extentLoggerPass("Watch", "Watch " + WatchAddFree + " is displayed");
		} else {
			logger.error("Watch " + WatchAddFree + " is not displayed");
			extent.extentLoggerFail("Watch", "Watch " + WatchAddFree + " is not displayed");
		}
	}

	public void yearPremiumPlanPostPurchasing(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify that Radhe combo offer text change is displayed under premium benefits on subscription page");
		logger.info(
				"Verify that Radhe combo offer text change is displayed under premium benefits on subscription page");
		click(PWASubscriptionPages.objCancleButton, "Cancle Button");
		waitTime(3000);
		click(PWASubscriptionPages.objContinueWith499, "Continue With 499");
		waitTime(3000);
		click(PWASubscriptionPages.objLoginButton, "Login Button");
		waitTime(4000);
		String Username = getParameterFromXML("NonsubscribedUserName");
		String Password = getParameterFromXML("NonsubscribedPassword");
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, Username, "Email Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, Password, "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(10000);
		click(PWASubscriptionPages.objContinueWith499, "Continue With 499");
		waitTime(5000);
		if (verifyElementExist(PWASubscriptionPages.objMakePayment, "Make Payment")) {
			extent.extentLoggerPass("", "Make Payment page is displayed");
			logger.info("Make Payment page is displayed");
		} else {
			extent.extentLoggerFail("", "Make Payment page is not displayed");
			logger.error("Make Payment page is not displayed");
		}
	}

	public void TextWithMoreThan(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify that Radhe combo offer text change is displayed instead of Existing text: with more than");
		logger.info("Verify that Radhe combo offer text change is displayed instead of Existing text: with more than");
		click(PWASubscriptionPages.objCancleButton, "Cancle Button");
		waitTime(5000);
		click(PWASubscriptionPages.objComboRadheYearZee5Premium, "Combo Radhe Year Zee5 Premium");
		waitTime(3000);
		String Description = findElement(PWASubscriptionPages.objDescriptionComboRadheYearZee5Premium).getText();
		if (Description.equals(
				"One time Radhe ZEEPLEX Rental: Watch Salman's Latest Blockbuster Radhe with rental validity of 21 Days, watch time validity of 4 hours. Standard ZEEPLEX rental *terms and conditions applicable. Radhe releasing on 13th May 2021 at 12 noon.")) {
			logger.info("Watch " + Description + " is displayed");
			extent.extentLoggerPass("Watch", "Watch " + Description + " is displayed");
		} else {
			logger.error("Watch " + Description + " is not displayed");
			extent.extentLoggerFail("Watch", "Watch " + Description + " is not displayed");
		}
	}

	public void oneTimeRadheRentaltextIsDisplayed(String userType) throws Exception {
		extent.HeaderChildNode("Verify that Inside Blockbuster bottom sheet one time Radhe Rental text is displayed");
		logger.info("Verify that Inside Blockbuster bottom sheet one time Radhe Rental text is displayed");
		click(PWASubscriptionPages.objBlockbusterMovie, "Blockbuster Movie");
		waitTime(3000);
		String oneTimeRadheZEEPLEXRentalText = findElement(PWASubscriptionPages.objOneTimeRadheZEEPLEXRentalText)
				.getText();
		if (oneTimeRadheZEEPLEXRentalText.equals("4500+ Blockbuster Movies")) {
			logger.info("" + oneTimeRadheZEEPLEXRentalText + " is displayed");
			extent.extentLoggerPass("", " " + oneTimeRadheZEEPLEXRentalText + " is displayed");
		} else {
			logger.error("" + oneTimeRadheZEEPLEXRentalText + " is not displayed");
			extent.extentLoggerFail("", "" + oneTimeRadheZEEPLEXRentalText + " is not displayed");
		}
	}

	public void PWAValidatingPlaybackAndConcurrency() throws Exception {
		if (userType.equals("NonSubscribedUser")) {
			logout();
			PlayerPostPurchase();
//			PlayerControls();
//			CastScreen();
			ExpiredContentValidation();
			Ads();
			CrossDeviceValidation();
		}

	}

	public void PWAVerifyPlaybackAndConcurrency() throws Exception {
		extent.HeaderChildNode(
				"\"Verify if user is able to see \"Please note before you start\" popup on player consumption screen");
		logger.info(
				"Verify if user is able to see \"Please note before you start\" popup on player consumption screen");

		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objTabName("Rent"), "Rent now tab");
		waitTime(3000);
		scrollToElement(PWAComboOfferPage.objWatchNowCTA);
		extent.HeaderChildNode("Verify user is able to see the Watch Now CTA for the rented plex movie.");
		logger.info("Verify user is able to see the Watch Now CTA for the rented plex movie.");

		if (verifyElementDisplayed(PWAComboOfferPage.objWatchNowCTA)) {
			logger.info("user is able to see the Watch Now CTA for the rented plex movie.");
			extent.extentLoggerPass("", "user is able to see the Watch Now CTA for the rented plex movie.");
		} else {
			logger.error("user is not able to see the Watch Now CTA for the rented plex movie.");
			extent.extentLoggerFail("", "user is not able to see the Watch Now CTA for the rented plex movie.");
		}
		click(PWAComboOfferPage.objWatchNowCTA, "Watch Now");
		waitTime(3000);
		extent.HeaderChildNode("Verify if user taps on Watch now CTA then \"Please note before you start \"  -->");
		logger.info("Verify if user taps on Watch now CTA then \"Please note before you start \"  -->");

		click(PWAPlayerPage.objWatchNowPlayerCTA, "Watch Now");
		if (verifyElementDisplayed(PWAPlayerPage.objPleaseNoteBeforeYouStartPopUP)) {
			logger.info("Please Note Before You Start Pop up screen is displayed");
			extent.extentLoggerPass("", "Please Note Before You Start Pop up screen is displayed");
			if (verifyElementDisplayed(PWAPlayerPage.objAgreeAndWatchNowCTA)) {
				logger.info("User is able to see Agree & Start watching CTA");
				extent.extentLoggerPass("", "User is able to see Agree & Start watching CTA");
			} else {
				logger.error("User is not able to see Agree & Start watching CTA");
				extent.extentLoggerFail("", "User is not able to see Agree & Start watching CTA");
			}
		} else {
			logger.error("Please Note Before You Start Pop up screen is not displayed");
			extent.extentLoggerFail("", "Please Note Before You Start Pop up screen is not displayed");
		}

		extent.HeaderChildNode(
				"Verify if user is able to see close option on \"Please note before you start\" popup on player consumption screen and Verify if the close option on the \"Please note before you start\" popup");
		logger.info(
				"Verify if user is able to see close option on \"Please note before you start\" popup on player consumption screen and Verify if the close option on the \"Please note before you start\" popup");

		if (verifyElementDisplayed(PWAPlayerPage.objPopUpCloseIcon)) {
			logger.info("Please Note Before You Start Pop up close icon is displayed");
			extent.extentLoggerPass("", "Please Note Before You Start Pop up close icon  is displayed");
		} else {
			logger.error("Please Note Before You Start Pop up close icon is not displayed");
			extent.extentLoggerFail("", "Please Note Before You Start Pop up close icon is not displayed");
		}

		click(PWAPlayerPage.objPopUpCloseIcon, "Close Icon");
		if (verifyElementDisplayed(PWAPlayerPage.objWatchNowPlayerCTA)) {
			logger.info(
					"User is able to close the popup and land on player consumption screen with watch now CTA on player screen");
			extent.extentLoggerPass("",
					"User is able to close the popup and land on player consumption screen with watch now CTA on player screen");
		} else {
			logger.error("User is not able to close the popup and land on player consumption screen.");
			extent.extentLoggerFail("", "User is not able to close the popup and land on player consumption screen.");
		}

		extent.HeaderChildNode(
				"Verify if the parental pin is asked post the \"Please note before you start\" popup if user has Parental pin set");
		logger.info(
				"Verify if the parental pin is asked post the \"Please note before you start\" popup if user has Parental pin set");

		click(PWAPlayerPage.objWatchNowPlayerCTA, "Watch Now");
		click(PWAPlayerPage.objAgreeAndWatchNowCTA, "Agree and Watch now CTA");
		waitTime(3000);

		if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field")) {
			logger.info("Parental pin pop up is displayed post accepting the \"Please note before you start\" popup");
			extent.extentLoggerPass("",
					"Parental pin pop up is displayed post accepting the \\\"Please note before you start\\\" popup");
			type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin2player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin3player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin4player, "1", "ParentalLockPin");
			waitTime(4000);

		} else {
			logger.info(
					"Parental pin pop up is not displayed post accepting the \"Please note before you start\" popup");
			extent.extentLoggerPass("",
					"Parental pin pop up is not displayed post accepting the \\\"Please note before you start\\\" popup");
		}

		extent.HeaderChildNode("\"Verify where plex logo and content expiry information is displayed on the \r\n"
				+ "  plex consumption screen.\"");
		logger.info("\"Verify where plex logo and content expiry information is displayed on the \r\n"
				+ "  plex consumption screen.\"");
		if (verifyElementDisplayed(PWAPlayerPage.objZeePlexLogo)
				&& verifyElementDisplayed(PWAPlayerPage.objContentExpiryInfo)) {
			logger.info(
					"Plex logo and content expiry information (expires in 2 days) is displayed on the plex consumption screen.");
			extent.extentLoggerPass("",
					"Plex logo and content expiry information (expires in 2 days) is displayed on the plex consumption screen.");
		} else {
			logger.error(
					"Plex logo and content expiry information (expires in 2 days) is not displayed on the plex consumption screen.");
			extent.extentLoggerFail("",
					"Plex logo and content expiry information (expires in 2 days) is not displayed on the plex consumption screen.");
		}

		waitTime(2000);
		extent.HeaderChildNode("Verify if user is able to watch the content on clicking Agree & start watching");
		logger.info("Verify if user is able to watch the content on clicking Agree & start watching");

		if (verifyElementDisplayed(PWAPlayerPage.objPlayerBottomBar)) {
			logger.info("user is able to watch the content on clicking Agree & start watching");
			extent.extentLoggerPass("", "user is able to watch the content on clicking Agree & start watching");
		} else {
			logger.error("user is not able to watch the content on clicking Agree & start watching");
			extent.extentLoggerFail("", "user is not able to watch the content on clicking Agree & start watching");
		}

		extent.HeaderChildNode("verify if user is clicking on watch trailer CTA below the player");
		logger.info("verify if user is clicking on watch trailer CTA below the player");

		waitTime(2000);
		scrollToElement(PWAPlayerPage.objWatchTrailer);
		if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field")) {
			logger.info("Parental pin pop up is displayed post accepting the \"Please note before you start\" popup");
			extent.extentLoggerPass("",
					"Parental pin pop up is displayed post accepting the \\\"Please note before you start\\\" popup");
			type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin2player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin3player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin4player, "1", "ParentalLockPin");
			waitTime(4000);

		} else {
			logger.info(
					"Parental pin pop up is not displayed post accepting the \"Please note before you start\" popup");
			extent.extentLoggerPass("",
					"Parental pin pop up is not displayed post accepting the \\\"Please note before you start\\\" popup");
		}
		waitTime(2000);
		if (verifyElementDisplayed(PWAPlayerPage.objTrailerText)) {
			logger.info("User is able to see the trailer playback on the consumption screen");
			extent.extentLoggerPass("", "User is able to see the trailer playback on the consumption screen");
		} else {
			logger.error("User is not able to see the trailer playback on the consumption screen");
			extent.extentLoggerFail("", "User is not able to see the trailer playback on the consumption screen");
		}

		extent.HeaderChildNode(
				"Verify if the plex content is playing after the trailer playback on clicking watch trailer CTA from consumption screen");
		logger.info(
				"Verify if the plex content is playing after the trailer playback on clicking watch trailer CTA from consumption screen");

		if (verifyElementNotPresent(PWAPlayerPage.objRentNow, 10)) {
			logger.info(
					"User does not see any Rent now CTA while trailer playback and Plex movie should start playing");
			extent.extentLoggerPass("",
					"User does not see any Rent now CTA while trailer playback and Plex movie should start playing");
		} else {
			logger.error(
					"User is able to see any Rent now CTA while trailer playback and Plex movie should start playing");
			extent.extentLoggerFail("",
					"User is able to see any Rent now CTA while trailer playback and Plex movie should start playing");
		}

		extent.HeaderChildNode("Verify if the user is able to see the timer and zeeplex logo below the player");
		logger.info("Verify if the user is able to see the timer and zeeplex logo below the player");

		if (verifyElementDisplayed(PWAPlayerPage.objZeePlexLogo)
				&& verifyElementDisplayed(PWAPlayerPage.objContentExpiryInfo)) {
			logger.info("user is able to see the timer and zeeplex logo below the player");
			extent.extentLoggerPass("", "user is able to see the timer and zeeplex logo below the player");
		} else {
			logger.error("user is not able to see the timer and zeeplex logo below the player");
			extent.extentLoggerFail("", "user is not able to see the timer and zeeplex logo below the player");
		}

	}

//		public void PlayerControls() throws Exception {
//
//			extent.HeaderChildNode("Verify if user is able to see the player controls on the player");
//			logger.info("Verify if user is able to see the player controls on the player");
//
//			mouseHover();
//			if(verifyIsElementDisplayed(PWAPlayerPage.objPlayerPause)&&verifyIsElementDisplayed(PWAPlayerPage.forward10SecBtn)&&verifyIsElementDisplayed(PWAPlayerPage.rewind10SecBtn))
//				{logger.info("user is able to see the player controls on the player");
//			extent.extentLoggerPass("", "user is able to see the player controls on the player");
//		}else {
//			logger.error("user is not able to see the player controls on the player");
//			extent.extentLoggerFail("", "user is not able to see the player controls on the player");
//		}
//
//			extent.HeaderChildNode("Verify if user clicks on play icon");
//			logger.info("Verify if user clicks on play icon");
//
//			mouseHover();
//
//			if(verifyIsElementDisplayed(PWAPlayerPage.objPlayerPause)&&verifyIsElementDisplayed(PWAPlayerPage.forward10SecBtn)&&verifyIsElementDisplayed(PWAPlayerPage.rewind10SecBtn))
//				{logger.info("User is able to play the content and show the pause icon");
//			extent.extentLoggerPass("", "User is able to play the content and show the pause icon");
//		}else {
//			logger.error("User is not able to play the content and show the pause icon");
//			extent.extentLoggerFail("", "User is not able to play the content and show the pause icon");
//		}
//
//
//			extent.HeaderChildNode("Verify if user clicks on pause icon");
//			logger.info("Verify if user clicks on pause icon");
//
//		mouseHover();
//			click(PWAPlayerPage.objPlayerPause, "Pause icon");
//			if(verifyIsElementDisplayed(PWAPlayerPage.objPlayerPause)&&verifyIsElementDisplayed(PWAPlayerPage.forward10SecBtn)&&verifyIsElementDisplayed(PWAPlayerPage.rewind10SecBtn))
//				{logger.info("User is able to pause the content and show the pause icon");
//			extent.extentLoggerPass("", "User is able to pause the content and show the pause icon");
//		}else {
//			logger.error("User is not able to pause the content and show the pause icon");
//			extent.extentLoggerFail("", "User is not able to pause the content and show the pause icon");
//		}
//
//
//	}

	public void CastScreen() throws Exception {
		extent.HeaderChildNode("Verify if cast option is displaying on the TVOD content player on right top corner");
		logger.info("Verify if cast option is displaying on the TVOD content player on right top corner");

		verifyElementPresent(PWAPlayerPage.objChromecastButton,
				"cast option on the TVOD content player on right top corner");

	}

	public void TVODComboLogin() throws Exception {
		extent.HeaderChildNode("Login");
		extent.extentLogger("", "Login through TVOD User");
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(5000);
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "tvod_combo@mailnesia.com", "Email Field");
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "123456", "Password field");
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(5000);
	}

	public void pwasubscription(String userType, String premiumPlan) throws Exception {

		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			// 11,12
			if (userType.equals("NonSubscribedUser")) {
				extent.HeaderChildNode(
						"Verify logged in non subscribed user clicks on Continue with Rs 499 CTA on subscriiption page");
			}
			if (userType.equals("Guest")) {
				extent.HeaderChildNode("Verify Guest user logged in with non subscribed user with active Radhe "
						+ "and clicks on Buy Premium CTA from Already Rented ZEEPLEX pop up");
			}
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWAHamburgerMenuPage.obj499pack, "499 pack");
			String packprice = getText(PWAHamburgerMenuPage.obj499pack);
			String packprice1 = "?" + packprice;
			System.out.println(packprice1);
			extent.extentLogger("", "selected pack price : " + packprice1);
			verifyElementPresent(PWASubscriptionPages.objContinueBtn, "Continue Button");
			JSClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			if (userType.equals("Guest")) {
				accountinfopage();
			}
			waitTime(5000);
			checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
			verifyElementPresent(PWAHamburgerMenuPage.objplanpriceinpaymentpage, "Plan price ");
			String packpriceinpaymentpage = getText(PWAHamburgerMenuPage.objplanpriceinpaymentpage);
			System.out.println(packpriceinpaymentpage);
			extent.extentLogger("", " pack price in payment page : " + packpriceinpaymentpage);
			waitTime(5000);
			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info(
						"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour"
								+ packpriceinpaymentpage);
				extent.extentLoggerPass("",
						"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour"
								+ packpriceinpaymentpage);
			} else {
				logger.info("User not redircted to Payment page .");
				extent.extentLoggerFail(" ", "User not redircted to Payment page .");

			}
		}

		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");

		if (userType.equals("Guest")) {
			// 13
			extent.HeaderChildNode("Verify Guest user logged in with non subscribed user with No active Plex and "
					+ "clicks on Buy combo offer for 499 CTA from combo offer page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			boolean trailerdisplayed = false;
			for (int i = 0; i < 3; i++) {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objTrailer, "ZeePlex movie Trailer")) {
					trailerdisplayed = true;
					break;
				} else {
					partialScroll();
					logger.info("Swiped page..");
					extent.extentLogger("", "Swiped page..");
				}
			}
			if (trailerdisplayed) {
				ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
				click(PWAHamburgerMenuPage.objTrailer, "Trailer");
				waitTime(5000);
				if (verifyElementPresent(PWAComboOfferPage.objRentNowInConsumptionPage, "Rent now")) {

					ScrollToTheElementWEB(PWAComboOfferPage.objRentNowInConsumptionPage);
					click(PWAComboOfferPage.objRentNowInConsumptionPage, "Rent Now");
					verifyElementPresentAndClick(PWAComboOfferPage.objpackprice499, "499 pack price");
					verifyElementPresent(PWAComboOfferPage.objcomboofferpage, "Combo Offer Page");
					verifyElementPresentAndClick(PWAComboOfferPage.objbuycta, "Buy cta");
					checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
					verifyElementPresent(PWAHamburgerMenuPage.objplanpriceinpaymentpage, "Plan price ");
					String packpriceinpaymentpage = getText(PWAHamburgerMenuPage.objplanpriceinpaymentpage);
					System.out.println(packpriceinpaymentpage);
					extent.extentLogger("", " pack price in payment page : " + packpriceinpaymentpage);
					waitTime(5000);

					if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
						logger.info(
								"User should be redircted to Payment page and selected plan price should be displayed , expected behaviour"
										+ packpriceinpaymentpage);
						extent.extentLoggerPass("",
								"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour"
										+ packpriceinpaymentpage);
					} else {
						logger.info("User not redircted to Payment page .");
						extent.extentLoggerFail(" ", "User not redircted to Payment page .");

					}
					Back(1);
					Back(1);
					logout();
				}

			}

		}

		if (userType.equals("SubscribedUser")) { // 14 extent.
			extent.HeaderChildNode(
					"Verify that logged in RSVOD user is redirected to payment page on clicking Upgradeto 499 CTA");
			navigateHome();
			logout();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			boolean trailerdisplayed = false;
			for (int i = 0; i < 3; i++) {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objTrailer, "ZeePlex movie Trailer")) {
					trailerdisplayed = true;
					break;
				} else {
					partialScroll();
					logger.info("Swiped page..");
					extent.extentLogger("", "Swiped page..");
				}
			}
			if (trailerdisplayed) {
				ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
				click(PWAHamburgerMenuPage.objTrailer, "Trailer");
				waitTime(5000);
				if (checkElementDisplayed(PWAComboOfferPage.objRentNowInConsumptionPage, "Rent Now")) {
					ScrollToTheElementWEB(PWAComboOfferPage.objRentNowInConsumptionPage);
					click(PWAComboOfferPage.objRentNowInConsumptionPage, "Rent Now");
					// verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue
					// Button");
					verifyElementPresentAndClick(PWAComboOfferPage.objbuycta, "Buy cta");
					PWAComboOfferLoginInSubscriptionFlow(userType, "299");
					if (premiumPlan.equalsIgnoreCase("299")) {
						PWAVerifyUpgradeToComboOfferPopup();
					}
					// verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn,"upgrade
					// Button"); //
					if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
						logger.info(
								"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
						extent.extentLoggerPass("",
								"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
					} else {
						logger.info("User not redircted to Payment page .");
						extent.extentLoggerFail(" ", "User not redircted to Payment page .");

					}
					navigateHome();

				}

			}

		}

//		if (userType.equals("NonSubscribedUser")) {
//			// 15
//			extent.HeaderChildNode("Verify that logged in user is redircted to payment page on clicking "
//					+ "Rent for INR CTA other than Radhe TVOD");
//			navigateToAnyScreenOnWeb("ZEEPLEX");
//			boolean trailerdisplayed = false;
//			for (int i = 0; i < 3; i++) {
//				if (checkElementDisplayed(PWAHamburgerMenuPage.objTrailer, "ZeePlex movie Trailer")) {
//					trailerdisplayed = true;
//					break;
//				} else {
//					partialScroll();
//					logger.info("Swiped page..");
//					extent.extentLogger("", "Swiped page..");
//				}
//			}
//			if (trailerdisplayed) {
//
//				// click(PWAHamburgerMenuPage.objTrailer, "Trailer");
//				waitTime(5000);
//				if (verifyElementPresent(PWAHamburgerMenuPage.objrentforINR, "Rent For INR")) {
//					ScrollToTheElementWEB(PWAHamburgerMenuPage.objrentforINR);
//					click(PWAHamburgerMenuPage.objrentnowinlandingpage, "Rent For INR");
//					verifyElementPresent(PWAHamburgerMenuPage.objrentforINRpopup, "Rental Pop Up");
//					JSClick(PWAHamburgerMenuPage.objrentforINRpopup, "Rent for INR");
//					// checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment
//					// Section");
//
//					if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
//						logger.info(
//								"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
//						extent.extentLoggerPass("",
//								"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
//					} else {
//						logger.info("User not redircted to Payment page .");
//						extent.extentLoggerFail(" ", "User not redircted to Payment page .");
//
//					}
//					Back(1);
//					Back(1);
//				}
//			}
//		}

		if (userType.equals("NonSubscribedUser")) {
			// 16
			extent.HeaderChildNode("Verify that user is able to see Credit card /Debit  Card tile");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWAHamburgerMenuPage.obj499pack, "499 pack");
			String packprice = getText(PWAHamburgerMenuPage.obj499pack);
			String packprice1 = "?" + packprice;
			extent.extentLogger("", "selected pack price : " + packprice1);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			waitTime(5000);
			String creditcard = getText(PWASubscriptionPages.objCreditAndDebitCardBtn);
			extent.extentLogger("", "credit / Debit card: " + creditcard);
			if (creditcard.contentEquals("Credit / Debit Card")) {
				logger.info("User should be able to see Credit card/Debit card Tile as per VD, expected behaviour");
				extent.extentLoggerPass("",
						"User should be able to see Credit card/Debit card Tile as per VD, expected behaviour");
			} else {
				logger.info("User not able to see Credit card/Debit card Tile as per VD.");
				extent.extentLoggerFail(" ", "User not able to see Credit card/Debit card Tile as per VD.");

			}
			Back(1);
			Back(1);
		}
	}

	public void pwavalidatingpaymentpage(String userType) throws Exception {

		if (userType.equals("NonSubscribedUser")) {
			// 17
			extent.HeaderChildNode(
					"Verify that user is able to see Credit card /Debit  Card Card Number , Expiry , CVV , Save this card for faster payment.");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWAHamburgerMenuPage.obj499pack, "499 pack");
			String packprice = getText(PWAHamburgerMenuPage.obj499pack);
			String packprice1 = "?" + packprice;
			extent.extentLogger("", "selected pack price : " + packprice1);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");

			PWAIframe();

			verifyElementPresentAndClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			waitTime(5000);
			String creditcard = getText(PWASubscriptionPages.objCreditAndDebitCardBtn);
			extent.extentLogger("", "credit / Debit card: " + creditcard);

			verifyElementPresentAndClick(PWASubscriptionPages.objEnterCreditAndDebitCardDetails,
					"Enter Credit/Debit Card Details");

			verifyElementPresent(PWASubscriptionPages.objCardNumber, "Enter Card Number Field");
			type(PWASubscriptionPages.objEnterCreditAndDebitCardDetails, "6522360047186261", "Enter Card Number Field");
			verifyElementPresent(PWASubscriptionPages.objExpiry, "Expiry Field");
			verifyElementPresent(PWASubscriptionPages.objEnterExpiry, "Enter Expiry Field");
			type(PWASubscriptionPages.objEnterExpiry, "0225", "Enter Expiry Field");
			verifyElementPresent(PWASubscriptionPages.objCVV, "CVV Field");
			verifyElementPresent(PWASubscriptionPages.objEnterCVV, "Enter CVV Field");
			type(PWASubscriptionPages.objEnterCVV, "663", "Enter CVV Field");
			verifyElementPresent(PWASubscriptionPages.objCreditDebitProceedToPay, "Proceed To Pay Button");
			extent.HeaderChildNode("Verify that user is able to Check /Uncheck the checkBox");
			verifyElementPresent(PWASubscriptionPages.objsavethiscard, "Save this card for faster payment");
			click(PWASubscriptionPages.objsavethiscard, "Save this card for faster payment");
			click(PWASubscriptionPages.objsavethiscard, "Save this card for faster payment");

			// 39
			extent.HeaderChildNode("Verify that on entering valid Card details , Pay Now CTA will get enabled");
			if (getWebDriver().findElement(PWASubscriptionPages.objCreditDebitProceedToPay).isEnabled() == true) {
				logger.info("On entering Valid card details , PAY NOW CTA will get enabled,expected behaviour.");
				extent.extentLoggerPass("",
						"On entering Valid card details , PAY NOW CTA will get enabled, expected behaviour.");
			} else {
				logger.info("On entering Valid card details , PAY NOW CTA isdisabled");
				extent.extentLoggerFail(" ", "On entering Valid card details , PAY NOW CTA isdisabled");

			}

			// 18
			extent.HeaderChildNode("Verify that User will redirect to Verify Bank OTP screen");
			click(PWASubscriptionPages.objCreditDebitProceedToPay, "Proceed To Pay Button");
			// 19
			extent.HeaderChildNode("Verify that User will redirect to Verify Bank OTP screen");
			waitTime(5000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objotpscreen, "OTP screen")) {
				logger.info(
						"User should redirect to Bank OTP verification screen after clicking Pay Now, expected behaviour");
				extent.extentLoggerPass("",
						"User should redirect to Bank OTP verification screen after clicking Pay Now, expected behaviour");
			} else {
				logger.info("User not redirect to Bank OTP verification screen after clicking Pay Now.");
				extent.extentLoggerFail(" ",
						"User not redirect to Bank OTP verification screen after clicking Pay Now.");

			}
			Back(1);
		}

		if (userType.equals("NonSubscribedUser")) {
			// 1
			extent.HeaderChildNode(
					"Verify Whether User is able to see 6 popular bank details under netbanking with More banks CTA");
			navigateHome();
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWAHamburgerMenuPage.obj499pack, "499 pack");
			String packprice = getText(PWAHamburgerMenuPage.obj499pack);
			String packprice1 = "?" + packprice;
			extent.extentLogger("", "selected pack price : " + packprice1);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");

			PWAIframe();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking, "Net banking");
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objlistofbanks, "List of banks");
			int listofbanks = getCountweb(PWAHamburgerMenuPage.objlistofbanks);
			System.out.println(listofbanks);
			extent.extentLogger("", "List of banks : " + listofbanks);
			waitTime(3000);
			if (listofbanks == 6) {
				logger.info("User should be able to see 6 popular bank details under netbanking, expected behaviour");
				extent.extentLoggerPass("",
						"User should be able to see 6 popular bank details under netbanking, expected behaviour");
			} else {
				logger.info("User not able to see 6 popular bank details under netbanking");
				extent.extentLoggerFail(" ", "User not able to see 6 popular bank details under netbanking");

			}
			// 2
			extent.HeaderChildNode("Verify Whether Search bar is displayed in list of bank page");
			if (verifyElementPresent(PWAHamburgerMenuPage.objsearchbarinnetbanking, "Search bar in netbanking")) {
				logger.info("User should be able to see search bar in top of list of bank page, expected behaviour");
				extent.extentLoggerPass("",
						"User should be able to see search bar in top of list of bank page, expected behaviour");
			} else {
				logger.info("User not able to see search bar in top of list of bank page");
				extent.extentLoggerFail(" ", "User not able to see search bar in top of list of bank page");

			}
			// 3
			extent.HeaderChildNode(
					"Verify Whether user navigates to bank page on clicking bank name from search result");
			type(PWAHamburgerMenuPage.objsearchbarinnetbanking, "Axis", "Search bar in netbanking");
			verifyElementPresent(PWAHamburgerMenuPage.objPaymentoption("Axis Bank"), "Payment option");
			String bankname = getText(PWAHamburgerMenuPage.objPaymentoption("Axis Bank"));
			System.out.println(bankname);
			extent.extentLogger("", "Bank Name : " + bankname);
			if (bankname.contentEquals("Axis Bank")) {
				logger.info(
						"User should redirect to bank page on clicking bank name in search result, expected behaviour");
				extent.extentLoggerPass("",
						"User should redirect to bank page on clicking bank name in search result, expected behaviour");
			} else {
				logger.info("User not redirect to bank page on clicking bank name in search result");
				extent.extentLoggerFail(" ", "User not redirect to bank page on clicking bank name in search result");

			}

			// 4
			extent.HeaderChildNode(
					"Verify that user is able to the select the UPI payment mode while purchasing non recurring plan");
			Back(1);
			verifyElementPresent(PWASubscriptionPages.objContinueBtn, "Continue Button");
			JSClick(PWASubscriptionPages.objContinueBtn, "Continue Button");

			PWAIframe();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("UPI"), "Payment option");
			if (verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext("Generate QR Code"), "Generate QR Code")) {
				logger.info(
						"User should be able to select UPI payment option for non recurring plan, expected behaviour");
				extent.extentLoggerPass("",
						"User should be able to select UPI payment option for non recurring plan, expected behaviour");
			} else {
				logger.info("User not able to select UPI payment option for non recurring plan");
				extent.extentLoggerFail(" ", "User not able to select UPI payment option for non recurring plan");

			}
			// 5
			extent.HeaderChildNode("Verify the elements on the UPI payment mode section");
			// click(PWAHamburgerMenuPage.objPaymentoption("UPI"),"Payment option");
			verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext("Scan QR from your UPI App"),
					"Scan QR from your UPI App");
			verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext(
					"Scan the QR using any UPI app on your mobile phone like PhonePe, Paytm, GooglePay, BHIM, etc"),
					"Scan the QR using any UPI app on your mobile phone like PhonePe, Paytm, GooglePay, BHIM, etc");
			verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext("Generate QR Code"), "Generate QR Code");
			verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext("Enter UPI ID"), "Enter UPI ID");
			verifyElementPresent(PWAHamburgerMenuPage.objupiproceedtopay, "Procced to pay");
			// 6
			extent.HeaderChildNode("Verify that user is able to select Enter UPI ID option as well");
			verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext("Enter UPI ID"), "Enter UPI ID");
			click(PWAHamburgerMenuPage.objenterupiid, "Enter upi Details");
			type(PWAHamburgerMenuPage.objenterupiid, "866@upi", "Email Field");
			String upiid = findElement(PWAHamburgerMenuPage.objenterupiid).getAttribute("value");
			System.out.println(upiid);
			if (upiid.contains("866@upi")) {
				logger.info("User should be able to Enter UPI ID , expected behaviour");
				extent.extentLoggerPass("", "User should be able to Enter UPI ID, expected behaviour");
			} else {
				logger.info("User is not able to Enter UPI ID");
				extent.extentLoggerFail(" ", "User is not able to Enter UPI ID");
			}
			// 7
			extent.HeaderChildNode("Verify that user is able to click on Generate QR CTA");
			click(PWAHamburgerMenuPage.objscanorcodetext("Generate QR Code"), "Generate QR Code");
			verifyElementPresent(PWAHamburgerMenuPage.objscanandpay, "Scan and pay OR code is generated");
			verifyElementPresent(PWAHamburgerMenuPage.objtimerinupi, "Timer upi");

			if (verifyElementPresent(PWAHamburgerMenuPage.objtimerinupi, "Timer upi")) {
				logger.info(
						"The Countdown should get started as soon as the QR Code is displayed on the screen of website, expected behaviour");
				extent.extentLoggerPass("",
						"The Countdown should get started as soon as the QR Code is displayed on the screen of website, expected behaviour");
			} else {
				logger.info(
						"The Countdown is not get started as soon as the QR Code is displayed on the screen of website");
				extent.extentLoggerFail(" ",
						"The Countdown is started as soon as the QR Code is displayed on the screen of website");

			}

			// 10
			extent.HeaderChildNode(
					"Verify that user is able to land on UPI screen on clicking back arrow on the QR code screen");
			verifyElementPresent(PWAHamburgerMenuPage.objupiarrow, "Arrow button");
			JSClick(PWAHamburgerMenuPage.objupiarrow, "Arrow button");
			waitTime(5000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext("Generate QR Code"), "Generate QR Code")) {
				logger.info("User should be redirected to previous page i.e UPI payment page, expected behaviour");
				extent.extentLoggerPass("",
						"User should be redirected to previous page i.e UPI payment page, expected behaviour");
			} else {
				logger.info("User not redirected to previous page i.e UPI payment page");
				extent.extentLoggerFail(" ", "User not redirected to previous page i.e UPI payment page");

			}

			// 8
			extent.HeaderChildNode("Verify that user is redirected to plan selection screen on clicking browser back");
			Back(1);
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
				logger.info("User should be redirected to previous page i.e plan selection page, expected behaviour");
				extent.extentLoggerPass("",
						"User should be redirected to previous page i.e plan selection page, expected behaviour");
			} else {
				logger.info("User not redirected to previous page i.e UPI payment page");
				extent.extentLoggerFail(" ", "User not redirected to previous page i.e UPI payment page");

			}
		}
	}

	public void pwavalidatinupiandwalletpaymentpage(String userType) throws Exception {
//		if (userType.equals("NonSubscribedUser")) {
//			// 9
//			extent.HeaderChildNode("Verify that user is not able to see UPI payment option for recurring plan");
//			navigateHome();
//			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
//			if (verifyElementPresent(PWASubscriptionPages.objPopup99Plan, "99 pack ")) {
//				click(PWASubscriptionPages.objPopup99Plan, "99 pack is selected");
//				String packprice = getText(PWASubscriptionPages.objPopup99Plan);
//
//				extent.extentLogger("", "selected pack price : " + packprice);
//				verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
//				checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
//				waitTime(5000);
//				WebElement iframeElement = null;
//				if (getPlatform().equalsIgnoreCase("Android")) {
//					iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
//					Thread.sleep(15000);
//					getWebDriver().switchTo().frame(iframeElement);
//				} else if (getPlatform().equalsIgnoreCase("Web")) {
//					iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
//					Thread.sleep(15000);
//					getWebDriver().switchTo().frame(iframeElement);
//				}
//				if (verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("UPI"), "Payment option")) {
//					logger.info("User should be able to select UPI payment option for non recurring plan.");
//					extent.extentLoggerFail("",
//							"User should be able to select UPI payment option for non recurring plan.");
//				} else {
//					logger.info(
//							"User not able to select UPI payment option for non recurring plan, expected behaviour");
//					extent.extentLoggerPass(" ",
//							"User not able to select UPI payment option for non recurring plan, expected behaviour");
//
//				}
//
//			} else {
//				logger.info("99 pack is not displayed");
//				extent.extentLogger(" ", "99 pack is not displayed");
//
//			}
//		}

		if (userType.equals("NonSubscribedUser")) {
			// 20
			extent.HeaderChildNode("Verify that user redirect to Amazon pay page on clicking proceed "
					+ "after selecting Amazon Pay wallet optionA");
			navigateHome();
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWAHamburgerMenuPage.obj499pack, "499 pack");
			String packprice = getText(PWAHamburgerMenuPage.obj499pack);
			String packprice1 = "? " + packprice;
			extent.extentLogger("", "selected pack price : " + packprice1);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");

			PWAIframe();

			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objAmazonPay, "Amazonpay");
			verifyElementPresentAndClick(PWASubscriptionPages.objAmazonPayProceedToPay, "Proceed to pay");
			waitTime(5000);
			if (verifyElementPresentAndClick(PWASubscriptionPages.objamazonpaypage, "Amazon pay page")) {
				logger.info("User should be redirected to Amazon pay page,expected behaviour.");
				extent.extentLoggerPass("", "User should be redirected to Amazon pay page, expected behaviour.");
			} else {
				logger.info("User is not redirected to Amazon pay page.");
				extent.extentLoggerFail(" ", "User is not redirected to Amazon pay page.");

			}

			// 21
			extent.HeaderChildNode("Verify that Amazon Pay page consist: Amazon Pay Logo ,Login ,"
					+ "Enter Mobile number or Email field ,Sign-In CTA");
			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objamazonpaylogo, "Amazon pay logo");
			verifyElementPresent(PWAHamburgerMenuPage.objamazonlogintext, "Amazon Login");
			verifyElementPresent(PWAHamburgerMenuPage.objamazonemailandphnofield, "Amazon email field");
			verifyElementPresent(PWAHamburgerMenuPage.objamazonsignincta, "Amazon sign in CTA");
		}

		if (userType.equals("NonSubscribedUser")) {
			// 23
			extent.HeaderChildNode("Verify that user redirect to Mobikvikpay page on clicking proceed "
					+ "after selecting Amazon Pay wallet optionA");
			navigateHome();
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWAHamburgerMenuPage.obj499pack, "499 pack");
			String packprice = getText(PWAHamburgerMenuPage.obj499pack);
			String packprice1 = "?" + packprice;
			extent.extentLogger("", "selected pack price : " + packprice1);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objMobikwik, "Mobikvik");
			verifyElementPresentAndClick(PWASubscriptionPages.objMobikwikProceedToPay, "Proceed to pay");
			waitTime(5000);
			if (verifyElementPresentAndClick(PWAHamburgerMenuPage.objmobikvikloginpage, "Mobikvik pay page")) {
				logger.info("User should be redirected to Mobikvik pay page,expected behaviour.");
				extent.extentLoggerPass("", "User should be redirected to Mobikvik pay page, expected behaviour.");
			} else {
				logger.info("User is not redirected to Mobikvikpay page.");
				extent.extentLoggerFail(" ", "User is not redirected to Mobikvik pay page.");

			}

			// 24
			extent.HeaderChildNode("Verify that Amazon Pay page consist: Amazon Pay Logo ,Login , "
					+ "Enter Mobile number or Email field ,Sign-In CTA");
			verifyElementPresent(PWAHamburgerMenuPage.objmobikviklogo, "mobikvik pay logo");
			verifyElementPresent(PWAHamburgerMenuPage.objmobikviklogintext, "mobikvik Login");
			verifyElementPresent(PWAHamburgerMenuPage.objmobikvikemailandphnofield, "mobikvik email field");
			verifyElementPresent(PWAHamburgerMenuPage.objmobikviksendotpcta, "mobikvik send otp CTA");

			// 25
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objentermobilenumber, "Enter mobile number");
			type(PWAHamburgerMenuPage.objentermobilenumber, "9000000000", "Enter mobile number");
			verifyElementPresent(PWAHamburgerMenuPage.objmobikviksendotpcta, "mobikvik send otp CTA");
			if (getWebDriver().findElement(PWAHamburgerMenuPage.objmobikviksendotpcta).isEnabled() == true) {
				logger.info(
						"Send OTP CTA should get enabled when user enters the 10 digits mobile number,expected behaviour.");
				extent.extentLoggerPass("",
						"Send OTP CTA should get enabled when user enters the 10 digits mobile number, expected behaviour.");
			} else {
				logger.info("Send OTP CTA id disabled when user enters the 10 digits mobile number");
				extent.extentLoggerFail(" ", "Send OTP CTA id disabled when user enters the 10 digits mobile number");

			}

			// 26
			extent.HeaderChildNode(
					"Verify that on clicking send OTP after entering mobile number user is redirecting to enter OTP page");
			click(PWAHamburgerMenuPage.objmobikviksendotpcta, "mobikvik send otp CTA");
			if (verifyElementPresent(PWAHamburgerMenuPage.objenterotppage, "mobikvik enter otp CTA")) {
				logger.info(
						"user should redirect to enter OTP page on clicking send OTP in mobikwik page,expected behaviour.");
				extent.extentLoggerPass("",
						"user should redirect to enter OTP page on clicking send OTP in mobikwik page, expected behaviour.");
			} else {
				logger.info("user not redirect to enter OTP page on clicking send OTP in mobikwik page");
				extent.extentLoggerFail(" ",
						"user not redirect to enter OTP page on clicking send OTP in mobikwik page");

			}

			// 27
			extent.HeaderChildNode(
					"Verify that enter otp mobikwik page consists OTP has been sent successfully , Change CTA ,"
							+ " Enter OTP field , Resend OTP , Submit ");
			verifyElementPresent(PWAHamburgerMenuPage.objotpsentsuccessfully, "OTP sent successfully");
			verifyElementPresent(PWAHamburgerMenuPage.objmobikvikemailandphnofield, "Enter mobile number");
			verifyElementPresent(PWAHamburgerMenuPage.objchangecta, "Change CTA");
			verifyElementPresent(PWAHamburgerMenuPage.objmobikvikresendotp, "resend CTA");
			verifyElementPresent(PWAHamburgerMenuPage.objsubmitmobikvik, "submit CTA");
			Back(1);
			Back(1);

			// 28
			extent.HeaderChildNode(
					"Verify that user is able to list of applicable " + "wallets (Amazon pay, Mobikwik, Paytm )");

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objAmazonPay, "Amazonpay");
			verifyElementPresentAndClick(PWASubscriptionPages.objMobikwik, "Mobikvik");
		}
	}

	public void PWAMobikvikPageValidation(String userType) throws Exception {

		if (userType.equals("NonSubscribedUser")) {
			// 29

			extent.HeaderChildNode("Verify that user redirect to Mobikvikpay page on clicking proceed "
					+ "after selecting Amazon Pay wallet optionA");
			navigateHome();
			logout();
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "ravikumarapp10@gmail.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWAHamburgerMenuPage.obj499pack, "499 pack");
			String packprice = getText(PWAHamburgerMenuPage.obj499pack);
			String packprice1 = "?" + packprice;
			extent.extentLogger("", "selected pack price : " + packprice1);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			if (verifyElementPresent(PWASubscriptionPages.objMobileLinkPaytmOption, "Link Wallets")) {
				logger.info("User should be able to see the link CTA for paytm wallets,expected behaviour.");
				extent.extentLoggerPass("",
						"User should be able to see the link CTA for paytm wallets, expected behaviour.");
			} else {
				logger.info("User is not able to see the link CTA for paytm wallets");
				extent.extentLoggerFail(" ", "User is not able to see the link CTA for paytm wallets");

			}

			// 30
			extent.HeaderChildNode("Verify that user is able to see Link PAYTM Wallet text "
					+ "with logo and Enter mobile number field along with Send OTP CTA");
			click(PWASubscriptionPages.objMobileLinkPaytmOption, "Link Wallets");
			verifyElementPresent(PWASubscriptionPages.objLinkPaytm, "Link paytm wallet");
			verifyElementPresent(PWASubscriptionPages.objpaytmentermobileno, "Enter mobile number");
			verifyElementPresent(PWAHamburgerMenuPage.objmobikviksendotpcta, "Paytm send otp CTA");

			// 31
			extent.HeaderChildNode(
					"Verify that user is able to see zee5 logo in payment gateway screen for respective wallet");
			checkElementDisplayed(PWAHomePage.objZeeLogo, "Zee logo");

		}

		if (userType.equals("NonSubscribedUser")) {
			// 32
			extent.HeaderChildNode("Verify that user redirect to Mobikvikpay page on clicking proceed "
					+ "after selecting Amazon Pay wallet optionA");
			navigateHome();
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWAHamburgerMenuPage.obj499pack, "499 pack");
			String packprice = getText(PWAHamburgerMenuPage.obj499pack);
			String packprice1 = "?" + packprice;
			extent.extentLogger("", "selected pack price : " + packprice1);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
			waitTime(5000);

			if (verifyElementPresent(PWAHamburgerMenuPage.objhaveagiftcard, "Have a gift card")) {
				logger.info(
						"User should be able to see see gift card option at the bottom of the payment screen.,expected behaviour.");
				extent.extentLoggerPass("",
						"User should be able to see see gift card option at the bottom of the payment screen., expected behaviour.");
			} else {
				logger.info("User not able to see see gift card option at the bottom of the payment screen.");
				extent.extentLoggerFail(" ",
						"User not able to see see gift card option at the bottom of the payment screen.");

			}

			// 33
			extent.HeaderChildNode("Verify that on clicking Gift card option consist cardnumber, pin, pay");
			verifyElementPresent(PWAHamburgerMenuPage.objhaveagiftcard, "Have a gift card");
			JSClick(PWAHamburgerMenuPage.objhaveagiftcard, "Have a gift card");
			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "Enter card details");
			JSClick(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "Enter card details");
			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objenterpintohaveagiftcard, "PIN details");
			JSClick(PWAHamburgerMenuPage.objenterpintohaveagiftcard, "PIN details");
			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objPay, "PAY");

			// 34
			extent.HeaderChildNode("Verify that Card number will take only 16 digits and Pin will take 6 digits");
			verifyElementPresent(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "Enter card details");
			JSClick(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "Enter card details");
			type(PWAHamburgerMenuPage.objinputnumbercard, "12345678912345678", "card number");
			String cardnumber = findElement(PWAHamburgerMenuPage.objgiftcardnumber).getAttribute("value");
			System.out.println(cardnumber);
			try {
				int a = Integer.parseInt(cardnumber);
				System.out.println(a);
				extent.extentLogger("", " cardnumber  : " + a);
				if (a == 16) {
					logger.info("Card number should take only 16 digits.,expected behaviour.");
					extent.extentLoggerPass("", "Card number should take only 16 digits., expected behaviour.");
				} else {
					logger.info("Card number taking more or less than 16 digits");
					extent.extentLoggerFail(" ", "Card number taking more or less than 16 digits");

				}
			} catch (NumberFormatException ex) {

			}

//			int a = Integer.valueOf(cardnumber);
//			System.out.println(a);
//			getCountweb(a);
//			extent.extentLogger("", " cardnumber  : " + a);
//			if(a==16)
//			{
//				logger.info("Card number should take only 16 digits.,expected behaviour.");
//				extent.extentLoggerPass("", "Card number should take only 16 digits., expected behaviour.");
//			}
//			else
//			{
//				logger.info("Card number taking more or less than 16 digits");
//				extent.extentLoggerFail(" ", "Card number taking more or less than 16 digits");
//
//			}
//
			verifyElementPresent(PWAHamburgerMenuPage.objenterpintohaveagiftcard, "PIN details");

			type(PWAHamburgerMenuPage.objinputpincard, "1234567", "PIN  number");
			String pinnumber = findElement(PWAHamburgerMenuPage.objpinnumber).getAttribute("value");
			int pinnumber1 = Integer.parseInt(pinnumber);

			System.out.println(pinnumber1);
			extent.extentLogger("", " pinnumber  : " + pinnumber1);
			if (pinnumber1 == 6) {
				logger.info("Pin number should take only 6 digits.,expected behaviour.");
				extent.extentLoggerPass("", "Pin number should take only 6 digits., expected behaviour.");
			} else {
				logger.info("Pin number taking more or less than 6 digits");
				extent.extentLoggerFail(" ", "Pin number taking more or less than 6 digits");

			}

			// 35
			extent.HeaderChildNode("Verify that PAY cta get enable after entering correct Card number and PIN");
			if (getWebDriver().findElement(PWAHamburgerMenuPage.objPay).isEnabled() == true) {
				logger.info(
						"User should be able to see PAY CTA is enabled on entering Correct card number and PIN,expected behaviour.");
				extent.extentLoggerPass("",
						"User should be able to see PAY CTA is enabled on entering Correct card number and PIN, expected behaviour.");
			} else {
				logger.info("User not able to see PAY CTA is enabled on entering Correct card number and PIN");
				extent.extentLoggerFail(" ",
						"User not able to see PAY CTA is enabled on entering Correct card number and PIN");

			}

			// 36
			extent.HeaderChildNode("Verify error message ");
			click(PWAHamburgerMenuPage.objPay, "Pay cta");
			if (verifyElementPresent(PWAHamburgerMenuPage.objtoarstmessage, "Error message")) {
				logger.info(
						"User should get error text message if card number and pin combination is not correct,expected behaviour.");
				extent.extentLoggerPass("",
						"User should get error text message if card number and pin combination is not correct, expected behaviour.");
			} else {
				logger.info("User not getting error text message if card number and pin combination is not correct");
				extent.extentLoggerFail(" ",
						"User not getting error text message if card number and pin combination is not correct");
			}
		}
	}

	public void pwainsprint1(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser")) {
			// 37
			extent.HeaderChildNode("Verify logged in non subscribed with No active Rental user "
					+ "clicks on Buy Combo offer for Rs<<plan price>> CTA on Combo offer page");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
			click(PWAHamburgerMenuPage.objTrailer, "Trailer");
			click(PWAComboOfferPage.objRentNowInConsumptionPage, "Rent Now");
			verifyElementPresentAndClick(PWAComboOfferPage.objpackprice499, "499 pack price");
			verifyElementPresent(PWAComboOfferPage.objcomboofferpage, "Combo Offer Page");
			verifyElementPresentAndClick(PWAComboOfferPage.objbuycta, "Buy cta");

			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info(
						"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
			} else {
				logger.info("User not redircted to Payment page .");
				extent.extentLoggerFail(" ", "User not redircted to Payment page .");

			}
			Back(1);

			// 38
			extent.HeaderChildNode("Verify logged in non subscribed user "
					+ "clicks on Rent for Rs<<plan price>> CTA on Combo offer page");
			verifyElementPresentAndClick(PWAComboOfferPage.objpackprice249, "249 pack price");

			verifyElementPresent(PWAComboOfferPage.objcomboofferpage, "Combo Offer Page");
			verifyElementPresentAndClick(PWAComboOfferPage.objbuycta, "Buy cta");

			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info(
						"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
				extent.extentLoggerPass("",
						"User should be redircted to Payment page and selected plan price should be displayed, expected behaviour");
			} else {
				logger.info("User not redircted to Payment page .");
				extent.extentLoggerFail(" ", "User not redircted to Payment page .");

			}
			Back(1);

			Back(1);
		}

		if (userType.equals("NonSubscribedUser")) {
			// 40
			extent.HeaderChildNode("Verify that user is getting new subscription page while purchasing TVOD plan");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objrentnowinlandingpage, "Rent Now")) {
				ScrollToTheElementWEB(PWAHamburgerMenuPage.objrentnowinlandingpage);
				click(PWAHamburgerMenuPage.objrentnowinlandingpage, "Rent Now");

				verifyElementPresentAndClick(PWAComboOfferPage.objbuycta, "Buy cta");
				// }
				if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
					logger.info("User should get subscription page while purchasing TVOD plan, expected behaviour");
					extent.extentLoggerPass("",
							"User should get subscription page while purchasing TVOD plan, expected behaviour");
				} else {
					logger.info("User not getting  subscription page while purchasing TVOD plan.");
					extent.extentLoggerFail(" ", "User not getting  subscription page while purchasing TVOD plan.");

				}

				// 41
				extent.HeaderChildNode(
						"Verify that user is getting all the payment modes available " + "for TVOD plan purchase");

				PWAIframe();
				verifyElementPresent(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
				verifyElementPresent(PWAHamburgerMenuPage.objnetbanking, "Net banking");
				verifyElementPresent(PWAHamburgerMenuPage.objPaymentoption("UPI"), "UPI option");
				verifyElementPresent(PWASubscriptionPages.objWallets, "Wallets");

				// 42
				extent.HeaderChildNode("Verify that user is able to purchase the TVOD plan "
						+ "using any available payment mode successfully");
				verifyElementPresentAndClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");

			}

		}

		if (userType.equals("NonSubscribedUser")) {
			// 13

			extent.HeaderChildNode("Verify that Add credit card/Debit card screen is as per VD");
			navigateHome();
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWAHamburgerMenuPage.obj499pack, "499 pack");
			String packprice = getText(PWAHamburgerMenuPage.obj499pack);
			String packprice1 = "?" + packprice;
			extent.extentLogger("", "selected pack price : " + packprice1);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			waitTime(5000);
			String creditcard = getText(PWASubscriptionPages.objCreditAndDebitCardBtn);
			extent.extentLogger("", "credit / Debit card: " + creditcard);
			if (creditcard.contains("Credit / Debit Card")) {
				logger.info("credit / debit card text should display according to VD , expected behaviour");
				extent.extentLoggerPass("",
						"credit / debit card text should display according to VD,expected behaviour");
			} else {
				logger.info("credit / debit card text not displayed according to VD");
				extent.extentLoggerFail(" ", "credit / debit card text not displayed according to VD");

			}

			verifyElementPresent(PWASubscriptionPages.objCardNumber, "Enter Card Number Field");
			String cardnumber = getText(PWASubscriptionPages.objCardNumber);
			extent.extentLogger("", "card number: " + cardnumber);
			if (cardnumber.contains("Card Number")) {
				logger.info("Card Number text should display according to VD , expected behaviour");
				extent.extentLoggerPass("", "Card Number text should display according to VD,expected behaviour");
			} else {
				logger.info("Card Number text not displayed according to VD");
				extent.extentLoggerFail(" ", "Card Number text not displayed according to VD");

			}

			verifyElementPresent(PWASubscriptionPages.objExpiry, "Expiry Field");
			String Expiry = getText(PWASubscriptionPages.objExpiry);
			extent.extentLogger("", "Expiry : " + Expiry);
			if (Expiry.contains("Expiry")) {
				logger.info("Expiry text should display according to VD , expected behaviour");
				extent.extentLoggerPass("", "Expiry text should display according to VD,expected behaviour");
			} else {
				logger.info("Expiry text not displayed according to VD");
				extent.extentLoggerFail(" ", "Expiry text not displayed according to VD");

			}

			verifyElementPresent(PWASubscriptionPages.objCVV, "CVV Field");
			String cvv = getText(PWASubscriptionPages.objCVV);
			extent.extentLogger("", "cvv: " + cvv);
			if (cvv.contains("CVV")) {
				logger.info("CVV text should display according to VD , expected behaviour");
				extent.extentLoggerPass("", "CVV text should display according to VD,expected behaviour");
			} else {
				logger.info("CVV text not displayed according to VD");
				extent.extentLoggerFail(" ", "CVV text not displayed according to VD");

			}

			verifyElementPresent(PWASubscriptionPages.objCreditDebitProceedToPay, "Proceed To Pay Button");
			String proceedtopay = getText(PWASubscriptionPages.objCreditDebitProceedToPay);
			extent.extentLogger("", "Proceed to pay : " + proceedtopay);
			if (proceedtopay.contains("Proceed to pay")) {
				logger.info("Proceed to pay text should display according to VD , expected behaviour");
				extent.extentLoggerPass("", "Proceed to pay text should display according to VD,expected behaviour");
			} else {
				logger.info("Proceed to pay text not displayed according to VD");
				extent.extentLoggerFail(" ", "Proceed to pay text not displayed according to VD");

			}

			verifyElementPresent(PWASubscriptionPages.objsavethiscard, "Save this card for faster payment");
			String savethiscard = getText(PWASubscriptionPages.objsavethiscard);
			extent.extentLogger("", "Save this card : " + savethiscard);
			if (savethiscard.contains("Save this card for faster payments")) {
				logger.info(
						"Save this card for faster payments text should display according to VD , expected behaviour");
				extent.extentLoggerPass("",
						"Save this card for faster payments text should display according to VD,expected behaviour");
			} else {
				logger.info("Save this card for faster payments text not displayed according to VD");
				extent.extentLoggerFail(" ", "Save this card for faster payments text not displayed according to VD");

			}

			// 32
			extent.HeaderChildNode(
					"Verify Whether on clicking browser back on netbanking page user should get retry payment i.e. payment failure popup");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking, "Net banking");
			click(PWAHamburgerMenuPage.objsearchbarinnetbanking, "Search bar in netbanking");
			type(PWAHamburgerMenuPage.objsearchbarinnetbanking, "Axis", "Search bar in netbanking");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("Axis Bank"), "Payment option");
			verifyElementPresentAndClick(PWASubscriptionPages.objPaytmProceedToPay, "Proceed To Pay Button");

			// 49
			extent.HeaderChildNode("Verify that user is able to enter VPA/handle to initiate UPI payment");
			Back(1);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");

			PWAIframe();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("UPI"), "UPI option");
			waitTime(3000);
			checkElementDisplayed(PWAHamburgerMenuPage.objenterupiid, "Enter upi Details");
			click(PWAHamburgerMenuPage.objenterupiid, "Enter VPA Details");
			type(PWAHamburgerMenuPage.objenterupiid, "866@upi", "Email Field");
			String upiid = findElement(PWAHamburgerMenuPage.objenterupiid).getAttribute("value");
			System.out.println(upiid);
			if (upiid.contains("866@upi")) {
				logger.info(
						"User should be able to enter the VPA/handle in the UPI ID section to initiate UPI payment, expected behaviour");
				extent.extentLogger("",
						"User should be able to enter the VPA/handle in the UPI ID section to initiate UPI payment, expected behaviour");
			} else {
				logger.info("User not able to enter the VPA/handle in the UPI ID section to initiate UPI payment");
				extent.extentLoggerFail("",
						"User not able to enter the VPA/handle in the UPI ID section to initiate UPI payment");
			}
			// verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee logo");
			Back(2);

			logout();

			// 79
			extent.HeaderChildNode(
					"Verify that user is able to see Credit and Debit card options in payment gateway for respective wallet");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "luckyigscon0074@gmail.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "vasilucky@123", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWAHamburgerMenuPage.obj499pack, "499 pack");

			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
			// verifyElementPresentAndClick(PWASubscriptionPages.objpaytmlink, "Paytm
			// link");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaytmProceedToPay, "Procced to pay");
			waitTime(5000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objcardsinpaytm, "Cards in paytm")) {
				logger.info(
						"User should be able to see Credit and Debit card options in payment gateway for respective wallet, expected behaviour");
				extent.extentLogger("",
						"User should be able to see Credit and Debit card options in payment gateway for respective wallet, expected behaviour");
			} else {
				logger.info(
						"User not able to see Credit and Debit card options in payment gateway for respective wallet");
				extent.extentLoggerFail("",
						"User not able to see Credit and Debit card options in payment gateway for respective wallet");
			}

			// 80
			extent.HeaderChildNode("Verify that on clicking back on payment gateway screen of respective wallets "
					+ "User redirect to Account info screen with intent popup");
			click(PWAHamburgerMenuPage.objgobackinpaytm, "Go back");
			waitTime(5000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objcancelpaymentyes, "Cancel payment")) {
				click(PWAHamburgerMenuPage.objcancelpaymentyes, "Cancel payment");

			}
			waitTime(5000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objpaymentfailurepopup, "Payment failure popup")) {
				logger.info("payment failure popup is displayed, expected behaviour");
				extent.extentLogger("", "Payment failure popup is displayed, expected behaviour");
			} else {
				logger.info("payment failure popup is not displayed");
				extent.extentLoggerFail("", "payment failure popup is not displayed");
			}

			// 82
			extent.HeaderChildNode(
					"Verify that on clicking browser back button on payment gateway screen of respective wallets User"
							+ " redirect to Account info with intent popup \"failure payment with retry option \"");
			waitTime(5000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objrentmovie, "rent movie")) {
				logger.info("rent button is displayed in payment failure popup , expected behaviour");
				extent.extentLogger("", "rent button is displayed in payment failure popup, expected behaviour");
			} else {
				logger.info("rent button is not displayed in payment failure popup");
				extent.extentLoggerFail("", "rent button is not displayed in payment failure popup");
			}

			// 83
			extent.HeaderChildNode("Verify that on closing on intent popup , user stays in payment"
					+ " screen with paytm account linked to wallet option with wallet money");
			String rentamt = getText(PWAHamburgerMenuPage.objrentmovie);
			extent.extentLogger("", "rent amount: " + rentamt);
			if (rentamt.contains("499")) {
				logger.info("rent amount is displayed in payment failure popup , expected behaviour");
				extent.extentLogger("", "rent amount is displayed in payment failure popup, expected behaviour");
			} else {
				logger.info("rent amount is not displayed in payment failure popup");
				extent.extentLoggerFail("", "rent amount is not displayed in payment failure popup");
			}

			// 81
			navigateHome();
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWAHamburgerMenuPage.obj499pack, "499 pack");

			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaytmProceedToPay, "Procced to pay");
			waitTime(5000);
			extent.HeaderChildNode("Verify that on clicking browser back button on payment gateway "
					+ "screen of respective wallets User redirect to Account info screen with intent popup");
			Back(1);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objgobackinpaytm, "Go back")) {
				logger.info("User should redirect to payment page  , expected behaviour");
				extent.extentLogger("", "User should redirect to payment page , expected behaviour");
			} else {
				logger.info("User is not redirect to payment page ");
				extent.extentLoggerFail("", "User is not redirect to payment page");
			}

			// 84
			extent.HeaderChildNode(
					"Verify that on clicking Retry user will redirect to wallet gateway and user should be logged in");
			click(PWAHamburgerMenuPage.objgobackinpaytm, "Go back");
			if (verifyElementPresent(PWAHamburgerMenuPage.objcancelpaymentyes, "Cancel payment")) {
				click(PWAHamburgerMenuPage.objcancelpaymentyes, "Cancel payment");

			}
			click(PWAHamburgerMenuPage.objrentmovie, "rent movie");
			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info("User should redirect to Wallet gateway with logged in state  , expected behaviour");
				extent.extentLogger("",
						"User should redirect to Wallet gateway with logged in state , expected behaviour");
			} else {
				logger.info("User not redirect to Wallet gateway with logged in state ");
				extent.extentLoggerFail("", "User not redirect to Wallet gateway with logged in state ");
			}

			// 169
			extent.HeaderChildNode(
					"Verify, user should able to selected any other/same mode of payment after payment failure");

			PWAIframe();
			click(PWASubscriptionPages.objWallets, "Wallets");
			if (verifyElementPresent(PWASubscriptionPages.objWallets, "Wallets")) {
				logger.info("Optional payment should be applicable ,expected behaviour");
				extent.extentLoggerPass("", "Optional payment should be applicable ,expected behaviour");
				// Back(1);
			} else {
				logger.info("Optional payment is not applicable ");
				extent.extentLoggerFail("", "Optional payment is not applicable ");
			}

			if (verifyElementPresent(PWAHamburgerMenuPage.objnetbanking, "Net banking")) {
				logger.info("Optional payment should be applicable ,expected behaviour");
				extent.extentLoggerPass("", "Optional payment should be applicable ,expected behaviour");
				// Back(1);
			} else {
				logger.info("Optional payment is not applicable ");
				extent.extentLoggerFail("", "Optional payment is not applicable ");
			}

			if (verifyElementPresent(PWASubscriptionPages.objEnterCreditAndDebitCardDetails,
					"Enter Credit/Debit Card Details")) {
				logger.info("Optional payment should be applicable ,expected behaviour");
				extent.extentLoggerPass("", "Optional payment should be applicable ,expected behaviour");
				// Back(1);
			} else {
				logger.info("Optional payment is not applicable ");
				extent.extentLoggerFail("", "Optional payment is not applicable");
			}

			// 170
			extent.HeaderChildNode("Verify, whether retry payment option is available in payment page");
			navigateHome();
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresent(PWAHamburgerMenuPage.obj499pack, "499 pack");

			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");

			PWAIframe();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("UPI"), "Payment option");
			waitTime(3000);
			checkElementDisplayed(PWAHamburgerMenuPage.objenterupiid, "Enter upi Details");
			click(PWAHamburgerMenuPage.objenterupiid, "Enter upi Details");
			type(PWAHamburgerMenuPage.objenterupiid, "866@upi", "Email Field");
			verifyElementPresent(PWAHamburgerMenuPage.objupiproceedtopay, "Procced to pay");
			click(PWAHamburgerMenuPage.objupiproceedtopay, "Procced to pay");
			waitTime(10000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objsomethingmess, "Something went wrong message ")) {
				logger.info("\"Something went Wrong. Please Retry the Payment\" message is display");
				extent.extentLoggerFail(" ", "\"Something went Wrong. Please Retry the Payment\" message is display");
			} else {
				logger.info(
						"\"Something went Wrong. Please Retry the Payment\" message should not display, expected behaviour");
				extent.extentLoggerPass(" ",
						"\"Something went Wrong. Please Retry the Payment\" message should not display, expected behaviour");
			}
		}
	}

	public void deeplinkConsumptionScreen499Login() throws Exception {
		HeaderChildNode("Deeplink Consumption Screen 499 Login");
		getWebDriver().get(getParameterFromXML("DeeplinkConsumption"));
		validateConsumptionScreen();
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		validatePaymentPageNavigation();
		type(PWALoginPage.objEmailField, "igstesting002@gmail.com", "Email ID");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		type(PWALoginPage.objPasswordField, "igs@12345", "Password Button");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment Header");
		navigateHome();
		logout();
	}

	public void deeplinkConsumptionScreen499Register() throws Exception {
		HeaderChildNode("Deeplink Consumption Screen 499 Register");
		getWebDriver().get(getParameterFromXML("DeeplinkConsumption"));
		validateConsumptionScreen();
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		validatePaymentPageNavigation();
		type(PWALoginPage.objEmailField, RandomStringGenerator(6) + "007@gmail.com", "Email ID");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		type(PWALoginPage.objPasswordField, "igs@12345", "Password Button");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment Header");
		navigateHome();
		logout();
	}

	public void deeplinkConsumptionScreen249Login() throws Exception {
		HeaderChildNode("Deeplink Consumption Screen 249 Login");
		getWebDriver().get(getParameterFromXML("DeeplinkConsumption"));
		validateConsumptionScreen();
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		click(PWAComboOfferPage.objOnlyRentMovieCheckBox, "249 Checkbox");
		validatePaymentPageNavigation();
		type(PWALoginPage.objEmailField, "igstesting002@gmail.com", "Email ID");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		type(PWALoginPage.objPasswordField, "igs@12345", "Password Button");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment Header");
		navigateHome();
		logout();
	}

	public void deeplinkConsumptionScreen249Register() throws Exception {
		HeaderChildNode("Deeplink Consumption Screen 249 Register");
		getWebDriver().get(getParameterFromXML("DeeplinkConsumption"));
		validateConsumptionScreen();
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		validatePaymentPageNavigation();
		type(PWALoginPage.objEmailField, RandomStringGenerator(6) + "002@gmail.com", "Email ID");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		type(PWALoginPage.objPasswordField, "igs@12345", "Password Button");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment Header");
		navigateHome();
		logout();
	}

	public void deeplinkConsumptionScreen499() throws Exception {
		HeaderChildNode("NonSubscribed - Deeplink Consumption Screen 499");
		getWebDriver().get(getParameterFromXML("DeeplinkConsumption"));
		validateConsumptionScreen();
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		validatePaymentPageNavigation();
		verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment Header");
		navigateHome();
	}

	public void deeplinkConsumptionScreen249() throws Exception {
		HeaderChildNode("NonSubscribed - Deeplink Consumption Screen 249");
		getWebDriver().get(getParameterFromXML("DeeplinkConsumption"));
		validateConsumptionScreen();
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		validatePaymentPageNavigation();
		verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment Header");
		navigateHome();
	}

	public void deeplinkSubscriptionLogin() throws Exception {
		HeaderChildNode("Deeplink Subscription Login");
		getWebDriver().get(getParameterFromXML("DeeplinkSubscription"));
		click(PWASubscriptionPages.objContinueBtn, "Continue Button");
		type(PWALoginPage.objEmailField, "igstesting002@gmail.com", "Email ID");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		type(PWALoginPage.objPasswordField, "igs@12345", "Password Button");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment Header");
		navigateHome();
		logout();
	}

	public void deeplinkSubscriptionRegister() throws Exception {
		HeaderChildNode("Deeplink Subscription Register screen");
		getWebDriver().get(getParameterFromXML("DeeplinkSubscription"));
		click(PWASubscriptionPages.objContinueBtn, "Continue Button");
		type(PWALoginPage.objEmailField, RandomStringGenerator(6) + "002@gmail.com", "Email ID");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		type(PWALoginPage.objPasswordField, "igs@12345", "Password Button");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment Header");
		navigateHome();
		logout();
	}

	public void deeplinkSubscriptionNonSub() throws Exception {
		HeaderChildNode("NonSubscribed - Deeplink Subscription screen");
		getWebDriver().get(getParameterFromXML("DeeplinkSubscription"));
		click(PWASubscriptionPages.objContinueBtn, "Continue Button");
		verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment Header");
		navigateHome();
	}

	/**
	 * Plex Landing Page
	 *
	 * @throws Exception
	 */
	public void PlexLandingPage499Login() throws Exception {
		HeaderChildNode("Navigation from Plex Landing page to purchase plan 499 by login");
		navigationFromZeeplexScreen("RentNow");
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		validatePaymentPageNavigation();
		type(PWALoginPage.objEmailField, "igstesting002@gmail.com", "Email ID");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		type(PWALoginPage.objPasswordField, "igs@12345", "Password Button");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment Header");
		navigateHome();
		logout();
	}

	public void PlexLandingPage499Register() throws Exception {
		HeaderChildNode("Navigation from Plex Landing page to purchase plan 499 by registration");
		navigationFromZeeplexScreen("RentNow");
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		validatePaymentPageNavigation();
		type(PWALoginPage.objEmailField, RandomStringGenerator(6) + "002@gmail.com", "Email ID");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		type(PWALoginPage.objPasswordField, "igs@12345", "Password Button");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment Header");
		navigateHome();
		logout();
	}

	public void PlexLandingPage249Login() throws Exception {
		HeaderChildNode("Navigation from Plex Landing page to purchase plan 499 by login");
		navigationFromZeeplexScreen("RentNow");
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		click(PWAComboOfferPage.objOnlyRentMovieCheckBox, "249 Checkbox");
		validatePaymentPageNavigation();
		type(PWALoginPage.objEmailField, "igstesting002@gmail.com", "Email ID");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		type(PWALoginPage.objPasswordField, "igs@12345", "Password Button");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment Header");
		navigateHome();
		logout();
	}

	public void PlexLandingPage249Register() throws Exception {
		HeaderChildNode("Navigation from Plex Landing page to purchase plan 499 by registration");
		navigationFromZeeplexScreen("RentNow");
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		click(PWAComboOfferPage.objOnlyRentMovieCheckBox, "249 Checkbox");
		validatePaymentPageNavigation();
		type(PWALoginPage.objEmailField, RandomStringGenerator(6) + "002@gmail.com", "Email ID");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		type(PWALoginPage.objPasswordField, "igs@12345", "Password Button");
		click(PWALoginPage.objContinueBtn, "Continue Button");
		verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment Header");
		navigateHome();
		logout();
	}

	public void PlexLandingPage499Nonsub() throws Exception {
		HeaderChildNode("Navigation from Plex Landing page to purchase plan 499 by login");
		navigationFromZeeplexScreen("RentNow");
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		validatePaymentPageNavigation();
		navigateHome();
	}

	public void PlexLandingPage249Nonsub() throws Exception {
		HeaderChildNode("Navigation from Plex Landing page to purchase plan 499 by registration");
		navigationFromZeeplexScreen("RentNow");
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		verifyComboScreen();
		termsOfService();
		privacyPolicy();
		click(PWAComboOfferPage.objOnlyRentMovieCheckBox, "249 Checkbox");
		validatePaymentPageNavigation();
		navigateHome();
	}

//	Lakshmi

	public void PWAIframe() throws Exception {
		checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section");
		// ScrollToTheElementWEB(PWASubscriptionPages.objPaymentHighlighted);
		scrollToTopOfPageWEB();
		waitTime(5000);
		WebElement iframeElement = null;
		if (getPlatform().equalsIgnoreCase("Android")) {
			iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
			Thread.sleep(15000);
			getWebDriver().switchTo().frame(iframeElement);
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
			scrollUp();
			scrollUp();
			scrollUp();
			Thread.sleep(15000);
			getWebDriver().switchTo().frame(iframeElement);
		}
	}

	public void WatchMorePopup() throws Exception {
		if (verifyIsElementDisplayed(PWAPlayerPage.objWouldYouLikePopUp)) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "Watch now close icon");
		}
	}

	public void DeviceLimitPopOp() throws Exception {
		if (verifyIsElementDisplayed(PWAPlayerPage.objDeviceLimitPopup)) {
			click(PWAPlayerPage.objResetButton, "Reset Now");
		}
	}

	public void MandatoryRegisterationPopOp() throws Exception {
		if (verifyIsElementDisplayed(PWAHomePage.objMandatoryRegPopUp)) {
			click(PWAHomePage.objMandatoryRegPopUpCloseIcon, "Close icon");
		}
	}

	public void PlayerPostPurchase() throws Exception {
		extent.HeaderChildNode("Verify user is able to see the Watch Now CTA for the rented plex movie.");
		logger.info("Verify user is able to see the Watch Now CTA for the rented plex movie.");
		TVODComboLogin("TVODUserName", "TVODPassword");
		waitTime(5000);
		mandatoryRegistrationPopUp(userType);
		waitTime(3000);
		logger.info("Set parental Pin");
		waitTime(3000);
		SetParentalPopup(PWAHamburgerMenuPage.objRestrictAll, "TVODPassword", "Restrict all");
		waitTime(5000);
		navigateToAnyScreenOnWeb("ZEEPLEX");
		waitTime(5000);
		scrollDownWEB();
		waitTime(5000);
		if (verifyElementPresentAndClick(PWAComboOfferPage.objContentThumbnail, "Rented content")) {
			waitTime(10000);
			DeviceLimitPopOp();
			waitTime(5000);
			if (verifyElementPresent(PWAPlayerPage.objWatchNowPlayerCTA, "Watch Now on Player")) {
				extent.HeaderChildNode(
						"Verify if user taps on Watch now CTA then \"Please note before you start \" pop window should be displayed with watch time info and Agree & start watching -->");
				logger.info(
						"Verify if user taps on Watch now CTA then \"Please note before you start \" pop window should be displayed with watch time info and Agree & start watching -->");
				waitTime(3000);
				verifyElementPresentAndClick(PWAPlayerPage.objWatchNowPlayerCTA, "Watch Now on Player");
				waitTime(3000);
				DeviceLimitPopOp();
				if (verifyElementPresent(PWAPlayerPage.objPleaseNoteBeforeYouStartPopUP,
						"Please Note Before You Start Pop up screen")) {
					verifyElementPresent(PWAPlayerPage.objAgreeAndWatchNowCTA, "Agree & Start watching CTA");
				}
				waitTime(5000);
				extent.HeaderChildNode(
						"\"Verify if user is able to see \"Please note before you start\" popup on player consumption screen");
				logger.info(
						"Verify if user is able to see \"Please note before you start\" popup on player consumption screen");
				verifyElementPresent(PWAPlayerPage.objPleaseNoteBeforeYouStartPopUP,
						"Please Note Before You Start Pop up screen");

				extent.HeaderChildNode(
						"Verify if user is able to see close option on \"Please note before you start\" popup on player consumption screen and Verify if the close option on the \"Please note before you start\" popup");
				logger.info(
						"Verify if user is able to see close option on \"Please note before you start\" popup on player consumption screen and Verify if the close option on the \"Please note before you start\" popup");

				verifyElementPresent(PWAPlayerPage.objPopUpCloseIcon, "Please Note Before You Start Pop up close icon");
				waitTime(5000);
				verifyElementPresentAndClick(PWAPlayerPage.objPopUpCloseIcon, "Close Icon");
				verifyElementPresent(PWAPlayerPage.objWatchNowPlayerCTA, "Watch Now on Player");
			} else {
				extent.extentLoggerWarning("", "Watch Now CTA is not displayed on player");
			}
			extent.HeaderChildNode("Verify if the Time display in days format if the validity is more than a day");
			logger.info("Verify if the Time display in days format if the validity is more than a day");

			if (verifyElementDisplayed(PWAPlayerPage.objContentExpiryInfo)) {
				String ExpiryStatus = getText(PWAPlayerPage.objContentExpiryInfo);
				System.out.println(ExpiryStatus);
				extent.extentLogger("", ExpiryStatus);

				if (ExpiryStatus.contains("days")) {
					logger.info("Time is display in days format if the validity is more than a day");
					extent.extentLoggerPass("", "Time is display in days format if the validity is more than a day");
				}
			} else {
				logger.error("Time is not display in days format if the validity is more than a day");
				extent.extentLoggerFail("", "Time is not display in days format if the validity is more than a day");
			}
		} else {
			extent.extentLoggerWarning("", "Contents are not displayed in Rent tab");
		}

		// Set parental pin back to No restrict
//			SetParentalPopup(PWAHamburgerMenuPage.objNoRestrict, "No Restrict content");
		WatchMorePopup();
		// Login to another credential
		logout();
		waitTime(5000);
//			if(verifyElementPresent(PWAHomePage.objNotNow, "Notification popup")) {
//			click(PWAHomePage.objNotNow, "Notification popup");
//			}
		WatchMorePopup();
		waitTime(3000);
		// TVOD active user credentials (Player is initiated)

		TVODComboLogin("PlaybackInitTVODuserName", "PlaybackInitTVODpassword");
		SetParentalPopup(PWAHamburgerMenuPage.objRestrictAll, "PlaybackInitTVODpassword", "Restrict all");
		waitTime(10000);
		navigateToAnyScreenOnWeb("ZEEPLEX");
		DeviceLimitPopOp();
		WatchMorePopup();
		waitTime(10000);
		scrollDownWEB();
		if (verifyElementPresentAndClick(PWAComboOfferPage.objContentThumbnail, "Rented content")) {
			if (verifyElementDisplayed(PWAComboOfferPage.objResumeCTA)) {
				click(PWAComboOfferPage.objResumeCTA, "Resume");
				DeviceLimitPopOp();

				waitTime(5000);
				extent.HeaderChildNode(
						"Verify if the parental pin is asked post the \"Please note before you start\" popup if user has Parental pin set");
				logger.info(
						"Verify if the parental pin is asked post the \"Please note before you start\" popup if user has Parental pin set");

				click(PWAPlayerPage.objResumePlayerCTA, "Resume Now");
//			click(PWAPlayerPage.objAgreeAndWatchNowCTA, "Agree and Watch now CTA");
				waitTime(5000);
				DeviceLimitPopOp();

				if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player,
						"post accepting the \\\"Please note before you start\\\" popup, Parental Pin code"))

					waitTime(5000);
				extent.HeaderChildNode(
						"Verify the parental pin popup is displayed for TVOD content if user select All restrict content");
				logger.info(
						"Verify the parental pin popup is displayed for TVOD content if user select All restrict content");

				if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player,
						"Parental pin pop up for TVOD content if user select All restrict content")) {
					type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin2player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin3player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin4player, "1", "ParentalLockPin");
					waitTime(4000);
				}

				extent.HeaderChildNode(
						"Verify where plex logo and content expiry information is displayed on the plex consumption screen.");
				logger.info(
						"Verify where plex logo and content expiry information is displayed on the plex consumption screen.");
				if (verifyElementPresent(PWAPlayerPage.objZeePlexLogo, "Plex logo")
						&& verifyElementPresent(PWAPlayerPage.objContentExpiryInfo, "content expiry information"))
					waitTime(2000);

				extent.HeaderChildNode(
						"Verify if user is able to watch the content on clicking Agree & start watching");
				logger.info("Verify if user is able to watch the content on clicking Agree & start watching");

				mouseHover();
				verifyElementPresent(PWAPlayerPage.objPlayerBottomBar, "Content on clicking Agree & start watching");

				waitTime(5000);

				extent.HeaderChildNode("verify if user is clicking on watch trailer CTA below the player");
				logger.info("verify if user is clicking on watch trailer CTA below the player");

				waitTime(2000);
				scrollDownWEB();
				if (verifyElementPresentAndClick(PWAPlayerPage.objWatchTrailer, "Watch trailer")) {
					if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player,
							"post accepting the \\\"Please note before you start\\\" popup,Parental pin pop up")) {
						type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
						type(PWAHamburgerMenuPage.objParentalLockPin2player, "1", "ParentalLockPin");
						type(PWAHamburgerMenuPage.objParentalLockPin3player, "1", "ParentalLockPin");
						type(PWAHamburgerMenuPage.objParentalLockPin4player, "1", "ParentalLockPin");
					}

					waitTime(3000);
					verifyElementPresent(PWAPlayerPage.objTrailerText, "trailer playback on the consumption screen");

					extent.HeaderChildNode(
							"Verify , whether Ads are not playing during the trailer of the TVOD  content ");
					logger.info("Verify , whether Ads are not playing during the trailer of the TVOD  content ");

					if (verifyElementDisplayed(PWAPlayerPage.objAd)) {
						logger.error("ads are playing during the trailer of the TVOD subscribed user");
						extent.extentLoggerFail("", "ads are playing during the trailer of the TVOD subscribed user");
					} else {
						logger.info("ads are not playing during the trailer of the TVOD subscribed user");
						extent.extentLoggerPass("",
								"ads are not playing during the trailer of the TVOD subscribed user");
					}
					waitTime(30000);
					extent.HeaderChildNode(
							"Verify if the plex content is playing after the trailer playback on clicking watch trailer CTA from consumption screen");
					logger.info(
							"Verify if the plex content is playing after the trailer playback on clicking watch trailer CTA from consumption screen");
					if (verifyElementDisplayed(PWAPlayerPage.objRentNow)) {
						logger.error(
								"User is able to see any Rent now CTA while trailer playback and Plex movie should start playing");
						extent.extentLoggerFail("",
								"User is able to see any Rent now CTA while trailer playback and Plex movie should start playing");
					} else {
						logger.info(
								"User does not see any Rent now CTA while trailer playback and Plex movie should start playing");
						extent.extentLoggerPass("",
								"User does not see any Rent now CTA while trailer playback and Plex movie should start playing");
					}
				}
				extent.HeaderChildNode(
						"Verify if the user is facing any issue in entitlement post purchase of the pack");
				logger.info("Verify if the user is facing any issue in entitlement post purchase of the pack");
				waitTime(50000);
				waitTime(50000);
				if (verifyElementDisplayed(PWAPlayerPage.objWatchTrailerEnabled))
					mouseHover();
				if (verifyElementPresent(PWAPlayerPage.objPlayerBottomBar,
						"Content without any interruption post purchasing the pack")) {
				}
				waitTime(5000);
				extent.HeaderChildNode("Verify if the user is able to see the timer and zeeplex logo below the player");
				logger.info("Verify if the user is able to see the timer and zeeplex logo below the player");
				if (verifyElementPresent(PWAPlayerPage.objZeePlexLogo, "Plex logo")
						&& verifyElementPresent(PWAPlayerPage.objContentExpiryInfo, "timer"))
					extent.HeaderChildNode(
							"Verify if the user can see Resume option on the player if the user paused the content while playing");
				logger.info(
						"Verify if the user can see Resume option on the player if the user paused the content while playing");
				// DeviceLimitPopOp();
				navigateToAnyScreenOnWeb("ZEEPLEX");
				WatchMorePopup();
				scrollToElement(PWAComboOfferPage.objContentThumbnail);
				verifyElementPresentAndClick(PWAComboOfferPage.objContentThumbnail, "Rented content");
				DeviceLimitPopOp();
				verifyElementPresent(PWAPlayerPage.objResumePlayerCTA,
						"Resume option on the player if the user paused the content while playing");
				extent.HeaderChildNode(
						"Verify the parental pin popup is displayed for TVOD content if user restrice +13 content");
				logger.info("Verify the parental pin popup is displayed for TVOD content if user restrice +13 content");
				waitTime(5000);
				SetParentalPopup(PWAHamburgerMenuPage.objRestrict13PlusContent, "PlaybackInitTVODpassword",
						"Restrict 13+ content");
				waitTime(5000);
				verifyElementPresentAndClick(PWAPlayerPage.objResumePlayerCTA, "Resume");
				DeviceLimitPopOp();
				if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player,
						"Parental pin pop when the TVOD content is 13+ conten, ")) {
					type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin2player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin3player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin4player, "1", "ParentalLockPin");
					waitTime(4000);
				}

				extent.HeaderChildNode("Verify, whether ads are displaying for the TVOD subscribed user");
				logger.info("Verify, whether ads are displaying for the TVOD subscribed user");

				if (verifyElementDisplayed(PWAPlayerPage.objAd)) {
					logger.error("ads are displaying for the TVOD subscribed user");
					extent.extentLoggerFail("", "ads are displaying for the TVOD subscribed user");
				} else {
					logger.info("ads are not displaying for the TVOD subscribed user");
					extent.extentLoggerPass("", "ads are not displaying for the TVOD subscribed user");
				}

				waitTime(5000);

				extent.HeaderChildNode(
						"Verify if user is able to see the timer in hours if the validity is less than 12 hours");
				logger.info("Verify if user is able to see the timer in hours if the validity is less than 12 hours");

				if (verifyElementDisplayed(PWAPlayerPage.objContentExpiryInfoYellowText)) {
					String ExpiryStatus = getText(PWAPlayerPage.objContentExpiryInfoYellowText);
					System.out.println(ExpiryStatus);
					extent.extentLogger("", ExpiryStatus);

					if (ExpiryStatus.contains("hours")) {
						logger.info(
								"user is able to see the timer in hours if the validity is less than 12 hours below the player and font color changes to Yellow");
						extent.extentLoggerPass("",
								"user is able to see the timer in hours if the validity is less than 12 hours below the player and font color changes to Yellow");
					}
				} else {
					logger.error(
							"user is not able to see the timer in hours if the validity is less than 12 hours below the player");
					extent.extentLoggerFail("",
							"user is not able to see the timer in hours if the validity is less than 12 hours below the player ");
				}
				PlayerControls();
				CastScreen();
			}
		}
	}

	public void PlayerControls() throws Exception {

		extent.HeaderChildNode("Verify if user is able to see the player controls on the player");
		logger.info("Verify if user is able to see the player controls on the player");
		mouseHover();
		if (verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button")
				&& verifyElementPresent(PWAPlayerPage.forward10SecBtn, "Forward 10 Sec Button")
				&& verifyElementPresent(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Sec Button")) {

			extent.HeaderChildNode("Verify if user clicks on play icon");
			logger.info("Verify if user clicks on play icon");

			mouseHover();
//		click(PWAPlayerPage.objPlayerPlay, "Play icon");
			verifyElementPresent(PWAPlayerPage.pauseBtn, "When content is playing, pause icon");

			extent.HeaderChildNode("Verify if user clicks on pause icon");
			logger.info("Verify if user clicks on pause icon");

			mouseHover();
			verifyElementPresentAndClick(PWAPlayerPage.pauseBtn, "Pause icon");
			verifyElementPresent(PWAPlayerPage.playBtn, "When content is paused, player icon");

			extent.HeaderChildNode("Verify if user clicks on backward and forward icon");
			logger.info("Verify if user clicks on backward and forward icon");

			waitTime(10000);
//		click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
			// JSClick(PWAPlayerPage.pauseBtn, "Pause icon");
			String currentDuration = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
					"Current duration");
			System.out.println("time fetched before rewind: " + currentDuration);
			String[] time = currentDuration.split(":");
			int timeDuration = Integer.parseInt(time[1]);
			System.out.println("seconds lapsed before rewind: " + timeDuration);
			int rewindTime = timeDuration - 10;
			click(PWAPlayerPage.rewind10SecBtn, "Rewind 10 seconds");
			// Get the current time duration after clicking the rewind button
			click(PWAPlayerPage.objPlaybackVideoOverlay, "player");
			String currentDurationAfter10Sec = getElementPropertyToString("innerText",
					PWAPlayerPage.currentDurationTime, "current duration");
			System.out.println("time fetched after rewind: " + currentDurationAfter10Sec);
			String[] time2 = currentDurationAfter10Sec.split(":");
			int timeDuration2 = Integer.parseInt(time2[1]);
			System.out.println("seconds lapsed after rewind: " + timeDuration2);
			if (rewindTime <= timeDuration2) {
				softAssert.assertEquals(rewindTime <= timeDuration2, true, "Rewinded video playback 10 seconds");
				extent.extentLogger("Verify rewind button", "Playback is rewinded 10 seconds");
				logger.info("Rewinded 10 seconds is passed");
			} else {
				softAssert.assertEquals(rewindTime <= timeDuration2, false,
						" Can not Rewind video playback 10 seconds");
				softAssert.assertAll();
				extent.extentLoggerFail("Verify rewind button", "Playback can not be rewind 10 seconds");
				logger.info("Rewind 10 sec is failed");
			}

			// Verify Farword 10 seconds icon
			pausePlayer();
			String currentDurationF = getElementPropertyToString("innerText", PWAPlayerPage.currentDurationTime,
					"current duration");
			System.out.println("time fetched before Farword : " + currentDuration);
			String[] timeF = currentDurationF.split(":");
			System.out.println(timeF);
			int timeDurationF = Integer.parseInt(timeF[1]);
			System.out.println("seconds lapsed before farword: " + timeDurationF);
			int farwordTimeF = timeDurationF + 10;
			// Verify Playback is farworded 10 Seconds back
			click(PWAPlayerPage.forward10SecBtn, "Farword 10 seconds");
			// Get the current time duration after clicking the rewind button
			// click(PWAPlayerPage.objPlaybackVideoOverlay, "player");
			String currentDurationAfter10SecF = getElementPropertyToString("innerText",
					PWAPlayerPage.currentDurationTime, "current duration");
			System.out.println("time fetched after rewind: " + currentDurationAfter10Sec);
			String[] time2F = currentDurationAfter10SecF.split(":");
			int timeDuration2F = Integer.parseInt(time2F[1]);
			System.out.println("seconds lapsed after Farword: " + timeDuration2F);
			if (farwordTimeF >= timeDuration2F) {
				softAssert.assertEquals(farwordTimeF >= timeDuration2F, true, "Farworded video playback 10 seconds");
				extent.extentLogger("Verify rewind button", "Playback is Farword 10 seconds");
				logger.info("Farword 10 seconds is passed");
			} else {
				softAssert.assertEquals(farwordTimeF >= timeDuration2F, false,
						" Can not Farword video playback 10 seconds");
				softAssert.assertAll();
				extent.extentLoggerFail("Verify rewind button", "Playback can not be Farword 10 seconds");
				logger.info("Farword 10 sec is failed");

			}
			extent.HeaderChildNode("Verify that player controls are functional");
			logger.info("Verify that player controls are functional");

			logger.info("Player controls are functional");
			extent.extentLoggerPass("", "Player controls are functional");

		}
	}

//	public void CastScreen() throws Exception {
//		extent.HeaderChildNode("Verify if cast option is displaying on the TVOD content player on right top corner");
//		logger.info("Verify if cast option is displaying on the TVOD content player on right top corner");
//
//		verifyElementPresent(PWAPlayerPage.objChromecastButton,"cast option on the TVOD content player on right top corner");
//
//	}

	public void Ads() throws Exception {

		extent.HeaderChildNode(
				"Verify, whether ads are displaying for the registered  user and not subscribed to Zee5");
		logger.info("Verify, whether ads are displaying for the registered  user and not subscribed to Zee5");
		waitTime(5000);

		// Set parental pin back to No restrict
		SetParentalPopup(PWAHamburgerMenuPage.objNoRestrict, "ExpiredTVODPassword", "No Restrict content");
		logout();
		waitTime(3000);
//		if(verifyElementPresent(PWAHomePage.objNotNow, "Notification popup")) {
//			click(PWAHomePage.objNotNow, "Notification popup");
//			}
//		verifyElementPresentAndClick(PWAHomePage.objLoginText, "Login");
		waitTime(5000);
		WatchMorePopup();
		waitTime(3000);
		// NonSubscribed user credentials

		TVODComboLogin("NonsubscribedUserName", "NonsubscribedPassword");
		waitTime(5000);
		WatchMorePopup();
		SearchContent("freeEpisode2");
		waitTime(10000);
		if (verifyElementDisplayed(PWAPlayerPage.objAd)) {
			logger.info("ads are displaying for the TVOD subscribed user");
			extent.extentLoggerPass("", "ads are displaying for the TVOD subscribed user");
		} else {
			logger.info("ads are not displaying for the TVOD subscribed user");
			extent.extentLoggerFail("", "ads are not displaying for the TVOD subscribed user");
		}
	}

	public void ExpiredContentValidation() throws Exception {
		extent.HeaderChildNode("Verify the Rent for INR XX CTA is displayed post TVOD expiry below player");
		logger.info("Verify the Rent for INR XX CTA is displayed post TVOD expiry below player");
		// Set parental pin back to No restrict
		SetParentalPopup(PWAHamburgerMenuPage.objNoRestrict, "PlaybackInitTVODpassword", "No Restrict content");
		logout();
		waitTime(5000);
		WatchMorePopup();
		click(PWAHomePage.objNotNow, "Notification popup");
		// ZeeWEBPWALogin("NonSubscribedUser");
		TVODComboLogin("ExpiredTVODUserName", "ExpiredTVODPassword");
		WatchMorePopup();
		waitTime(5000);
		navigateToAnyScreenOnWeb("ZEEPLEX");
		waitTime(5000);
		scrollToElement(PWAComboOfferPage.objContentThumbnail);
		if (verifyElementPresentAndClick(PWAComboOfferPage.objContentThumbnail, "Content thumbnail")) {
			DeviceLimitPopOp();
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin1player)) {
				logger.info("Parental pin popup");
				type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin2player, "1", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin3player, "1", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin4player, "1", "ParentalLockPin");
				waitTime(4000);
			}
			verifyElementPresent(PWAPlayerPage.objContentExpiryInfo,
					"post TVOD expiry below player, Rent for INR XX CTA");
			extent.HeaderChildNode("Verify Rent for INR XX displaying on player screen post expiry");
			logger.info("Verify Rent for INR XX displaying on player screen post expiry");
			waitTime(60000);
			waitTime(30000);
			waitTime(60000);
			verifyElementPresent(PWAPlayerPage.objRentnowInline, "Watch full content by renting it now on Player");
			extent.HeaderChildNode(
					"Verify if Rent for INR XX inline text should be displayed on player screen with solid background");
			logger.info(
					"Verify if Rent for INR XX inline text should be displayed on player screen with solid background");
			waitTime(5000);
			verifyElementPresent(PWAPlayerPage.objRentNowPlayerCTA, "Rent for INR XX inline text");
		} else {
			logger.info("Contents not dispalyed in rent tab");
			extent.extentLoggerFail("", "Contents not dispalyed in rent tab");
		}
	}

	public void CrossDeviceValidation() throws Exception {

		extent.HeaderChildNode(
				"Verify the parental pin popup is displayed for premium content if user select All restrict content");
		logger.info(
				"Verify the parental pin popup is displayed for premium content if user select All restrict content");

		// Set parental pin back to No restrict
		// SetParentalPopup(PWAHamburgerMenuPage.objNoRestrict, "No Restrict content");

		logout();
		waitTime(5000);

		MandatoryRegisterationPopOp();
		waitTime(5000);
		WatchMorePopup();
		waitTime(5000);
		click(PWAHomePage.objNotNow, "Notification popup");
		MandatoryRegisterationPopOp();
		// Subscribed user credentials

		// ZeeWEBPWALogin("NonSubscribedUser");
		TVODComboLogin("SubscribedUserName", "SubscribedPassword");
		WatchMorePopup();
		waitTime(5000);
		String PremiumContent = SearchContent("premiumMovie");
		waitTime(5000);
		DeviceLimitPopOp();
		waitTime(5000);
		SetParentalPopup(PWAHamburgerMenuPage.objRestrictAll, "SubscribedPassword", "Restrict all");
		waitTime(5000);
		if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player,
				"when all restrict is enabled, Parental pin pop")) {
			type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin2player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin3player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin4player, "1", "ParentalLockPin");
			waitTime(4000);
		}

		extent.HeaderChildNode(
				"Verify whether user able to play the premium content on other platforms if user has purchase the combo plan through web or App");
		logger.info(
				"Verify whether user able to play the premium content on other platforms if user has purchase the combo plan through web or App");

		if (verifyElementPresent(PWAPlayerPage.objPlayerPromoMetadata, "Title name")) {
			String Title = getText(PWAPlayerPage.objPlayerPromoMetadata);
			System.out.println(Title);
			extent.extentLogger("", Title);
			if (Title.contains(PremiumContent)) {
				logger.info(
						"user is able to play the premium content on other platforms if user has purchase the combo plan through web or App");
				extent.extentLoggerPass("",
						"user is able to play the premium content on other platforms if user has purchase the combo plan through web or App");
			}
		} else {
			logger.info(
					"user is not able to play the premium content on other platforms if user has purchase the combo plan through web or App");
			extent.extentLogger("",
					"user is notable to play the premium content on other platforms if user has purchase the combo plan through web or App");
		}

		extent.HeaderChildNode(
				"Verify the parental pin popup is displayed for premium content if user restrice +13 content");
		logger.info("Verify the parental pin popup is displayed for premium content if user restrice +13 content");

		waitTime(5000);
		SetParentalPopup(PWAHamburgerMenuPage.objRestrict13PlusContent, "SubscribedPassword", "Restrict 13+ content");
		waitTime(5000);
//		SearchContent("premiumMovie2");
//		DeviceLimitPopOp();
		waitTime(5000);
		if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field")) {
			type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin2player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin3player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin4player, "1", "ParentalLockPin");
			waitTime(2000);
		}

		extent.HeaderChildNode("Verify if the timer is started on entering parental pin");
		logger.info("Verify if the timer is started on entering parental pin");

		SetParentalPopup(PWAHamburgerMenuPage.objRestrictAll, "SubscribedPassword", "Restrict all");
		SearchContent("premiumMovieWithTrailer");
		waitTime(5000);
		scrollToElement(PWAPlayerPage.objWatchTrailer);
		JSClick(PWAPlayerPage.objWatchTrailer, "Watch Trailer");

		if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field")) {
			type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin2player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin3player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin4player, "1", "ParentalLockPin");
			verifyElementPresent(PWAPlayerPage.objPlayerStartTime, "Timer is started on entering parental pin");
		} else {
			logger.error("Timer is not started on entering parental pin");
			extent.extentLoggerFail("", "Timer is not started on entering parental pin");
		}

		extent.HeaderChildNode("verify the parental pop-up not  displayed when there is no restriction");
		logger.info("verify the parental pop-up not  displayed when there is no restriction");
		waitTime(5000);
		SetParentalPopup(PWAHamburgerMenuPage.objNoRestrict, "SubscribedPassword", "No Restrict content");
		waitTime(5000);
		// SearchContent("premiumMovie2");
		// waitTime(5000);
		if (verifyElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin1player)) {
			logger.info("Parental pin pop-up is displayed when there is no restriction");
			extent.extentLoggerFail("", "Parental pin pop-up is displayed when there is no restriction");
		} else {
			logger.error("Parental pin pop-up is not displayed when there is no restriction");
			extent.extentLoggerPass("", "Parental pin pop-up is not displayed when there is no restriction");
		}
	}

	public void SetParentalPopup(By loc, String password, String button) throws Exception {

		waitTime(5000);
		verifyElementPresentAndClick(PWAHomePage.objHamburgerMenu, "Hamburger");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "parental pincode");
		waitTime(3000);
		// verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl,
		// "parental pincode");
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password field");
		String Password = getParameterFromXML(password);
		type(PWALoginPage.objPasswordField, Password, "Password");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
		WatchMorePopup();
		waitTime(3000);
		click(PWAHamburgerMenuPage.objRestrict13PlusContent, "Restrict 13+ content");
		waitTime(3000);
		verifyElementPresentAndClick(loc, button);
		waitTime(3000);
		if (verifyElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin1)) {
			{
				type(PWAHamburgerMenuPage.objParentalLockPin1, "1", "setParentalLockPin");
			}
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin2)) {
				type(PWAHamburgerMenuPage.objParentalLockPin2, "1", "setParentalLockPin");
			}
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin3)) {
				type(PWAHamburgerMenuPage.objParentalLockPin3, "1", "setParentalLockPin");
			}
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin4)) {
				type(PWAHamburgerMenuPage.objParentalLockPin4, "1", "setParentalLockPin");
			}
		}
		waitTime(2000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Continue button");

	}

	public String SearchContent(String s2) throws Exception {
		String s1 = getParameterFromXML(s2);

		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search");
		type(PWAHomePage.objSearchField, s1, "Search field");
		// verifyElementPresentAndClick(PWAHomePage.objSearchField, "Search");
		waitTime(10000);
		verifyElementPresentAndClick(PWASearchPage.objFirstSearchResult, "Search");
		waitTime(5000);
		return s1;
	}

	public void TVODComboLogin(String username, String password) throws Exception {
//		extent.HeaderChildNode("Login");
//			extent.extentLogger("", "Login through TVOD User");
		String Username = getParameterFromXML(username);
		System.out.println(Username);
		String Password = getParameterFromXML(password);
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(5000);
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, Username, "Email Field");
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, Password, "Password field");
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(5000);
	}

	public void comboOfferValidationForGuestCheckout(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			HeaderChildNode(
					"Verify that user is able to purchase Combo offer using any payment modes displayed on payment page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			scrollDownWEB();
			scrollDownWEB();
			ClickOnCTAInZeePlexScreen("Trailer");
			waitTime(5000);
			scrollDownWEB();
			click(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
			click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
			String Username = getParameterFromXML("NonsubscribedUserName");
			String Password = getParameterFromXML("NonsubscribedPassword");
			type(PWALoginPage.objEmailField, Username, "Email ID");
			click(PWALoginPage.objContinueBtn, "Continue Button");
			type(PWALoginPage.objPasswordField, Password, "Password Button");
			click(PWALoginPage.objContinueBtn, "Continue Button");
			waitTime(10000);
			WebElement iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
			Thread.sleep(5000);
			Thread.sleep(5000);
			Thread.sleep(5000);
			getWebDriver().switchTo().frame(iframeElement);
			click(PWASubscriptionPages.objEnterCardNumber, "Card Number");
			type(PWASubscriptionPages.objEnterCardNumber, "4012001037141112", "Card Number");
			click(PWASubscriptionPages.objEnterCardNumber, "Card Number");
			click(PWASubscriptionPages.objEnterExpiry, "Expiry");
			type(PWASubscriptionPages.objEnterExpiry, "0525", "Expiry");
			click(PWASubscriptionPages.objEnterCVV, "CVV");
			type(PWASubscriptionPages.objEnterCVV, "124", "CVV");
			verifyElementPresent(PWASubscriptionPages.objCreditDebitProceedToPay, "Proceed To Pay Button");
			getWebDriver().switchTo().defaultContent();
			waitTime(5000);
			navigateHome();
			logout();
			extent.HeaderChildNode("Verify that user is able to play premium content/Rented Movie");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "kirankm12345@gmail.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			waitTime(5000);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			click(PWAComboOfferPage.objWatchNowCTA, "Watch Now CTA");
			waitTime(2000);
			if (checkElementDisplayed(PWAComboOfferPage.objTvodConsumptionPage, "Consumption Screen")) {
				extent.extentLogger("Movie", "User is able to play premium Rented Movie");
				logger.info("User is able to play premium Rented Movie");
			} else {
				extent.extentLoggerFail("Movie", "User is not able to play premium Rented Movie");
				logger.error("User is not able to play premium Rented Movie");
			}

			waitTime(2000);
			navigateHome();
			logout();
			HeaderChildNode(
					"Verify that user is able to redirect to payment page with only TVOD price on clicking Rent Movie CTA");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			scrollDownWEB();
			scrollDownWEB();
			ClickOnCTAInZeePlexScreen("Trailer");
			waitTime(5000);
			scrollDownWEB();
			click(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
			waitTime(3000);
			scrollDownWEB();
			scrollDownWEB();
			click(PWAComboOfferPage.objOnlyRentMovie, "Rent Movie CTA");
			String price1 = getText(PWAComboOfferPage.objRentedMoviePrice);
			System.out.println(price1);
			click(PWAComboOfferPage.objRentMovieBtn, "Buy Radhe Combo Button");
			waitTime(8000);
			type(PWALoginPage.objEmailField, Username, "Email ID");
			click(PWALoginPage.objContinueBtn, "Continue Button");
			type(PWALoginPage.objPasswordField, Password, "Password Button");
			click(PWALoginPage.objContinueBtn, "Continue Button");
			waitTime(10000);
			String price = getText(PWAComboOfferPage.objRentedMoviePricePaymentPage);
			System.out.println(price);
			if (price1.equalsIgnoreCase(price)) {
				extent.extentLoggerPass("Rent Movie",
						"User is redirected to payment screen with only Movie price on clicking Rent Movie CTA");
				logger.info("User is redirected to payment screen with only Movie price on clicking Rent Movie CTA");
			} else {
				extent.extentLoggerFail("Rent Movie",
						"User is not redirected to payment screen with only Movie price on clicking Rent Movie CTA");
				logger.error(
						"User is not redirected to payment screen with only Movie price on clicking Rent Movie CTA");
			}
			Thread.sleep(5000);
			Thread.sleep(5000);
			Thread.sleep(5000);
			WebElement iframe = getWebDriver().findElement(By.id("juspay_iframe"));
			getWebDriver().switchTo().frame(iframe);
			click(PWASubscriptionPages.objEnterCardNumber, "Card Number");
			type(PWASubscriptionPages.objEnterCardNumber, "4012001037141112", "Card Number");
			click(PWASubscriptionPages.objEnterCardNumber, "Card Number");
			click(PWASubscriptionPages.objEnterExpiry, "Expiry");
			type(PWASubscriptionPages.objEnterExpiry, "0525", "Expiry");
			click(PWASubscriptionPages.objEnterCVV, "CVV");
			type(PWASubscriptionPages.objEnterCVV, "124", "CVV");
			verifyElementPresent(PWASubscriptionPages.objCreditDebitProceedToPay, "Proceed To Pay Button");
			getWebDriver().switchTo().defaultContent();
			waitTime(5000);
			navigateHome();
			logout();
		}
	}

	/**
	 * Kartheek - Guest Checkout
	 */

	public void guestCheckout(String userType) throws Exception {
		if (userType.equals("Guest")) {

			seeComboOfferPageOnClickingRentNowCTA(userType);
			userIsRedirectingToTrailerConsumptionPage(userType);
			seeTheRentNowCTABelowPlayerOnPlexConsumptionPage(userType);
			seeTheRentNowCTAAndLoginCTAOnPlayerPostTrailerConsumptionONPlexConsumptionPage(userType);
			userIsGettingComboOfferPageOnClickinRentNow(userType);
			userIsAbleToSeeTheComboOfferWidgetBelowPlayerOnPlexConsumptionPage(userType);
			userIsGettingComboOfferPageOnClickingRentNowBelowPlayerOnPlexConsumptionPage(userType);
			ComboOfferPageIsDisplayedOnClickingKnowMore(userType);
			userIsAbleToSeeTheBuyComboForRs499CTAOnComboOfferPage(userType);
			AccountInfoPageIsDisplayedForUserOnClickingBuyComboOfferForRs499CTA(userType);
			redirectedToHomepageOnClickingExplorePremiumCTA(userType);
			userAbleToCloseThePopUpByClickingCloseIcon(userType);
			HaveItAllPopUpIsDisplayedIfUserEntersActive499Plan(userType);
			containsActivePlanDetailsAsWellAsActiveTVODDetail(userType);
			userIsRedirectedPlexConsumptionPageOnClickingWatchNowCTA(userType);
			userIsRedirectedToHomepageOnClickingExplorePremiumCTA(userType);
			userIsAbleToCloseThePopUpByClickingCloseIconDisplayedOnPopUp(userType);
			YouHaveItAllPopUpIsDisplayedIfUserEntersActive499PlanUserLoginDetails(userType);
			YouHaveItAllPopUpIsContainsActivePlanDetailsAsWellAsActiveTVODDetail(userType);
			userIsRedirectedPlexConsumptionPageOnClickingWatchNowCTA499(userType);
			userIsRedirectedToHomepageOnClickingExplorePremiumCTA499(userType);
			userIsAbleToCloseThePopUpByClickingCloseIconDisplayedOnPopUp499(userType);
			verifyThatUpgradeToRs499ComboOfferPopUp(userType);
			verifyThatUpgradeToRs499ComboOfferPopUpIsContainsActivePlanDetails(userType);
			VerifyThatUserRedirectsBackToComboOfferPage(userType);
			verifyThatUserRedirectsToPaymentPageWithDifferentialAmount(userType);
			verifyThatUserIsAbleToRedirectToPaymentPage(userType);
			verifyThatUpgradePopUpIsDisplayedIfUserEntersActiveRSVOD49Plan(userType);
			verifyThatUpgradePopUpIsContainsActivePlanDetails(userType);
			verifyThatUserRedirectsBackToComboOfferPage(userType);
			verifyThatUserRedirectsToPaymentPageWithDifferentialAmount49(userType);
			verifyThatUserIsAbleToRedirectToPaymentPageWithOnlyTVODPrice(userType);
			verifyThatUpgradePopUpIsDisplayedIfUserEntersActiveRSVOD499(userType);
			verifyThatUpgradePopUpIsContainsActivePlan(userType);
			verifyUserRedirectsBackToComboOfferPage(userType);
			verifyUserRedirectsToPaymentPageWithDifferentialAmount(userType);
			verifyUserIsAbleToRedirectToPaymentPageWithOnlyTVOD(userType);
		}
	}

	public void PWAGuestCheckout(String userType, String CTAToBeClicked) throws Exception {

		navigateHome();
		mandatoryRegistrationPopUp(userType);
		navigationFromZeeplexScreen("Trailer");

	}

	public void seeComboOfferPageOnClickingRentNowCTA(String userType) throws Exception {
		System.out.println("1");
		extent.HeaderChildNode(
				"Verify that user is able to see combo offer page on clicking Rent Now CTA on Rent landing page");
		logger.info("Verify that user is able to see combo offer page on clicking Rent Now CTA on Rent landing page");

		navigateHome();
		mandatoryRegistrationPopUp(userType);
		click(PWAHomePage.objTabName("ZEEPLEX"), "ZEEPLEX Tab");
		waitTime(3000);
		scrollByWEB();
		verifyElementPresentAndClick(PWAComboOfferPage.objRentNow, "Rent Now in ZEEPLEX Screen");
		waitTime(2000);
		verifyComboScreen();
//	if (verifyElementPresent(PWAComboOfferPage.objRadheComboOffer, "Radhe Combo Offer")) {
//		logger.info("User is able to see Radhe Combo Offer When ever click on Rent Now ");
//		extent.extentLoggerPass("", "User is able to see Radhe Combo Offer When ever click on Rent Now ");
//	}else {
//		logger.info("User is not able to see Radhe Combo Offer When ever click on Rent Now ");
//		extent.extentLoggerFail("", "User is not able to see Radhe Combo Offer When ever click on Rent Now ");
//	}

	}

	public void userIsRedirectingToTrailerConsumptionPage(String userType) throws Exception {
		System.out.println("2");

		extent.HeaderChildNode(
				"Verify that user clicks on watch trailer CTA on Rent landing Page then user is redirecting to trailer consumption page");
		logger.info(
				"Verify that user clicks on watch trailer CTA on Rent landing Page then user is redirecting to trailer consumption page");

		BackWeb(1);
		waitTime(3000);
		click(PWAComboOfferPage.objTrailer, "Trailer CTA Of First Movie");
		waitTime(2000);
		validateConsumptionScreen();

//	if(verifyIsElementDisplayed(PWAPlayerPage.objTrailerConsumptionPage, "Trailer Page")) {
//		logger.info("Trailer Consumption Page is displayed when ever click Trailer CTA Of Of First Movie");
//		extent.extentLoggerPass("", "Trailer Consumption Page is displayed when ever click Trailer CTA Of Of First Movie");
//	}else {
//		logger.info("Trailer Consumption Page is not displayed when ever click Trailer CTA Of Of First Movie");
//		extent.extentLoggerFail("", "Trailer Consumption Page is not displayed when ever click Trailer CTA Of Of First Movie");
//	}

	}

	public void seeTheRentNowCTABelowPlayerOnPlexConsumptionPage(String userType) throws Exception {

		System.out.println("3");
		extent.extentLogger("",
				"Verify that user is able to see the Rent Now CTA below player on Plex consumption page");
		logger.info("Verify that user is able to see the Rent Now CTA below player on Plex consumption page");
		waitTime(2000);
		verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA Below the Player");
//	if(verifyIsElementDisplayed(PWAPlayerPage.objRentNowCTABelowPlayer, "Rent Now CTA Below the Player")) {
//		logger.info("User is able to see the Rent Now CTA below player on Plex consumption page");
//		extent.extentLoggerPass("", "User is able to see the Rent Now CTA below player on Plex consumption page");
//	}else {
//		logger.info("User is not able to see the Rent Now CTA below player on Plex consumption page");
//		extent.extentLoggerFail("", "User is not able to see the Rent Now CTA below player on Plex consumption page");
//	}

	}

	public void seeTheRentNowCTAAndLoginCTAOnPlayerPostTrailerConsumptionONPlexConsumptionPage(String userType)
			throws Exception {
		System.out.println("4");
		extent.HeaderChildNode(
				"Verify that user is able to see the Rent Now CTA and Login CTA on player post trailer consumption on Plex consumption page");
		logger.info(
				"Verify that user is able to see the Rent Now CTA and Login CTA on player post trailer consumption on Plex consumption page");

		verifyElementExist(PWAComboOfferPage.objRentNowInPlayer, "Rent Now CTA On Player");

//	if(verifyElementExist(PWAPlayerPage.objRentNowPlaybackOnConsumptionPage, "Rent Now")) {
//		logger.info("User is able to see Rent NOW CTA Playback On Consumption Page");
//		extent.extentLoggerPass("", "User is able to see Rent NOW CTA Playback On Consumption Page");
//	}else {
//		logger.info("User is not able to see Rent NOW CTA Playback On Consumption Page");
//		extent.extentLoggerFail("", "User is not able to see Rent NOW CTA Playback On Consumption Page");
//	}
		verifyElementPresent(PWAComboOfferPage.objSkipCTAPlaybackOnConsumptionPage, "Skip CTA On Player");
//
//	if(verifyIsElementDisplayed(PWAPlayerPage.objSkipCTAPlaybackOnConsumptionPage, "Skip CTA Trailer")) {
//		logger.info("User is able to see Skip CTA  Playback On Consumption Page");
//		extent.extentLoggerPass("", "User is able to see Skip CTA  Playback On Consumption Page");
//	}else {
//		logger.info("User is not able to see Skip CTA  Playback On Consumption Page");
//		extent.extentLoggerFail("", "User is not able to see Skip CTA  Playback On Consumption Page");
//	}
		verifyElementPresent(PWAComboOfferPage.objLoginButtonPlaybackOnConsumptionPage, "Login CTA On Player");

//	if(verifyIsElementDisplayed(PWAPlayerPage.objLoginButtonPlaybackOnConsumptionPage, "Login Button")) {
//		logger.info("User is able to see Login CTA Playback On Consumption Page");
//		extent.extentLoggerPass("", "User is able to see Login CTA Playback On Consumption Page");
//	}else {
//		logger.info("User is not able to see Login CTA Playback On Consumption Page");
//		extent.extentLoggerFail("", "User is not able to see Login CTA Playback On Consumption Page");
//	}
	}

	public void userIsGettingComboOfferPageOnClickinRentNow(String userType) throws Exception {
		System.out.println("6");

		extent.HeaderChildNode(
				"Verify that user is getting Combo offer page on clicking Rent Now on Player on Plex consumption page");
		logger.info(
				"Verify that user is getting Combo offer page on clicking Rent Now on Player on Plex consumption page");

		click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now");

//
		waitTime(2000);
		scrollByWEB();
		verifyElementPresent(PWAComboOfferPage.objRadheComboOffer, "Radhe Combo Offer");

//	if (verifyIsElementDisplayed(PWAComboOfferPage.objRadheComboOffer, "Radhe Combo Offer")) {
//			logger.info("User is able to see Radhe Combo Offer When ever click on Rent Now ");
//			extent.extentLoggerPass("", "User is able to see Radhe Combo Offer When ever click on Rent Now ");
//		}else {
//			logger.info("User is not able to see Radhe Combo Offer When ever click on Rent Now ");
//			extent.extentLoggerFail("", "User is not able to see Radhe Combo Offer When ever click on Rent Now ");
//		}
	}

	public void userIsAbleToSeeTheComboOfferWidgetBelowPlayerOnPlexConsumptionPage(String userType) throws Exception {
		System.out.println("5");
		extent.HeaderChildNode(
				"Verify that user is able to see the combo offer widget below player on plex consumption page");
		logger.info("Verify that user is able to see the combo offer widget below player on plex consumption page");
		Back(1);
		waitTime(4000);
		scrollByWEB();
		waitTime(2000);
		verifyElementPresent(PWAComboOfferPage.objComboOfferWidget, "Combo Offer Widget");

//		if(verifyIsElementDisplayed(PWAPlayerPage.objComboOfferWidget, "Combo Offer Widget")) {
//			logger.info("User is able to see Combo Offer Widget ");
//			extent.extentLoggerPass("", "User is able to see Combo Offer Widget ");
//		}else {
//			logger.info("User is not able to see Combo Offer Widget ");
//			extent.extentLoggerFail("", "User is not able to see Combo Offer Widget ");
//		}
	}

	public void userIsGettingComboOfferPageOnClickingRentNowBelowPlayerOnPlexConsumptionPage(String userType)
			throws Exception {
		System.out.println("7");
		extent.HeaderChildNode(
				"Verify that user is getting Combo offer page on clicking Rent Now Below Player on Plex consumption page");
		logger.info(
				"Verify that user is getting Combo offer page on clicking Rent Now Below Player on Plex consumption page");

		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA Below Player");
		waitTime(2000);
		verifyComboScreen();

//	if(verifyIsElementDisplayed(PWAComboOfferPage.objRadheComboPage, "Radhe Combo")){
//		logger.info("User is able to see Radhe Combo page When ever click on Rent Now ");
//		extent.extentLoggerPass("", "User is able to see Radhe Combo page  When ever click on Rent Now ");
//	}else {
//		logger.info("User is not able to see Radhe Combo page  When ever click on Rent Now ");
//		extent.extentLoggerFail("", "User is not able to see Radhe Combo page When ever click on Rent Now ");
//	}
	}

	public void ComboOfferPageIsDisplayedOnClickingKnowMore(String userType) throws Exception {
		System.out.println("8");
		extent.HeaderChildNode(
				"Verify that \"Combo Offer\" page is displayed on clicking Know More or clicking anywhere on nudge");
		logger.info(
				"Verify that \"Combo Offer\" page is displayed on clicking Know More or clicking anywhere on nudge");

		Back(1);
		waitTime(2000);
		scrollByWEB();

		verifyElementPresent(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");

//	if(verifyIsElementDisplayed(PWAPlayerPage.objKnowMore, "Know More")){
//		logger.info("Know More is displayed when ever click on trailer");
//		extent.extentLoggerPass("", "Know More is displayed when ever click on trailer");
//	}else {
//		logger.info("Know More is not displayed when ever click on trailer");
//		extent.extentLoggerFail("", "Know More is not displayed when ever click on trailer");
//	}
		click(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
//	if(verifyElementExist(PWAPlayerPage.objPunjabiContentPopUp, "Punjabi Content ?")){
//		logger.info("Punjabi Content ? PopUP is displayed");
//		extent.extentLoggerPass("", "Punjabi Content ? PopUP is displayed");
//		click(PWAPlayerPage.objYesIWoild, "Yes I Woild");
//	}else {
//		logger.info("Punjabi Content ? PopUP is not displayed");
//		extent.extentLoggerFail("", "Punjabi Content ? PopUP is not displayed");
//	}
		waitTime(2000);
		scrollByWEB();
		verifyElementPresent(PWAComboOfferPage.objRadheComboOffer, "Radhe Combo Offer");

//	if (verifyIsElementDisplayed(PWAComboOfferPage.objRadheComboOffer, "Radhe Combo Offer")) {
//			logger.info("User is able to see Radhe Combo Offer When ever click on Rent Now ");
//			extent.extentLoggerPass("", "User is able to see Radhe Combo Offer When ever click on Rent Now ");
//		}else {
//			logger.info("User is not able to see Radhe Combo Offer When ever click on Rent Now ");
//			extent.extentLoggerFail("", "User is not able to see Radhe Combo Offer When ever click on Rent Now ");
//		}
	}

	public void userIsAbleToSeeTheBuyComboForRs499CTAOnComboOfferPage(String userType) throws Exception {
		System.out.println("9");
		extent.HeaderChildNode("Verify that user is able to see the Buy Combo for Rs 499 CTA on combo offer page");
		logger.info("Verify that user is able to see the Buy Combo for Rs 499 CTA on combo offer page");

		scrollByWEB();
		verifyElementPresent(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
//
//	if(verifyIsElementDisplayed(PWAComboOfferPage.objRadheComboPage, "Radhe Combo")){
//		logger.info("User is able to see Radhe Combo page When ever click on Rent Now ");
//		extent.extentLoggerPass("", "User is able to see Radhe Combo page  When ever click on Rent Now ");
//	}else {
//		logger.info("User is not able to see Radhe Combo page  When ever click on Rent Now ");
//		extent.extentLoggerFail("", "User is not able to see Radhe Combo page When ever click on Rent Now ");
//	}
	}

	public void AccountInfoPageIsDisplayedForUserOnClickingBuyComboOfferForRs499CTA(String userType) throws Exception {
		System.out.println("10");
		extent.HeaderChildNode(
				"Verify that Account info page is displayed for user on clicking Buy Combo Offer for Rs 499 CTA from Combo offer page");
		logger.info(
				"Verify that Account info page is displayed for user on clicking Buy Combo Offer for Rs 499 CTA from Combo offer page");

		waitTime(2000);

		scrollToBottomOfPageWEB();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Page");

//	if(verifyIsElementDisplayed(PWAPlayerPage.objAccountInfo, "Account Info")){
//		logger.info("Account info page is displayed when ever click on Buy Combo Offer ");
//		extent.extentLoggerPass("", "Account info page is displayed when ever click on Buy Combo Offer ");
//	}else {
//		logger.info("Account info page is displayed when ever click on Buy Combo Offer ");
//		extent.extentLoggerFail("", "Account info page is displayed when ever click on Buy Combo Offer ");
//	}
	}

	public void redirectedToHomepageOnClickingExplorePremiumCTA(String userType) throws Exception {
		System.out.println("21");
		extent.HeaderChildNode("Verify that user is redirected to Homepage on clicking Explore Premium CTA");
		logger.info("Verify that user is redirected to Homepage on clicking Explore Premium CTA");

		waitTime(2000);
//	PWAComboOfferLoginInSubscriptionFlow("SubscribedUser", "749");
		PWALoginInSubscriptionFlow("zee.igs7641@gmail.com", "123456");
		waitTime(5000);
		verifyElementPresentAndClick(PWASubscriptionPages.objexplorePremium, "Explore Premium");

//	if(verifyIsElementDisplayed(PWASubscriptionPages.objexplorePremium, "Explore Premium")){
//		logger.info("Explore Premium is displayed when ever click on Proceed");
//		extent.extentLoggerPass("", "Explore Premium is displayed when ever click on Proceed");
//	}else {
//		logger.info("Explore Premium is not displayed when ever click on Proceed");
//		extent.extentLoggerFail("", "Explore Premium is not displayed when ever click on Proceed");
//	}
		waitTime(2000);
		if (verifyIsElementDisplayed(PWAHomePage.objHomePage, "Home Page")) {
			logger.info("User is redirected to Home page when ever click on Explore Premium");
			extent.extentLoggerPass("", "User is redirected to Home page when ever click on Explore Premium");
		} else {
			logger.info("User is not redirected to Home page when ever click on Explore Premium");
			extent.extentLoggerFail("", "User is not redirected to Home page when ever click on Explore Premium");
		}
	}

	public void userAbleToCloseThePopUpByClickingCloseIcon(String userType) throws Exception {

		logout();
		waitTime(4000);
		navigationFromZeeplexScreen("Trailer");
		waitTime(2000);
		scrollByWEB();
		waitTime(2000);
		verifyElementPresentAndClick(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		PWALoginInSubscriptionFlow("zee.igs7641@gmail.com", "123456");

		waitTime(10000);
		System.out.println("23");
		extent.HeaderChildNode(
				"Verify that You Have it All Pop up is displayed if user enters active 499 plan user login details during guest checkout");
		logger.info(
				"Verify that You Have it All Pop up is displayed if user enters active 499 plan user login details during guest checkout");
		verifyElementPresent(PWASubscriptionPages.objHaveitAllPopDialog, "Have it All Pop Dialog");
		System.out.println("22");
		extent.HeaderChildNode(
				"Verify that user is able to close the pop up by clicking Close icon displayed on pop up");
		logger.info("Verify that user is able to close the pop up by clicking Close icon displayed on pop up");
		verifyElementPresentAndClick(PWASubscriptionPages.objZeeplexPopupCloseButton, "Close Icon");

//	if(verifyIsElementDisplayed(PWASubscriptionPages.objZeeplexPopupCloseButton, "Close Icon")){
//		logger.info("User is able to see close pop up");
//		extent.extentLoggerPass("", "User is able to see close pop up");
//	}else {
//		logger.info("User is not able to see close pop up");
//		extent.extentLoggerFail("", "User is not able to see close pop up");
//	}
//	if(verifyIsElementDisplayed(PWAHomePage.objHomePage, "Home Page")){
//		logger.info("User is redirected to Home page when ever click on Explore Premium");
//		extent.extentLoggerPass("", "User is redirected to Home page when ever click on Explore Premium");
//	}else {
//		logger.info("User is not redirected to Home page when ever click on Explore Premium");
//		extent.extentLoggerFail("", "User is not redirected to Home page when ever click on Explore Premium");
//	}

	}

	public void HaveItAllPopUpIsDisplayedIfUserEntersActive499Plan(String userType) throws Exception {
		System.out.println("23");
		extent.HeaderChildNode(
				"Verify that You Have it All Pop up is displayed if user enters active 499 plan user login details during guest checkout");
		logger.info(
				"Verify that You Have it All Pop up is displayed if user enters active 499 plan user login details during guest checkout");

		logout();
		navigationFromZeeplexScreen("Trailer");
		waitTime(2000);
		scrollByWEB();
		waitTime(2000);
		verifyElementPresentAndClick(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		PWALoginInSubscriptionFlow("zee.igs7641@gmail.com", "123456");

		waitTime(10000);
//if(verifyElementDisplayed(PWASubscriptionPages.objHaveitAllPopDialog)){
//extent.extentLoggerPass("Message:", "You Have it all dialog available");
//logger.info("You Have it all dialog available");
//}else{
//extent.extentLoggerFail("Message:", " You Have it all dialog unavailable");
//logger.error(" You Have it all dialog unavailable");
//}
		if (verifyElementDisplayed(PWASubscriptionPages.objYouHaveAlreadyRentedThisZEEPLEXMovieDialog)) {
			extent.extentLoggerPass("Message:", "You Have already rented ZEEPLEX movie dialog available");
			logger.info("You Have already rented ZEEPLEX movie dialog available");
		} else {
			extent.extentLoggerFail("Message:", " You Have already rented ZEEPLEX movie dialog unavailable");
			logger.error(" You Have already rented ZEEPLEX movie dialog unavailable");
		}
//if(verifyElementDisplayed(PWASubscriptionPages.objYouHaveActivePremiumPlanDialog)){
//extent.extentLoggerPass("Message:", "You also have an active Premium plan dialog available");
//logger.info("You also have an active Premium plan dialog available");
//}else{
//extent.extentLoggerFail("Message:", "You also have an active Premium plan dialog unavailable");
//logger.error("You also have an active Premium plan dialog unavailable");
//}

	}

	public void containsActivePlanDetailsAsWellAsActiveTVODDetail(String userType) throws Exception {
		System.out.println("24");
		extent.HeaderChildNode(
				"Verify that You Have it all pop up is contains active plan details as well as active TVOD detail");
		waitTime(2000);
		if (verifyElementDisplayed(PWASubscriptionPages.objZeeplexAndTickIcon)) {
			extent.extentLoggerPass("Popup:", "Zeeplex and tick icon available");
			logger.info("Zeeplex and tick icon available");
		} else {
			extent.extentLoggerFail("Popup:", " Zeeplex and tick icon unavailable");
			logger.error(" Zeeplex and tick icon unavailable");
		}
		if (verifyElementDisplayed(PWASubscriptionPages.objHaveitAllPopDialog)) {
			extent.extentLoggerPass("Popup:", "You have it all text available");
			logger.info("You have it all text available");
		} else {
			extent.extentLoggerFail("Popup:", " You have it all text unavailable");
			logger.error(" You have it all text unavailable");
		}
		if (verifyElementDisplayed(PWASubscriptionPages.objYouAreCurrentlyOnPremiumYearPlan)) {
			extent.extentLoggerPass("Popup:", "Your premium Rs 599 for 1 year plan is active text available");
			logger.info("Your premium Rs 599 for 1 year plan is active text available");
		} else {
			extent.extentLoggerFail("Popup:", " Your premium Rs 599 for 1 year plan is active text unavailable");
			logger.error(" Your premium Rs 599 for 1 year plan is active text unavailable");
		}
		if (verifyElementDisplayed(PWASubscriptionPages.objYouHaveAlreadyRentedThisZEEPLEXMovieDialog)) {
			extent.extentLoggerPass("Message:", "You Have already rented ZEEPLEX movie dialog available");
			logger.info("You Have already rented ZEEPLEX movie dialog available");
		} else {
			extent.extentLoggerFail("Message:", " You Have already rented ZEEPLEX movie dialog unavailable");
			logger.error(" You Have already rented ZEEPLEX movie dialog unavailable");
		}
		if (verifyElementDisplayed(PWASubscriptionPages.objWatchNowCTA)) {
			extent.extentLoggerPass("Popup:", "Watch now CTA available");
			logger.info("Watch now CTA available");
		} else {
			extent.extentLoggerFail("Popup:", " Watch now CTA unavailable");
			logger.error(" Watch now CTA unavailable");
		}
		if (verifyElementDisplayed(PWASubscriptionPages.objexplorePremium)) {
			extent.extentLoggerPass("Popup:", "Explore premium CTA available");
			logger.info("Explore premium CTA available");
		} else {
			extent.extentLoggerFail("Popup:", " Explore premium CTA unavailable");
			logger.error(" Explore premium CTA unavailable");
		}
	}

	public void userIsRedirectedPlexConsumptionPageOnClickingWatchNowCTA(String userType) throws Exception {
		System.out.println("25");
		extent.HeaderChildNode("Verify that user is redirected plex consumption page on clicking Watch Now CTA");
		logger.info("Verify that user is redirected plex consumption page on clicking Watch Now CTA");

		waitTime(2000);
		click(PWASubscriptionPages.objWatchNowCTA, "Watch now cta");
		waitTime(2000);
		verifyElementPresent(PWAHomePage.objMoviesTab, "Movie Tab");
//if(checkElementDisplayed(PWAHomePage.objTabName("Movies tab"),"Movies tab"))
//{
//extent.extentLoggerPass("Popup:", "User redirected to consumption screen of the PLEX movie on clicking Watch Now CTA");
//logger.info("User redirected to consumption screen of the PLEX movie on clicking Watch Now CTA");
//}
//else
//{
//extent.extentLoggerFail("Popup:", " User not redirected to consumption screen of the PLEX movie on clicking Watch Now CTA");
//logger.error(" User not redirected to consumption screen of the PLEX movie on clicking Watch Now CTA");
//}
		if (verifyElementDisplayed(PWALandingPages.objResume)) {
			extent.extentLoggerPass("Consumption page:",
					"Based on the viewing status of user, player controls (Watch Now/Resume states) displayed as per existing TVOD PLEX implementation");
			logger.info(
					"Based on the viewing status of user, player controls (Watch Now/Resume states) displayed as per existing TVOD PLEX implementation");
		} else {
			extent.extentLoggerFail("Consumption page:",
					"Based on the viewing status of user, player controls (Watch Now/Resume states) not displayed as per existing TVOD PLEX implementation.");
			logger.error(
					" Based on the viewing status of user, player controls (Watch Now/Resume states) not displayed as per existing TVOD PLEX implementation.");
		}
	}

	public void userIsRedirectedToHomepageOnClickingExplorePremiumCTA(String userType) throws Exception {
		extent.extentLogger("", "26");
		System.out.println("26");
		logout();
		waitTime(2000);
		navigationFromZeeplexScreen("Trailer");
		waitTime(2000);
		scrollByWEB();
		waitTime(2000);
		verifyElementPresentAndClick(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		PWALoginInSubscriptionFlow("zee.igs7641@gmail.com", "123456");

		waitTime(5000);

		extent.HeaderChildNode("Verify that user is redirected to Homepage on clicking Explore Premium CTA");
		logger.info("Verify that user is redirected to Homepage on clicking Explore Premium CTA");

		if (verifyIsElementDisplayed(PWASubscriptionPages.objexplorePremium, "Explore Premium")) {
			logger.info("Explore Premium is displayed when ever click on Proceed");
			extent.extentLoggerPass("", "Explore Premium is displayed when ever click on Proceed");
		} else {
			logger.info("Explore Premium is not displayed when ever click on Proceed");
			extent.extentLoggerFail("", "Explore Premium is not displayed when ever click on Proceed");
		}
		click(PWASubscriptionPages.objexplorePremium, "Explore Premium");
		waitTime(2000);
		if (verifyIsElementDisplayed(PWAHomePage.objHomePage, "Home Page")) {
			logger.info("User is redirected to Home page when ever click on Explore Premium");
			extent.extentLoggerPass("", "User is redirected to Home page when ever click on Explore Premium");
		} else {
			logger.info("User is not redirected to Home page when ever click on Explore Premium");
			extent.extentLoggerFail("", "User is not redirected to Home page when ever click on Explore Premium");
		}

	}

	public void userIsAbleToCloseThePopUpByClickingCloseIconDisplayedOnPopUp(String userType) throws Exception {
		extent.extentLogger("", "27");
		System.out.println("27");
		extent.HeaderChildNode(
				"Verify that user is able to close the pop up by clicking Close icon displayed on pop up");
		logger.info("Verify that user is able to close the pop up by clicking Close icon displayed on pop up");
		logout();
		waitTime(4000);
		navigationFromZeeplexScreen("Trailer");
		waitTime(2000);
		scrollByWEB();
		waitTime(2000);
		verifyElementPresentAndClick(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		PWALoginInSubscriptionFlow("zee.igs7641@gmail.com", "123456");

		waitTime(10000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZeeplexPopupCloseButton, "Close Icon");

	}

	public void YouHaveItAllPopUpIsDisplayedIfUserEntersActive499PlanUserLoginDetails(String userType)
			throws Exception {
		extent.extentLogger("", "28");
		System.out.println("28");
		extent.HeaderChildNode(
				"Verify that You Have it All Pop up is displayed if user enters active 499 plan user login details during guest checkout");
		logger.info(
				"Verify that You Have it All Pop up is displayed if user enters active 499 plan user login details during guest checkout");
		logout();
		waitTime(4000);
		navigationFromZeeplexScreen("Trailer");
		waitTime(2000);
		scrollByWEB();
		waitTime(2000);
		verifyElementPresentAndClick(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		PWALoginInSubscriptionFlow("zee.igs7641@gmail.com", "123456");

		waitTime(5000);
		verifyElementPresent(PWASubscriptionPages.objHaveitAllPopDialog, "Have it All Pop Dialog");
//if(verifyElementDisplayed(PWASubscriptionPages.objHaveitAllPopDialog)){
//extent.extentLoggerPass("Message:", "You Have it all dialog available");
//logger.info("You Have it all dialog available");
//}else{
//extent.extentLoggerFail("Message:", " You Have it all dialog unavailable");
//logger.error(" You Have it all dialog unavailable");
//}
		if (verifyElementDisplayed(PWASubscriptionPages.objYouHaveAlreadyRentedThisZEEPLEXMovieDialog)) {
			extent.extentLoggerPass("Message:", "You Have already rented ZEEPLEX movie dialog available");
			logger.info("You Have already rented ZEEPLEX movie dialog available");
		} else {
			extent.extentLoggerFail("Message:", " You Have already rented ZEEPLEX movie dialog unavailable");
			logger.error(" You Have already rented ZEEPLEX movie dialog unavailable");
		}
//if(verifyElementDisplayed(PWASubscriptionPages.objYouHaveActivePremiumPlanDialog)){
//extent.extentLoggerPass("Message:", "You also have an active Premium plan dialog available");
//logger.info("You also have an active Premium plan dialog available");
//}else{
//extent.extentLoggerFail("Message:", "You also have an active Premium plan dialog unavailable");
//logger.error("You also have an active Premium plan dialog unavailable");
//}

	}

	public void YouHaveItAllPopUpIsContainsActivePlanDetailsAsWellAsActiveTVODDetail(String userType) throws Exception {
		extent.extentLogger("", "29");
		System.out.println("29");
		extent.HeaderChildNode(
				"Verify that You Have it all pop up is contains active plan details as well as active TVOD detail");
		logger.info("Verify that You Have it all pop up is contains active plan details as well as active TVOD detail");

		waitTime(2000);
		if (verifyElementDisplayed(PWASubscriptionPages.objZeeplexAndTickIcon)) {
			extent.extentLoggerPass("Popup:", "Zeeplex and tick icon available");
			logger.info("Zeeplex and tick icon available");
		} else {
			extent.extentLoggerFail("Popup:", " Zeeplex and tick icon unavailable");
			logger.error(" Zeeplex and tick icon unavailable");
		}
		if (verifyElementDisplayed(PWASubscriptionPages.objHaveitAllPopDialog)) {
			extent.extentLoggerPass("Popup:", "You have it all text available");
			logger.info("You have it all text available");
		} else {
			extent.extentLoggerFail("Popup:", " You have it all text unavailable");
			logger.error(" You have it all text unavailable");
		}
		if (verifyElementDisplayed(PWASubscriptionPages.objYouAreCurrentlyOnPremiumYearPlan)) {
			extent.extentLoggerPass("Popup:", "Your premium Rs 599 for 1 year plan is active text available");
			logger.info("Your premium Rs 599 for 1 year plan is active text available");
		} else {
			extent.extentLoggerFail("Popup:", " Your premium Rs 599 for 1 year plan is active text unavailable");
			logger.error(" Your premium Rs 599 for 1 year plan is active text unavailable");
		}
		if (verifyElementDisplayed(PWASubscriptionPages.objYouHaveAlreadyRentedThisZEEPLEXMovieDialog)) {
			extent.extentLoggerPass("Message:", "You Have already rented ZEEPLEX movie dialog available");
			logger.info("You Have already rented ZEEPLEX movie dialog available");
		} else {
			extent.extentLoggerFail("Message:", " You Have already rented ZEEPLEX movie dialog unavailable");
			logger.error(" You Have already rented ZEEPLEX movie dialog unavailable");
		}
		if (verifyElementDisplayed(PWASubscriptionPages.objWatchNowCTA)) {
			extent.extentLoggerPass("Popup:", "Watch now CTA available");
			logger.info("Watch now CTA available");
		} else {
			extent.extentLoggerFail("Popup:", " Watch now CTA unavailable");
			logger.error(" Watch now CTA unavailable");
		}
		if (verifyElementDisplayed(PWASubscriptionPages.objexplorePremium)) {
			extent.extentLoggerPass("Popup:", "Explore premium CTA available");
			logger.info("Explore premium CTA available");
		} else {
			extent.extentLoggerFail("Popup:", " Explore premium CTA unavailable");
			logger.error(" Explore premium CTA unavailable");
		}
	}

	public void userIsRedirectedPlexConsumptionPageOnClickingWatchNowCTA499(String userType) throws Exception {
		extent.extentLogger("", "30");
		System.out.println("30");
		extent.HeaderChildNode("Verify that user is redirected plex consumption page on clicking Watch Now CTA");
		logger.info("Verify that user is redirected plex consumption page on clicking Watch Now CTA");

		waitTime(2000);
		click(PWASubscriptionPages.objWatchNowCTA, "Watch now cta");
		waitTime(2000);
		verifyElementPresent(PWAHomePage.objMoviesTab, "Movie Tab");

//if(checkElementDisplayed(PWAHomePage.objTabName("Movies tab"),"Movies tab"))
//{
//extent.extentLoggerPass("Popup:", "User redirected to consumption screen of the PLEX movie on clicking Watch Now CTA");
//logger.info("User redirected to consumption screen of the PLEX movie on clicking Watch Now CTA");
//}
//else
//{
//extent.extentLoggerFail("Popup:", " User not redirected to consumption screen of the PLEX movie on clicking Watch Now CTA");
//logger.error(" User not redirected to consumption screen of the PLEX movie on clicking Watch Now CTA");
//}
		if (verifyElementDisplayed(PWALandingPages.objResume)) {
			extent.extentLoggerPass("Consumption page:",
					"Based on the viewing status of user, player controls (Watch Now/Resume states) displayed as per existing TVOD PLEX implementation");
			logger.info(
					"Based on the viewing status of user, player controls (Watch Now/Resume states) displayed as per existing TVOD PLEX implementation");
		} else {
			extent.extentLoggerFail("Consumption page:",
					"Based on the viewing status of user, player controls (Watch Now/Resume states) not displayed as per existing TVOD PLEX implementation.");
			logger.error(
					" Based on the viewing status of user, player controls (Watch Now/Resume states) not displayed as per existing TVOD PLEX implementation.");
		}
	}

	public void userIsRedirectedToHomepageOnClickingExplorePremiumCTA499(String userType) throws Exception {
		extent.extentLogger("", "31");
		System.out.println("31");
		extent.HeaderChildNode("Verify that user is redirected to Homepage on clicking Explore Premium CTA");
		logger.info("Verify that user is redirected to Homepage on clicking Explore Premium CTA");
		logout();
		waitTime(4000);
		navigationFromZeeplexScreen("Trailer");
		waitTime(2000);
		scrollByWEB();
		waitTime(2000);
		verifyElementPresentAndClick(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		PWALoginInSubscriptionFlow("zee.igs7641@gmail.com", "123456");

		waitTime(10000);

		extent.HeaderChildNode("Verify that user is redirected to Homepage on clicking Explore Premium CTA");
		logger.info("Verify that user is redirected to Homepage on clicking Explore Premium CTA");

		if (verifyIsElementDisplayed(PWASubscriptionPages.objexplorePremium, "Explore Premium")) {
			logger.info("Explore Premium is displayed when ever click on Proceed");
			extent.extentLoggerPass("", "Explore Premium is displayed when ever click on Proceed");
		} else {
			logger.info("Explore Premium is not displayed when ever click on Proceed");
			extent.extentLoggerFail("", "Explore Premium is not displayed when ever click on Proceed");
		}
		click(PWASubscriptionPages.objexplorePremium, "Explore Premium");
		waitTime(2000);
		if (verifyIsElementDisplayed(PWAHomePage.objHomePage, "Home Page")) {
			logger.info("User is redirected to Home page when ever click on Explore Premium");
			extent.extentLoggerPass("", "User is redirected to Home page when ever click on Explore Premium");
		} else {
			logger.info("User is not redirected to Home page when ever click on Explore Premium");
			extent.extentLoggerFail("", "User is not redirected to Home page when ever click on Explore Premium");
		}

	}

	public void userIsAbleToCloseThePopUpByClickingCloseIconDisplayedOnPopUp499(String userType) throws Exception {
		extent.extentLogger("", "32");
		System.out.println("32");
		extent.HeaderChildNode(
				"Verify that user is able to close the pop up by clicking Close icon displayed on pop up");
		logger.info("Verify that user is able to close the pop up by clicking Close icon displayed on pop up");
		logout();
		waitTime(4000);
		navigationFromZeeplexScreen("Trailer");
		waitTime(2000);
		scrollByWEB();
		waitTime(2000);
		verifyElementPresentAndClick(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		PWALoginInSubscriptionFlow("zee.igs7641@gmail.com", "123456");

		waitTime(5000);
		verifyElementPresentAndClick(PWASubscriptionPages.objZeeplexPopupCloseButton, "Close Icon");

	}

	public void verifyThatUpgradeToRs499ComboOfferPopUp(String userType) throws Exception {

		System.out.println("49");
		extent.HeaderChildNode(
				"Verify that Upgrade To Rs 499 Combo Offer pop up is displayed if user enters active 99 plan user login details during guest checkout");
		logger.info(
				"Verify that Upgrade To Rs 499 Combo Offer pop up is displayed if user enters active 99 plan user login details during guest checkout");
		logout();
		waitTime(4000);
		navigationFromZeeplexScreen("Trailer");
		waitTime(2000);
		scrollByWEB();
		waitTime(2000);
		verifyElementPresentAndClick(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		PWALoginInSubscriptionFlow("zeetest6@g.com", "123456");

		waitTime(5000);

		if (verifyIsElementDisplayed(PWASubscriptionPages.objUpgradeNowMessage, "Upgrade Now Message")) {
			logger.info("User is able to see Upgrade Now Message When ever login with 99 credentials");
			extent.extentLoggerPass("", "User is able to see Upgrade Now Message When ever login with 99 credentials");
		} else {
			logger.info("User is not able to see Upgrade Now Message When ever login with 99 credentials");
			extent.extentLoggerFail("",
					"User is not able to see Upgrade Now Message When ever login with 99 credentials");
		}
		if (verifyIsElementDisplayed(PWASubscriptionPages.objYourAreCurrentlyOnPlanPlanNameCTAsMessage,
				"Your Are Currently On Plan Name CTAs Message")) {
			logger.info(
					"User is able to see Your Premium ₹99 for 1 Month plan is active When ever login with 99 credentials");
			extent.extentLoggerPass("",
					"User is able to see Your Premium ₹99 for 1 Month plan is active When ever login with 99 credentials");
		} else {
			logger.info(
					"User is not able to see Your Premium ₹99 for 1 Month plan is active When ever login with 99 credentials");
			extent.extentLoggerFail("",
					"User is not able to seeYour Premium ₹99 for 1 Month plan is active When ever login with 99 credentials");
		}
	}

	public void verifyThatUpgradeToRs499ComboOfferPopUpIsContainsActivePlanDetails(String userType) {
		extent.extentLogger("", "50");
		System.out.println("50");
		extent.HeaderChildNode(
				"Verify that Upgrade To Rs 499 Combo Offer pop up is contains active plan details as well as active TVOD detail");
		logger.info(
				"Verify that Upgrade To Rs 499 Combo Offer pop up is contains active plan details as well as active TVOD detail");

		verifyIsElementDisplayed(PWASubscriptionPages.objUpgradeNowMessage, "Upgrade Button");

		verifyIsElementDisplayed(PWASubscriptionPages.objRightTickAsPerVD, "Right Tick As Per VD");

		verifyIsElementDisplayed(PWASubscriptionPages.objUpgradeToRadheComboPackByJustPaying,
				"Upgrade To Radhe Combo Pack By Just Paying");

		verifyIsElementDisplayed(PWASubscriptionPages.objYourAreCurrentlyOnPlanPlanNameCTAsMessage,
				"Your Are Currently On Plan Name With Validity");

		verifyIsElementDisplayed(PWASubscriptionPages.objUpgradeNowMessage, "Upgrade");

	}

	public void VerifyThatUserRedirectsBackToComboOfferPage(String userType) throws Exception {
		extent.extentLogger("", "51");
		System.out.println("51");
		extent.HeaderChildNode("Verify that user redirects back to Combo Offer page on clicking back or browser back");
		logger.info("Verify that user redirects back to Combo Offer page on clicking back or browser back");
		waitTime(2000);
		BackWeb(1);
		click(PWASubscriptionPages.objCancleButton, "close Button ");
		waitTime(2000);
		scrollToBottomOfPage();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objUpgradeToRadheComboPackByJustPayingTheDifference,
				"Upgrade To Radhe Combo Pack By Just Paying The Difference");

	}

	public void verifyThatUserRedirectsToPaymentPageWithDifferentialAmount(String userType) throws Exception {
		extent.extentLogger("", "52");
		System.out.println("52");
		extent.HeaderChildNode(
				"Verify that user redirects to payment page with differential amount on clicking Upgrade CTA");
		logger.info("Verify that user redirects to payment page with differential amount on clicking Upgrade CTA");
		waitTime(2000);
		Back(1);
		logout();
		waitTime(4000);
		navigationFromZeeplexScreen("Trailer");
		waitTime(2000);
		scrollByWEB();
		waitTime(2000);
		verifyElementPresentAndClick(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		PWALoginInSubscriptionFlow("zeetest6@g.com", "123456");

		waitTime(10000);
		click(PWASubscriptionPages.objUpgradeNowMessage, "Upgrade button ");
		waitTime(2000);
		if (verifyIsElementDisplayed(PWASubscriptionPages.objMakePayment, "Make Payment")) {
			extent.extentLoggerPass("", "Make Payment page is displayed");
			logger.info("Make Payment page is displayed");
		} else {
			extent.extentLoggerFail("", "Make Payment page is not displayed");
			logger.error("Make Payment page is not displayed");
		}
//	String differentialAmount = findElement(PWASubscriptionPages.objDifferentialAmountCalculated).getText();
//	WebElement iframeElement = null;
//	iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
//	Thread.sleep(5000);
//	Thread.sleep(5000);
//	Thread.sleep(5000);
//	getWebDriver().switchTo().frame(iframeElement);
//if(verifyElementExist(PWASubscriptionPages.objDifferentialAmountCalculated,"Differential Amount Calculated")) {
//
//	logger.info("Amount:" + differentialAmount);
//	extent.extentLoggerPass("Amount:",differentialAmount);
//
//} else {
//	logger.info("Amount:" + "Differential Amount Calculated is not displayed");
//	extent.extentLoggerFail("Amount:","Differential Amount Calculated is not displayed");
//}
		waitTime(5000);
		String differentialAmount = findElement(PWASubscriptionPages.objDifferentialAmountCalculated).getText();

		if (verifyElementPresent(PWASubscriptionPages.objDifferentialAmountCalculated, "Differential Amount")) {
			logger.info("" + differentialAmount + " is displayed");
			extent.extentLoggerPass("", " " + differentialAmount + " is displayed");
		} else {
			logger.error("" + "Differential Amount Calculated is not displayed");
			extent.extentLoggerFail("", "Differential Amount Calculated is not displayed");
		}

	}

	public void verifyThatUserIsAbleToRedirectToPaymentPage(String userType) throws Exception {
		System.out.println("57");
		extent.HeaderChildNode(
				"Verify that user is able to redirect to payment page with only TVOD price on clicking Rent Movie  CTA");
		logger.info(
				"Verify that user is able to redirect to payment page with only TVOD price on clicking Rent Movie  CTA");
		waitTime(2000);
		Back(1);
		waitTime(4000);
		verifyIsElementDisplayed(PWAComboOfferPage.objOnlyRentMovie, "Only Rent Movie");

		click(PWAComboOfferPage.objOnlyRentMovie, "Only Rent Movie");
		if (verifyIsElementDisplayed(PWAComboOfferPage.objRentMovieBtn, "Rent Movie Btn")) {
			logger.info("User is able to see Rent Movie Btn when ever click on know more");
			extent.extentLoggerPass("", "User is able to see Rent Movie Btn when ever click on know more");
		} else {
			logger.info("User is not able to see Rent Movie Btn when ever click on know more");
			extent.extentLoggerFail("", "User is not able to see Rent Movie Btn when ever click on know more");
		}
		click(PWAComboOfferPage.objRentMovieBtn, "Rent Movie Btn");

		waitTime(2000);
		if (verifyElementExist(PWASubscriptionPages.objMakePayment, "Make Payment")) {
			extent.extentLoggerPass("", "Make Payment page is displayed");
			logger.info("Make Payment page is displayed");
		} else {
			extent.extentLoggerFail("", "Make Payment page is not displayed");
			logger.error("Make Payment page is not displayed");
		}
	}

	public void verifyThatUpgradePopUpIsDisplayedIfUserEntersActiveRSVOD49Plan(String userType) throws Exception {
		extent.extentLogger("", "61");
		System.out.println("61");
		extent.HeaderChildNode(
				"Verify that user is able to redirect to payment page with only TVOD price on clicking Rent Movie  CTA");
		logger.info(
				"Verify that user is able to redirect to payment page with only TVOD price on clicking Rent Movie  CTA");
		waitTime(2000);
		Back(3);
		logout();
		waitTime(4000);
		navigationFromZeeplexScreen("Trailer");
		waitTime(2000);
		scrollByWEB();
		waitTime(2000);
		verifyElementPresentAndClick(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		PWALoginInSubscriptionFlow("49rsvod@yopmail.com", "welcome");

		waitTime(5000);

		if (verifyIsElementDisplayed(PWASubscriptionPages.objUpgradeNowMessage, "Upgrade Now Message")) {
			logger.info("User is able to see Upgrade Now Message When ever login with 99 credentials");
			extent.extentLoggerPass("", "User is able to see Upgrade Now Message When ever login with 99 credentials");
		} else {
			logger.info("User is not able to see Upgrade Now Message When ever login with 99 credentials");
			extent.extentLoggerFail("",
					"User is not able to see Upgrade Now Message When ever login with 99 credentials");
		}
		if (verifyIsElementDisplayed(PWASubscriptionPages.objYourAreCurrentlyOnPlanPlanNameCTAsMessage,
				"Your Are Currently On Plan Name CTAs Message")) {
			logger.info(
					"User is able to see Your Premium ₹99 for 1 Month plan is active When ever login with 99 credentials");
			extent.extentLoggerPass("",
					"User is able to see Your Premium ₹99 for 1 Month plan is active When ever login with 99 credentials");
		} else {
			logger.info(
					"User is not able to see Your Premium ₹99 for 1 Month plan is active When ever login with 99 credentials");
			extent.extentLoggerFail("",
					"User is not able to seeYour Premium ₹99 for 1 Month plan is active When ever login with 99 credentials");
		}

	}

	public void verifyThatUpgradePopUpIsContainsActivePlanDetails(String userType) {
		extent.extentLogger("", "62");
		System.out.println("62");
		extent.HeaderChildNode(
				"Verify that Upgrade pop up is contains active plan details as well as active TVOD detail");
		logger.info("Verify that Upgrade pop up is contains active plan details as well as active TVOD detail");
		waitTime(2000);
		verifyIsElementDisplayed(PWASubscriptionPages.objUpgradeNowMessage, "Upgrade Button");

		verifyIsElementDisplayed(PWASubscriptionPages.objRightTickAsPerVD, "Right Tick As Per VD");

		verifyIsElementDisplayed(PWASubscriptionPages.objUpgradeToRadheComboPackByJustPaying,
				"Upgrade To Radhe Combo Pack By Just Paying");

		verifyIsElementDisplayed(PWASubscriptionPages.objYourAreCurrentlyOnPlanPlanNameCTAsMessage,
				"Your Are Currently On Plan Name With Validity");

		verifyIsElementDisplayed(PWASubscriptionPages.objUpgradeNowMessage, "Upgrade");

	}

	public void verifyThatUserRedirectsBackToComboOfferPage(String userType) throws Exception {

		extent.extentLogger("", "63");
		System.out.println("63");
		extent.HeaderChildNode("Verify that user redirects back to Combo Offer page on clicking back or browser back");
		logger.info("Verify that user redirects back to Combo Offer page on clicking back or browser back");
		waitTime(2000);
		BackWeb(1);
		click(PWASubscriptionPages.objCancleButton, "close Button ");
		waitTime(2000);
		scrollToBottomOfPage();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objUpgradeToRadheComboPackByJustPayingTheDifference,
				"Upgrade To Radhe Combo Pack By Just Paying The Difference");

	}

	public void verifyThatUserRedirectsToPaymentPageWithDifferentialAmount49(String userType) throws Exception {
		extent.extentLogger("", "64");
		System.out.println("64");
		extent.HeaderChildNode(
				"Verify that user redirects to payment page with differential amount on clicking UpgradeTA");
		logger.info("Verify that user redirects to payment page with differential amount on clicking UpgradeTA");
		waitTime(2000);
		Back(1);
		logout();
		waitTime(4000);
		navigationFromZeeplexScreen("Trailer");
		waitTime(2000);
		scrollByWEB();
		waitTime(2000);
		verifyElementPresentAndClick(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		PWALoginInSubscriptionFlow("49rsvod@yopmail.com", "welcome");

		waitTime(5000);
		click(PWASubscriptionPages.objUpgradeNowMessage, "Upgrade button ");
		waitTime(2000);
		if (verifyIsElementDisplayed(PWASubscriptionPages.objMakePayment, "Make Payment")) {
			extent.extentLoggerPass("", "Make Payment page is displayed");
			logger.info("Make Payment page is displayed");
		} else {
			extent.extentLoggerFail("", "Make Payment page is not displayed");
			logger.error("Make Payment page is not displayed");
		}
		String differentialAmount = findElement(PWASubscriptionPages.objDifferentialAmountCalculated).getText();

		if (verifyElementPresent(PWASubscriptionPages.objDifferentialAmountCalculated, "Differential Amount")) {
			logger.info("" + differentialAmount + " is displayed");
			extent.extentLoggerPass("", " " + differentialAmount + " is displayed");
		} else {
			logger.error("" + "Differential Amount Calculated is not displayed");
			extent.extentLoggerFail("", "Differential Amount Calculated is not displayed");
		}

	}

	public void verifyThatUserIsAbleToRedirectToPaymentPageWithOnlyTVODPrice(String userType) throws Exception {
		extent.extentLogger("", "69");
		System.out.println("69");
		extent.HeaderChildNode(
				"Verify that user is able to redirect to payment page with only TVOD price on clicking Rent Movie  CTA");
		logger.info(
				"Verify that user is able to redirect to payment page with only TVOD price on clicking Rent Movie  CTA");
		waitTime(2000);
		Back(1);
		waitTime(4000);
		verifyIsElementDisplayed(PWAComboOfferPage.objOnlyRentMovie, "Only Rent Movie");

		click(PWAComboOfferPage.objOnlyRentMovie, "Only Rent Movie");
		if (verifyIsElementDisplayed(PWAComboOfferPage.objRentMovieBtn, "Rent Movie Btn")) {
			logger.info("User is able to see Rent Movie Btn when ever click on know more");
			extent.extentLoggerPass("", "User is able to see Rent Movie Btn when ever click on know more");
		} else {
			logger.info("User is not able to see Rent Movie Btn when ever click on know more");
			extent.extentLoggerFail("", "User is not able to see Rent Movie Btn when ever click on know more");
		}
		click(PWAComboOfferPage.objRentMovieBtn, "Rent Movie Btn");

		waitTime(2000);
		if (verifyElementExist(PWASubscriptionPages.objMakePayment, "Make Payment")) {
			extent.extentLoggerPass("", "Make Payment page is displayed");
			logger.info("Make Payment page is displayed");
		} else {
			extent.extentLoggerFail("", "Make Payment page is not displayed");
			logger.error("Make Payment page is not displayed");
		}
	}

	public void verifyThatUpgradePopUpIsDisplayedIfUserEntersActiveRSVOD499(String userType) throws Exception {
		extent.extentLogger("", "73");
		System.out.println("73");
		extent.HeaderChildNode(
				"Verify that Upgrade  pop up is displayed if user enters active RSVOD 499 plan login details during guest checkout");
		logger.info(
				"Verify that Upgrade  pop up is displayed if user enters active RSVOD 499 plan login details during guest checkout");

		Back(3);
		logout();
		waitTime(4000);
		navigationFromZeeplexScreen("Trailer");
		waitTime(2000);
		scrollByWEB();
		waitTime(2000);
		verifyElementPresentAndClick(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		PWALoginInSubscriptionFlow("49rsvod@yopmail.com", "welcome");

		waitTime(5000);

		if (verifyIsElementDisplayed(PWASubscriptionPages.objUpgradeNowMessage, "Upgrade Now Message")) {
			logger.info("User is able to see Upgrade Now Message When ever login with 99 credentials");
			extent.extentLoggerPass("", "User is able to see Upgrade Now Message When ever login with 99 credentials");
		} else {
			logger.info("User is not able to see Upgrade Now Message When ever login with 99 credentials");
			extent.extentLoggerFail("",
					"User is not able to see Upgrade Now Message When ever login with 99 credentials");
		}
		if (verifyIsElementDisplayed(PWASubscriptionPages.objYourAreCurrentlyOnPlanPlanNameCTAsMessage,
				"Your Are Currently On Plan Name CTAs Message")) {
			logger.info(
					"User is able to see Your Premium ₹99 for 1 Month plan is active When ever login with 99 credentials");
			extent.extentLoggerPass("",
					"User is able to see Your Premium ₹99 for 1 Month plan is active When ever login with 99 credentials");
		} else {
			logger.info(
					"User is not able to see Your Premium ₹99 for 1 Month plan is active When ever login with 99 credentials");
			extent.extentLoggerFail("",
					"User is not able to seeYour Premium ₹99 for 1 Month plan is active When ever login with 99 credentials");
		}
	}

	public void verifyThatUpgradePopUpIsContainsActivePlan(String userType) throws Exception {
		extent.extentLogger("", "74");
		System.out.println("74");
		extent.HeaderChildNode(
				"Verify that Upgrade pop up is contains active plan details as well as active TVOD detail");
		logger.info("Verify that Upgrade pop up is contains active plan details as well as active TVOD detail");
		waitTime(2000);
		verifyIsElementDisplayed(PWASubscriptionPages.objUpgradeNowMessage, "Upgrade Button");

		verifyIsElementDisplayed(PWASubscriptionPages.objRightTickAsPerVD, "Right Tick As Per VD");

		verifyIsElementDisplayed(PWASubscriptionPages.objUpgradeToRadheComboPackByJustPaying,
				"Upgrade To Radhe Combo Pack By Just Paying");

		verifyIsElementDisplayed(PWASubscriptionPages.objYourAreCurrentlyOnPlanPlanNameCTAsMessage,
				"Your Are Currently On Plan Name With Validity");

		verifyIsElementDisplayed(PWASubscriptionPages.objUpgradeNowMessage, "Upgrade");

	}

	public void verifyUserRedirectsBackToComboOfferPage(String userType) throws Exception {
		extent.extentLogger("", "75");
		System.out.println("75");
		extent.HeaderChildNode(
				"Verify that Upgrade pop up is contains active plan details as well as active TVOD detail");
		logger.info("Verify that Upgrade pop up is contains active plan details as well as active TVOD detail");
		waitTime(2000);

		waitTime(2000);
		BackWeb(1);
		click(PWASubscriptionPages.objCancleButton, "close Button ");
		waitTime(2000);
		scrollToBottomOfPage();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objUpgradeToRadheComboPackByJustPayingTheDifference,
				"Upgrade To Radhe Combo Pack By Just Paying The Difference");
	}

	public void verifyUserRedirectsToPaymentPageWithDifferentialAmount(String userType) throws Exception {
		extent.extentLogger("", "76");
		System.out.println("76");
		extent.HeaderChildNode(
				"Verify that Upgrade pop up is contains active plan details as well as active TVOD detail");
		logger.info("Verify that Upgrade pop up is contains active plan details as well as active TVOD detail");
		waitTime(2000);
		Back(1);
		logout();
		waitTime(4000);
		navigationFromZeeplexScreen("Trailer");
		waitTime(2000);
		scrollByWEB();
		waitTime(2000);
		verifyElementPresentAndClick(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(2000);
		verifyIsElementDisplayed(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		click(PWAComboOfferPage.objBuyRadheComboBtn, "Buy Radhe Combo Button");
		PWALoginInSubscriptionFlow("49rsvod@yopmail.com", "welcome");

		waitTime(4000);
		click(PWASubscriptionPages.objUpgradeNowMessage, "Upgrade button ");
		waitTime(2000);
		if (verifyIsElementDisplayed(PWASubscriptionPages.objMakePayment, "Make Payment")) {
			extent.extentLoggerPass("", "Make Payment page is displayed");
			logger.info("Make Payment page is displayed");
		} else {
			extent.extentLoggerFail("", "Make Payment page is not displayed");
			logger.error("Make Payment page is not displayed");
		}
		String differentialAmount = findElement(PWASubscriptionPages.objDifferentialAmountCalculated).getText();

		if (verifyElementPresent(PWASubscriptionPages.objDifferentialAmountCalculated, "Differential Amount")) {
			logger.info("" + differentialAmount + " is displayed");
			extent.extentLoggerPass("", " " + differentialAmount + " is displayed");
		} else {
			logger.error("" + "Differential Amount Calculated is not displayed");
			extent.extentLoggerFail("", "Differential Amount Calculated is not displayed");
		}

	}

	public void verifyUserIsAbleToRedirectToPaymentPageWithOnlyTVOD(String userType) throws Exception {

		extent.extentLogger("", "81");
		System.out.println("81");
		extent.HeaderChildNode(
				"Verify that user is able to redirect to payment page with only TVOD price on clicking Rent Movie f CTA");
		logger.info(
				"Verify that user is able to redirect to payment page with only TVOD price on clicking Rent Movie f CTA");
		waitTime(2000);
		Back(1);
		waitTime(4000);
		verifyIsElementDisplayed(PWAComboOfferPage.objOnlyRentMovie, "Only Rent Movie");

		click(PWAComboOfferPage.objOnlyRentMovie, "Only Rent Movie");
		if (verifyIsElementDisplayed(PWAComboOfferPage.objRentMovieBtn, "Rent Movie Btn")) {
			logger.info("User is able to see Rent Movie Btn when ever click on know more");
			extent.extentLoggerPass("", "User is able to see Rent Movie Btn when ever click on know more");
		} else {
			logger.info("User is not able to see Rent Movie Btn when ever click on know more");
			extent.extentLoggerFail("", "User is not able to see Rent Movie Btn when ever click on know more");
		}
		click(PWAComboOfferPage.objRentMovieBtn, "Rent Movie Btn");

		waitTime(2000);
		if (verifyElementExist(PWASubscriptionPages.objMakePayment, "Make Payment")) {
			extent.extentLoggerPass("", "Make Payment page is displayed");
			logger.info("Make Payment page is displayed");
		} else {
			extent.extentLoggerFail("", "Make Payment page is not displayed");
			logger.error("Make Payment page is not displayed");
		}

	}

//	Sprint- 58
	public void PWA2GetPremiumReplaceToBuyPlanValidation(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Validate Change of Get Premium to Buy Plan text  (PWA2-8024) ");
			verifyElementPresent(PWAHomePage.objGetPremiumWeb, "Buy Plan");
			String BuyPlan = getText(PWAHomePage.objGetPremiumWeb);
			System.out.println(BuyPlan);
			extent.extentLogger("", "Buy Plan text: " + BuyPlan);
			if (BuyPlan.equalsIgnoreCase("Buy Plan")) {
				logger.info("Get premium text is replaced with Buy Plan text ,expected behaviour");
				extent.extentLoggerPass("", "Get premium text is replaced with Buy Plan text,expected behaviour");
				// Back(1);
			} else {
				logger.info("Get premium text is not replaced with Buy Plan text");
				extent.extentLoggerFail("", "Get premium text is not replaced with Buy Plan text");
			}
			verifyElementPresent(PWAHamburgerMenuPage.objBuyPlanonheader, "Buy Plan Button in the Header");
			verifyElementPresent(PWAHamburgerMenuPage.objBuyPlanonheader, "Buy Plan");
			String BuyPlanOnHeader = getText(PWAHamburgerMenuPage.objBuyPlanonheader);
			System.out.println(BuyPlanOnHeader);
			extent.extentLogger("", "Buy Plan text: " + BuyPlanOnHeader);
			if (BuyPlanOnHeader.equalsIgnoreCase("Buy Plan")) {
				logger.info("Get premium text is replaced with Buy Plan text ,expected behaviour");
				extent.extentLoggerPass("", "Get premium text is replaced with Buy Plan text,expected behaviour");
				// Back(1);
			} else {
				logger.info("Get premium text is not replaced with Buy Plan text");
				extent.extentLoggerFail("", "Get premium text is not replaced with Buy Plan text");
			}
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieNoTrailer2");
			zeeSearchForContentAndClickOnFirstResult(keyword);
			waitTime(2000);
			verifyElementPresent(PWAPlayerPage.objSubscribeNowLink, "In-Line Buy Plan Link on Player");
			String BuyPlanOnPlayer = getText(PWAPlayerPage.objSubscribeNowLink);
			System.out.println(BuyPlanOnPlayer);
			extent.extentLogger("", "Buy Plan text: " + BuyPlanOnPlayer);
			if (BuyPlanOnPlayer.equalsIgnoreCase("Buy Plan")) {
				logger.info("Get premium text is replaced with Buy Plan text ,expected behaviour");
				extent.extentLoggerPass("", "Get premium text is replaced with Buy Plan text,expected behaviour");
				// Back(1);
			} else {
				logger.info("Get premium text is not replaced with Buy Plan text");
				extent.extentLoggerFail("", "Get premium text is not replaced with Buy Plan text");
			}
			zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
			verifyElementPresent(PWAPlayerPage.objGetPremium, "Subscribe button below player");
			String BuyPlanBelowPlayer = getText(PWAPlayerPage.objGetPremium);
			System.out.println(BuyPlanBelowPlayer);
			extent.extentLogger("", "Buy Plan text: " + BuyPlanBelowPlayer);
			if (BuyPlanBelowPlayer.equalsIgnoreCase("Buy Plan")) {
				logger.info("Get premium text is replaced with Buy Plan text ,expected behaviour");
				extent.extentLoggerPass("", "Get premium text is replaced with Buy Plan text,expected behaviour");
				// Back(1);
			} else {
				logger.info("Get premium text is not replaced with Buy Plan text");
				extent.extentLoggerFail("", "Get premium text is not replaced with Buy Plan text");
			}
			if (userType.equals("Guest")) {
				verifyElementPresent(PWAHomePage.objHamburgerMenu, "Hamburger menu");
				JSClick(PWAHomePage.objHamburgerMenu, "Hamburger menu");
				verifyElementPresent(PWAHamburgerMenuPage.objWebBuySubscriptionOption,
						"Buy Subscribe Option in Hamburger Menu");
				String BuyPlanInHamburgerMenu = getText(PWAHamburgerMenuPage.objWebBuySubscriptionOption);
				System.out.println(BuyPlanInHamburgerMenu);
				extent.extentLogger("", "Buy Plan text: " + BuyPlanInHamburgerMenu);
				if (BuyPlanInHamburgerMenu.equalsIgnoreCase("Buy Plan")) {
					logger.info("Get premium text is replaced with Buy Plan text ,expected behaviour");
					extent.extentLoggerPass("", "Get premium text is replaced with Buy Plan text,expected behaviour");
					// Back(1);
				} else {
					logger.info("Get premium text is not replaced with Buy Plan text");
					extent.extentLoggerFail("", "Get premium text is not replaced with Buy Plan text");
				}
				JSClick(PWAHomePage.objHamburgerMenu, "Hamburger menu");
			}
			if (userType.equals("NonSubscribedUser")) {
				JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
				verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
				JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
				verifyElementPresent(PWAHamburgerMenuPage.objBuyPlanInSubscription, "Buy Plan");
				String BuyPlaninSubscriptionpage = getText(PWAHamburgerMenuPage.objBuyPlanInSubscription);
				System.out.println(BuyPlaninSubscriptionpage);
				extent.extentLogger("", "Buy Plan text: " + BuyPlaninSubscriptionpage);
				if (BuyPlaninSubscriptionpage.equalsIgnoreCase("Buy Plan")) {
					logger.info("Get premium text is replaced with Buy Plan text ,expected behaviour");
					extent.extentLoggerPass("", "Get premium text is replaced with Buy Plan text,expected behaviour");
					// Back(1);
				} else {
					logger.info("Get premium text is not replaced with Buy Plan text");
					extent.extentLoggerFail("", "Get premium text is not replaced with Buy Plan text");
				}

				JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
				verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Transactions"), "My Transactions");
				JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Transactions"), "My Transactions");
				verifyElementPresent(PWAHamburgerMenuPage.objBuyPlanInSubscription, "Buy Plan");
				String BuyPlaninTransactionpage = getText(PWAHamburgerMenuPage.objBuyPlanInSubscription);
				System.out.println(BuyPlaninTransactionpage);
				extent.extentLogger("", "Buy Plan text: " + BuyPlaninTransactionpage);
				if (BuyPlaninSubscriptionpage.equalsIgnoreCase("Buy Plan")) {
					logger.info("Get premium text is replaced with Buy Plan text ,expected behaviour");
					extent.extentLoggerPass("", "Get premium text is replaced with Buy Plan text,expected behaviour");
					// Back(1);
				} else {
					logger.info("Get premium text is not replaced with Buy Plan text");
					extent.extentLoggerFail("", "Get premium text is not replaced with Buy Plan text");
				}
			}

		}
	}

	public void PWA2SubscriptionPageLoad(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Subscription page scroll up when the page loaded completely (PWA2-8073) ");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			waitTime(5000);
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueWith499, "Continue button");
			if (userType.equals("Guest")) {
				accountinfopage();
			}
			WebElement iframeElement = null;
			if (getPlatform().equalsIgnoreCase("Android")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			} else if (getPlatform().equalsIgnoreCase("Web")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			}

			verifyElementPresent(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			// JSClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card
			// Option");
			if (JSClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option")) {
				logger.info(
						"Subscription page should not scroll up when the page loaded completely,expected behaviour");
				extent.extentLoggerFail(" ",
						"Subscription page should not scroll up when the page loaded completely,expected behaviour");
			} else {
				logger.info("Subscription page scroll up when the page loaded completely");
				extent.extentLoggerPass(" ", "Subscription page scroll up when the page loaded completely");

			}

			extent.HeaderChildNode(
					"\"Something went wrong. Please Retry the payment\" error message  validation (PWA2-8075) ");
			Back(1);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objsomethingmess, "Something went wrong message ")) {
				logger.info("\"Something went Wrong. Please Retry the Payment\" message is display");
				extent.extentLoggerFail(" ", "\"Something went Wrong. Please Retry the Payment\" message is display");
			} else {
				logger.info(
						"Page should navigate to Plan listing page without showing any error message from payment mode page., expected behaviour");
				extent.extentLoggerPass(" ",
						"Page should navigate to Plan listing page without showing any error message from payment mode page., expected behaviour");

			}
			navigateHome();
			if (userType.equals("Guest")) {
				logout();
			}
		}
		extent.HeaderChildNode(
				"Blank carousel is displaying by changing the display/content language and applying. (PWA2-8044) ");
		navigateToAnyScreenOnWeb("Movies");
		if (verifyElementPresent(PWAHomePage.objWEBCarouselTitle, "Carouserl title")) {
			logger.info(
					" Carousel banner should load and thumbnail should be displayed to the user. ,expected behaviour");
			extent.extentLoggerPass("",
					" Carousel banner should load and thumbnail should be displayed to the user. ,expected behaviour");
			// Back(1);
		} else {
			logger.info("Blank carousel is displaying by changing the display/content language and applying.");
			extent.extentLoggerFail("",
					"Blank carousel is displaying by changing the display/content language and applying.");
		}

	}

	public void PWASkipButtonValidationBasedOnDisplayLanguage(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Validate skip text based on display language (PWA2-7916) ");

			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, "The Power" + "\n", "Search Edit box Baarish");
			waitTime(4000);
			verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Movies"), "Movies Tab");
			waitTime(5000);
			verifyElementPresentAndClick(PWASearchPage.objSearchedResult("The Power"), "Search Result");
			waitTime(8000);
			Kannadalanguageselection();
			// waitForElement(PWASubscriptionPages.objsubscribebtnonplayer, 40, "subscribe
			// button on player");
			waitForElement(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
			String SkipButton = getText(PWASubscriptionPages.objSkipLink);
			System.out.println(SkipButton);
			extent.extentLogger("", "Skip Button: " + SkipButton);
			if (SkipButton.contains("Skip")) {
				logger.info(
						"Skip CTA in In-line message on player is not translated as per the selected display language ");
				extent.extentLoggerFail("",
						"Skip CTA in In-line message on player is not translated as per the selected display language");
				// Back(1);
			} else {
				logger.info(
						"Skip CTA in In-line message on player should be translate as per the selected display language, expected behaviour");
				extent.extentLoggerPass("",
						"Skip CTA in In-line message on player should be translate as per the selected display language, expected behaviour");
			}

			extent.HeaderChildNode("\"Skip\" CTA button validation in inline player description. ");
			if (verifyElementPresent(PWASubscriptionPages.objSkipLink, "Skip ")) {
				logger.info("\"Skip\" CTA should be displayed in the inline player description ,expected behaviour");
				extent.extentLoggerPass("",
						"\"Skip\" CTA should be displayed in the inline player description ,expected behaviour");
				// Back(1);
			} else {
				logger.info("\"Skip\" CTA fails to display in the inline player description.");
				extent.extentLoggerFail("", "\"Skip\" CTA fails to display in the inline player description.");
			}
			EnglishLanguageselection();
		}
	}

	public void PWA2WatchlistedContentValidation(String userType) throws Exception {
		if (userType.contains("Guest")) {
			extent.HeaderChildNode(
					"Watchlist contents fails to display on my-watch list screen, if guest user logged-in to any accounts from consumption page.   (PWA2-7933) ");
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieNoTrailer2");
			zeeSearchForContentAndClickOnFirstResult(keyword);
			waitTime(2000);
			waitForElement(PWAHamburgerMenuPage.objLoginLink, 20, "Login Link");
			click(PWAHamburgerMenuPage.objLoginLink, "Login Link");
			// verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "luckyigscon0074@gmail.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "vasilucky@123", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(5000);
			JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "profile icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Watchlist"), "My Watchlist");
			JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Watchlist"), "My Watchlist");
			if (verifyElementPresent(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all button")) {
				logger.info(
						"\"Uh-Oh! Nothing to watch\" should not be observed, Watchlist content should be displayed,expected behaviour");
				extent.extentLoggerPass("",
						"\"Uh-Oh! Nothing to watch\" should not be observed, Watchlist content should be displayed,expected behaviour");
				// Back(1);
			} else {
				logger.info("\"Uh-Oh! Nothing to watch \"message is displayed on my watch list section.");
				extent.extentLoggerFail("",
						"\"Uh-Oh! Nothing to watch \"message is displayed on my watch list section.");
			}
			navigateHome();
			logout();
		}
	}

	public void PWA2EpsiodeAndSeasonValidationInConsumptionPage(String userType) throws Exception {

		extent.HeaderChildNode(
				"Episode or season numbers (E 129) on the TV show/Zee5 Originals episode consumption page validation  (PWA2-8103) ");
		// zeeSearchForContentAndClickOnFirstResult("Sherlyn's Plan to Steal the
		// Phone");
		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		type(PWASearchPage.objSearchEditBox, "Sherlyn's Plan to Steal the Phone" + "\n", "Search bar");
		waitTime(5000);
		JSClick(PWASearchPage.objFirstContentCardNameAfterSearch(1), "Searched content");
		verifyElementPresent(PWAHamburgerMenuPage.objEpisodeNumber1, "Episode Number");

		verifyElementPresent(PWAHamburgerMenuPage.objEpisodeNumberInconsumptionPage, "Episode Number");
		String EpisodeNumber = getText(PWAHamburgerMenuPage.objEpisodeNumberInconsumptionPage);
		System.out.println(EpisodeNumber);
		extent.extentLogger("", "Episode Number: " + EpisodeNumber);
		if (EpisodeNumber.contains(" ")) {
			logger.info(
					"Blank Space is observed between the Episode or season numbers (E 129) on the TV show/Zee5 Originals show episode consumption page.");
			extent.extentLoggerFail("",
					"Blank Space is observed between the Episode or season numbers (E 129) on the TV show/Zee5 Originals show episode consumption page.");
			// Back(1);
		} else {
			logger.info("Blank space should not be observed on the Episode number, expected behaviour");
			extent.extentLoggerPass("", "Blank space should not be observed on the Episode number, expected behaviour");
		}

		extent.HeaderChildNode(
				"Zee5Originals shows - Season Number and Episode Number metadata validation  (PWA2-8042) ");
		// zeeSearchForContentAndClickOnFirstResult("Waqt Ne Kiya Kya Haseen Sitam Tum
		// Rahe Na Tum, Hum Rahe Na Hum");

		mandatoryRegistrationPopUp(userType);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		type(PWASearchPage.objSearchEditBox, "Waqt Ne Kiya Kya Haseen Sitam Tum Rahe Na Tum, Hum Rahe Na Hum" + "\n",
				"Search bar");
		waitTime(5000);
		JSClick(PWASearchPage.objFirstContentCardNameAfterSearch(1), "Searched content");
		verifyElementPresent(PWAHamburgerMenuPage.objEpisodeNumber1, "Episode Number");
		String EpisodeNumber1 = getText(PWAHamburgerMenuPage.objEpisodeNumber1);
		System.out.println(EpisodeNumber1);
		extent.extentLogger("", "EpisodeNumber : " + EpisodeNumber1);
		verifyElementPresent(PWAHamburgerMenuPage.objSeasonNumber, "Episode Number");
		String SeasonNumber = getText(PWAHamburgerMenuPage.objSeasonNumber);
		System.out.println(SeasonNumber);
		extent.extentLogger("", "Season Number: " + SeasonNumber);
		String EpisodeAndSeasonNumber = EpisodeNumber1 + SeasonNumber;
		System.err.println(EpisodeAndSeasonNumber);
		if (EpisodeAndSeasonNumber.contains("E 1S 2")) {
			logger.info("S2 E 2 displayed on the consumption page, expected behaviour");
			extent.extentLoggerPass("", "S2 E 2 displayed on the consumption page, expected behaviour");
		} else {
			logger.info("Episode # | Season # displayed on the consumption page.");
			extent.extentLoggerFail("", "Episode # | Season # displayed on the consumption page.");
		}
	}

	public void PWA2BuyPlanValidationAndPrepaildCodeValidation(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Subscription widget below the player validation (PWA2-7969)");
			navigateToAnyScreenOnWeb("TV Shows");
			scrollToElement(PWAHomePage.objFirstContentCardOfTray("Before"));
			if (checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"),
					"First Content Card Of Before TV Tray")) {
				click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");
				waitTime(5000);
				if (verifyElementPresent(PWAHamburgerMenuPage.objSubscribebtn, "subscribe button below player")) {
					logger.info(
							"Subscription widget below the player should be displayed for Before Tv content, expected behaviour");
					extent.extentLoggerPass("",
							"Subscription widget below the player should be displayed for Before Tv content, expected behaviour");
				} else {
					logger.info(" Subscription widget below the player is not displayed for Before Tv content");
					extent.extentLoggerFail("",
							" Subscription widget below the player is not displayed for Before Tv content");
				}
			}
			extent.HeaderChildNode(
					"Payment page validation when user apply the \"TESTZ40\" promocode in a subscription page (PWA2-8030)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			verifyElementPresentAndClick(PWASubscriptionPages.objHaveACode, "'Have A Code?' field");
			waitTime(3000);
			if (platform.equalsIgnoreCase("Android")) {
				type(PWASubscriptionPages.objHaveACode, "TESTZ40" + "\n", "'Have A Code?' field");
			} else if (platform.equalsIgnoreCase("Web")) {
				type(PWASubscriptionPages.objHaveACodetoenter, "TESTZ40", "'Have A Code?' field");
			}
			waitTime(5000);
			click(PWASubscriptionPages.objApplyBtn, "Apply Button");
			waitTime(5000);
			boolean a = verifyElementPresent(PWAHamburgerMenuPage.objFailureMessage, "Failure Message");
			boolean b = checkElementDisplayed(PWASubscriptionPages.objAppliedSuccessfullyMessage,
					"Applied Successfully Message");
			if (a || b) {
				logger.info("Payment page should be display after applying promo code, expected behaviour");
				extent.extentLoggerPass("",
						"Payment page should be display after applying promo code, expected behaviour");
			} else {
				logger.info(
						" “Something went Wrong” page is displayed when user apply the \"TESTZ40\" promocode in a subscription page");
				extent.extentLoggerFail("",
						" “Something went Wrong” page is displayed when user apply the \"TESTZ40\" promocode in a subscription page");
			}
			navigateHome();
			extent.HeaderChildNode("\"Have a Code?\" fails to auto populate with Error Validation"
					+ " message after access the invalid Promo/Prepaid Code deeplinking URL (PWA2-7846)");
			getWebDriver().get("https://newpwa.zee5.com/myaccount/subscription?code=Z5SJ1Y4of5VxAg&autoapply=true");
			if (verifyElementPresentAndClick(PWASubscriptionPages.objremovebtn, "remove Button")) {
				logger.info(
						" \"Have a Code?\" should be auto populate and show the invalid error message to the user., expected behaviour");
				extent.extentLoggerPass("",
						" \"Have a Code?\" should be auto populate and show the invalid error message to the user., expected behaviour");
			} else {
				logger.info(
						"\"Have a Code?\" fails to auto populate with Error Validation message after access the invalid Promo/Prepaid Code Deeplink URL ");
				extent.extentLoggerFail("",
						"\"Have a Code?\" fails to auto populate with Error Validation message after access the invalid Promo/Prepaid Code Deeplink URL ");
			}
			navigateHome();
		}
		extent.HeaderChildNode(
				"Blank carousel is displaying by changing the display/content language and applying. (PWA2-8044)");
		navigateToAnyScreenOnWeb("TV Shows");
		Kannadalanguageselection();
		if (verifyElementPresent(PWAHomePage.objContTitleOnCarousel, "Carousel Title")) {
			logger.info(
					"Carousel banner should load and thumbnail should be displayed to the user., expected behaviour");
			extent.extentLoggerPass("",
					"Carousel banner should load and thumbnail should be displayed to the user., expected behaviour");
		} else {
			logger.info(" Blank carousel is displaying by changing the display/content language and applying.");
			extent.extentLoggerFail("",
					" Blank carousel is displaying by changing the display/content language and applying.");
		}
		// EnglishLanguageselection();

		extent.HeaderChildNode(
				"Blank page is displayed, when user change the content language or display language on Zeeplex landing page (PWA2-7928) ");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		// Kannadalanguageselection();
		waitTime(3000);
		if (verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent, "Zee plex content")) {
			logger.info(
					"Content or display language should change & Zee plex available content should load , expected behaviour");
			extent.extentLoggerPass("",
					"Content or display language should change & Zee plex available content should load , expected behaviour");
		} else {
			logger.info(" Blank screen is displayed, /Error is displayed in the URL ");
			extent.extentLoggerFail("", " Blank screen is displayed, /Error is displayed in the URL ");
		}
		EnglishLanguageselection();

	}

	public void PWA2UpgradeButtonValidation(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"\"Upgrade\" CTA fails to display for carousals and header menu for kannada RSVOD user (PWA2-7918)");
			navigateToHome();
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "sharankognoor@mailnesia.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(5000);
			if (verifyElementPresent(PWAHomePage.objSubscribeBtnTopHeader, "upgrade Button in the Header")) {
				logger.info(" Upgrade CTA is displayed on header menu, expected behaviour");
				extent.extentLoggerPass("", "Upgrade CTA is displayed on header menu, expected behaviour");
			} else {
				logger.info("Upgrade CTA is not displayed on header menu");
				extent.extentLoggerFail("", "Upgrade CTA is not displayed on header menu");
			}
			if (verifyElementPresent(PWAHomePage.objGetPremiumWeb, "Upgrade")) {
				logger.info(" Upgrade CTA is displayed on carousel, expected behaviour");
				extent.extentLoggerPass("", "Upgrade CTA is displayed on carousel , expected behaviour");
			} else {
				logger.info("Upgrade CTA is not displayed on carousel");
				extent.extentLoggerFail("", "Upgrade CTA is not displayed on carousel ");
			}
			logout();
		}
	}

	public void PWA2ValidateConsumptionPagThroughGuestCheckOut(String userType) throws Exception {
		if (userType.contains("Guest")) {
			extent.HeaderChildNode(
					"User fails to navigate back to the consumption page when user login using INR499 Premium user during Guest checkout flow  (PWA2-7746) ");
			String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieNoTrailer2");
			zeeSearchForContentAndClickOnFirstResult(keyword);
			waitTime(2000);
			verifyElementPresent(PWAPlayerPage.objSubscribeNowLink, "In-Line Buy Plan Link on Player");
			click(PWAPlayerPage.objSubscribeNowLink, "In-Line Buy Plan Link on Player");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueWith499, "Continue button");
			PWAComboOfferLoginInSubscriptionFlow(userType, "499");
			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info(
						"User should be navigated back to the Consumption page with Already Zee5 Premium user Toast message indication , expected behaviour");
				extent.extentLoggerPass("",
						"User should be navigated back to the Consumption page with Already Zee5 Premium user Toast message indication , expected behaviour");
			} else {
				logger.info("User navigated to the Subscription page with Toast message and Explore Premium CTA.");
				extent.extentLoggerFail("",
						"User navigated to the Subscription page with Toast message and Explore Premium CTA.");
			}
			navigateToHome();
			logout();
			extent.HeaderChildNode(
					"Blank screen is displayed when user tries to login with subscribed user account.(PWA2-7745)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueWith499, "Continue button");
			PWAComboOfferLoginInSubscriptionFlow(userType, "499");
			if (verifyElementPresent(PWAHamburgerMenuPage.objToastMessage, "Toast Message")) {
				logger.info(
						"The Subscription page should be displayed with the toast message as it's displayed, expected behaviour");
				extent.extentLoggerPass("",
						"The Subscription page should be displayed with the toast message as it's displayed, expected behaviour");
			} else {
				logger.info("A blank screen is displayed when a user tries to login with the subscribed user.");
				extent.extentLoggerFail("",
						"A blank screen is displayed when a user tries to login with the subscribed user.");

			}
			navigateToHome();
			logout();

			extent.HeaderChildNode(
					"\"Download and watch offline \"text slider is displayed on subscription page. (PWA2-7947)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objAutoFlipcontent("Download and Watch Offline"),
					"Download and Watch Offline")) {
				logger.info("\"Download and watch offline \"text slider is displayed.");
				extent.extentLoggerFail("", "\"Download and watch offline \"text slider is displayed.");
			} else {
				logger.info(
						"\"Download and watch offline \"text slider should not display on the subscription page., expected behaviour");
				extent.extentLoggerPass("",
						"\"Download and watch offline \"text slider should not display on the subscription page., expected behaviour");

			}

			navigateToHome();

			extent.HeaderChildNode(
					"validate toast message \"Selected plan has already been activated\" in zeeplex page (PWA2-7950)");
			String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("premiumMovieNoTrailer2");
			zeeSearchForContentAndClickOnFirstResult(keyword1);
			waitTime(2000);
			verifyElementPresent(PWAPlayerPage.objSubscribeNowLink, "In-Line Buy Plan Link on Player");
			click(PWAPlayerPage.objSubscribeNowLink, "In-Line Buy Plan Link on Player");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueWith499, "Continue button");

			PWAComboOfferLoginInSubscriptionFlow(userType, "499");
			Boolean ExpiredToastMessage = getWebDriver().findElement(By.xpath("//*[@class='toastMessage']"))
					.isDisplayed();
			if (ExpiredToastMessage == true) {
				extent.extentLogger("Toast", "Expired Toast message displayed");
				logger.info("Expired Toast message displayed");
			} else {
				extent.extentLogger("Toast", "Expired Toast message not displayed");
				logger.info("Expired Toast message not displayed");
			}
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");

			if (ExpiredToastMessage == true) {
				logger.info("Toast message is display in zeeplex page");
				extent.extentLoggerFail("", "Toast message is display in zeeplex page");
			} else {
				logger.info("Toast message should not display in zeeplex page, expected behaviour");
				extent.extentLoggerPass("", "Toast message should not display in zeeplex page, expected behaviour");

			}
			logout();
		}
		navigateToHome();
	}

	public void PWA2OTPFailedMessageValidationINAccountInfoPage(String userType) throws Exception {
		if (userType.contentEquals("Guest")) {
			extent.HeaderChildNode("\"Either OTP is not valid or Expired\" toast message validation (PWA2-7725)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueWith499, "Continue button");
			type(PWASubscriptionPages.objEmailIDTextField, "9000000000", "Email Id");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button");
			verifyElementPresent(PWAHamburgerMenuPage.objOTP1, "OTP 1");
			type(PWAHamburgerMenuPage.objOTP1, "1", "OTP 1");
			verifyElementPresent(PWAHamburgerMenuPage.objOTP2, "OTP 2");
			type(PWAHamburgerMenuPage.objOTP2, "2", "OTP 2");
			verifyElementPresent(PWAHamburgerMenuPage.objOTP3, "OTP 3");
			type(PWAHamburgerMenuPage.objOTP3, "3", "OTP 3");
			verifyElementPresent(PWAHamburgerMenuPage.objOTP4, "OTP 4");
			type(PWAHamburgerMenuPage.objOTP4, "4", "OTP 4");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objverifybtninaccountinfopage, "Verify");
			if (verifyElementPresent(PWAHamburgerMenuPage.objErrorMessageInAccountInfoPage, "Error message")) {
				logger.info(
						"As per Subscription_revamp UI reference, Inline \"Either OTP is not valid or Expired\" Error Message should be displayed., expected behaviour");
				extent.extentLoggerPass("",
						"As per Subscription_revamp UI reference, Inline \"Either OTP is not valid or Expired\" Error Message should be displayed., expected behaviour");
			} else {
				logger.info(
						"\"Either OTP is not valid or Expired\" toast message displayed instead of inline Error message on Acount info page \"Verify OTP\" screen.");
				extent.extentLoggerFail("",
						"\"Either OTP is not valid or Expired\" toast message displayed instead of inline Error message on Acount info page \"Verify OTP\" screen.");
			}
		}
		navigateHome();
		extent.HeaderChildNode("\"List of TV Channels\"  validation based on display language (PWA2-8039)");

		navigateToAnyScreenOnWeb("Channels");
		Kannadalanguageselection();
		verifyElementPresent(PWAHamburgerMenuPage.objChannelsHeader, "Channel Header");
		String ChannelHeader = getText(PWAHamburgerMenuPage.objChannelsHeader);
		System.out.println(ChannelHeader);
		extent.extentLogger("", "Channel Header text " + ChannelHeader);
		if (ChannelHeader.contains("List of TV Channels")) {
			logger.info("The titles Failed to translate based on the selected display language.");
			extent.extentLoggerFail("", "The titles Failed to translate based on the selected display language.");
		} else {
			logger.info("The titles should be translated based on the selected display language., extected behaviour ");
			extent.extentLoggerPass(" ",
					"The titles should be translated based on the selected display language., expected behaviour");
		}
		EnglishLanguageselection();
		extent.HeaderChildNode(
				"Blank screen is displayed in the player When user play any News VOD Contents on pwauat.zee5.com (PWA2-8066)");
//		getWebDriver().get("pwauat.zee5.com");
//		navigateToAnyScreenOnWeb("News");
		getWebDriver().get(
				"https://newpwa.zee5.com/news/details/art-to-motivate-people-for-covid-19-vaccination/0-0-newsauto_3s5vcbp0bhfg");
		waitTime(3000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("News VOD Content should be played properly.");
			extent.extentLoggerPass("Consumption Page", "News VOD Content should be played properly.");
		} else {
			logger.info(
					"Blank player screen displayed and content fails to start the playback when user play any News VOD Contents on newpwa.zee5.com");
			extent.extentLoggerFail("Consumption Page",
					"Blank player screen displayed and content fails to start the playback when user play any News VOD Contents on newpwa.zee5.com");
		}
		navigateToHome();
	}

	public void PWA2BuyplanVlidationForParentalControlEnabledUser(String userType) throws Exception {
		if (userType.contains("Guest")) {
			extent.HeaderChildNode(
					"\"Get premium \"CTA is displayed on consumption page for the subscribed users with parental pin logged in via guest checkout (PWA2-7925)");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "zee299@g.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(10000);
			verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			JSClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "ParentalControl");
			checkElementDisplayed(PWALoginPage.objPasswordField, "password field");
			String password = "123456";
			type(PWALoginPage.objPasswordField, password, "Password field");
			click(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
			waitTime(2000);
			checkElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page");
			checkElementDisplayed(PWAHamburgerMenuPage.objNoRestrictionSelected, "No restricted option selected");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objRestrictAll, "Restrict all option");
			verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1, "Set Lock Field");
			type(PWAHamburgerMenuPage.objParentalLockPin1, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin2, "2", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin3, "3", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin4, "4", "ParentalLockPin");
			waitTime(4000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Set Parental lock button");
			waitTime(2000);
			checkElementDisplayed(PWAHomePage.objZeeLogo, "zee logo");
			waitTime(3000);
			zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
			waitTime(5000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objParentalLockPopUpInPlayer, "Parent control Popup")) {
				type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
			}
			waitTime(4000);
			if (verifyElementPresent(PWASubscriptionPages.objTeaserGetPremiumButton,
					"Buy Plan CTA in originals details")) {
				logger.info("\"Get premium' CTA is displayed on the player and also below the player section.");
				extent.extentLoggerFail("",
						"\"Get premium' CTA is displayed on the player and also below the player section.");
			} else {
				logger.info(
						" \"Get premium should not be displayed on the consumption screen for subscribed users, extected behaviour ");
				extent.extentLoggerPass(" ",
						" \"Get premium should not be displayed on the consumption screen for subscribed users, expected behaviour");
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "ParentalControl");
			checkElementDisplayed(PWALoginPage.objPasswordField, "password field");
			type(PWALoginPage.objPasswordField, password, "Password field");
			waitTime(2000);
			click(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
			waitTime(2000);
			checkElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page");
			click(PWAHamburgerMenuPage.objParentalLockNoRestrictionOption, "No restriction option");
			checkElementDisplayed(PWAHamburgerMenuPage.objNoRestrictionSelected, "No restricted option selected");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Set Parental lock button");
			waitTime(2000);
			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
			logout();
		}
	}

	public void PWA2LoadingPaymentOptions(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"\"Loading payment options..\" text validation based on display Language(PWA2-8080) ");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objverifybtninaccountinfopage, "Continue button");
			if (userType.equals("Guest")) {
				accountinfopage();
			}
			navigateHome();
			Kannadalanguageselection();
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objverifybtninaccountinfopage, "Continue button");

			WebElement iframeElement = null;
			if (getPlatform().equalsIgnoreCase("Android")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			} else if (getPlatform().equalsIgnoreCase("Web")) {
				iframeElement = getWebDriver().findElement(By.id("juspay_iframe"));
				Thread.sleep(5000);
				Thread.sleep(5000);
				Thread.sleep(5000);
				getWebDriver().switchTo().frame(iframeElement);
			}

			if (checkElementDisplayed(PWAHamburgerMenuPage.objLoadingPaymentOption, "Loading Payment option")) {
				String Loading = getText(PWAHamburgerMenuPage.objLoadingPaymentOption);
				System.out.println(Loading);
				extent.extentLogger("", "Loading text: " + Loading);
				if (Loading.contains("Loading Payment Options...")) {
					logger.info(
							"\"Loading payment options..\" fails to translate on the selected display language otherthan English.");
					extent.extentLoggerFail(" ",
							"\"Loading payment options..\" fails to translate on the selected display language otherthan English.");
				} else {
					logger.info(
							"\"Loading payment options..\" should be translated based on the display language, expected behaviour");
					extent.extentLoggerPass(" ",
							"\"Loading payment options..\" should be translated based on the display language, expected behaviour");

				}
			}
			navigateHome();
			EnglishLanguageselection();
			if (userType.equals("Guest")) {
				logout();
			}

		}
	}

	public void PWA2WebSeriesValidationAndAutoflipValidation(String userType) throws Exception {
		extent.HeaderChildNode(
				"\"TV Show\" metadata category displayed for the zee5 Originals Show Episode consumption page  (PWA2-8040)");
		navigateToAnyScreenOnWeb("Web Series");
		verifyElementPresent(PWAHomePage.objPlayBtn, "\"Play\" CTA on Carousel banner");
		click(PWAHomePage.objPlayBtn, "\"Play\" CTA on Carousel banner");
		mandatoryRegistrationPopUp(userType);
		waitTime(5000);
		verifyElementPresent(PWAHamburgerMenuPage.objShowMetaData, "Shows metadata");
		String ShowsMetaData = getText(PWAHamburgerMenuPage.objShowMetaData);
		System.out.println(ShowsMetaData);
		extent.extentLogger("", "Season Number: " + ShowsMetaData);
		if (ShowsMetaData.contentEquals("Web Series")) {
			logger.info(
					"\"zee5 Originals\" metadata category should be displayed on the Zee5Originals show Episode consumption page, expected behaviour");
			extent.extentLoggerPass("",
					"\"zee5 Originals\" metadata category should be displayed on the Zee5Originals show Episode consumption page, expected behaviour");
		} else {
			logger.info(
					"\"TV Show\" metadata category displayed for the zee5 Originals Show Episode consumption page when user play the content from the Carousel.");
			extent.extentLoggerFail("",
					"\"TV Show\" metadata category displayed for the zee5 Originals Show Episode consumption page when user play the content from the Carousel.");
		}
		/*
		 * if (userType.equals("NonSubscribedUser")||
		 * userType.equalsIgnoreCase("Guest")) { extent.
		 * HeaderChildNode("Subscription page - Autoflip Carousel title validation based on display language (PWA2-7971) "
		 * ); Kannadalanguageselection();
		 * verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader,
		 * "Subscribe Button in the Header");
		 * waitForElement(PWAHamburgerMenuPage.objAutoFlipcontent(""), 20,
		 * "Kids Content and Parental Control" );
		 * verifyElementPresent(PWAHamburgerMenuPage.
		 * objAutoFlipcontent("????? ??????? ????? ????? ????????"),
		 * "Kids Content and Parental Control"); String
		 * AutoFlipContent1=getText(PWAHamburgerMenuPage.
		 * objAutoFlipcontent("????? ??????? ????? ????? ????????"));
		 * System.out.println(AutoFlipContent1); extent.extentLogger("",
		 * "AutoFlip content " + AutoFlipContent1);
		 * if(AutoFlipContent1.contentEquals("Kids Content and Parental Control")) {
		 * logger.
		 * info("Subscription page - Autoflip Carousel Kids Content and Parental Control fails to translate for Telugu, Tamil and Bhojpuri display languages. "
		 * ); extent.extentLoggerFail("",
		 * "Subscription page - Autoflip Carousel Kids Content and Parental Control fails to translate for Telugu, Tamil and Bhojpuri display languages."
		 * ); //Back(1); } else { logger.
		 * info(" Subscription page - Autoflip Carousel title should be displayed as per the selected display language translations., expected behaviour"
		 * ); extent.extentLoggerPass("",
		 * " Subscription page - Autoflip Carousel title should be displayed as per the selected display language translations., expected behaviour"
		 * ); }
		 *
		 * verifyElementPresent(PWAHamburgerMenuPage.
		 * objAutoFlipcontent("??????? ?-???????? ?????"),
		 * "Eduauraa e-learning access"); String
		 * AutoFlipContent2=getText(PWAHamburgerMenuPage.
		 * objAutoFlipcontent("??????? ?-???????? ?????"));
		 * System.out.println(AutoFlipContent2); extent.extentLogger("",
		 * "AutoFlip content " + AutoFlipContent2);
		 * if(AutoFlipContent2.contentEquals("Eduauraa e-learning access")) { logger.
		 * info("Subscription page - Autoflip Carousel Eduauraa e-learning access fails to translate for Telugu, Tamil and Bhojpuri display languages. "
		 * ); extent.extentLoggerFail("",
		 * "Subscription page - Autoflip Carousel Eduauraa e-learning access fails to translate for Telugu, Tamil and Bhojpuri display languages."
		 * ); //Back(1); } else { logger.
		 * info(" Subscription page - Autoflip Carousel title should be displayed as per the selected display language translations., expected behaviour"
		 * ); extent.extentLoggerPass("",
		 * " Subscription page - Autoflip Carousel title should be displayed as per the selected display language translations., expected behaviour"
		 * ); } verifyElementPresent(PWAHamburgerMenuPage.
		 * objAutoFlipcontent("???? ??? ????? ????? ???????"),
		 * "Anytime Big Entertainment"); String
		 * AutoFlipContent3=getText(PWAHamburgerMenuPage.
		 * objAutoFlipcontent("???? ??? ????? ????? ???????"));
		 * System.out.println(AutoFlipContent3); extent.extentLogger("",
		 * "AutoFlip content " + AutoFlipContent3);
		 * if(AutoFlipContent3.contentEquals("Anytime Big Entertainment")) { logger.
		 * info("Subscription page - Autoflip Carousel Anytime Big Entertainment fails to translate for Tamil display languages. "
		 * ); extent.extentLoggerFail("",
		 * "Subscription page - Autoflip Carousel Anytime Big Entertainment fails to translate for Tamil display languages."
		 * ); //Back(1); } else { logger.
		 * info(" Subscription page - Autoflip Carousel title should be displayed as per the selected display language translations., expected behaviour"
		 * ); extent.extentLoggerPass("",
		 * " Subscription page - Autoflip Carousel title should be displayed as per the selected display language translations., expected behaviour"
		 * ); } } navigateHome(); EnglishLanguageselection();
		 */
	}

	public void pwaheadertextvalidationinsubscriptionpageForDisplayLanguage(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode(
					"The translations fails for all the display language except for English in benefits page. (PWA2-7750)");
			Kannadalanguageselection();

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("???????????? ?????????"),
					"Blockbuster movies");
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objPerkSideText, "4500+ Blockbuster Movies");
			String Sidetext = getText(PWAHamburgerMenuPage.objPerkSideText);
			System.out.println(Sidetext);
			extent.extentLogger("", "Sidetext content text " + Sidetext);
			if (Sidetext.contains("4500+ Blockbuster Movies")) {
				logger.info("The translation fails on the benefits page.");
				extent.extentLoggerFail("", "The translation fails on the benefits page.");
			} else {
				logger.info(
						"The translation should happen based on the selected display language, extected behaviour ");
				extent.extentLoggerPass(" ",
						"The translation should happen based on the selected display language, expected behaviour");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("???? ???????"), "Web Series");
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objPerkSideText, "Unlimlted Web series");
			String Sidetext1 = getText(PWAHamburgerMenuPage.objPerkSideText);
			System.out.println(Sidetext1);
			extent.extentLogger("", "Sidetext content text " + Sidetext1);
			if (Sidetext.contains("Unlimlted Web series")) {
				logger.info("The translation fails on the benefits page.");
				extent.extentLoggerFail("", "The translation fails on the benefits page.");
			} else {
				logger.info(
						"The translation should happen based on the selected display language, extected behaviour ");
				extent.extentLoggerPass(" ",
						"The translation should happen based on the selected display language, expected behaviour");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);

			verifyElementPresentAndClick(PWAHamburgerMenuPage.objperklsidestext("????? ?????? ??????????"), "Ad free");
			waitTime(3000);

			verifyElementPresent(PWAHamburgerMenuPage.objPerkSideText, "Ad-Free Entertainment");
			String Sidetext2 = getText(PWAHamburgerMenuPage.objPerkSideText);
			System.out.println(Sidetext2);
			extent.extentLogger("", "Sidetext content text " + Sidetext2);
			if (Sidetext.contains("See Payment Based Offers")) {
				logger.info("The translation fails on the benefits page.");
				extent.extentLoggerFail("", "The translation fails on the benefits page.");
			} else {
				logger.info(
						"The translation should happen based on the selected display language, extected behaviour ");
				extent.extentLoggerPass(" ",
						"The translation should happen based on the selected display language, expected behaviour");

			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objclosebtn, "Close button");
			waitTime(3000);

			navigateHome();
			EnglishLanguageselection();
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");

		}

	}

	public void PWA2ValidateChromeCastIconInConsumptionPage(String userType) throws Exception {
		extent.HeaderChildNode("Remove browser support browser implementation from consumption pages (PWA2-8154)");
		checkElementDisplayed(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
		click(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
		waitTime(5000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objChromeCast, "Chrome cast")) {
			logger.info("Chromecast Icon is display ");
			extent.extentLoggerFail("", "Chromecast Icon is display ");
		} else {
			logger.info("Chromecast Icon should not  display , extected behaviour ");
			extent.extentLoggerPass(" ", "Chromecast Icon should not  display , expected behaviour");
		}
	}

	public void PWA2BuyPlanAndUpgradeValidation(String userType) throws Exception {
		if (userType.contains("Guest") || userType.contentEquals("NonSubscribedUser")) {
			extent.HeaderChildNode("change of header Subscription button to Buy Plan ");
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText);
			extent.extentLogger("", "Buy Now Header text : " + SubscriptionText);
			if (SubscriptionText.contains("Buy Plan")) {
				logger.info("Buy Plan text should display , expected behaviour");
				extent.extentLoggerPass("", "Buy Plan text should display , expected behaviour");
			} else {
				logger.info("Subscribe text is not changed Buy Plan ");
				extent.extentLoggerFail("", "Subscribe text is not changed Buy Plan ");
			}
			Kannadalanguageselection();
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText1 = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText1);
			extent.extentLogger("", "Buy Now Header text : " + SubscriptionText1);
			if (SubscriptionText1.contains("?????? ???????")) {
				logger.info("Buy Plan text should display , expected behaviour");
				extent.extentLoggerPass("", "Buy Plan text should display , expected behaviour");
			} else {
				logger.info("Subscribe text is not changed Buy Plan ");
				extent.extentLoggerFail("", "Subscribe text is not changed Buy Plan ");
			}
			Tamillanguageselection();
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText2 = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText2);
			extent.extentLogger("", "Buy Now Header text : " + SubscriptionText2);
			if (SubscriptionText2.contains("?????? ?????")) {
				logger.info("Buy Plan text should display , expected behaviour");
				extent.extentLoggerPass("", "Buy Plan text should display , expected behaviour");
			} else {
				logger.info("Subscribe text is not changed Buy Plan ");
				extent.extentLoggerFail("", "Subscribe text is not changed Buy Plan ");
			}
			Hindilanguageselection();
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText3 = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText3);
			extent.extentLogger("", "Buy Now Header text : " + SubscriptionText3);
			if (SubscriptionText3.contains("????? ??????")) {
				logger.info("Buy Plan text should display , expected behaviour");
				extent.extentLoggerPass("", "Buy Plan text should display , expected behaviour");
			} else {
				logger.info("Subscribe text is not changed Buy Plan ");
				extent.extentLoggerFail("", "Subscribe text is not changed Buy Plan ");
			}
			EnglishLanguageselection();
		}
		if (userType.contains("Guest")) {
			extent.HeaderChildNode("Upgrade CTA button validation based on display Language");
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "sharankognoor@mailnesia.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText);
			extent.extentLogger("", "Upgrade Header text : " + SubscriptionText);
			if (SubscriptionText.contains("Upgrade")) {
				logger.info("Upgrade text should display , expected behaviour");
				extent.extentLoggerPass("", "Upgrade text should display , expected behaviour");
			} else {
				logger.info("Upgrade text is not displayed ");
				extent.extentLoggerFail("", "Upgrade text is not upgrade");
			}
			Kannadalanguageselection();
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText1 = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText1);
			extent.extentLogger("", "Upgrade Header text : " + SubscriptionText1);
			if (SubscriptionText1.contains("?????")) {
				logger.info("Upgrade text should display based on display Language, expected behaviour");
				extent.extentLoggerPass("",
						"Upgrade text should display based on display Language , expected behaviour");
			} else {
				logger.info("Upgrade text is not displayed based on display language");
				extent.extentLoggerFail("", "Upgrade text is not upgrade based on display language");
			}
			Tamillanguageselection();
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText2 = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText2);
			extent.extentLogger("", "Upgrade Header text : " + SubscriptionText2);
			if (SubscriptionText2.contains("?????????")) {
				logger.info("Upgrade text should display based on display Language, expected behaviour");
				extent.extentLoggerPass("",
						"Upgrade text should display based on display Language , expected behaviour");
			} else {
				logger.info("Upgrade text is not displayed based on display language");
				extent.extentLoggerFail("", "Upgrade text is not upgrade based on display language");
			}
			Hindilanguageselection();
			checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
			String SubscriptionText3 = getText(PWALandingPages.obj_Pwa_Subcription_teaser_btn);
			System.out.println(SubscriptionText3);
			extent.extentLogger("", "Upgrade Header text : " + SubscriptionText3);
			if (SubscriptionText3.contains("???????")) {
				logger.info("Upgrade text should display based on display Language, expected behaviour");
				extent.extentLoggerPass("",
						"Upgrade text should display based on display Language , expected behaviour");
			} else {
				logger.info("Upgrade text is not displayed based on display language");
				extent.extentLoggerFail("", "Upgrade text is not upgrade based on display language");
			}
			EnglishLanguageselection();
			logout();
		}
	}

	public void verifyChannelNameTranslationAfterDisplayLanguageChanged(String userType) throws Exception {

		extent.HeaderChildNode(
				"validate channel name translation happens after seleting display language to other languages(PWA2-8041)");
		navigateHome();
		waitTime(3000);
		Kannadalanguageselection();
		waitTime(4000);
		// mouseHoverMenu();
		// verifyElementPresentAndClick(PWAHomePage.objMoreMenuTabs("?????? ???"),
		// "channels");
		navigateToAnyScreenOnWeb("?????? ???");
		waitTime(4000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objchannelname("Big Magic"), "Big Magic channel");
		String channelnameHeader = getText(PWAHamburgerMenuPage.objchannelnameHeader);
		System.out.println(channelnameHeader);
		extent.extentLogger("", "Channel Header text " + channelnameHeader);

		if (channelnameHeader.contains("Big Magic")) {
			waitTime(4000);
			logger.info("The titles failed to translate based on the selected display language.");
			extent.extentLoggerFail(" ", "The titles failed to translate based on the selected display language.");

		} else {
			logger.info("The titles should be translated based on the selected display language., expected behaviour");
			extent.extentLoggerPass(" ",
					"The titles should be translated based on the selected display language., expected behaviour");
		}
		EnglishLanguageselection();
	}

	public void PWA2FooterSectionValidationBasedOnContentLanguage(String userType) throws Exception {
		extent.HeaderChildNode("Footer menu contents displayed based on the content language selection.(PWA2-8079)");
		navigateToAnyScreenOnWeb("Home");
		selectLanguages();
		scrollToBottomOfPageWEB();
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer section");
		waitTime(1500);
		String Footer = getText(PWAHamburgerMenuPage.objfooter);
		System.out.println(Footer);
		extent.extentLogger("", "Footer Section Text:" + Footer);

		click(PWAHamburgerMenuPage.objLanguageBtnWeb, "Language Button");
		waitTime(2000);
		waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2, "Content Languages");
		waitTime(2000);
		unselectAllContentLanguages();
		waitTime(1500);

		clickElementWithWebLocator(PWAHamburgerMenuPage.objUnselectedContentLanguage("Tamil"));
		waitTime(1500);
		logger.info("Selected content language Tamil");
		extent.extentLogger("", "Selected content language Tamil");

		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply buttton");
		waitTime(1500);

		scrollToBottomOfPageWEB();
		waitTime(500);
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer section");

		// ---------Getting Footer Section of Tamil---------------------------
		String Footer1 = getText(PWAHamburgerMenuPage.objfooter);
		System.out.println(Footer1);
		extent.extentLogger("", "Footer Section Text:" + Footer1);
		if (Footer.equals(Footer1)) {
			logger.info(
					"Footer menu Contents should be displayed irrespective of the Content languages, expected behaviour");
			extent.extentLoggerPass("",
					"Footer menu Contents should be displayed irrespective of the Content languages, expected behaviour");
		} else {
			logger.info("Footer menu contents displayed based on the content language selection.");
			extent.extentLoggerFail("", "Footer menu contents displayed based on the content language selection.");

		}
		waitTime(1500);
		// -----------------Checking FooterLink for Kannada content
		// lang----------------------------------
		navigateToAnyScreenOnWeb("Home");
		waitTime(2500);

		click(PWAHamburgerMenuPage.objLanguageBtnWeb, "Language Button");
		waitTime(2000);
		waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2, "Content Languages");
		waitTime(2000);
		unselectAllContentLanguages();
		waitTime(1500);
		clickElementWithWebLocator(PWAHamburgerMenuPage.objUnselectedKannadaContentLanguage);
		logger.info("Selected content language Kannada");
		extent.extentLogger("", "Selected content language Kannada");

		waitTime(1500);
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply buttton");
		waitTime(2500);
		scrollToBottomOfPageWEB();
		waitTime(500);
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer section");

		// ---------Getting Footer Section of Kannada---------------------------
		String Footer2 = getText(PWAHamburgerMenuPage.objfooter);
		System.out.println(Footer2);

		extent.extentLogger("", "Footer Section Text:" + Footer2);
		if (Footer.equals(Footer2)) {
			logger.info(
					"Footer menu Contents should be displayed irrespective of the Content languages, expected behaviour");
			extent.extentLoggerPass("",
					"Footer menu Contents should be displayed irrespective of the Content languages, expected behaviour");
		} else {
			logger.info("Footer menu contents displayed based on the content language selection.");
			extent.extentLoggerFail("", "Footer menu contents displayed based on the content language selection.");

		}
		waitTime(1500);

		// -----------------Checking FooterLink for Telugu content
		// lang----------------------------------
		navigateToAnyScreenOnWeb("Home");
		waitTime(2500);

		click(PWAHamburgerMenuPage.objLanguageBtnWeb, "Language Button");
		waitTime(2000);
		waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2, "Content Languages");
		waitTime(2000);
		unselectAllContentLanguages();
		waitTime(1500);
		clickElementWithWebLocator(PWAHamburgerMenuPage.objUnselectedContentLanguage("Telugu"));
		waitTime(1500);
		logger.info("Selected content language Telugu");
		extent.extentLogger("", "Selected content language Telugu");

		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply buttton");
		waitTime(1500);

		scrollToBottomOfPageWEB();
		waitTime(500);
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer section");

		// ---------Getting Footer Section of Telugu---------------------------

		String Footer3 = getText(PWAHamburgerMenuPage.objfooter);
		System.out.println(Footer3);

		extent.extentLogger("", "Footer Section Text:" + Footer3);
		if (Footer.equals(Footer3)) {
			logger.info(
					"Footer menu Contents should be displayed irrespective of the Content languages, expected behaviour");
			extent.extentLoggerPass("",
					"Footer menu Contents should be displayed irrespective of the Content languages, expected behaviour");

		} else {
			logger.info("Footer menu contents displayed based on the content language selection.");
			extent.extentLoggerFail("", "Footer menu contents displayed based on the content language selection.");
		}
	}

	public void PWA2Sprint58(String UserType) throws Exception {
		PWA2WatchlistedContentValidation(UserType);
		PWA2GetPremiumReplaceToBuyPlanValidation(UserType);
		PWA2SubscriptionPageLoad(UserType);
		PWASkipButtonValidationBasedOnDisplayLanguage(UserType);

		PWA2EpsiodeAndSeasonValidationInConsumptionPage(UserType);
		PWA2BuyPlanValidationAndPrepaildCodeValidation(UserType);
		PWA2UpgradeButtonValidation(UserType);
		PWA2ValidateConsumptionPagThroughGuestCheckOut(UserType);
		PWA2OTPFailedMessageValidationINAccountInfoPage(UserType);
		PWA2BuyplanVlidationForParentalControlEnabledUser(UserType);
		PWA2LoadingPaymentOptions(UserType);
		PWA2WebSeriesValidationAndAutoflipValidation(UserType);
		//// pwaheadertextvalidationinsubscriptionpageForDisplayLanguage(UserType);
		PWA2ValidateChromeCastIconInConsumptionPage(UserType);
		//// PWA2BuyPlanAndUpgradeValidation(UserType);
		verifyChannelNameTranslationAfterDisplayLanguageChanged(UserType);
		//// PWA2FooterSectionValidationBasedOnContentLanguage(UserType);

	}

	public void PWA2NewsPageAndZeeplexValidation(String userType) throws Exception {

		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode("News page validation  (PWA2-4962)");
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, "Binna-trailer ", "Search Field");
			waitTime(3000);
			click(PWASearchPage.objfirstdata, "searched content");
			waitTime(10000);
//		waitForElement(PWAHamburgerMenuPage.objGetPremiumPopup, 20, "GET PREMIUM POPUP");
//		verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			navigateToAnyScreenOnWeb("News");
			navigateToAnyScreenOnWeb("News");
			checkElementDisplayed(PWAHamburgerMenuPage.objplaybtncarousel, "Play button on carousel");
			click(PWAHamburgerMenuPage.objplaybtncarousel, "Play button on carousel");
			if (verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button")) {
				logger.info("The content should be played and the page should be responsive , Expected behaviour");
				extent.extentLogger(" ",
						"The content should be played and the page should be responsive , Expected behaviour");
			} else {
				logger.error("continues loading is displayed on the player");
				extent.extentLoggerFail(" ", "continues loading is displayed on the player");
			}
		}
		/*
		 * extent.
		 * HeaderChildNode("zeeplex tab validation based on display Language (PWA2-4956)"
		 * );
		 *
		 * if (userType.equalsIgnoreCase("Guest")) { Kannadalanguageselection();
		 * navigateToAnyScreenOnWeb("ZEEPLEX"); String tab =
		 * getText(PWAHamburgerMenuPage.objzeeplextab); System.out.println(tab);
		 *
		 * if (tab.contentEquals("ZEEPLEX")) { extent.extentLoggerFail("IncorrectText",
		 * "InCorrect text is displayed: " + tab);
		 * logger.info("InCorrect text is displayed: " + tab); } else {
		 * extent.extentLogger("correctText", "correct text is displayed: " + tab);
		 * logger.error("correct text is  displayed: " + tab); }
		 * EnglishLanguageselection(); } if (userType.equals("NonSubscribedUser") ||
		 * userType.equals("SubscribedUser")) { Kannadalanguageselection();
		 * verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab,
		 * "Zeeplex tab"); String c = getText(PWAHamburgerMenuPage.objzeeplextab);
		 * System.out.println(c);
		 *
		 * if (c.contentEquals("ZEEPLEX")) { extent.extentLoggerFail("IncorrectText",
		 * "InCorrect text is displayed: " + c);
		 * logger.info("InCorrect text is displayed: " + c); } else {
		 * extent.extentLogger("correctText", "correct text is displayed: " + c);
		 * logger.error("correct text is  displayed: " + c); }
		 * EnglishLanguageselection(); }
		 *
		 * // extent.
		 * HeaderChildNode("Releasing date for upcoming movie validation (PWA2-4925)");
		 * // waitTime(15000); // if (userType.equalsIgnoreCase("Guest")) { //
		 * navigateToAnyScreenOnWeb(tabName); // } // if
		 * (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
		 * // verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab,
		 * "Zeeplex tab"); // } // // //
		 * verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent,
		 * "Zee plex content"); // // content"); //
		 * if(checkElementDisplayed(PWAHamburgerMenuPage.objupcomingmovietray,
		 * "Upcoming movies")) // { // waitTime(3000); //
		 * ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer); //
		 * click(PWAHamburgerMenuPage.objTrailer,"Trailer"); // //
		 * verifyElementPresent(PWAHamburgerMenuPage.objreleasingdate,
		 * "Releasing date "); // String releasedate =
		 * getText(PWAHamburgerMenuPage.objreleasingdate); //
		 * System.out.println(releasedate); //
		 * logger.info("Releasing on : "+releasedate); // extent.extentLogger("",
		 * "Releasing on : "+releasedate); // // if(releasedate.contentEquals("th")) //
		 * { // logger.
		 * info("Releasing  text should contain \"th \"  under the player bands of upcoming movie trailer playback, expected behavior "
		 * ); // extent.extentLoggerPass("",
		 * "Releasing  text should contain \"th \"  under the player bands of upcoming movie trailer playback , expected behavior "
		 * ); // // } else // { // logger.
		 * error("The releasing text doesn't contains \"th\" under the player bands of upcoming movie trailer playback "
		 * ); // extent.extentLoggerFail("",
		 * "The releasing text doesn't contains \"th\" under the player bands of upcoming movie trailer playback "
		 * ); // } // //verifyElementPresent(PWANewsPage.objVolume,
		 * "Volume Control on Autoplaying carousel"); // // } //
		 * extent.HeaderChildNode("Autoplay validation (PWA2-5147)");
		 * navigateToAnyScreenOnWeb("News"); boolean autoPlayed =
		 * verifyAutoPlay("News"); if (autoPlayed == true) {
		 * verifyElementPresent(PWANewsPage.objLive,
		 * "LIVE badge on Autoplaying carousel");
		 * verifyElementPresent(PWANewsPage.objVolume,
		 * "Volume Control on Autoplaying carousel"); JSClick(PWANewsPage.objLive,
		 * "LIVE badge on Autoplaying carousel"); waitTime(10000); if
		 * (checkElementDisplayed(PWAPlayerPage.objPlayerPause, "Player")) {
		 * logger.info("Navigated to Consumption Page, Expected behavior ");
		 * extent.extentLogger("Consumption Page",
		 * "Navigated to Consumption Page, Expected behavior "); } else {
		 * logger.info("Something went wrong is displayed on player");
		 * extent.extentLoggerFail("Consumption Page",
		 * "Something went wrong is displayed on player"); }
		 *
		 * }
		 */
	}

	public void PWA2SubscriptionFlowValidation(String userType) throws Exception {
		/*
		 * extent.
		 * HeaderChildNode("TV9 marathi Consumption page is redirected to a new tab validation (PWA2-5154)"
		 * );
		 *
		 * waitTime(5000); verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn,
		 * "Language Button"); JSClick(PWAHamburgerMenuPage.objLanguageBtn,
		 * "Language Button"); waitTime(2000);
		 * waitForElementAndClick(PWAHamburgerMenuPage.objContentLanguageBtn, 2,
		 * "Content Languages"); waitTime(2000); //
		 * click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply //
		 * buttton"); waitTime(3000);
		 * verifyElementPresentAndClick(PWAHomePage.objMarathiWEB, "Marathi option");
		 *
		 * waitTime(3000);
		 * click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup,
		 * "Apply buttton"); waitTime(3000); navigateToAnyScreenOnWeb("News");
		 *
		 * // waitForElementAndClick(PWAHamburgerMenuPage.objtv9marathi, 20 ,"TV9 //
		 * Marathi"); verifyElementPresent(PWAHamburgerMenuPage.objtv9marathi,
		 * "TV9 Marathi"); // click(PWAHamburgerMenuPage.objtv9marathi, "TV9 Marathi");
		 * JSClick(PWANewsPage.objLive, "LIVE badge on Autoplaying carousel");
		 * ArrayList<String> tabs1 = new
		 * ArrayList<String>(getWebDriver().getWindowHandles()); int aaa =
		 * (tabs1.size()); System.out.println("No. of tabs: " + aaa);
		 * logger.info("No of tabs opened: " + aaa); extent.extentLogger("",
		 * "No of tabs opened: " + aaa);
		 *
		 * if (aaa >= 2) { logger.error("TV9 marathi content is played on new tab ");
		 * extent.extentLoggerFail("", "TV9 marathi content is played on new tab "); }
		 * else { logger.
		 * info("TV9 marathi content should be played on the same tab  , expected behavior"
		 * ); extent.extentLoggerPass("",
		 * "TV9 marathi content should be played on the same tab ,  expected behavior");
		 * }
		 */
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode("Juspay iFrame validation (PWA2-5175)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			waitTime(2000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue button");
			waitTime(3000);

			PWAIframe();

			verifyElementPresentAndClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			waitTime(5000);
			waitTime(3000);
			if (checkElementDisplayed(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option")) {
				logger.info("Payment page is displayed, expectedbehaviour");
				extent.extentLoggerPass("", "Payment page is displayed ,  expectedbehaviour");

			} else {
				logger.error("Failed to displayed Payment page ");
				extent.extentLoggerFail("", "Failed to displayed Payment page ");
			}
			navigateHome();
//		extent.HeaderChildNode("Highest selected pack page validation (PWA2-5227)");
//verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
//		waitTime(2000);
//		if (verifyElementPresent(PWAHamburgerMenuPage.objallacesshighestpack, "Highest pack")) {
//			String i = getText(PWAHamburgerMenuPage.objallacesshighestpack);
//			System.out.println(i);
//			extent.extentLoggerPass("", "Highest pack is selected : " + i);
//
//		} else {
//			logger.error("Failed to select the Highest pack ");
//			extent.extentLoggerFail("", "Failed to select the Highest pack ");
//		}
//
//		waitTime(2000);
//		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

		}

		if (userType.equalsIgnoreCase("Subscribeduser")) {
			extent.HeaderChildNode("Transaction cards validation in my transaction page(PWA2-5177)");
			if (verifyElementExist(PWALandingPages.objWebProfileIcon, "Profile Icon")) {
				// verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile
				// Icon");
				click(PWALandingPages.objWebProfileIcon, "Profile Icon");

				// boolean myAccountPresent =
				// verifyElementExist(PWAHamburgerMenuPage.objWEBMyAccount, "My Account");
				// if (myAccountPresent == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyTransactions, "MyTransactions");
				Thread.sleep(3000);
				verifyElementPresent(PWAHamburgerMenuPage.objMyTransactionPage, "MyTransaction Page");
				waitTime(5000);

				if (verifyElementPresent(PWAHamburgerMenuPage.objtransationcard, "Transaction cards")) {
					logger.info(
							"All the purchased details should be displayed in the respective pages, expected behaviour");
					extent.extentLoggerPass("",
							"All the purchased details should be displayed in the respective pages, expected behaviour");

				} else {
					logger.error("Purchased details fails to display in my Transactions pages.");
					extent.extentLoggerFail("", "Purchased details fails to display in my Transactions pages.");
				}

				verifyElementPresent(PWAHamburgerMenuPage.objMySubscription, "My subscription");
				JSClick(PWAHamburgerMenuPage.objMySubscription, "My subscription");
				Thread.sleep(3000);
				verifyElementPresent(PWAHamburgerMenuPage.objMySubscriptionPage, "My subscription Page");
				Thread.sleep(5000);

				if (verifyElementPresent(PWAHamburgerMenuPage.objsubscriptioncard, "Subscription cards")) {
					logger.info(
							"All the purchased details should be displayed in the respective pages, expected behaviour");
					extent.extentLoggerPass("",
							"All the purchased details should be displayed in the respective pages, expected behaviour");

				} else {
					logger.error("Purchased details fails to display in my MySubscription pages.");
					extent.extentLoggerFail("", "Purchased details fails to display in my MySubscription pages. ");
				}

				// }

			}

		}
		navigateHome();
		extent.HeaderChildNode("Continuous Loading animator validation (PWA2-5242)");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);

		type(PWASearchPage.objSearchEditBox, "zee5 Kids ", "Search bar");
		waitTime(5000);

		verifyElementPresent(PWASearchPage.objfirstdata, "Searched result");
		click(PWASearchPage.objfirstdata, "Searched result");
		waitTime(15000);
		JSClick(PWAPlayerPage.pauseBtn, "Pause icon");
		waitTime(15000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay")) {
			logger.info("content should be play, expected behaviour");
			extent.extentLogger("", "content should be play , expected behaviour ");
		} else {
			logger.error("Continuous Loading animator is displayed");
			extent.extentLoggerFail(" ", "Continuous Loading animator is displayed");
		}
	}

	public void PWA2MetaDataNavigationValidation(String userType) throws Exception {
		/*
		 * if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
		 *
		 * extent.
		 * HeaderChildNode("Error message validation in account page  (PWA2-5240)");
		 *
		 * waitTime(2000);
		 * verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader,
		 * "Subscribe Button in the Header");
		 *
		 * waitTime(2000);
		 *
		 * verifyElementPresent(PWASubscriptionPages.objZEE5Subscription,
		 * "Zee5 Subscription Page Title"); waitTime(2000);
		 * verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn,
		 * "Continue button"); if (userType.equals("NonSubscribedUser")) {
		 * verifyElementPresent(PWAHamburgerMenuPage.objerrormessage, "Error message");
		 * String errormessage = getText(PWAHamburgerMenuPage.objerrormessage);
		 * System.out.println(errormessage);
		 * logger.info("The error message on the payment page : " + errormessage);
		 * extent.extentLogger("", "The error message on the payment page  : " +
		 * errormessage); if (errormessage.contentEquals("HDFC bank, ICICI,")) {
		 * logger.info("The correct error message is displayed , Expected behaviour");
		 * extent.extentLogger(" ",
		 * "The correct error message is displayed , Expected behaviour"); } else {
		 * logger.error("Incorrect error message is displayed ");
		 * extent.extentLoggerFail(" ", "Incorrect error message is displayed "); } } }
		 *
		 *
		 * if (userType.equals("Guest")) { type(PWALoginPage.objEmailField,
		 * "Zee5latest@gmail.com", "Email");
		 * click(PWASubscriptionPages.objProceedBtnInSubscriptionPage,
		 * "Proceed button"); waitTime(3000);
		 * checkElementDisplayed(PWASubscriptionPages.
		 * objPasswordPopupInSubscriptionPage, "Password field");
		 * type(PWASubscriptionPages.objPasswordField, "User@123", "Password");
		 * click(PWASubscriptionPages.objProceedButtonInPassword, "Proceed");
		 * waitTime(3000); verifyElementPresent(PWAHamburgerMenuPage.objerrormessage,
		 * "Error message"); String errormessage =
		 * getText(PWAHamburgerMenuPage.objerrormessage);
		 * System.out.println(errormessage);
		 * logger.info("The error message on the payment page : " + errormessage);
		 * extent.extentLogger("", "The error message on the payment page  : " +
		 * errormessage); if (errormessage.contentEquals("HDFC bank, ICICI,")) {
		 * logger.info("The correct error message is displayed , Expected behaviour");
		 * extent.extentLogger(" ",
		 * "The correct error message is displayed , Expected behaviour"); } else {
		 * logger.error("Incorrect error message is displayed ");
		 * extent.extentLoggerFail(" ", "Incorrect error message is displayed "); } }
		 *
		 * extent.HeaderChildNode(
		 * "Home Page validation when click on specific Promotional Banner on the Subscription Page (PWA2-5286)"
		 * ); Back(1);
		 * verifyElementPresentAndClick(PWAHamburgerMenuPage.objsubscriptionpageimg,
		 * "Promotional Banner "); if
		 * (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription,
		 * "Zee5 Subscription Page Title")) { logger.info("Not navigated to home page");
		 * extent.extentLogger("", "Not navigated to home page"); } else {
		 * logger.error("Navigated to home page"); extent.extentLoggerFail(" ",
		 * "Navigated to home page");
		 *
		 * }
		 *
		 * extent.
		 * HeaderChildNode("ZeePlex - Theatre comes to you banner below the  player  (PWA2-5283)"
		 * ); if (userType.equalsIgnoreCase("Guest")) {
		 * navigateToAnyScreenOnWeb("ZEEPLEX"); } if
		 * (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
		 * verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplextab,
		 * "Zeeplex tab"); }
		 * verifyElementPresent(PWAHamburgerMenuPage.objzeeplexcontent,
		 * "Zee plex content"); ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
		 * click(PWAHamburgerMenuPage.objTrailer, "Trailer"); waitTime(15000);
		 * verifyElementPresent(PWAHamburgerMenuPage.objzeeplexplayerbanner,
		 * "zeeplex logo below the player"); click(PWAHamburgerMenuPage.objrecocard,
		 * "Reco card"); if
		 * (checkElementDisplayed(PWAHamburgerMenuPage.objzeeplexplayerbanner,
		 * "zeeplex logo below the player")) { logger.info(
		 * "ZeePlex - Theatre Comes to you Below player Strip displayed for Few seconds on playing Premium or Club Content player."
		 * ); extent.extentLoggerFail(" ",
		 * "ZeePlex - Theatre Comes to you Below player Strip displayed for Few seconds on playing Premium or Club Content player."
		 * );
		 *
		 * } else { logger.info(
		 * "Theatre Comes to you Below player Strip should not be displayed for Premium or Club movie player, expected behaviour"
		 * ); extent.extentLoggerPass("",
		 * "Theatre Comes to you Below player Strip should not be displayed for Premium or Club movie player, expected behaviour"
		 * ); }
		 */
		extent.HeaderChildNode(
				"User is redirected to page not found when clicked on \"News/video/Movie/Show \"term in meta-data below the player (PWA2-5330)");
		navigateToAnyScreenOnWeb("News");
		waitTime(5000);
		scrollToTheElementWEB(PWALandingPages.objFirstAssetInTrayIndex("Trending News"));
		verifyElementPresent(PWALandingPages.objFirstAssetInTrayIndex("Trending News"), "content card");
		click(PWALandingPages.objFirstAssetInTrayIndex("Trending News"), "content card");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objmetadataofcontenttype, "metadata below the player");
		click(PWAHamburgerMenuPage.objmetadataofcontenttype, "metadata below the player");
		waitTime(3000);
		if (checkElementDisplayed(PWALandingPages.objFirstAssetInTrayIndex("Trending News"), "content card")) {
			logger.info(" Screen should navigate to a particular landing page , Expected behaviour");
			extent.extentLogger(" ", "Screen should navigate to a particular landing page , Expected behaviour");
		} else {
			logger.info("Screen is redirected to page not found. ");
			extent.extentLoggerFail(" ", "Screen is redirected to page not found. ");
		}

		click(PWAHomePage.objZeeLogo, "Zee logo");

		navigateToAnyScreenOnWeb("Movies");
		waitTime(5000);

		verifyElementPresent(PWAHamburgerMenuPage.objrecocard, "content card");
		click(PWAHamburgerMenuPage.objrecocard, "content card");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objmetadataofcontenttype, "metadata below the player");
		click(PWAHamburgerMenuPage.objmetadataofcontenttype, "metadata below the player");
		waitTime(3000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objrecocard, "content card")) {
			logger.info(" Screen should navigate to a particular landing page , Expected behaviour");
			extent.extentLogger(" ", "Screen should navigate to a particular landing page , Expected behaviour");
		} else {
			logger.info("Screen is redirected to page not found. ");
			extent.extentLoggerFail(" ", "Screen is redirected to page not found. ");
		}

		click(PWAHomePage.objZeeLogo, "Zee logo");

		navigateToAnyScreenOnWeb("TV Shows");
		waitTime(5000);

		waitForElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarousel, 10);
		checkElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card");
		mandatoryRegistrationPopUp(userType);
		click(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objmetadataforshows, "metadata below the player");
		click(PWAHamburgerMenuPage.objmetadataforshows, "metadata below the player");
		waitTime(3000);
		if (checkElementDisplayed(PWAZee5OriginalPage.objWEBMastheadCarousel, "Carousel Card")) {
			logger.info(" Screen should navigate to a particular landing page , Expected behaviour");
			extent.extentLogger(" ", "Screen should navigate to a particular landing page , Expected behaviour");
		} else {
			logger.info("Screen is redirected to page not found. ");
			extent.extentLoggerFail(" ", "Screen is redirected to page not found. ");
		}
		click(PWAHomePage.objZeeLogo, "Zee logo");

		extent.HeaderChildNode("continues loading validation for before tv content (PWA2-5206)");
		navigateToAnyScreenOnWeb("TV Shows");
		waitTime(5000);
		partialScroll();
		// scrollToTheElementWEB(PWAHomePage.objFirstContentCardOfTray("Before"));
		scrollToElement(PWAHomePage.objFirstContentCardOfTray("Before"));
		checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"), "Before TV");
		JSClick(PWAHomePage.objFirstContentCardOfTray("Before"), "Before TV");
		JSClick(PWAPlayerPage.pauseBtn, "Pause button");
		if (verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize window icon")) {
			logger.info("Before TV content is able to play ");
			extent.extentLoggerPass("", "Before TV content is able to play ");

		} else {
			logger.error("Failed to play before TV content  ");
			extent.extentLoggerFail("", "Failed to play before TV content ");

		}
		/*
		 * extent.
		 * HeaderChildNode("Auto playback of content continues loading validation (PWA2-5349)"
		 * ); navigateToAnyScreenOnWeb("News"); boolean autoPlayed1 =
		 * verifyAutoPlay("News"); if (autoPlayed1 == true) {
		 *
		 * if (verifyElementPresent(PWANewsPage.objLive,
		 * "LIVE badge on Autoplaying carousel")) { logger.
		 * info("Zee5 Kids Live Channel carousel should be autoplay back Normally , expected behavior "
		 * ); extent.extentLoggerPass("",
		 * "Zee5 Kids Live Channel carousel should be autoplay back Normally , expected behavior "
		 * );
		 *
		 * } else { logger.
		 * error("continues loading animator is displayed for Zee5 Kids Live Channel. "
		 * ); extent.extentLoggerFail("",
		 * "continues loading animator is displayed for Zee5 Kids Live Channel."); } //
		 * verifyElementPresent(PWANewsPage.objVolume, "Volume Control on Autoplaying //
		 * carousel");
		 *
		 * }
		 */
		if (userType.equals("NonSubscribeduser")) {

			extent.HeaderChildNode(
					"Parental Lock Popup validation player even after entered the pin for Before TV Episode (PWA2-5352)");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "ParentalControl");
			checkElementDisplayed(PWALoginPage.objPasswordField, "password field");
			String password = "";
			if (userType.equals("Non-Subscribed")) {
				password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
						.getParameter("NonsubscribedPassword");
			} else if (userType.equals("Subscribed")) {
				password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
						.getParameter("SubscribedPassword");
			}
			type(PWALoginPage.objPasswordField, password, "Password field");
			click(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
			waitTime(2000);
			checkElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page");
			checkElementDisplayed(PWAHamburgerMenuPage.objNoRestrictionSelected, "No restricted option selected");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objRestrictAll, "Restrict all option");
			verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1, "Set Lock Field");
			type(PWAHamburgerMenuPage.objParentalLockPin1, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin2, "2", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin3, "3", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin4, "4", "ParentalLockPin");
			waitTime(4000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Set Parental lock button");
			waitTime(2000);
			checkElementDisplayed(PWAHomePage.objZeeLogo, "zee logo");
			waitTime(3000);
			navigateToAnyScreenOnWeb("Shows");
			waitTime(3000);
			scrollToElement(PWAHomePage.objFirstContentCardOfTray("Before"));
			mandatoryRegistrationPopUp(userType);
			click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objParentalLockPopUpInPlayer, "Parent control Popup")) {
				type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
			}
			waitTime(5000);
			waitForPlayerAdToComplete("Video Player");
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Playback Overlay");
			if (checkElementDisplayed(PWAPlayerPage.playBtn, "Pause icon")) {
				logger.info(
						"Parental Lock Popup should not be displayed after entering the valid Pin.expected behaviour,");
				extent.extentLoggerPass("Playback",
						"Parental Lock Popup should not be displayed after entering the valid Pin.expected behaviour");
			} else {
				logger.error(" Parental Lock Popup displayed twice on the player even after entered the valid pin");
				extent.extentLoggerFail("Playback",
						" Parental Lock Popup displayed twice on the player even after entered the valid pin");
			}
			click(PWAHomePage.objZeeLogo, "zee logo");
			waitTime(5000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "ParentalControl");
			checkElementDisplayed(PWALoginPage.objPasswordField, "password field");
			type(PWALoginPage.objPasswordField, password, "Password field");
			waitTime(2000);
			click(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
			waitTime(2000);
			checkElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page");
			click(PWAHamburgerMenuPage.objParentalLockNoRestrictionOption, "No restriction option");
			checkElementDisplayed(PWAHamburgerMenuPage.objNoRestrictionSelected, "No restricted option selected");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Set Parental lock button");
			waitTime(2000);
			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
		}
	}

	public void PWA2SubscriptionAndFooterValidation(String userType) throws Exception {
		/*
		 * extent.
		 * HeaderChildNode("validating the Top5 most watched videos viewall btn functionality (PWA2-5528)"
		 * ); navigateToAnyScreenOnWeb("News"); waitTime(3000);
		 * scrollToTheElementWEB(PWAHomePage.
		 * objtrayname("Top 5 Most Watched News Videos")); waitTime(3000);
		 * click(PWAHamburgerMenuPage.objtop5watchednewa,
		 * "Top 5 Most Watched News Videos"); waitTime(2000); if
		 * (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
		 * logger.info("Navigated to View All Page , expected behaviour");
		 * extent.extentLoggerPass("View All",
		 * "Navigated to View All Page, expected behaviour"); } else {
		 * logger.error("\"404! Not found\" page is displayed ");
		 * extent.extentLoggerFail("", "\"404! Not found\" page is displayed "); }
		 */

		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode(
					"VISA img validation even after user removed the card numbers in Credit/DebitCard Payment option. (PWA2-5529)");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue button");
			waitTime(3000);

			if (userType.equals("Guest")) {
				accountinfopage();
			}
			PWAIframe();

			verifyElementPresentAndClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			waitTime(5000);
			verifyElementPresentAndClick(PWASubscriptionPages.objEnterCreditAndDebitCardDetails,
					"Enter Credit/Debit Card Details");
			checkElementDisplayed(PWASubscriptionPages.objEnterCreditAndDebitCardDetails, "Enter Card Number Field");
			type(PWASubscriptionPages.objEnterCreditAndDebitCardDetails, "4", "Enter Card Number Field");

			// type(PWASubscriptionPages.objCardNumber, "4", "card number");
			verifyElementPresent(PWAHamburgerMenuPage.objvisaimg, "Visa img");

			clearField(PWASubscriptionPages.objEnterCreditAndDebitCardDetails, "card number");

			if (checkElementDisplayed(PWAHamburgerMenuPage.objvisaimg, "Visa img")) {
				logger.info(
						" VISA card type should be removed once user cleared the card details  , Expected behaviour");
				extent.extentLogger(" ",
						" VISA card type should be removed once user cleared the card details , Expected behaviour");
			} else {
				logger.error("VISA card type is not removed once user cleared the card details ");
				extent.extentLoggerFail(" ", "VISA card type is not removed once user cleared the card details ");
			}
			navigateHome();
			if (userType.equals("Guest")) {
				logout();
			}
		}
		/*
		 * extent.
		 * HeaderChildNode("Error message validation in account page  (PWA2-5528)");
		 *
		 * waitTime(2000);
		 * verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader,
		 * "Subscribe Button in the Header");
		 *
		 * verifyElementPresentAndClick(PWAHamburgerMenuPage.
		 * objContinuebuttominsubscriptionpage, "Continue button"); waitTime(3000);
		 *
		 *
		 * waitTime(2000);
		 * //verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn,
		 * "Continue button"); if (userType.equals("NonSubscribedUser")) {
		 * checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription,
		 * "Zee5 Subscription Page Title");
		 * verifyElementPresent(PWAHamburgerMenuPage.objerrormessage, "Error message");
		 * String errormessage = getText(PWAHamburgerMenuPage.objerrormessage);
		 * System.out.println(errormessage);
		 * logger.info("The error message on the payment page : " + errormessage);
		 * extent.extentLogger("", "The error message on the payment page  : " +
		 * errormessage);
		 *
		 * if (errormessage.contentEquals(
		 * "This is an Auto-renewal (recurring) plan. Use any Credit Card or a Debit Card from HDFC bank, ICICI, Axis, Kotak, Citi, Canara, SCB, Deutsche, Corporation Bank. Don't have these Cards, click here"
		 * )) {
		 * logger.info("The correct error message is displayed , Expected behaviour");
		 * extent.extentLogger(" ",
		 * "The correct error message is displayed , Expected behaviour"); } else {
		 * logger.info("Incorrect error message is displayed ");
		 * extent.extentLoggerFail(" ", "Incorrect error message is displayed "); } } if
		 * (userType.equals("Guest")) { accountinfopage(); waitTime(3000);
		 * verifyElementPresent(PWAHamburgerMenuPage.objerrormessage, "Error message");
		 * String errormessage = getText(PWAHamburgerMenuPage.objerrormessage);
		 * System.out.println(errormessage);
		 * logger.info("The error message on the payment page : " + errormessage);
		 * extent.extentLogger("", "The error message on the payment page  : " +
		 * errormessage);
		 *
		 * if (errormessage.contentEquals(
		 * "This is an Auto-renewal (recurring) plan. Use any Credit Card or a Debit Card from HDFC bank, ICICI, Axis, Kotak, Citi, Canara, SCB, Deutsche, Corporation Bank. Don't have these Cards"
		 * )) {
		 * logger.info("The correct error message is displayed , Expected behaviour");
		 * extent.extentLogger(" ",
		 * "The correct error message is displayed , Expected behaviour"); } else {
		 * logger.info("Incorrect error message is displayed ");
		 * extent.extentLoggerFail(" ", "Incorrect error message is displayed "); }
		 * navigateHome(); if (userType.equals("Guest")) { logout(); } }
		 */
		extent.HeaderChildNode("Footer Display Language validatiuon (PWA2-4320)");
		Kannadalanguageselection();
		waitTime(3000);
		scrollToBottomOfPageWEB();
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer section ");

		// verifyElementPresent(PWAShowsPage.objWatchLatestCTA, "Watch Latest CTA
		// button");
		String clubtext = getText(PWAHamburgerMenuPage.objfooter);
		System.out.println(clubtext);
		if (clubtext.contains("ZEE5 Originals")) {
			extent.extentLoggerFail("IncorrectText", "InCorrect text displayed: " + clubtext);
			logger.info("InCorrect text displayed: " + clubtext);
		} else {
			extent.extentLogger("correctText", "correct text displayed: " + clubtext);
			logger.error("correct text displayed: " + clubtext);
		}

		waitTime(5000);
		EnglishLanguageselection();
		waitTime(5000);
	}

	public void PWA2OFFAirShowsValidation(String userType) throws Exception {
		extent.HeaderChildNode("Date validation for off air shows (PWA2-4403)");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Nashe ", "Search Field");
		waitTime(3000);
		click(PWAHamburgerMenuPage.objFirstsearchcard, "Search content");
		checkElementDisplayed(PWAHamburgerMenuPage.objcontentdate, "Content date");
		String b = getText(PWAHamburgerMenuPage.objcontentdate);
		System.out.println(b);
		logger.info("Off Air Show description displayed : " + b);
		extent.extentLogger("", "Off Air Show description displayed : " + b);

		if (b.toLowerCase().contains("jan") || b.toLowerCase().contains("feb") || b.toLowerCase().contains("mar")
				|| b.toLowerCase().contains("apr") || b.toLowerCase().contains("may") || b.toLowerCase().contains("jun")
				|| b.toLowerCase().contains("jul") || b.toLowerCase().contains("aug") || b.toLowerCase().contains("sep")
				|| b.toLowerCase().contains("oct") || b.toLowerCase().contains("nov")
				|| b.toLowerCase().contains("dec")) {
			logger.info("Date should not be displayed for off air shows");
			extent.extentLoggerFail("", "Date is displayed for off air shows");
		} else {
			logger.info("Date is not displayed for off air shows, expected behavior");
			extent.extentLogger(" ", "Date is not displayed for off air shows, expected behavior");
		}

		extent.HeaderChildNode("Play CTA validation on carousel (PWA2_4342)");
		navigateToAnyScreenOnWeb("Movies");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.Objnextarrowcarousel, "Next arrow ");
		waitTime(3000);

		verifyElementPresent(PWAKidsPage.objPlayButton, "Play text on Carousel card");

		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Display Language validatiuon (PWA2-4393)");
			Kannadalanguageselection();
			waitTime(3000);
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objcontinueinkannada, "continue Button ");
			waitTime(3000);

			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "luckyigscon0074@gmail.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objcontinueinkannada1, " ?????????? or Proceed button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "vasilucky@123", "Password field");
			waitTime(5000);
			JSClick(PWAHamburgerMenuPage.objcontinueinkannada1, "?????????? or Proceed button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");

			if (checkElementDisplayed(PWAHomePage.objHomeBarText("Home"), "Home tab")) {
				extent.extentLoggerPass("",
						"home page should be displayed based on the selected language of logged in user,expected behaviour");
				logger.info(
						"home page should be displayed based on the selected language of logged in user, expected behaviour");
			} else {
				/*
				 * extent.extentLoggerFail("",
				 * "The page is translated based on guest user display language.");
				 * logger.info("The page is translated based on guest user display language.");
				 * }
				 */
				extent.extentLoggerFail("", "The page is translated based on Nonsubscribeduser user display language.");
				logger.info("The page is translated based on Nonsubscribeduser user display language.");
			}
			EnglishLanguageselection();
			waitTime(5000);
			logout();
			waitTime(5000);
			EnglishLanguageselection();
			waitTime(5000);

		}
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Login text validation (PWA2-4354)");
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, "Dhoop Chhaon ", "Search Field");
			waitTime(3000);
			verifyElementPresent(PWASearchPage.objFirstSearch, "searched content");
			JSClick(PWASearchPage.objFirstSearch, "Search content");
			waitTime(5500);
			verifyElementPresent(PWAHamburgerMenuPage.objPlayBtn, "play button ");
			JSClick(PWAHamburgerMenuPage.objPlayBtn, "play button ");
			waitTime(5500);
			// verifyElementPresentAndClick(PWAHamburgerMenuPage.objPlayBtn, "Play Button");
			// JSClick(PWAHamburgerMenuPage.objPlayBtn, "play button ");
			waitForPlayerAdToComplete("Video Player");
			waitForElement(PWAHamburgerMenuPage.objlogintext, 30, "Login text");
			String bbb = getText(PWAHamburgerMenuPage.objlogintext);
			System.out.println(bbb);
			logger.info("Login text on player : " + bbb);
			extent.extentLogger("", "Login text on player  : " + bbb);
			if (bbb.contains("You must login to watch it for FREE")) {
				logger.info("You must login to watch it for FREE should display , expected behavior");
				extent.extentLoggerPass("", "You must login to watch it for FREE should display,  expected behavior");
			} else {
				logger.info("You must login to watch it for FREE is not displayed ");
				extent.extentLoggerFail(" ", "You must login to watch it for FREE is not displayed");
			}

		}
		waitTime(5000);
	}

	public void PWA2EduauraaPageValidation(String userType) throws Exception {

		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Continue Watching tray validatiuon (PWA2-4414)");
			navigateToAnyScreenOnWeb("Kids");
			if (checkElementDisplayed(PWAPremiumPage.objWEBMastheadCarousel, "Carousel")) {
				JSClick(PWAPremiumPage.objWEBMastheadCarousel, "Carousel");
				if (checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Subscribe Pop Up")) {

					verifyElementPresentAndClick(PWAPremiumPage.objClosePremiumPopup, "Premium PopUp Close icon");
				}
			}
			Back(1);
			navigateToAnyScreenOnWeb("Kids");
			if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue Watching tray") == false) {
				extent.extentLoggerPass("Verify Continue Watching tray",
						"Continue watching tray is not displayed in Kids page,expected behaviour");
				logger.info("Continue watching tray is not displayed in Kids page , expected behaviour");
			} else {
				softAssert.assertAll();
				extent.extentLoggerFail("Verify Continue Watching tray",
						"Continue watching tray is displaying in Kids page");
				logger.info("Continue watching tray is displaying in Kids page");
			}
		}

		if (userType.equalsIgnoreCase("Subscribeduser")) {

			waitTime(3000);
			extent.HeaderChildNode("carousel play button validatiuon (PWA2-4447)");
			Hindilanguageselection();
			waitTime(3000);
			navigateToAnyScreenOnWeb("???? ???");
			waitTime(5000);
			waitForElement(PWAPremiumPage.objHerocarouselPlayBtn("Kundali Bhagya"), 30, "Play button on carousel");
			verifyElementPresent(PWAPremiumPage.objHerocarouselPlayBtn("Kundali Bhagya"), "Play button on carousel");
			verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
			waitTime(2000);
			EnglishLanguageselection();
			waitTime(5000);

		}
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("Eduauraa SSO screen validation (PWA2-4198)");
			navigateToAnyScreenOnWeb("Kids");
			waitTime(3000);
			waitForElement(PWAPremiumPage.objHerocarouselPlayBtn("Eduauraa"), 20, "Play button on Eduauraa carousel");
			JSClick(PWAPremiumPage.objHerocarouselPlayBtn("Eduauraa"), "Play button");
			waitTime(3500);
			verifyElementPresentAndClick(PWAHomePage.objFirstItemLearnWithEduauraaTray,
					"First card under Learn with Eduauraa tray");
			verifyElementPresentAndClick(PWALandingPages.objViewAllPageFirstContent, "First card in View All page");
			checkElementDisplayed(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer ");
			JSClick(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer ");
			checkElementDisplayed(PWAPlayerPage.objContinue, "Continue offer ");
			JSClick(PWAPlayerPage.objContinue, "Continue offer ");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objEduauraaSignupPage, "EduauraaSign Up page")) {
				logger.error("User is navigated to EduauraaSign Up page");
				extent.extentLoggerFail("", "User is navigated to EduauraaSign Up page");
			} else {
				logger.info("User should be directly navigated to the Eduauraa landing page ,  expected behavior.");
				extent.extentLoggerPass("",
						"User should be directly navigated to the Eduauraa landing page,  expected behavior");
			}
			Back(1);
			waitTime(3500);
		}

		extent.HeaderChildNode("Eduauraa Consumption page is redirected to a new tab validation (PWA2-4137)");
		navigateToAnyScreenOnWeb("Kids");
		waitTime(5000);
		waitForElement(PWAPremiumPage.objHerocarouselPlayBtn("Eduauraa"), 20, "Play button on Eduauraa carousel");
		JSClick(PWAPremiumPage.objHerocarouselPlayBtn("Eduauraa"), "Play button on Eduauraa carousel");
		waitTime(3500);

		ArrayList<String> tabs = new ArrayList<String>(getWebDriver().getWindowHandles());
		int a = (tabs.size());
		System.out.println("No. of tabs: " + a);
		logger.info("No of tabs opened: " + a);
		extent.extentLogger("", "No of tabs opened: " + a);

		if (a >= 2) {
			logger.error("Eduauraa content is played on new tab ");
			extent.extentLoggerFail("", "Eduauraa content is played on new tab ");
		} else {
			logger.info("Eduauraa content should be played on the same tab  , expected behavior");
			extent.extentLoggerPass("", "Eduauraa content should be played on the same tab ,  expected behavior");
		}
		waitTime(5000);
	}

	public void PWA2KidsPageValidation(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {

			extent.HeaderChildNode("claim offer validation based on display language (PWA2-4162)");
			navigateToAnyScreenOnWeb("Kids");
			waitTime(3500);
			// verifyElementPresentAndClick(PWAHomePage.objFirstItemLearnWithEduauraaTray,"First
			// card under Learn with Eduauraa tray"); //waitTime(3500);
			waitForElement(PWAPremiumPage.objHerocarouselPlayBtn("Eduauraa"), 20, "Play button on Eduauraa carousel");
			JSClick(PWAPremiumPage.objHerocarouselPlayBtn("Eduauraa"), "Play button on Eduauraa carousel");
			waitTime(3500);
			verifyElementPresentAndClick(PWALandingPages.objViewAllPageFirstContent, "First card in View All page");
			waitTime(3500);
			Kannadalanguageselection();
			waitTime(3500);
			if (userType.equals("NonSubscribedUser")) {
				checkElementDisplayed(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Claim offer  ");

				String claimoffer = getText(PWAPlayerPage.objclaimofferBelowPlayerScreen);
				System.out.println(claimoffer);
				if (claimoffer.contentEquals("Claim Offer")) {
					extent.extentLoggerFail("IncorrectText", "InCorrect text is displayed:" + claimoffer);
					logger.info("InCorrect text is displayed: " + claimoffer);
				} else {
					extent.extentLoggerPass("correctText", "correct text is displayed: " + claimoffer);
					logger.error("correct text is  displayed: " + claimoffer);
				}

			}
			if (userType.equals("SubscribedUser")) {
				checkElementDisplayed(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer");

				String Gotoeduauraa = getText(PWAPlayerPage.objGoToEduauraa);
				System.out.println(Gotoeduauraa);
				if (Gotoeduauraa.contentEquals("Go to Eduauraa")) {
					extent.extentLoggerFail("IncorrectText", "InCorrect text is displayed:" + Gotoeduauraa);
					logger.info("InCorrect text is displayed: " + Gotoeduauraa);
				} else {
					extent.extentLoggerPass("correctText", "correct text is displayed: " + Gotoeduauraa);
					logger.error("correct text is  displayed: " + Gotoeduauraa);
				}

			}
			EnglishLanguageselection();
			waitTime(3500);
		}

		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode(
					" PWA2-4161 : Page navigated to search landing screen when user click browser back /device back button from the Zee5 subscription page");
			waitTime(4500);
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);

			type(PWASearchPage.objSearchEditBox, "Learn about the stethoscope", "Search bar");
			waitTime(5000);
			verifyElementPresentAndClick(PWASearchPage.objfirstdata, "Searched result");
			waitTime(10000);
			checkElementDisplayed(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Claim offer ");
			JSClick(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Claim offer ");
			if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title")) {
				logger.info("Navigated to select pack Page");
				extent.extentLogger(" Zee5 Subscription Page", "Navigated to select pack Page");
			} else {
				logger.info("Not navigated to select pack Page");
				extent.extentLogger("Zee5 Subscription Page", "Not navigated to select pack Page");
			}
			Back(1);
			waitTime(10000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("Navigated back to the Eduauraa consumption page.");
				extent.extentLoggerPass("Consumption Page", "Navigated back to the Eduauraa consumption page.");
			} else {
				logger.info("Not navigated back to the Eduauraa consumption page.");
				extent.extentLoggerFail("Consumption Page", "Not navigated back to the Eduauraa consumption page.");// update
																													// }

			}
		}

		extent.HeaderChildNode("claim offer validation through search content (PWA2-4158)");
		waitTime(3000);
		navigateToAnyScreenOnWeb("Kids");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Calculating Compound Interest ", "Search Field");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objfirstdata, "Searched result");
		waitTime(4000);
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {

			if (verifyElementPresent(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Claim offer")) {
				logger.info("\"Claim offer\" CTA Strip should be displayed below the player , expected behaviour");
				extent.extentLoggerPass(" ",
						"\"Claim offer\" CTA Strip should be displayed below the player , expected behaviour");
			} else {
				logger.info("\"Claim offer\"  CTA Strip fails to display below the player");
				extent.extentLoggerFail("Zee5 Subscription Page",
						"\"Claim offer\"  CTA Strip fails to display below the player");
			}
		}
		if (userType.equalsIgnoreCase("Subscribeduser")) {
			if (checkElementDisplayed(PWAPlayerPage.objGoToEduauraa, "Go To Eduauraa offer")) {
				logger.info("\"Go to Eduauraa\" CTA Strip should be displayed below the player , expected behaviour");
				extent.extentLoggerPass(" ",
						"\"Go to Eduauraa\" CTA Strip should be displayed below the player , expected behaviour");
			} else {
				logger.info("\"Go to Eduauraa\"  CTA Strip fails to display below the player");
				extent.extentLoggerFail("", "\"Go to Eduauraa\"  CTA Strip fails to display below the player");
			}
		}

	}

	public void PWAVerifyBuyPlanCTADisplayedForSubscribedUserWithParentalPin(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"PWA2-7925 : \"Buy Plan \"CTA is displayed on consumption page for the subscribed users with parental pin logged in via guest checkout");
			logger.info(
					"PWA2-7925 : \"Buy Plan \"CTA is displayed on consumption page for the subscribed users with parental pin logged in via guest checkout");
			navigateToHome();
			mandatoryRegistrationPopUp(userType);
			waitTime(3000);
//		loginWithUserEmail("25off@mailnesia.com", "123456");
			// Actions action = new Actions(getWebDriver());
			// action.moveToElement(findElement(PWAHomePage.objMastheadCarouselCurrentContent)).build().perform();

			for (int i = 0; i < 5; i++) {
				try {

					JavascriptExecutor executor = (JavascriptExecutor) getWebDriver();
					executor.executeScript("arguments[0].click();",
							findElement(PWAHomePage.objPlayIconWithGetPremiumCTAOnCarousel1));
					logger.info("Clicked on " + "Play Icon with Get Premium CTA On MastHead Carousel");
					extent.extentLogger("clickedElement",
							"Clicked on " + "Play Icon with Get Premium CTA On MastHead Carousel");
					break;
				} catch (Exception e) {
					Thread.sleep(1000);
					logger.error(e);
				}
			}
			waitTime(2000);
			waitForElementAndClick(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen, 30,
					"Get Premium Link below the Player");
			waitTime(2000);
			if (verifyElementExist(PWAHamburgerMenuPage.objBrowseAllPacksPageTitleText,
					"Browse All Packs Page Title Text")) {
				logger.info("Navigated to plan selection page");
				extent.extentLoggerPass("", "Navigated to plan selection page");
				JSClick(PWASubscriptionPages.objContinueBtnWithINR, "Continue Button");
				waitTime(2000);
				if (verifyElementExist(PWASubscriptionPages.objAccountInfoTitle1, "Account Info Title")) {
					logger.info("Navigated to Account Info page");
					extent.extentLoggerPass("", "Navigated to Account Info page");
					type(PWASubscriptionPages.objEmailIDTextField, "25off@mailnesia.com", "Email ID Text Field");
					waitTime(10000);
					JSClick(PWASubscriptionPages.objContinueBtnForEmailOrMobile, "Continue Button");
					waitTime(4000);
					// Password Popup
					verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password Popup Title");
					waitTime(3000);
					checkElementDisplayed(PWASubscriptionPages.objProceedBtnDisabled, "Disabled Proceed Button");
					waitTime(3000);
					verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
					waitTime(3000);
					type(PWASubscriptionPages.objPasswordFieldHidden, "123456", "Password Field");
					waitTime(8000);
					verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnEnabled, "Enabled Proceed Button");
					waitTime(3000);
					verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field");
					type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin2player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin3player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin4player, "1", "ParentalLockPin");
					waitTime(4000);
					if (verifyIsElementDisplayed(PWAPlayerPage.objGetPremiumCTABelowPlayerScreen,
							"Get Premium CTA below the Player")) {
						logger.error("Get Premium CTA below the Player is visible");
						extent.extentLoggerFail("checkElementPresent", "Get Premium CTA below the Player is displayed");
					} else {
						logger.info("Get Premium CTA below the Player is not displayed");
						extent.extentLoggerPass("checkElementPresent",
								"Get Premium CTA below the Player is not displayed");
					}

					if (verifyIsElementDisplayed(PWAPlayerPage.objSubscribeNowLink,
							"In-Line Get Premium CTA On Player Screen")) {
						logger.error("In-Line Get Premium CTA On Player Screen is visible");
						extent.extentLoggerFail("checkElementPresent",
								"In-Line Get Premium CTA On Player Screen is displayed");
					} else {
						logger.info("In-Line Get Premium CTA On Player Screen is not displayed");
						extent.extentLoggerPass("checkElementPresent",
								"In-Line Get Premium CTA On Player Screen is not displayed");
					}

					logout();
					waitTime(3000);
					navigateHome();
					waitTime(3000);
				}
			}
		}
	}

	public void removeMinutelyContent() {
		extent.HeaderChildNode("PWA2-9201 : Removing 'Activate Now' CTA upon successful authentication");
		String pageSource = getWebDriver().getPageSource();
		if (!pageSource.contains("class=\"minute_apv\"")) {
			logger.info("Minutley content are not present");
			extent.extentLoggerPass("Minutley", "Minutley content are not present");
		} else {
			logger.error("Minutley content are present");
			extent.extentLoggerFail("Minutley", "Minutley content are present");
		}
	}

	public void GrievanceRedressalOption() throws Exception {
		extent.HeaderChildNode("PWA2-9172 : Add Grievance Redressal option in the hamburger menu");
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		waitTime(3000);

		String zeeTab = getWebDriver().getWindowHandle();
		Set<String> handlesBeforeClick = getWebDriver().getWindowHandles();

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objGrievanceRedressal, "Grievance Redressal option");
		waitTime(5000);
		Set<String> handlesAfterClick = getWebDriver().getWindowHandles();
		if (handlesAfterClick.size() > handlesBeforeClick.size()) {
			String externalTab = "";
			boolean extOpened = false;
			for (String winHandle : getWebDriver().getWindowHandles()) {
				System.out.println(winHandle);
				if (!winHandle.equals(zeeTab)) {
					externalTab = winHandle;
					getWebDriver().switchTo().window(externalTab);
					logger.info("Switched to External Tab");
					extent.extentLogger("", "Switched to External Tab");
					String extUrl = getWebDriver().getCurrentUrl();
					logger.info("Navigated to the External Tab : " + extUrl);
					extent.extentLogger("External tab", "Navigated to the External Tab : " + extUrl);

					if (verifyElementExist(PWAHamburgerMenuPage.objGrievanceRedressalPage,
							"Grievance Redressal option")) {
						logger.info("Redirected to Grievance Redressal Page");
						extent.extentLoggerPass("Grievance Redressal", "Redirected to Grievance Redressal Page");
					} else {
						logger.error("Not Redirected to Grievance Redressal Page");
						extent.extentLoggerFail("Grievance Redressal", "Not Redirected to Grievance Redressal Page");
					}
					screencapture();
					getWebDriver().close();
					logger.info("Closed External Tab");
					extent.extentLogger("playerScreen", "Closed External Tab");
					getWebDriver().switchTo().window(zeeTab);
					logger.info("Switched to Zee Tab");
					extent.extentLogger("", "Switched to Zee Tab");
					extOpened = true;
					break;
				}
			}
			if (extOpened == false) {
				logger.error("Failed to open External Tab");
				extent.extentLoggerFail("External tab", "Failed to open External Tab");
			}
		}
	}

	public void HamburgerMenuOverlay(String usertype) throws Exception {
		extent.HeaderChildNode("Hamberger menu overlay display");
		navigateHome();
		waitTime(2500);
		JSClick(PWAHamburgerMenuPage.objHamburgerBtn, "HambergerMenu");
		waitTime(1500);
		if (!checkElementDisplayed(PWAHamburgerMenuPage.objHamburgerMenuOpened, " Hamberger Overlay")) {

			logger.error("Hamberger Overlay verification failed");
			extent.extentLoggerFail("Hamberger Overlay", "Hamberger Overlay verification failed");
		}
		navigateHome();
		waitTime(3000);
	}

	public void PWA2KalturaPlayerversion(String userType) throws Exception {
		extent.HeaderChildNode(" Kaltura Player Version 7.34.1 change (PWA2-8694)");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, "Kumkum Bhagya - July 17, 2021", "Search Result");
		waitTime(4000);
		// waitForElement(PWASearchPage.objSearchedResult(contentTitle), 10, "Search
		// Result");

		// verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle),
		// "Search Result");
		click(PWASearchPage.objspecificSearch, "Searched content");
		mandatoryRegistrationPopUp(userType);
		waitTime(5000);
		String Player = getWebDriver().findElement(By.xpath("//script[@id='kalturaScript']")).getAttribute("src");
		String currenturl = getWebDriver().getCurrentUrl();
		System.out.println(currenturl);

		if (Player.contains("https://cdnapisec.kaltura.com/p/2455421/embedPlaykitJs/uiconf_id/47921083")) {
			logger.info("Kaltura Player version changed , expected behaviour");
			extent.extentLoggerPass(" ", "Kaltura Player version changed , expected behaviour");
		} else {
			logger.info("Kaltura player version has not changed");
			extent.extentLoggerFail(" ", "Kaltura player version has not changed");
		}
	}

	public void UIOfSymbolShouldBeDisplayedAsExpected(String userType) throws Exception {

		extent.HeaderChildNode(
				"[Mweb] Radio (\"?\") CTA fails to display properly in subscription page for Tamil display language (PWA2-8700)");

		Tamillanguageselection();

		checkElementDisplayed(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
		click(PWALandingPages.obj_Pwa_Subcription_teaser_btn, "Subcription button");
		waitTime(5000);
		if (verifyElementPresent(PWASubscriptionPages.objUISymbol, "UI Symbol")) {
			logger.info(" UI of \\\"?\\\" symbol should be displayed as expected.");
			extent.extentLogger("", " UI of \\\"?\\\" symbol should be displayed as expected.");
		} else {
			logger.error("The UI of \"?\" symbol fails to display properly that is beside 4th benefit text.");
			extent.extentLoggerFail("",
					"The UI of \"?\" symbol fails to display properly that is beside 4th benefit text.");
		}
	}

	public void pwaHaveagiftcardinputvalidation1(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode("\"Have a Gift Card?\" is accepting 'e' alphabet validation (PWA2-7756)");

			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objContinuebuttominsubscriptionpage, "Continue Button");
			waitTime(5000);

			if (userType.equals("Guest")) {
				accountinfopage();
			}
//		PWAIframe();
//		verifyElementPresent(PWAHamburgerMenuPage.objnetbanking, "Net banking");
			scrollToBottomOfPageWEB();
			verifyElementPresent(PWAHamburgerMenuPage.objhaveagiftcard, "Have a gift card");
			JSClick(PWAHamburgerMenuPage.objhaveagiftcard, "Have a gift card");
			verifyElementPresent(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "Enter card details");
			JSClick(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "Enter card details");
			type(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "1abcdefghijklmnopqrstuvwxyz1",
					"card number");
			String cardnumber = findElement(PWAHamburgerMenuPage.objgiftcardnumber).getAttribute("value");
			System.out.println(cardnumber);
			extent.extentLogger("", " cardnumber  : " + cardnumber);
			if (cardnumber.toLowerCase().contains("a") || cardnumber.toLowerCase().contains("b")
					|| cardnumber.toLowerCase().contains("c") || cardnumber.toLowerCase().contains("d")
					|| cardnumber.toLowerCase().contains("e") || cardnumber.toLowerCase().contains("f")
					|| cardnumber.toLowerCase().contains("g") || cardnumber.toLowerCase().contains("h")
					|| cardnumber.toLowerCase().contains("i") || cardnumber.toLowerCase().contains("j")
					|| cardnumber.toLowerCase().contains("k") || cardnumber.toLowerCase().contains("l")
					|| cardnumber.toLowerCase().contains("v") || cardnumber.toLowerCase().contains("q")
					|| cardnumber.toLowerCase().contains("m") || cardnumber.toLowerCase().contains("w")
					|| cardnumber.toLowerCase().contains("r") || cardnumber.toLowerCase().contains("n")
					|| cardnumber.toLowerCase().contains("x") || cardnumber.toLowerCase().contains("s")
					|| cardnumber.toLowerCase().contains("o") || cardnumber.toLowerCase().contains("y")
					|| cardnumber.toLowerCase().contains("t") || cardnumber.toLowerCase().contains("p")
					|| cardnumber.toLowerCase().contains("z") || cardnumber.toLowerCase().contains("u")) {
				logger.info("The alphabet is accepted and the place holder is overlapped.");
				extent.extentLoggerFail("", "The alphabet is accepted and the place holder is overlapped.");
			} else {
				logger.info("\"Have a Gift Card?\" field shouldn't accept alphabets., expected behavior");
				extent.extentLoggerPass(" ",
						"\"Have a Gift Card?\" field shouldn't accept alphabets., expected behavior");
			}
			verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");

			if (userType.equals("Guest")) {
				logout();
			}
		}
	}

	public void LiveTvRailContenttypeCheck(String usertype) throws Exception {
		extent.HeaderChildNode("PWA2-4832 : Live channel rail recommended on News Landing Page");
		navigateToAnyScreenOnWeb("News");
		waitTime(2500);
		String TrayContentAPIchannelTitle = null;
		String TrayContentUIchannelTitle = null;

		ArrayList<String> ChannelContentAPIList = new ArrayList<String>();
		ArrayList<String> ChannelContentUIList = new ArrayList<String>();

		Response recoresp = ResponseInstance.getRecoDataFromTab(usertype, "news", "en,hi,kn");
		String TrayTitle = recoresp.jsonPath().getString("buckets[0].title");
		System.out.println("The Tray tile is :" + TrayTitle);

		for (int j = 0; j < 5; j++) {
			if (recoresp.jsonPath().getString("buckets[" + j + "].content_type").equals("channel")) {
				String ContentType = recoresp.jsonPath().getString("buckets[" + j + "].title");
				logger.info("the title of the bucket that contains content type (channel) is: " + ContentType);
				extent.extentLogger("",
						"the title of the bucket that contains content type (channel) is: " + ContentType);
				break;
			}
		}
		for (int i = 0; i < 4; i++) {
			TrayContentAPIchannelTitle = recoresp.jsonPath().getString("buckets[0].items[" + i + "].title");

			logger.info("The content channel title from API No " + i + " " + TrayContentAPIchannelTitle);
			extent.extentLogger("", "The  content channel title from API No " + i + " " + TrayContentAPIchannelTitle);
			ChannelContentAPIList.add(TrayContentAPIchannelTitle);
		}
		waitTime(3500);
		for (int i = 0; i < 4; i++) {
			TrayContentUIchannelTitle = getWebDriver().findElement(By.xpath(
					"(((//div[@class='slick-slider latestEpisodeTray slick-initialized']/child::*/child::*)[1])/child::*//h3[@class='cardTitle cardTitleMultiline'])["
							+ (i + 1) + "]"))
					.getText();
			logger.info("The content channel title in UI No " + (i + 1) + " " + TrayContentUIchannelTitle);
			extent.extentLogger("",
					"The content channel title from in UI No " + (i + 1) + " " + TrayContentUIchannelTitle);
			ChannelContentUIList.add(TrayContentUIchannelTitle);
		}

		logger.info(ChannelContentAPIList);
		extent.extentLogger("", "The List from API is: " + ChannelContentAPIList);
		logger.info(ChannelContentUIList);
		extent.extentLogger("", "The List from UI is: " + ChannelContentUIList);

		if (ChannelContentAPIList.equals(ChannelContentUIList) == true) {
			logger.info("The contents fetched from API and Contents present in UI are same");
			extent.extentLoggerPass("", "The contents fetched from API and Contents present in UI are same");
		} else {
			logger.error("The contents fetched from API and Contents present in UI are not same");
			extent.extentLoggerFail("", "The contents fetched from API and Contents present in UI are not same");
		}

	}

	public void VerifyComboOfferPagePlexMovies(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify whether Combo offer is not applicable for other plex Movies if not configured for combo offer ");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objrentmovie, "Only Movie Rent Now")) {
			click(PWAHamburgerMenuPage.objrentmovie, "Rent Now");
			waitTime(3000);
			if (verifyElementDisplayed(PWASubscriptionPages.objZEE5SubscriptionPage)) {
				logger.info(
						"Combo offer should not be applicable for other plex Movies if not configured for combo offer, expected behaviour");
				extent.extentLoggerPass(" ",
						"Combo offer should not be applicable for other plex Movies if not configured for combo offer , expected behaviour");
			} else {
				logger.info("combo offer page is  displayed ");
				extent.extentLoggerFail(" ", "combo offer page is displayed ");
			}
		}
	}

	public void VerifyComboOfferForMovies(String userType, String tabname) throws Exception {
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribesUser")) {
			extent.HeaderChildNode("Verify whether Combo offer is applicable for Movies  if configurable ");
			waitTime(2500);
			navigateToAnyScreenOnWeb(tabname);
			waitTime(2500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objrentmovie, "Only Movie Rent Now")) {
				click(PWAHamburgerMenuPage.objrentmovie, "Rent Now");
				waitTime(3000);
				if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")) {
					logger.info("Combo offer is applicable for Movies configured is displayed , expected behaviour");
					extent.extentLoggerPass(" ",
							"Combo offer is applicable for Movies configured is displayed  , expected behaviour");
				} else {
					logger.info("combo offer page is not displayed ");
					extent.extentLoggerFail(" ", "combo offer page is not displayed ");
				}
			}
		}
	}

	public void VerifyComboOfferThroughSearchEntry(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribesUser")) {
			navigateHome();
			extent.HeaderChildNode("Verify if the combo pack is applicable from Search entry point  ");
			click(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2500);
			type(PWASearchPage.objSearchEditBox, "Demo Moon Live", "Search Field");
			waitTime(2500);
			JSClick(PWASearchPage.objFirstSearch, "supermoon");
			waitTime(5000);
			if (checkElementDisplayed(PWAComboOfferPage.objRentNowBelowPlayer, " Rent Now below player")) {
				click(PWAComboOfferPage.objRentNowBelowPlayer, " Rent Now below player");
				waitTime(5000);
				if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")) {
					logger.info("combo offer page is displayed  , expected behaviour");
					extent.extentLoggerPass(" ", "combo offer page is displayed   , expected behaviour");
				} else {
					logger.info("combo offer page is not displayed ");
					extent.extentLoggerFail(" ", "combo offer page is not displayed ");
				}
			}
		}
	}

	public void VerifyEntireTextOnComboOfferPage(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribesUser")) {
			extent.HeaderChildNode(
					"Verify that entire text on the Combo Offer Page including CTA text is configurable");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objrentnowinlandingpage, "Rent Now")) {
				JSClick(PWAHamburgerMenuPage.objrentnowinlandingpage, "Rent Now");
				waitTime(3500);
				verifyComboScreen1();
			}
		}
	}

	public void verifyComboScreen1() throws Exception {
		HeaderChildNode("Validating Text and CTA's in combo offer screen");
		scrollDownWEB();
//		verifyElementPresent(PWAHamburgerMenuPage.objApply, "Beneficiary Text");
		verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail");
		verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail");

		// compareText(PWAComboOfferPage.objRentalValidateTxt, "Rental validity 21
		// Days");
		// compareText(PWAComboOfferPage.objWatchTimevalidateTxt, "Watch Time validity 4
		// hours");
		compareText(PWAComboOfferPage.obj4000blockusterTxt, "2800+ Blockbuster Movies");
		compareText(PWAComboOfferPage.objzee5OriginalTxt, "150+ Web Series");
		compareText(PWAComboOfferPage.objWatchshowsTxt, "Watch Before TV");
		compareText(PWAComboOfferPage.objWatchAdTxt, "Live TV, Ad-Free entertainment");
		String SaveAmount = getText(PWAComboOfferPage.objDiscount).replace("Save ₹", "");
		compareText(PWAComboOfferPage.objDiscount, "Save ₹" + SaveAmount);
		compareText(PWAComboOfferPage.objTotalDiscount, "Save ₹" + SaveAmount);

		scrollDownWEB();
		scrollDownWEB();
		if (userType.equals("Guest") || userType.equals("SubscribedUser")) {
			verifyElementPresent(PWAComboOfferPage.objBuyComboBtn, "Buy Combo Button");
		} else if (userType.equals("SubscribedUser")) {
			verifyElementPresent(PWAComboOfferPage.objUpgradeBtn, "Upgrade Button");
		}

		if (verifyElementDisplayed(PWAComboOfferPage.objOnlyRentMovieCheckBox)) {
			verifyElementPresent(PWAComboOfferPage.objRentMovieBtn, "Rent Movie Button");
		}
	}

	public void VerifyKnowMoreCTA(String userType, String tabname) throws Exception {
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribesUser")) {
			navigateHome();
			extent.HeaderChildNode(
					"Verify that user is redirected to Super moon Combo offer page on clicking Know More CTA displayed on Combo offer nudge on consumption page below player");
			navigateToAnyScreenOnWeb(tabname);
			waitTime(2500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(2500);
			verifyElementPresent(PWAComboOfferPage.objComboOfferWidget, "Know More CTA below the player");
			JSClick(PWAComboOfferPage.objComboOfferWidget, "Know More CTA below the player");
			waitTime(2500);
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
		}
	}

	public void VerifySupermoonLogoPremiumIconsPrice(String userType, String tabname) throws Exception {
		navigateHome();
		extent.HeaderChildNode(
				"Verify that Supermoon logo and Premium icons are displayed along with Price and Know More CTA");
		navigateToAnyScreenOnWeb(tabname);
		waitTime(2500);
//		ScrollToTheElementWEB(PWAHomePage.objPlaybackMovieTitle("Demo Moon Live"));
//		JSClick(PWAHomePage.objPlaybackMovieTitle("supermoon"), "supermoon");
		waitTime(2500);
		verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
		click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
		verifyElementPresent(PWAComboOfferPage.objPremiumCard, " Premium icon ");
		verifyElementPresent(PWAComboOfferPage.objKnowMore, "Know More CTA ");
		verifyElementPresent(PWAComboOfferPage.objTitle, "Supermoon Logo");
	}

	public void userIsAbleToSeeTheComboOfferWidgetBelowPlayerOnPlexConsumptionPageforSupermooon(String userType)
			throws Exception {
		extent.HeaderChildNode(
				"Verify that user is able to see the combo offer widget below player on plex consumption page");
//		logger.info("Verify that user is able to see the combo offer widget below player on plex consumption page");
//
		navigateToAnyScreenOnWeb("ZEEPLEX");
		verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
		click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
		verifyElementPresent(PWAComboOfferPage.objComboOfferWidget, "Combo Offer Widget");
	}

	public void textOnComboOffernudgeIsConfigurable(String userType, String tabname) throws Exception {
		navigateHome();
		extent.HeaderChildNode("Verify that all the text on combo-offer nudge is configurable");
		navigateToAnyScreenOnWeb(tabname);
		waitTime(2500);
		verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
		click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
		waitTime(2500);
		verifyElementPresent(PWAComboOfferPage.objPremiumCard, " Premium icon ");
		verifyElementPresent(PWAComboOfferPage.objKnowMore, "Know More CTA ");
		verifyElementPresent(PWAComboOfferPage.objTitle, "Supermoon Logo");
		verifyElementPresent(PWAComboOfferPage.objBuySupermoonComboat499, "Buy Supermoon Combo at 499 ");
	}

	public void blocbusterMoviesAndLiveEventsAtHome(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify that user is able to see message  if trailer is available then post trailer \"Blockbuster movies and live events at home\" and CTA's - Rent Now are available");
		if (userType.equalsIgnoreCase("Guest")) {
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
		}
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
		}
		ScrollToTheElementWEB(PWAComboOfferPage.objTrailerOfFirstMovie);
		JSClick(PWAComboOfferPage.objTrailerOfFirstMovie, "Trailer Supermoon");
		waitTime(6500);

//		if (verifyElementPresent(PWAComboOfferPage.objBlockbusterText, "Blockbuster movies and live events at home")) {
//			logger.info(
//					"Blockbuster movies and live events at home\"Text in zee plex landing page, expected behaviour");
//			extent.extentLoggerPass(" ",
//					"ZEEPLEX brings Blockbuster Movies in the comfort of your home, expected behaviour");
//		} else {
//			logger.info("Blockbuster movies and live events at home\"Text fails to display.");
//			extent.extentLoggerFail(" ", " Blockbuster movies and live events at home\"Text fails to display. ");
//		}

		if (verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player")) {
			logger.info("Rent Now CTA below the player");
			extent.extentLoggerPass(" ", "Rent Now CTA below the player, expected behaviour");
		} else {
			logger.info("Rent Now CTA below the player in not Present");
			extent.extentLoggerFail(" ", "Rent Now CTA below the player in not Present");
		}
		click(PWAHomePage.objZeeLogo, "Zee logo");
		waitTime(2500);
	}

	public void comboOfferPageAfterClickinOnRentNow(String userType, String tabname) throws Exception {
		extent.HeaderChildNode("Verify that Combo Offer page is displayed on clicking Rent Now CTA on player");
		navigateToAnyScreenOnWeb(tabname);
		waitTime(3500);
		ScrollToTheElementWEB(PWAComboOfferPage.objTrailerOfFirstMovie);
		JSClick(PWAComboOfferPage.objTrailerOfFirstMovie, "Trailer Supermoon");
		waitTime(6500);
		verifyElementPresentAndClick(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA below the player");
		waitTime(3000);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
		} else {
			if (verifyElementPresent(PWAComboOfferPage.objRentContentBtn, "Rent content Button")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
		}
		click(PWAHomePage.objZeeLogo, "Zee logo");
		waitTime(2500);
	}

	public void LoginButtonBelowRentNow(String userType, String tabname) throws Exception {
		extent.HeaderChildNode(
				"Verify that Login option is displayed for guest user on player below Rent Now CTA on Player screen");
		if (userType.equals("Guest")) {
			navigateToAnyScreenOnWeb(tabname);
			waitTime(3500);
			ScrollToTheElementWEB(PWAHomePage.objPlaybackMovieTitle("supermoon"));
			JSClick(PWAHomePage.objPlaybackMovieTitle("supermoon"), "supermoon");
			waitTime(3500);

			if (verifyElementPresent(PWAComboOfferPage.objLoginButtonPlaybackOnConsumptionPage,
					"Login button below the Rent Now CTA")) {
				logger.info("Login button below the Rent Now CTA, expected behaviour");
				extent.extentLoggerPass(" ", "Login button below the Rent Now CTA  , expected behaviour");
			} else {
				logger.info("Login button below the Rent Now CTA is not displayed ");
				extent.extentLoggerFail(" ", "Login button below the Rent Now CTA is not displayed ");
			}

		}
	}

	public void LoginButtonRentNowCTALoginCTAafterTrailer(String userType, String tabname) throws Exception {
		extent.HeaderChildNode(
				"Verify that user is able to see the Rent Now CTA and Login CTA on player post trailer consumption on consumption page");
		if (userType.equals("Guest")) {
			navigateToAnyScreenOnWeb(tabname);
			waitTime(3500);
			ScrollToTheElementWEB(PWAHomePage.objPlaybackMovieTitle("supermoon"));
			JSClick(PWAHomePage.objPlaybackMovieTitle("supermoon"), "supermoon");
			waitTime(5500);
			if (verifyElementPresent(PWAComboOfferPage.objLoginButtonPlaybackOnConsumptionPage,
					"Login button below the Rent Now CTA")) {
				logger.info("Login button below the Rent Now CTA, expected behaviour");
				extent.extentLoggerPass(" ", "Login button below the Rent Now CTA  , expected behaviour");
			} else {
				logger.info("Login button below the Rent Now CTA is not displayed ");
				extent.extentLoggerFail(" ", "Login button below the Rent Now CTA  is not displayed");
			}

			if (verifyElementPresent(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
					"the Rent Now CTA on player")) {
				logger.info("the Rent Now CTA on player, expected behaviour");
				extent.extentLoggerPass(" ", "the Rent Now CTA on player  , expected behaviour");
			} else {
				logger.info("the Rent Now CTA on player is not displayed ");
				extent.extentLoggerFail(" ", "the Rent Now CTA on player is not displayed ");
			}
		}
	}

	public void RentnowCTAonPlayer(String userType, String tabname) throws Exception {
		extent.HeaderChildNode("Verify that user is able to see the Rent Now CTA below player on  consumption page");
		navigateToAnyScreenOnWeb(tabname);
		waitTime(3500);
		ScrollToTheElementWEB(PWAHomePage.objPlaybackMovieTitle("supermoon"));
		JSClick(PWAHomePage.objPlaybackMovieTitle("supermoon"), "supermoon");
		waitTime(3500);
		if (verifyElementPresent(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
				"Rent Now CTA below the player")) {
			logger.info("the Rent Now CTA on player, expected behaviour");
			extent.extentLoggerPass(" ", "the Rent Now CTA on player  , expected behaviour");
		} else {
			logger.info("the Rent Now CTA on player is not displayed ");
			extent.extentLoggerFail(" ", "the Rent Now CTA on player is not displayed ");
		}
	}

	public void textDisplayedBelowBanner(String userType, String tabname) throws Exception {
		extent.HeaderChildNode("Verify if the text is displayed below the banner");
		navigateToAnyScreenOnWeb(tabname);
		ScrollToTheElementWEB(PWAHomePage.objPlaybackMovieTitle("supermoon"));
		JSClick(PWAHomePage.objPlaybackMovieTitle("supermoon"), "supermoon");
		waitTime(3500);
		if (verifyElementPresent(PWAComboOfferPage.objPayLessWatchMoreHeader,
				" Pay less, Watch more! below the Supermoon banner")) {
			logger.info("Pay less, Watch more! below the Supermoon banner, expected behaviour");
			extent.extentLoggerPass(" ", "Pay less, Watch more! below the Supermoon banner  , expected behaviour");
		} else {
			logger.info("Pay less, Watch more! below the Supermoon banner is not displayed ");
			extent.extentLoggerFail(" ", "Pay less, Watch more! below the Supermoon banner is not displayed ");
		}

	}

	public void verifyinformationisdisplayingonComboScreen(String userType, String tabname) throws Exception {
		HeaderChildNode("Verify information is displaying on combo page");
		navigateToAnyScreenOnWeb(tabname);
		waitTime(3500);
		ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
		JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
		waitTime(3500);

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			compareText(PWAComboOfferPage.objSupermoonPlanTxt, "Premium");
			verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium plan 499 with cut off 999");
			compareText(PWAComboOfferPage.objLiveEventTicket, "Online Live Concert");
			compareText(PWAComboOfferPage.objExclusiveVideos, "Exclusive Videos");

			compareText(PWAComboOfferPage.obj4000blockusterTxt, "2800+ Blockbuster Movies");
			compareText(PWAComboOfferPage.objzee5OriginalTxt, "150+ Web Series");
			compareText(PWAComboOfferPage.objWatchshowsTxt, "Watch Before TV");
			compareText(PWAComboOfferPage.objWatchAdTxt, "Live TV, Ad-Free entertainment");
		} else {
			compareText(PWAComboOfferPage.objLiveEventTicket, "Online Live Concert");
			compareText(PWAComboOfferPage.objExclusiveVideos, "Exclusive Videos");
			compareText(PWAComboOfferPage.objOnlyEventPass, "Only Event Pass");
			compareText(PWAComboOfferPage.objSupermoonEventPass, "Supermoon Event Pass");
		}
		click(PWAHomePage.objZeeLogo, "Zee logo");
		waitTime(2500);
	}

	public void comboOfferSaveAmount(String userType, String tabname) throws Exception {

		HeaderChildNode(
				"Verify if the user can see the Supermoon combo offer price with amount to be paid and save amount");
		navigateToAnyScreenOnWeb(tabname);
		waitTime(3500);
		ScrollToTheElementWEB(PWAHomePage.objPlaybackMovieTitle("supermoon"));
		JSClick(PWAHomePage.objPlaybackMovieTitle("supermoon"), "supermoon");
		waitTime(3500);

		verifyElementPresentAndClick(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
				"Rent Now CTA below the player");
		waitTime(3000);
		String SaveAmount = getText(PWAComboOfferPage.objDiscount).replace("Save ₹", "");
		compareText(PWAComboOfferPage.objDiscount, "Save ₹" + SaveAmount);
		compareText(PWAComboOfferPage.objTotalDiscount, "Save ₹" + SaveAmount);

	}

	public void OtherPlanOnlyRentContentForINR249(String userType, String tabname) throws Exception {
		HeaderChildNode("Verify if the user can see the other plan Only Rent Content for INR 249 with information");
		navigateToAnyScreenOnWeb(tabname);
		waitTime(3500);
		ScrollToTheElementWEB(PWAHomePage.objPlaybackMovieTitle("supermoon"));
		JSClick(PWAHomePage.objPlaybackMovieTitle("supermoon"), "supermoon");
		waitTime(3500);

		verifyElementPresentAndClick(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
				"Rent Now CTA below the player");
		waitTime(3000);
		verifyElementPresent(PWAComboOfferPage.objOnlyRentMovie, "Only Rent Content");
		verifyElementPresent(PWAComboOfferPage.objpackprice249, "Only Rent Content with INR 249");
		compareText(PWAComboOfferPage.objSupermoonPlanTxtinOnlyRent, "Supermoon Plan");

		compareText(PWAComboOfferPage.objLiveEventTicket, "Live Event Ticket");
		compareText(PWAComboOfferPage.objExclusiveVideos, "Exclusive Videos");

	}

	public void SupermoonComboPackDefaultSelect(String userType, String tabname) throws Exception {
		HeaderChildNode("Verify if the Supermoon combo pack is selected by default when user land on the combo page");
		navigateToAnyScreenOnWeb(tabname);
		waitTime(3500);
		ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
		JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
		waitTime(3500);

		if (verifyElementPresent(PWAComboOfferPage.objSelectedCheckbox, "Supermoon combo pack selected")) {
			logger.info("Supermoon combo pack is selected by default when user land on the combo page");
			extent.extentLoggerPass("", "Supermoon combo pack is selected by default when user land on the combo page");
		} else {
			logger.info("Supermoon combo pack is not selected by default when user land on the combo page");
			extent.extentLoggerFail("",
					"Supermoon combo pack is not selected by default when user land on the combo page");
		}
		click(PWAHomePage.objZeeLogo, "Zee logo");
		waitTime(2500);
	}

	public void supermoonPrivacyPolicyAndTermsAndConditions(String userType, String tabname) throws Exception {
		HeaderChildNode(
				"Verify if the user can see disclaimer as 'By proceeding you agree to our Terms of service and Privacy policy' above the Buy CTA");
		click(PWAHomePage.objZeeLogo, "Zee logo");
		waitTime(2500);
		navigateToAnyScreenOnWeb(tabname);
		waitTime(3500);
		ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
		JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
		waitTime(3500);
		compareText(PWAComboOfferPage.objTermsOfService, "Terms of Services");
		compareText(PWAComboOfferPage.objPrivacyPolicy, "Privacy Policy");
		click(PWAHomePage.objZeeLogo, "Zee logo");
		waitTime(2500);
	}

	public void BuyorRentorUpgrade(String userType, String tabname) throws Exception {
		HeaderChildNode("Verify if the user can see Buy or Rent CTA or Upgrade sticky in the bottom of the page");
		navigateToAnyScreenOnWeb(tabname);
		waitTime(3500);
		ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
		JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
		waitTime(3500);

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			if (verifyElementPresent(PWAComboOfferPage.objBuySupermoonComboBtn, "Buy Premium Button")) {
				logger.info("user can see Buy Supermoon Combo CTA in the bottom of the page");
				extent.extentLoggerPass("", "user can see Buy Supermoon Combo CTA in the bottom of the page");
			} else {
				logger.info("user cannot see Buy Supermoon Combo CTA in the bottom of the page");
				extent.extentLoggerFail("", "user cannot see Buy Supermoon Combo CTA in the bottom of the page");
			}

		} else if (userType.equals("SubscribedUser")) {
			if (verifyElementPresent(PWAComboOfferPage.objRentContentBtn, "Rent content Button")) {
				logger.info("user can see Rent content CTA in the bottom of the page");
				extent.extentLoggerPass("", "user can see Rent content CTA in the bottom of the page");
			} else {
				logger.info("user cannot see Rent content CTA in the bottom of the page");
				extent.extentLoggerFail("", "user cannot see Rent content CTA in the bottom of the page");
			}

		}
		click(PWAHomePage.objZeeLogo, "Zee logo");
		waitTime(2500);
	}

	public void TextChangeAsDisplayLanguage(String userType, String tabname) throws Exception {
		HeaderChildNode("Verify that text on Combo offer Page is displayed properly as per selected display language");
		navigateToAnyScreenOnWeb(tabname);
		waitTime(3500);
		Kannadalanguageselection();
		waitTime(3500);
		ScrollToTheElementWEB(PWAComboOfferPage.objOtherLangRentNowCTA);
		JSClick(PWAComboOfferPage.objOtherLangRentNowCTA, "SuperMoon Rent Now");
		waitTime(3500);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			String supermoon = getText(PWAComboOfferPage.objSupermoonPlanTxt);
			System.out.println(supermoon);
			extent.extentLogger("", "Supermoon" + supermoon);

			if (!supermoon.contains("Supermoon combo")) {
				logger.info("Supermoon combo is displayed based on display language,expected behaviour");
				extent.extentLoggerPass("",
						"Supermoon combo is displayed based on display language,expected behaviour");
			} else {
				logger.error("Supermoon combo is not displayed based on display language,expected behaviour");
				extent.extentLoggerFail("",
						"Supermoon combo is not displayed based on display language,expected behaviour");
			}
			String buySupermoonCombobtn = getText(PWAComboOfferPage.objOtherLangBuysupermoonComboCTA);
			System.out.println(buySupermoonCombobtn);
			if (!buySupermoonCombobtn.contains("Buy Supermoon combo")) {
				logger.info("Buy Supermoon combo button is displayed based on display language,expected behaviour");
				extent.extentLoggerPass("",
						"Buy Supermoon combo button is displayed based on display language,expected behaviour");
			} else {
				logger.error("Buy Supermoon combo is not displayed based on display language,expected behaviour");
				extent.extentLoggerFail("",
						"Buy Supermoon combo is not displayed based on display language,expected behaviour");
			}

			String onlyrentmovie = getText(PWAComboOfferPage.objOnlyRentMovie);
			System.out.println(onlyrentmovie);
			if (!onlyrentmovie.contains("Only Rent Content")) {
				logger.info("Only Rent Content Text is displayed based on display language,expected behaviour");
				extent.extentLoggerPass("",
						"Only Rent Content Text is displayed based on display language,expected behaviour");
			} else {
				logger.error("Only Rent Content Text is not displayed based on display language,expected behaviour");
				extent.extentLoggerFail("",
						"Only Rent Content Text is not displayed based on display language,expected behaviour");
			}

			String SupermoonPlantxtinOnlyrent = getText(PWAComboOfferPage.objSupermoonPlanTxtinOnlyRent);
			System.out.println(SupermoonPlantxtinOnlyrent);
			if (!SupermoonPlantxtinOnlyrent.contains("Supermoon Plan")) {
				logger.info("Supermoon PlanText is displayed based on display language,expected behaviour");
				extent.extentLoggerPass("",
						"Supermoon Plan Text is displayed based on display language,expected behaviour");
			} else {
				logger.error("Supermoon Plan Text is not displayed based on display language,expected behaviour");
				extent.extentLoggerFail("",
						"Supermoon Plan Text is not displayed based on display language,expected behaviour");
			}

			String LiveEventTicket = getText(PWAComboOfferPage.objLiveEventTicket);
			System.out.println(LiveEventTicket);
			if (!LiveEventTicket.contains("Online Live Concert")) {
				logger.info("Online Live Concert Text is displayed based on display language,expected behaviour");
				extent.extentLoggerPass("",
						"Online Live Concert Text is displayed based on display language,expected behaviour");
			} else {
				logger.error("Online Live Concert Text is not displayed based on display language,expected behaviour");
				extent.extentLoggerFail("",
						"Online Live Concert Text is not displayed based on display language,expected behaviour");
			}

			String ExclusiveVideos = getText(PWAComboOfferPage.objExclusiveVideos);
			System.out.println(ExclusiveVideos);
			if (!ExclusiveVideos.contains("Exclusive Videos")) {
				logger.info("Exclusive Videos Text is displayed based on display language,expected behaviour");
				extent.extentLoggerPass("",
						"Exclusive Videos Text is displayed based on display language,expected behaviour");
			} else {
				logger.error("Exclusive Videos Text is not displayed based on display language,expected behaviour");
				extent.extentLoggerFail("",
						"Exclusive Videos Text is not displayed based on display language,expected behaviour");
			}

			String blockbustermovies = getText(PWAComboOfferPage.obj4000blockusterTxt);
			System.out.println(blockbustermovies);
			if (!blockbustermovies.contains("2800 + blockbuster movies")) {
				logger.info("2800 + blockbuster movies Text is displayed based on display language,expected behaviour");
				extent.extentLoggerPass("",
						"2800 + blockbuster movies Text is displayed based on display language,expected behaviour");
			} else {
				logger.error(
						"2800 + blockbuster movies Text is not displayed based on display language,expected behaviour");
				extent.extentLoggerFail("",
						"2800 + blockbuster movies Text is not displayed based on display language,expected behaviour");
			}

			String webSeries = getText(PWAComboOfferPage.objzee5OriginalTxt);
			System.out.println(webSeries);
			if (!webSeries.contains("150 + Web Series")) {
				logger.info("2800 + blockbuster movies Text is displayed based on display language,expected behaviour");
				extent.extentLoggerPass("",
						"2800 + blockbuster movies Text is displayed based on display language,expected behaviour");
			} else {
				logger.error(
						"2800 + blockbuster movies Text is not displayed based on display language,expected behaviour");
				extent.extentLoggerFail("",
						"2800 + blockbuster movies Text is not displayed based on display language,expected behaviour");
			}

			String watchshows = getText(PWAComboOfferPage.objWatchshowsTxt);
			System.out.println(watchshows);
			if (!watchshows.contains("Watch shows before TV")) {
				logger.info("Watch shows before TV Text is displayed based on display language,expected behaviour");
				extent.extentLoggerPass("",
						"Watch shows before TV Text is displayed based on display language,expected behaviour");
			} else {
				logger.error(
						"Watch shows before TV Text is not displayed based on display language,expected behaviour");
				extent.extentLoggerFail("",
						"Watch shows before TVText is not displayed based on display language,expected behaviour");
			}

			String watchadtxt = getText(PWAComboOfferPage.objWatchAdTxt);
			System.out.println(watchadtxt);
			if (!watchadtxt.contains("Watch Ad Free")) {
				logger.info("Watch Ad Free Text is displayed based on display language,expected behaviour");
				extent.extentLoggerPass("",
						"Watch shows before TV Text is displayed based on display language,expected behaviour");
			} else {
				logger.error("Watch Ad Free Text is not displayed based on display language,expected behaviour");
				extent.extentLoggerFail("",
						"Watch Ad Free Text is not displayed based on display language,expected behaviour");
			}
		} else {

			String LiveEventTicket = getText(PWAComboOfferPage.objLiveEventTicket);
			System.out.println(LiveEventTicket);
			if (!LiveEventTicket.contains("Online Live Concert")) {
				logger.info("Online Live Concert Text is displayed based on display language,expected behaviour");
				extent.extentLoggerPass("",
						"Online Live Concert Text is displayed based on display language,expected behaviour");
			} else {
				logger.error("Online Live Concert Text is not displayed based on display language,expected behaviour");
				extent.extentLoggerFail("",
						"Online Live Concert Text is not displayed based on display language,expected behaviour");
			}

			String ExclusiveVideos = getText(PWAComboOfferPage.objExclusiveVideos);
			System.out.println(ExclusiveVideos);
			if (!ExclusiveVideos.contains("Exclusive Videos")) {
				logger.info("Exclusive Videos Text is displayed based on display language,expected behaviour");
				extent.extentLoggerPass("",
						"Exclusive Videos Text is displayed based on display language,expected behaviour");
			} else {
				logger.error("Exclusive Videos Text is not displayed based on display language,expected behaviour");
				extent.extentLoggerFail("",
						"Exclusive Videos Text is not displayed based on display language,expected behaviour");
			}
			String SupermoonEventPass = getText(PWAComboOfferPage.objSupermoonEventPass);
			System.out.println(SupermoonEventPass);
			if (!SupermoonEventPass.contains("Supermoon Event Pass")) {
				logger.info("Online Live Concert Text is displayed based on display language,expected behaviour");
				extent.extentLoggerPass("",
						"Online Live Concert Text is displayed based on display language,expected behaviour");
			} else {
				logger.error("Online Live Concert Text is not displayed based on display language,expected behaviour");
				extent.extentLoggerFail("",
						"Online Live Concert Text is not displayed based on display language,expected behaviour");
			}

			String OnlyEventPass = getText(PWAComboOfferPage.objOnlyEventPass);
			System.out.println(OnlyEventPass);
			if (!OnlyEventPass.contains("Only Event Pass")) {
				logger.info("Only Event Pass Text is displayed based on display language,expected behaviour");
				extent.extentLoggerPass("",
						"Only Event Pass Text is displayed based on display language,expected behaviour");
			} else {
				logger.error("Only Event Pass Text is not displayed based on display language,expected behaviour");
				extent.extentLoggerFail("",
						"Only Event Pass Text is not displayed based on display language,expected behaviour");
			}
		}
		click(PWAHomePage.objZeeLogo, "Zee logo");
		waitTime(2500);
		EnglishLanguageselection();
	}

	public void ComboOfferScreenLessThan299RentNowCTA(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see combo offer page on clicking Rent Now CTA on Zeeplex landing page");

			waitForElementPresence(PWALoginPage.objWebLoginBtn, 15, "waited till Login");
			Loginto299Pack();
			waitForElementDisplayed(PWAHomePage.objTabName("ZEEPLEX"), 6);
			waitTime(2500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(4500);
			if (verifyElementPresent(PWAComboOfferPage.objTrailer, "Watch trailer")) {
				JSClick(PWAComboOfferPage.objTrailer, "Watch trailer");
				waitTime(6000);
			}
			if (verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA")) {
				JSClick(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now");
				waitTime(3000);
			}

			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);

		}
	}

	public void ComboOfferScreenLessThan299RentNowCTAOnPlayer(String userType) throws Exception {

		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(

					"Verify that user is getting Combo offer page on clicking Rent Now on Player on LiveTV consumption page");
			Loginto299Pack();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			if (verifyElementPresent(PWAComboOfferPage.objTrailer, "Watch trailer")) {
				JSClick(PWAComboOfferPage.objTrailer, "Watch trailer");
				waitTime(6000);
			}
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now CTA on player");

			JSClick(PWAComboOfferPage.objRentNowInPlayer, "Rent Now CTA on player");
			waitTime(3000);
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")) {
				logger.info("Combo offer is applicable for Movies configured is displayed , expected behaviour");
				extent.extentLoggerPass(" ",
						"Combo offer is applicable for Movies configured is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
			navigateHome();
			// logout();
		}
	}

	public void ComboOfferScreenLessThan299RentNowCTABelowPlayer(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is getting Combo offer page on clicking Rent Now below Player on LiveTV consumption page");
			// Loginto299Pack();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			if (verifyElementPresent(PWAComboOfferPage.objTrailer, "Watch trailer")) {
				JSClick(PWAComboOfferPage.objTrailer, "Watch trailer");
				waitTime(6000);
			}
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA on player");
			JSClick(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA on player");
			waitTime(5000);

			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")) {
				logger.info("Combo offer is applicable for Movies configured is displayed , expected behaviour");
				extent.extentLoggerPass(" ",
						"Combo offer is applicable for Movies configured is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
			navigateHome();
			// logout();
		}
	}

	public void ComboOfferScreenLessThan299RentAfterClickingOnKnowMore(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify that \"Combo Offer\" screen. is displayed on clicking Know More or clicking anywhere on nudge");
		Loginto299Pack();
		navigateToAnyScreenOnWeb("ZEEPLEX");
		waitTime(3000);
		if (verifyElementPresent(PWAComboOfferPage.objTrailer, "Watch trailer")) {
			JSClick(PWAComboOfferPage.objTrailer, "Watch trailer");
			waitTime(6000);
		}
		ScrollToTheElementWEB(PWAHomePage.objPlaybackMovieTitle("supermoon"));
		JSClick(PWAHomePage.objPlaybackMovieTitle("supermoon"), "supermoon");
		waitTime(3500);
		if (verifyElementPresent(PWAComboOfferPage.objComboOfferWidget, "Know More Widget")) {
			JSClick(PWAComboOfferPage.objComboOfferWidget, "Know More Widget");
			waitTime(3500);

			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
		}
	}

	public void comboOfferTitleAndRentContentCardTitle(String userType, String tabname) throws Exception {
		extent.HeaderChildNode(
				"Verify that user is able to See Supermoon Combo Offer card Title and Rent content card tile");
		Loginto299Pack();
		waitTime(3000);
		navigateToAnyScreenOnWeb(tabname);
		waitTime(3000);

		ScrollToTheElementWEB(PWAHomePage.objPlaybackMovieTitle("supermoon"));
		JSClick(PWAHomePage.objPlaybackMovieTitle("supermoon"), "supermoon");
		waitTime(3500);
		verifyElementDisplayed(PWAComboOfferPage.objRentNow);
		JSClick(PWAComboOfferPage.objRentNow, "Rent Now CTA");
		waitTime(3000);

		if (verifyElementPresent(PWAComboOfferPage.objsupermoonComboOffer, "Supermoon Combo offer Title")) {

			logger.info("Supermoon Combo offer Title is displayed , expected behaviour");
			extent.extentLoggerPass(" ", "Supermoon Combo offer Title is displayed , expected behaviour");
		} else {
			logger.info("Supermoon Combo offer Title is not displayed ");
			extent.extentLoggerFail(" ", "Supermoon Combo offer Titleis not displayed ");
		}

		if (verifyElementPresent(PWAComboOfferPage.objOnlyRentMovie, " Rent Content title")) {

			logger.info("Rent Content title is displayed , expected behaviour");
			extent.extentLoggerPass(" ", "Rent Content title is displayed , expected behaviour");
		} else {
			logger.info("Rent Content title is not displayed ");
			extent.extentLoggerFail(" ", "Rent Content title is not displayed ");
		}
	}

	public void supermoonCardAndStrikedPrice(String userType, String tabname) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user is able see Plan Card/ title,Supermoon thumbnail and Price");
			// Loginto299Pack();
			waitTime(3000);
			navigateToAnyScreenOnWeb(tabname);
			waitTime(3000);

			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage, "Rent Now CTA below the player");
			if (verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {

				logger.info("1 year Premium Thumbnail is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "1 year Premium Thumbnail is displayed , expected behaviour");
			} else {
				logger.info("1 year Premium Thumbnail is not displayed ");
				extent.extentLoggerFail(" ", "1 year Premium Thumbnail is not displayed ");
			}

			if (verifyElementPresent(PWAComboOfferPage.objSupermoonThumbnail, "Supermoon Thumbnail")) {

				logger.info("Supermoon Thumbnail is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "Supermoon Thumbnail is displayed , expected behaviour");
			} else {
				logger.info("Supermoon Thumbnail is not displayed ");
				extent.extentLoggerFail(" ", "Supermoon  Thumbnail is not displayed ");
			}
			waitTime(3000);
			String SaveAmount = getText(PWAComboOfferPage.objDiscount).replace("Save ₹", "");
			compareText(PWAComboOfferPage.objDiscount, "Save ₹" + SaveAmount);
			compareText(PWAComboOfferPage.objTotalDiscount, "Save ₹" + SaveAmount);
			navigateHome();
		}
	}

	public void comboOfferpageText(String userType, String tabname) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {

			HeaderChildNode(
					"Verify that user is able to  Beneficiary text in Combo offer card for 299 subscribed user");
			// Loginto299Pack();
			waitTime(3500);
			navigateToAnyScreenOnWeb(tabname);
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(3500);
			waitTime(3500);
			verifyElementPresentAndClick(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
					"Rent Now CTA below the player");
			waitTime(3000);

			verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail");
			verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium plan 499 with cut off 999");
			compareText(PWAComboOfferPage.objSupermoonPlanTxt, "Supermoon Plan");
			compareText(PWAComboOfferPage.objLiveEventTicket, "Live Event Ticket");
			compareText(PWAComboOfferPage.objExclusiveVideos, "Exclusive Videos");

			compareText(PWAComboOfferPage.obj4000blockusterTxt, "2800+ Blockbuster Movies");
			compareText(PWAComboOfferPage.objzee5OriginalTxt, "150+ Web Series");
			compareText(PWAComboOfferPage.objWatchshowsTxt, "Watch Before TV");
			compareText(PWAComboOfferPage.objWatchAdTxt, "Live TV, Ad-Free entertainment");

			waitTime(3000);
			String SaveAmount = getText(PWAComboOfferPage.objDiscount).replace("Save ₹", "");
			compareText(PWAComboOfferPage.objDiscount, "Save ₹" + SaveAmount);
			compareText(PWAComboOfferPage.objTotalDiscount, "Save ₹" + SaveAmount);

			verifyElementPresent(PWAComboOfferPage.objOnlyRentMovie, "Only Rent Content");
			verifyElementPresent(PWAComboOfferPage.objpackprice249, "Only Rent Content with INR 249");
			compareText(PWAComboOfferPage.objSupermoonPlanTxtinOnlyRent, "Supermoon Event Pass");

			compareText(PWAComboOfferPage.objLiveEventTicket, "Online Live Concert");
			compareText(PWAComboOfferPage.objExclusiveVideos, "Exclusive Videos");
			navigateHome();
		}
	}

	public void VerifyUpgragebuttonFor299user(String userType, String tabname) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			HeaderChildNode("Verify that on Selecting Super Combo  Rs 499 user will see Upgrade CTA");
			// Loginto299Pack();
			waitTime(3500);
			navigateToAnyScreenOnWeb(tabname);
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(3500);
			waitTime(3500);
			verifyElementPresentAndClick(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
					"Rent Now CTA below the player");
			waitTime(3000);

			if (verifyElementPresent(PWAComboOfferPage.objUpgradeBtn, "Upgrade CTA in combo offer page")) {
				logger.info("Upgrade CTA in combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "Upgrade CTA in combo offer page is displayed , expected behaviour");
			} else {
				logger.info("Upgrade CTA in combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "Upgrade CTA in combo offer page is not displayed ");
			}
			navigateHome();
		}
	}

	public void VerifyFor299userRentShow(String userType, String tabname) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			HeaderChildNode("Verify that user is able to see Rent Content cta on selecting only Rent content");
			// Loginto299Pack();
			waitTime(3500);
			navigateToAnyScreenOnWeb(tabname);
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");

			waitTime(3500);
			verifyElementPresentAndClick(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
					"Rent Now CTA below the player");
			waitTime(3000);
			verifyElementPresent(PWAComboOfferPage.objRentOnlyMovie, "249 check box");
			JSClick(PWAComboOfferPage.objRentOnlyMovie, "249 check box select");
			waitTime(3000);
			// JSClick(PWAComboOfferPage.objRentContent, "Rent content CTA in combo offer
			// page");

			waitTime(3000);
			if (verifyElementPresent(PWAComboOfferPage.objRentContent,
					"Rent Content CTA after clicking on Upgrade CTA")) {
				logger.info("Rent Content CTA  in combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "Rent Content CTA  in combo offer page is displayed , expected behaviour");
			} else {
				logger.info("Rent Content CTA  in combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "Rent Content CTA  in combo offer page is not displayed ");
			}
			navigateHome();
		}
	}

	public void VerifyFor299PaymentPage(String userType, String tabname) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			HeaderChildNode(
					"Verify that on clicking Upgrade user will redirect to payment mode screen and Differential amount will get calculated");
			// Loginto299Pack();
			waitTime(3500);
			navigateToAnyScreenOnWeb(tabname);
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");

			waitTime(3500);
			verifyElementPresentAndClick(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
					"Rent Now CTA below the player");

			waitTime(3000);
			JSClick(PWAComboOfferPage.objUpgradeBtn, "Upgrade CTA in combo offer page");

			waitTime(3000);
			// JSClick(PWAComboOfferPage.objRentContent, "Rent Content CTA after clicking on
			// Upgrade CTA");
			waitTime(3000);
			if (verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader,
					"Payment page after clicking on Rent Content CTA")) {
				logger.info(
						"Payment page after clicking on Rent Content CTA in combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ",
						"Payment page after clicking on Rent Content CTA in combo offer page is displayed , expected behaviour");
			} else {
				logger.info("Payment page after clicking on Rent Content CTA in combo offer page is not displayed ");
				extent.extentLoggerFail(" ",
						"Payment page after clicking on Rent Content CTA in combo offer page is not displayed ");
			}
			verifyElementPresent(PWAComboOfferPage.objDifferenceAmount, "Difference Amount");
			String a = getText(PWAComboOfferPage.objDifferenceAmount);

			if (a.equals("499")) {
				logger.info("Differential amount calculated and shown in Payment page is not displayed ");
				extent.extentLoggerFail(" ",
						"Differential amount calculated and shown in Payment page is not displayed ");
			} else {
				logger.info(
						"Differential amount calculated and shown in Payment page is displayed , expected behaviour");
				extent.extentLoggerPass(" ",
						"Differential amount calculated and shown in Payment page is displayed , expected behaviour");
			}
			navigateHome();
		}
	}

	public void VerifyFor299PaymentPageforOnlyRentMovie(String userType, String tabname) throws Exception {

		if (userType.equalsIgnoreCase("Guest")) {
			HeaderChildNode(

					"Verify that on selecting only rent movie User will redirect to Payment mode screen and Differential amount will not get calculated");
			// Loginto299Pack();
			waitTime(3500);
			navigateToAnyScreenOnWeb(tabname);
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(3500);
			verifyElementPresentAndClick(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
					"Rent Now CTA below the player");

			waitTime(3000);
			// JSClick(PWAComboOfferPage.objUpgradeBtn, "Upgrade CTA in combo offer page");
			waitTime(3000);
			verifyElementPresentAndClick(PWAComboOfferPage.objOnlyRentMovieCheckBox, "249 check box");
			JSClick(PWAComboOfferPage.objOnlyRentMovieCheckBox, "249 check box select");
			waitTime(3000);
			JSClick(PWAComboOfferPage.objRentContent, "Rent Content CTA after clicking on Upgrade CTA");
			waitTime(3000);
			if (verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader,
					"Payment page after clicking on Rent Content CTA")) {
				logger.info(
						"Payment page after clicking on Rent Content CTA in combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ",
						"Payment page after clicking on Rent Content CTA in combo offer page is displayed , expected behaviour");
			} else {
				logger.info("Payment page after clicking on Rent Content CTA in combo offer page is not displayed ");
				extent.extentLoggerFail(" ",
						"Payment page after clicking on Rent Content CTA in combo offer page is not displayed ");
			}
			verifyElementPresent(PWAComboOfferPage.objDifferenceAmount, "Difference Amount");
			String a = getText(PWAComboOfferPage.objDifferenceAmount);

			if (a.equals("499")) {
				logger.info("Differential amount calculated and shown in Payment page is not displayed ");
				extent.extentLoggerFail(" ",
						"Differential amount calculated and shown in Payment page is not displayed ");
			} else {
				logger.info(
						"Differential amount calculated and shown in Payment page is displayed , expected behaviour");
				extent.extentLoggerPass(" ",
						"Differential amount calculated and shown in Payment page is displayed , expected behaviour");
			}
			navigateHome();
			logout();
		}
	}

	public void supermoonCardAndStrikedPriceForRSVODUser(String userType, String tabname) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify that user is able see Plan Card/ title,Supermoon thumbnail and Price");

			LogintoRSVODPacklessthen499();
			waitTime(500);
			waitForElementDisplayed(PWAHomePage.objTabName(tabname), 3);
			waitTime(2500);
			navigateToAnyScreenOnWeb(tabname);
			waitTime(3000);

			ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
			waitTime(3500);

			if (verifyElementPresent(PWAComboOfferPage.objPremiumCard, "Premium Thumbnail")) {

				logger.info("1 year Premium Thumbnail is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "1 year Premium Thumbnail is displayed , expected behaviour");
			} else {
				logger.info("1 year Premium Thumbnail is not displayed ");
				extent.extentLoggerFail(" ", "1 year Premium Thumbnail is not displayed ");
			}

			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Supermoon Thumbnail")) {

				logger.info("Supermoon Thumbnail is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "Supermoon Thumbnail is displayed , expected behaviour");
			} else {
				logger.info("Supermoon Thumbnail is not displayed ");
				extent.extentLoggerFail(" ", "Supermoon  Thumbnail is not displayed ");
			}
			waitTime(3000);
			String DiscountSaveAmount = getText(PWAComboOfferPage.objDiscount).replace("Save ₹", "");
			logger.info(DiscountSaveAmount);
			compareText(PWAComboOfferPage.objDiscount, "Save ₹" + DiscountSaveAmount);
			String PayableAmount = getText(PWAComboOfferPage.objDifference).replace("₹", "");
			logger.info(PayableAmount);
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void LogintoRSVODPacklessthen499() throws Exception {
		extent.HeaderChildNode("Login as RSVOD User");
		String Username = getParameterFromXML("SubscribedUserName49");
		String Password = getParameterFromXML("SubscribedPassword49");

		verifyElementPresent(PWALoginPage.objWebLoginBtn, "Login button");
		JSClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objEmailField, "Email field");
		JSClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, Username, "Email Field");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objPasswordField, "Password Field");
		JSClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, Password, "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(5000);
	}

	public void justPayingDifferenceTxtAndActivePlanTxtRSVODUser(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"Verify that User is able to see pay difference and active plan Text details in Combo offer Screen-RSVOD User");

			waitTime(500);
			waitForElementDisplayed(PWAHomePage.objTabName("ZEEPLEX"), 3);
			waitTime(2500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);

			ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
			waitTime(3500);

			if (verifyElementPresent(PWAComboOfferPage.objUpgradeTextJustPayingDifference,
					"Upgrade To Combo Offer Popup Title")) {
				String UpgradeToComboOfferPopupTitle = getText(PWAComboOfferPage.objUpgradeTextJustPayingDifference);
				logger.info(UpgradeToComboOfferPopupTitle);
				extent.extentLoggerPass("", "The Text is displayed as: " + UpgradeToComboOfferPopupTitle);
			}
			waitTime(3000);
			String currentPlanDescriptionText = getText(PWAComboOfferPage.objYouCurrentlyOnTxt);
			if (verifyElementPresent(PWAComboOfferPage.objYouCurrentlyOnTxt, currentPlanDescriptionText)) {
				logger.info(currentPlanDescriptionText);
				extent.extentLoggerPass("", "The plan Text is displayed as: " + currentPlanDescriptionText);
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void LogintoRSVODPack() throws Exception {
		extent.HeaderChildNode("Login as RSVOD User");
		String Username = getParameterFromXML("RSVODUser499");
		String Password = getParameterFromXML("RSVODUserPassword499");

		verifyElementPresent(PWALoginPage.objWebLoginBtn, "Login button");
		JSClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objEmailField, "Email field");
		JSClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, Username, "Email Field");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objPasswordField, "Password Field");
		JSClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, Password, "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(5000);
	}

	public void comboOfferTitleAndRentContentCardTitleForRSVODUser(String userType, String tabname) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to See Supermoon Combo Offer card Title and Rent content card tile");

			waitTime(500);
			waitForElementDisplayed(PWAHomePage.objTabName("ZEEPLEX"), 3);
			waitTime(2500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);

			ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
			waitTime(3500);

			if (verifyElementPresent(PWAComboOfferPage.objSupermoonPlanTxt, "Supermoon Combo offer Title")) {

				logger.info("Supermoon Combo offer Title is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "Supermoon Combo offer Title is displayed , expected behaviour");
			} else {
				logger.info("Supermoon Combo offer Title is not displayed ");
				extent.extentLoggerFail(" ", "Supermoon Combo offer Titleis not displayed ");
			}

			if (verifyElementPresent(PWAComboOfferPage.objOnlyRentMovie, " Rent Content title")) {

				logger.info("Rent Content title is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "Rent Content title is displayed , expected behaviour");
			} else {
				logger.info("Rent Content title is not displayed ");
				extent.extentLoggerFail(" ", "Rent Content title is not displayed ");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void comboOfferpageTextForRSVODUser(String userType, String tabname) throws Exception {
		if (userType.equals("Guest")) {
			HeaderChildNode("Verify that user is able to  Beneficiary text in Combo offer card for RSVOD user");

			waitTime(500);
			waitForElementDisplayed(PWAHomePage.objTabName("ZEEPLEX"), 3);
			waitTime(2500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);

			ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
			waitTime(3500);

			verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail");
			verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail");
			compareText(PWAComboOfferPage.objSupermoonPlanTxt, "Premium");
			compareText(PWAComboOfferPage.objLiveEventTicket, "Online Live Concert");
			compareText(PWAComboOfferPage.objExclusiveVideos, "Exclusive Videos");

			compareText(PWAComboOfferPage.obj4000blockusterTxt, "2800+ Blockbuster Movies");
			compareText(PWAComboOfferPage.objzee5OriginalTxt, "150+ Web Series");
			compareText(PWAComboOfferPage.objWatchshowsTxt, "Watch Before TV");
			compareText(PWAComboOfferPage.objWatchAdTxt, "Live TV, Ad-Free entertainment");

			waitTime(3000);
			String DiscountSaveAmount = getText(PWAComboOfferPage.objDiscount).replace("Save ₹", "");
			logger.info(DiscountSaveAmount);
			compareText(PWAComboOfferPage.objDiscount, "Save ₹" + DiscountSaveAmount);
			String PayableAmount = getText(PWAComboOfferPage.objDifference).replace("₹", "");
			logger.info(PayableAmount);

			verifyElementPresent(PWAComboOfferPage.objOnlyRentMovie, "Only Rent Content");
			verifyElementPresent(PWAComboOfferPage.objpackprice249, "Only Rent Content with INR 249");
			compareText(PWAComboOfferPage.objSupermoonPlanTxtinOnlyRent, "Supermoon Event Pass");

			compareText(PWAComboOfferPage.objbottomLiveEventTicket, "Online Live Concert");
			compareText(PWAComboOfferPage.objbottomExclusiveVideos, "Exclusive Videos");
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}

	}

	public void VerifyRentShowRSVODUser(String userType, String tabname) throws Exception {
		if (userType.equals("Guest")) {
			HeaderChildNode(
					"Verify that user is able to see Rent Content cta on selecting only Rent content for RSVOD User");

			waitTime(500);
			waitForElementDisplayed(PWAHomePage.objTabName("ZEEPLEX"), 3);
			waitTime(2500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);

			ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objRentOnlyMovieCheckboxPrice, "199 check box");
			JSClick(PWAComboOfferPage.objRentOnlyMovieCheckboxPrice, "199 check box select");

			waitTime(3000);
			if (verifyElementPresent(PWAComboOfferPage.objRentContentBtn,
					"Rent Content CTA after clicking on only Rent content")) {
				logger.info(
						"Rent Content CTA after clicking on only Rent content in combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ",
						"Rent Content CTA after clicking on only Rent content in combo offer page is displayed , expected behaviour");
			} else {
				logger.info(
						"Rent Content CTA after clicking on only Rent content in combo offer page is not displayed ");
				extent.extentLoggerFail(" ",
						"Rent Content CTA after clicking on only Rent content in combo offer page is not displayed ");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
			logout();
		}

	}

	public void verifyTheRentNowCTABelowPlayerOnZeePlexConsumptionPage(String userType) throws Exception {

		if (userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"Verify that user is able to see the Rent Now CTA below player on ZeePlex consumption page");

			waitTime(500);
			waitForElementDisplayed(PWAHomePage.objTabName("ZEEPLEX"), 3);
			waitTime(2500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);

			ScrollToTheElementWEB(PWAComboOfferPage.objTrailer);
			JSClick(PWAComboOfferPage.objTrailer, "SuperMoon trailer");
			waitTime(3500);
			if (verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now CTA Below the Player")) {
				logger.info("Rent Now CTA below player on Plex consumption page is displayed , expected behaviour");
				extent.extentLoggerPass(" ",
						"Rent Now CTA below player on Plex consumption page is displayed , expected behaviour");
			} else {
				logger.info("Rent Now CTA below player on Plex consumption page is not displayed ");
				extent.extentLoggerFail(" ", "Rent Now CTA below player on Plex consumption page is not displayed ");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}

	}

	public void comboOfferTitleAndRentContentCardTitleForNonsubsUser(String userType, String tabname) throws Exception {
		if (userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"Verify that user is able to See Supermoon Combo Offer card Title and Rent content card tile");
			waitTime(500);
			waitForElementDisplayed(PWAHomePage.objTabName("ZEEPLEX"), 3);
			waitTime(2500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
			waitTime(3500);
			if (verifyElementPresent(PWAComboOfferPage.objSupermoonPlanTxt, "Supermoon Combo offer")) {

				logger.info("Supermoon Combo offer Title is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "Supermoon Combo offer Title is displayed , expected behaviour");
			} else {
				logger.info("Supermoon Combo offer Title is not displayed ");
				extent.extentLoggerFail(" ", "Supermoon Combo offer Titleis not displayed ");
			}
			if (verifyElementPresent(PWAComboOfferPage.objOnlyRentMovie, " Rent Content")) {

				logger.info("Rent Content title is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "Rent Content title is displayed , expected behaviour");
			} else {
				logger.info("Rent Content title is not displayed ");
				extent.extentLoggerFail(" ", "Rent Content title is not displayed ");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void supermoonCardAndStrikedPriceForNonSubs(String userType, String tabname) throws Exception {
		if (userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode("Verify that user is able see Plan Card/ title,Supermoon thumbnail and Price");

			waitTime(500);
			waitForElementDisplayed(PWAHomePage.objTabName("ZEEPLEX"), 3);
			waitTime(2500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);

			ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
			waitTime(3500);
			if (verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {

				logger.info("1 year Premium Thumbnail is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "1 year Premium Thumbnail is displayed , expected behaviour");
			} else {
				logger.info("1 year Premium Thumbnail is not displayed ");
				extent.extentLoggerFail(" ", "1 year Premium Thumbnail is not displayed ");
			}

			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Supermoon Thumbnail")) {

				logger.info("Supermoon Thumbnail is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "Supermoon Thumbnail is displayed , expected behaviour");
			} else {
				logger.info("Supermoon Thumbnail is not displayed ");
				extent.extentLoggerFail(" ", "Supermoon  Thumbnail is not displayed ");
			}
			waitTime(3000);
			String DiscountSaveAmount = getText(PWAComboOfferPage.objDiscount).replace("Save ₹", "");
			logger.info(DiscountSaveAmount);
			String TotalDiscountSaveAmount1 = getText(PWAComboOfferPage.objTotalDiscount).replace("Save ₹", "");
			logger.info(TotalDiscountSaveAmount1);
			if (DiscountSaveAmount.equals(TotalDiscountSaveAmount1)) {
				logger.info("Save ₹ 749 is displayed");
				extent.extentLoggerPass("", "Save ₹ 749 is displayed");
			} else {
				logger.info("Save ₹ 749 is not displayed");
				extent.extentLoggerPass("", "Save ₹ 749 is not displayed");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void justPayingDifferenceTxtAndActivePlanTxt(String userType, String tabname) throws Exception {
		extent.HeaderChildNode(
				"Verify that User is able to see pay difference and active plan Text details in Combo offer Screen");
		LogintoRSVODPack();
		waitTime(3000);
		navigateToAnyScreenOnWeb(tabname);
		waitTime(3000);

		ScrollToTheElementWEB(PWAHomePage.objPlaybackMovieTitle("supermoon"));
		JSClick(PWAHomePage.objPlaybackMovieTitle("supermoon"), "supermoon");
		waitTime(3500);
		verifyElementDisplayed(PWAComboOfferPage.objRentNow);
		JSClick(PWAComboOfferPage.objRentNow, "Rent Now CTA");
		waitTime(3000);
		JSClick(PWAComboOfferPage.objBuySupermoonComboBtn, "Buy Supermoon Combo");
		waitTime(3000);

		if (verifyElementPresent(PWAComboOfferPage.objUpgradeToComboOfferPopupTitle,
				"Upgrade To Combo Offer Popup Title")) {
			String UpgradeToComboOfferPopupTitle = getText(PWAComboOfferPage.objUpgradeToComboOfferPopupTitle);
			logger.info(UpgradeToComboOfferPopupTitle);
			extent.extentLoggerPass("", "The Text is displayed as: " + UpgradeToComboOfferPopupTitle);
		}
		waitTime(3000);
		String currentPlanDescriptionText = getText(PWAComboOfferPage.objCurrentPlanTextDesc);
		if (verifyElementPresent(PWAComboOfferPage.objCurrentPlanTextDesc, currentPlanDescriptionText)) {
			logger.info(currentPlanDescriptionText);
			extent.extentLoggerPass("", "The plan Text is displayed as: " + currentPlanDescriptionText);
		}
	}

	public void VerifyComboOfferPage(String userType) throws Exception {
		extent.HeaderChildNode("Verify whether Combo offer is applicable for Supermoon Live event is configurable ");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
		if (checkElementDisplayed(PWAComboOfferPage.objRentNow, "Rent Now")) {
			JSClick(PWAComboOfferPage.objRentNow, "Rent Now");
			waitTime(3000);
			if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
				if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
						&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
					logger.info("combo offer page is displayed , expected behaviour");
					extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
				} else {
					logger.info("combo offer page is not displayed ");
					extent.extentLoggerFail(" ", "combo offer page is not displayed ");
				}
			}
			if (userType.equals("SubscribedUser")) {
				if (verifyElementPresent(PWAComboOfferPage.objcomboofferpage, "Combo Page")) {
					logger.info("combo offer page is displayed , expected behaviour");
					extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
				} else {
					logger.info("combo offer page is not displayed ");
					extent.extentLoggerFail(" ", "combo offer page is not displayed ");
				}
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}

	}

	public void BuySubscriptionPageThroughHeader(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify whether Combo offer is not displayed for subscription entry points from Buy plan CTA on home page/header ");
			navigateToAnyScreenOnWeb("Home");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			waitTime(2000);
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription Page")) {
				logger.info(" Subscription page  is displayed , expected behaviour");
				extent.extentLoggerPass(" ", " Subscription page is displayed, expected behaviour");
			} else {
				logger.info("combo offer page is displayed ");
				extent.extentLoggerFail(" ", "combo offer page is displayed ");
			}
			navigateHome();
		}
	}

	public void BuyPlanInConsumptionPage(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify whether Combo offer is not displayed for subscription entry points from Buy plan CTA below the player screen");
			navigateToAnyScreenOnWeb("Movies");
			checkElementDisplayed(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
			click(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
			waitTime(5000);
			verifyElementPresent(PWAPlayerPage.objGetPremium, "Buy Plan button below player");
			click(PWAPlayerPage.objGetPremium, "Subscribe button below player");
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription Page")) {
				logger.info(" Subscription page  is displayed , expected behaviour");
				extent.extentLoggerPass(" ", " Subscription page is displayed, expected behaviour");
			} else {
				logger.info("combo offer page is displayed ");
				extent.extentLoggerFail(" ", "combo offer page is displayed ");
			}
			navigateHome();
		}
	}

	public void BuyPlanInCarousel(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify if the combo pack is applicable through carousel");
			navigateToAnyScreenOnWeb("Home");
			checkElementDisplayed(PWAHomePage.objRentNowIncarousel, "Rent Now In Carousel");
			click(PWAHomePage.objRentNowIncarousel, "Rent Now In Carousel");
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
			navigateHome();
		}
	}

	public void VerifyComboOfferPageThroughTab(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify if the combo pack is applicable from ZEEPLEX Landing page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objrentnowinlandingpage, "Rent Now")) {
				click(PWAHamburgerMenuPage.objrentnowinlandingpage, "Rent Now");
				if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
						&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
					logger.info("combo offer page is displayed , expected behaviour");
					extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
				} else {
					logger.info("combo offer page is not displayed ");
					extent.extentLoggerFail(" ", "combo offer page is not displayed ");
				}
				navigateHome();
			}
		}
	}

	public void ComboOfferPageThroughTitleClick(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify if the combo pack is applicable through title click ");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now");
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
			navigateHome();
		}
	}

	public void BuySubscriptionPageThroughCarousel(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify whether Combo offer is not displayed for subscription entry points from Buy plan CTA on home page/header ");
			navigateToAnyScreenOnWeb("Home");
			verifyElementPresentAndClick(PWAHomePage.objGetPremiumWeb, "Buy Plan Button in the carousel");
			waitTime(2000);
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription Page")) {
				logger.info(" Subscription page  is displayed , expected behaviour");
				extent.extentLoggerPass(" ", " Subscription page is displayed, expected behaviour");
			} else {
				logger.info("combo offer page is displayed ");
				extent.extentLoggerFail(" ", "combo offer page is displayed ");
			}
			navigateHome();
		}
	}

	public void MYSubscriptionPageValidation(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Subscribeduser")) {
			extent.HeaderChildNode(
					"Verify whether user is not attached Supermoon Live event pack for Existing 499 users");
			verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile Icon");
			JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
			verifyElementPresent(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
			JSClick(PWAHamburgerMenuPage.objMyProfileOptionsWEB("My Subscription"), "My Subscription");
			waitTime(4000);
			verifyElementPresent(PWAHamburgerMenuPage.objSubscriptionCardTitle, "Subscription Card Tile");
			String a = getText(PWAHamburgerMenuPage.objSubscriptionCardTitle);
			System.out.println(a);
			extent.extentLogger("", "Subscription Card Tile " + a);
			if (!a.contains("Supermoon")) {
				logger.info(" Supermoon content is not added to existing user, expected behaviour");
				extent.extentLoggerPass(" ", " Supermoon content is not added to existing user , expected behaviour");
			} else {
				logger.info("Supermoon content is  added to existing user");
				extent.extentLoggerFail(" ", "Supermoon content is added to existing user");
			}
			navigateHome();
		}
	}

	public void UpcomingAndNowShowing(String userType) throws Exception {
		extent.HeaderChildNode("Verify if the Now Showing and Upcoming collection is displayed on Zeeplex page");
		scrollDownWEB();
		if (checkElementDisplayed(PWAHamburgerMenuPage.objupcomingmovietray, "Upcoming movies")) {
			logger.info("upcoming tray is displayed , expected behaviour");
			extent.extentLoggerPass(" ", " upcoming tray is displayed , expected behaviour");
		} else {
			logger.info("upcoming tray is not displayed");
			extent.extentLoggerFail(" ", "upcoming tray is not displayed");
		}
		if (checkElementDisplayed(PWAHamburgerMenuPage.objNowShowingTray, "Now Showing movies")) {
			logger.info("Now Showing tray is displayed , expected behaviour");
			extent.extentLoggerPass(" ", " Now Showing tray is displayed , expected behaviour");
		} else {
			logger.info("Now Showing tray is not displayed");
			extent.extentLoggerFail(" ", "Now Showing tray is not displayed");
		}
		navigateHome();
	}

	public void UpcomingTrailer(String userType) throws Exception {
		extent.HeaderChildNode("Verify if the user can see content with Trailer CTA under upcoming collection");
		scrollDownWEB();
		if (checkElementDisplayed(PWAHamburgerMenuPage.objupcomingmovietray, "Upcoming movies")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objupcomingTrailer, "Upcoming trailer")) {
				logger.info("upcoming content trailer is displayed , expected behaviour");
				extent.extentLoggerPass(" ", " upcoming content trailer  is displayed , expected behaviour");
			} else {
				logger.info("upcoming content trailer is not displayed");
				extent.extentLoggerFail(" ", "upcoming content trailer is not displayed");
			}
			navigateHome();
		}
	}

	public void ZeeplexCTA(String userType) throws Exception {
		extent.HeaderChildNode("Verify if the header with plex logo, description with How it works CTA is displayed");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		verifyElementPresent(PWAHamburgerMenuPage.objZeeplexlogo, "Zeeplex logo");
		verifyElementPresent(PWAHamburgerMenuPage.objRentAndWatch, "Rent And Watch");
		verifyElementPresent(PWAHamburgerMenuPage.objhowitworks, "How it Works");
		verifyElementPresent(PWAHamburgerMenuPage.objWatchFilmsBeforeTheatre, "Watch films before the theatre");
		verifyElementPresent(PWAHamburgerMenuPage.objZeeplexSubscriptionText, "ZEEPLEX is not part of Premium plan");
		navigateHome();
	}

	public void TrailerAndRentNow(String userType) throws Exception {
		extent.HeaderChildNode("Verify that user is be able to see 2 CTA's - \"Trailer\" and \"Rent now\"");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		verifyElementPresent(PWAComboOfferPage.objTrailer, "Trailer");
		verifyElementPresent(PWAComboOfferPage.objRentNow, "Rent Now");

	}

	public void TrailerAndRentForInr(String userType) throws Exception {
		extent.HeaderChildNode("Verify that user is able to see Trailer and Rent Now CTA along with price");
		navigateToAnyScreenOnWeb("ZEEEPLEX");
		verifyElementPresent(PWAComboOfferPage.objTrailer, "Trailer");
		verifyElementPresent(PWAComboOfferPage.objRentForINRBtn, "Rent For INR ");
		String a = getText(PWAComboOfferPage.objRentForINRBtn);
		System.out.println(a);
		extent.extentLogger("", "Rent For Inr " + a);
		if (a.contains("1") || a.contains("4") || a.contains("9")) {
			logger.info(" Rent For Inr with price is displayed , expected behaviour");
			extent.extentLoggerPass(" ", "Rent For Inr with price is displayed , expected behaviour");
		} else {
			logger.info("Rent For Inr with price is not displayed");
			extent.extentLoggerFail(" ", "Rent For Inr with price is not displayed");
		}
	}

	public void ZeeplexCTABasedOnDisplayLanguage(String userType) throws Exception {
		navigateHome();
		extent.HeaderChildNode(
				"Verify if the text on the Zeeplex page is displaying as per the display language selected");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		Kannadalanguageselection();
		verifyElementPresent(PWAHamburgerMenuPage.objZeeplexlogo, "Zeeplex logo");
		verifyElementPresent(PWAHamburgerMenuPage.objRentAndWatch, "Rent And Watch");
		String a = getText(PWAHamburgerMenuPage.objRentAndWatch);
		System.out.println(a);
		extent.extentLogger("", "Rent And Watch " + a);
		if (a.equals("Rent and Watch")) {
			logger.info("Rent And Watch is not displayed based on display language");
			extent.extentLoggerFail(" ", "Rent And Watch is not displayed based on display language");
		} else {
			logger.info(" Rent And Watch is displayed based on display language , expected behaviour");
			extent.extentLoggerPass(" ", "Rent And Watch is displayed based on display language, expected behaviour");

		}
		verifyElementPresent(PWAHamburgerMenuPage.objHowItWorksInKannada, "How it Works");
		String b = getText(PWAHamburgerMenuPage.objHowItWorksInKannada);
		System.out.println(b);
		extent.extentLogger("", "How it Works ? text " + b);
		if (b.equals("How it Works ?")) {
			logger.info("How it Works ? is not displayed based on display language ");
			extent.extentLoggerFail(" ", "How it Works ? is not displayed based on display language ");
		} else {
			logger.info(" How it Works ? is displayed based on display language, expected behaviour");
			extent.extentLoggerPass(" ", "How it Works ? is displayed based on display language , expected behaviour");

		}

		verifyElementPresent(PWAHamburgerMenuPage.objWatchFilmsBeforeTheatre, "Watch films before the theatre");
		String d = getText(PWAHamburgerMenuPage.objWatchFilmsBeforeTheatre);
		System.out.println(d);
		extent.extentLogger("", "Watch films before the theatre text " + d);
		if (d.equals("Watch films before the theatre")) {
			logger.info("Watch films before the theatre is not displayed based on display language ");
			extent.extentLoggerFail(" ", "Watch films before the theatre is not displayed based on display language ");

		} else {
			logger.info(" Watch films before the theatre is displayed based on display language, expected behaviour");
			extent.extentLoggerPass(" ",
					"Watch films before the theatre is displayed based on display language , expected behaviour");

		}

		verifyElementPresent(PWAHamburgerMenuPage.objZeeplexSubscriptionText, "ZEEPLEX is not part of Premium plan");
		String c = getText(PWAHamburgerMenuPage.objWatchFilmsBeforeTheatre);
		System.out.println(c);
		extent.extentLogger("", "ZEEPLEX is not part of Premium plan text " + c);
		if (c.equals("ZEEPLEX is not part of Premium plan")) {
			logger.info("ZEEPLEX is not part of Premium plan is not displayed based on display language ");
			extent.extentLoggerFail(" ",
					"ZEEPLEX is not part of Premium plan is not displayed based on display language ");
		} else {
			logger.info(
					" ZEEPLEX is not part of Premium plan is displayed based on display language, expected behaviour");
			extent.extentLoggerPass(" ",
					"ZEEPLEX is not part of Premium plan is displayed based on display language , expected behaviour");
		}
		navigateHome();
		EnglishLanguageselection();
	}

	public void ComboOfferWidget(String userType) throws Exception {
		navigateHome();
		extent.HeaderChildNode(
				"Verify that user is able to see the combo offer widget below player on consumption page");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		partialScroll();
		waitTime(5000);
		verifyElementPresent(PWAComboOfferPage.objTrailer, "Trailer");
		click(PWAComboOfferPage.objTrailer, "Trailer");
		waitTime(5000);
		if (verifyElementPresent(PWAComboOfferPage.objComboOfferWidget, "Combo Offer Widget")) {
			logger.info(" Combo offer widget is displayed , expected behaviour");
			extent.extentLoggerPass(" ", "Combo offer widget is displayed , expected behaviour");
		} else {
			logger.info("Combo offer widget is not displayed");
			extent.extentLoggerFail(" ", "Combo offer widget is not displayed");
		}
	}

	public void RentNowOnPlayer(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Guest")) {
			navigateHome();
			extent.HeaderChildNode(
					"Verify that user is getting Combo offer page on clicking Rent Now on Player on consumption page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now In Player");
			click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now In Player");
			waitTime(3000);
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
			navigateHome();
		}
	}

	public void RentNowBelowPlayer(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Guest")) {
			// navigateHome();
			extent.HeaderChildNode(
					"Verify that user is getting Combo offer page on clicking Rent Now below Player on consumption page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			waitForElement(PWAComboOfferPage.objRentNowBelowPlayer, 20, "Rent Now below player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now below player");
			waitTime(3000);
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
			navigateHome();
		}
	}

	public void RentNowOnWidget(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is getting Combo offer page on clicking Know more below Player on consumption page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			waitForElement(PWAComboOfferPage.objComboOfferWidget, 20, "Know More");
			click(PWAComboOfferPage.objComboOfferWidget, "Know More");
			waitTime(3000);
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
			navigateHome();
		}
	}

	public void ComboOfferPageThroughSearch(String userType) throws Exception

	{
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see combo offer page on clicking Rent Now CTA on player consumption page post redirecting through search result");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			click(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2500);
			String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("ZEEPLEXContent");
			type(PWASearchPage.objSearchEditBox, keyword1, "Search Field");
			waitTime(2500);
			click(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2500);
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now In Player");
			if (checkElementDisplayed(PWAComboOfferPage.objRentNowInPlayer, "Rent Now In Player")) {
				click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now In Player");
				waitTime(3000);
				if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
						&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
					logger.info("combo offer page is displayed , expected behaviour");
					extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
				} else {
					logger.info("combo offer page is not displayed ");
					extent.extentLoggerFail(" ", "combo offer page is not displayed ");
				}
			}
			navigateHome();
		}
	}

	/// ------------------------guestcheckout-------
	public void RentNowGuestcheckout(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see combo offer page on clicking Rent Now CTA on Zeeplex landing page");
			navigateToAnyScreenOnWeb("ZEEPLEX");

			verifyElementPresent(PWAComboOfferPage.objRentNow, "Rent Now");
			click(PWAComboOfferPage.objRentNow, "Rent Now");
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
		}
	}

	public void TrailerConsumptionPageGuestCheckOut(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			navigateHome();
			extent.HeaderChildNode(
					"Verify that user clicks on watch trailer CTA on Rent landing Page then user is redirecting to trailer consumption page(if applicable)");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objTrailer, "Trailer");
			click(PWAComboOfferPage.objTrailer, "Trailer");
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("Navigated to Consumption Page");
				extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
			} else {
				logger.info("Not navigated to Consumption Page");
				extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
			}
		}
	}

	public void RentNowBelowPlayerGuestCheckout(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			navigateHome();
			extent.HeaderChildNode(
					"Verify that user is able to see the Rent and Watch along with Rent Now CTA below player on Live TV consumption page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objTrailer, "Trailer");
			click(PWAComboOfferPage.objTrailer, "Trailer");
			waitTime(5000);
			if (checkElementDisplayed(PWAComboOfferPage.objRentNowInConsumptionPage, "Rent Now")) {
				logger.info("Rent now in consumption page is displayed");
				extent.extentLogger("Consumption Page", "Rent now in consumption page is displayed");
			} else {
				logger.info("Rent now in consumption page is not displayed");
				extent.extentLogger("Consumption Page", "Rent now in consumption page is not displayed");
			}
		}
	}

	public void RentNowAndLoginOnPlayerGuestCheckOut(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			navigateHome();
			extent.HeaderChildNode(
					"Verify that user is able to see the Rent Now CTA and Login CTA on player post traile on LiveTV consumption page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objTrailer, "Trailer");
			click(PWAComboOfferPage.objTrailer, "Trailer");
			waitTime(5000);
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now");
			if (verifyElementPresent(PWAComboOfferPage.objRentNowInPlayer, "Rent Now")
					&& (verifyElementPresent(PWAComboOfferPage.objLoginButtonPlaybackOnConsumptionPage, "Login"))) {
				logger.info("Rent Now And Login Cta is displayed");
				extent.extentLogger("Consumption Page", "Rent Now And Login Cta is displayed");
			} else {
				logger.info("Rent Now And Login Cta is not displayed");
				extent.extentLogger("Consumption Page", "Rent Now And Login Cta is not displayed");
			}
		}
	}

	public void ComboOfferWidgetGuestCheckout(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see the combo offer widget below player on LiveTV consumption page");
			click(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2500);
			String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("ZEEPLEXContent");
			type(PWASearchPage.objSearchEditBox, keyword1, "Search Field");
			waitTime(2500);
			// click(PWAHomePage.objSearchBtn, "Search button");
			click(PWASearchPage.objFirstAssetImgSearchNavigationTab, "Search content ");
			waitTime(2500);
			if (verifyElementPresent(PWAComboOfferPage.objComboOfferWidget, "Combo Offer Widget")) {
				logger.info("Combo offer widget is displayed");
				extent.extentLogger("Combo offer Page", "Combo offer widget is displayed");
			} else {
				logger.info("Combo offer widget is not displayed");
				extent.extentLogger("Combo offer Page", "Combo offer widget is not displayed");
			}
		}
	}

	public void RentNowOnPlayerGuestCheckout(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			navigateHome();
			extent.HeaderChildNode(
					"Verify that user is getting Combo offer page on clicking Rent Now on Player on LiveTV consumption page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objTrailer, "Trailer");
			click(PWAComboOfferPage.objTrailer, "Trailer");
			waitTime(5000);
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now");
			click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now");
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
		}
	}

	public void LiveTVSupermoonContentGuestCheckout(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is getting Combo offer page on clicking Rent Now Below Player on LiveTV consumption page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			checkElementDisplayed(PWAComboOfferPage.objRentNowBelowPlayer, "Rrent Now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rrent Now");
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
		}

	}

	public void KnowMoreWidgetGuestCheckOut(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that \"Combo Offer\" page is displayed on clicking Know More or clicking anywhere on nudge");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			checkElementDisplayed(PWAComboOfferPage.objComboOfferWidget, "Know More");
			click(PWAComboOfferPage.objComboOfferWidget, "Know More");
			waitTime(5000);
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
		}
	}

	public void BuyComboBtnGuestCheckOut(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			navigateHome();
			extent.HeaderChildNode("Verify that user is able to see the Buy Supermoon Combo  CTA on combo offer page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			checkElementDisplayed(PWAComboOfferPage.objRentNow, "Rent Now");
			click(PWAComboOfferPage.objRentNow, "Rent Now");
			waitTime(3000);
			if (checkElementDisplayed(PWAComboOfferPage.objBuySuperMoonComboBtn, "Buy Supermoon Combo")) {
				logger.info("Buy Supermoon combo is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "Buy Supermoon combo is displayed , expected behaviour");
			} else {
				logger.info("Buy Supermoon combo is not displayed ");
				extent.extentLoggerFail(" ", "Buy Supermoon combo is not displayed ");
			}
		}
	}

	public void AccountInfoGuestCheckOut(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			navigateHome();
			extent.HeaderChildNode(
					"Verify that Account info page is displayed for user on clicking Buy Supermoon Combo CTA from Combo offer page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			checkElementDisplayed(PWAComboOfferPage.objRentNow, "Rent Now");
			click(PWAComboOfferPage.objRentNow, "Rent Now");
			waitTime(3000);
			checkElementDisplayed(PWAComboOfferPage.objBuySuperMoonComboBtn, "Buy Supermoon Combo");
			click(PWAComboOfferPage.objBuySuperMoonComboBtn, "Buy Supermoon Combo");
			if (verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Section")) {
				logger.info("Account info screen is displayed , expected behaviour");
				extent.extentLoggerPass("", "Account info screen is displayed , expected behaviour");
			} else {
				logger.info("Account info screen is not displayed");
				extent.extentLoggerFail(" ", "Account info screen is not displayed");

			}
		}
	}

	public void Loginto299Pack() throws Exception {
		extent.HeaderChildNode("Login as 299 Subscribed User");
		String Username = getParameterFromXML("SubscribedUserName299");
		String Password = getParameterFromXML("SubscribedPassword299");

		verifyElementPresent(PWALoginPage.objWebLoginBtn, "Login button");
		JSClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objEmailField, "Email field");
		JSClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, Username, "Email Field");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objPasswordField, "Password Field");
		JSClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, Password, "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(5000);
	}

	public void ComboOfferScreenLessThan299User(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see combo offer page on clicking Rent Now CTA on Zeeplex landing page");
			Loginto299Pack();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			verifyElementPresent(PWAComboOfferPage.objRentNow, "RentNow");
			click(PWAComboOfferPage.objRentNow, "RentNow");
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
		}
	}

	public void ComsumptionPageLessThan299User(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user clicks on watch trailer CTA on Zeeplex landing Page than user is redirecting to trailer consumption page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(2500);
			verifyElementPresent(PWAComboOfferPage.objTrailer, "Trailer");
			click(PWAComboOfferPage.objTrailer, "Trailer");
			waitTime(2500);
			if (checkElementDisplayed(PWAComboOfferPage.objRentNowInConsumptionPage, "Rent Now")) {
				logger.info("Trailer consumption page is displayed, expected behaviour");
				extent.extentLogger("Consumption Page", "Trailer consumption page is displayed , expected behaviour");
			} else {
				logger.info("Trailer consumption page is not displayed");
				extent.extentLogger("Consumption Page", "Trailer consumption page is not displayed");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void RentNowCTAConsumptionPageLessThan299User(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see the Rent Now CTA below player on LiveTV consumption page");
			waitTime(2500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			ScrollToTheElementWEB(PWAComboOfferPage.objTrailer);
			JSClick(PWAComboOfferPage.objTrailer, "SuperMoon trailer");
			waitTime(3500);
			if (checkElementDisplayed(PWAComboOfferPage.objRentNowInConsumptionPage, "Rent Now")) {
				logger.info("Rent now in consumption page is displayed, expected behaviour");
				extent.extentLogger("Consumption Page",
						"Rent now in consumption page is displayed , expected behaviour");
			} else {
				logger.info("Rent now in consumption page is not displayed");
				extent.extentLogger("Consumption Page", "Rent now in consumption page is not displayed");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void ValidateSearchContentLessThan299User(String userType, String ZEEPLEXContent) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see the Rent Now CTA on player post trailer consumption page if user lands on Consumption page via Search.");
			click(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2500);

			type(PWASearchPage.objSearchEditBox, ZEEPLEXContent, "Search Field");
			waitTime(2500);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, ZEEPLEXContent);
			waitTime(2500);
			waitForElement(PWAComboOfferPage.objRentForINRInPlayer, 20, "Rent For INR");
			// click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now");
			if (verifyElementPresent(PWAComboOfferPage.objRentForINRInPlayer, "Rent For INR inside Player")) {
				logger.info("Rent For INR on Player page is displayed, expected behaviour");
				extent.extentLoggerPass("Consumption Page",
						"Rent For INR on Player page is displayed, expected behaviour");
			} else {
				logger.info("Rent For INR on Player page is displayed");
				extent.extentLoggerFail("Consumption Page", "Rent For INR on Player page is displayed");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void LiveTVSupermoonLessThan299User(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see the combo offer widget below player on LiveTV consumption page");
			waitTime(2500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			ScrollToTheElementWEB(PWAComboOfferPage.objTrailer);
			JSClick(PWAComboOfferPage.objTrailer, "SuperMoon trailer");
			waitTime(3500);
			// supermoon content
			if (verifyElementPresent(PWAComboOfferPage.objComboOfferWidget, "Combo offer Widget")) {
				logger.info("combo offer widget is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer widget is displayed  , expected behaviour");
			} else {
				logger.info("combo offer widget is not displayed ");
				extent.extentLoggerFail(" ", "combo offer widget is not displayed ");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
			logout();
		}
	}

	public void TermsAndPolicy(String userType) throws Exception {
		// if (userType.equalsIgnoreCase("Guest")) {
		extent.HeaderChildNode(
				"Verify that user is able to see Terms of use and Privacy policy link in combo offer screen");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		verifyElementPresent(PWAComboOfferPage.objRentNow, "Rent Now ");
		click(PWAComboOfferPage.objRentNow, "Rent Now ");
		if (verifyElementPresent(PWAComboOfferPage.objTermsOfService, "Terms of service")
				&& verifyElementPresent(PWAComboOfferPage.objPrivacyPolicy, "Privacy Policy")) {
			logger.info("Terms of use and privacy is displayed, expected behaviour");
			extent.extentLoggerPass(" ", "Terms of use and privacy is displayed  , expected behaviour");
		} else {
			logger.info("Terms of use and privacy is not displayed");
			extent.extentLoggerFail(" ", "Terms of use and privacy is not displayed ");
		}
		// }
	}

	public void TermsOfUsePage(String userType) throws Exception {
		navigateHome();
		extent.HeaderChildNode(
				"Verify that user is able to see Terms of use when the user clicks on the link in combo offer screen");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		verifyElementPresent(PWAComboOfferPage.objRentNow, "Rent Now ");
		click(PWAComboOfferPage.objRentNow, "Rent Now ");
		verifyElementPresent(PWAComboOfferPage.objTermsOfService, "Terms of use");
		click(PWAComboOfferPage.objTermsOfService, "Terms of use");
		if (verifyElementPresent(PWAComboOfferPage.objTermsOfUseHeader, "Terms of use")) {
			logger.info("Terms of use is displayed, expected behaviour");
			extent.extentLoggerPass(" ", "Terms of use is displayed  , expected behaviour");
		} else {
			logger.info("Terms of use is not displayed");
			extent.extentLoggerFail(" ", "Terms of use is not displayed ");
		}
		// switchToParentWindow();

	}

	public void PrivacyPolicyPage(String userType) throws Exception {
		navigateHome();
		extent.HeaderChildNode(
				"Verify that user is able to see Privacy Policy when the user clicks on the link in combo offer screen");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		verifyElementPresent(PWAComboOfferPage.objRentNow, "Rent Now ");
		click(PWAComboOfferPage.objRentNow, "Rent Now ");
		verifyElementPresent(PWAComboOfferPage.objPrivacyPolicy, "Privacy Policy");
		click(PWAComboOfferPage.objPrivacyPolicy, "Privacy Policy");
		if (verifyElementPresent(PWAComboOfferPage.objPrivacyPolicyTitle, "Privacy Policy")) {
			logger.info("PrivacyPolicy is displayed, expected behaviour");
			extent.extentLoggerPass(" ", "PrivacyPolicy is displayed  , expected behaviour");
		} else {
			logger.info("PrivacyPolicy is not displayed");
			extent.extentLoggerFail(" ", "PrivacyPolicy is not displayed ");
		}
		// switchToParentWindow();
	}

	public void TermsAndPrivacyPolicyRSVOD(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			LogintoRSVODPacklessthen499();
			TermsAndPolicy(userType);
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void TermsOfUsePageRSVODUser(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			TermsOfUsePage(userType);
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void PrivacyPolicyPageRSVODUser(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			PrivacyPolicyPage(userType);
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void UpgradeButtonRSVOD(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that on Selecting Super Combo  Rs 499 user will see Upgrade CTA");
			waitTime(2500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
			waitTime(3500);
			if (verifyElementPresent(PWAComboOfferPage.objUpgradeBtn, "Upgrade")) {
				logger.info("Upgrade button is displayed, expected behaviour");
				extent.extentLoggerPass(" ", "Upgrade button is displayed  , expected behaviour");
			} else {
				logger.info("Upgrade button is not displayed");
				extent.extentLoggerFail(" ", "Upgrade button is not displayed ");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void PaymentPageUsingUpgradeButtonRSVOD(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that on clicking Upgrade user will redirect to payment mode screen and Differential amount will get calculated");
			waitTime(2500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objUpgradeBtn, "Upgrade");

			verifyElementPresent(PWAComboOfferPage.objUpgradeTextJustPayingDifference, "Difference Ammount");
			click(PWAComboOfferPage.objUpgradeBtn, "Upgrade");
			waitTime(2500);
			String planPrice = getWebDriver().findElement(PWAComboOfferPage.objPlanPriceInMakePaymentSection).getText();
			logger.info("the price of the Plan is: " + planPrice);
			extent.extentLogger("PlanPrice", "the price of the Plan is: " + planPrice);
			String Discount = getWebDriver().findElement(PWAComboOfferPage.objdiscountInMakePaymentSection).getText();
			logger.info("the Discount of the Plan is: " + Discount);
			extent.extentLogger("PlanPrice", "the Discount of the Plan is: " + Discount);
			String TotalAmount = getWebDriver().findElement(PWAComboOfferPage.objTotalPayableAmountInMakePaymentSection)
					.getText();
			logger.info("the Discount of the Plan is: " + TotalAmount);
			extent.extentLogger("PlanPrice", "the Discount of the Plan is: " + TotalAmount);

			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info(
						"After clicking on Upgrade user is redirected to payment mode screen and Differential amount got calculated");
				extent.extentLoggerPass("",
						"After clicking on Upgrade user is redirected to payment mode screen and Differential amount got calculated , expected behaviour");
			} else {
				logger.info("User not redircted to Payment page .");
				extent.extentLoggerFail(" ", "User not redircted to Payment page .");

			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
			logout();
		}
	}

	public void PaymentPageUsingRentNowButtonRSVOD(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that on clicking Upgrade user will redirect to payment mode screen and Differential amount will get calculated");
			navigateToAnyScreenOnWeb("ZZEEPLX");
			verifyElementPresent(PWAComboOfferPage.objRentNow, "Rent Now ");
			click(PWAComboOfferPage.objRentNow, "Rent Now ");
			waitTime(3000);
			verifyElementPresent(PWAComboOfferPage.objComboPopupRentMovieBtn, "Rent Movie");
//			verifyElementPresent(PWAComboOfferPage.objUpgradeBtn, "Upgrade");
			click(PWAComboOfferPage.objComboPopupRentMovieBtn, "Rent Movie");
			// need to add the amt of movie
			verifyElementPresent(PWAComboOfferPage.objUpgradeTextJustPayingDifference, "Difference Ammount");
			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")
					&& verifyElementPresent(PWAComboOfferPage.objUpgradeTextJustPayingDifference,
							"Difference Ammount")) {
				logger.info("User should be redircted to Payment page , expected behaviour");
				extent.extentLoggerPass("", "User should be redircted to Payment page , expected behaviour");
			} else {
				logger.info("User not redircted to Payment page .");
				extent.extentLoggerFail(" ", "User not redircted to Payment page .");

			}
		}
	}

	public void RentNowCTA(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify that user is able to see combo offer page on clicking Rent Now CTA on Zeeplex landing page ");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objRentNow, "Rent Now");
			click(PWAComboOfferPage.objRentNow, "Rent Now");
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
		}
	}

	public void TrailerCTA(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify that user is able to see combo offer page on clicking Trailer CTA on Zeeplex landing page ");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objTrailer, "Trailer");
			click(PWAComboOfferPage.objTrailer, "Trailer");
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now In Player");
			click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now In Player");
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
		}
	}

	public void RentNowCTAOnPlayer(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify that user is able to see the Rent Now CTA on player post trailer if user lands on Consumption page via Zeeplex Landing page.");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objTrailer, "Trailer");
			click(PWAComboOfferPage.objTrailer, "Trailer");
			waitTime(5000);
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now");
			if (verifyElementPresent(PWAComboOfferPage.objRentNowInPlayer, "Rent Now")) {
				logger.info("Rent Now ON Player is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "Rent Now ON Player is displayed  , expected behaviour");
			} else {
				logger.info("Rent Now ON Player is not displayed ");
				extent.extentLoggerFail(" ", "Rent Now ON Player is not displayed ");
			}
		}
	}

	public void RentNowCTAOnPlayerThroughSearch(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify that user is able to see the Rent Now CTA on player post trailer consumption page if user lands on Consumption page via Search.");

			navigateToAnyScreenOnWeb("ZEEPLEX");
			click(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2500);
			String keyword1 = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("ZEEPLEXContent");
			type(PWASearchPage.objSearchEditBox, keyword1, "Search Field");
			waitTime(2500);
			// click(PWAHomePage.objSearchBtn, "Search button");
			verifyElementPresentAndClick(PWASearchPage.objfirstdata, "Searched result");
			waitTime(2500);
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now In Player");
			if (checkElementDisplayed(PWAComboOfferPage.objRentNowInPlayer, "Rent Now In Player")) {
				logger.info("Rent Now In Player is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "Rent Now In Player is displayed  , expected behaviour");
			} else {
				logger.info("Rent Now In Player is not displayed ");
				extent.extentLoggerFail(" ", "Rent Now In Player is not displayed ");
			}
		}

	}

	public void ComboOfferWidgetLiveTV(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify that user is able to see the combo offer widget below player on LiveTV consumption page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			partialScroll();
			waitTime(5000);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			if (verifyElementPresent(PWAComboOfferPage.objComboOfferWidget, "Combo Offer Widget")) {
				logger.info(" Combo offer widget is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "Combo offer widget is displayed , expected behaviour");
			} else {
				logger.info("Combo offer widget is not displayed");
				extent.extentLoggerFail(" ", "Combo offer widget is not displayed");
			}
		}
	}

	public void ComboOfferPageThroughZEEPLEXTitle(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify that user is getting Combo offer page on clicking Rent Now on Player on LiveTV consumption page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(4000);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now In Player");
			if (checkElementDisplayed(PWAComboOfferPage.objRentNowInPlayer, "Rent Now In Player")) {
				logger.info("Rent Now In Player is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "Rent Now In Player is displayed  , expected behaviour");
			} else {
				logger.info("Rent Now In Player is not displayed ");
				extent.extentLoggerFail(" ", "Rent Now In Player is not displayed ");
			}
		}
	}

	public void ComboOfferPageThroughKnowMore(String userType) throws Exception {
		if (userType.equals("NonSubscribeduser")) {
			LiveTVSupermoonContentGuestCheckout(userType);
		}
	}

	public void ComboOfferPageOnClickONBelowPlayer(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify that user is getting Combo offer page on clicking Rent Now Below Player on LiveTV consumption page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(4000);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitForElement(PWAComboOfferPage.objRentNowBelowPlayer, 20, "Rent Now Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now Below Player");
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}

		}
	}

	public void ComboOfferScreenDetails(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode("Verify that User is able to see Below details in Combo offer Screen");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitForElement(PWAComboOfferPage.objRentNowBelowPlayer, 20, "Rent Now Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now Below Player");
			verifyElementPresent(PWAComboOfferPage.objContentCard, "Content card");
			verifyComboScreen1();
		}
	}

	public void authenticationFunctionality1(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("PWA2-9106 Authenticate device revamp - Not Applicable for Guest");
		} else {
			extent.HeaderChildNode("PWA2-9106 Authenticate device revamp");
			navigateHome();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresent(PWAHamburgerMenuPage.objAuthenticationOption, "CTA to Authenticate Device");
			String ctaText = getElementPropertyToString("innerText", PWAHamburgerMenuPage.objAuthenticationOption,
					"CTA Text");
			if (ctaText.equals("Activate Device")) {
				logger.info("Expected CTA text displayed " + ctaText);
				extent.extentLoggerPass("", "Expected CTA text displayed " + ctaText);
			} else {
				logger.info("'" + ctaText + "' CTA text is displayed instead of 'Activate Device'");
				extent.extentLoggerFail("", "'" + ctaText + "' CTA text is displayed instead of 'Activate Device'");
			}
			click(PWAHamburgerMenuPage.objAuthenticationOption, "CTA");
			waitTime(3000);
			String url = getWebDriver().getCurrentUrl();
			String[] urlParts = url.split("/");
			String urlEnd = urlParts[urlParts.length - 1];
			if (urlEnd.equals("device")) {
				logger.info("Successfully navigated to Activation page");
				extent.extentLogger("", "Successfully navigated to Activation page");
				// Verify Page Heading
				String pageHeading = getElementPropertyToString("innerText", PWAHamburgerMenuPage.objAuthenticationText,
						"Page Heading");
				if (pageHeading.equals("Activate ZEE5 on your TV")) {
					logger.info("Expected Page Heading displayed '" + pageHeading + "'");
					extent.extentLoggerPass("", "Expected Page Heading displayed '" + pageHeading + "'");
				} else {
					logger.info(
							"'" + pageHeading + "' Page Heading is displayed instead of 'Activate ZEE5 on your TV'");
					extent.extentLoggerFail("",
							"'" + pageHeading + "' Page Heading is displayed instead of 'Activate ZEE5 on your TV'");
				}
				// Verify Page Description
				String pageDesc = getElementPropertyToString("innerText", PWAHamburgerMenuPage.objAuthenticationTDesc,
						"Page Desc");
				if (pageDesc.equals("Enter the Activation code displayed on your TV screen")) {
					logger.info("Expected Page Description displayed '" + pageDesc + "'");
					extent.extentLoggerPass("", "Expected Page Description displayed '" + pageDesc + "'");
				} else {
					logger.info("'" + pageDesc
							+ "' Page Description is displayed instead of 'Enter the Activation code displayed on your TV screen'");
					extent.extentLoggerFail("", "'" + pageDesc
							+ "' Page Description is displayed instead of 'Enter the Activation code displayed on your TV screen'");
				}
				// Verify Activate Now Button Disabled
				verifyElementPresent(PWAHamburgerMenuPage.objActivateNowButtonDisabled, "Disabled Button");
				// Verify Activate Now Button
				String button = getElementPropertyToString("innerText",
						PWAHamburgerMenuPage.objActivateNowButtonDisabled, "Button Text");
				if (button.equals("Activate Now")) {
					logger.info("Expected button displayed '" + button + "'");
					extent.extentLoggerPass("", "Expected button displayed '" + button + "'");
				} else {
					logger.info("'" + button + "' button is displayed instead of 'Activate Now' button");
					extent.extentLoggerFail("",
							"'" + button + "' button is displayed instead of 'Activate Now' button");
				}
				// Add less than 6 to verify button disabled state
				for (int i = 1; i <= 5; i++) {
					type(PWAHamburgerMenuPage.objAuthenticateCode(String.valueOf(i)), String.valueOf(i),
							"Authentication code " + i);
					verifyElementPresent(PWAHamburgerMenuPage.objActivateNowButtonDisabled, "Disabled Button");
				}
				// Add 6th code to verify enabled button state
				type(PWAHamburgerMenuPage.objAuthenticateCode("6"), "6", "Authentication code 6");
				verifyElementPresent(PWAHamburgerMenuPage.objActivateNowButtonEnabled, "Enabled Button");
				// Delete one code to verify disabled state
				getWebDriver().findElement(PWAHamburgerMenuPage.objAuthenticateCode("6")).sendKeys(Keys.BACK_SPACE);
				verifyElementPresent(PWAHamburgerMenuPage.objActivateNowButtonDisabled,
						"Disabled Button after clearing code");
				// Click on Activate
				type(PWAHamburgerMenuPage.objAuthenticateCode("6"), "6", "Authentication code 6");
				click(PWAHamburgerMenuPage.objActivateNowButtonEnabled, "Enabled Button");
				// Error message verification
				verifyElementPresent(PWAHamburgerMenuPage.objActivateDeviceError, "Error Message");
				// Button must be disabled upon Error message
				verifyElementPresent(PWAHamburgerMenuPage.objActivateNowButtonDisabled, "Disabled Button");
				// Error message should disappear upon clearing code
				getWebDriver().findElement(PWAHamburgerMenuPage.objAuthenticateCode("6")).sendKeys(Keys.BACK_SPACE);
				if (checkElementDisplayed(PWAHamburgerMenuPage.objActivateDeviceError,
						"On clearing code Error Message")) {
					logger.error("Error message is not cleared on clearing code");
					extent.extentLoggerFail("", "Error message is not cleared on clearing code");
				}
				// Check entry of special characters
				type(PWAHamburgerMenuPage.objAuthenticateCode("6"), "&", "Authentication code &");
				try {
					String sixthChar = getElementPropertyToString("value",
							PWAHamburgerMenuPage.objAuthenticateCode("6"), "6th code");
					if (sixthChar.equals("&")) {
						logger.error("Special character & is allowed in Authentication code");
						extent.extentLoggerFail("", "Special character & is allowed in Authentication code");
					} else {
						logger.info("Verified that special characters are not allowed in Authentication code");
						extent.extentLogger("",
								"Verified that special characters are not allowed in Authentication code");
					}
				} catch (Exception e) {
					if (verifyElementPresent(PWAHamburgerMenuPage.objActivateNowButtonDisabled, "Disabled Button")) {
						logger.info("Verified that special characters are not allowed in Authentication code");
						extent.extentLogger("",
								"Verified that special characters are not allowed in Authentication code");
					}
				}
			} else {
				logger.error("Failed to navigate to Activation page");
				extent.extentLoggerFail("", "Failed to navigate to Activation page");
			}
		}
	}

	public void VerifyComboOfferThroughTabEntryPointsRSVOD(String userType, String tabname) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that Combo Page is Displayed on clicking on Tabs Entry Points");
			LogintoRSVODPack();
			waitTime(3000);
			navigateToAnyScreenOnWeb(tabname);
//		verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
//		click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objRentNow, "Rent Now");
			click(PWAComboOfferPage.objRentNow, "Rent Now");
			waitTime(2500);
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}
			verifyComboScreen1();
			navigateHome();
			logout();
		}
	}

	public void comboOfferpageTextForNonSubsUser(String userType, String tabname) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			HeaderChildNode("Verify that user is able to see Beneficiary text in Combo offer card ");

			waitTime(3500);
			navigateToAnyScreenOnWeb(tabname);
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(3500);
			waitTime(3500);
			verifyElementPresentAndClick(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
					"Rent Now CTA below the player");
			waitTime(3000);

			verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail");
			verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium plan 499 with cut off 999");
			compareText(PWAComboOfferPage.objSupermoonPlanTxt, "Supermoon Event Pass");
			compareText(PWAComboOfferPage.objLiveEventTicket, "Online Live Concert");
			compareText(PWAComboOfferPage.objExclusiveVideos, "Exclusive Videos");

			compareText(PWAComboOfferPage.obj4000blockusterTxt, "2800+ Blockbuster Movies");
			compareText(PWAComboOfferPage.objzee5OriginalTxt, "150+ Web Series");
			compareText(PWAComboOfferPage.objWatchshowsTxt, "Watch Before TV");
			compareText(PWAComboOfferPage.objWatchAdTxt, "Live TV, Ad-Free entertainment");

			waitTime(3000);
			String SaveAmount = getText(PWAComboOfferPage.objDiscount).replace("Save ₹", "");
			compareText(PWAComboOfferPage.objDiscount, "Save ₹" + SaveAmount);
			compareText(PWAComboOfferPage.objTotalDiscount, "Save ₹" + SaveAmount);

			verifyElementPresent(PWAComboOfferPage.objOnlyRentMovie, "Only Rent Content");
			verifyElementPresent(PWAComboOfferPage.objpackprice249, "Only Rent Content with INR 249");
			compareText(PWAComboOfferPage.objSupermoonPlanTxtinOnlyRent, "Supermoon Event Pass");

			compareText(PWAComboOfferPage.objLiveEventTicket, "Online Live Concert");
			compareText(PWAComboOfferPage.objExclusiveVideos, "Exclusive Videos");

		}
	}

	public void oneYearPremium6MSupermoonUser() throws Exception {
		extent.HeaderChildNode(
				"Login as Premium user with 1 year(>499 plan price ) and 6 months Plan + Supermoon Active User");
		String Username = getParameterFromXML("1yearPremium6MSupermoonUser");
		String Password = getParameterFromXML("1yearPremium6MSupermoonPassword");

		verifyElementPresent(PWALoginPage.objWebLoginBtn, "Login button");
		JSClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objEmailField, "Email field");
		JSClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, Username, "Email Field");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objPasswordField, "Password Field");
		JSClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, Password, "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(5000);
	}

	public void watchCTAonCarousalForSupermoon(String userType, String tabname) throws Exception {
		extent.HeaderChildNode(
				"Verify that user is able to see Watch Now CTA in carousel if user has not started watching the Supermoon Event");
		oneYearPremium6MSupermoonUser();
		waitTime(3500);
		navigateToAnyScreenOnWeb(tabname);
		for (int i = 0; i <= 10; i++) {
			if (checkElementDisplayed(PWAHomePage.objcarouselContent("Supermoon"), "Carousal title") == true) {
				verifyElementDisplayed(PWAComboOfferPage.objWatchNowCTA);

				logger.info("Watch Now CTA is Present in Supermoon carousal banner");
				extent.extentLoggerPass("", "Watch Now CTA is Present in Supermoon carousal banner,expected behaviour");
				break;
			} else {
				JSClick(PWAHamburgerMenuPage.Objnextarrowcarousel, "next arrow");
				waitTime(500);
			}

		}
	}

	public void ResumeCTAonCarousalForSupermoon(String userType, String tabname) throws Exception {
		extent.HeaderChildNode(
				"Verify that user is able to see Resume CTA in carousel if user has started watching the Supermoon Event");
//needed event watch clicked credentials
		oneYearPremium6MSupermoonUser();
		waitTime(3500);
		navigateToAnyScreenOnWeb(tabname);
		for (int i = 0; i <= 10; i++) {
			if (checkElementDisplayed(PWAHomePage.objcarouselContent("Supermoon"), "Carousal title") == true) {
				verifyElementDisplayed(PWAComboOfferPage.objResumeCTA);

				logger.info("Resume CTA is Present in Supermoon carousal banner");
				extent.extentLoggerPass("", "Resume CTA is Present in Supermoon carousal banner,expected behaviour");
				break;
			} else {
				JSClick(PWAHamburgerMenuPage.Objnextarrowcarousel, "next arrow");
				waitTime(500);
			}
		}
	}

	public void watchCTAonZeePlexForSupermoonevent(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see Watch Now CTA in Zeeplex landing page for Rented Supermoon if user has not started watching TVOD");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			if (verifyElementDisplayed(PWAComboOfferPage.objWatchNowCTA)) {

				logger.info("Watch Now CTA is Present in ZeePlex Page");
				extent.extentLoggerPass("", "Watch Now CTA is Present in  ZeePlex Page,expected behaviour");

			} else {
				logger.error("Watch Now CTA is not Present in ZeePlex Page");
				extent.extentLoggerFail("", "Watch Now CTA is not Present in  ZeePlex Page,expected behaviour");
			}
		}
	}

	@SuppressWarnings("unused")
	public void deleteDevices() throws Exception {
		String userType = getParameterFromXML("userType");
//		if(!userType.equals("Guest")) ResponseInstance.deleteAddDevicesForTheUser();
	}

	public void ResumeCTAonZeePlexForSupermoonevent(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see Resume CTA in Zeeplex landing page for Rented Supermoon if user has started watching TVOD");
			oneYearPremium6MSupermoonUser();
			// alredy half watched creds required
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			if (verifyElementDisplayed(PWAComboOfferPage.objResumeCTA)) {

				logger.info("Resume CTA is Present in in ZeePlex Page");
				extent.extentLoggerPass("", "Resume CTA is Present in ZeePlex Page,expected behaviour");

			} else {
				logger.error("Resume Now CTA is not Present in ZeePlex Page");
				extent.extentLoggerFail("", "Resume Now CTA is not Present in  ZeePlex Page");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void NoComboOfferWidgetBelowThePlayer(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user is not able to see Combo offer widget below the player");
			// oneYearPremium6MSupermoonUser();
			waitTime(1500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			if (!checkElementDisplayed(PWAComboOfferPage.objComboOfferWidget, "Combo Offer Widget below the player")) {

				logger.info("Combo Offer Widget below the player is not Present");
				extent.extentLoggerPass("", "Combo Offer Widget below the player is not Present,expected behaviour");

			} else {
				logger.error("Combo Offer Widget below the player is Present");
				extent.extentLoggerFail("", "Combo Offer Widget below the player is Present,expected behaviour");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void ExpiresInHoursBelowThePlayer(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is not able to see watch time validity (Expires in XX hours ) below the player in comsumption page");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(2500);
			if (checkElementDisplayed(PWAComboOfferPage.objTrailer, "Trailer")) {
				click(PWAComboOfferPage.objTrailer, "Trailer");
				waitTime(2500);
			}
			if (!checkElementDisplayed(PWAComboOfferPage.objExpiresinDaysTxtBelowThePlayer,
					"watch time validity (Expires in XX hours ) below the player")) {

				logger.info("watch time validity (Expires in XX hours ) below the player is not Present");
				extent.extentLoggerPass("",
						"watch time validity (Expires in XX hours ) below the player is not Present,expected behaviour");

			} else {
				logger.error("watch time validity (Expires in XX hours ) below the player is Present");
				extent.extentLoggerFail("",
						"watch time validity (Expires in XX hours ) below the player is Present,expected behaviour");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void ExpiresInRentalAndWatchTime(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is not able to see \"Expires in <rental duration>\" and \"Expires in <watchtime>\"  in My Rental page");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");
			Thread.sleep(3000);

			if (!checkElementDisplayed(PWAComboOfferPage.objRentalValidateTxt, "Rental duration")) {

				logger.info("Expires in <Rental duration> is not Present");
				extent.extentLoggerPass("", "Expires in <Rental duration> is not Present,expected behaviour");

			} else {
				logger.error("Expires in <Rental duration> is Present");
				extent.extentLoggerFail("", "Expires in <Rental duration> is Present,expected behaviour");
			}

			if (!checkElementDisplayed(PWAComboOfferPage.objWatchTimevalidateTxt, "Watch time")) {

				logger.info("Expires in <Watch time> is not Present");
				extent.extentLoggerPass("", "Expires in <Watch time> is not Present,expected behaviour");

			} else {
				logger.error("Expires in <Watch time> is Present");
				extent.extentLoggerFail("", "Expires in <Watch time> is Present,expected behaviour");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void componentsInRentalAndWatchTime(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that below components are displayed in My Rentals");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");
			Thread.sleep(3000);
			if (checkElementDisplayed(PWAComboOfferPage.objMyRentalTitle, "Supermoon title in My rentals")) {
				String title = getWebDriver().findElement(PWAComboOfferPage.objMyRentalTitle).getText();

				logger.info("Supermoon title in My rentals is  Present as: " + title);
				extent.extentLoggerPass(title, "Supermoon title in My rentals is Present,expected behaviour");

			} else {
				logger.error("Supermoon title in My rentals is not Present");
				extent.extentLoggerFail("", "Supermoon title in My rentals is not Present,expected behaviour");
			}

			if (verifyElementDisplayed(PWAComboOfferPage.objWatchNowCTA)
					|| verifyElementDisplayed(PWAComboOfferPage.objResumeCTA)) {

				logger.info("Watch Now CTA is Present in My rentals Page");
				extent.extentLoggerPass("", "Watch Now CTA is Present in My rentals Page,expected behaviour");

			}
			if (!checkElementDisplayed(PWAComboOfferPage.objExpiresDaysTxt, "Expiry Date")) {

				logger.info("Expiry time is not mentioned in My rentals Page");
				extent.extentLoggerPass("", "Expiry time is not mentioned in My rentals Page,expected behaviour");

			} else {
				logger.info("Expiry time is mentioned in My rentals Page");
				extent.extentLoggerFail("", "Expiry time is mentioned in My rentals Page,expected behaviour");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void activeAndExpiryInRentalAndWatchTime(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Validate that both active and expired Live TV TVOD or TVOD Videos contents are displayed in My rentals screen");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");
			Thread.sleep(3000);

			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume")) {

				logger.info("Live TV TVOD is still active in My rentals Page");
				extent.extentLoggerPass("", "Live TV TVOD is still active in My rentals Page,expected behaviour");

			}
			if (checkElementDisplayed(PWAComboOfferPage.objWatchNowCTA, "Watch")) {
				logger.info("Live TV TVOD is still active in My rentals Page");
				extent.extentLoggerPass("", "Live TV TVOD is still active in My rentals Page,expected behaviour");
			}

			if (!checkElementDisplayed(PWAComboOfferPage.objExpiredTxtInMyRental, "Expiry date")) {

				logger.info("Expired Live TV TVOD contents is not mentioned in My rentals Page");
				extent.extentLoggerPass("",
						"Expired Live TV TVOD contents is not mentioned in My rentals Page,expected behaviour");

			} else {
				logger.info("Expired Live TV TVOD contents is mentioned in My rentals Page");
				extent.extentLoggerFail("",
						"Expired Live TV TVOD contents is mentioned in My rentals Page,expected behaviour");

			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void NavigateToConsumptionScreenFromMyRental(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Validate User should be taken to respective content screen on tapping Live TV TVOD or TVOD Videos content in My rentals screen");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");
			Thread.sleep(3000);
			if (checkElementDisplayed(PWAComboOfferPage.objWatchNowCTA, "Watch Now")) {
				JSClick(PWAComboOfferPage.objZeerentalsWatch, "Watch Now CTA");
				waitTime(2500);
			} else {
				JSClick(PWAComboOfferPage.objZeerentalsResume, "Resume CTA");
				waitTime(2500);
			}
			waitTime(4000);
			if (checkElementDisplayed(PWAComboOfferPage.objTvodConsumptionPage, "Consumption Screen")) {
				extent.extentLoggerPass("",
						"User is able navigate to comsuption Screen after tapping on Supermoon content in My rental page");
				logger.info(
						"User is able navigate to comsuption Screen after tapping on Supermoon content in My rental page");
			} else {
				extent.extentLoggerFail("", "User is not able to navigate to the consumption screen");
				logger.error("User is not able to navigate to the consumption screen");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void noRentalTimeValidityInZeeplexPage(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user is not able to see Rental time validity in Rental popup");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);

			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			if (!checkElementDisplayed(PWAComboOfferPage.objExpiresDaysTxt, "Expiry date")) {
				extent.extentLoggerPass("", "user is not able to see Rental time validity in Rental popup");
				logger.info("user is not able to see Rental time validity in Rental popup");
			} else {
				extent.extentLoggerFail("", "user is able to see Rental time validity in Rental popup");
				logger.error("user is able to see Rental time validity in Rental popup");

			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void HowItWorksInConsumptionPage(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that \"How it works\" banner is not displayed in consumption page");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			if (verifyElementDisplayed(PWAComboOfferPage.objWatchNowCTA)) {

				JSClick(PWAComboOfferPage.objWatchNowCTA, "Watch CTA");
				waitTime(3000);

			} else {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
				waitTime(3000);
			}

			if (!verifyElementDisplayed(PWAComboOfferPage.objHowItworksConsumption)) {
				extent.extentLoggerPass("", "\"How it works\" banner is not displayed in consumption page");
				logger.info("\"How it works\" banner is not displayed in consumption page");
			} else {
				extent.extentLoggerFail("", "\"How it works\" banner is displayed in consumption page");
				logger.error("\"How it works\" banner is displayed in consumption page");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
			logout();
		}
	}

	public void supermoonInContinueWatchingTray(String userType, String LiveTvContent) throws Exception {
		extent.HeaderChildNode("Verify that post watching LiveTV content is not added to \"Continue watching\" tray");
		oneYearPremium6MSupermoonUser();
		waitTime(3500);
		navigateToAnyScreenOnWeb("ZEEPLEX");
		waitTime(3500);
		JSClick(PWAHomePage.objPlaybackMovieTitle(LiveTvContent), LiveTvContent);
		if (checkElementDisplayed(PWAComboOfferPage.objWatchNowCTA, "Watch Now")) {
			JSClick(PWAComboOfferPage.objWatchNowCTA, "Watch Now CTA");
		}
		if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume CTA")) {
			JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
			waitTime(3500);
		}
		if (checkElementDisplayed(PWAPlayerPage.objPlayerAdPresent, "Wait till ad to complete")) {
			// objPlayerAdPresent
			waitForPlayerAdToComplete2("Live show");
		}
		waitTime(10000);
		navigateToAnyScreenOnWeb("Home");
		waitTime(2000);
		if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Coninue Watching tray") == true) {
			ArrayList<String> ContinueWatching = new ArrayList<String>();

			for (int i = 1; i < 4; i++) {
				String updatedContent = getElementPropertyToString("innerText",
						PWAContinueWatchingTrayPage.objCardTitle(i), "Content");
				ContinueWatching.add(updatedContent);
			}
			logger.info(ContinueWatching);
			if (ContinueWatching.contains(LiveTvContent)) {
				logger.error(LiveTvContent + " is present in Continue watching tray");
				extent.extentLoggerFail("", LiveTvContent + " is present in Continue watching tray");
			} else {
				logger.info(LiveTvContent + " is not present in Continue watching tray");
				extent.extentLoggerPass("", LiveTvContent + " is not present in Continue watching tray");
			}
		}
	}

	public void shareFunctionalitySupermoon(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user is able to share the LiveTV content as existing ");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");

			waitTime(3500);
			if (checkElementDisplayed(PWAComboOfferPage.objWatchNowCTA, "Watch Now")) {
				JSClick(PWAComboOfferPage.objWatchNowCTA, "Watch Now CTA");
			} else {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
			}
			waitTime(3500);

			ShareFunctionality();
			waitTime(3000);
			navigateHome();
			// logout();
		}

	}

	public void watchlistFunctionalitySupermoon(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify that for live channel watchlist option is not displayed");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			if (checkElementDisplayed(PWAComboOfferPage.objWatchNowCTA, "Watch now")) {
				JSClick(PWAComboOfferPage.objWatchNowCTA, "Watch now CTA");
				waitTime(3000);
			} else if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
				waitTime(3000);

			} else {

				JSClick(PWAComboOfferPage.objSupermoonImgInZeeplex, "Supermoon Content ");
				waitTime(3000);
			}

			waitTime(3500);
			ScrollToTheElementWEB(PWAComboOfferPage.objSharebelowPlayer);
			waitTime(2500);
			if (!checkElementDisplayed(PWAPlayerPage.watchListBtn, "WatchList icon")) {
				logger.info("For live channel watchlist option is not displayed");
				extent.extentLoggerPass("", "For live channel watchlist option is not displayed");
			} else {
				logger.info("For live channel watchlist option is displayed");
				extent.extentLoggerFail("", "For live channel watchlist option is displayed");

			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void titleBelowThePlayerSupermoon(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify that user is able to see the title of the LiveTV content i.e event name)");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			// objContentTitleLiveTVname
			if (checkElementDisplayed(PWAComboOfferPage.objWatchNowCTA, "Watch now")) {
				JSClick(PWAComboOfferPage.objWatchNowCTA, "Watch now CTA");
				waitTime(3000);
			} else if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
				waitTime(3000);

			} else {

				JSClick(PWAComboOfferPage.objSupermoonImgInZeeplex, "Supermoon Content ");
				waitTime(3000);
			}
			waitTime(3000);
			if (verifyElementDisplayed(PWAPlayerPage.objContentTitleLiveTVname)) {
				logger.info("user is able to see the title of the LiveTV content i.e Supermoon");
				extent.extentLoggerPass("", "user is able to see the title of the LiveTV content i.e Supermoon");
			} else {
				logger.info("user not able to see the title of the LiveTV content i.e Supermoon");
				extent.extentLoggerFail("", "user not able to see the title of the LiveTV content i.e Supermoon");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);

		}
	}

	public void descriptionBelowShareBtn(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify that short description of the Live TV content is displayed below Share ");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");

			waitTime(3500);
			if (checkElementDisplayed(PWAComboOfferPage.objWatchNowCTA, "Watch now")) {
				JSClick(PWAComboOfferPage.objWatchNowCTA, "Watch now CTA");
				waitTime(3000);
			} else if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
				waitTime(3000);

			} else {

				JSClick(PWAComboOfferPage.objSupermoonImgInZeeplex, "Supermoon Content ");
				waitTime(3000);
			}

			waitTime(3500);
			if (checkElementDisplayed(PWAComboOfferPage.objDescBelowShareBtn, "Description below share icon")) {
				String Desc = getWebDriver().findElement(PWAComboOfferPage.objDescBelowShareBtn).getText();
				logger.info(Desc);
				logger.info(
						"user is able to see short description of the Live TV content is displayed below Share icon");
				extent.extentLoggerPass("",
						"user is able to see short description of the Live TV content is displayed below Share icon");
			} else {
				logger.info(
						"user is not able to see short description of the Live TV content is displayed below Share icon");
				extent.extentLoggerFail("",
						"user is not able to see short description of the Live TV content is displayed below Share icon");
			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
			logout();
		}
	}

	public void zeeplexLogoInLiveTVODConsumption(String userType) throws Exception {
		// All type of user without active supermoon
		extent.HeaderChildNode("Verify that ZEEPLEX unit(logo) is not displayed on live tv TVOD consumption page");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		waitTime(3000);

		if (checkElementDisplayed(PWAComboOfferPage.objTrailer, "Trailer")) {
			JSClick(PWAComboOfferPage.objTrailer, "Trailer CTA");
			waitTime(3000);
		} else {
			JSClick(PWAComboOfferPage.objSupermoonImgInZeeplex, "Supermoon Content ");
			waitTime(3000);

		}
		if (!checkElementDisplayed(PWAComboOfferPage.objZeePlexLogo, "ZeePlex Logo in consumption page")) {
			logger.info("ZeePlex Logo in live tv TVOD consumption page is not displayed");
			extent.extentLoggerPass("", "ZeePlex Logo in live tv TVOD consumption page is not displayed");
		} else {
			logger.info("ZeePlex Logo in live tv TVOD consumption page is displayed");
			extent.extentLoggerFail("", "ZeePlex Logo in live tv TVOD consumption page is displayed");
		}
		click(PWAHomePage.objZeeLogo, "Zee logo");
		waitTime(2500);
	}

	public void zeeplexLogoInVideoTVODConsumption(String userType, String videoname) throws Exception {
		extent.HeaderChildNode("Verify that ZEEPLEX unit(logo) is not displayed on Video TVOD consumption page");
		// All type of user without active supermoon
		click(PWAHomePage.objSearchBtn, "Seach button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, videoname, "Search Field");
		waitTime(2000);

		JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, videoname);

		waitTime(3500);
		if (!checkElementDisplayed(PWAComboOfferPage.objZeePlexLogo, "ZeePlex Logo in consumption page")) {
			logger.info("ZeePlex Logo in Video TVOD consumption page is not displayed ");
			extent.extentLoggerPass("", "ZeePlex Logo in Video TVOD consumption page is not displayed ");
		} else {
			logger.info("ZeePlex Logo in Video TVOD consumption page is displayed");
			extent.extentLoggerFail("", "ZeePlex Logo in Video TVOD consumption page is displayed");
		}
		click(PWAHomePage.objZeeLogo, "Zee logo");
		waitTime(2500);
	}

	public void metaInfoForVideoTVODConsumption(String userType, String videoname) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see the following meta information for Video TVOD Content:");
			oneYearPremium6MSupermoonUser();
			waitTime(3500);
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, videoname, "Search Field");
			waitTime(2000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, videoname);

			waitTime(4500);
			// title of the content
			if (verifyElementDisplayed(PWAPlayerPage.objContentName)) {
				String contentname = getWebDriver().findElement(PWAPlayerPage.objContentName).getText();
				logger.info(contentname);
				extent.extentLogger("", contentname);
				logger.info("user is able to see the title of the Video TVOD content");
				extent.extentLoggerPass("", "user is able to see the title of the Video TVOD content");
			} else {
				logger.info("user not able to see the title of the Video TVOD content");
				extent.extentLoggerFail("", "user not able to see the title of the Video TVOD content");
			}
			// date:-objContentMetaDate
			if (verifyElementDisplayed(PWAComboOfferPage.objContentMetaDate)) {
				String ContentMetaDate = getWebDriver().findElement(PWAComboOfferPage.objContentMetaDate).getText();
				logger.info(ContentMetaDate);
				extent.extentLogger("", ContentMetaDate);
				logger.info("user is able to see the Date of the Video TVOD content");
				extent.extentLoggerPass("", "user is able to see the Date of the Video TVOD content");
			} else {
				logger.info("user not able to see the Date of the Video TVOD content");
				extent.extentLoggerFail("", "user not able to see the Date of the Video TVOD content");
			}
			// objcontentDuration
			if (verifyElementDisplayed(PWAComboOfferPage.objcontentDuration)) {
				String ContentDuration = getWebDriver().findElement(PWAComboOfferPage.objcontentDuration).getText();
				logger.info(ContentDuration);
				extent.extentLogger("", ContentDuration);
				logger.info("user is able to see the Duration of the Video TVOD content");
				extent.extentLoggerPass("", "user is able to see the Date of the Video TVOD content");
			} else {
				logger.info("user not able to see the Duration of the Video TVOD content");
				extent.extentLoggerFail("", "user not able to see the Date of the Video TVOD content");
			}

			// Certification
			if (verifyElementDisplayed(PWAComboOfferPage.objContentMetaAgeRating)) {
				String ContentMetaCertificate = getWebDriver().findElement(PWAComboOfferPage.objContentMetaAgeRating)
						.getText();
				logger.info(ContentMetaCertificate);
				extent.extentLogger("", ContentMetaCertificate);
				logger.info("user is able to see the Certification of the Video TVOD content");
				extent.extentLoggerPass("", "user is able to see the Certification of the Video TVOD content");
			} else {
				logger.info("user is not able to see the Certification of the Video TVOD content");
				extent.extentLoggerFail("", "user is not able to see the Certification of the Video TVOD content");
			}

			// objcontentGenre
			if (verifyElementDisplayed(PWAComboOfferPage.objcontentGenre)) {
				String ContentMetaGenr = getWebDriver().findElement(PWAComboOfferPage.objcontentGenre).getText();
				logger.info(ContentMetaGenr);
				extent.extentLogger("", ContentMetaGenr);
				logger.info("user is able to see the GENRE of the Video TVOD content");
				extent.extentLoggerPass("", "user is able to see the GENRE of the Video TVOD content");
			} else {
				logger.info("user is not able to see the GENRE of the Video TVOD content");
				extent.extentLoggerFail("", "user is not able to see the GENRE of the Video TVOD content");
			}
			// Watchlist
			if (!verifyElementPresent(PWAPlayerPage.watchListBtn, "WatchList icon")) {
				logger.info("For Video TVOD watchlist option is not displayed");
				extent.extentLoggerFail("", "For Video TVOD watchlist option is not displayed");
			} else {
				logger.info("For Video TVOD watchlist option is displayed");
				extent.extentLoggerPass("", "For Video TVOD watchlist option is displayed");

			}

			// Share
			if (verifyElementDisplayed(PWAComboOfferPage.objsharebtnForTvodContent)) {
				logger.info("user is able to see the GENRE of the Video TVOD content");
				extent.extentLoggerPass("", "user is able to see the GENRE of the Video TVOD content");
			} else {
				logger.info("user is not able to see the GENRE of the Video TVOD content");
				extent.extentLoggerFail("", "user is not able to see the GENRE of the Video TVOD content");
			}

			// description
			if (checkElementDisplayed(PWAComboOfferPage.objDescBelowShareBtn, "Description below share icon")) {
				String Desc = getWebDriver().findElement(PWAComboOfferPage.objDescBelowShareBtn).getText();
				logger.info(Desc);
				extent.extentLogger("", Desc);
				logger.info(
						"user is able to see short description of the video TVOD content is displayed below Share icon");
				extent.extentLoggerPass("",
						"user is able to see short description of the video TVOD content is displayed below Share icon");
			} else {
				logger.info(
						"user is not able to see short description of the video TVOD content is displayed below Share icon");
				extent.extentLoggerFail("",
						"user is not able to see short description of the video TVOD content is displayed below Share icon");
			}

			// "Subtitle button"

//		if (checkElementDisplayed(PWAHomePage.objSubtitleButton, "Subtitle button")) {
//
//			logger.info("user is able to see Subtitle button of the video TVOD content is displayed");
//			extent.extentLoggerPass("", "user is able to see Subtitle button of the video TVOD content is displayed");
//		} else {
//			logger.info("user is not able to see Subtitle button of the video TVOD content is displayed");
//			extent.extentLoggerFail("",
//					"user is not able to see Subtitle button of the video TVOD content is displayed");
//		}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void xdefaultUrlVerification(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-8657 Change the \"x-default\" URL in hreflang tag across all the zee5 pages.");
		// Home page
		extent.extentLogger("", "---------- Home page ----------");
		navigateHome();
		verifyXDefaultHref("Home page");
		// Home page tray collection
		extent.extentLogger("", "---------- Home page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Home page");
		// TV Shows
		extent.extentLogger("", "---------- TV Shows page ----------");
		navigateToAnyScreenOnWeb("TV Shows");
		verifyXDefaultHref("TV Shows page");
		// TV Shows page tray collection
		extent.extentLogger("", "---------- TV Shows page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from TV Shows page");
		// Movies page
		extent.extentLogger("", "---------- Movies page ----------");
		navigateToAnyScreenOnWeb("Movies");
		verifyXDefaultHref("Movies page");
		// Movies page tray collection
		extent.extentLogger("", "---------- Movies page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Movies page");
		// Web Series
		extent.extentLogger("", "---------- Web Series page ----------");
		navigateToAnyScreenOnWeb("Web Series");
		verifyXDefaultHref("Web Series page");
		// Web Series page tray collection
		extent.extentLogger("", "---------- Web Series page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Web Series page");
		// News
		extent.extentLogger("", "---------- News page ----------");
		navigateToAnyScreenOnWeb("News");
		verifyXDefaultHref("News page");
		// News tray collection
		extent.extentLogger("", "---------- News page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from News page");
		// Premium
		extent.extentLogger("", "---------- Premium page ----------");
		navigateToAnyScreenOnWeb("Premium");
		verifyXDefaultHref("Premium page");
		// Premium tray collection
		extent.extentLogger("", "---------- Premium page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Premium page");
		// Live TV
		extent.extentLogger("", "---------- Live TV page ----------");
		navigateToAnyScreenOnWeb("Live TV");
		verifyXDefaultHref("Live TV page");
		// Channel Guide
		extent.extentLogger("", "---------- Channel Guide page ----------");
		navigateToAnyScreenOnWeb("Live TV");
		click(PWALiveTVPage.objChannelGuideToggle, "Channel Guide");
		verifyXDefaultHref("Channel Guide page");
		// Zeeplex
		extent.extentLogger("", "---------- ZEEPLEX page ----------");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		verifyXDefaultHref("ZEEPLEX page");
		// Play
		extent.extentLogger("", "---------- Play page ----------");
		navigateToAnyScreenOnWeb("Play");
		verifyXDefaultHref("Play page");
		// Play tray collection
		extent.extentLogger("", "---------- Play page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Play page");
		// Web Stories
		extent.extentLogger("", "---------- Web Stories page ----------");
		navigateToAnyScreenOnWeb("Web Stories");
		verifyXDefaultHref("Web Stories page");
		// Web Stories tray collection
		extent.extentLogger("", "---------- Web Stories page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Web Stories page");
		navigateToHome();
		// Kids
		extent.extentLogger("", "---------- Kids page ----------");
		navigateToAnyScreenOnWeb("Kids");
		verifyXDefaultHref("Kids page");
		// Kids tray collection
		extent.extentLogger("", "---------- Kids page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Kids page");
		// Videos
		extent.extentLogger("", "---------- Videos page ----------");
		navigateToAnyScreenOnWeb("Videos");
		verifyXDefaultHref("Videos page");
		// Videos tray collection
		extent.extentLogger("", "---------- Videos page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Videos page");
		// Music
		extent.extentLogger("", "---------- Music page ----------");
		navigateToAnyScreenOnWeb("Music");
		verifyXDefaultHref("Music page");
		// Music tray collection
		extent.extentLogger("", "---------- Music page tray collection ----------");
		JSClick(PWAHomePage.objTrayListingButton, "More button of tray");
		verifyXDefaultHref("Tray listing from Music page");
		// Stories
		extent.extentLogger("", "---------- Stories page ----------");
		navigateToAnyScreenOnWeb("Stories");
		verifyXDefaultHref("Stories page");
		navigateToHome();
		// Channels
		extent.extentLogger("", "---------- Channels page ----------");
		navigateToAnyScreenOnWeb("Channels");
		verifyXDefaultHref("Channels page");
		// Movies Consumption
		extent.extentLogger("", "---------- Movies Consumption page ----------");
		navigateToHome();
		String movie = "Robin Hood And The Invincible Knight";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, movie, "Search Field");
		click(PWASearchPage.objSearchMoviesTab, "Movies tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(movie), "Searched content");
		verifyXDefaultHref("Movies Consumption page");
		// Episodes Consumption
		extent.extentLogger("", "---------- Episodes Consumption page ----------");
		navigateToHome();
		String episode = "The mysterious camera";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, episode, "Search Field");
		click(PWASearchPage.objSearchEpisodesTab, "Episodes tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(episode), "Searched content");
		verifyXDefaultHref("Episodes Consumption page");
		// Originals Consumption
		extent.extentLogger("", "---------- Originals Consumption page ----------");
		navigateToHome();
		String original = "A Personal Reason";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, original, "Search Field");
		click(PWASearchPage.objSearchEpisodesTab, "Episodes tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(original), "Searched content");
		verifyXDefaultHref("Originals Consumption page");
		// Trailer Consumption
		extent.extentLogger("", "---------- Trailers Consumption page ----------");
		navigateToHome();
		String trailer = "Trailer";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, trailer, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(trailer), "Searched content");
		verifyXDefaultHref("Trailers Consumption page");
		// Webisodes Consumption
		extent.extentLogger("", "---------- Webisodes Consumption page ----------");
		navigateToHome();
		String webisode = "Weekly Webisode";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, webisode, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(webisode), "Searched content");
		verifyXDefaultHref("Webisodes Consumption page");
		// Promos Consumptions
		extent.extentLogger("", "---------- Promos Consumption page ----------");
		navigateToHome();
		String promo = "Promo";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, promo, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(promo), "Searched content");
		verifyXDefaultHref("Promos Consumption page");
		// Music Consumption
		extent.extentLogger("", "---------- Music Consumption page ----------");
		navigateToHome();
		String music = "Mujhe Ishq Mein Rang De Mahi";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, music, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(music), "Searched content");
		verifyXDefaultHref("Music Consumption page");
		// Videos Consumption
		extent.extentLogger("", "---------- Videos Consumption page ----------");
		navigateToHome();
		String video = "Multiway Kurtas";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, video, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(video), "Searched content");
		verifyXDefaultHref("Video Consumption page");
		// VOD News Consumption
		extent.extentLogger("", "---------- VOD News Consumption page ----------");
		navigateToHome();
		String vodnews = "Mumbai People Reaction On Ease From Covid Lockdown Ristrictions";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, vodnews, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(vodnews), "Searched content");
		verifyXDefaultHref("Video Consumption page");
		// Live News Consumption
		extent.extentLogger("", "---------- Live News Consumption page ----------");
		navigateToHome();
		String livenews = "Zee News";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, livenews, "Search Field");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(livenews), "Searched content");
		verifyXDefaultHref("Live News Consumption page");
		// TV Show Details
		extent.extentLogger("", "---------- TV Show Details page ----------");
		navigateToHome();
		String tvshow = "Kundali Bhagya";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, tvshow, "Search Field");
		click(PWASearchPage.objSearchShowsTab, "TV Shows tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(tvshow), "Searched content");
		verifyXDefaultHref("TV Show Details page");
		// Web Series Details
		extent.extentLogger("", "---------- Web Series Details page ----------");
		navigateToHome();
		String webseries = "Sunflower";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, webseries, "Search Field");
		click(PWASearchPage.objSearchShowsTab, "TV Shows tab");
		mandatoryRegistrationPopUp(userType);
		click(PWASearchPage.objSearchResult(webseries), "Searched content");
		verifyXDefaultHref("Web Series Details page");

	}

	public void verifyXDefaultHref(String page) throws Exception {
		String currentUrl = getWebDriver().getCurrentUrl();
		currentUrl = "view-source:" + currentUrl;
		getWebDriver().get(currentUrl);
		String expectedHref = "https://www.zee5.com";
		currentUrl = currentUrl.split("zee5.com")[1];
		try {
			expectedHref = expectedHref + currentUrl;
		} catch (Exception e) {
			expectedHref = expectedHref + "/";
		}
		String actualHref = getElementPropertyToString("href", PWAHomePage.objxDefault, "Actual href for xdefault tag");
		if (actualHref == null) {
			waitTime(10000);
			actualHref = getElementPropertyToString("href", PWAHomePage.objxDefault, "Actual href for xdefault tag");
		}
		logger.info("Expected x-default url: " + expectedHref);
		extent.extentLogger("", "Expected x-default url: " + expectedHref);
		logger.info("Actual x-default url: " + actualHref);
		extent.extentLogger("", "Actual x-default url: " + actualHref);
		if (expectedHref.equals(actualHref)) {
			logger.info("x-default url verified for " + page);
			extent.extentLogger("", "x-default url verified for " + page);
		} else {
			logger.error("x-default url verification failed for " + page);
			extent.extentLoggerFail("", "x-default url verification failed for " + page);
		}
		Back(1);
	}

	public void redirectUserVerification(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-9343 Redirect user to the correct asset page");
		extent.extentLogger("", "--------------- Verify India content Search results ---------------");
		navigateToHome();
		String contentIndia = "Begusari - test India";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentIndia, "Search Field");
		mandatoryRegistrationPopUp(userType);
		waitTime(4000);
		if (checkElementDisplayed(PWASearchPage.objSearchResultTxt(contentIndia), contentIndia + " search result")) {
			logger.info("India content is displayed in Search Results of India region, expected behavior");
			extent.extentLogger("",
					"India content is displayed in Search Results of India region, expected behavior\"");
			extent.extentLogger("", "--------------- Verify India content Consumption ---------------");
			click(PWASearchPage.objSearchResultTxt(contentIndia), "Searched content");
			String titleIndia = getElementPropertyToString("innerText", PWAPlayerPage.objContentNameMetaInfo,
					"Content title");
			if (titleIndia.equalsIgnoreCase(contentIndia)) {
				logger.info("User navigated to Consumption page for India content");
				extent.extentLogger("", "User navigated to Consumption page for India content");
			} else {
				logger.error("User failed to navigate to Consumption page for India content");
				extent.extentLoggerFail("", "User failed to navigate to Consumption page for India content");
			}

		} else {
			logger.error("India content is not displayed in Search Results of India region");
			extent.extentLoggerFail("", "India content is not displayed in Search Results of India region");
		}
		extent.extentLogger("", "--------------- Verify Global content Search results ---------------");
		navigateToHome();
		String contentGlobal = "Begusari - test Global";
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentGlobal, "Search Field");
		waitTime(4000);
		if (checkElementDisplayed(PWASearchPage.objSearchResultTxt(contentGlobal), contentGlobal + " search result")) {
			logger.error("Global content should not be displayed in Search Results of India region");
			extent.extentLoggerFail("", "Global content should not be displayed in Search Results of India region");
		} else {
			logger.info("Global content is not displayed in Search Results of India region, expected behavior");
			extent.extentLogger("",
					"Global content is not displayed in Search Results of India region, expected behavior");
		}
		extent.extentLogger("", "--------------- Verify Global content Consumption ---------------");
		String url = "https://www.zee5.com/tvshows/details/begusarai/0-6-372/begusari-test-global/0-1-534121";
		getWebDriver().get(url);
		logger.info("Navigated to Global content url");
		extent.extentLogger("", "Navigated to Global content url");
		if (checkElementDisplayed(PWAHomePage.objOopsNoInfo, "Oops! No Information available")) {
			logger.info("Global content not displayed in India region, expected behavior");
			extent.extentLogger("", "Global content not displayed in India region, expected behavior");
		} else {
			logger.error("Oops! No Information available is not displayed for Global content in India region");
			extent.extentLoggerFail("",
					"Oops! No Information available is not displayed for Global content in India region");
		}
		mandatoryRegistrationPopUp(userType);
	}

	public void clickOnWatchListForVideoTVODConsumption(String userType, String videoname) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify that user is able to add the Exclusive video content in Mywatchlist page ");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, videoname, "Search Field");
			waitTime(3000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, videoname);

			waitTime(3500);
			scrollToTheElementWEB(PWAPlayerPage.watchListBtn);
			waitTime(2000);
			if (verifyElementPresent(PWAPlayerPage.watchListBtn, "WatchList icon")) {
				JSClick(PWAPlayerPage.watchListBtn, "WatchList icon");
				try {
					Boolean AddedtoWatchlistToastMessage = getWebDriver().getPageSource()
							.contains("//*[@class='toastMessage']");
					if (AddedtoWatchlistToastMessage == true) {

						extent.extentLogger("Toast", "Added to Watchlist Toast Message displayed");
						logger.info("Added to Watchlist Toast Message displayed");
					} else {
						extent.extentLogger("Toast", "Added to Watchlist Toast Message is not displayed");
						logger.info("Added to Watchlist Toast Message is not displayed");
					}
				} catch (Exception e) {
					System.out.println("Toast message is not displayed");
				}
				logger.info("user is able to add the Exclusive video content in Mywatchlist");
				extent.extentLoggerPass("", "user is able to add the Exclusive video content in Mywatchlist");
			} else {
				logger.info("user is not able to add the Exclusive video content in Mywatchlist");
				extent.extentLoggerFail("", "user is not able to add the Exclusive video content in Mywatchlist");

			}
			JSClick(PWAPlayerPage.watchListBtn, "WatchList icon");
			waitTime(2500);
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void VerifyInWatchListForVideoTVODConsumption(String userType, String videoname) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify Exclusive video content present under Videos tab in Mywatchlist  page");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, videoname, "Search Field");
			waitTime(3000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, videoname);

			waitTime(3500);
			scrollToTheElementWEB(PWAPlayerPage.watchListBtn);
			waitTime(2000);
			if (verifyElementPresent(PWAPlayerPage.watchListBtn, "WatchList icon")) {
				JSClick(PWAPlayerPage.watchListBtn, "WatchList icon");
				waitTime(555);
				try {
					Boolean AddedtoWatchlistToastMessage = getWebDriver().getPageSource()
							.contains("//*[@class='toastMessage']");
					if (AddedtoWatchlistToastMessage == true) {

						extent.extentLogger("Toast", "Added to Watchlist Toast Message displayed");
						logger.info("Added to Watchlist Toast Message displayed");
					} else {
						extent.extentLogger("Toast", "Added to Watchlist Toast Message is not displayed");
						logger.info("Added to Watchlist Toast Message is not displayed");
					}
				} catch (Exception e) {
					System.out.println("Toast message is not displayed");
				}
			}
			click(PWAHomePage.objProfileMenu, "Profile Menu");
			waitTime(2000);
			JSClick(PWAAddToWatchListPage.objMyWatchList, "WatchList in Hamberger menu");
			waitTime(2000);
			click(PWAAddToWatchListPage.objVideoTab, "video tab");
			waitTime(2000);
			if (checkElementDisplayed(PWAAddToWatchListPage.objWatchlistedItem(videoname), videoname)) {
				logger.info("user is able to see the Exclusive video content present in Mywatchlist's videos tab");
				extent.extentLoggerPass("",
						"user is able to see the Exclusive video content present in Mywatchlist's videos tab");
			} else {
				logger.info("user is able to see the Exclusive video content not present in Mywatchlist's videos tab");
				extent.extentLoggerFail("",
						"user is able to see the Exclusive video content not present in Mywatchlist's videos tab");

			}
			JSClick(PWAAddToWatchListPage.objRemoveContentsInWatchList, " Remove all in WatchList");
			waitTime(2500);
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);

		}
	}

	public void VerifyPreRollAdForLiveTVODContent(String userType, String LiveTvTVODContent) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify whether pre-roll ads are played for LiveTV content");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(2500);
			scrollToTheElementWEB(PWAComboOfferPage.objLiveTVTVODItem(LiveTvTVODContent));
			waitTime(1500);
			JSClick(PWAComboOfferPage.objLiveTVTVODItem(LiveTvTVODContent), LiveTvTVODContent);
			waitTime(2500);
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
				waitTime(2500);
			} else {
				JSClick(PWAComboOfferPage.objWatchNowCTAInPlayer, "Watch Now");
				waitTime(2500);
			}
			if (checkElementDisplayed(PWAPlayerPage.objPlayerAdPresent, "Pre-roll Ad")) {

				logger.info("user is able to see pre-roll ads are played for LiveTV content :" + LiveTvTVODContent);
				extent.extentLoggerPass("",
						"user is able to see pre-roll ads are played for LiveTV content :" + LiveTvTVODContent);
			} else {
				logger.info("user is not able to see pre-roll ads are played for LiveTV content :" + LiveTvTVODContent);
				extent.extentLoggerFail("",
						"user is not able to see pre-roll ads are played for LiveTV content :" + LiveTvTVODContent);

			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);

		}
	}

	public void PreAndMidRollAdsForExclusiveVODContent(String userType, String ExclusiveVODContent) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify whether pre-roll and mid-roll ads are played for Exclusive VOD content");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");
			Thread.sleep(3000);
			scrollToTheElementWEB(PWAComboOfferPage.objLiveTVTVODItem(ExclusiveVODContent));
			waitTime(1500);
			JSClick(PWAComboOfferPage.objLiveTVTVODItem(ExclusiveVODContent), ExclusiveVODContent);
			waitTime(2500);
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
				waitTime(2500);
			} else {
				JSClick(PWAComboOfferPage.objWatchNowCTAInPlayer, "Watch Now");
				waitTime(2500);
			}

			// PRE-ROLL
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("user is able to see pre-roll ads are played for Exclusive VOD Content: "
						+ ExclusiveVODContent);
				extent.extentLoggerPass("Ad", "user is able to see pre-roll ads are played for Exclusive VOD Content: "
						+ ExclusiveVODContent);
				waitTime(5000);
				waitForPlayerAdToComplete("Video Player");
			} else {
				logger.info("user is not able to see pre-roll ads are played for Exclusive VOD Content: "
						+ ExclusiveVODContent);
				extent.extentLoggerFail("Ad",
						"user is not able to see pre-roll ads are played for Exclusive VOD Content: "
								+ ExclusiveVODContent);
			}
			waitTime(6000);
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
			playerScrubTillMidWeb();
			click(PWAPlayerPage.objPlayerPlay, "Play Icon");
			waitTime(2000);
			// MID-ROLL
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("user is able to see mid-roll ads are played for Exclusive VOD Content: "
						+ ExclusiveVODContent);
				extent.extentLoggerPass("Ad", "user is able to see mid-roll ads are played for Exclusive VOD Content: "
						+ ExclusiveVODContent);
				waitTime(5000);
				waitForPlayerAdToComplete("Video Player");
			} else {
				logger.info("user not able to see mid-roll ads are played for Exclusive VOD Content: "
						+ ExclusiveVODContent);
				extent.extentLoggerFail("Ad", "user not able to see mid-roll ads are played for Exclusive VOD Content: "
						+ ExclusiveVODContent);

			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void PostRollAdsForExclusiveVODContent(String userType, String ExclusiveVODContent) throws Exception {
		extent.HeaderChildNode("Verify whether post-roll ads are not played for Exclusive VOD content");
		oneYearPremium6MSupermoonUser();
		waitTime(3500);
		navigateToAnyScreenOnWeb("ZEEPLEX");
		waitTime(2500);
		scrollToTheElementWEB(PWAComboOfferPage.objLiveTVTVODItem(ExclusiveVODContent));
		waitTime(1500);
		JSClick(PWAComboOfferPage.objLiveTVTVODItem(ExclusiveVODContent), ExclusiveVODContent);
		waitTime(2500);
		if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {

			waitForPlayerAdToComplete("Video Player");
		}
		waitTime(6000);
		click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
		playerScrubTillLastWeb();
		click(PWAPlayerPage.objPlayerPlay, "Play Icon");

		// POST-ROLL
		if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
			logger.info(
					"user is able to see post-roll ads are played for Exclusive VOD Content: " + ExclusiveVODContent);
			extent.extentLoggerFail("Ad",
					"user is able to see post-roll ads are played for Exclusive VOD Content: " + ExclusiveVODContent);
			waitTime(5000);
			waitForPlayerAdToComplete("Video Player");
		} else {
			logger.info(
					"user not able to see post-roll ads are played for Exclusive VOD Content: " + ExclusiveVODContent);
			extent.extentLoggerPass("Ad",
					"user not able to see post-roll ads are played for Exclusive VOD Content: " + ExclusiveVODContent);

		}
	}

	public void noAdsForSubscribedUser(String userType) throws Exception {
		// usertype should be SubscribedUser
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"Verify ads are not played for other SVOD(premium) contents except Live TV TVOD Content");
			// Natasaarvabhowma
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, "Natasaarvabhowma", "Search Field");
			waitTime(3000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, "Natasaarvabhowma");

			waitTime(3500);
			if (!checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("user not able to see ads are played for Premium Content at begining");
				extent.extentLoggerPass("Ad", "user not able to see ads are played for Premium Content at begining");
			}
			// mid-roll
			waitTime(6000);
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
			playerScrubTillMidWeb();
			click(PWAPlayerPage.objPlayerPlay, "Play Icon");
			waitTime(2000);
			if (!checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("user not able to see ads are played for Premium Content at middle ");
				extent.extentLoggerPass("Ad", "user not able to see ads are played for Premium Content at middle ");
			}
			// post-roll
			waitTime(6000);
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
			playerScrubTillLastWeb();
			click(PWAPlayerPage.objPlayerPlay, "Play Icon");
			waitTime(1000);
			if (!checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("user not able to see ads are played for Premium Content at Last ");
				extent.extentLoggerPass("Ad", "user not able to see ads are played for Premium Content at Last ");
			}
		}
	}

	public void playAndPauseForLiveTvTVODContent(String userType, String LiveTvTVODContent) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify Whether Play/Pause is displayed on player screen for LiveTV TVOD content");
			oneYearPremium6MSupermoonUser();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(2500);
			// scrollToTheElementWEB(PWAComboOfferPage.objLiveTVTVODItem(LiveTvTVODContent));
			waitTime(1500);
			JSClick(PWAComboOfferPage.objLiveTVTVODItem(LiveTvTVODContent), "Demo Moon Live");
			waitTime(2500);
			// mouseHover();
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume CTA")) {
				click(PWAComboOfferPage.objResumeCTA, "Resume CTA");
			}
			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.pauseBtn, "Pause icon")) {
				waitTime(500);

				logger.info("user able to see Pause icon on player screen ");
				extent.extentLoggerPass("", "user able to see Pause icon on player screen ");

				JSClick(PWAPlayerPage.pauseBtn, "Pause icon");
			}
			if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
				waitTime(500);

				logger.info("user able to see Play icon on player screen ");
				extent.extentLoggerPass("", "user able to see Play icon on player screen ");

				JSClick(PWAPlayerPage.playBtn, "Play icon");
			}
		}
	}

	public void TermsAndPrivacyPolicGuest(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			Loginto299Pack();
			waitTime(2500);
			TermsAndPolicy(userType);
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void TermsOfUsePageGuest(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			TermsOfUsePage(userType);
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void PrivacyPolicyPageGuest(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			PrivacyPolicyPage(userType);
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
			logout();
		}
	}

	public void CreditAndDebitCardAsPerVD(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode("Verify that user is able to see Credit card /Debit card Card tile");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Combo Offer");
			click(PWAComboOfferPage.objBuyCombobutton, "Combo Offer");
			waitTime(3000);
			PWAIframe();
			verifyElementPresent(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			waitTime(5000);
			String creditcard = getText(PWASubscriptionPages.objCreditAndDebitCardBtn);
			extent.extentLogger("", "credit / Debit card: " + creditcard);
			if (creditcard.contentEquals("Credit / Debit Card")) {
				logger.info("User should be able to see Credit card/Debit card Tile as per VD, expected behaviour");
				extent.extentLoggerPass("",
						"User should be able to see Credit card/Debit card Tile as per VD, expected behaviour");
			} else {
				logger.info("User not able to see Credit card/Debit card Tile as per VD.");
				extent.extentLoggerFail(" ", "User not able to see Credit card/Debit card Tile as per VD.");

			}
			navigateHome();
		}
	}

	public void CardDetailsValidation(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify that user is able to see Credit card /Debit  Card Card Number , Expiry , CVV , Save this card for faster payment.");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Combo Offer");
			click(PWAComboOfferPage.objBuyCombobutton, "Combo Offer");
			waitTime(3000);
			PWAIframe();

			verifyElementPresentAndClick(PWASubscriptionPages.objCreditAndDebitCardBtn, "Credit/Debit Card Option");
			waitTime(5000);
			String creditcard = getText(PWASubscriptionPages.objCreditAndDebitCardBtn);
			extent.extentLogger("", "credit / Debit card: " + creditcard);

			verifyElementPresentAndClick(PWASubscriptionPages.objEnterCreditAndDebitCardDetails,
					"Enter Credit/Debit Card Details");

			verifyElementPresent(PWASubscriptionPages.objCardNumber, "Enter Card Number Field");
			type(PWASubscriptionPages.objEnterCreditAndDebitCardDetails, "6522360047186261", "Enter Card Number Field");
			verifyElementPresent(PWASubscriptionPages.objExpiry, "Expiry Field");
			verifyElementPresent(PWASubscriptionPages.objEnterExpiry, "Enter Expiry Field");
			type(PWASubscriptionPages.objEnterExpiry, "0225", "Enter Expiry Field");
			verifyElementPresent(PWASubscriptionPages.objCVV, "CVV Field");
			verifyElementPresent(PWASubscriptionPages.objEnterCVV, "Enter CVV Field");
			type(PWASubscriptionPages.objEnterCVV, "123", "Enter CVV Field");
			verifyElementPresent(PWASubscriptionPages.objCreditDebitProceedToPay, "Proceed To Pay Button");

			extent.HeaderChildNode("Verify that user is able to Check /Uncheck the checkBox");
			verifyElementPresent(PWASubscriptionPages.objsavethiscard, "Save this card for faster payment");
			click(PWASubscriptionPages.objsavethiscard, "Save this card for faster payment");
			click(PWASubscriptionPages.objsavethiscard, "Save this card for faster payment");
			navigateHome();
		}
	}

	public void CheckORUncheckBox(String userType) throws Exception {
		if (userType.equals("NonSubscribeduser")) {
			extent.HeaderChildNode("Verify that user is able to Check /Uncheck the checkBox");
			verifyElementPresent(PWASubscriptionPages.objsavethiscard, "Save this card for faster payment");
			click(PWASubscriptionPages.objsavethiscard, "Save this card for faster payment");
			click(PWASubscriptionPages.objsavethiscard, "Save this card for faster payment");
		}
	}

	public void SearchBarInNetBanking(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode("Verify Whether Search bar is displayed in list of bank page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Combo Offer");
			click(PWAComboOfferPage.objBuyCombobutton, "Combo Offer");
			waitTime(3000);
			PWAIframe();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking, "Net banking");
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objsearchbarinnetbanking, "Search bar in netbanking")) {
				logger.info("User should be able to see search bar in top of list of bank page, expected behaviour");
				extent.extentLoggerPass("",
						"User should be able to see search bar in top of list of bank page, expected behaviour");
			} else {
				logger.info("User not able to see search bar in top of list of bank page");
				extent.extentLoggerFail(" ", "User not able to see search bar in top of list of bank page");

			}

		}
	}

	public void BankPageOnSearchedResult(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify Whether user navigates to bank page on clicking bank name from search result");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Combo Offer");
			click(PWAComboOfferPage.objBuyCombobutton, "Combo Offer");
			waitTime(3000);
			PWAIframe();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking, "Net banking");
			waitTime(3000);
			type(PWAHamburgerMenuPage.objsearchbarinnetbanking, "Axis", "Search bar in netbanking");
			verifyElementPresent(PWAHamburgerMenuPage.objPaymentoption("Axis Bank"), "Payment option");
			String bankname = getText(PWAHamburgerMenuPage.objPaymentoption("Axis Bank"));
			System.out.println(bankname);
			extent.extentLogger("", "Bank Name : " + bankname);
			if (bankname.contentEquals("Axis Bank")) {
				logger.info(
						"User should redirect to bank page on clicking bank name in search result, expected behaviour");
				extent.extentLoggerPass("",
						"User should redirect to bank page on clicking bank name in search result, expected behaviour");
			} else {
				logger.info("User not redirect to bank page on clicking bank name in search result");
				extent.extentLoggerFail(" ", "User not redirect to bank page on clicking bank name in search result");

			}
			navigateHome();
		}
	}

	public void ComboOfferWidgetBasedOnDisplayLanguage(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify that user is able to see combo offer widget only in English irrespective of user display language");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		verifyElementPresent(PWAComboOfferPage.objTrailer, "Trailer");
		click(PWAComboOfferPage.objTrailer, "Trailer");
		verifyElementPresent(PWAComboOfferPage.objComboOfferWidget, "Combo offer widget");
		String ComboOfferwidget = getText(PWAComboOfferPage.objComboOfferWidget);
		System.err.println(ComboOfferwidget);
		Kannadalanguageselection();
		String ComboOfferwidget1 = getText(PWAComboOfferPage.objComboOfferWidget);
		System.err.println(ComboOfferwidget1);
		if (ComboOfferwidget1.equals(ComboOfferwidget)) {
			logger.info(
					"combo offer widget only in English irrespective of user display language , expected behaviour");
			extent.extentLoggerPass(" ",
					"combo offer widget only in English irrespective of user display language , expected behaviour");
		} else {
			logger.info("combo offer widget is displayed based on display language ");
			extent.extentLoggerFail(" ", "combo offer widget is displayed based on display language ");
		}
		EnglishLanguageselection();
	}

	public void ExplorePremium999(String UserType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user is redirected to Homepage on clicking Explore Premium CTA");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now");
			click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now");
			click(PWAComboOfferPage.objBuyCombobutton, "Combo offer button");
			PWAComboOfferLoginInSubscriptionFlow(userType, "999");
			verifyElementPresent(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			click(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			if (verifyElementPresent(PWAHomePage.objHomePage, "Home ")) {
				logger.info("Home page is displayed, expected behaviour");
				extent.extentLoggerPass(" ", "Home page is displayed , expected behaviour");
			} else {
				logger.info("Home page is not displayed");
				extent.extentLoggerFail(" ", "Home page is not displayed");
			}
			navigateHome();
			logout();
		}
	}

	public void ExplorePremiumPopupClone999(String UserType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user is redirected to Homepage on clicking Explore Premium CTA");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now");
			click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now");
			click(PWAComboOfferPage.objBuyCombobutton, "Combo offer button");
			PWAComboOfferLoginInSubscriptionFlow(userType, "999");
			verifyElementPresent(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			// click(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			verifyElementPresent(PWAComboOfferPage.objCloseIconInPopup, "Close Icon");
			click(PWAComboOfferPage.objCloseIconInPopup, "Close Icon");
			if (verifyElementPresent(PWAHomePage.objHomePage, "Home ")) {
				logger.info("Home page is displayed, expected behaviour");
				extent.extentLoggerPass(" ", "Home page is displayed , expected behaviour");
			} else {
				logger.info("Home page is not displayed");
				extent.extentLoggerFail(" ", "Home page is not displayed");
			}
			navigateHome();
			logout();
		}
	}

	public void ExplorePremium749(String UserType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user is redirected to Homepage on clicking Explore Premium CTA");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now");
			click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now");
			click(PWAComboOfferPage.objBuyCombobutton, "Combo offer button");
			PWAComboOfferLoginInSubscriptionFlow(userType, "749");
			verifyElementPresent(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			click(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			if (verifyElementPresent(PWAHomePage.objHomePage, "Home ")) {
				logger.info("Home page is displayed, expected behaviour");
				extent.extentLoggerPass(" ", "Home page is displayed , expected behaviour");
			} else {
				logger.info("Home page is not displayed");
				extent.extentLoggerFail(" ", "Home page is not displayed");
			}
			navigateHome();
			logout();
		}
	}

	public void ExplorePremiumPopupClone749(String UserType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user is redirected to Homepage on clicking Explore Premium CTA");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now");
			click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now");
			click(PWAComboOfferPage.objBuyCombobutton, "Combo offer button");
			PWAComboOfferLoginInSubscriptionFlow(userType, "749");
			verifyElementPresent(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			// click(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			verifyElementPresent(PWAComboOfferPage.objCloseIconInPopup, "Close Icon");
			click(PWAComboOfferPage.objCloseIconInPopup, "Close Icon");
			if (verifyElementPresent(PWAHomePage.objHomePage, "Home ")) {
				logger.info("Home page is displayed, expected behaviour");
				extent.extentLoggerPass(" ", "Home page is displayed , expected behaviour");
			} else {
				logger.info("Home page is not displayed");
				extent.extentLoggerFail(" ", "Home page is not displayed");
			}
			navigateHome();
			logout();
		}
	}

	public void ExplorePremium599(String UserType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user is redirected to Homepage on clicking Explore Premium CTA");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle, "ZEEPLEX Title");
			click(PWAComboOfferPage.objZeeplexTitle, "ZEEPLEX Title");
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now");
			click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now");
			click(PWAComboOfferPage.objBuyCombobutton, "Combo offer button");
			PWAComboOfferLoginInSubscriptionFlow(userType, "599");
			verifyElementPresent(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			click(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			if (verifyElementPresent(PWAHomePage.objHomePage, "Home ")) {
				logger.info("Home page is displayed, expected behaviour");
				extent.extentLoggerPass(" ", "Home page is displayed , expected behaviour");
			} else {
				logger.info("Home page is not displayed");
				extent.extentLoggerFail(" ", "Home page is not displayed");
			}
			navigateHome();
			logout();
		}
	}

	public void ExplorePremiumPopupClone599(String UserType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user is redirected to Homepage on clicking Explore Premium CTA");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle, "ZEEPLEX Title");
			click(PWAComboOfferPage.objZeeplexTitle, "ZEEPLEX Title");
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now");
			click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now");
			click(PWAComboOfferPage.objBuyCombobutton, "Combo offer button");
			PWAComboOfferLoginInSubscriptionFlow(userType, "599");
			verifyElementPresent(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			// click(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			verifyElementPresent(PWAComboOfferPage.objCloseIcon, "Close Icon");
			click(PWAComboOfferPage.objCloseIcon, "Close Icon");
			if (verifyElementPresent(PWAHomePage.objHomePage, "Home ")) {
				logger.info("Home page is displayed, expected behaviour");
				extent.extentLoggerPass(" ", "Home page is displayed , expected behaviour");
			} else {
				logger.info("Home page is not displayed");
				extent.extentLoggerFail(" ", "Home page is not displayed");
			}
			navigateHome();
			logout();
		}
	}

	public void ExplorePremium499(String UserType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user is redirected to Homepage on clicking Explore Premium CTA");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now");
			click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now");
			click(PWAComboOfferPage.objBuyCombobutton, "Combo offer button");
			PWAComboOfferLoginInSubscriptionFlow(userType, "499");
			verifyElementPresent(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			click(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			if (verifyElementPresent(PWAHomePage.objHomePage, "Home ")) {
				logger.info("Home page is displayed, expected behaviour");
				extent.extentLoggerPass(" ", "Home page is displayed , expected behaviour");
			} else {
				logger.info("Home page is not displayed");
				extent.extentLoggerFail(" ", "Home page is not displayed");

			}
			navigateHome();
			logout();
		}
	}

	public void ExplorePremiumPopupClone499(String UserType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user is redirected to Homepage on clicking Explore Premium CTA");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitForElement(PWAComboOfferPage.objRentNowInPlayer, 20, "Rent Now");
			click(PWAComboOfferPage.objRentNowInPlayer, "Rent Now");
			click(PWAComboOfferPage.objBuyCombobutton, "Combo offer button");
			PWAComboOfferLoginInSubscriptionFlow(userType, "499");
			verifyElementPresent(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			// click(PWAHamburgerMenuPage.objExplorePremium, "Explore Premium");
			verifyElementPresent(PWAComboOfferPage.objCloseIconInPopup, "Close Icon");
			click(PWAComboOfferPage.objCloseIconInPopup, "Close Icon");
			if (verifyElementPresent(PWAHomePage.objHomePage, "Home ")) {
				logger.info("Home page is displayed, expected behaviour");
				extent.extentLoggerPass(" ", "Home page is displayed , expected behaviour");
			} else {
				logger.info("Home page is not displayed");
				extent.extentLoggerFail(" ", "Home page is not displayed");
			}
			navigateHome();
			logout();
		}
	}

	public void TermsAndPrivacyPolicyNonSubscribeduser(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {

			TermsAndPolicy(userType);
		}
	}

	public void TermsOfUsePageNonSubscribeduser(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			TermsOfUsePage(userType);
		}
	}

	public void PrivacyPolicyPageNonSubscribeduser(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {

			PrivacyPolicyPage(userType);
		}
	}

	public void SixPopularBanks(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"Verify Whether User is able to see 6 popular bank details under netbanking with More banks CTA");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			if (verifyElementPresent(PWAComboOfferPage.objTrailer, "Watch trailer")) {
				JSClick(PWAComboOfferPage.objTrailer, "Watch trailer");
				waitTime(6000);
			} else {
				JSClick(PWAComboOfferPage.objSupermoonImgInZeeplex, "Supermoon Content ");
				waitTime(3000);
			}
			waitTime(3000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			waitTime(5000);
			PWAIframe();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking, "Net banking");
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objlistofbanks, "List of banks");
			int listofbanks = getCountweb(PWAHamburgerMenuPage.objlistofbanks);
			System.out.println(listofbanks);
			extent.extentLogger("", "List of banks : " + listofbanks);
			waitTime(3000);
			if (listofbanks == 6) {
				logger.info("User should be able to see 6 popular bank details under netbanking, expected behaviour");
				extent.extentLoggerPass("",
						"User should be able to see 6 popular bank details under netbanking, expected behaviour");
			} else {
				logger.info("User not able to see 6 popular bank details under netbanking");
				extent.extentLoggerFail(" ", "User not able to see 6 popular bank details under netbanking");

			}
		}
	}

	public void UPISelectionForNonRecuring(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"Verify that user is able to the select the UPI payment mode while purchasing non recurring plan");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			if (verifyElementPresent(PWAComboOfferPage.objTrailer, "Watch trailer")) {
				JSClick(PWAComboOfferPage.objTrailer, "Watch trailer");
				waitTime(6000);
			} else {
				JSClick(PWAComboOfferPage.objSupermoonImgInZeeplex, "Supermoon Content ");
				waitTime(3000);
			}
			waitTime(5000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			JSClick(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			waitTime(5000);
			PWAIframe();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("UPI"), "Payment option");
			if (verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext("Generate QR Code"), "Generate QR Code")) {
				logger.info(
						"User should be able to select UPI payment option for non recurring plan, expected behaviour");
				extent.extentLoggerPass("",
						"User should be able to select UPI payment option for non recurring plan, expected behaviour");
			} else {
				logger.info("User not able to select UPI payment option for non recurring plan");
				extent.extentLoggerFail(" ", "User not able to select UPI payment option for non recurring plan");

			}
		}
	}

	public void UPIPaymentScreenValidation(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("Verify the elements on the UPI payment mode section");
			// click(PWAHamburgerMenuPage.objPaymentoption("UPI"),"Payment option");
			verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext("Scan QR from your UPI App"),
					"Scan QR from your UPI App");
			verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext(
					"Scan the QR using any UPI app on your mobile phone like PhonePe, Paytm, GooglePay, BHIM, etc"),
					"Scan the QR using any UPI app on your mobile phone like PhonePe, Paytm, GooglePay, BHIM, etc");
			verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext("Generate QR Code"), "Generate QR Code");
			verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext("Enter UPI ID"), "Enter UPI ID");
			checkElementDisplayed(PWAHamburgerMenuPage.objenterupiid, "Enter upi Details");
			click(PWAHamburgerMenuPage.objenterupiid, "Enter upi Details");
			type(PWAHamburgerMenuPage.objenterupiid, "866@upi", "Email Field");
			waitTime(2000);
			verifyElementPresent(PWAHamburgerMenuPage.objupiproceedtopay, "Procced to pay");
		}

	}

	public void UPICountDownTimer(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("Verify that user is able to click on Generate QR CTA");
			click(PWAHamburgerMenuPage.objscanorcodetext("Generate QR Code"), "Generate QR Code");
			verifyElementPresent(PWAHamburgerMenuPage.objscanandpay, "Scan and pay OR code is generated");
			verifyElementPresent(PWAHamburgerMenuPage.objtimerinupi, "Timer upi");

			if (verifyElementPresent(PWAHamburgerMenuPage.objtimerinupi, "Timer upi")) {
				logger.info(
						"The Countdown should get started as soon as the QR Code is displayed on the screen of website, expected behaviour");
				extent.extentLoggerPass("",
						"The Countdown should get started as soon as the QR Code is displayed on the screen of website, expected behaviour");
			} else {
				logger.info(
						"The Countdown is not get started as soon as the QR Code is displayed on the screen of website");
				extent.extentLoggerFail(" ",
						"The Countdown is started as soon as the QR Code is displayed on the screen of website");
			}
		}
	}

	public void PlanSelectionPageUsingBackButtonInUPI(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("Verify that user is redirected to plan selection screen on clicking browser back");
			Back(1);
			scrollToTopOfPageWEB();
			waitTime(2500);
			if (verifyElementPresent(PWASubscriptionPages.objUpgradeTextJustPayingDifference,
					"Supermoon Subscription Page")) {
				logger.info("User should be redirected to previous page i.e plan selection page, expected behaviour");
				extent.extentLoggerPass("",
						"User should be redirected to previous page i.e plan selection page, expected behaviour");
			} else {
				logger.info("User not redirected to previous page i.e UPI payment page");
				extent.extentLoggerFail(" ", "User not redirected to previous page i.e UPI payment page");

			}
		}
	}

	public void EnterUPIID(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("Verify that user is able to select Enter UPI ID option as well");
			if (verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo")) {
				JSClick(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			}
			waitTime(5000);
			scrollToTopOfPageWEB();
			waitTime(3000);
			PWAIframe();

			verifyElementPresent(PWAHamburgerMenuPage.objPaymentoption("UPI"), "Payment option");
			click(PWAHamburgerMenuPage.objPaymentoption("UPI"), "Payment option");
			waitTime(3000);
			checkElementDisplayed(PWAHamburgerMenuPage.objenterupiid, "Enter upi Details");
			click(PWAHamburgerMenuPage.objenterupiid, "Enter upi Details");
			type(PWAHamburgerMenuPage.objenterupiid, "866@upi", "Email Field");
			String upiid = findElement(PWAHamburgerMenuPage.objenterupiid).getAttribute("value");
			System.out.println(upiid);
			if (upiid.contains("866@upi")) {
				logger.info("User should be able to Enter UPI ID , expected behaviour");
				extent.extentLoggerPass("", "User should be able to Enter UPI ID, expected behaviour");
			} else {
				logger.info("User is not able to Enter UPI ID");
				extent.extentLoggerFail(" ", "User is not able to Enter UPI ID");
			}
		}
	}

	public void GenerateORPageUsingBackArrowInUPI(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"Verify that user is able to land on UPI screen on clicking back arrow on the QR code screen");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			if (verifyElementPresent(PWAComboOfferPage.objTrailer, "Watch trailer")) {
				JSClick(PWAComboOfferPage.objTrailer, "Watch trailer");
				waitTime(6000);
			} else {
				JSClick(PWAComboOfferPage.objSupermoonImgInZeeplex, "Supermoon Content ");
				waitTime(3000);
			}
			waitTime(2000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			waitTime(5000);
			PWAIframe();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("UPI"), "Payment option");
			verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext("Generate QR Code"), "Generate QR Code");
			click(PWAHamburgerMenuPage.objscanorcodetext("Generate QR Code"), "Generate QR Code");
			verifyElementPresent(PWAHamburgerMenuPage.objupiarrow, "Arrow button");
			JSClick(PWAHamburgerMenuPage.objupiarrow, "Arrow button");
			waitTime(5000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext("Generate QR Code"), "Generate QR Code")) {
				logger.info("User should be redirected to previous page i.e UPI payment page, expected behaviour");
				extent.extentLoggerPass("",
						"User should be redirected to previous page i.e UPI payment page, expected behaviour");
			} else {
				logger.info("User not redirected to previous page i.e UPI payment page");
				extent.extentLoggerFail(" ", "User not redirected to previous page i.e UPI payment page");
			}
		}
	}

	public void noPlayerFunctionalityForLiveTVContent(String userType, String LiveTvTVODContent) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify Whether Seek bar,Forward,Rewind button is not displayed on player screen for LiveTV content");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(2500);
			// scrollToTheElementWEB(PWAComboOfferPage.objLiveTVTVODItem(LiveTvTVODContent));
			waitTime(1500);
			JSClick(PWAComboOfferPage.objLiveTVTVODItem(LiveTvTVODContent), LiveTvTVODContent);

			waitTime(2500);
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume CTA")) {
				click(PWAComboOfferPage.objResumeCTA, "Resume CTA");
			}
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {

				waitForPlayerAdToComplete("Video Player");
			}
			waitTime(6000);
			// mouseHover();

			if (!checkElementDisplayed(PWAPlayerPage.objPlaykitSeekBar, "Seek Bar")) {
				logger.info("Seek bar is not displayed for Live TV TVOD content: " + LiveTvTVODContent);
				extent.extentLoggerPass("", "Seek bar is not displayed for Live TV TVOD content: " + LiveTvTVODContent);
			}
			if (!checkElementDisplayed(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds icon")) {
				logger.info("Rewind 10 Seconds icon is not displayed for Live TV TVOD content: " + LiveTvTVODContent);
				extent.extentLoggerPass("",
						"Rewind 10 Seconds icon is not displayed for Live TV TVOD content: " + LiveTvTVODContent);
			}
			if (!checkElementDisplayed(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds icon")) {
				logger.info("Forward 10 Seconds icon is not displayed for Live TV TVOD content: " + LiveTvTVODContent);
				extent.extentLoggerPass("",
						"Forward 10 Seconds icon is not displayed for Live TV TVOD content: " + LiveTvTVODContent);
			}
		}
	}

	public void verifyLiveTvTagForLiveTVContent(String userType, String LiveTvTVODContent) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify Whether Live Tag  is displayed on player screen for LiveTV content");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(2500);
			// scrollToTheElementWEB(PWAComboOfferPage.objLiveTVTVODItem(LiveTvTVODContent));
			waitTime(1500);
			JSClick(PWAComboOfferPage.objLiveTVTVODItem(LiveTvTVODContent), LiveTvTVODContent);
			waitTime(2500);
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume CTA")) {
				click(PWAComboOfferPage.objResumeCTA, "Resume CTA");
			}
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {

				waitForPlayerAdToComplete("Video Player");
			}
			waitTime(5000);

			if (verifyElementPresent(PWAPlayerPage.objLivePlayerLiveTag, " Live Tag")) {
				logger.info(" Live Tag  is displayed on player screen for LiveTV content, expected behaviour");
				extent.extentLoggerPass("",
						" Live Tag  is displayed on player screen for LiveTV content, expected behaviour");
			} else {
				logger.info(" Live Tag is not displayed on player screen for LiveTV content");
				extent.extentLoggerFail(" ", " Live Tag is not displayed on player screen for LiveTV content");

			}
		}
	}

	public void VerifyPlayerControlsForVideoTVODConsumption(String userType, String videoname) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify Whether Player controls is displayed on player screen for Video content");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, videoname, "Search Field");
			waitTime(3000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, videoname);
			waitTime(3500);
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {

				waitForPlayerAdToComplete("Video Player");
			}
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume CTA")) {
				click(PWAComboOfferPage.objResumeCTA, "Resume CTA");
			}
			waitTime(5000);
			Actions actions = new Actions(getWebDriver());
			WebElement ele = getWebDriver().findElement(PWAPlayerPage.objPlaybackVideoOverlay);
			actions.moveToElement(ele).perform();
			if (ele.isDisplayed()) {
				verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button");
				checkElementDisplayed(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds icon");
				actions.moveToElement(ele).perform();

				verifyElementPresent(PWAPlayerPage.playBtn, "Play icon");
				actions.moveToElement(ele).perform();

				checkElementDisplayed(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds icon");
				actions.moveToElement(ele).perform();

				checkElementDisplayed(PWAPlayerPage.progressBar, "Progress bar");
				actions.moveToElement(ele).perform();

				verifyElementPresent(PWAPlayerPage.audioBtn, "Audio icon");
				actions.moveToElement(ele).perform();

				checkElementDisplayed(PWAPlayerPage.totalDurationTime, "Total duration time");
				actions.moveToElement(ele).perform();

				verifyElementPresent(PWAPlayerPage.settingsBtn, "Settings icon");
				actions.moveToElement(ele).perform();

				verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize window icon");
				actions.moveToElement(ele).perform();

				verifyElementPresent(PWAPlayerPage.totalDurationTime, "Total time");
				actions.moveToElement(ele).perform();

				verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
				verifyElementPresentAndClick(PWAPlayerPage.objPlayerQualityButton, "Quality Button");
				JSClick(PWAPlayerPage.objBestQualityOption, "Best quality");
				verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
				verifyElementPresentAndClick(PWAPlayerPage.objPlayerQualityButton, "Quality Button");
				String SelectedOption = getText(PWAPlayerPage.objPlayerSelectedQuality);
				if (SelectedOption.contains("Best")) {
					logger.info("Best option is selected");
					extent.extentLogger("Quality", "Best option is selected");
				}
				JSClick(PWAPlayerPage.objBetterQualityOption, "Better quality");
				verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
				verifyElementPresentAndClick(PWAPlayerPage.objPlayerQualityButton, "Quality Button");
				String SelectedOption2 = getText(PWAPlayerPage.objPlayerSelectedQuality);

				if (SelectedOption2.contains("Better")) {
					logger.info("Better option is selected");
					extent.extentLogger("Quality", "Better option is selected");
				}
				verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
				waitTime(1000);
				verifyElementPresentAndClick(PWAPlayerPage.maximizeBtn, "Maximize window icon");
				waitTime(1000);

				JSClick(PWAPlayerPage.minimizeBtn, "Minimize button");

				logger.info(" Player controls is displayed on player screen for Video content, expected behaviour");
				extent.extentLoggerPass("",
						" Player controls is displayed on player screen for Video content, expected behaviour");
			} else {
				logger.info("Player controls are not displayed on player screen for Video content");
				extent.extentLoggerFail(" ", "Player controls are not displayed on player screen for Video content");

			}
		}
	}

	public void VerifyParentalPinForVideoTVODConsumption(String userType, String videoname) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user is able to set parental pin for TVOD Video content ");
			// oneYearPremium6MSupermoonUser();
			waitTime(3500);
			SetParentalPopup(PWAHamburgerMenuPage.objRestrictAll, "lakshmi123", "Restrict all");
			waitTime(3500);
			navigateToAnyScreenOnWeb("Home");
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, videoname, "Search Field");
			waitTime(3000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, videoname);
			waitTime(3500);
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume CTA")) {
				click(PWAComboOfferPage.objResumeCTA, "Resume CTA");
			}
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {

				waitForPlayerAdToComplete("Video Player");
			}
			waitTime(3000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Enter pin in Player ")) {

				logger.info(" user is able to set parental pin for TVOD Video content , expected behaviour");
				extent.extentLoggerPass("",
						" user is able to set parental pin for TVOD Video content , expected behaviour");
			} else {
				logger.info(" user not able to set parental pin for TVOD Video content");
				extent.extentLoggerPass("", " user not able to set parental pin for TVOD Video content");
			}
			waitTime(3000);
			SetParentalPopup(PWAHamburgerMenuPage.objNoRestrict, "lakshmi123", "No Restrict content");
		}
		navigateHome();
		logout();
	}

	public void watchCTAonCarousalForSupermoonCarousal(String userType, String tabname) throws Exception {
		extent.HeaderChildNode(
				"Verify that user is able to see Watch Now CTA in carousel if user has not started watching the Supermoon Event");
		AnypacklessThan499withSupermoonActive();
		waitTime(3500);
		navigateToAnyScreenOnWeb(tabname);
		for (int i = 0; i <= 10; i++) {
			if (checkElementDisplayed(PWAHomePage.objcarouselContent("Supermoon"), "Carousal title") == true) {
				verifyElementDisplayed(PWAComboOfferPage.objWatchNowCTA);

				logger.info("Watch Now CTA is Present in Supermoon carousal banner");
				extent.extentLoggerPass("", "Watch Now CTA is Present in Supermoon carousal banner,expected behaviour");
				break;
			} else {
				JSClick(PWAHamburgerMenuPage.Objnextarrowcarousel, "next arrow");
				waitTime(500);
			}

		}
	}

	public void ResumeCTAonCarousalForAnypacklessThan499withSupermoonActiveUser(String userType, String tabname)
			throws Exception {
		extent.HeaderChildNode(
				"Verify that user is able to see Resume CTA in carousel if user has started watching the Supermoon Event");
//needed event watch clicked credentials
		AnypacklessThan499withSupermoonActive();
		waitTime(3500);
		navigateToAnyScreenOnWeb(tabname);
		for (int i = 0; i <= 10; i++) {
			if (checkElementDisplayed(PWAHomePage.objcarouselContent("Supermoon"), "Carousal title") == true) {
				verifyElementDisplayed(PWAComboOfferPage.objResumeCTA);

				logger.info("Resume CTA is Present in Supermoon carousal banner");
				extent.extentLoggerPass("", "Resume CTA is Present in Supermoon carousal banner,expected behaviour");
				break;
			} else {
				JSClick(PWAHamburgerMenuPage.Objnextarrowcarousel, "next arrow");
				waitTime(500);
			}
		}
	}

	public void watchCTAonZeePlexForAnypacklessThan499withSupermoonActiveUser(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see Watch Now CTA in Zeeplex landing page for Rented Supermoon if user has not started watching TVOD");
			AnypacklessThan499withSupermoonActive();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			if (verifyElementDisplayed(PWAComboOfferPage.objWatchNowCTA)) {

				logger.info("Watch Now CTA is Present in ZeePlex Page");
				extent.extentLoggerPass("", "Watch Now CTA is Present in  ZeePlex Page,expected behaviour");

			} else {
				logger.error("Watch Now CTA is not Present in ZeePlex Page");
				extent.extentLoggerFail("", "Watch Now CTA is not Present in  ZeePlex Page,expected behaviour");
			}
		}
	}

	public void ResumeCTAonZeePlexForAnypacklessThan499withSupermoonActiveUser(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see Resume CTA in Zeeplex landing page for Rented Supermoon if user has started watching TVOD");
			// AnypacklessThan499withSupermoonActive();
			// alredy half watched creds required
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			if (verifyElementDisplayed(PWAComboOfferPage.objResumeCTA)) {

				logger.info("Resume CTA is Present in in ZeePlex Page");
				extent.extentLoggerPass("", "Resume CTA is Present in ZeePlex Page,expected behaviour");

			} else {
				logger.error("Resume Now CTA is not Present in ZeePlex Page");
				extent.extentLoggerFail("", "Resume Now CTA is not Present in  ZeePlex Page,expected behaviour");
			}
		}
	}

	public void ExpiresInHoursBelowThePlayerForAnypacklessThan499withSupermoonActiveUse(String userType)
			throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is not able to see watch time validity (Expires in XX hours ) below the player in comsumption page");
			// AnypacklessThan499withSupermoonActive();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");

			waitTime(3500);
			if (!checkElementDisplayed(PWAComboOfferPage.objExpiresinDaysTxtBelowThePlayer,
					"watch time validity (Expires in XX hours ) below the player")) {

				logger.info(
						"watch time validity (Expires in XX hours ) below the player is not Present,expected behaviour");
				extent.extentLoggerPass("",
						"watch time validity (Expires in XX hours ) below the player is not Present,expected behaviour");

			} else {
				logger.error("watch time validity (Expires in XX hours ) below the player is Present");
				extent.extentLoggerFail("", "watch time validity (Expires in XX hours ) below the player is Present");
			}
		}
	}

	public void ExpiresInRentalAndWatchTimeForAnypacklessThan499withSupermoonActiveUse(String userType)
			throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is not able to see \"Expires in <rental duration>\" and \"Expires in <watchtime>\"  in My Rental page");
			// AnypacklessThan499withSupermoonActive();
			waitTime(3500);
			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");
			Thread.sleep(3000);

			if (!checkElementDisplayed(PWAComboOfferPage.objRentalValidateTxt, "Rental duration")) {

				logger.info("Expires in <Rental duration> is not Present ,expected behaviour");
				extent.extentLoggerPass("", "Expires in <Rental duration> is not Present,expected behaviour");

			} else {
				logger.error("Expires in <Rental duration> is Present");
				extent.extentLoggerFail("", "Expires in <Rental duration> is Present");
			}

			if (!checkElementDisplayed(PWAComboOfferPage.objWatchTimevalidateTxt, "Watch time")) {

				logger.info("Expires in <Watch time> is not Present,expected behaviour");
				extent.extentLoggerPass("", "Expires in <Watch time> is not Present,expected behaviour");

			} else {
				logger.error("Expires in <Watch time> is Present");
				extent.extentLoggerFail("", "Expires in <Watch time> is Present");
			}
		}
	}

	public void noRentalTimeValidityInZeeplexPageForAnypacklessThan499withSupermoonActiveUse(String userType)
			throws Exception {
		extent.HeaderChildNode("Verify that user is not able to see Rental time validity in Rental popup");
		AnypacklessThan499withSupermoonActive();
		waitTime(3500);

		navigateToAnyScreenOnWeb("ZEEPLEX");
		waitTime(3500);
		if (verifyElementDisplayed(PWAComboOfferPage.objExpiresDaysTxt)) {
			extent.extentLoggerPass("", "user is not able to see Rental time validity in Rental popup");
			logger.info("user is not able to see Rental time validity in Rental popup");
		} else {
			extent.extentLoggerFail("", "user is able to see Rental time validity in Rental popup");
			logger.error("user is able to see Rental time validity in Rental popup");

		}
	}

	public void HowItWorksInConsumptionPageForAnypacklessThan499withSupermoonActiveUse(String userType)
			throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that \"How it works\" banner is not displayed in consumption page");
			// AnypacklessThan499withSupermoonActive();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(3000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objzeeplexHowitWorks, "Zeeplex How It Workss")) {

				extent.extentLoggerFail("", "\"How it works\" banner is displayed in consumption page");
				logger.error("\"How it works\" banner is displayed in consumption page");
			} else {
				extent.extentLoggerPass("", "\"How it works\" banner is not displayed in consumption page");
				logger.info("\"How it works\" banner is not displayed in consumption page");
			}
		}
	}

	public void supermoonInContinueWatchingTrayForAnypacklessThan499withSupermoonActiveUse(String userType,
			String LiveTvContent) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that post watching LiveTV content is not added to \"Continue watching\" tray");
			// AnypacklessThan499withSupermoonActive();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			if (checkElementDisplayed(PWAComboOfferPage.objWatchNowCTA, "Watch Now")) {
				JSClick(PWAComboOfferPage.objWatchNowCTA, "Watch Now CTA");
			}
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume CTA")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
				waitTime(3500);
			}
			if (checkElementDisplayed(PWAPlayerPage.objPlayerAdPresent, "Wait till ad to complete")) {
				// objPlayerAdPresent
				waitForPlayerAdToComplete2("Live show");
			}
			waitTime(10000);
			navigateToAnyScreenOnWeb("Home");
			waitTime(2000);
			if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Coninue Watching tray") == true) {
				ArrayList<String> ContinueWatching = new ArrayList<String>();

				for (int i = 1; i < 4; i++) {
					String updatedContent = getElementPropertyToString("innerText",
							PWAContinueWatchingTrayPage.objCardTitle(i), "Content");
					ContinueWatching.add(updatedContent);
				}
				logger.info(ContinueWatching);
				if (ContinueWatching.contains(LiveTvContent)) {
					logger.error(LiveTvContent + " is present in Continue watching tray");
					extent.extentLoggerFail("", LiveTvContent + " is present in Continue watching tray");
				} else {
					logger.info(LiveTvContent + " is not present in Continue watching tray");
					extent.extentLoggerPass("", LiveTvContent + " is not present in Continue watching tray");
				}

			}
		}
	}

	public void AnypacklessThan499withSupermoonActive() throws Exception {
		// Logged in Non subscribed , Premium user , Regional User with Plan Price less
		// than Combo offer with active Supermoon
		extent.HeaderChildNode(
				"Logged in Non subscribed , Premium user , Regional User with Plan Price less than Combo offer with active  Supermoon");
		String Username = getParameterFromXML("anyPackLessThen499withSupermoonUser");
		String Password = getParameterFromXML("anyPackLessThen499withSupermoonPassword");

		verifyElementPresent(PWALoginPage.objWebLoginBtn, "Login button");
		JSClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objEmailField, "Email field");
		JSClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, Username, "Email Field");
		waitTime(3000);
		verifyElementPresent(PWALoginPage.objPasswordField, "Password Field");
		JSClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, Password, "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(5000);
	}

	public void vpahandle(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("Verify that user is able to enter VPA/handle to initiate UPI payment");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			if (verifyElementPresent(PWAComboOfferPage.objTrailer, "Watch trailer")) {
				JSClick(PWAComboOfferPage.objTrailer, "Watch trailer");
				waitTime(6000);
			} else {
				JSClick(PWAComboOfferPage.objSupermoonImgInZeeplex, "Supermoon Content ");
				waitTime(3000);
			}
			waitTime(3000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			waitTime(5000);

			PWAIframe();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("UPI"), "UPI option");
			waitTime(3000);
			checkElementDisplayed(PWAHamburgerMenuPage.objenterupiid, "Enter upi Details");
			click(PWAHamburgerMenuPage.objenterupiid, "Enter VPA Details");
			type(PWAHamburgerMenuPage.objenterupiid, "866@upi", "Email Field");
			String upiid = findElement(PWAHamburgerMenuPage.objenterupiid).getAttribute("value");
			System.out.println(upiid);
			if (upiid.contains("866@upi")) {
				logger.info(
						"User should be able to enter the VPA/handle in the UPI ID section to initiate UPI payment, expected behaviour");
				extent.extentLogger("",
						"User should be able to enter the VPA/handle in the UPI ID section to initiate UPI payment, expected behaviour");
			} else {
				logger.info("User not able to enter the VPA/handle in the UPI ID section to initiate UPI payment");
				extent.extentLoggerFail("",
						"User not able to enter the VPA/handle in the UPI ID section to initiate UPI payment");
			}
		}
	}

	public void VerifyAmazonPageValidation(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("Verify that user redirect to Amazon pay page on clicking proceed "
					+ "after selecting Amazon Pay wallet optionA");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			if (verifyElementPresent(PWAComboOfferPage.objTrailer, "Watch trailer")) {
				JSClick(PWAComboOfferPage.objTrailer, "Watch trailer");
				waitTime(6000);
			} else {
				JSClick(PWAComboOfferPage.objSupermoonImgInZeeplex, "Supermoon Content ");
				waitTime(3000);
			}
			waitTime(5000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			waitTime(5000);

			PWAIframe();

			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objAmazonPay, "Amazonpay");
			verifyElementPresentAndClick(PWASubscriptionPages.objAmazonPayProceedToPay, "Proceed to pay");
			waitTime(5000);
			if (verifyElementPresentAndClick(PWASubscriptionPages.objamazonpaypage, "Amazon pay page")) {
				logger.info("User should be redirected to Amazon pay page,expected behaviour.");
				extent.extentLoggerPass("", "User should be redirected to Amazon pay page, expected behaviour.");
			} else {
				logger.info("User is not redirected to Amazon pay page.");
				extent.extentLoggerFail(" ", "User is not redirected to Amazon pay page.");

			}
		}
	}

	public void AmazonPayLogoLoginMobileNumber(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode("Verify that Amazon Pay page consist: Amazon Pay Logo ,Login ,"
					+ "Enter Mobile number or Email field ,Sign-In CTA");
			waitTime(5000);
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			waitTime(5000);

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objAmazonPay, "Amazonpay");
			verifyElementPresentAndClick(PWASubscriptionPages.objAmazonPayProceedToPay, "Amazonpay Proceed to pay");
			waitTime(3000);
			verifyElementPresent(PWAHamburgerMenuPage.objamazonpaylogo, "Amazon pay logo");
			verifyElementPresent(PWAHamburgerMenuPage.objamazonlogintext, "Amazon Login");
			verifyElementPresent(PWAHamburgerMenuPage.objamazonemailandphnofield, "Amazon email field");
			verifyElementPresent(PWAHamburgerMenuPage.objamazonsignincta, "Amazon sign in CTA");
		}
	}

	public void MobikvikOTPValidation(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify that on clicking send OTP after entering mobile number user is redirecting to enter OTP page");
		navigateHome();
		navigateToAnyScreenOnWeb("ZEEPLEX");
		waitTime(3500);
		JSClick(PWAHomePage.objPlaybackMovieTitle("supermoon"), "supermoon");
		waitTime(5000);
		verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
		verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
		click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
		waitTime(5000);
		PWAIframe();
		verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
		verifyElementPresentAndClick(PWASubscriptionPages.objMobikwik, "Mobikvik");
		verifyElementPresentAndClick(PWASubscriptionPages.objMobikwikProceedToPay, "Proceed to pay");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objentermobilenumber, "Enter mobile number");
		type(PWAHamburgerMenuPage.objentermobilenumber, "9000000000", "Enter mobile number");
		click(PWAHamburgerMenuPage.objmobikviksendotpcta, "mobikvik send otp CTA");
		if (verifyElementPresent(PWAHamburgerMenuPage.objenterotppage, "mobikvik enter otp CTA")) {
			logger.info(
					"user should redirect to enter OTP page on clicking send OTP in mobikwik page,expected behaviour.");
			extent.extentLoggerPass("",
					"user should redirect to enter OTP page on clicking send OTP in mobikwik page, expected behaviour.");
		} else {
			logger.info("user not redirect to enter OTP page on clicking send OTP in mobikwik page");
			extent.extentLoggerFail(" ", "user not redirect to enter OTP page on clicking send OTP in mobikwik page");

		}
	}

	public void ValidateAmazonPage(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Nonsubscribeduser")) {
			extent.HeaderChildNode("Verify that user redirect to Mobikvikpay page on clicking proceed "
					+ "after selecting Amazon Pay wallet optionA");
			navigateHome();
			// logout();

			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			waitTime(5000);

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			if (verifyElementPresent(PWASubscriptionPages.objMobileLinkPaytmOption, "Link Wallets")) {
				logger.info("User should be able to see the link CTA for paytm wallets,expected behaviour.");
				extent.extentLoggerPass("",
						"User should be able to see the link CTA for paytm wallets, expected behaviour.");
			} else {
				logger.info("User is not able to see the link CTA for paytm wallets");
				extent.extentLoggerFail(" ", "User is not able to see the link CTA for paytm wallets");

			}
		}
	}

	public void MobikvikPayLogoLoginMobileNumber(String userType) throws Exception {
		extent.HeaderChildNode("Verify that Mobikvik Pay page consist: Mobikvik Pay Logo ,Login , "
				+ "Enter Mobile number or Email field ,Sign-In CTA");
		navigateHome();
		navigateToAnyScreenOnWeb("ZEEPLEX");
		waitTime(3500);
		JSClick(PWAHomePage.objPlaybackMovieTitle("supermoon"), "supermoon");
		waitTime(5000);
		verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
		verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
		click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
		waitTime(5000);
		PWAIframe();
		verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
		verifyElementPresentAndClick(PWASubscriptionPages.objMobikwik, "Mobikvik");
		verifyElementPresentAndClick(PWASubscriptionPages.objMobikwikProceedToPay, "Proceed to pay");
		verifyElementPresent(PWAHamburgerMenuPage.objmobikviklogo, "mobikvik pay logo");
		verifyElementPresent(PWAHamburgerMenuPage.objmobikviklogintext, "mobikvik Login");
		verifyElementPresent(PWAHamburgerMenuPage.objmobikvikemailandphnofield, "mobikvik email field");
		verifyElementPresent(PWAHamburgerMenuPage.objmobikviksendotpcta, "mobikvik send otp CTA");

	}

	public void SentOTPButtonEnabled(String userType) throws Exception {
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objentermobilenumber, "Enter mobile number");
		type(PWAHamburgerMenuPage.objentermobilenumber, "9000000000", "Enter mobile number");
		verifyElementPresent(PWAHamburgerMenuPage.objmobikviksendotpcta, "mobikvik send otp CTA");
		if (getWebDriver().findElement(PWAHamburgerMenuPage.objmobikviksendotpcta).isEnabled() == true) {
			logger.info(
					"Send OTP CTA should get enabled when user enters the 10 digits mobile number,expected behaviour.");
			extent.extentLoggerPass("",
					"Send OTP CTA should get enabled when user enters the 10 digits mobile number, expected behaviour.");
		} else {
			logger.info("Send OTP CTA id disabled when user enters the 10 digits mobile number");
			extent.extentLoggerFail(" ", "Send OTP CTA id disabled when user enters the 10 digits mobile number");

		}
	}

	public void MobikvikOTPPage(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify that on clicking send OTP after entering mobile number user is redirecting to enter OTP page");
		click(PWAHamburgerMenuPage.objmobikviksendotpcta, "mobikvik send otp CTA");
		if (verifyElementPresent(PWAHamburgerMenuPage.objenterotppage, "mobikvik enter otp CTA")) {
			logger.info(
					"user should redirect to enter OTP page on clicking send OTP in mobikwik page,expected behaviour.");
			extent.extentLoggerPass("",
					"user should redirect to enter OTP page on clicking send OTP in mobikwik page, expected behaviour.");
		} else {
			logger.info("user not redirect to enter OTP page on clicking send OTP in mobikwik page");
			extent.extentLoggerFail(" ", "user not redirect to enter OTP page on clicking send OTP in mobikwik page");

		}
	}

	public void MobikvikOTPPageValidation(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify that enter otp mobikwik page consists OTP has been sent successfully , Change CTA ,"
						+ " Enter OTP field , Resend OTP , Submit ");
		verifyElementPresent(PWAHamburgerMenuPage.objotpsentsuccessfully, "OTP sent successfully");
		verifyElementPresent(PWAHamburgerMenuPage.objmobikvikemailandphnofield, "Enter mobile number");
		verifyElementPresent(PWAHamburgerMenuPage.objchangecta, "Change CTA");
		verifyElementPresent(PWAHamburgerMenuPage.objmobikvikresendotp, "resend CTA");
		verifyElementPresent(PWAHamburgerMenuPage.objsubmitmobikvik, "submit CTA");
		Back(1);
		Back(1);
	}

	public void ListOfPaymentOption(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Nonsubscribeduser")) {
			extent.HeaderChildNode(
					"Verify that user is able to list of applicable wallets (Amazon pay, Mobikwik, Paytm )");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			waitTime(5000);

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objAmazonPay, "Amazonpay");
			// verifyElementPresentAndClick(PWASubscriptionPages.objMobikwik, "Mobikvik");
		}
	}

	public void ValidateLinkPaytmText(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Nonsubscribeduser")) {
			extent.HeaderChildNode("Verify that user is able to see Link PAYTM Wallet text "
					+ "with logo and Enter mobile number field along with Send OTP CTA");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			waitTime(5000);

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			click(PWASubscriptionPages.objMobileLinkPaytmOption, "Link Wallets");
			verifyElementPresent(PWASubscriptionPages.objLinkPaytm, "Link paytm wallet");
			verifyElementPresent(PWASubscriptionPages.objpaytmentermobileno, "Enter mobile number");
			verifyElementPresent(PWAHamburgerMenuPage.objmobikviksendotpcta, "Paytm send otp CTA");
		}

	}

	public void ValidateLinksWallets(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Nonsubscribeduser")) {
			extent.HeaderChildNode("Verify that user is able to see the link CTA on Paytm wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			if (verifyElementPresent(PWASubscriptionPages.objMobileLinkPaytmOption, "Link Wallets")) {
				logger.info("User should be able to see the link CTA for paytm wallets,expected behaviour.");
				extent.extentLoggerPass("",
						"User should be able to see the link CTA for paytm wallets, expected behaviour.");
			} else {
				logger.info("User is not able to see the link CTA for paytm wallets");
				extent.extentLoggerFail(" ", "User is not able to see the link CTA for paytm wallets");
			}
		}
	}

	public void componentsInRentalAndWatchTimeForAnypacklessThan499withSupermoonActiveUser(String userType)
			throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify that below components are displayed in My Rentals");
			navigateHome();
			waitTime(3000);
			// AnypacklessThan499withSupermoonActive();
			waitTime(3500);
			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");
			Thread.sleep(5000);
			if (verifyElementPresent(PWAComboOfferPage.objMyRentalTitle, "Supermoon title")) {

				logger.info("Supermoon title in My rentals is  Present");
				extent.extentLoggerPass("", "Supermoon title in My rentals is Present,expected behaviour");

			} else {
				logger.error("Supermoon title in My rentals is not Present");
				extent.extentLoggerFail("", "Supermoon title in My rentals is not Present,expected behaviour");
			}

			if (checkElementDisplayed(PWAComboOfferPage.objZeerentalsWatch, "Watch Now CTA")) {

				logger.info("Watch Now CTA is Present in My rentals Page");
				extent.extentLoggerPass("", "Watch Now CTA is Present in My rentals Page,expected behaviour");

			} else if (checkElementDisplayed(PWAComboOfferPage.objZeerentalsResume, "Resume CTA")) {
				logger.error("Resume CTA is Present in My rentals Page");
				extent.extentLoggerPass("", "Resume CTA is Present in My rentals Page,expected behaviour");

			} else {
				logger.error("Watch now/Resume CTA is not Present in My rentals Page");
				extent.extentLoggerFail("", "Watch now/Resume CTA is not Present in My rentals Page");
			}
			if (verifyElementDisplayed(PWAComboOfferPage.objExpiresDaysTxt)) {

				logger.info("Expiry time mentioned in My rentals Page");
				extent.extentLogger("", "Expiry time mentioned in My rentals Page,expected behaviour");

			} else {
				logger.info("Expiry time is not mentioned in My rentals Page");
				extent.extentLogger("", "Expiry time is not mentioned in My rentals Page,expected behaviour");
			}
		}
	}

	public void activeAndExpiryInRentalAndWatchTimeForAnypacklessThan499withSupermoonActiveUser(String userType)
			throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"Validate that both active and expired Live TV TVOD or TVOD Videos contents are displayed in My rentals screen");
			navigateHome();
			// AnypacklessThan499withSupermoonActive();
			waitTime(3500);
			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");
			Thread.sleep(3000);

			if (checkElementDisplayed(PWAComboOfferPage.objZeerentalsWatch, "Watch Now CTA")) {

				logger.info("Live TV TVOD is still active in My rentals Page");
				extent.extentLogger("", "Live TV TVOD is still active in My rentals Page,expected behaviour");

			} else if (checkElementDisplayed(PWAComboOfferPage.objZeerentalsResume, "Resume CTA")) {
				logger.info("Live TV TVOD is still active in My rentals Page");
				extent.extentLogger("", "Live TV TVOD is still active in My rentals Page,expected behaviour");

			} else {
				logger.info("Live TV TVOD is not active in My rentals Page");
				extent.extentLogger("", "Live TV TVOD is not active in My rentals Page,expected behaviour");
			}

			if (verifyElementDisplayed(PWAComboOfferPage.objExpiresDaysTxt)) {

				logger.info("Expired Live TV TVOD contents mentioned in My rentals Page");
				extent.extentLogger("",
						"Expired Live TV TVOD contents mentioned in My rentals Page,expected behaviour");

			} else {
				logger.info("Expired Live TV TVOD contents is not mentioned in My rentals Page");
				extent.extentLogger("",
						"Expired Live TV TVOD contents is not mentioned in My rentals Page,expected behaviour");

			}
		}
	}

	public void VideoTVODContentInContinueWatchingTrayForAnypacklessThan499withSupermoonActiveUser(String userType,
			String VideoTVODContent) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify that post watching Video content is added to \"Continue watching\" tray");
			// AnypacklessThan499withSupermoonActive();
			navigateHome();
			waitTime(3000);

			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");

			waitTime(4500);

			if (checkElementDisplayed(PWAComboOfferPage.objWactchOrResumeCTAInRentals(VideoTVODContent),
					" Resume CTA ")) {
				JSClick(PWAComboOfferPage.objWactchOrResumeCTAInRentals(VideoTVODContent), " Resume CTA ");
				waitTime(3500);
			}
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume In Player")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume In Player CTA");
				waitTime(3500);
			} else {
				JSClick(PWAComboOfferPage.objWatchNowCTAInPlayer, "Watch Now In Player CTA");
				waitTime(3500);
			}
			if (checkElementDisplayed(PWAPlayerPage.objPlayerAdPresent, "Wait till ad to complete")) {
				// objPlayerAdPresent
				waitForPlayerAdToComplete2("Live show");
			}
			waitTime(10000);
			navigateToAnyScreenOnWeb("Home");
			waitTime(2000);
			if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Coninue Watching tray") == true) {
				List<String> ContinueWatching = new ArrayList<String>();
				List<WebElement> continueItemList = findElements(PWAContinueWatchingTrayPage.objContinueTrayItems);
				int a = continueItemList.size();

				for (int i = 1; i <= a; i++) {
					String updatedContent = getElementPropertyToString("innerText",
							PWAContinueWatchingTrayPage.objCardTitle(i), "Content");
					ContinueWatching.add(updatedContent);
				}
				logger.info(ContinueWatching);
				if (ContinueWatching.contains("Binge Holidays! - December Calendar Launch")) {
					logger.error(VideoTVODContent + " is present in Continue watching tray");
					extent.extentLoggerPass("", VideoTVODContent + " is present in Continue watching tray");
				} else {
					logger.info(VideoTVODContent + " is not present in Continue watching tray");
					extent.extentLoggerFail("", VideoTVODContent + " is not present in Continue watching tray");
				}

			}
		}
	}

	public void shareFunctionalitySupermoonForAnypacklessThan499withSupermoonActiveUser(String userType,
			String LiveTvContent) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify that user is able to share the LiveTV content as existing ");
			// AnypacklessThan499withSupermoonActive();
			navigateHome();
			waitTime(3000);

			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");

			waitTime(3500);
			if (checkElementDisplayed(PWAComboOfferPage.objWactchOrResumeCTAInRentals(LiveTvContent),
					"Watch Now CTA or Resume CTA ")) {
				JSClick(PWAComboOfferPage.objWactchOrResumeCTAInRentals(LiveTvContent), "Watch Now CTA or Resume CTA ");
				waitTime(3500);
			}
			ScrollToTheElementWEB(PWAComboOfferPage.objSharebelowPlayer);
			waitTime(2500);
			JSClick(PWAComboOfferPage.objSharebelowPlayer, "Share option");
			waitTime(2500);
			click(PWAPlayerPage.facebookShareBtn, "Facebook share option");
			waitTime(2500);

			// Switch to window
			verifyAlert();
			switchToWindow(2);
			Thread.sleep(2000);
			// Verify user is navigate to Facebook page
			if (checkElementDisplayed(PWALiveTVPage.objFacebookEmailField, "Facebook Email field")) {
				verifyElementPresentAndClick(PWALiveTVPage.objFacebookEmailField, "Facebook Email field");

				getWebDriver().findElement(PWALiveTVPage.objFacebookEmailField).sendKeys("helloigs6@gmail.com");

				verifyElementPresentAndClick(PWALiveTVPage.objFacebookPasswordField, "Facebook Password field");
				getWebDriver().findElement(PWALiveTVPage.objFacebookPasswordField).sendKeys("hello@12345");

				verifyElementPresentAndClick(PWALiveTVPage.objFacebookLoginBtn, "Facebook Login button");
				waitTime(2000);
				logger.info("user able to share the share the LiveTV content as existing");
				extent.extentLoggerPass("", "user able to share the share the LiveTV content as existing");
			} else {
				logger.info("user not able to share the share the LiveTV content as existing");
				extent.extentLoggerFail("", "user not able to share the share the LiveTV content as existing");
			}
			verifyAlert();
			waitTime(2000);
			verifyElementPresentAndClick(PWALiveTVPage.objPostToFacebookBtn, "Post to Facebook");
			waitTime(3000);
			verifyAlert();
			switchToWindow(1);
			waitTime(3000);

		}
	}

	public void watchlistFunctionalityForAnypacklessThan499withSupermoonActiveUser(String userType,
			String LiveTvContent) throws Exception {
		if (userType.equals("Guest")) {

			extent.HeaderChildNode("Verify that for live channel watchlist option is not displayed");
			// AnypacklessThan499withSupermoonActive();
			navigateHome();
			waitTime(3000);
			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");

			waitTime(3500);
			if (checkElementDisplayed(PWAComboOfferPage.objWactchOrResumeCTAInRentals(LiveTvContent), " Resume CTA ")) {
				JSClick(PWAComboOfferPage.objWactchOrResumeCTAInRentals(LiveTvContent), "Resume CTA ");
				waitTime(3500);
			}
			ScrollToTheElementWEB(PWAComboOfferPage.objSharebelowPlayer);
			waitTime(2500);
			if (!checkElementDisplayed(PWAPlayerPage.watchListBtn, "WatchList icon")) {
				logger.info("For live channel watchlist option is not displayed");
				extent.extentLoggerPass("", "For live channel watchlist option is not displayed");
			} else {
				logger.info("For live channel watchlist option is displayed");
				extent.extentLoggerFail("", "For live channel watchlist option is displayed");

			}
		}
	}

	public void VeerifyEPGSectionForAnypacklessThan499withSupermoonActiveUser(String userType) throws Exception {

		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify that EPG section is remain as is on live tv consumption page");
			navigateHome();
			waitTime(3000);
			// AnypacklessThan499withSupermoonActive();
			waitTime(2500);
			navigateToAnyScreenOnWeb("Live TV");
			waitTime(3000);
			click(PWALiveTVPage.objChannelGuideToggle, "Channel Guide");
			if (findElement(PWALiveTVPage.objChannelGuideToggle).getAttribute("class").contains("active")) {
				extent.extentLoggerPass("EPG Section", " EPG section is remain as is on live tv consumption page");
				logger.info(" EPG section is remain as is on live tv consumption page");
			} else {
				extent.extentLoggerFail("EPG Section",
						" EPG section is not remained as is on live tv consumption page");
				logger.info(" EPG section is not remained as is on live tv consumption page");
			}
			navigateHome();
			waitTime(3000);
			logout();
		}
	}

	public void VeerifyEPGSectionForoneYearPremium6MSupermoonUser(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify that EPG section is remain as is on live tv consumption page");
			navigateHome();
			waitTime(3000);
			oneYearPremium6MSupermoonUser();
			waitTime(2500);
			navigateToAnyScreenOnWeb("Live TV");
			waitTime(3000);
			click(PWALiveTVPage.objChannelGuideToggle, "Channel Guide");
			if (findElement(PWALiveTVPage.objChannelGuideToggle).getAttribute("class").contains("active")) {
				extent.extentLoggerPass("EPG Section", " EPG section is remain as is on live tv consumption page");
				logger.info(" EPG section is remain as is on live tv consumption page");
			} else {
				extent.extentLoggerFail("EPG Section",
						" EPG section is not remained as is on live tv consumption page");
				logger.info(" EPG section is not remained as is on live tv consumption page");
			}
			navigateHome();
			waitTime(3000);
			logout();
		}
	}

	public void titleBelowThePlayerSupermoonForAnypacklessThan499withSupermoonActive(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify that user is able to see the title of the LiveTV content i.e event name)");
			navigateHome();
			waitTime(3000);
			if (!checkElementDisplayed(PWALoginPage.objWebLoginBtn, "Login button")) {
				logout();
				waitTime(3000);
			}
			AnypacklessThan499withSupermoonActive();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");

			// objContentTitleLiveTVname
			waitTime(3500);
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume CTA")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume Now CTA");
				waitTime(3500);
			} else {
				JSClick(PWAComboOfferPage.objWatchNowCTA, "Watch Now");
				waitTime(3500);
			}

			if (verifyElementDisplayed(PWAPlayerPage.objContentTitleLiveTVname)) {
				String a = getText(PWAPlayerPage.objContentTitleLiveTVname);
				logger.info("user is able to see the title of the LiveTV content i.e:" + a);
				extent.extentLoggerPass("", "user is able to see the title of the LiveTV content i.e:" + a);
			} else {
				logger.info("user not able to see the title of the LiveTV content i.e Supermoon");
				extent.extentLoggerFail("", "user not able to see the title of the LiveTV content i.e Supermoon");
			}

		}
	}

	public void descriptionBelowShareBtnForAnypacklessThan499withSupermoonActive(String userType) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify that short description of the Live TV content is displayed below Share ");
			// AnypacklessThan499withSupermoonActive();
			navigateHome();
			waitTime(3000);
			navigateToAnyScreenOnWeb("ZEEPLEX");

			waitTime(3500);
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume CTA")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume Now CTA");
				waitTime(3500);
			} else {
				JSClick(PWAComboOfferPage.objWatchNowCTA, "Watch Now");
				waitTime(3500);
			}

			if (checkElementDisplayed(PWAComboOfferPage.objDescBelowShareBtn, "Description below share icon")) {
				String Desc = getWebDriver().findElement(PWAComboOfferPage.objDescBelowShareBtn).getText();
				logger.info(Desc);
				logger.info(
						"user is able to see short description of the Live TV content is displayed below Share icon");
				extent.extentLoggerPass("",
						"user is able to see short description of the Live TV content is displayed below Share icon");
			} else {
				logger.info(
						"user is not able to see short description of the Live TV content is displayed below Share icon");
				extent.extentLoggerFail("",
						"user is not able to see short description of the Live TV content is displayed below Share icon");
			}

		}
	}

	public void metaInfoForVideoTVODConsumptionForAnypacklessThan499withSupermoonActive(String userType,
			String videoname) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see the following meta information for Video TVOD Content:");
			// AnypacklessThan499withSupermoonActive();
			navigateHome();
			waitTime(3000);
			waitTime(3500);
			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");

			waitTime(3500);
			if (checkElementDisplayed(PWAComboOfferPage.objWactchOrResumeCTAInRentals(videoname), videoname)) {
				JSClick(PWAComboOfferPage.objWactchOrResumeCTAInRentals(videoname), "Resume");
				waitTime(3500);
			}
			// title of the content
			if (verifyElementDisplayed(PWAPlayerPage.objContentName)) {
				String contentname = getWebDriver().findElement(PWAPlayerPage.objContentName).getText();
				logger.info(contentname);
				extent.extentLogger("", contentname);
				logger.info("user is able to see the title of the Video TVOD content");
				extent.extentLoggerPass("", "user is able to see the title of the Video TVOD content");
			} else {
				logger.info("user not able to see the title of the Video TVOD content");
				extent.extentLoggerFail("", "user not able to see the title of the Video TVOD content");
			}
			// date:-objContentMetaDate
			if (verifyElementDisplayed(PWAComboOfferPage.objContentMetaDate)) {
				String ContentMetaDate = getWebDriver().findElement(PWAComboOfferPage.objContentMetaDate).getText();
				logger.info(ContentMetaDate);
				extent.extentLogger("", ContentMetaDate);
				logger.info("user is able to see the date of the Video TVOD content");
				extent.extentLoggerPass("", "user is able to see the Date of the Video TVOD content");
			} else {
				logger.info("user not able to see the Date of the Video TVOD content");
				extent.extentLoggerFail("", "user not able to see the Date of the Video TVOD content");
			}
			// objcontentDuration
			if (verifyElementDisplayed(PWAComboOfferPage.objcontentDuration)) {
				String ContentDuration = getWebDriver().findElement(PWAComboOfferPage.objcontentDuration).getText();
				logger.info(ContentDuration);
				extent.extentLogger("", ContentDuration);
				logger.info("user is able to see the Duration of the Video TVOD content");
				extent.extentLoggerPass("", "user is able to see the Duration of the Video TVOD content");
			} else {
				logger.info("user not able to see the Duration of the Video TVOD content");
				extent.extentLoggerFail("", "user not able to see the Duration of the Video TVOD content");
			}

			// Certification
			if (verifyElementDisplayed(PWAComboOfferPage.objContentMetaAgeRating)) {
				String ContentMetaCertificate = getWebDriver().findElement(PWAComboOfferPage.objContentMetaAgeRating)
						.getText();
				logger.info(ContentMetaCertificate);
				extent.extentLogger("", ContentMetaCertificate);
				logger.info("user is able to see the Certification of the Video TVOD content");
				extent.extentLoggerPass("", "user is able to see the Certification of the Video TVOD content");
			} else {
				logger.info("user is not able to see the Certification of the Video TVOD content");
				extent.extentLoggerFail("", "user is not able to see the Certification of the Video TVOD content");
			}

			// objcontentGenre
			if (verifyElementDisplayed(PWAComboOfferPage.objcontentGenre)) {
				String ContentMetaGenr = getWebDriver().findElement(PWAComboOfferPage.objcontentGenre).getText();
				logger.info(ContentMetaGenr);
				extent.extentLogger("", ContentMetaGenr);
				logger.info("user is able to see the GENRE of the Video TVOD content");
				extent.extentLoggerPass("", "user is able to see the GENRE of the Video TVOD content");
			} else {
				logger.info("user is not able to see the GENRE of the Video TVOD content");
				extent.extentLoggerFail("", "user is not able to see the GENRE of the Video TVOD content");
			}
			// Watchlist
			if (!verifyElementPresent(PWAPlayerPage.watchListBtn, "WatchList icon")) {
				logger.info("For Video TVOD watchlist option is not displayed");
				extent.extentLoggerFail("", "For Video TVOD watchlist option is not displayed");
			} else {
				logger.info("For Video TVOD watchlist option is displayed");
				extent.extentLoggerPass("", "For Video TVOD watchlist option is displayed");

			}

			// description
			if (checkElementDisplayed(PWAComboOfferPage.objDescBelowShareBtn, "Description below share icon")) {
				String Desc = getWebDriver().findElement(PWAComboOfferPage.objDescBelowShareBtn).getText();
				logger.info(Desc);
				extent.extentLogger("", Desc);
				logger.info(
						"user is able to see short description of the video TVOD content is displayed below Share icon");
				extent.extentLoggerPass("",
						"user is able to see short description of the video TVOD content is displayed below Share icon");
			} else {
				logger.info(
						"user is not able to see short description of the video TVOD content is displayed below Share icon");
				extent.extentLoggerFail("",
						"user is not able to see short description of the video TVOD content is displayed below Share icon");
			}

			// "Subtitle button"

//		if (checkElementDisplayed(PWAHomePage.objSubtitleButton, "Subtitle button")) {
//
//			logger.info("user is able to see Subtitle button of the video TVOD content is displayed");
//			extent.extentLoggerPass("", "user is able to see Subtitle button of the video TVOD content is displayed");
//		} else {
//			logger.info("user is not able to see Subtitle button of the video TVOD content is displayed");
//			extent.extentLoggerFail("",
//					"user is not able to see Subtitle button of the video TVOD content is displayed");
//		}
		}
	}

	public void clickOnWatchListForVideoTVODConsumptionForAnypacklessThan499withSupermoonActive(String userType,
			String videoname) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify that user is able to add the Exclusive video content in Mywatchlist page ");
			// AnypacklessThan499withSupermoonActive();
			navigateHome();
			waitTime(3000);

			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, videoname, "Search Field");
			waitTime(3000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, videoname);

			waitTime(3500);
			scrollToTheElementWEB(PWAPlayerPage.watchListBtn);
			waitTime(2000);
			if (verifyElementPresent(PWAPlayerPage.watchListBtn, "WatchList icon")) {
				JSClick(PWAPlayerPage.watchListBtn, "WatchList icon");
				waitTime(2500);
				try {
					Boolean AddedtoWatchlistToastMessage = getWebDriver().getPageSource()
							.contains("//*[@class='toastMessage']");
					if (AddedtoWatchlistToastMessage == true) {

						extent.extentLogger("Toast", "Added to Watchlist Toast Message displayed");
						logger.info("Added to Watchlist Toast Message displayed");
					} else {
						extent.extentLogger("Toast", "Added to Watchlist Toast Message is not displayed");
						logger.info("Added to Watchlist Toast Message is not displayed");
					}
				} catch (Exception e) {
					System.out.println("Toast message is not displayed");
				}
				logger.info("user is able to add the Exclusive video content in Mywatchlist");
				extent.extentLoggerPass("", "user is able to add the Exclusive video content in Mywatchlist");
			} else {
				logger.info("user is not able to add the Exclusive video content in Mywatchlist");
				extent.extentLoggerFail("", "user is not able to add the Exclusive video content in Mywatchlist");

			}
			JSClick(PWAPlayerPage.watchListBtn, "WatchList icon");
		}
	}

	public void VerifyInWatchListForVideoTVODConsumptionAnypacklessThan499withSupermoonActive(String userType,
			String videoname) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify Exclusive video content present under Videos tab in Mywatchlist  page");
			// AnypacklessThan499withSupermoonActive();
			waitTime(3500);
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, videoname, "Search Field");
			waitTime(3000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, videoname);

			waitTime(3500);
			scrollToTheElementWEB(PWAPlayerPage.watchListBtn);
			waitTime(2000);
			if (verifyElementPresent(PWAPlayerPage.watchListBtn, "WatchList icon")) {
				JSClick(PWAPlayerPage.watchListBtn, "WatchList icon");
				waitTime(555);
				try {
					Boolean AddedtoWatchlistToastMessage = getWebDriver().getPageSource()
							.contains("//*[@class='toastMessage']");
					if (AddedtoWatchlistToastMessage == true) {

						extent.extentLogger("Toast", "Added to Watchlist Toast Message displayed");
						logger.info("Added to Watchlist Toast Message displayed");
					} else {
						extent.extentLogger("Toast", "Added to Watchlist Toast Message is not displayed");
						logger.info("Added to Watchlist Toast Message is not displayed");
					}
				} catch (Exception e) {
					System.out.println("Toast message is not displayed");
				}
			}
			click(PWAHomePage.objProfileMenu, "Profile Menu");
			waitTime(2000);
			JSClick(PWAAddToWatchListPage.objMyWatchList, "WatchList in Hamberger menu");
			waitTime(2000);
			click(PWAAddToWatchListPage.objVideoTab, "video tab");
			waitTime(2000);
			if (checkElementDisplayed(PWAAddToWatchListPage.objWatchlistedItem(videoname), videoname)) {
				logger.info("user is able to see the Exclusive video content present in Mywatchlist's videos tab");
				extent.extentLoggerPass("",
						"user is able to see the Exclusive video content present in Mywatchlist's videos tab");
			} else {
				logger.info("user is able to see the Exclusive video content not present in Mywatchlist's videos tab");
				extent.extentLoggerFail("",
						"user is able to see the Exclusive video content not present in Mywatchlist's videos tab");

			}
			JSClick(PWAAddToWatchListPage.objRemoveContentsInWatchList, " Remove all in WatchList");
		}
	}

	public void ZEE5LogoInPaymentPage(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Nonsubscribeduser")) {
			extent.HeaderChildNode(
					"Verify that user is able to see zee5 logo in payment gateway screen for respective wallet");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			waitTime(5000);
			PWAIframe();

			checkElementDisplayed(PWAHomePage.objZeeLogo, "Zee logo");
		}
	}

	public void CreditAndDebitCardOption(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see Credit and Debit card options in payment gateway for respective wallet");
			navigateHome();
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "luckyigscon0074@gmail.com", "Email Field");
			waitTime(3000);
			verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "vasilucky@123", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);

			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
			// verifyElementPresentAndClick(PWASubscriptionPages.objpaytmlink, "Paytm
			// link");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaytmProceedToPay, "Procced to pay");
			waitTime(5000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objcardsinpaytm, "Cards in paytm")) {
				logger.info(
						"User should be able to see Credit and Debit card options in payment gateway for respective wallet, expected behaviour");
				extent.extentLogger("",
						"User should be able to see Credit and Debit card options in payment gateway for respective wallet, expected behaviour");
			} else {
				logger.info(
						"User not able to see Credit and Debit card options in payment gateway for respective wallet");
				extent.extentLoggerFail("",
						"User not able to see Credit and Debit card options in payment gateway for respective wallet");
			}
		}
	}

	public void PaymentFailurePopupAfterClickingOnBackButton(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that on clicking back on payment gateway screen of respective wallets User redirect to Account info screen with intent popup");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaytmProceedToPay, "Procced to pay");
			waitTime(5000);
			click(PWAHamburgerMenuPage.objgobackinpaytm, "Go back");
			waitTime(5000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objcancelpaymentyes, "Cancel payment")) {
				click(PWAHamburgerMenuPage.objcancelpaymentyes, "Cancel payment");

			}
			waitTime(5000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objpaymentfailurepopup, "Payment failure popup")) {
				logger.info("payment failure popup is displayed, expected behaviour");
				extent.extentLogger("", "Payment failure popup is displayed, expected behaviour");
			} else {
				logger.info("payment failure popup is not displayed");
				extent.extentLoggerFail("", "payment failure popup is not displayed");
			}
		}
	}

	public void PaymentFailurePopupAfterClickingOnBrowserBackButton(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that on clicking browser back button on payment gateway "
					+ "screen of respective wallets User redirect to Account info screen with intent popup");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaytmProceedToPay, "Procced to pay");
			Back(1);
			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info("User should redirect to payment page  , expected behaviour");
				extent.extentLogger("", "User should redirect to payment page , expected behaviour");
			} else {
				logger.info("User is not redirect to payment page ");
				extent.extentLoggerFail("", "User is not redirect to payment page");
			}
			navigateHome();
			logout();
		}
	}

	public void HaveAGiftCardOption(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify that user is able to see see gift card option at the bottom of the payment screen.");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(5000);
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Below Player");
			verifyElementPresent(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			click(PWAComboOfferPage.objBuyCombobutton, "Buy Combo");
			// PWAIframe();
			if (verifyElementPresent(PWAHamburgerMenuPage.objhaveagiftcard, "Have a gift card")) {
				logger.info(
						"User should be able to see see gift card option at the bottom of the payment screen.,expected behaviour.");
				extent.extentLoggerPass("",
						"User should be able to see see gift card option at the bottom of the payment screen., expected behaviour.");
			} else {
				logger.info("User not able to see see gift card option at the bottom of the payment screen.");
				extent.extentLoggerFail(" ",
						"User not able to see see gift card option at the bottom of the payment screen.");

			}
		}
	}

	public void CardNumberPINPayValidation(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode("Verify that on clicking Gift card option consist cardnumber, pin, pay");
			verifyElementPresent(PWAHamburgerMenuPage.objhaveagiftcard, "Have a gift card");
			JSClick(PWAHamburgerMenuPage.objhaveagiftcard, "Have a gift card");
			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "Enter card details");
			JSClick(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "Enter card details");
			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objenterpintohaveagiftcard, "PIN details");
			JSClick(PWAHamburgerMenuPage.objenterpintohaveagiftcard, "PIN details");
			waitTime(5000);
			verifyElementPresent(PWAHamburgerMenuPage.objPay, "PAY");
		}
	}

	public void ErrorMessageValidation(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode("Verify error message ");
			click(PWAHamburgerMenuPage.objPay, "Pay cta");
			if (verifyElementPresent(PWAHamburgerMenuPage.objtoarstmessage, "Error message")) {
				logger.info(
						"User should get error text message if card number and pin combination is not correct,expected behaviour.");
				extent.extentLoggerPass("",
						"User should get error text message if card number and pin combination is not correct, expected behaviour.");
			} else {
				logger.info("User not getting error text message if card number and pin combination is not correct");
				extent.extentLoggerFail(" ",
						"User not getting error text message if card number and pin combination is not correct");
			}
		}
	}

	public void supermoonInContinueWatchingTray(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that post watching LiveTV content is not added to \"Continue watching\" tray");
			oneYearPremium6MSupermoonUser();
			waitTime(3500);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3500);

			if (checkElementDisplayed(PWAComboOfferPage.objWatchNowCTA, "Watch Now")) {
				JSClick(PWAComboOfferPage.objWatchNowCTA, "Watch Now CTA");
			} else {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
				waitTime(3500);
				if (checkElementDisplayed(PWAPlayerPage.objPlayerAdPresent, "Wait till ad to complete")) {
					// objPlayerAdPresent
					waitForPlayerAdToComplete2("Live show");
				}
			}
			waitTime(10000);
			navigateToAnyScreenOnWeb("Home");
			waitTime(2000);
			if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Coninue Watching tray") == true) {
				ArrayList<String> ContinueWatching = new ArrayList<String>();

				for (int i = 1; i < 4; i++) {
					String updatedContent = getElementPropertyToString("innerText",
							PWAContinueWatchingTrayPage.objCardTitle(i), "Content");
					ContinueWatching.add(updatedContent);
				}
				logger.info(ContinueWatching);
				if (ContinueWatching.contains("Supermoon")) {
					logger.error("Supermoon is present in Continue watching tray");
					extent.extentLoggerFail("", "Supermoon is present in Continue watching tray");
				} else {
					logger.info("Supermoon is not present in Continue watching tray");
					extent.extentLoggerPass("", "Supermoon is not present in Continue watching tray");
				}
			}
		}
	}

	public void VerifyPreRollAdForLiveTVODContentAnypacklessThan499withSupermoonActive(String userType,
			String LiveTvTVODContent) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify whether pre-roll ads are played for LiveTV content");
			AnypacklessThan499withSupermoonActive();
			navigateHome();
			waitTime(3000);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(2500);
			scrollToTheElementWEB(PWAComboOfferPage.objLiveTVTVODItem(LiveTvTVODContent));
			waitTime(1500);
			JSClick(PWAComboOfferPage.objLiveTVTVODItem(LiveTvTVODContent), LiveTvTVODContent);
			waitTime(2500);
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
				waitTime(2500);
			} else {
				JSClick(PWAComboOfferPage.objWatchNowCTAInPlayer, "Watch Now");
				waitTime(2500);
			}
			if (checkElementDisplayed(PWAPlayerPage.objPlayerAdPresent, "Pre-roll Ad")) {

				logger.info("user is able to see pre-roll ads are played for LiveTV content :" + LiveTvTVODContent);
				extent.extentLoggerPass("",
						"user is able to see pre-roll ads are played for LiveTV content :" + LiveTvTVODContent);
			} else {
				logger.info("user is not able to see pre-roll ads are played for LiveTV content :" + LiveTvTVODContent);
				extent.extentLoggerFail("",
						"user is not able to see pre-roll ads are played for LiveTV content :" + LiveTvTVODContent);

			}
			click(PWAHomePage.objZeeLogo, "Zee logo");
			waitTime(2500);
		}
	}

	public void NoComboOfferWidgetBelowThePlayerAnypacklessThan499withSupermoonActive(String userType)
			throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify that user is not able to see Combo offer widget below the player");
			navigateHome();
			waitTime(3000);
			// AnypacklessThan499withSupermoonActive();

			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			JSClick(PWAComboOfferPage.objSupermoonImgInZeeplex, "Supermoon");
			waitTime(3000);
			if (!checkElementDisplayed(PWAComboOfferPage.objComboOfferWidget, "Combo Offer Widget below the player")) {

				logger.info("Combo Offer Widget below the player is not Present");
				extent.extentLoggerPass("", "Combo Offer Widget below the player is not Present,expected behaviour");

			} else {
				logger.error("Combo Offer Widget below the player is Present");
				extent.extentLoggerFail("", "Combo Offer Widget below the player is Present,expected behaviour");
			}
		}
	}

	public void PreAndMidRollAdsForExclusiveVODContentAnypacklessThan499withSupermoonActive(String userType,
			String VideoVODContent) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify whether pre-roll and mid-roll ads are played for Video VOD as TVOD content");
			navigateHome();
			waitTime(3000);
			// AnypacklessThan499withSupermoonActive();
			waitTime(3500);
			click(PWALandingPages.objWebProfileIcon, "Profile Icon");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");
			Thread.sleep(3000);
			scrollToTheElementWEB(PWAComboOfferPage.objLiveTVTVODItem(VideoVODContent));
			waitTime(1500);
			JSClick(PWAComboOfferPage.objLiveTVTVODItem(VideoVODContent), VideoVODContent);
			waitTime(2500);
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
				waitTime(2500);
			} else {
				JSClick(PWAComboOfferPage.objWatchNowCTAInPlayer, "Watch Now");
				waitTime(2500);
			}

			// PRE-ROLL
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info(
						"user is able to see pre-roll ads are played for Exclusive VOD Content: " + VideoVODContent);
				extent.extentLoggerPass("Ad",
						"user is able to see pre-roll ads are played for Exclusive VOD Content: " + VideoVODContent);
				waitTime(5000);
				waitForPlayerAdToComplete("Video Player");
			} else {
				logger.info("user is not able to see pre-roll ads are played for Exclusive VOD Content: "
						+ VideoVODContent);
				extent.extentLoggerFail("Ad",
						"user is not able to see pre-roll ads are played for Exclusive VOD Content: "
								+ VideoVODContent);
			}

			waitTime(6000);
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
			playerScrubTillMidWeb();
			click(PWAPlayerPage.objPlayerPlay, "Play Icon");
			waitTime(2000);
			// MID-ROLL
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info(
						"user is able to see mid-roll ads are played for Exclusive VOD Content: " + VideoVODContent);
				extent.extentLoggerPass("Ad",
						"user is able to see mid-roll ads are played for Exclusive VOD Content: " + VideoVODContent);
				waitTime(5000);
				waitForPlayerAdToComplete("Video Player");
			} else {
				logger.info(
						"user not able to see mid-roll ads are played for Exclusive VOD Content: " + VideoVODContent);
				extent.extentLoggerFail("Ad",
						"user not able to see mid-roll ads are played for Exclusive VOD Content: " + VideoVODContent);

			}
		}
	}

	public void PostRollAdsForExclusiveVODContentAnypacklessThan499withSupermoonActive(String userType,
			String VideoVODContent) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify whether post-roll ads are not played for Video VOD as TVOD content");
			navigateHome();
			waitTime(3000);
			// AnypacklessThan499withSupermoonActive();
			waitTime(3500);
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, VideoVODContent, "Search Field");
			waitTime(3000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, VideoVODContent);
			waitTime(3000);
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume In Payer")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
				waitTime(5000);
			} else {
				JSClick(PWAComboOfferPage.objWatchNowCTAInPlayer, "Watch Now CTA");
				waitTime(5000);
			}

			waitTime(2500);
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {

				waitForPlayerAdToComplete("Video Player");
			}
			waitTime(6000);
			click(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
			playerScrubTillLastWeb();

			click(PWAPlayerPage.objPlayerPlay, "Play Icon");
			waitTime(2500);
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {

				waitForPlayerAdToComplete("Video Player");
			}
			waitTime(6000);
			WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
			WebElement progressBar = getWebDriver().findElement(PWAPlayerPage.objPlayerProgressBar);
			Actions action = new Actions(getWebDriver());
			action.clickAndHold(scrubber).moveToElement(progressBar, 600, 0).release().perform();

			// POST-ROLL
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info(
						"user is able to see post-roll ads are played for Exclusive VOD Content: " + VideoVODContent);
				extent.extentLoggerFail("Ad",
						"user is able to see post-roll ads are played for Exclusive VOD Content: " + VideoVODContent);
				waitTime(5000);
				waitForPlayerAdToComplete("Video Player");
			} else {
				logger.info(
						"user not able to see post-roll ads are played for Exclusive VOD Content: " + VideoVODContent);
				extent.extentLoggerPass("Ad",
						"user not able to see post-roll ads are played for Exclusive VOD Content: " + VideoVODContent);

			}

		}
	}

	public void noAdsForSVODContentExceptLiveTVODContent(String userType, String SVODContent, String LiveTVContent)
			throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify ads are not played for other SVOD contents except Live TV TVOD Content");
			AnypacklessThan499withSupermoonActive();
			waitTime(3000);
			navigateHome();
			waitTime(3000);
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, SVODContent, "Search Field");
			waitTime(3000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, SVODContent);

			waitTime(3500);

			if (!checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("user not able to see ads for SVOD Content: " + SVODContent);
				extent.extentLoggerPass("Ad", "user not able to see ads for SVOD Content: " + SVODContent);
			} else {
				logger.info("user able to see ads for SVOD Content: " + SVODContent);
				extent.extentLoggerFail("Ad", "user able to see ads for SVOD Content: " + SVODContent);
			}
			navigateHome();
			waitTime(3500);
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, LiveTVContent, "Search Field");
			waitTime(3000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, LiveTVContent);
			waitTime(3000);
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume In Payer")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
				waitTime(5000);
			} else {
				JSClick(PWAComboOfferPage.objWatchNowCTAInPlayer, "Watch Now CTA");
				waitTime(5000);
			}

			waitTime(3500);
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("user able to see ads for Live TV Content: " + LiveTVContent);
				extent.extentLoggerPass("Ad", "user able to see ads for Live TV Content: " + LiveTVContent);
			} else {
				logger.info("user not able to see ads for Live TV Content: " + LiveTVContent);
				extent.extentLoggerFail("Ad", "user not able to see ads for Live TV Content: " + LiveTVContent);
			}

		}
	}

	public void noAdsForSVODContentExceptVideoTVODContent(String userType, String SVODContent, String VideoTVODContent)
			throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify ads are not played for other SVOD contents except Video TVOD Content");
			navigateHome();
			waitTime(3000);
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, SVODContent, "Search Field");
			waitTime(3000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, SVODContent);

			waitTime(5500);
			if (!checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("user not able to see ads for SVOD Content: " + SVODContent);
				extent.extentLoggerPass("Ad", "user not able to see ads for SVOD Content: " + SVODContent);
			} else {
				logger.info("user able to see ads for SVOD Content: " + SVODContent);
				extent.extentLoggerFail("Ad", "user able to see ads for SVOD Content: " + SVODContent);
			}
			waitTime(3500);
			navigateHome();
			waitTime(3500);
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, VideoTVODContent, "Search Field");
			waitTime(3000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, VideoTVODContent);

			waitTime(3500);
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume In Payer")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
				waitTime(5000);
			} else {
				JSClick(PWAComboOfferPage.objWatchNowCTAInPlayer, "Watch Now CTA");
				waitTime(5000);
			}

			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("user able to see ads for Live TV Content: " + VideoTVODContent);
				extent.extentLoggerPass("Ad", "user able to see ads for Live TV Content: " + VideoTVODContent);
			} else {
				logger.info("user not able to see ads for Live TV Content: " + VideoTVODContent);
				extent.extentLoggerFail("Ad", "user not able to see ads for Live TV Content: " + VideoTVODContent);
			}

		}
	}

	public void playAndPauseForLiveTvTVODContentAnypacklessThan499withSupermoonActive(String userType,
			String LiveTvTVODContent) throws Exception {
		extent.HeaderChildNode("Verify Whether Play/Pause is displayed on player screen for LiveTV TVOD content");
		AnypacklessThan499withSupermoonActive();
		waitTime(2500);
		click(PWAHomePage.objSearchBtn, "Seach button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, LiveTvTVODContent, "Search Field");
		waitTime(3000);
		JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, LiveTvTVODContent);

		waitTime(2500);
		mouseHover();

		if (checkElementDisplayed(PWAPlayerPage.pauseBtn, "Pause icon")) {
			waitTime(500);

			logger.info("user able to see Pause icon on player screen ");
			extent.extentLoggerPass("", "user able to see Pause icon on player screen ");

			JSClick(PWAPlayerPage.pauseBtn, "Pause icon");
		}
		if (checkElementDisplayed(PWAPlayerPage.playBtn, "Play icon")) {
			waitTime(500);

			logger.info("user able to see Play icon on player screen ");
			extent.extentLoggerPass("", "user able to see Play icon on player screen ");

			JSClick(PWAPlayerPage.playBtn, "Play icon");
		}
	}

	public void noPlayerFunctionalityForLiveTVContentAnypacklessThan499withSupermoonActive(String userType,
			String LiveTvTVODContent) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"Verify Whether Seek bar,Forward,Rewind button is not displayed on player screen for LiveTV content");
//		//AnypacklessThan499withSupermoonActive();
//		navigateHome();
//		waitTime(3500);
//		click(PWAHomePage.objSearchBtn, "Seach button");
//		waitTime(2000);
//		type(PWASearchPage.objSearchEditBox, LiveTvTVODContent, "Search Field");
//		waitTime(3000);
//		JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, LiveTvTVODContent);
//		waitTime(2500);
//		if(checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume In Payer")) {
//			JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
//			waitTime(10000);
//		}else {
//			JSClick(PWAComboOfferPage.objWatchNowCTAInPlayer, "Watch Now CTA");
//			waitTime(10000);
//		}
//		waitTime(2500);
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {

				waitForPlayerAdToComplete("Video Player");
			}
			waitTime(3000);
			mouseHover();

			if (!checkElementDisplayed(PWAPlayerPage.objPlaykitSeekBar, "Seek Bar")) {
				logger.info("Seek bar is not displayed for Live TV TVOD content: " + LiveTvTVODContent);
				extent.extentLoggerPass("", "Seek bar is not displayed for Live TV TVOD content: " + LiveTvTVODContent);
			}
			if (!checkElementDisplayed(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds icon")) {
				logger.info("Rewind 10 Seconds icon is not displayed for Live TV TVOD content: " + LiveTvTVODContent);
				extent.extentLoggerPass("",
						"Rewind 10 Seconds icon is not displayed for Live TV TVOD content: " + LiveTvTVODContent);
			}
			if (!checkElementDisplayed(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds icon")) {
				logger.info("Forward 10 Seconds icon is not displayed for Live TV TVOD content: " + LiveTvTVODContent);
				extent.extentLoggerPass("",
						"Forward 10 Seconds icon is not displayed for Live TV TVOD content: " + LiveTvTVODContent);
			}
		}
	}

	public void verifyLiveTvTagForLiveTVContentAnypacklessThan499withSupermoonActive(String userType,
			String LiveTvTVODContent) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify Whether Live Tag  is displayed on player screen for LiveTV content");
//		//AnypacklessThan499withSupermoonActive();
//		navigateHome();
//		waitTime(3500);
//		navigateToAnyScreenOnWeb("ZEEPLEX");
//		waitTime(2500);
//		scrollToTheElementWEB(PWAComboOfferPage.objLiveTVTVODItem(LiveTvTVODContent));
//		waitTime(1500);
//		JSClick(PWAComboOfferPage.objLiveTVTVODItem(LiveTvTVODContent), LiveTvTVODContent);
//		waitTime(2500);
//		if(checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume In Payer")) {
//			JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
//			waitTime(10000);
//		}else {
//			JSClick(PWAComboOfferPage.objWatchNowCTAInPlayer, "Watch Now CTA In Payer");
//			waitTime(10000);
//		}
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {

				waitForPlayerAdToComplete("Video Player");
			}
			waitTime(3000);

			if (verifyElementPresent(PWAPlayerPage.objLivePlayerLiveTag, " Live Tag")) {
				logger.info(" Live Tag  is displayed on player screen for LiveTV content, expected behaviour");
				extent.extentLoggerPass("",
						" Live Tag  is displayed on player screen for LiveTV content, expected behaviour");
			} else {
				extent.extentLoggerFail(" ", " Live Tag is not displayed on player screen for LiveTV content");

			}
		}
	}

	public void VerifyPlayerControlsForVideoTVODConsumptionAnypacklessThan499withSupermoonActive(String userType,
			String videoname) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify Whether Player controls is displayed on player screen for Video content");

			// AnypacklessThan499withSupermoonActive();
			navigateHome();
			waitTime(3500);
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, videoname, "Search Field");
			waitTime(3000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, videoname);
			waitTime(3500);
			if (checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume In Payer")) {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
				waitTime(10000);
			} else {
				JSClick(PWAComboOfferPage.objWatchNowCTAInPlayer, "Watch Now CTA In Payer");
				waitTime(10000);
			}
			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {

				waitForPlayerAdToComplete("Video Player");
			}
			waitTime(5000);
			Actions actions = new Actions(getWebDriver());
			WebElement ele = getWebDriver().findElement(PWAPlayerPage.objPlaybackVideoOverlay);
			actions.moveToElement(ele).perform();
			if (ele.isDisplayed()) {
				verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button");
				verifyElementPresent(PWAPlayerPage.rewind10SecBtn, "Rewind 10 Seconds icon");
				actions.moveToElement(ele).perform();

				verifyElementPresent(PWAPlayerPage.playBtn, "Play icon");
				actions.moveToElement(ele).perform();

				verifyElementPresent(PWAPlayerPage.forward10SecBtn, "Forward 10 Seconds icon");
				actions.moveToElement(ele).perform();

				verifyElementPresent(PWAPlayerPage.progressBar, "Progress bar");
				actions.moveToElement(ele).perform();

				verifyElementPresent(PWAPlayerPage.audioBtn, "Audio icon");
				actions.moveToElement(ele).perform();

				verifyElementPresent(PWAPlayerPage.totalDurationTime, "Total duration time");
				actions.moveToElement(ele).perform();

				verifyElementPresent(PWAPlayerPage.settingsBtn, "Settings icon");
				actions.moveToElement(ele).perform();

				verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize window icon");
				actions.moveToElement(ele).perform();

				verifyElementPresent(PWAPlayerPage.totalDurationTime, "Total time");
				actions.moveToElement(ele).perform();

				verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
				verifyElementPresentAndClick(PWAPlayerPage.objPlayerQualityButton, "Quality Button");
				JSClick(PWAPlayerPage.objBestQualityOption, "Best quality");
				verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
				verifyElementPresentAndClick(PWAPlayerPage.objPlayerQualityButton, "Quality Button");
				String SelectedOption = getText(PWAPlayerPage.objPlayerSelectedQuality);
				if (SelectedOption.contains("Best")) {
					logger.info("Best option is selected");
					extent.extentLogger("Quality", "Best option is selected");
				}
				JSClick(PWAPlayerPage.objBetterQualityOption, "Better quality");
				verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
				verifyElementPresentAndClick(PWAPlayerPage.objPlayerQualityButton, "Quality Button");
				String SelectedOption2 = getText(PWAPlayerPage.objPlayerSelectedQuality);

				if (SelectedOption2.contains("Better")) {
					logger.info("Better option is selected");
					extent.extentLogger("Quality", "Better option is selected");
				}
				verifyElementPresentAndClick(PWAPlayerPage.settingsBtn, "Setting button");
				waitTime(1000);
				verifyElementPresentAndClick(PWAPlayerPage.maximizeBtn, "Maximize window icon");
				waitTime(1000);

				JSClick(PWAPlayerPage.minimizeBtn, "Minimize button");

				logger.info(" Player controls is displayed on player screen for Video content, expected behaviour");
				extent.extentLoggerPass("",
						" Player controls is displayed on player screen for Video content, expected behaviour");
			} else {
				logger.info("Player controls are not displayed on player screen for Video content");
				extent.extentLoggerFail(" ", "Player controls are not displayed on player screen for Video content");

			}

		}
	}

	public void noAdsForSubscribedUsersForPremiumContents(String userType, String PremiumContent) throws Exception {
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode("Verify that ads are not displayed for subscribed users");
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, PremiumContent, "Search Field");
			waitTime(3000);
			click(PWASearchPage.objSearchMoviesTab, "Movies tab");
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, PremiumContent);

			waitTime(5500);
			if (!checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				logger.info("user not able to see ads for Subscribed content: " + PremiumContent);
				extent.extentLoggerPass("Ad", "user not able to see ads for Subscribed content: " + PremiumContent);
			} else {
				logger.info("user able to see ads for Subscribed content: " + PremiumContent);
				extent.extentLoggerFail("Ad", "user able to see ads for Subscribed content: " + PremiumContent);
			}
		}
	}

	public void VerifyChromeCastForVideoTVODorLiveTv(String userType, String TVODvideoname) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify if cast option is displaying on the TVOD content player on right top corner");
			oneYearPremium6MSupermoonUser();
			waitTime(3500);
			click(PWAHomePage.objSearchBtn, "Seach button");
			waitTime(2000);
			type(PWASearchPage.objSearchEditBox, TVODvideoname, "Search Field");
			waitTime(3000);
			JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, TVODvideoname);
			waitTime(3500);
			// objChromeCast
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objChromeCast)) {
				logger.info(
						"user able to see the chromecast option displaying on the TVOD content player on right top corner");
				extent.extentLoggerPass("",
						"user able to see the chromecast option displaying on the TVOD content player on right top corner");
			} else {
				logger.info(
						"user not able to see the chromecast option displaying on the TVOD content player on right top corner");
				extent.extentLoggerFail("",
						"user not able to see the chromecast option displaying on the TVOD content player on right top corner");
			}
			logout();
		}
	}

	public void noAutoRenewalStatusForSupermoonConentTVODLogin(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see Auto renewal status as NO for rented supermoon content");
			TVODLogin();
			waitTime(2500);
			click(PWAHomePage.objProfileMenu, "Profile Menu");
			waitTime(2000);
			JSClick(PWAHamburgerMenuPage.objMyTransactions, "My transaction ");
			waitTime(2000);
			String status = getWebDriver().findElement(PWAHamburgerMenuPage.objMyTransactionAutoRenewalStatus)
					.getText();
			if (status.contains("No")) {
				logger.info("user is able to see Auto renewal status as NO for rented supermoon content");
				extent.extentLoggerPass("Auto renewal status",
						"user is able to see Auto renewal status as NO for rented supermoon content");
			} else {
				logger.info("user is not able to see Auto renewal status as NO for rented supermoon content");
				extent.extentLoggerFail("Auto renewal status",
						"user is not able to see Auto renewal status as NO for rented supermoon content");
			}
			logout();
		}
	}

	public void contentDiscriptorVerification(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-8755: 1. Content Descriptors to be displayed on Player");
		extent.extentLogger("",
				"Verification of <b>TC 1. A small visual overlay needs to be displayed on the Player with age rating information about the content being played<b>");
		logger.info(
				"Verification of TC 1. A small visual overlay needs to be displayed on the Player with age rating information about the content being played");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String contentNameTC1 = "Robin Hood And The Invincible Knight";
		String contentIDTC1 = "0-0-103553";
		String contentMetaInSearchTC1 = "English";
		String cdInUITC1 = "", cdInUITC2 = "", cdInUITC3 = "", cdInUITC4 = "";
		LocalStorage local = ((ChromeDriver) getWebDriver()).getLocalStorage();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentNameTC1, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentNameTC1, contentMetaInSearchTC1), "Searched content");
		getPlayerHeadPosition();
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true)) {
			cdInUITC1 = getElementPropertyToString("innerText", PWAPlayerPage.objContentDescriptor, "CD Text");
		}
		mandatoryRegistrationPopUp(userType);
		ResponseInstance.updateWatchHistory(contentIDTC1, 1, local.getItem("guestToken"));

		extent.HeaderChildNode("PWA2-8755: 2. Content Descriptors with changed Display Language");
		extent.extentLogger("",
				"Verification of <b>TC 2. The text to be displayed must conform to the display language settings.<b>");
		logger.info("Verification of TC 2. The text to be displayed must conform to the display language settings.");
		String contentNameTC2 = "Robin Hood And The Invincible Knight";
		String contentIDTC2 = "0-0-103553";
		String contentMetaInSearchTC2 = "अंग्रेज़ी";
		String contentDescriptorHindiTC2 = "hindi_text";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHamburgerMenuPage.objLanguageBtnWeb, "Language Button");
		click(PWALanguageSettingsPage.objNonSelectedHin, "Hindi Display Language");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		waitTime(2000);
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentNameTC2, "Search Field");
		waitTime(2000);
		JSClick(PWASearchPage.objSearchResultTxt(contentNameTC2, contentMetaInSearchTC2), "Searched content");
		getPlayerHeadPosition();
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor(contentDescriptorHindiTC2), 50,
				"Content Descriptor in Hindi", true)) {
			cdInUITC2 = getElementPropertyToString("innerText", PWAPlayerPage.objContentDescriptor, "CD Text");
			if (cdInUITC1.equals(cdInUITC2)) {
				logger.error("English CD is displayed after changing Display language to Hindi");
				extent.extentLoggerFail("", "English CD is displayed after changing Display language to Hindi");
			} else {
				logger.info("English CD is not displayed after changing Display language to Hindi, expected behavior");
				extent.extentLogger("",
						"English CD is not displayed after changing Display language to Hindi, expected behavior");
				if (cdInUITC2.equals(contentDescriptorHindiTC2)) {
					logger.info("Expected CD is displayed: " + cdInUITC2);
					extent.extentLogger("", "Expected CD is displayed: " + cdInUITC2);
				} else {
					logger.error(cdInUITC2 + " CD is displayed instead of " + contentDescriptorHindiTC2);
					extent.extentLoggerFail("", cdInUITC2 + " CD is displayed instead of " + contentDescriptorHindiTC2);
				}
			}
		}
		navigateToHome();
		ResponseInstance.updateWatchHistory(contentIDTC2, 1, local.getItem("guestToken"));
		/*
		 * extent.
		 * HeaderChildNode("PWA2-8755: 3. Content Descriptors with fall back to English display"
		 * ); extent.extentLogger("",
		 * "Verification of <b>TC 3. In case there is no language data available, we should fall back to display English text.<b>"
		 * ); logger.info(""Verification of TC 3. In case there is no language data
		 * available, we should fall back to display English text.");
		 * mandatoryRegistrationPopUp(userType); navigateToHome(); String
		 * contentNameTC3=""; String contentIDTC3=""; String contentMetaInSearchTC3 =
		 * ""; String contentDescriptorEnglishTC3 = "english_text";
		 * click(PWAHomePage.objSearchBtn, "Search icon");
		 * type(PWASearchPage.objSearchEditBox, contentNameTC3, "Search Field");
		 * waitTime(2000);
		 * click(PWASearchPage.objSearchResultTxt(contentNameTC3,contentMetaInSearchTC3)
		 * , "Searched content"); getPlayerHeadPosition();
		 * if(getLocatorPresence(PWAPlayerPage.objContentDescriptor,
		 * 50,"Content Descriptor",true)) {
		 * cdInUITC3=getElementPropertyToString("innerText",PWAPlayerPage.
		 * objContentDescriptor,"CD Text");
		 * if(cdInUITC3.equals(contentDescriptorEnglishTC3)) {
		 * logger.info("Expected CD is displayed: "+contentDescriptorEnglishTC3);
		 * extent.extentLogger("",
		 * "Expected CD is displayed: "+contentDescriptorEnglishTC3); } else {
		 * logger.error(cdInUITC3+" CD is displayed instead of "
		 * +contentDescriptorEnglishTC3); extent.extentLoggerFail("",
		 * cdInUITC3+" CD is displayed instead of "+contentDescriptorEnglishTC3); } }
		 * ResponseInstance.updateWatchHistory(contentIDTC3, 1,
		 * local.getItem("guestToken"));
		 */
		navigateToHome();
		click(PWAHamburgerMenuPage.objLanguageBtnWeb, "Language Button");
		click(PWALanguageSettingsPage.objNonSelectedEng, "English Display Language");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		/*
		 * extent.
		 * HeaderChildNode("PWA2-8755: 4. Content Descriptors truncated with 3 dots");
		 * extent.extentLogger("",
		 * "Verification of <b>TC 4. If the text is longer i.e it would go beyond 2 lines then we should truncate the text with 3 dots at the end of the 2nd line.<b>"
		 * ); logger.
		 * info("Verification of TC 4. If the text is longer i.e it would go beyond 2 lines then we should truncate the text with 3 dots at the end of the 2nd line."
		 * ); mandatoryRegistrationPopUp(userType); navigateToHome(); String
		 * contentNameTC4=""; String contentIDTC4=""; String contentMetaInSearchTC4 =
		 * ""; String contentDescriptorEnglishTC4 = "english_text";
		 * click(PWAHomePage.objSearchBtn, "Search icon");
		 * type(PWASearchPage.objSearchEditBox, contentNameTC4, "Search Field");
		 * waitTime(2000);
		 * click(PWASearchPage.objSearchResultTxt(contentNameTC4,contentMetaInSearchTC4)
		 * , "Searched content"); getPlayerHeadPosition();
		 * if(getLocatorPresence(PWAPlayerPage.objContentDescriptor,
		 * 50,"Content Descriptor",true)) {
		 * cdInUITC4=getElementPropertyToString("innerText",PWAPlayerPage.
		 * objContentDescriptor,"CD Text");
		 * if(cdInUITC4.equals(contentDescriptorEnglishTC4)) {
		 * logger.info("Expected CD is displayed: "+contentDescriptorEnglishTC4);
		 * extent.extentLogger("",
		 * "Expected CD is displayed: "+contentDescriptorEnglishTC4); } else {
		 * logger.error(cdInUITC4+" CD is displayed instead of "
		 * +contentDescriptorEnglishTC4); extent.extentLoggerFail("",
		 * cdInUITC4+" CD is displayed instead of "+contentDescriptorEnglishTC4); } }
		 * ResponseInstance.updateWatchHistory(contentIDTC4, 1,
		 * local.getItem("guestToken"));
		 */
		if (!userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("PWA2-8755: 5. Video resuming");
			extent.extentLogger("",
					"Verification of <b>TC 5. Video resuming (user clicking a video from continue watching)<b>");
			logger.info("Verification of TC 5. Video resuming (user clicking a video from continue watching)");
			String contentNameCWTray = "Troubles Multiply";
			// String contentIDCWTray="0-1-manual-18h5lltrmhh0";
			String contentMetaInSearchCWTray = "Hindi";
			mandatoryRegistrationPopUp(userType);
			navigateToHome();
			click(PWAHomePage.objSearchBtn, "Search icon");
			type(PWASearchPage.objSearchEditBox, contentNameCWTray, "Search Field");
			waitTime(2000);
			click(PWASearchPage.objSearchResultTxt(contentNameCWTray, contentMetaInSearchCWTray), "Searched content");
			getPlayerHeadPosition();
			logger.info("Waiting for one minute to get the content on Continue watching tray");
			extent.extentLogger("", "Waiting for one minute to get the content on Continue watching tray");
			waitTime(60000);
			waitTime(10000);
			Back(1);
			Back(1);
			getWebDriver().navigate().refresh();
			waitTime(5000);
			if (verifyElementPresentAndClick(PWALandingPages.objContinueWatchingCard(1),
					"Card in Continue Watching tray")) {
				getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true);
			}
			// ResponseInstance.updateWatchHistory(contentIDCWTray, 1,
			// local.getItem("guestToken"));
		}

		extent.HeaderChildNode("PWA2-8755: 6. Next Video Play");
		extent.extentLogger("",
				"Verification of <b>TC 6. Video starting due to auto-play next when current video ends<b>");
		logger.info("Verification of TC 6. Video starting due to auto-play next when current video ends");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentNameTC1, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentNameTC1, contentMetaInSearchTC1), "Searched content");
		waitTime(5000);
		getPlayerHeadPosition();
		ScrubToPlayerEnd();
		waitTime(5000);
		if (!userType.equals("SubscribedUser"))
			getPlayerHeadPosition();
		String upnextTitle = waitUntilUpNextCardPlays(contentNameTC1);
		if (!userType.equals("SubscribedUser"))
			getPlayerHeadPosition();
		try {
			getWebDriver().findElement(PWAPlayerPage.pauseBtn).click();
			getWebDriver().findElement(PWAPlayerPage.playBtn).click();
		} catch (Exception e) {
		}
		;
		getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true);
		String upnextURL = getWebDriver().getCurrentUrl();
		String[] abc = upnextURL.split("/");
		String upnextContentID = abc[abc.length - 1];
		ResponseInstance.updateWatchHistory(contentIDTC1, 1, local.getItem("guestToken"));
		ResponseInstance.updateWatchHistory(upnextContentID, 1, local.getItem("guestToken"));

		extent.HeaderChildNode("PWA2-8755: 7. Deeplink");
		extent.extentLogger("", "Verification of <b>TC 7. applicable for deeplinking scenarios as well<b>");
		logger.info("Verification of TC 7. applicable for deeplinking scenarios as well");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String url = getWebDriver().getCurrentUrl();
		url = url + "/movies/details/robin-hood-and-the-invincible-knight/0-0-103553";
		getWebDriver().get(url);
		logger.info("Opened deeplink url");
		extent.extentLogger("", "Opened deeplink url");
		getPlayerHeadPosition();
		getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true);
		ResponseInstance.updateWatchHistory(contentIDTC1, 1, local.getItem("guestToken"));

		extent.HeaderChildNode("PWA2-8755: 8. CD with Play elements");
		extent.extentLogger("",
				"Verification of <b>TC 8. It should be displayed on player when there are no other player elements<b>");
		logger.info("Verification of TC 8. It should be displayed on player when there are no other player elements");
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		getWebDriver().get(url);
		getPlayerHeadPosition();
		getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true);
		pausePlayer();
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor, 5, "Content Descriptor", false)) {
			logger.error("Content Descriptor is displayed when player controls are displayed");
			extent.extentLoggerFail("", "Content Descriptor is displayed when player controls are displayed");
		} else {
			logger.info("Content Descriptor is not displayed when player controls are displayed, expected behavior");
			extent.extentLogger("",
					"Content Descriptor is not displayed when player controls are displayed, expected behavior");
		}
		extent.HeaderChildNode("PWA2-8755: 9. CD reappear");
		extent.extentLogger("",
				"Verification of <b>TC 9. Once these overlay elements are dismissed the CD should re-appear<b>");
		logger.info("Verification of TC 9. Once these overlay elements are dismissed the CD should re-appear");
		click(PWAPlayerPage.objPlayerPlay, "Play button");
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor ", false)) {
			logger.info("Content Descriptor reappears after Player controls are dismissed");
			extent.extentLogger("", "Content Descriptor reappears after Player controls are dismissed");
		} else {
			logger.error("Content Descriptor fails to reappear after Player controls are dismissed");
			extent.extentLoggerFail("", "Content Descriptor fails to reappear after Player controls are dismissed");
		}
		extent.HeaderChildNode("PWA2-8755: 10. CD does not appear after display duration");
		extent.extentLogger("",
				"Verification of <b>TC 10. Once the Content Descriptor is displayed continuously for its entire display duration, it should not reappear during that playout session<b>");
		logger.info(
				"Verification of TC 10. Once the Content Descriptor is displayed continuously for its entire display duration, it should not reappear during that playout session");
		waitTime(20000);
		logger.info("Waited 20 seconds for completion of CD display duration");
		extent.extentLogger("", "Waited 20 seconds for completion of CD display duration");
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor, 100, "Content Descriptor ", false)) {
			logger.error("Content Descriptor is displayed even after display duration");
			extent.extentLoggerFail("", "Content Descriptor is displayed even after display duration");
		} else {
			logger.info("Content Descriptor is not displayed after display duration, expected behavior");
			extent.extentLogger("", "Content Descriptor is not displayed after display duration, expected behavior");
		}
		ResponseInstance.updateWatchHistory(contentIDTC1, 1, local.getItem("guestToken"));

		extent.HeaderChildNode("PWA2-8755: 11. CD on same content replay");
		extent.extentLogger("",
				"Verification of <b>TC 11. If user exits the player and then plays the same video again the CD should be displayed<b>");
		logger.info(
				"Verification of TC 11. If user exits the player and then plays the same video again the CD should be displayed");
		mandatoryRegistrationPopUp(userType);
		Actions actions = new Actions(getWebDriver());
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentNameTC1, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentNameTC1, contentMetaInSearchTC1), "Searched content");
		waitTime(5000);
		getPlayerHeadPosition();
		getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true);
		waitTime(10000);
		logger.info("Waited 10 seconds for completion of CD display duration");
		extent.extentLogger("", "Waited 10 seconds for completion of CD display duration");
		Back(1);
		mandatoryRegistrationPopUp(userType);
		type(PWASearchPage.objSearchEditBox, contentNameTC1, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentNameTC1, contentMetaInSearchTC1), "Searched content");
		waitTime(5000);
		getPlayerHeadPosition();
		getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true);
		extent.HeaderChildNode("PWA2-8755: 12. CD in maximized player");
		extent.extentLogger("", "Verification of <b>TC 12. The CD should be displayed on any orientation<b>");
		logger.info("Verification of TC 12. The CD should be displayed on any orientation");
		Back(1);
		mandatoryRegistrationPopUp(userType);
		type(PWASearchPage.objSearchEditBox, contentNameTC1, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentNameTC1, contentMetaInSearchTC1), "Searched content");
		waitTime(5000);
		getPlayerHeadPosition();
		WebElement ele = getWebDriver().findElement(PWAPlayerPage.objPlaybackVideoOverlay);
		actions.moveToElement(ele).build().perform();
		click(PWAPlayerPage.maximizeBtn, "Maximize icon");
		getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true);
		mandatoryRegistrationPopUp(userType);
		extent.HeaderChildNode("PWA2-8755: 13. CD in mininmized player after CD display duration");
		extent.extentLogger("",
				"Verification of <b>TC 13. once it has been displayed for the entirety of its display duration it should not be displayed again for the other orientation.<b>");
		logger.info(
				"Verification of TC 13. once it has been displayed for the entirety of its display duration it should not be displayed again for the other orientation.");
		waitTime(20000);
		logger.info("Waited 20 seconds for completion of CD display duration");
		extent.extentLogger("", "Waited 20 seconds for completion of CD display duration");
		JSClick(PWAPlayerPage.minimizeBtn, "Minimize icon");
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor, 10, "Content Descriptor ", false)) {
			logger.error("Content Descriptor is displayed even after CD display duration");
			extent.extentLoggerFail("", "Content Descriptor is displayed even after CD display duration");
		} else {
			logger.info("Content Descriptor is not displayed after display duration, expected behavior");
			extent.extentLogger("", "Content Descriptor is not displayed after display duration, expected behavior");
		}
		ResponseInstance.updateWatchHistory(contentIDTC1, 1, local.getItem("guestToken"));

		extent.HeaderChildNode("PWA2-8755: 14. CD for Episode");
		extent.extentLogger("", "Verification of <b>TC 14. CD for Episode<b>");
		logger.info("Verification of TC 14. CD for Episode");
		String contentName = "Sarla Learns that Preeta Is Not Pregnant";
		String contentID = "0-1-manual-7r0ja7pg6je0";
		String contentMetaInSearch = "Hindi";
		String contentCD = "Rated U 13+";
		String cdInUI = "";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentName, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentName, contentMetaInSearch), "Searched content");
		waitTime(5000);
		getPlayerHeadPosition();
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true)) {
			cdInUI = getElementPropertyToString("innerText", PWAPlayerPage.objContentDescriptor, "CD Text");
			if (cdInUI.equals(contentCD)) {
				logger.info("Expected CD is displayed: " + cdInUI);
				extent.extentLogger("", "Expected CD is displayed: " + cdInUI);
			} else {
				logger.error(cdInUI + " CD is displayed instead of " + contentCD);
				extent.extentLoggerFail("", cdInUI + " CD is displayed instead of " + contentCD);
			}
		}
		ResponseInstance.updateWatchHistory(contentID, 1, local.getItem("guestToken"));

		extent.HeaderChildNode("PWA2-8755: 15. CD for Video");
		extent.extentLogger("", "Verification of <b>TC 15. CD for Video<b>");
		logger.info("Verification of TC 15. CD for Video");
		contentName = "Pictionary with Tanuj, Sunaina and Parambrata";
		contentID = "0-0-136802";
		contentMetaInSearch = "Hindi";
		contentCD = "Rated U";
		cdInUI = "";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentName, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentName, contentMetaInSearch), "Searched content");
		waitTime(5000);
		getPlayerHeadPosition();
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true)) {
			cdInUI = getElementPropertyToString("innerText", PWAPlayerPage.objContentDescriptor, "CD Text");
			if (cdInUI.equals(contentCD)) {
				logger.info("Expected CD is displayed: " + cdInUI);
				extent.extentLogger("", "Expected CD is displayed: " + cdInUI);
			} else {
				logger.error(cdInUI + " CD is displayed instead of " + contentCD);
				extent.extentLoggerFail("", cdInUI + " CD is displayed instead of " + contentCD);
			}
		}
		ResponseInstance.updateWatchHistory(contentID, 1, local.getItem("guestToken"));

		extent.HeaderChildNode("PWA2-8755: 16. CD for Music");
		extent.extentLogger("", "Verification of <b>TC 16. CD for Music<b>");
		logger.info("Verification of TC 16. CD for Music");
		contentName = "Mujhe Ishq Mein Rang De Mahi";
		contentID = "0-0-movie_745793384";
		contentMetaInSearch = "Hindi";
		contentCD = "Rated U";
		cdInUI = "";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentName, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentName, contentMetaInSearch), "Searched content");
		waitTime(5000);
		getPlayerHeadPosition();
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true)) {
			cdInUI = getElementPropertyToString("innerText", PWAPlayerPage.objContentDescriptor, "CD Text");
			if (cdInUI.equals(contentCD)) {
				logger.info("Expected CD is displayed: " + cdInUI);
				extent.extentLogger("", "Expected CD is displayed: " + cdInUI);
			} else {
				logger.error(cdInUI + " CD is displayed instead of " + contentCD);
				extent.extentLoggerFail("", cdInUI + " CD is displayed instead of " + contentCD);
			}
		}
		ResponseInstance.updateWatchHistory(contentID, 1, local.getItem("guestToken"));

		extent.HeaderChildNode("PWA2-8755: 17. CD for Trailer");
		extent.extentLogger("", "Verification of <b>TC 17. CD for Trailer<b>");
		logger.info("Verification of TC 17. CD for Trailer");
		contentName = "Dial 100 | Trailer";
		contentID = "0-0-1z51249";
		contentMetaInSearch = "Hindi";
		contentCD = "Rated U/A 13+";
		cdInUI = "";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentName, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentName, contentMetaInSearch), "Searched content");
		waitTime(5000);
		getPlayerHeadPosition();
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true)) {
			cdInUI = getElementPropertyToString("innerText", PWAPlayerPage.objContentDescriptor, "CD Text");
			if (cdInUI.equals(contentCD)) {
				logger.info("Expected CD is displayed: " + cdInUI);
				extent.extentLogger("", "Expected CD is displayed: " + cdInUI);
			} else {
				logger.error(cdInUI + " CD is displayed instead of " + contentCD);
				extent.extentLoggerFail("", cdInUI + " CD is displayed instead of " + contentCD);
			}
		}
		ResponseInstance.updateWatchHistory(contentID, 1, local.getItem("guestToken"));

		extent.HeaderChildNode("PWA2-8755: 18. CD for Promo");
		extent.extentLogger("", "Verification of <b>TC 18. CD for Promo<b>");
		logger.info("Verification of TC 18. CD for Promo");
		contentName = "Beat the Boredom with Commando | Best of ZEE5 Promo";
		contentID = "0-0-145161";
		contentMetaInSearch = "Hindi";
		contentCD = "Rated U";
		cdInUI = "";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentName, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentName, contentMetaInSearch), "Searched content");
		waitTime(5000);
		getPlayerHeadPosition();
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true)) {
			cdInUI = getElementPropertyToString("innerText", PWAPlayerPage.objContentDescriptor, "CD Text");
			if (cdInUI.equals(contentCD)) {
				logger.info("Expected CD is displayed: " + cdInUI);
				extent.extentLogger("", "Expected CD is displayed: " + cdInUI);
			} else {
				logger.error(cdInUI + " CD is displayed instead of " + contentCD);
				extent.extentLoggerFail("", cdInUI + " CD is displayed instead of " + contentCD);
			}
		}
		ResponseInstance.updateWatchHistory(contentID, 1, local.getItem("guestToken"));

		extent.HeaderChildNode("PWA2-8755: 19. CD for Webisode");
		extent.extentLogger("", "Verification of <b>TC 19. CD for Trailer<b>");
		logger.info("Verification of TC 19. CD for Trailer");
		contentName = "Vidya Vinayaka - Weekly Webisode - 25th June to 29th June 2018";
		contentID = "0-0-movie_453293701";
		contentMetaInSearch = "Kannada";
		contentCD = "Rated U";
		cdInUI = "";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentName, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentName, contentMetaInSearch), "Searched content");
		waitTime(5000);
		getPlayerHeadPosition();
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor, 50, "Content Descriptor", true)) {
			cdInUI = getElementPropertyToString("innerText", PWAPlayerPage.objContentDescriptor, "CD Text");
			if (cdInUI.equals(contentCD)) {
				logger.info("Expected CD is displayed: " + cdInUI);
				extent.extentLogger("", "Expected CD is displayed: " + cdInUI);
			} else {
				logger.error(cdInUI + " CD is displayed instead of " + contentCD);
				extent.extentLoggerFail("", cdInUI + " CD is displayed instead of " + contentCD);
			}
		}
		ResponseInstance.updateWatchHistory(contentID, 1, local.getItem("guestToken"));

		extent.HeaderChildNode("PWA2-8755: 20. CD for VOD News");
		extent.extentLogger("", "Verification of <b>TC 20. CD for VOD News<b>");
		logger.info("Verification of TC 20. CD for VOD News");
		contentName = "Attack on ganesh temple in pakistan";
		contentID = "0-0-newsauto_6cn9niipshe0";
		contentMetaInSearch = "ABP News";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentName, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentName, contentMetaInSearch), "Searched content");
		waitTime(5000);
		getPlayerHeadPosition();
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor, 10, "Content Descriptor", false)) {
			logger.error("Content Descriptor is displayed for VOD News");
			extent.extentLoggerFail("", "Content Descriptor is displayed for VOD News");
		} else {
			logger.info("Content Descriptor is not displayed for for VOD News, expected behavior");
			extent.extentLogger("", "Content Descriptor is not displayed for for VOD News, expected behavior");
		}
		ResponseInstance.updateWatchHistory(contentID, 1, local.getItem("guestToken"));

		extent.HeaderChildNode("PWA2-8755: 21. CD for Live News");
		extent.extentLogger("", "Verification of <b>TC 21. CD for Live News<b>");
		logger.info("Verification of TC 21. CD for Live News");
		contentName = "Zee News";
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentName, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchResultTxt(contentName), "Searched content");
		waitTime(5000);
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor, 10, "Content Descriptor", false)) {
			logger.error("Content Descriptor is displayed for Live News");
			extent.extentLoggerFail("", "Content Descriptor is displayed for Live News");
		} else {
			logger.info("Content Descriptor is not displayed for for Live News, expected behavior");
			extent.extentLogger("", "Content Descriptor is not displayed for for Live News, expected behavior");
		}

		extent.HeaderChildNode("PWA2-8755: 22. CD for U content - Movie");
		extent.extentLogger("", "Verification of <b>TC 22. CD for U content - Movie<b>");
		logger.info("Verification of TC 22. CD for U content - Movie");
		ArrayList<String> contentDetails = new ArrayList<String>();
		contentDetails.add("movies/details/Aah/0-0-156684");
		contentDetails.add("0-0-156684");
		contentDetails.add("Rated U");
		contentDetails.add("Drama");
		verifyContentDescriptorRatingAndDesc(contentDetails);

		extent.HeaderChildNode("PWA2-8755: 23. CD for U/A 7+ content - Movie");
		extent.extentLogger("", "Verification of <b>TC 23. CD for U/A 7+ content - Movie<b>");
		logger.info("Verification of TC 23. CD for U/A 7+ content - Movie");
		contentDetails = new ArrayList<String>();
		contentDetails.add("movies/details/pareeksha/0-0-188032");
		contentDetails.add("0-0-188032");
		contentDetails.add("Rated U/A 7+");
		contentDetails.add("Drama");
		verifyContentDescriptorRatingAndDesc(contentDetails);

		extent.HeaderChildNode("PWA2-8755: 24. CD for U/A 13+ content - Movie");
		extent.extentLogger("", "Verification of <b>TC 24. CD for U/A 13+ content - Movie<b>");
		logger.info("Verification of TC 24. CD for U/A 13+ content - Movie");
		contentDetails = new ArrayList<String>();
		contentDetails.add("movies/details/watch-veergati-online/0-0-65215");
		contentDetails.add("0-0-65215");
		contentDetails.add("Rated U/A 13+");
		contentDetails.add("Violence");
		verifyContentDescriptorRatingAndDesc(contentDetails);

		extent.HeaderChildNode("PWA2-8755: 25. CD for U/A 16+ content - Movie");
		extent.extentLogger("", "Verification of <b>TC 25. CD for U/A 16+ content - Movie<b>");
		logger.info("Verification of TC 25. CD for U/A 16+ content - Movie");
		contentDetails = new ArrayList<String>();
		contentDetails.add("movies/details/nail-polish/0-0-251089");
		contentDetails.add("0-0-251089");
		contentDetails.add("Rated U/A 16+");
		contentDetails.add("Violence");
		verifyContentDescriptorRatingAndDesc(contentDetails);

		extent.HeaderChildNode("PWA2-8755: 26. CD for A content - Movie");
		extent.extentLogger("", "Verification of <b>TC 26. CD for A content - Movie<b>");
		logger.info("Verification of TC 26. CD for A content - Movie");
		contentDetails = new ArrayList<String>();
		contentDetails.add("movies/details/shorshe-ilish/0-0-97484");
		contentDetails.add("0-0-97484");
		contentDetails.add("Rated A");
		contentDetails.add("Nudity, Sex, Threat");
		verifyContentDescriptorRatingAndDesc(contentDetails);

		extent.HeaderChildNode("PWA2-8755: 27. CD for U content - Episode");
		extent.extentLogger("", "Verification of <b>TC 27. CD for U content - Episode<b>");
		logger.info("Verification of TC 27. CD for U content - Episode");
		contentDetails = new ArrayList<String>();
		contentDetails.add(
				"tvshows/details/teri-meri-ikk-jindri/0-6-3137/teri-meri-ikk-jindri-july-29-2021/0-1-manual-47v2vlj4i850");
		contentDetails.add("0-1-manual-47v2vlj4i850");
		contentDetails.add("Rated U");
		contentDetails.add("Drama");
		verifyContentDescriptorRatingAndDesc(contentDetails);

		// extent.HeaderChildNode("PWA2-8755: 28. CD for U/A 7+ content - Episode");
		// extent.extentLogger("", "Verification of <b>TC 28. CD for U/A 7+ content -
		// Episode<b>");

		extent.HeaderChildNode("PWA2-8755: 29. CD for U/A 13+ content - Episode");
		extent.extentLogger("", "Verification of <b>TC 29. CD for U/A 13+ content - Episode<b>");
		logger.info("Verification of TC 29. CD for U/A 13+ content - Episode");
		contentDetails = new ArrayList<String>();
		contentDetails.add("zee5originals/details/dravya/0-6-1820/episode-1-the-great-escape/0-1-221641");
		contentDetails.add("0-1-221641");
		contentDetails.add("Rated U/A 13+");
		contentDetails.add("Nudity, Sex, violence");
		verifyContentDescriptorRatingAndDesc(contentDetails);

		extent.HeaderChildNode("PWA2-8755: 30. CD for U/A 16+ content - Episode");
		extent.extentLogger("", "Verification of <b>TC 30. CD for U/A 16+ content - Episode<b>");
		logger.info("Verification of TC 30. CD for U/A 16+ content - Episode");
		contentDetails = new ArrayList<String>();
		contentDetails.add("zee5originals/details/mentalhood/0-6-2471/ep-2-bully/0-1-341207");
		contentDetails.add("0-1-341207");
		contentDetails.add("Rated U/A 16+");
		contentDetails.add("Foul language, Sex");
		verifyContentDescriptorRatingAndDesc(contentDetails);

		extent.HeaderChildNode("PWA2-8755: 31. CD for A content - Episode");
		extent.extentLogger("", "Verification of <b>TC 31. CD for A content - Episode<b>");
		logger.info("Verification of TC 31. CD for A content - Episode");
		contentDetails = new ArrayList<String>();
		contentDetails.add("zee5originals/details/mission-over-mars/0-6-2006/episode-8-mission-over-mars/0-1-265422");
		contentDetails.add("0-1-265422");
		contentDetails.add("Rated A");
		contentDetails.add("Foul language, Sex");
		verifyContentDescriptorRatingAndDesc(contentDetails);

		extent.HeaderChildNode("PWA2-8755: 32. CD for U content - Video");
		extent.extentLogger("", "Verification of <b>TC 32. CD for U content - Video<b>");
		logger.info("Verification of TC 32. CD for U content - Video");
		contentDetails = new ArrayList<String>();
		contentDetails.add("videos/details/sau-sau-wari-khat-likhe/0-0-manual-6gk0ph390p70");
		contentDetails.add("0-0-manual-6gk0ph390p70");
		contentDetails.add("Rated U");
		contentDetails.add("Romance");
		verifyContentDescriptorRatingAndDesc(contentDetails);

		extent.HeaderChildNode("PWA2-8755: 33. CD for U/A 7+ content - Video");
		extent.extentLogger("", "Verification of <b>TC 33. CD for U/A 7+ content - Video<b>");
		logger.info("Verification of TC 33. CD for U/A 7+ content - Video");
		contentDetails = new ArrayList<String>();
		contentDetails.add(
				"videos/details/garbe-ki-raat-mai-indian-pro-music-league-soundtracks-season-1-bhoomi-trivedi-aditi-singh-sharma-and-hemant-brijwasi-sachin-jigar-and-vayu/0-0-manual-5oe66iqc4400");
		contentDetails.add("0-0-manual-5oe66iqc4400");
		contentDetails.add("Rated U/A 7+");
		contentDetails.add("Festive, Dance");
		verifyContentDescriptorRatingAndDesc(contentDetails);

		extent.HeaderChildNode("PWA2-8755: 34. CD for U/A 13+ content - Video");
		extent.extentLogger("", "Verification of <b>TC 34. CD for U/A 13+ content - Video<b>");
		logger.info("Verification of TC 34. CD for U/A 13+ content - Video");
		contentDetails = new ArrayList<String>();
		contentDetails.add(
				"videos/details/2-seater-car-full-video-kanika-kapoor-happy-singh-and-vicky-sandhu/0-0-manual-6u07v2m54fl0");
		contentDetails.add("0-0-manual-6u07v2m54fl0");
		contentDetails.add("Rated U/A 13+");
		contentDetails.add("Romance");
		verifyContentDescriptorRatingAndDesc(contentDetails);

		extent.HeaderChildNode("PWA2-8755: 35. CD for U/A 16+ content - Video");
		extent.extentLogger("", "Verification of <b>TC 35. CD for U/A 16+ content - Video<b>");
		logger.info("Verification of TC 35. CD for U/A 16+ content - Video");
		contentDetails = new ArrayList<String>();
		contentDetails.add(
				"videos/details/soneya-ve-hello-charlie-aadar-jain-and-shlokka-pandit-kanika-kapoor-jasbir-jassi-and-kumaar/0-0-manual-3b1jfcfamrmg");
		contentDetails.add("0-0-manual-3b1jfcfamrmg");
		contentDetails.add("Rated U/A 16+");
		contentDetails.add("Dance");
		verifyContentDescriptorRatingAndDesc(contentDetails);

		extent.HeaderChildNode("PWA2-8755: 36. CD for A content - Video");
		extent.extentLogger("", "Verification of <b>TC 36. CD for A content - Video<b>");
		logger.info("Verification of TC 36. CD for A content - Video");
		contentDetails.add(
				"videos/details/soniye-ft-mishka-tarkar-and-sandesh-gour-vikesh-singh-reema-noopur-anand-singh-amjad-bagadwa/0-0-manual_6h4n7mu0bsm0");
		contentDetails.add("0-0-manual_6h4n7mu0bsm0");
		contentDetails.add("Rated A");
		contentDetails.add("Sucide, Drugs");
		verifyContentDescriptorRatingAndDesc(contentDetails);
	}

	public void contentDiscriptorVerificationFromExcel(String userType, String xlsname, String[] sheets)
			throws Exception {
		String xlspath = System.getProperty("user.dir") + "\\" + xlsname;
		ArrayList<String> contentDetails = new ArrayList<String>();
		String url = "", contentUrl = "", showID = "", contentID = "";
		String[] parts = {};
		int colno = 1;
		if (userType.equalsIgnoreCase("Guest"))
			colno = 1;
		if (userType.equalsIgnoreCase("NonSubscribedUser"))
			colno = 2;
		if (userType.equalsIgnoreCase("SubscribedUser"))
			colno = 3;// sheets.length
		for (int sheetIt = 0; sheetIt < sheets.length; sheetIt++) {
			String sheet = sheets[sheetIt];
			System.out.println("sheet: " + sheet);
			int NumberOfRows = getRowCount(xlspath, sheet);
			System.out.println("NumberOfRows" + NumberOfRows);
			for (int rownumber = 1; rownumber <= NumberOfRows; rownumber++) {
				System.out.println(rownumber);
				contentDetails = new ArrayList<String>();
				showID = "";
				contentID = "";
				XSSFWorkbook myExcelBook = new XSSFWorkbook(new FileInputStream(xlspath));
				XSSFSheet myExcelSheet = myExcelBook.getSheet(sheet);
				url = myExcelSheet.getRow(rownumber).getCell(0).toString();
				url = url.split("zee5.com/")[1];
				extent.HeaderChildNode("PWA2-8755: " + sheet + ": " + "/" + url);
				String mainurl = getParameterFromXML("url");
				contentUrl = mainurl + url;
				logger.info("Verification for: " + contentUrl);
				extent.extentLogger("", "Verification for: <b>" + contentUrl + "<b>");
				parts = url.split("/");
				if (sheet.toLowerCase().contains("show")) {
					showID = parts[parts.length - 3];
					logger.info("Show ID from URL: " + showID);
					extent.extentLogger("", "Show ID from URL: " + showID);
				}
				contentID = parts[parts.length - 1];
				logger.info("Content ID from URL: " + contentID);
				extent.extentLogger("", "Content ID from URL: " + contentID);
				ArrayList<String> cdDetails = getCDFromSpapi(showID, contentID);
				contentDetails.add(url);
				contentDetails.add(contentID);
				contentDetails.add("Rated " + cdDetails.get(0)); // Age rating
				contentDetails.add(cdDetails.get(1)); // Genres
				String result = verifyContentDescriptorRatingAndDesc(contentDetails);
				writeToExcel(xlspath, sheet, rownumber, colno, result);
			}
		}
	}

	public ArrayList<String> verifySiteLaunchTime_NavigationTiming(String page) throws Exception {
		String sourceurl = getParameterFromXML("url");
		String url = sourceurl + page;
		String userType = getParameterFromXML("userType");
		ArrayList<String> siteLaunchTime = new ArrayList<String>();
		new Zee5PWASanityWEBBusinessLogic("Chrome");
		getWebDriver().get(url);
		logger.info("Navigated to : " + url);
		extent.extentLogger("", "Navigated to : " + url);
		JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
		long navigationStart = (long) jse.executeScript("return window.performance.timing.navigationStart");
		long responseStart = (long) jse.executeScript("return window.performance.timing.responseStart");
		long domComplete = (long) jse.executeScript("return window.performance.timing.domComplete");

		System.out.println(navigationStart);
		System.out.println(responseStart);
		System.out.println(domComplete);

		long backendPerformance_calc = responseStart - navigationStart;
		long frontendPerformance_calc = domComplete - responseStart;

		System.out.println("Back End:" + backendPerformance_calc);
		System.out.println("Front End:" + frontendPerformance_calc);

		String backendPerformance_calcString = DateConvertor(backendPerformance_calc);
		String frontendPerformance_calcString = DateConvertor(frontendPerformance_calc);

		siteLaunchTime.add(backendPerformance_calcString);
		siteLaunchTime.add(frontendPerformance_calcString);
		tearDown();
		return siteLaunchTime;
	}

	public ArrayList<String> getCDFromSpapi(String tvShowID, String contentID) throws Exception {
		ArrayList<String> cd = new ArrayList<String>();
		String ageRating = "", genres = "";
		LocalStorage local = ((ChromeDriver) getWebDriver()).getLocalStorage();
		Response spapiResp = ResponseInstance.getSinglePlayBackDetails(contentID, tvShowID, "",
				local.getItem("guestToken"));
		try {
			ageRating = spapiResp.jsonPath().get("assetDetails.age_rating").toString();
			cd.add(ageRating);
			logger.info("Age Rating from SPAPI: " + ageRating);
			extent.extentLogger("", "Age Rating from SPAPI: " + ageRating);
		} catch (Exception e) {
			ageRating = "";
			cd.add(ageRating);
			logger.info("Age Rating from SPAPI: " + ageRating);
			extent.extentLogger("", "Age Rating from SPAPI: " + ageRating);
		}
		try {
			genres = spapiResp.jsonPath().get("assetDetails.extended_wh.content_descriptors").toString()
					.replace("[", "").replace("]", "");
			cd.add(genres);
			logger.info("Genres from SPAPI: " + genres);
			extent.extentLogger("", "Genres from SPAPI: " + genres);
		} catch (Exception e) {
			genres = "";
			cd.add(genres);
			logger.info("Genres from SPAPI: " + genres);
			extent.extentLogger("", "Genres from SPAPI: " + genres);
		}
		return cd;
	}

	public static int getRowCount(String xlspath, String sheet) {
		int rc = 0;
		try {
			System.out.println(xlspath);
			FileInputStream fis = new FileInputStream(xlspath);
			Workbook wb = WorkbookFactory.create(fis);
			rc = wb.getSheet(sheet).getLastRowNum();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return rc;
	}

	public static int getColumnCount(String xlspath, String sheet) {
		int rc = 0;
		try {
			System.out.println(xlspath);
			FileInputStream fis = new FileInputStream(xlspath);
			Workbook wb = WorkbookFactory.create(fis);
			rc = wb.getSheet(sheet).getRow(0).getLastCellNum();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return rc;
	}

	public static void writeToExcel(String xlspath, String sheet, int rowno, int colno, String value) {
		try {
			XSSFWorkbook myExcelBook = new XSSFWorkbook(new FileInputStream(xlspath));
			FileOutputStream output = new FileOutputStream(xlspath);
			XSSFSheet myExcelSheet = myExcelBook.getSheet(sheet);
			CellStyle cs = myExcelBook.createCellStyle();
			cs.setWrapText(true);
			XSSFRow row = myExcelSheet.getRow(rowno);
			myExcelSheet.setColumnWidth(colno, 5000);
			row.createCell(colno).setCellStyle(cs);
			row.getCell(colno).setCellValue(value);
			myExcelBook.write(output);
			myExcelBook.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@SuppressWarnings("unused")
	public String verifyContentDescriptorRatingAndDesc(ArrayList<String> contentDetails) throws Exception {
		String result = "";
		String mainurl = getParameterFromXML("url");
		LocalStorage local = ((ChromeDriver) getWebDriver()).getLocalStorage();
		String contentUrl = contentDetails.get(0);
		String contentID = contentDetails.get(1);
		String contentCDAgeRating = contentDetails.get(2);
		String contentCDAgeDesc = contentDetails.get(3);
		String cdInUI = "";
		contentUrl = mainurl + contentUrl;
		mandatoryRegistrationPopUp(userType);
		getWebDriver().get(contentUrl);
		logger.info("Navigated to the content URL: " + contentUrl);
		extent.extentLogger("", "Navigated to the content URL: " + contentUrl);
		getPlayerHeadPosition();
		if (getLocatorPresence(PWAPlayerPage.objContentDescriptor(contentCDAgeRating, contentCDAgeDesc), 60,
				"Content Descriptor", false)) {
			logger.info("Expected CD is displayed: " + contentCDAgeRating + " " + contentCDAgeDesc);
			extent.extentLogger("",
					"Expected CD is displayed: <br/> <b>" + contentCDAgeRating + "<br/>" + contentCDAgeDesc + "");
			result = "Pass";
		} else {
			try {
				getWebDriver().findElement(By
						.xpath("//*[contains(@class,'skip-button subscribe-link') or contains(@class,'login-text')]"));
				logger.info("Buy Plan with Skip/Login is displayed, content not played");
				extent.extentLoggerWarning("", "Buy Plan with Skip/Login is displayed, content not played");
				result = "Blocked";
			} catch (Exception e) {
				logger.error("Incorrect CD is displayed");
				extent.extentLoggerFail("", "Incorrect CD is displayed");
				result = "Fail";
			}
		}
		getWebDriver().get(mainurl);
		ResponseInstance.updateWatchHistory(contentID, 1, local.getItem("guestToken"));
		return result;
	}

	public String getPlayerHeadPosition() throws Exception {
		String playerHeadPosition = "0";
		waitTime(2000);
		getWebDriver().manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
		for (int i = 0; i < 200; i++) {
			try {
				playerHeadPosition = getWebDriver().findElement(PWAPlayerPage.objPlaykitSeekBar).getAttribute("aria-valuenow");
				System.out.println("playerHeadPosition:" + playerHeadPosition);
				extent.extentLogger("", "Player Head Position :" + playerHeadPosition);
				break;
			} catch (Exception e) {
				try {
					getWebDriver().findElement(PWAPlayerPage.objLivePlayerLiveTag);
					System.out.println("Live player is displayed");
					extent.extentLogger("", "Live player is displayed");
					break;
				} catch (Exception e2) {
					try {
						getWebDriver().findElement(PWAPlayerPage.objAdLayer);
						if (i == 0) {
							logger.info("Ad play in progress");
							extent.extentLogger("AdPlayInProgress", "Ad play in progress");
						}
					} catch (Exception e1) {
					}
				}
			}
		}
		System.out.println("out of getplayerhead");
		return playerHeadPosition;
	}

	public boolean getLocatorPresence(By locator, int count, String text, boolean error) throws Exception {
		getWebDriver().manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
		for (int i = 0; i < count; i++) {
			try {
				getWebDriver().findElement(locator);
				logger.info(text + " is displayed");
				extent.extentLogger("", text + " is displayed");
				return true;
			} catch (Exception e) {
			}
		}
		if (error) {
			logger.error(text + " is not displayed");
			extent.extentLoggerFail("", text + " is not displayed");
		} else {
			logger.info(text + " is not displayed");
			extent.extentLogger("", text + " is not displayed");
		}
		return false;
	}

	public void pwaPerformance(int iterations) throws Exception {
		String env = "";
		String url = getParameterFromXML("url");
		if (url.equals("https://newpwa.zee5.com/"))
			env = "newpwa";
		if (url.equals("https://www.zee5.com/"))
			env = "production";
		if (url.equals("https://pwauat5.zee5.com/"))
			env = "pwauat5";
		String userType = getParameterFromXML("userType");
		String xlspath = System.getProperty("user.dir") + "\\performance.xlsx";
		int NumberOfRows = getRowCount(xlspath, "performance");
		System.out.println("NumberOfRows" + NumberOfRows);
		for (int i = 1; i <= iterations; i++) {
			int colNo = getColumnCount(xlspath, "performance");
			System.out.println("NumberOfColumns" + colNo);
			Date currentDate = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy");
			SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
			String dateString = dateFormat.format(currentDate).toString();
			String timeString = timeFormat.format(currentDate).toString();
			String value = "Env: " + env + "\nDate: " + dateString + "\nTime: " + timeString + "\nUser: " + userType;
			writeToExcel(xlspath, "performance", 0, colNo, value);
			extent.HeaderChildNode("Iteration " + i + ": Site Launch");
			String siteLaunchTime = verifySiteLaunchTime();
			writeToExcel(xlspath, "performance", 1, colNo, siteLaunchTime);

			extent.HeaderChildNode("Iteration " + i + ": Navigation to TV Shows");
			String showsNavigation = verifyPageNavigation("tvshows");
			writeToExcel(xlspath, "performance", 2, colNo, showsNavigation);

			extent.HeaderChildNode("Iteration " + i + ": Navigation to Movies");
			String moviesNavigation = verifyPageNavigation("movies");
			writeToExcel(xlspath, "performance", 3, colNo, moviesNavigation);

			extent.HeaderChildNode("Iteration " + i + ": Navigation to Premium");
			String premiumNavigation = verifyPageNavigation("premium");
			writeToExcel(xlspath, "performance", 4, colNo, premiumNavigation);

			extent.HeaderChildNode("Iteration " + i + ": Navigation to Videos");
			String videosNavigation = verifyPageNavigation("videos");
			writeToExcel(xlspath, "performance", 5, colNo, videosNavigation);

			extent.HeaderChildNode("Iteration " + i + ": Navigation to Show Detail");
			String showDetailNavigation = verifyPageNavigation("tvshows/details/kundali-bhagya/0-6-366");
			writeToExcel(xlspath, "performance", 6, colNo, showDetailNavigation);

			extent.HeaderChildNode("Iteration " + i + ": Navigation to Movie Detail");
			String movieDetailNavigation = verifyPageNavigation(
					"movies/details/robin-hood-and-the-invincible-knight/0-0-103553");
			writeToExcel(xlspath, "performance", 7, colNo, movieDetailNavigation);

			LocalStorage local = ((ChromeDriver) getWebDriver()).getLocalStorage();
			extent.HeaderChildNode("Iteration " + i + ": Playback Start time (VST) [For Premium]");
			String vstPremium = verifyVST("Uri: The Surgical Strike");
			writeToExcel(xlspath, "performance", 8, colNo, vstPremium);
			mandatoryRegistrationPopUp(userType);
			ResponseInstance.updateWatchHistory("0-0-33204", 1, local.getItem("guestToken"));

			extent.HeaderChildNode("Iteration " + i + ": Playback Start time (VST) [For Non-Premium]");
			String vstNonPremium = verifyVST("Teen Patti");
			writeToExcel(xlspath, "performance", 9, colNo, vstNonPremium);
			mandatoryRegistrationPopUp(userType);
			ResponseInstance.updateWatchHistory("0-0-414244", 1, local.getItem("guestToken"));

			extent.HeaderChildNode("Iteration " + i + ": Playback resume time (from pause) (VRT)");
			String vrt = verifyResumeTimeFromPause("Khalnayak");
			writeToExcel(xlspath, "performance", 10, colNo, vrt);
			mandatoryRegistrationPopUp(userType);
			ResponseInstance.updateWatchHistory("0-0-khalnayak", 1, local.getItem("guestToken"));

			extent.HeaderChildNode("Iteration " + i + ": Playback resume time (post seek)");
			String vrtPostSeek = verifyResumeTimeAfterSeek("Golmaal Returns");
			writeToExcel(xlspath, "performance", 11, colNo, vrtPostSeek);
			mandatoryRegistrationPopUp(userType);
			ResponseInstance.updateWatchHistory("0-0-1z51324", 1, local.getItem("guestToken"));

			extent.HeaderChildNode("Iteration " + i + ": Playback resume time (post quality change)");
			String vrtQualityChange = verifyResumeTimeAfterQualityChange("Ra. One");
			writeToExcel(xlspath, "performance", 12, colNo, vrtQualityChange);
			mandatoryRegistrationPopUp(userType);
			ResponseInstance.updateWatchHistory("0-0-2526", 1, local.getItem("guestToken"));
		}

	}

	public String getDateDifference(Date startDate, Date endDate) throws Exception {
		long duration = endDate.getTime() - startDate.getTime();
		long diffInMilliSeconds = TimeUnit.MILLISECONDS.toMillis(duration);
		int milliSeconds = (int) Math.floorMod(diffInMilliSeconds, 1000);
		int seconds = (int) (diffInMilliSeconds / 1000);
		int mins = 0;
		if (seconds >= 60) {
			mins = seconds / 60;
			seconds = Math.floorMod(seconds, 60);
		}
		return mins + "m, " + seconds + "s, " + milliSeconds + "ms";
	}

	public String getDateDetails(Date date) throws Exception {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		String dateString = dateFormat.format(date).toString();
		// ChromeOptions options=new ChromeOptions();
		// options.setHeadless(true);
		return dateString;
	}

	public String verifySiteLaunchTime() throws Exception {
		String url = getParameterFromXML("url");
		String userType = getParameterFromXML("userType");
		String siteLaunchTime = "";
		Date startDate = new Date();
		logger.info("Start Time : " + getDateDetails(startDate));
		extent.extentLogger("", "Start Time : " + getDateDetails(startDate));
		tearDown();
		new Zee5PWASanityWEBBusinessLogic("Chrome");
		logger.info("Navigated to : " + url);
		extent.extentLogger("", "Navigated to : " + url);
		Date endDate = new Date();
		logger.info("End Time : " + getDateDetails(endDate));
		extent.extentLogger("", "End Time : " + getDateDetails(endDate));
		siteLaunchTime = getDateDifference(startDate, endDate);
		logger.info("Performance time: " + siteLaunchTime);
		extent.extentLogger("", "Performance time: " + siteLaunchTime);
		ZeeWEBPWALogin(userType);
		return siteLaunchTime;
	}

	public String verifyPageNavigation(String page) throws Exception {
		String url = getParameterFromXML("url");
		String showsurl = url + page;
		String pageNavigationTime = "";
		Date startDate = new Date();
		logger.info("Start Time : " + getDateDetails(startDate));
		extent.extentLogger("", "Start Time : " + getDateDetails(startDate));
		getWebDriver().get(showsurl);
		logger.info("Navigated to : " + showsurl);
		extent.extentLogger("", "Navigated to : " + showsurl);
		Date endDate = new Date();
		logger.info("End Time : " + getDateDetails(endDate));
		extent.extentLogger("", "End Time : " + getDateDetails(endDate));
		pageNavigationTime = getDateDifference(startDate, endDate);
		logger.info("Performance time: " + pageNavigationTime);
		extent.extentLogger("", "Performance time: " + pageNavigationTime);
		return pageNavigationTime;
	}

	public String verifyVST(String searchKeyword) throws Exception {
		Date startDate = new Date();
		Date endDate = new Date();
		ArrayList<Date> startAndEndTime = new ArrayList<Date>();
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search icon");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, searchKeyword, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(5000);
		mandatoryRegistrationPopUp(userType);
		verifyElementPresent(PWASearchPage.objSearchedResult(searchKeyword), "Search Result " + searchKeyword);
		click(PWASearchPage.objSearchedResult(searchKeyword), "Search Result " + searchKeyword);
		startAndEndTime = getPlayerStartEndTime(startDate, endDate);
		startDate = startAndEndTime.get(0);
		endDate = startAndEndTime.get(1);
		logger.info("End Time : " + getDateDetails(endDate));
		extent.extentLogger("", "End Time : " + getDateDetails(endDate));
		String vst = getDateDifference(startDate, endDate);
		logger.info("VST : " + vst);
		extent.extentLogger("", "VST : " + vst);
		return vst;
	}

	public ArrayList<Date> getPlayerStartEndTime(Date startDate, Date endDate) throws Exception {
		ArrayList<Date> startAndEndTime = new ArrayList<Date>();
		startDate = new Date();
		logger.info("Time : " + getDateDetails(startDate));
		extent.extentLogger("", "Time : " + getDateDetails(startDate));
		getWebDriver().manage().timeouts().implicitlyWait(10, TimeUnit.MILLISECONDS);
		String playerHeadPosition = "0";
		boolean adPlay = false, adMessage = false;
		for (int i = 0; i < 1000; i++) {
			if (adPlay == true) {
				for (int j = 0; j < 1000; j++) {
					try {
						getWebDriver().findElement(PWAPlayerPage.objPlaykitSeekBar);
						startDate = new Date();
						logger.info("Ad play complete");
						extent.extentLogger("", "Ad play complete");
						logger.info("Start Time : " + getDateDetails(startDate));
						extent.extentLogger("", "Start Time : " + getDateDetails(startDate));
						break;
					} catch (Exception e) {
					}
				}
			}
			try {
				playerHeadPosition = getWebDriver().findElement(PWAPlayerPage.objPlaykitSeekBar)
						.getAttribute("aria-valuenow");
				if (Integer.valueOf(playerHeadPosition) > 0) {
					endDate = new Date();
					logger.info("Player Head Position :" + playerHeadPosition);
					extent.extentLogger("", "Player Head Position :" + playerHeadPosition);
					screencapture();
					break;
				}
			} catch (Exception e) {
				try {
					getWebDriver().findElement(PWAPlayerPage.objAdLayer);
					adPlay = true;
					if (adMessage == false) {
						logger.info("Ad play in progress");
						extent.extentLogger("AdPlayInProgress", "Ad play in progress");
						adMessage = true;
					}
				} catch (Exception e1) {
				}
			}
		}
		System.out.println("outside loop");
		startAndEndTime.add(startDate);
		startAndEndTime.add(endDate);
		return startAndEndTime;
	}

	public String verifyResumeTimeFromPause(String searchKeyword) throws Exception {
		Date startDate = new Date();
		Date endDate = new Date();
		ArrayList<Date> startAndEndTime = new ArrayList<Date>();
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search icon");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, searchKeyword, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(5000);
		mandatoryRegistrationPopUp(userType);
		verifyElementPresent(PWASearchPage.objSearchedResult(searchKeyword), "Search Result " + searchKeyword);
		click(PWASearchPage.objSearchedResult(searchKeyword), "Search Result " + searchKeyword);
		waitForPlayerAdToComplete("Video Player");
		startAndEndTime = getPlayerStartEndTimeAfterPause(startDate, endDate);
		startDate = startAndEndTime.get(0);
		endDate = startAndEndTime.get(1);
		String rst = getDateDifference(startDate, endDate);
		logger.info("Resume Time from Pause : " + rst);
		extent.extentLogger("", "Resume Time from Pause : " + rst);
		return rst;
	}

	public ArrayList<Date> getPlayerStartEndTimeAfterPause(Date startDate, Date endDate) throws Exception {
		ArrayList<Date> startAndEndTime = new ArrayList<Date>();
		getWebDriver().manage().timeouts().implicitlyWait(10, TimeUnit.MILLISECONDS);
		String playerHeadPositionBefore = "", playerHeadPositionAfter = "";
		JSClick(PWAPlayerPage.pauseBtn, "Pause icon");
		playerHeadPositionBefore = getWebDriver().findElement(PWAPlayerPage.objPlaykitSeekBar)
				.getAttribute("aria-valuenow");
		logger.info("Player Head Position at pause:" + playerHeadPositionBefore);
		extent.extentLogger("", "Player Head Position at pause:" + playerHeadPositionBefore);
		startDate = new Date();
		logger.info("Start Time : " + getDateDetails(startDate));
		extent.extentLogger("", "Start Time : " + getDateDetails(startDate));
		JSClick(PWAPlayerPage.objPlayerPlay, "Play icon");
		for (int i = 0; i < 1000; i++) {
			try {
				playerHeadPositionAfter = getWebDriver().findElement(PWAPlayerPage.objPlaykitSeekBar)
						.getAttribute("aria-valuenow");
				if (Integer.valueOf(playerHeadPositionAfter) > Integer.valueOf(playerHeadPositionBefore)) {
					endDate = new Date();
					logger.info("End Time : " + getDateDetails(endDate));
					extent.extentLogger("", "End Time : " + getDateDetails(endDate));
					logger.info("Player Head Position after resume:" + playerHeadPositionAfter);
					extent.extentLogger("", "Player Head Position after resume:" + playerHeadPositionAfter);
					screencapture();
					break;
				}
			} catch (Exception e) {
			}
		}
		System.out.println("outside loop");
		startAndEndTime.add(startDate);
		startAndEndTime.add(endDate);
		return startAndEndTime;
	}

	public String verifyResumeTimeAfterSeek(String searchKeyword) throws Exception {
		Date startDate = new Date();
		Date endDate = new Date();
		ArrayList<Date> startAndEndTime = new ArrayList<Date>();
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search icon");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, searchKeyword, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(5000);
		mandatoryRegistrationPopUp(userType);
		verifyElementPresent(PWASearchPage.objSearchedResult(searchKeyword), "Search Result " + searchKeyword);
		click(PWASearchPage.objSearchedResult(searchKeyword), "Search Result " + searchKeyword);
		waitForPlayerAdToComplete("Video Player");
		startAndEndTime = getPlayerStartEndTimeAfterSeek(startDate, endDate);
		startDate = startAndEndTime.get(0);
		endDate = startAndEndTime.get(1);
		String rst = getDateDifference(startDate, endDate);
		logger.info("Playback resume time post seek : " + rst);
		extent.extentLogger("", "Playback resume time post seek : " + rst);
		return rst;
	}

	public ArrayList<Date> getPlayerStartEndTimeAfterSeek(Date startDate, Date endDate) throws Exception {
		ArrayList<Date> startAndEndTime = new ArrayList<Date>();
		getWebDriver().manage().timeouts().implicitlyWait(10, TimeUnit.MILLISECONDS);
		String playerHeadPositionBefore = "", playerHeadPositionAfterSeek1 = "", playerHeadPositionAfterSeek2 = "";
		playerHeadPositionBefore = getWebDriver().findElement(PWAPlayerPage.objPlaykitSeekBar)
				.getAttribute("aria-valuenow");
		logger.info("Player Head Position before seek:" + playerHeadPositionBefore);
		extent.extentLogger("", "Player Head Position before seek:" + playerHeadPositionBefore);
		startDate = new Date();
		logger.info("Start Time : " + getDateDetails(startDate));
		extent.extentLogger("", "Start Time : " + getDateDetails(startDate));
		Actions act = new Actions(getWebDriver());
		WebElement scrubber = getWebDriver().findElement(PWAPlayerPage.objPlayerScrubber);
		act.moveToElement(scrubber, 50, 0).click().build().perform();
		extent.extentLogger("", "Seeked the player");
		logger.info("Seeked the player");
		for (int i = 0; i < 1000; i++) {
			try {
				playerHeadPositionAfterSeek1 = getWebDriver().findElement(PWAPlayerPage.objPlaykitSeekBar)
						.getAttribute("aria-valuenow");
				if (Integer.valueOf(playerHeadPositionAfterSeek1) > Integer.valueOf(playerHeadPositionBefore)) {
					break;
				}
			} catch (Exception e) {
			}
		}
		for (int i = 0; i < 1000; i++) {
			try {
				playerHeadPositionAfterSeek2 = getWebDriver().findElement(PWAPlayerPage.objPlaykitSeekBar)
						.getAttribute("aria-valuenow");
				if (Integer.valueOf(playerHeadPositionAfterSeek2) > Integer.valueOf(playerHeadPositionAfterSeek1)) {
					endDate = new Date();
					logger.info("End Time : " + getDateDetails(endDate));
					extent.extentLogger("", "End Time : " + getDateDetails(endDate));
					logger.info("Player Head Position after seek:" + playerHeadPositionAfterSeek2);
					extent.extentLogger("", "Player Head Position after seek:" + playerHeadPositionAfterSeek2);
					screencapture();
					break;
				}
			} catch (Exception e) {
			}
		}
		System.out.println("outside loop");
		startAndEndTime.add(startDate);
		startAndEndTime.add(endDate);
		return startAndEndTime;
	}

	public String verifyResumeTimeAfterQualityChange(String searchKeyword) throws Exception {
		Date startDate = new Date();
		Date endDate = new Date();
		ArrayList<Date> startAndEndTime = new ArrayList<Date>();
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search icon");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, searchKeyword, "Search Field");
		waitTime(2000);
		click(PWASearchPage.objSearchMoviesTab, "Movies tab");
		waitTime(5000);
		mandatoryRegistrationPopUp(userType);
		verifyElementPresent(PWASearchPage.objSearchedResult(searchKeyword), "Search Result " + searchKeyword);
		click(PWASearchPage.objSearchedResult(searchKeyword), "Search Result " + searchKeyword);
		waitForPlayerAdToComplete("Video Player");
		startAndEndTime = getPlayerStartEndTimeAfterQualityChange(startDate, endDate);
		startDate = startAndEndTime.get(0);
		endDate = startAndEndTime.get(1);
		String rst = getDateDifference(startDate, endDate);
		logger.info("Resume Time from Pause : " + rst);
		extent.extentLogger("", "Resume Time from Pause : " + rst);
		return rst;
	}

	public ArrayList<Date> getPlayerStartEndTimeAfterQualityChange(Date startDate, Date endDate) throws Exception {
		ArrayList<Date> startAndEndTime = new ArrayList<Date>();
		getWebDriver().manage().timeouts().implicitlyWait(10, TimeUnit.MILLISECONDS);
		String playerHeadPositionBefore = "", playerHeadPositionAfter = "";
		Actions actions = new Actions(getWebDriver());
		WebElement ele = getWebDriver().findElement(PWAPlayerPage.objPlaybackVideoOverlay);
		actions.moveToElement(ele).perform();
		click(PWAPlayerPage.settingsBtn, "Setting icon");
		click(PWAPlayerPage.qualityBtn, "Quality option");
		playerHeadPositionBefore = getWebDriver().findElement(PWAPlayerPage.objPlaykitSeekBar)
				.getAttribute("aria-valuenow");
		logger.info("Player Head Position before clicking on Quality:" + playerHeadPositionBefore);
		extent.extentLogger("", "Player Head Position before clicking on Quality:" + playerHeadPositionBefore);
		startDate = new Date();
		logger.info("Start Time : " + getDateDetails(startDate));
		extent.extentLogger("", "Start Time : " + getDateDetails(startDate));
		click(PWAPlayerPage.objNonSelectedPlayerQuality, "unticked Quality");
		for (int i = 0; i < 1000; i++) {
			try {
				playerHeadPositionAfter = getWebDriver().findElement(PWAPlayerPage.objPlaykitSeekBar)
						.getAttribute("aria-valuenow");
				if (Integer.valueOf(playerHeadPositionAfter) > Integer.valueOf(playerHeadPositionBefore)) {
					endDate = new Date();
					logger.info("End Time : " + getDateDetails(endDate));
					extent.extentLogger("", "End Time : " + getDateDetails(endDate));
					logger.info("Player Head Position after quality change:" + playerHeadPositionAfter);
					extent.extentLogger("", "Player Head Position after quality change:" + playerHeadPositionAfter);
					screencapture();
					break;
				}
			} catch (Exception e) {
			}
		}
		System.out.println("outside loop");
		startAndEndTime.add(startDate);
		startAndEndTime.add(endDate);
		return startAndEndTime;
	}

	public void VerifyBuySupermoonComboForNonSub(String userType, String tabname) throws Exception {
		if (userType.equals("NonSubscribedUser")) {
			HeaderChildNode("Verify that on Selecting Super Combo  Rs 499 user will see Buy Supermoon Combo CTA");

			navigateToAnyScreenOnWeb(tabname);
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(3500);
			verifyElementPresentAndClick(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
					"Rent Now CTA below the player");
			waitTime(3000);

			if (verifyElementPresent(PWAComboOfferPage.objBuySupermoonComboBtn,
					"Buy Supermoon Combo CTA in combo offer page")) {
				logger.info("Buy Supermoon Combo CTA in combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ",
						"Buy Supermoon Combo CTA in combo offer page is displayed , expected behaviour");
			} else {
				logger.info("Buy Supermoon Combo CTA in combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "Buy Supermoon Combo CTA in combo offer page is not displayed ");
			}
		}

	}

	public void VerifyForNonSubuserRentShow(String userType, String tabname) throws Exception {
		if (userType.equals("NonSubscribedUser")) {
			HeaderChildNode("Verify that user is able to see Rent Content cta on selecting only Rent content");

			navigateToAnyScreenOnWeb(tabname);
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");

			waitTime(3500);
			verifyElementPresentAndClick(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
					"Rent Now CTA below the player");
			waitTime(3000);
			verifyElementPresent(PWAComboOfferPage.objOnlyRentMovieCheckBoxNotActive, "199 check box");
			JSClick(PWAComboOfferPage.objOnlyRentMovieCheckBoxNotActive, "199 check box select");

			waitTime(3000);
			if (verifyElementPresent(PWAComboOfferPage.objRentContent,
					"Rent Content CTA after clicking on selecting only Rent content")) {
				logger.info(
						"Rent Content CTA on selecting only Rent content in combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ",
						"Rent Content CTA on selecting only Rent content in combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("Rent Content CTA on selecting only Rent content in combo offer page is not displayed  ");
				extent.extentLoggerFail(" ",
						"Rent Content CTA on selecting only Rent content in combo offer page is not displayed  ");
			}
		}
	}

	public void paymentModeScreenAfterClickOnBuySupermoonCTA(String userType, String tabname) throws Exception {
		if (userType.equals("NonSubscribedUser")) {
			HeaderChildNode(
					"Verify that on clicking Buy Supermoon Combo Cta user will redirect to payment mode screen  ");

			navigateToAnyScreenOnWeb(tabname);
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");

			waitTime(3500);
			verifyElementPresentAndClick(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
					"Rent Now CTA below the player");
			waitTime(3000);
			if (verifyElementPresent(PWAComboOfferPage.objBuySupermoonComboBtn,
					"Buy Supermoon Combo CTA in combo offer page")) {
				JSClick(PWAComboOfferPage.objBuySupermoonComboBtn, "Buy Supermoon Combo CTA");
			}
			if (verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader, "Payment mode screen")) {
				logger.info("user is redirected to Payment mode screen clicking Buy Supermoon Combo Cta");
				extent.extentLoggerPass("",
						"user is redirected to Payment mode screen clicking Buy Supermoon Combo Cta");
			} else {
				logger.error("user is not redirected to Payment mode screen clicking Buy Supermoon Combo Cta");
				extent.extentLoggerFail("",
						"user is not redirected to Payment mode screen clicking Buy Supermoon Combo Cta");
			}

		}
	}

	public void paymentModeScreenAfterClickOnRentMovie(String userType, String tabname) throws Exception {
		if (userType.equals("NonSubscribedUser")) {
			HeaderChildNode("Verify that on selecting only rent movie User will redirect to Payment mode screen ");

			navigateToAnyScreenOnWeb(tabname);
			waitTime(3500);
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			waitTime(3500);
			verifyElementPresentAndClick(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
					"Rent Now CTA below the player");

			waitTime(3000);
			// JSClick(PWAComboOfferPage.objUpgradeBtn, "Upgrade CTA in combo offer page");
			waitTime(3000);
			verifyElementPresentAndClick(PWAComboOfferPage.objOnlyRentMovieCheckBoxNotActive, "249 check box");
			// JSClick(PWAComboOfferPage.objOnlyRentMovieCheckBoxNotActive, "249 check box
			// select");
			waitTime(5000);
			JSClick(PWAComboOfferPage.objRentContent, "Rent Content CTA after clicking on Upgrade CTA");
			waitTime(3000);
			if (verifyElementPresent(PWAComboOfferPage.objPaymentPageHeader,
					"Payment page after clicking on Rent Content CTA")) {
				logger.info(
						"user is directed to Payment mode screen page after  selecting only rent movie , expected behaviour");
				extent.extentLoggerPass(" ",
						"user is directed to Payment mode screen page after  selecting only rent movie , expected behaviour");
			} else {
				logger.info("user is not directed to Payment mode screen page after  selecting only rent movie");
				extent.extentLoggerFail(" ",
						"user is not directed to Payment mode screen page after  selecting only rent movie");
			}

		}

	}

	public void noPlexLogoForSearchedLiveTVTvodResult(String userType, String LiveTVTVODContent) throws Exception {
		extent.HeaderChildNode(
				"Verify that Plex logo is not displayed for Live TV TVOD or TVOD videos content in the search result");
		click(PWAHomePage.objSearchBtn, "Seach button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, LiveTVTVODContent, "Search Field");
		waitForElement(PWASearchPage.objSpecificSearch(LiveTVTVODContent), 20, LiveTVTVODContent);
		waitTime(3000);
		if (!checkElementDisplayed(PWAComboOfferPage.objplexlogoOnInSearchResultCard(LiveTVTVODContent),
				"plex logo on card")) {
			logger.info("Plex logo is not displayed for Live TV TVOD or TVOD videos content in the search result");
			extent.extentLoggerPass("",
					"Plex logo is not displayed for Live TV TVOD or TVOD videos content in the search result");
		} else {
			logger.error("Plex logo is displayed for Live TV TVOD or TVOD videos content in the search result");
			extent.extentLoggerFail("",
					"Plex logo is displayed for Live TV TVOD or TVOD videos content in the search result");
		}
		navigateHome();
		waitTime(2500);
	}

	public void streamedLiveContentOnAug21(String userType, String LiveTvContent) throws Exception {
		extent.HeaderChildNode("Verify LiveTV content is streamed on live August 21st 2021");

		String streamedDate = "21-08-2021";
		SimpleDateFormat f = new SimpleDateFormat("dd-MM-yyyy");
		Date Livedate = new Date();
		Livedate = f.parse(streamedDate);

		Date ContentTVDate = new Date();
		String contdate = f.format(ContentTVDate);
		Date cont1date = f.parse(contdate);

		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, LiveTvContent, "Search edit");
		waitForElement(PWASearchPage.objSearchedResult(LiveTvContent), 20, "Search Result");

		waitTime(5000);
		if (checkElementDisplayed(PWASearchPage.objSearchedResult(LiveTvContent), "LiveTvContent")) {

			System.out.println(cont1date);
			System.out.println(Livedate);

			Boolean bool1 = cont1date.after(Livedate);
			Boolean bool2 = cont1date.before(Livedate);
			Boolean bool3 = cont1date.equals(Livedate);
			if (bool1.equals(bool3)) {
				logger.info("The content searched is streamed live");
				extent.extentLoggerPass("", "The content searched is streamed live,expected behaviour");
			}
			if (bool2) {
				logger.info("The content searched is not streamed live");
				extent.extentLoggerFail("", "The content searched is not streamed live");
			}

		} else {
			logger.info("The content searched is not displayed");
			extent.extentLoggerFail("", "The content searched is not displayed");
		}

	}

	public void LiveTvContentInTrendingSearch(String userType, String LiveTVTVODContent) throws Exception {
		extent.HeaderChildNode(
				"Verify user is able to see Live TV TVOD contents in Top/Trending searched if featured or configured");
		click(PWAHomePage.objSearchBtn, "Seach button");
		waitTime(4000);
		scrollToTheElementWEB(PWASearchPage.objTrendingSearchesTray);
		if (checkElementDisplayed(PWASearchPage.objTrendingSearchesTray, "Treanding Searches tray") == true) {
			ArrayList<String> TreandingSearch = new ArrayList<String>();
			List<WebElement> ele = getWebDriver().findElements(PWALandingPages.objNumOfContentsInTray);
			int size1 = ele.size();
			System.out.println(size1);
			waitTime(2000);
			for (int i = 1; i <= size1; i++) {
				String updatedContent = null;
				if (!checkElementDisplayed(PWALandingPages.objContentTiltle(i), "content")) {
					JSClick(PWALandingPages.objNextButtoninTray, "Next Arrow ");
					waitTime(3000);
				}
				updatedContent = getWebDriver().findElement(PWALandingPages.objContentTiltle(i)).getText();// PWALandingPages.objContentTiltle(i)
				waitTime(1000);
				System.out.println(updatedContent);
				TreandingSearch.add(updatedContent);
				System.out.println(TreandingSearch);
			}
			if (TreandingSearch.contains(LiveTVTVODContent)) {
				logger.info("user is able to see Live TV TVOD contents in Top/Trending searched");
				extent.extentLoggerPass("", "user is able to see Live TV TVOD contents in Top/Trending searched");
			} else {
				logger.error("user is not able to see Live TV TVOD contents in Top/Trending searched");
				extent.extentLoggerFail("", "user is not able to see Live TV TVOD contents in Top/Trending searched");
			}
		}
	}

	public void pwaPerformance_NavigationTimingAPI(int iterations) throws Exception {
		String env = "";
		String url = getParameterFromXML("url");
		if (url.equals("https://newpwa.zee5.com/"))
			env = "newpwa";
		if (url.equals("https://www.zee5.com/"))
			env = "production";
		if (url.equals("https://pwauat5.zee5.com/"))
			env = "pwauat5";
		String userType = getParameterFromXML("userType");
		String xlspath = System.getProperty("user.dir") + "\\performance.xlsx";
		int NumberOfRows = getRowCount(xlspath, "performance");
		System.out.println("NumberOfRows" + NumberOfRows);
		for (int i = 1; i <= iterations; i++) {
			int colNo = getColumnCount(xlspath, "performance");
			System.out.println("NumberOfColumns" + colNo);
			Date currentDate = new Date();
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy");
			SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
			String dateString = dateFormat.format(currentDate).toString();
			String timeString = timeFormat.format(currentDate).toString();
			String value = "Env: " + env + "\nDate: " + dateString + "\nTime: " + timeString + "\nUser: " + userType;
			writeToExcel(xlspath, "performance", 0, colNo, value);
			tearDown();
			extent.HeaderChildNode("Iteration " + i + ": Site Launch");
			ArrayList<String> siteLaunchTime = verifySiteLaunchTime_NavigationTiming("");
			writeToExcel(xlspath, "performance", 1, colNo, siteLaunchTime.get(0));
			writeToExcel(xlspath, "performance", 2, colNo, siteLaunchTime.get(1));

			extent.HeaderChildNode("Iteration " + i + ": Navigation to TV Shows");
			ArrayList<String> showsNavigation = verifySiteLaunchTime_NavigationTiming("tvshows");
			writeToExcel(xlspath, "performance", 3, colNo, showsNavigation.get(0));
			writeToExcel(xlspath, "performance", 4, colNo, showsNavigation.get(1));

			extent.HeaderChildNode("Iteration " + i + ": Navigation to Movies");
			ArrayList<String> moviesNavigation = verifySiteLaunchTime_NavigationTiming("movies");
			writeToExcel(xlspath, "performance", 5, colNo, moviesNavigation.get(0));
			writeToExcel(xlspath, "performance", 6, colNo, moviesNavigation.get(1));

			extent.HeaderChildNode("Iteration " + i + ": Navigation to Premium");
			ArrayList<String> premiumNavigation = verifySiteLaunchTime_NavigationTiming("premium");
			writeToExcel(xlspath, "performance", 7, colNo, premiumNavigation.get(0));
			writeToExcel(xlspath, "performance", 8, colNo, premiumNavigation.get(1));

			extent.HeaderChildNode("Iteration " + i + ": Navigation to Videos");
			ArrayList<String> videosNavigation = verifySiteLaunchTime_NavigationTiming("videos");
			writeToExcel(xlspath, "performance", 9, colNo, videosNavigation.get(0));
			writeToExcel(xlspath, "performance", 10, colNo, videosNavigation.get(1));

			extent.HeaderChildNode("Iteration " + i + ": Navigation to Show Detail");
			ArrayList<String> showDetailNavigation = verifySiteLaunchTime_NavigationTiming(
					"tvshows/details/kundali-bhagya/0-6-366");
			writeToExcel(xlspath, "performance", 11, colNo, showDetailNavigation.get(0));
			writeToExcel(xlspath, "performance", 12, colNo, showDetailNavigation.get(1));

			extent.HeaderChildNode("Iteration " + i + ": Navigation to Movie Detail");
			ArrayList<String> movieDetailNavigation = verifySiteLaunchTime_NavigationTiming(
					"movies/details/robin-hood-and-the-invincible-knight/0-0-103553");
			writeToExcel(xlspath, "performance", 13, colNo, movieDetailNavigation.get(0));
			writeToExcel(xlspath, "performance", 14, colNo, movieDetailNavigation.get(1));
			/*
			 * LocalStorage local = ((ChromeDriver) getWebDriver()).getLocalStorage();
			 * extent.HeaderChildNode("Iteration "
			 * +i+": Playback Start time (VST) [For Premium]"); String
			 * vstPremium=verifyVST("Uri: The Surgical Strike"); writeToExcel(xlspath,
			 * "performance", 8, colNo, vstPremium); mandatoryRegistrationPopUp(userType);
			 * ResponseInstance.updateWatchHistory("0-0-33204", 1,
			 * local.getItem("guestToken"));
			 *
			 * extent.HeaderChildNode("Iteration "
			 * +i+": Playback Start time (VST) [For Non-Premium]"); String
			 * vstNonPremium=verifyVST("Teen Patti"); writeToExcel(xlspath, "performance",
			 * 9, colNo, vstNonPremium); mandatoryRegistrationPopUp(userType);
			 * ResponseInstance.updateWatchHistory("0-0-414244", 1,
			 * local.getItem("guestToken"));
			 *
			 * extent.HeaderChildNode("Iteration "
			 * +i+": Playback resume time (from pause) (VRT)"); String
			 * vrt=verifyResumeTimeFromPause("Khalnayak"); writeToExcel(xlspath,
			 * "performance", 10, colNo, vrt); mandatoryRegistrationPopUp(userType);
			 * ResponseInstance.updateWatchHistory("0-0-khalnayak", 1,
			 * local.getItem("guestToken"));
			 *
			 * extent.HeaderChildNode("Iteration "+i+": Playback resume time (post seek)");
			 * String vrtPostSeek=verifyResumeTimeAfterSeek("Golmaal Returns");
			 * writeToExcel(xlspath, "performance", 11, colNo, vrtPostSeek);
			 * mandatoryRegistrationPopUp(userType);
			 * ResponseInstance.updateWatchHistory("0-0-1z51324", 1,
			 * local.getItem("guestToken"));
			 *
			 * extent.HeaderChildNode("Iteration "
			 * +i+": Playback resume time (post quality change)"); String
			 * vrtQualityChange=verifyResumeTimeAfterQualityChange("Ra. One");
			 * writeToExcel(xlspath, "performance", 12, colNo, vrtQualityChange);
			 * mandatoryRegistrationPopUp(userType);
			 * ResponseInstance.updateWatchHistory("0-0-2526", 1,
			 * local.getItem("guestToken"));
			 */
		}
	}

	public String DateConvertor(long time) throws Exception {
		int milliSeconds = (int) Math.floorMod(time, 1000);
		int seconds = (int) (time / 1000);
		int mins = 0;
		if (seconds >= 60) {
			mins = seconds / 60;
			seconds = Math.floorMod(seconds, 60);
		}
		return mins + "m, " + seconds + "s, " + milliSeconds + "ms";
	}

	public void SupermoonPlanAmount(String userType) throws Exception {
		extent.HeaderChildNode("Verify the Supermoon plan  price of the ticket is to be 199 INR");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
		click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
		verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now ");
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now ");
		waitTime(3000);

		waitTime(3000);
		verifyElementPresentAndClick(PWAComboOfferPage.objOnlyRentMovieCheckBoxNotActive, "199 check box");

		waitTime(5000);
		String a = getText(PWAComboOfferPage.objOnlyRentMovieCheckBoxNotActive);
		System.out.println(a);
		if (a.equals("199")) {
			logger.info("The supermoon plan price of the ticket should be 199 INR ,expected behaviour.");
			extent.extentLoggerPass("",
					"The supermoon plan price of the ticket should be 199 INR, expected behaviour.");
		} else {
			logger.info("The supermoon plan price of the ticket Less than 199 INR");
			extent.extentLoggerFail(" ", "The supermoon plan price of the ticket Less than 199 INR");

		}

	}

	public void SuperMoonContentInSearchResult(String userType, String LiveTVContent) throws Exception {
		extent.HeaderChildNode("Verify whether Supermoon LiveTV content is available via search page");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		waitTime(2500);
		click(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2500);
		type(PWASearchPage.objSearchEditBox, LiveTVContent, "Search Field");
		waitTime(2500);
		verifyElementPresent(PWAHamburgerMenuPage.objSearchThroughTitle, "Search content");
		String a = getText(PWAHamburgerMenuPage.objSearchThroughTitle);
		System.out.println(a);
		if (a.contains(LiveTVContent)) {
			logger.info(" Supermoon LiveTV content should be available via search page,expected behaviour.");
			extent.extentLoggerPass("",
					"Supermoon LiveTV content should be available via search page, expected behaviour.");
		} else {
			logger.info("Supermoon LiveTV contentnot available via search page");
			extent.extentLoggerFail(" ", "Supermoon LiveTV contentnot available via search page");
		}
		navigateHome();
		waitTime(2500);
	}

	public void SuperMoonContentInZeeplex(String userType, String LiveTvtitle) throws Exception {
		extent.HeaderChildNode("Verify whether Supermoon LiveTV content is available via Zeeplex page");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		waitTime(3000);
		verifyElementPresent(PWAComboOfferPage.objZeeplexTitle(LiveTvtitle), "ZEEPLEX Title");
		String a = getText(PWAComboOfferPage.objZeeplexTitle(LiveTvtitle));
		System.out.println(a);
		if (a.contains(LiveTvtitle)) {
			logger.info(" Supermoon LiveTV content shoulbe be available via Zeeplex page,expected behaviour.");
			extent.extentLoggerPass("",
					"Supermoon LiveTV content shoulbe be available via Zeeplex page, expected behaviour.");
		} else {
			logger.info("Supermoon LiveTV content not available via Zeeplex page");
			extent.extentLoggerFail(" ", "Supermoon LiveTV content not available via Zeeplex page");
		}
		navigateHome();
		waitTime(2500);
	}

	public void SuperMoonExclusiveContentInSearchResult(String userType, String ExclusiveVOD) throws Exception {
		extent.HeaderChildNode("Verify whether Supermoon Exclusive VOD content is available via search page");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		click(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2500);
		type(PWASearchPage.objSearchEditBox, ExclusiveVOD, "Search Field");
		waitTime(2500);
		verifyElementPresent(PWAComboOfferPage.objSearchedFirstContentName, "Search content");
		String a = getText(PWAComboOfferPage.objSearchedFirstContentName);
		System.out.println(a);
		if (a.equalsIgnoreCase(ExclusiveVOD)) {
			logger.info(" Supermoon Exclusive VOD  content should be available via search page,expected behaviour.");
			extent.extentLoggerPass("",
					"Supermoon Exclusive VOD  content should be available via search page, expected behaviour.");
		} else {
			logger.info("Supermoon Exclusive VOD  content not available via search page");
			extent.extentLoggerFail(" ", "Supermoon Exclusive VOD  contentnot available via search page");
		}
		navigateHome();
		waitTime(2500);
	}

	public void ComboofferPageUI(String userType) throws Exception {
		extent.HeaderChildNode("Verify that Combo offer UI is per VD");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		waitTime(3500);
		ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
		JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
		waitTime(3500);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail");
			verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail");
			verifyElementPresent(PWAComboOfferPage.objOnlyRentMovie, "Only Rent Content");
			verifyElementPresent(PWAComboOfferPage.objpackprice249, "Only Rent Content with INR 249");
			compareText(PWAComboOfferPage.objBottomOnlyRentMovie, "Supermoon Event Pass");
			compareText(PWAComboOfferPage.objbottomLiveEventTicket, "Online Live Concert");
			compareText(PWAComboOfferPage.objbottomExclusiveVideos, "Exclusive Videos");
			String SaveAmount = getText(PWAComboOfferPage.objDiscount).replace("Save ₹", "");
			compareText(PWAComboOfferPage.objDiscount, "Save ₹" + SaveAmount);
			compareText(PWAComboOfferPage.objTotalDiscount, "Save ₹" + SaveAmount);
		} else {
			compareText(PWAComboOfferPage.objLiveEventTicket, "Online Live Concert");
			compareText(PWAComboOfferPage.objExclusiveVideos, "Exclusive Videos");
			compareText(PWAComboOfferPage.objOnlyEventPass, "Only Event Pass");
			compareText(PWAComboOfferPage.objSupermoonEventPass, "Supermoon Event Pass");
			verifyElementPresent(PWAComboOfferPage.objpackprice199, "price 199");
		}
		navigateHome();
		waitTime(2500);
	}

	public void UpgradeToSupermoonPack(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify if the text is displayed below the banner for Upgrade journey");
			LogintoRSVODPacklessthen499();
			waitTime(3000);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			verifyElementPresent(PWAComboOfferPage.objRentNow, "Rent Now");
			click(PWAComboOfferPage.objRentNow, "Rent Now");
			verifyElementPresent(PWAComboOfferPage.objUpgradeBtn, "Upgrade button");
			if (verifyElementPresent(PWAComboOfferPage.objUpgradeTextJustPayingDifference,
					"Upgrade to combo offer by just paying the difference")) {
				String a = getText(PWAComboOfferPage.objUpgradeTextJustPayingDifference);
				System.out.println(a);
				logger.info(" Upgrade to combo offer by just paying the difference is displayed ,expected behaviour.");
				extent.extentLoggerPass("",
						"Upgrade to combo offer by just paying the difference is displayed , expected behaviour.");
			} else {
				logger.info("Upgrade to combo offer by just paying the difference is not displayed");
				extent.extentLoggerFail(" ", "Upgrade to combo offer by just paying the difference is not displayed");
			}
			// objYouCurrentlyOnTxt
			if (verifyElementPresent(PWAComboOfferPage.objYouCurrentlyOnTxt, "Your current plan")) {
				String a = getText(PWAComboOfferPage.objYouCurrentlyOnTxt);
				System.out.println(a);
				logger.info(" Your currently on plan text is displayed ,expected behaviour.");
				extent.extentLoggerPass("", " Your currently on plan text is displayed ,expected behaviour.");
			} else {
				logger.info(" Your currently on plan text is not displayed");
				extent.extentLoggerFail(" ", " Your currently on plan text is not displayed");
			}
			navigateHome();
			waitTime(2500);
			logout();
		}
	}

	public void LoadingInSubscription(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify the behaviour if Screen loads partially - in such cases, the screen is showing \"Loading\" in the subscription card.");
		navigateToAnyScreenOnWeb("ZEEPLEX");
		verifyElementPresent(PWAComboOfferPage.objTrailerBtn, "Trailer");
		click(PWAComboOfferPage.objTrailerBtn, "Trailer");
		verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
		click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
		checkElementDisplayed(PWAComboOfferPage.objLoading, "Loading");

	}

	public void ComboOfferPageThroughSearchResult(String userType, String LiveContent) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see combo offer page on clicking Rent Now CTA on player consumption page post redirecting through search result");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			click(PWAHomePage.objSearchBtn, "Search button");
			waitTime(2500);

			type(PWASearchPage.objSearchEditBox, LiveContent, "Search Field");
			waitTime(4500);
			JSClick(PWAComboOfferPage.objFirstContentCardNameAfterSearch, "First content in search field ");
			waitTime(3500);
			waitForElement(PWAComboOfferPage.objRentNowBelowPlayer, 20, "Rent Now Below Player");
			if (checkElementDisplayed(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now Below Player")) {
				click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent Now Below Player");
				waitTime(3000);
				if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
						&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
					logger.info("combo offer page is displayed , expected behaviour");
					extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
				} else {
					logger.info("combo offer page is not displayed ");
					extent.extentLoggerFail(" ", "combo offer page is not displayed ");
				}
			}
			navigateHome();
			waitTime(2500);
		}
	}

	public void YouHaveItAll(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that You Have it All Pop up is displayed if user enters active 999 plan user login details during guest checkout");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			scrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "Rent now");
			waitTime(2500);
			JSClick(PWAComboOfferPage.objBuyCombobutton, "Buy premium");
			waitTime(2500);
			PWAComboOfferLoginInSubscriptionFlow(userType, "999");
			waitTime(2500);

			if (checkElementDisplayed(PWAComboOfferPage.objHaveitAllPopDialog, "You have it all Text")) {
				String a = getText(PWAComboOfferPage.objHaveitAllPopDialog);
				logger.info("You have it all pop up displayed as: " + a);
				extent.extentLoggerPass("", "You have it all pop up displayed,expected behaviour");

			} else {
				logger.info("You have it all pop up not displayed");
				extent.extentLoggerFail("", "You have it all pop up not displayed");
			}
			if (checkElementDisplayed(PWAComboOfferPage.objYouHaveAlreadyRentedTxt,
					"You have already rented this content Text")) {
				String a = getText(PWAComboOfferPage.objYouHaveAlreadyRentedTxt);
				logger.info("You have already rented this content is displayed as: " + a);
				extent.extentLoggerPass("", "You have already rented this content is displayed,expected behaviour");

			} else {
				logger.info("You have already rented this content is not displayed");
				extent.extentLoggerFail("", "You have already rented this content is not displayed");
			}
			if (checkElementDisplayed(PWAComboOfferPage.objYouCurrentlyOnTxt, "You currently on pack details Text")) {
				String a = getText(PWAComboOfferPage.objYouCurrentlyOnTxt);

				logger.info("You currently on pack details is displayed as: " + a);
				extent.extentLoggerPass("", "You currently on pack details is displayed,expected behaviour");

			} else {
				logger.info("You currently on pack details is not displayed");
				extent.extentLoggerFail("", "You currently on pack details is not displayed");
			}
			navigateHome();
			logout();
		}
	}

	public void PackAndActiveRental299() throws Exception {
		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Page");
		waitTime(2000);
		type(PWASubscriptionPages.objEmailIDTextField, "299zeeuser@mailnesia.com", "Email Id");
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnGuestCheckOut, "Continue Button");
		verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password");
		verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
		type(PWASubscriptionPages.objPasswordFieldHidden, "123456", "Password Field");
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnGuestCheckOut, "Continue Button");
	}

	public void Upgradetocomboofferbyjustpayingthedifference(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {

			extent.HeaderChildNode(
					"Verify user enters active 299 plan user login details then user is getting Upgrade Combo Offer pop up");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);

			waitTime(3000);
			scrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "Rent now");
			waitTime(2500);
			JSClick(PWAComboOfferPage.objBuyCombobutton, "Buy premium");
			waitTime(2500);
			PackAndActiveRental299();
			waitTime(2500);
			// objYouCurrentlyOnTxt
			if (verifyElementPresent(PWAComboOfferPage.objUpgradeComboText,
					"Upgrade to combo offer by just paying the difference Text")) {
				String a = getText(PWAComboOfferPage.objUpgradeComboText);
				logger.info(" Upgrade to Combo Offer by just paying the difference is displayed as:" + a);
				extent.extentLoggerPass("",
						"Upgrade to combo offer by just paying the difference is displayed , expected behaviour.");
			} else {
				logger.info("Upgrade to combo offer by just paying the difference is not displayed");
				extent.extentLoggerFail(" ", "Upgrade to combo offer by just paying the difference is not displayed");

			}
			if (verifyElementPresent(PWAComboOfferPage.objYouCurrentlyText, "You are currently plan Text")) {
				String a = getText(PWAComboOfferPage.objYouCurrentlyText);
				logger.info(" You are currently plan Text is displayed as:" + a);
				extent.extentLoggerPass("",
						"You are currently on ₹299 Premium 3 Months plan. is displayed , expected behaviour.");
			} else {
				logger.info("You are currently plan Text is not displayed");
				extent.extentLoggerFail(" ", "You are currently plan Text is not displayed");

			}

		}
	}

	public void upgradePopup(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that Upgrade Combo Offer pop up is contains active plan details as well as active TVOD detail");
			// navigateHome();
			verifyElementPresent(PWAComboOfferPage.obj299PackUpgradePopup, "Upgrade Popup");
			verifyElementPresent(PWAComboOfferPage.objUpgradeComboText,
					"Upgrade to combo offer by just paying the difference");
			if (verifyElementPresent(PWAComboOfferPage.obj299PackUpgradeCTA, "Upgrade CTA")) {

				logger.info(
						" Upgrade Combo Offer pop up is contains active plan details as well as active TVOD detail");
				extent.extentLoggerPass("",
						" Upgrade Combo Offer pop up is contains active plan details as well as active TVOD detail");
			} else {
				logger.info(" Upgrade Combo Offer pop up does not contain active plan details and active TVOD detail");
				extent.extentLoggerFail("",
						" Upgrade Combo Offer pop up does not contain active plan details and active TVOD detail");
			}

		}
	}

	public void BackButtonInUpgradePopup(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user redirects back to Combo Offer page on clicking back or browser back");
			JSClick(PWAComboOfferPage.objZeeplexPopupCloseButton, "Close PopUp");
			waitTime(2500);
			if (verifyElementPresent(PWAComboOfferPage.objcomboofferpage,
					"Upgrade to combo offer by just paying the difference")) {
				logger.info(" Upgrade to combo offer by just paying the difference is displayed ,expected behaviour.");
				extent.extentLoggerPass("",
						"Upgrade to combo offer by just paying the difference is displayed , expected behaviour.");
			} else {
				logger.info("Upgrade to combo offer by just paying the difference is not displayed");
				extent.extentLoggerFail(" ", "Upgrade to combo offer by just paying the difference is not displayed");
			}
		}
	}

	public void UpgradeCTA(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			// Loginto299Pack();
			extent.HeaderChildNode(

					"Verify that user redirects to payment page with differential amount on clicking Upgrade CTA");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			verifyElementPresent(PWAComboOfferPage.obj299PackUpgradeCTA, "Upgrade CTA");
			// click(PWAComboOfferPage.obj299PackUpgradeCTA, "Upgrade CTA");
			if (verifyElementPresent(PWAComboOfferPage.objDiferenceAmount,
					"Upgrade to combo offer by just paying the difference")) {
				logger.info(" Upgrade to combo offer by just paying the difference is displayed ,expected behaviour.");
				extent.extentLoggerPass("",
						"Upgrade to combo offer by just paying the difference is displayed , expected behaviour.");
			} else {
				logger.info("Upgrade to combo offer by just paying the difference is not displayed");
				extent.extentLoggerFail(" ", "Upgrade to combo offer by just paying the difference is not displayed");

			}
			navigateHome();
			logout();
		}
	}

	public void PaymentPageThroughOnlyRentmovie(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify that user is able to redirect to payment page Select Only Rented content on clicking Rent Content CTA");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			waitTime(3000);
			// JSClick(PWAComboOfferPage.objUpgradeBtn, "Upgrade CTA in combo offer page");
			waitTime(3000);
			verifyElementPresentAndClick(PWAComboOfferPage.objOnlyRentMovieCheckBoxNotActive, "249 check box");
			// JSClick(PWAComboOfferPage.objOnlyRentMovieCheckBoxNotActive, "249 check box
			// select");
			waitTime(5000);
			JSClick(PWAComboOfferPage.objRentContent, "Rent Content CTA after clicking on Upgrade CTA");
			waitTime(3000);
			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info("User should be redircted to Payment page ,expected behaviour");
				extent.extentLoggerPass("", "User should be redircted to Payment page , expected behaviour");
				// Back(1);
			} else {
				logger.info("User not redircted to Payment page ");
				extent.extentLoggerFail("", "User not redircted to Payment page ");
			}
		}

	}

	public void LogintoSubscribeduserActiveRental() throws Exception {
		extent.HeaderChildNode("Login as NonSubscribeduser User active rental");

		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Page");
		waitTime(2000);
		type(PWASubscriptionPages.objEmailIDTextField, "", "Email Id");
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted, "Continue Button");
		verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password");
		verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
		type(PWASubscriptionPages.objPasswordFieldHidden, "", "Password Field");
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnEnabled, "Continue Button");
	}

	public void LogintoNonSubscribeduserActiveRental() throws Exception {
		extent.HeaderChildNode("Login as NonSubscribeduser User active rental");

		waitTime(2000);
		verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Page");
		waitTime(2000);
		type(PWASubscriptionPages.objEmailIDTextField, "", "Email Id");
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnHighlighted, "Continue Button");
		verifyElementPresent(PWASubscriptionPages.objEnterPasswordPopupTitle, "Enter Password");
		verifyElementPresentAndClick(PWASubscriptionPages.objPasswordFieldHidden, "Password Field");
		type(PWASubscriptionPages.objPasswordFieldHidden, "", "Password Field");
		verifyElementPresentAndClick(PWASubscriptionPages.objProceedBtnEnabled, "Continue Button");
	}

	public void SubscriptionPage(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user redirects to subscription page on clicking Buy Premium CTA");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			verifyElementPresent(PWAComboOfferPage.objBuySupermoonComboat499, "Buy SuperMoon");
			click(PWAComboOfferPage.objBuySupermoonComboat499, "Buy SuperMoon");
			LogintoNonSubscribeduserActiveRental();
			verifyElementPresent(PWAComboOfferPage.objbuycta, "Buy CTA");
			click(PWAComboOfferPage.objbuycta, "Buy CTA");
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title")) {
				logger.info("User should be redircted to Subscription page ,expected behaviour");
				extent.extentLoggerPass("", "User should be redircted to Subscription page , expected behaviour");
				// Back(1);
			} else {
				logger.info("User not redircted to Subscription page ");
				extent.extentLoggerFail("", "User not redircted to Subscription page ");
			}
			navigateHome();
			logout();
		}
	}

	public void PaymentPage(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that user redirects to subscription page on clicking Buy Premium CTA");
			navigateToAnyScreenOnWeb("Guest");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle, "Zeeplex Title");
			click(PWAComboOfferPage.objZeeplexTitle, "Zeeplex Title");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			verifyElementPresent(PWAComboOfferPage.objBuySupermoonComboat499, "Buy SuperMoon");
			click(PWAComboOfferPage.objBuySupermoonComboat499, "Buy SuperMoon");
			LogintoSubscribeduserActiveRental();
			verifyElementPresent(PWAComboOfferPage.objRentContent, "Rent Content");
			click(PWAComboOfferPage.objbuycta, "Buy CTA");
			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info("User should be redircted to Payment page ,expected behaviour");
				extent.extentLoggerPass("", "User should be redircted to Payment page , expected behaviour");
				// Back(1);
			} else {
				logger.info("User not redircted to Payment page ");
				extent.extentLoggerFail("", "User not redircted to Payment page ");
			}
			navigateHome();
			logout();
		}
	}

	public void AccountinfoPage(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that guest user is redirected to Account info page on clicking Buy Supermoon Combo CTA on combo offer page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			verifyElementPresent(PWAComboOfferPage.objBuySupermoonComboBtn, "Buy SuperMoon");
			click(PWAComboOfferPage.objBuySupermoonComboBtn, "Buy SuperMoon");
			if (verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Page")) {
				logger.info("User should be redircted to Account Info page ,expected behaviour");
				extent.extentLoggerPass("", "User should be redircted to Account Info page , expected behaviour");
				// Back(1);
			} else {
				logger.info("User not redircted to Account Info page ");
				extent.extentLoggerFail("", "User not redircted to Account Info page ");
			}
			navigateHome();
		}

	}

	public void AccountinfoPageThroughtRentOnlyMovie(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that guest user is redirected to Account info page on clicking Buy Supermoon Combo CTA on combo offer page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			waitTime(3000);
			// JSClick(PWAComboOfferPage.objUpgradeBtn, "Upgrade CTA in combo offer page");
			waitTime(3000);
			verifyElementPresentAndClick(PWAComboOfferPage.objOnlyRentMovieCheckBoxNotActive, "249 check box");
			// JSClick(PWAComboOfferPage.objOnlyRentMovieCheckBoxNotActive, "249 check box
			// select");
			waitTime(5000);
			JSClick(PWAComboOfferPage.objRentContent, "Rent Content CTA ");
			waitTime(3000);
			if (verifyElementPresent(PWASubscriptionPages.objAccountInfoHighlighted, "Account Info Page")) {
				logger.info("User should be redircted to Account Info page ,expected behaviour");
				extent.extentLoggerPass("", "User should be redircted to Account Info page , expected behaviour");
				// Back(1);
			} else {
				logger.info("User not redircted to Account Info page ");
				extent.extentLoggerFail("", "User not redircted to Account Info page ");
			}
			navigateHome();
		}

	}

	public void PaymentMode(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify that user is getting redirected to payment mode page post login in  without Rental content");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");

			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			waitTime(3000);
			// JSClick(PWAComboOfferPage.objUpgradeBtn, "Upgrade CTA in combo offer page");
			waitTime(3000);
			verifyElementPresentAndClick(PWAComboOfferPage.objOnlyRentMovieCheckBoxNotActive, "249 check box");
			// JSClick(PWAComboOfferPage.objOnlyRentMovieCheckBoxNotActive, "249 check box
			// select");
			waitTime(5000);
			JSClick(PWAComboOfferPage.objRentContent, "Rent Content CTA after clicking on Upgrade CTA");
			waitTime(3000);
			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info("User should be redircted to Payment page ,expected behaviour");
				extent.extentLoggerPass("", "User should be redircted to Payment page , expected behaviour");
				// Back(1);
			} else {
				logger.info("User not redircted to Payment page ");
				extent.extentLoggerFail("", "User not redircted to Payment page ");
			}
			navigateHome();
		}

	}

	public void RsvodComboScreenAsPerVD(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify that UI/UX of combo screen is as per VD");
			RSVODlogin();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle, "Zeeplex Title");
			click(PWAComboOfferPage.objZeeplexTitle, "Zeeplex Title");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			verifyComboScreen();
		}
	}

	public void NonSubscribedUserComboScreenAsPerVD(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Nonsubscribeduser")) {
			extent.HeaderChildNode("Verify that UI/UX of combo screen is as per VD");
			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");

			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			verifyComboScreen();

		}
	}

	public void PackDetails(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see the order summary page on successful upgrade to combo offer page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle, "Zeeplex Title");
			click(PWAComboOfferPage.objZeeplexTitle, "Zeeplex Title");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			verifyElementPresent(PWAComboOfferPage.objBuySupermoonComboat499, "Buy SuperMoon");
			click(PWAComboOfferPage.objBuySupermoonComboat499, "Buy SuperMoon");
			PackAndActiveRental299();
			if (verifyElementPresent(PWAComboOfferPage.objPackDetails, "Pack details")) {
				logger.info("User should be redircted to order details page ,expected behaviour");
				extent.extentLoggerPass("", "User should be redircted to order details page , expected behaviour");
				// Back(1);
			} else {
				logger.info("User not redircted to order details page ");
				extent.extentLoggerFail("", "User not redircted to order details page ");
			}
		}
		logout();
	}

	public void PaymentFailurePopup(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify Whether on clicking browser back on netbanking page user should get retry payment i.e. payment failure popup");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle, "Zeeplex Title");
			click(PWAComboOfferPage.objZeeplexTitle, "Zeeplex Title");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			verifyElementPresent(PWAComboOfferPage.objBuySupermoonComboat499, "Buy SuperMoon");
			click(PWAComboOfferPage.objBuySupermoonComboat499, "Buy SuperMoon");
			PWAIframe();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking, "Net banking");
			click(PWAHamburgerMenuPage.objsearchbarinnetbanking, "Search bar in netbanking");
			type(PWAHamburgerMenuPage.objsearchbarinnetbanking, "Axis", "Search bar in netbanking");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("Axis Bank"), "Payment option");
			verifyElementPresentAndClick(PWASubscriptionPages.objPaytmProceedToPay, "Proceed To Pay Button");
			Back(1);
			if (verifyElementPresent(PWAHamburgerMenuPage.objpaymentfailurepopup, "Payment failure popup")) {
				logger.info("payment failure popup is displayed, expected behaviour");
				extent.extentLogger("", "Payment failure popup is displayed, expected behaviour");
			} else {
				logger.info("payment failure popup is not displayed");
				extent.extentLoggerFail("", "payment failure popup is not displayed");
			}
		}
	}

	public void ComboOfferPageFor299User(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that subscribed users with 299 are able to see combo offer on plex consumption page");
			Loginto299Pack();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");

			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& verifyElementPresent(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info("combo offer page is displayed , expected behaviour");
				extent.extentLoggerPass(" ", "combo offer page is displayed  , expected behaviour");
			} else {
				logger.info("combo offer page is not displayed ");
				extent.extentLoggerFail(" ", "combo offer page is not displayed ");
			}

		}
	}

	public void SupermoonPoster(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that User is able to see Supermoonposter and difference amount in Combo offer Screen");

			navigateHome();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");
			click(PWAComboOfferPage.objZeeplexTitle("Demo Moon Live"), "Zeeplex");

			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			if (verifyElementPresent(PWAComboOfferPage.objContentCard, "Content Thumbnail")) {
				logger.info("User should able to see supermoon poster ,expected behaviour");
				extent.extentLoggerPass("", "User should able to see supermoon poster , expected behaviour");
				// Back(1);
			} else {
				logger.info("User is not able to see supermoon poster ");
				extent.extentLoggerFail("", "User is not able to see supermoon poster ");
			}

			if (verifyElementPresent(PWAComboOfferPage.objDiferenceAmount,
					"Upgrade to combo offer by just paying the difference")) {
				logger.info(" Upgrade to combo offer by just paying the difference is displayed ,expected behaviour.");
				extent.extentLoggerPass("",
						"Upgrade to combo offer by just paying the difference is displayed , expected behaviour.");
			} else {
				logger.info("Upgrade to combo offer by just paying the difference is not displayed");
				extent.extentLoggerFail(" ", "Upgrade to combo offer by just paying the difference is not displayed");

			}
			navigateHome();
			logout();
		}
	}

	public void PaymentPageThroughOnlyRentmovie499(String uaerType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to redirect to payment page Select Only Rented content on clicking Rent Content CTA");
			navigateHome();
			LogintoRSVODPack();
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle, "ZeePlex title");
			click(PWAComboOfferPage.objZeeplexTitle, "ZeePlex title");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			verifyElementPresent(PWAComboOfferPage.objBuySupermoonComboat499, "Buy SuperMoon");
			click(PWAComboOfferPage.objBuySupermoonComboat499, "Buy SuperMoon");
			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info("User should be redircted to Payment page ,expected behaviour");
				extent.extentLoggerPass("", "User should be redircted to Payment page , expected behaviour");
				// Back(1);
			} else {
				logger.info("User not redircted to Payment page ");
				extent.extentLoggerFail("", "User not redircted to Payment page ");
			}
		}

	}

	public void upgradePopup499(String userType) throws Exception

	{
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that Upgrade Combo Offer pop up is contains active plan details as well as active TVOD detail");
			// navigateHome();
			verifyElementPresent(PWAComboOfferPage.obj299PackUpgradePopup, "Upgrade Popup");
			verifyElementPresent(PWAComboOfferPage.objUpgradeToRadheComboPackByJustPayingTheDifference,
					"Upgrade to combo offer by just paying the difference");
			verifyElementPresent(PWAComboOfferPage.obj299PackUpgradeCTA, "Upgrade CTA");

		}
	}

	public void BackButtonInUpgradePopup499(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user redirects back to Combo Offer page on clicking back or browser back");
			Back(1);
			if (verifyElementPresent(PWAComboOfferPage.objUpgradeToRadheComboPackByJustPayingTheDifference,
					"Upgrade to combo offer by just paying the difference")) {
				logger.info(" Upgrade to combo offer by just paying the difference is displayed ,expected behaviour.");
				extent.extentLoggerPass("",
						"Upgrade to combo offer by just paying the difference is displayed , expected behaviour.");
			} else {
				logger.info("Upgrade to combo offer by just paying the difference is not displayed");
				extent.extentLoggerFail(" ", "Upgrade to combo offer by just paying the difference is not displayed");

			}
		}

	}

	public void UpgradeCTA499(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user redirects to payment page with differential amount on clicking Upgrade CTA");
			verifyElementPresent(PWAComboOfferPage.obj299PackUpgradeCTA, "Upgrade CTA");
			click(PWAComboOfferPage.obj299PackUpgradeCTA, "Upgrade CTA");
			if (verifyElementPresent(PWAComboOfferPage.objUpgradeToRadheComboPackByJustPayingTheDifference,
					"Upgrade to combo offer by just paying the difference")) {
				logger.info(" Upgrade to combo offer by just paying the difference is displayed ,expected behaviour.");
				extent.extentLoggerPass("",
						"Upgrade to combo offer by just paying the difference is displayed , expected behaviour.");
			} else {
				logger.info("Upgrade to combo offer by just paying the difference is not displayed");
				extent.extentLoggerFail(" ", "Upgrade to combo offer by just paying the difference is not displayed");

			}
		}
	}

	public void PackDetails499(String userType) throws Exception {
		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is able to see the order summary page on successful upgrade to combo offer page");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			verifyElementPresent(PWAComboOfferPage.objZeeplexTitle, "Zeeplex Title");
			click(PWAComboOfferPage.objZeeplexTitle, "Zeeplex Title");
			verifyElementPresent(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			click(PWAComboOfferPage.objRentNowBelowPlayer, "Rent now");
			verifyElementPresent(PWAComboOfferPage.objBuySupermoonComboat499, "Buy SuperMoon");
			click(PWAComboOfferPage.objBuySupermoonComboat499, "Buy SuperMoon");
			// PackAndActiveRental299();
			if (verifyElementPresent(PWAComboOfferPage.objPackDetails, "Pack details")) {
				logger.info("User should be redircted to order details page ,expected behaviour");
				extent.extentLoggerPass("", "User should be redircted to order details page , expected behaviour");
				// Back(1);
			} else {
				logger.info("User not redircted to order details page ");
				extent.extentLoggerFail("", "User not redircted to order details page ");
			}
		}
		logout();
	}

	public void consumptionPageclickingOnWatchCTAFor749users(String userType, String LiveTVODContent) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);

			waitTime(3500);
			verifyElementPresentAndClick(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage,
					"Rent Now CTA below the player");

			waitTime(3000);
			if (checkElementDisplayed(PWAComboOfferPage.objUpgradeBtn, "upgrade")) {
				JSClick(PWAComboOfferPage.objUpgradeBtn, "Upgrade CTA in combo offer page");
				waitTime(3000);
			}

			JSClick(PWAComboOfferPage.objRentContent, "Rent Content");
			waitTime(3000);
			PWAComboOfferLoginInSubscriptionFlow(userType, "749");
			waitTime(3000);
			if (verifyElementDisplayed(PWAComboOfferPage.objWatchNowCTA)) {
				JSClick(PWAComboOfferPage.objWatchNowCTA, "Watch Now");
			} else {
				JSClick(PWAComboOfferPage.objResumeCTA, "Resume");
			}
			if (verifyElementPresent(PWAPlayerPage.objPlaybackVideoOverlay, "Playback overlay")) {
				logger.info(
						"user is redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
				extent.extentLoggerPass("",
						"user is redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
			} else {
				logger.info(
						"user is not redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
				extent.extentLoggerFail("",
						"user is not redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
			}
			navigateHome();
			logout();

		}
	}

	public void consumptionPageclickingOnWatchCTAFor599users(String userType, String LiveTVODContent) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			ScrollToTheElementWEB(PWAHomePage.objPlaybackMovieTitle(LiveTVODContent));
			JSClick(PWAHomePage.objPlaybackMovieTitle(LiveTVODContent), LiveTVODContent);

			waitTime(3500);
			// objRentNowPlaybackOnConsumptionPage
			waitForElementAndClickIfPresent(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage, 20,
					"Rent Now CTA below the player");

			waitTime(3000);
			if (checkElementDisplayed(PWAComboOfferPage.objUpgradeBtn, "upgrade")) {
				JSClick(PWAComboOfferPage.objUpgradeBtn, "Upgrade CTA in combo offer page");
				waitTime(3000);
			}

			JSClick(PWAComboOfferPage.objRentContent, "Rent Content");
			waitTime(3000);
			PWAComboOfferLoginInSubscriptionFlow(userType, "599");
			waitTime(3000);
			if (verifyElementDisplayed(PWAComboOfferPage.objWatchNowCTA)) {
				JSClick(PWAComboOfferPage.objWatchNowCTA, "Watch Now");
				waitTime(3000);
				logger.info(
						"user is redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
				extent.extentLoggerPass("",
						"user is redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
			} else {
				logger.info(
						"user is not redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
				extent.extentLoggerFail("",
						"user is not redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
			}

		}
	}

	public void consumptionPageclickingOnWatchCTAFor499users(String userType, String LiveTVODContent) throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode(
					"Verify that user is redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			ScrollToTheElementWEB(PWAHomePage.objPlaybackMovieTitle(LiveTVODContent));
			JSClick(PWAHomePage.objPlaybackMovieTitle(LiveTVODContent), LiveTVODContent);

			waitTime(3500);
			// objRentNowPlaybackOnConsumptionPage
			waitForElementAndClickIfPresent(PWAComboOfferPage.objRentNowPlaybackOnConsumptionPage, 20,
					"Rent Now CTA below the player");

			waitTime(3000);
			if (checkElementDisplayed(PWAComboOfferPage.objUpgradeBtn, "upgrade")) {
				JSClick(PWAComboOfferPage.objUpgradeBtn, "Upgrade CTA in combo offer page");
				waitTime(3000);
			}

			JSClick(PWAComboOfferPage.objRentContent, "Rent Content");
			waitTime(3000);
			PWAComboOfferLoginInSubscriptionFlow(userType, "499");
			waitTime(3000);
			if (verifyElementDisplayed(PWAComboOfferPage.objWatchNowCTA)) {
				JSClick(PWAComboOfferPage.objWatchNowCTA, "Watch Now");
				waitTime(3000);
				logger.info(
						"user is redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
				extent.extentLoggerPass("",
						"user is redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
			} else {
				logger.info(
						"user is not redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
				extent.extentLoggerFail("",
						"user is not redirected Live TV TVOD or TVOD Videos consumption page on clicking Watch Now CTA");
			}

		}
	}

	public void paymentModeScreeWithin3seconds(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"Verify that post clicking on Rent Now CTA, user navigates to payment mode screen within 2-3 seconds.");
			int requiredTime = 3000;

			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "Rent Now");

			JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
			long navigationStart = (long) jse.executeScript("return window.performance.timing.navigationStart");
			long responseStart = (long) jse.executeScript("return window.performance.timing.responseStart");
			long domComplete = (long) jse.executeScript("return window.performance.timing.domComplete");

			System.out.println(navigationStart);
			System.out.println(responseStart);
			System.out.println(domComplete);

			long backendPerformance_calc = responseStart - navigationStart;
			long frontendPerformance_calc = domComplete - responseStart;

			System.out.println("Back End:" + backendPerformance_calc);
			System.out.println("Front End:" + frontendPerformance_calc);

			if (frontendPerformance_calc <= requiredTime) {
				logger.info("clicking on Rent Now CTA, user navigates to payment mode screen within 2-3 seconds");
				extent.extentLoggerPass("",
						"clicking on Rent Now CTA, user navigates to payment mode screen within 2-3 seconds");
			} else {
				logger.info("clicking on Rent Now CTA, user navigates to payment mode screen more then 3 seconds");
				extent.extentLoggerFail("",
						"clicking on Rent Now CTA, user navigates to payment mode screen more then 3 seconds");
			}
			navigateHome();
			waitTime(3000);
		}
	}

	public void TrailerPlayWithin5seconds(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"Verify that post clicking on watch trailer CTA, content should play within 4-5 seconds.");
			int requiredTime = 5000;

			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);

			verifyElementPresent(PWAComboOfferPage.objTrailer, "Trailer");
			click(PWAComboOfferPage.objTrailer, "Trailer");
			waitTime(3500);

			JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
			long navigationStart = (long) jse.executeScript("return window.performance.timing.navigationStart");
			long responseStart = (long) jse.executeScript("return window.performance.timing.responseStart");
			long domComplete = (long) jse.executeScript("return window.performance.timing.domComplete");

			System.out.println(navigationStart);
			System.out.println(responseStart);
			System.out.println(domComplete);

			long backendPerformance_calc = responseStart - navigationStart;
			long frontendPerformance_calc = domComplete - responseStart;

			System.out.println("Back End:" + backendPerformance_calc);
			System.out.println("Front End:" + frontendPerformance_calc);

			if (frontendPerformance_calc <= requiredTime) {
				logger.info("clicking on trailer CTA, user navigates to consumption screen within 4-5 seconds");
				extent.extentLoggerPass("",
						"clicking on trailer CTA, user navigates to consumption screen within 4-5 seconds");
			} else {
				logger.info("clicking on trailer CTA, user navigates to consumption screen more then 5 seconds");
				extent.extentLoggerFail("",
						"clicking on trailer CTA, user navigates to consumption screen more then 5 seconds");
			}
			navigateHome();
			waitTime(3000);
		}
	}

	public void PaymentFailurePopupThroughBackButton(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"Verify that on clicking browser back button on payment gateway screen of respective wallets User redirect to Account info with intent popup \"failure payment with retry option \"");
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);

			ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "Rent Now");
			waitTime(3000);
			if (checkElementDisplayed(PWAComboOfferPage.objBuySupermoonComboBtn, "Buy Premiun")) {
				JSClick(PWAComboOfferPage.objBuySupermoonComboBtn, "Buy Premiun CTA");
			} else if (checkElementDisplayed(PWAComboOfferPage.objUpgradeBtn, "Upgrade")) {
				JSClick(PWAComboOfferPage.objUpgradeBtn, "Upgrade CTA");
			} else {
				JSClick(PWAComboOfferPage.objRentContentBtn, "Rent content CTA");
			}

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
			// verifyElementPresentAndClick(PWASubscriptionPages.objpaytmlink, "Paytm
			// link");
			waitTime(8000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaytmProceedToPay, "Procced to pay");
			waitTime(5000);

			click(PWAHamburgerMenuPage.objgobackinpaytm, "Go back");
			waitTime(5000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objcancelpaymentyes, "Cancel payment")) {
				click(PWAHamburgerMenuPage.objcancelpaymentyes, "Cancel payment");

			}
			waitTime(5000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objpaymentfailurepopup, "Payment failure popup")) {
				logger.info("payment failure popup is displayed, expected behaviour");
				extent.extentLogger("", "Payment failure popup is displayed, expected behaviour");
			} else {
				logger.info("payment failure popup is not displayed");
				extent.extentLoggerFail("", "payment failure popup is not displayed");
			}

		}
	}

	public void PaymentPageThroughBrowserBackButton(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"Verify that on clicking browser back button on payment gateway screen of respective wallets User redirect to Account info with intent popup \"failure payment with retry option \"");
			waitTime(4000);
			if (checkElementDisplayed(PWAComboOfferPage.objZeeplexPopupCloseButton, "pop up")) {
				JSClick(PWAComboOfferPage.objZeeplexPopupCloseButton, "pop up close");
			}
			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaytmProceedToPay, "Procced to pay");
			waitTime(5000);
			extent.HeaderChildNode("Verify that on clicking browser back button on payment gateway "
					+ "screen of respective wallets User redirect to Account info screen with intent popup");
			Back(1);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objgobackinpaytm, "Go back")) {
				logger.info("User should redirect to payment page  , expected behaviour");
				extent.extentLogger("", "User should redirect to payment page , expected behaviour");
			} else {
				logger.info("User is not redirect to payment page ");
				extent.extentLoggerFail("", "User is not redirect to payment page");
			}
		}
	}

	public void WalletGateway(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"Verify that on clicking Retry user will redirect to wallet gateway and user should be logged in");
			navigateHome();
			waitTime(3000);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "Rent Now");
			waitTime(3000);
			if (checkElementDisplayed(PWAComboOfferPage.objBuySupermoonComboBtn, "Buy Premiun")) {
				JSClick(PWAComboOfferPage.objBuySupermoonComboBtn, "Buy Premiun CTA");
			} else if (checkElementDisplayed(PWAComboOfferPage.objUpgradeBtn, "Upgrade")) {
				JSClick(PWAComboOfferPage.objUpgradeBtn, "Upgrade CTA");
			} else {
				JSClick(PWAComboOfferPage.objRentContentBtn, "Rent content CTA");
			}
			waitTime(3000);

			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
			// verifyElementPresentAndClick(PWASubscriptionPages.objpaytmlink, "Paytm
			// link");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaytmProceedToPay, "Procced to pay");
			waitTime(5000);

			click(PWAHamburgerMenuPage.objgobackinpaytm, "Go back");
			if (verifyElementPresent(PWAHamburgerMenuPage.objcancelpaymentyes, "Cancel payment")) {
				click(PWAHamburgerMenuPage.objcancelpaymentyes, "Cancel payment");

			}
			click(PWAHamburgerMenuPage.objrentmovie, "rent movie");
			if (checkElementDisplayed(PWASubscriptionPages.objPaymentHighlighted, "Payment Section")) {
				logger.info("User should redirect to Wallet gateway with logged in state  , expected behaviour");
				extent.extentLogger("",
						"User should redirect to Wallet gateway with logged in state , expected behaviour");
			} else {
				logger.info("User not redirect to Wallet gateway with logged in state ");
				extent.extentLoggerFail("", "User not redirect to Wallet gateway with logged in state ");
			}
		}
	}

	public void PaymentPageWithin15seconds(String userType) throws Exception {
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"Verify whether on cancelling the payment user redirect to payment screen within 10-15 seconds on cellular network");

			waitTime(4000);
			if (checkElementDisplayed(PWAComboOfferPage.objZeeplexPopupCloseButton, "pop up")) {
				JSClick(PWAComboOfferPage.objZeeplexPopupCloseButton, "pop up close");
			}
			int requiredTime = 15000;
			navigateHome();
			waitTime(3000);
			navigateToAnyScreenOnWeb("ZEEPLEX");
			waitTime(3000);
			ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
			JSClick(PWAComboOfferPage.objRentNow, "Rent Now");
			waitTime(3000);
			if (checkElementDisplayed(PWAComboOfferPage.objBuySupermoonComboBtn, "Buy Premiun")) {
				JSClick(PWAComboOfferPage.objBuySupermoonComboBtn, "Buy Premiun CTA");
			} else if (checkElementDisplayed(PWAComboOfferPage.objUpgradeBtn, "Upgrade")) {
				JSClick(PWAComboOfferPage.objUpgradeBtn, "Upgrade CTA");
			} else {
				JSClick(PWAComboOfferPage.objRentContentBtn, "Rent content CTA");
			}
			waitTime(3000);
			PWAIframe();
			verifyElementPresentAndClick(PWASubscriptionPages.objWallets, "Wallets");
			verifyElementPresentAndClick(PWASubscriptionPages.objPaytmWallet, "Paytm");
			// verifyElementPresentAndClick(PWASubscriptionPages.objpaytmlink, "Paytm
			// link");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaytmProceedToPay, "Procced to pay");
			waitTime(5000);

			click(PWAHamburgerMenuPage.objgobackinpaytm, "Go back");
			if (verifyElementPresent(PWAHamburgerMenuPage.objcancelpaymentyes, "Cancel payment")) {
				click(PWAHamburgerMenuPage.objcancelpaymentyes, "Cancel payment");

			}

			JavascriptExecutor jse = (JavascriptExecutor) getWebDriver();
			long navigationStart = (long) jse.executeScript("return window.performance.timing.navigationStart");
			long responseStart = (long) jse.executeScript("return window.performance.timing.responseStart");
			long domComplete = (long) jse.executeScript("return window.performance.timing.domComplete");

			System.out.println(navigationStart);
			System.out.println(responseStart);
			System.out.println(domComplete);

			long backendPerformance_calc = responseStart - navigationStart;
			long frontendPerformance_calc = domComplete - responseStart;

			System.out.println("Back End:" + backendPerformance_calc);
			System.out.println("Front End:" + frontendPerformance_calc);

			if (frontendPerformance_calc <= requiredTime) {
				logger.info("user Should redirect to payment gateway with in 10 - 15 seconds, expected result");
				extent.extentLoggerPass("",
						"user Should redirect to payment gateway with in 10 - 15 seconds, expected result");
			} else {
				logger.info("user not redirect to payment gateway with in  15 seconds");
				extent.extentLoggerFail("", "user not redirect to payment gateway with in 15 seconds");
			}
			waitTime(4000);
			if (checkElementDisplayed(PWAComboOfferPage.objZeeplexPopupCloseButton, "pop up")) {
				JSClick(PWAComboOfferPage.objZeeplexPopupCloseButton, "pop up close");
			}
		}
	}

	public void VerifyExclusiveVodContentInRail(String userType) throws Exception {
		if (checkElementDisplayed(PWAComboOfferPage.objZeeplexPopupCloseButton, "pop up")) {
			JSClick(PWAComboOfferPage.objZeeplexPopupCloseButton, "pop up close");
		}
		extent.HeaderChildNode(
				"Verify whether Supermoon Exclusive VOD content is available via Related video rail/tray LiveTV consumption page ");
		navigateHome();
		navigateToAnyScreenOnWeb("ZEEPLEX");
		JSClick(PWAComboOfferPage.objSupermoonImgInZeeplex, "Supermoon");
		waitTime(2500);
		swipeTillTray(20, "Recommaned Tray", "Recommaned tray");
		if (verifyElementPresent(PWAComboOfferPage.objExclusiveVideos, "Exclusive videos")) {
			logger.info("Supermoon Exclusive VOD content should be available , expected result");
			extent.extentLoggerPass("", "Supermoon Exclusive VOD content should be available  , expected result");
		} else {
			logger.info("Supermoon Exclusive VOD content not available ");
			extent.extentLoggerFail("", "Supermoon Exclusive VOD content not available");
		}
	}

	public void EventNameInSearchResult(String userType, String LiveTvTVODContent) throws Exception {
		extent.HeaderChildNode(
				"Verify that Live TV TVOD or TVOD videos meta is displayed on searching the Live TV TVOD content");
		navigateHome();
		navigateToAnyScreenOnWeb("ZEEPLEX");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, LiveTvTVODContent, "Search Field");
		waitTime(3000);
		if (verifyElementPresent(PWAComboOfferPage.objVideoNameInSearch, "Video Name")) {
			logger.info("Meta should be displayed as Event name  , expected result");
			extent.extentLoggerPass("", "Meta should be displayed as Event name , expected result");
		} else {
			logger.info("Meta not displayed as Event name ");
			extent.extentLoggerFail("", "Meta not displayed as Event name ");
		}
	}

	public void VerifyTheComboOfferShouldNotDisplay(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Verify that supermoon content is not getting attached on purchasing premium plan or upgrading to premium plan");
			navigateHome();
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtnTopHeader, "Subscribe Button in the Header");
			waitTime(2000);
			verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription Page");
			if (checkElementExist(PWAComboOfferPage.objContentCard, "Content Thumbnail")
					&& checkElementExist(PWAComboOfferPage.objPremiumCard, "1 year Premium Thumbnail")) {
				logger.info(" Combo offer pack is attached");
				extent.extentLoggerFail(" ", " Combo offer pack is attached ");
			} else {
				logger.info("combo offer pack is not displayed ");
				extent.extentLoggerPass(" ", "combo offer pack is not displayed");
			}
		}
	}

	public void supermoonInfoInOnlyrent(String userType, String tabname) throws Exception {
		HeaderChildNode("Verify if the user can see the other plan Only Rent Content for INR 249 with information");
		navigateToAnyScreenOnWeb(tabname);
		waitTime(3500);
		ScrollToTheElementWEB(PWAComboOfferPage.objRentNow);
		JSClick(PWAComboOfferPage.objRentNow, "SuperMoon Rent Now");
		waitTime(3500);
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			verifyElementPresent(PWAComboOfferPage.objOnlyRentMovie, "Only Rent Content");
			verifyElementPresent(PWAComboOfferPage.objpackprice249, "Only Rent Content with INR 249");
			compareText(PWAComboOfferPage.objBottomOnlyRentMovie, "Supermoon Event Pass");
			compareText(PWAComboOfferPage.objbottomLiveEventTicket, "Online Live Concert");
			compareText(PWAComboOfferPage.objbottomExclusiveVideos, "Exclusive Videos");
		} else {
			compareText(PWAComboOfferPage.objLiveEventTicket, "Online Live Concert");
			compareText(PWAComboOfferPage.objExclusiveVideos, "Exclusive Videos");
			compareText(PWAComboOfferPage.objOnlyEventPass, "Only Event Pass");
			compareText(PWAComboOfferPage.objSupermoonEventPass, "Supermoon Event Pass");
			verifyElementPresent(PWAComboOfferPage.objpackprice199, "price 199");
		}
		click(PWAHomePage.objZeeLogo, "Zee logo");
		waitTime(2500);
	}

	public void playAndPauseForLiveTvTVODContentAnypacklessThan499withSupermoonActive(String userType)
			throws Exception {
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Verify Whether Play/Pause is displayed on player screen for LiveTV TVOD content");
//		navigateHome();
//		//AnypacklessThan499withSupermoonActive();
//		waitTime(2500);
//		click(PWAHomePage.objSearchBtn, "Seach button");
//		waitTime(2000);
//		type(PWASearchPage.objSearchEditBox, LiveTvTVODContent, "Search Field");
//		waitTime(3000);
//		JSClick(PWASearchPage.objFirstAssetImgSearchNavigationTab, LiveTvTVODContent);
//		waitTime(3000);
//		if(checkElementDisplayed(PWAComboOfferPage.objResumeCTA, "Resume In Payer")) {
//			JSClick(PWAComboOfferPage.objResumeCTA, "Resume CTA");
//			waitTime(10000);
//		}else {
//			JSClick(PWAComboOfferPage.objWatchNowCTAInPlayer, "Watch Now CTA");
//			waitTime(10000);
//		}
//		waitTime(2500);

			if (checkElementDisplayed(PWAPlayerPage.objAd, "Ad")) {
				waitTime(5500);
				waitForPlayerAdToComplete("Live TV AD");
				waitTime(5500);
			}

			mouseHover();

			if (verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause icon")) {
				waitTime(500);

				logger.info("user able to see Pause icon on player screen ");
				extent.extentLoggerPass("", "user able to see Pause icon on player screen ");

				JSClick(PWAPlayerPage.pauseBtn, "Pause icon");
			} else {
				logger.info("user is not able to see Pause icon on player screen ");
				extent.extentLoggerFail("", "user is not able to see Pause icon on player screen ");
			}
			if (verifyElementPresent(PWAPlayerPage.playBtn, "Play icon")) {
				waitTime(500);

				logger.info("user able to see Play icon on player screen ");
				extent.extentLoggerPass("", "user able to see Play icon on player screen ");

				JSClick(PWAPlayerPage.playBtn, "Play icon");
			} else {
				logger.info("user is not able to see Play icon on player screen ");
				extent.extentLoggerFail("", "user is not able to see Play icon on player screen ");
			}
		}
	}

	public void BeforeTV(String tabName) throws Exception {
		String TCID = null;
		extent.HeaderChildNode(
				"Verify whether user navigate to consumption page, when user click on before tv content.");
		navigateToAnyScreenOnWeb(tabName);
		checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");
		click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");

		waitTime(10000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}

		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0108";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0116";


		extent.HeaderChildNode(TCID+
				"Verify whether next available FREE content is playing, when user click on Skip on the player in consumption page.");
		waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
		waitForPlayerAdToComplete("Video Player");
		click(PWAPlayerPage.pauseBtn, "Pause button");
		click(PWAPlayerPage.maximizeBtn, "Maximize button");
		waitTime(2000);
		mouseHover();
		click(PWAPlayerPage.minimizeBtn, "Minimize button");
		waitTime(3000);
		if (checkElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize button")) {
			logger.info("Navigated to free content , expected behaviour");
			extent.extentLogger("Consumption Page", "Navigated to free content , expected behaviour");
		} else {
			logger.info("Not Navigated to free content");
			extent.extentLoggerFail("Consumption Page", "Not Navigated to free content ");
		}

		extent.HeaderChildNode(
				"Verify whether subscription message is displaying in player section , when no free content are avaiable.");
		verifyElementPresent(PWAHamburgerMenuPage.objsubscriptionlinkmessage, "Subscription Link ");


		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0102";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0110";

		extent.HeaderChildNode(TCID +
				"Verify user is able to play any preview content (\"Next episode spoiler\" rail content) from the Show detils page");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		String keyword = "Parru";
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(4000);
		// verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV
		// Shows"), "TV Shows Tab");
		waitTime(4000);
		click(PWASearchPage.objspecificSearch, "Searched content");

		scrollToElement(PWAHomePage.objFirstContentCardOfTray("Spolier"));
		checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Spolier"), "First Content Card Of Before TV Tray");
		click(PWAHomePage.objFirstContentCardOfTray("Spolier"), "First Content Card Of Before TV Tray");
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}
		// update
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0098";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0106";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0107";
		extent.HeaderChildNode(TCID+
				"Verify whether user is navigate to consumption page with News autoplaying when user tap on content in Listed collection");
		scrollToElement(PWAHomePage.objFirstContentCardOfTray("News"));
		checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("News"), "First Content Card Of Before TV Tray");
		click(PWAHomePage.objFirstContentCardOfTray("News"), "First Content Card Of Before TV Tray");
		click(PWAPlayerPage.pauseBtn, "Pause button");
		if (checkElementDisplayed(PWAPlayerPage.pauseBtn, "Pause button")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}
	}

	public void VideosPageValidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode(
				"Verify whether user is able to navigate Video landing page when user tap on Video from Categories listed in Home page and it is highlighted.");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode("Verify whether Hamburger menu overlay is displayed on clicking Hamburger menu icon");
		verifyElementPresent(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		click(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		click(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");

		extent.HeaderChildNode("Verify on Tap of 'Zee5' Logo user should navigate to homepage.");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		if (verifyElementPresent(PWAHomePage.objHomePage, "Home Page ")) {
			logger.info("Home Page is displayed ");
			extent.extentLogger("Home Page", "Home Page is displayed ");
		} else {
			logger.error("Home Page is not displayed ");
			extent.extentLoggerFail("Home Page", "Home Page is not displayed ");
		}

		extent.HeaderChildNode("Verify the trays displayed in the \"Video\" page.");
		verifyElementPresent(PWAHamburgerMenuPage.objTrayHeader, "Tray Header");

		extent.HeaderChildNode(
				"Verify the button (>) given at the end of the each tray to rotate the tray and its functioal");
		RotateTrayValidation();

		extent.HeaderChildNode("Verify the \" More\" option given on tray right side top and functionality of More");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "More Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.info("Navigated to More Page");
				extent.extentLogger("More", "Navigated to More Page");
			} else {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("More", "Not navigated to More Page");
			}
		}

		extent.HeaderChildNode(
				"Verify that on each content card after mouse hovor, play, share and add to watch list buttons are displayed");
		trayTitleAndContentValidationWithApiDataMovie(tabName, "Kids");

		extent.HeaderChildNode(
				"Verify collection description with show more arrow should be displayed by default in collection page. when user navigate to collection page by clicking \"More\"");
		collectionDescriptionShowArrowbutton(tabName);

		extent.HeaderChildNode("HLS_128 :Verify the right side bottom arrow ");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (verifyElementPresent(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}

		extent.HeaderChildNode(
				"Verify whether user is navigate to consumption page with content autoplaying when user tap on content in Listed collection");
		verifyElementPresent(PWAHamburgerMenuPage.objFreeContentCardFromTray, "Content card");
		click(PWAHamburgerMenuPage.objFreeContentCardFromTray, "Content card");
		waitForPlayerAdToComplete("Video Player");
		playerScrubTillMidWeb();
		if (verifyElementPresent(PWAPlayerPage.objPlayerScrubber, "Subber")) {
			logger.info("Content is autoplaying , expected behaviour");
			extent.extentLogger("Consumption Page", "Content is autoplaying , expected behaviour");
		} else {
			logger.error("Content is not autoplaying");
			extent.extentLoggerFail("Consumption page", "Content is not autoplaying");
		}

		extent.HeaderChildNode("Verify  premium and free content videos in landscape or fullscreen mode");
		verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize icon");
		click(PWAPlayerPage.maximizeBtn, "Maximize icon");

		verifyElementPresent(PWAPlayerPage.minimizeBtn, "Minimize button");
		JSClick(PWAPlayerPage.minimizeBtn, "Minimize button");

	}

	public void StoriesPageValidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode(
				"Verify whether user is able to navigate Video landing page when user tap on Video from Categories listed in Home page and it is highlighted.");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode("Verify whether Hamburger menu overlay is displayed on clicking Hamburger menu icon");
		verifyElementPresent(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		click(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		click(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");

		extent.HeaderChildNode("Verify on Tap of 'Zee5' Logo user should navigate to homepage.");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		if (verifyElementPresent(PWAHomePage.objHomePage, "Home Page ")) {
			logger.info("Home Page is displayed ");
			extent.extentLogger("Home Page", "Home Page is displayed ");
		} else {
			logger.error("Home Page is not displayed ");
			extent.extentLoggerFail("Home Page", "Home Page is not displayed ");
		}

		extent.HeaderChildNode("Trays and data load for 2 scrolls vertically");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode(
				"Verify whether stories option is Available in more menu overlay in the header for all the displaying languages.");
		Kannadalanguageselection();
		navigateToAnyScreenOnWeb("ಕಥೆಗಳು");
		EnglishLanguageselection();

		extent.HeaderChildNode(
				"Verify user navigate to respective article screen on taping on any content in stories page");
		verifyElementPresent(PWAHamburgerMenuPage.objstoriesCardTitle, "Stories Card Title");
		String StoriesCardTitle = getText(PWAHamburgerMenuPage.objstoriesCardTitle);
		System.out.println(StoriesCardTitle);
		click(PWAHamburgerMenuPage.objstoriesCardTitle, "Stories Card Title");
		waitTime(5000);
		verifyElementPresent(PWAHamburgerMenuPage.objstoriesTitle, "Stories  Title");
		String StoriesTitle = getText(PWAHamburgerMenuPage.objstoriesCardTitle);
		System.out.println(StoriesTitle);

		if (StoriesCardTitle.equals(StoriesTitle)) {
			logger.info("Navigate to respective article screen ");
			extent.extentLogger("Stories Page", "Navigate to respective article screen ");
		} else {
			logger.error(" Not Navigate to respective article screen");
			extent.extentLoggerFail("Stories Page", "Not Navigate to respective article screen ");
		}

		extent.HeaderChildNode(
				"Verify whether stories tray is displaying under episode rail in shows episodes consumption page.");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);
		type(PWASearchPage.objSearchEditBox, "Dadi Questions Kareena's Intentions", "Search bar");
		waitTime(3000);
		click(PWASearchPage.objspecificSearch, "Search Result");
		verifyElementPresent(PWAHamburgerMenuPage.objStoriesRail, "Stories rail");

		extent.HeaderChildNode("Verify \"Alt Balaji Erotic\" Contents are not  displayed in zee5 site");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);
		type(PWASearchPage.objSearchEditBox, "Alt Balaji Erotic", "Search bar");
		waitTime(3000);
		if (verifyElementPresent(PWASearchPage.objSpecificSearch1("Alt Balaji Erotic"), "Sepecific Search")) {
			logger.info("Alt Balaji Erotic search is displayed");
			extent.extentLoggerFail("Search Page", "Alt Balaji Erotic search is displayed");
		} else {
			logger.error(" Alt Balaji Erotic search is not displayed , expected result");
			extent.extentLoggerPass("Search Page", " Alt Balaji Erotic search is not displayed , expected result ");
		}

		extent.HeaderChildNode("Verify Stories rail is displayed in Show details page for web-series");
		navigateToAnyScreenOnWeb("Web Series");
		scrollToTheElementWEB(PWAHomePage.objFirstContentCardOfTray("ZEE5 Kannada Originals | First Episode Free"));
		click(PWAHomePage.objFirstContentCardOfTray("ZEE5 Kannada Originals | First Episode Free"), "Content card");
		if (verifyElementPresent(PWAHamburgerMenuPage.objWebSeriesStories, "Web Series Stories")) {
			logger.info("Webseries stories page is displayed ");
			extent.extentLogger("Web Series Page", "Webseries stories page is displayed  ");
		} else {
			logger.error(" Webseries stories page is not  displayed ");
			extent.extentLoggerFail("Web Series Page", "Webseries stories page is not displayed ");
		}

		extent.HeaderChildNode("Verify Stories rail is displayed in Show details page for TV-shows");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		String keyword = "Parru";
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(4000);
		// verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV
		// Shows"), "TV Shows Tab");
		waitTime(4000);
		click(PWASearchPage.objspecificSearch, "Searched content");
		waitTime(5000);
		scrollToElement(PWAHomePage.objFirstContentCardOfTray("Stories"));
		checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Stories"), "Stories Tray");

		// update
		extent.HeaderChildNode(
				"Verify screen is redirected to particular stories page post accessing the stories from show details page.");
		verifyElementPresent(PWAHamburgerMenuPage.objstoriesCardTitle, "Stories Card Title");
		String StoriesCardTitle1 = getText(PWAHamburgerMenuPage.objstoriesCardTitle);
		System.out.println(StoriesCardTitle1);
		click(PWAHamburgerMenuPage.objstoriesCardTitle, "Stories Card Title");
		switchToWindow(2);
		waitTime(5000);
		verifyElementPresent(PWAHamburgerMenuPage.objstoriesTitle, "Stories  Title");
		String StoriesTitle1 = getText(PWAHamburgerMenuPage.objstoriesCardTitle);
		System.out.println(StoriesTitle1);

		if (StoriesCardTitle1.equals(StoriesTitle1)) {
			logger.info("Navigate to respective article screen ");
			extent.extentLogger("Stories Page", "Navigate to respective article screen ");
		} else {
			logger.error(" Not Navigate to respective article screen");
			extent.extentLoggerFail("Stories Page", "Not Navigate to respective article screen ");
		}
		getWebDriver().close();
		switchToParentWindow();

		extent.HeaderChildNode("Verify whether stories rail is displaying in movies consumption page.");
		navigateHome();
		extent.HeaderChildNode("Verify Stories rail is displayed in Show details page for TV-shows");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		String keyword1 = "Radhe";
		type(PWASearchPage.objSearchEditBox, keyword1 + "\n", "Search Edit box: " + keyword1);
		waitTime(4000);
		// verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV
		// Shows"), "TV Shows Tab");
		waitTime(4000);
		click(PWASearchPage.objspecificSearch, "Searched content");
		waitTime(5000);
		scrollToElement(PWAHomePage.objFirstContentCardOfTray("Stories"));
		checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Stories"), "Stories Tray");

		extent.HeaderChildNode(
				"Verify whether right and left slider arrow are displaying ,when user mouse hover on stories rail.");
		Actions actions = new Actions(getWebDriver());
		WebElement menuOption = getWebDriver().findElement(PWALandingPages.objNextButtonInTray("Stories"));
		actions.moveToElement(menuOption).perform();
		System.out.println(StoriesTitle);
		click(PWALandingPages.objNextButtonInTray("Stories"), "Stories");
		String StoriesCardTitleNextArrow = getText(PWAHamburgerMenuPage.objAfterClickNextArrowStoriesTitle);
		System.out.println(StoriesCardTitleNextArrow);
		if (StoriesTitle.equals(StoriesCardTitleNextArrow)) {

			logger.error(" previous content are displayed ");
			extent.extentLoggerFail("Stories Page", "previous content are displayed");
		} else {

			logger.info("Next content are displayed , expected result ");
			extent.extentLogger("Stories Page", "Next content are displayed , expected result ");
		}

		extent.HeaderChildNode(
				"Verify Previous article content is displaying on click of Left slider arrow under stories rail.");
		Actions actions1 = new Actions(getWebDriver());
		WebElement menuOption1 = getWebDriver().findElement(PWALandingPages.objPreviousButtonInTray("Stories"));
		actions1.moveToElement(menuOption).perform();
		verifyElementPresent(PWALandingPages.objPreviousButtonInTray("Stories"), "Stories");
		click(PWALandingPages.objPreviousButtonInTray("Stories"), "Stories");
		if (StoriesTitle.equals(StoriesCardTitleNextArrow)) {

			logger.error(" Next content are displayed");
			extent.extentLoggerFail("Stories Page", "Next content are displayed");
		} else {

			logger.info("Previous content are displayed , expected result ");
			extent.extentLogger("Stories Page", "Previous content are displayed , expected result ");
		}

		extent.HeaderChildNode(
				"Verify whether publish date and min is displaying below each article under stories rail.");
		verifyElementPresent(PWAHamburgerMenuPage.objPublishDateAndMin, "Publish date And Min");

		extent.HeaderChildNode("Verify whether user navigate to respective blog page of respective story site.");
		verifyElementPresent(PWAHamburgerMenuPage.objstoriesCardTitle, "Stories Card Title");
		String StoriesCardTitle11 = getText(PWAHamburgerMenuPage.objstoriesCardTitle);
		System.out.println(StoriesCardTitle11);
		click(PWAHamburgerMenuPage.objstoriesCardTitle, "Stories Card Title");
		switchToWindow(3);
		waitTime(5000);
		verifyElementPresent(PWAHamburgerMenuPage.objstoriesTitle, "Stories  Title");
		String StoriesTitle11 = getText(PWAHamburgerMenuPage.objstoriesCardTitle);
		System.out.println(StoriesTitle11);

		if (StoriesCardTitle11.equals(StoriesTitle11)) {
			logger.info("Navigate to respective article screen ");
			extent.extentLogger("Stories Page", "Navigate to respective article screen ");
		} else {
			logger.error(" Not Navigate to respective article screen");
			extent.extentLoggerFail("Stories Page", "Not Navigate to respective article screen ");
		}
		getWebDriver().close();
		switchToParentWindow();

		extent.HeaderChildNode(
				"Verify title, description and image tags meta data of stories landing page, when user change display language.");
		Kannadalanguageselection();
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		waitTime(3000);
		String a = getText(PWAHamburgerMenuPage.objTitle);
		System.out.println(a);
		String b = a.split("<title>")[1].split("</title>")[0];
		System.out.println(b);
		logger.info("title content value : " + b);
		extent.extentLogger("", "title content value : " + b);
		navigateHome();
		EnglishLanguageselection();
	}

	public void ArticlesPageValidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("Verify the Article menu is available in header navigation menu under bento menu");
		navigateToAnyScreenOnWeb("Articles");

		extent.HeaderChildNode("Verify the Article menu is available in Hamburger menu");
		verifyElementPresent(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		click(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		if (verifyElementPresent(PWAHamburgerMenuPage.objExploreBtn, "Explore option")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objExploreBtn, "Explore option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("Articles"), "Premium option");
		}

		extent.HeaderChildNode("Verify the Article menu is available in Hamburger menu");
		if (verifyElementPresent(PWAHamburgerMenuPage.objstoriesCardTitle, "Stories Card Title")) {
			logger.info("Navigate to respective article screen ");
			extent.extentLogger("Stories Page", "Navigate to respective article screen ");
		} else {
			logger.error(" Not Navigate to respective article screen");
			extent.extentLoggerFail("Stories Page", "Not Navigate to respective article screen ");
		}

	}

	public void Trailer(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify overlay message 'You're watching a trailer' is displaying in the player window when Trailer is playing");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);
		type(PWASearchPage.objSearchEditBox, "Wanted", "Search bar");
		waitTime(3000);
		click(PWASearchPage.objspecificSearch, "Search Result");
		verifyElementPresent(PWAHamburgerMenuPage.objYourWatchingATrailer, "Trailer");

		extent.HeaderChildNode("Verify 'Watch Trailer' CTA is disabled when user is watching Trailer of the content");
		if (getWebDriver().findElement(PWAPremiumPage.objWatchTrailerBtn).isDisplayed() == true) {
			logger.info("'Watch Trailer' CTA is disabled,expected behaviour.");
			extent.extentLoggerPass("", "'Watch Trailer' CTA is disabled, expected behaviour.");
		} else {
			logger.info("'Watch Trailer' CTA is enabled");
			extent.extentLoggerFail(" ", "'Watch Trailer' CTA is enabled");

		}

		extent.HeaderChildNode(
				"Verify translated overlay message 'You're watching a trailer' for the respective language");
		String YourWatchingATrailer = getText(PWAHamburgerMenuPage.objYourWatchingATrailer);
		System.out.println(YourWatchingATrailer);
		Kannadalanguageselection();

		if (YourWatchingATrailer.equals("You're watching a trailer")) {
			logger.info("You're watching a trailer is not displayed based on display language ");
			extent.extentLoggerFail("", "You're watching a trailer is not displayed based on display language");
		} else {
			logger.info("You're watching a trailer is  displayed based on display language, expected behaviour");
			extent.extentLoggerPass(" ",
					"You're watching a trailer is  displayed based on display language, expected behaviour");
		}

		EnglishLanguageselection();
		waitTime(5000);

		if (userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode("Verify login message “You need to login to view this content.“ is displaying");
			waitForElement(PWAHamburgerMenuPage.objAdultmessage, 20, "Adult Message");
			verifyElementPresent(PWAHamburgerMenuPage.objAdultmessage, "Adult Message");

			extent.HeaderChildNode(
					"Verify whether \"You need Premium membership to watch this video\" Message is displaying in player sceen, when user click on premium Content.");
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);
			type(PWASearchPage.objSearchEditBox, "Ondh Kathe Hella", "Search bar");
			waitTime(3000);
			click(PWASearchPage.objspecificSearch, "Search Result");
			waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
			verifyElementPresent(PWASubscriptionPages.objPremiumText, "To Watch this Premium Content - Text");

			extent.HeaderChildNode(
					"Verify whether messages,links and cta's are displaying in respective language, when user change the display language.");
			Kannadalanguageselection();
			waitForElement(PWAHamburgerMenuPage.objsubscriptionlinkmessage, 20, "Subscription inline");
			verifyElementPresent(PWAHamburgerMenuPage.objsubscriptionlinkmessage, "Subscription inline");
			verifyElementPresent(PWAHamburgerMenuPage.objSubscriptionButton, "Subscription Button");
			waitTime(5000);
			EnglishLanguageselection();

			extent.HeaderChildNode(
					"Verify the inline message content displayed on player: To watch this premium content text , Get Premium CTA , Skip hyperlink, Are u Zee5 subscriber?, Login hyperlink");
			waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
			verifyElementPresent(PWASubscriptionPages.objPremiumText, "To Watch this Premium Content - Text");
			verifyElementPresent(PWAHamburgerMenuPage.objSubscriptionButton, "Subscription Button");
			waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
			verifyElementPresent(PWASubscriptionPages.objSkipLink, "Skip Link");
			waitForElement(PWASubscriptionPages.objExistUserText, 20, "Are you a Zee5 Subscriber? - Text");
			verifyElementPresent(PWASubscriptionPages.objExistUserText, "Are you a Zee5 Subscriber? - Text");
			verifyElementPresent(PWASubscriptionPages.objLoginLink, "Login Link");

			extent.HeaderChildNode(
					"Verify whether user navigated to subscription page when user clicks on \"Get premium\" CTA");
			verifyElementPresent(PWAHamburgerMenuPage.objSubscriptionButton, "Subscription Button");
			click(PWAHamburgerMenuPage.objSubscriptionButton, "Subscription Button");
			waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Navigated to Subscription page")) {
				logger.info("Navigate to Subscription page , expected behaviour");
				extent.extentLoggerPass("", "Navigate to Subscription page , expected behaviour");
			} else {
				logger.info("Not Navigate to Subscription page");
				extent.extentLoggerFail(" ", "Not Navigate to Subscription page");
			}

			extent.HeaderChildNode("Verify whether next available content start playing When user Click on SKIP");
			verifyElementPresent(PWASubscriptionPages.objSkipLink, "Skip Link");
			click(PWASubscriptionPages.objSkipLink, "Skip Link");
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("Navigated to Consumption Page");
				extent.extentLogger("Consumption Page", "User is navigated to Consumption Page");
			} else {
				logger.info("Not navigated to Consumption Page");
				extent.extentLogger("Consumption Page", "User is not navigated to Consumption Page");
			}
		}
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify whether \"You need Premium membership to watch this video\" Message is displaying in player sceen, when user click on premium Content.");
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);
			type(PWASearchPage.objSearchEditBox, "Ondh Kathe Hella", "Search bar");
			waitTime(3000);
			click(PWASearchPage.objspecificSearch, "Search Result");
			waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
			verifyElementPresent(PWASubscriptionPages.objPremiumText, "To Watch this Premium Content - Text");

			extent.HeaderChildNode(
					"Verify whether messages,links and cta's are displaying in respective language, when user change the display language.");
			Kannadalanguageselection();
			waitForElement(PWAHamburgerMenuPage.objsubscriptionlinkmessage, 20, "Subscription inline");
			verifyElementPresent(PWAHamburgerMenuPage.objsubscriptionlinkmessage, "Subscription inline");
			verifyElementPresent(PWAHamburgerMenuPage.objSubscriptionButton, "Subscription Button");
			waitTime(5000);
			EnglishLanguageselection();

			extent.HeaderChildNode(
					"Verify the inline message content displayed on player: To watch this premium content text , Get Premium CTA , Skip hyperlink, Are u Zee5 subscriber?, Login hyperlink");
			waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
			verifyElementPresent(PWASubscriptionPages.objPremiumText, "To Watch this Premium Content - Text");
			verifyElementPresent(PWAHamburgerMenuPage.objSubscriptionButton, "Subscription Button");
			waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
			verifyElementPresent(PWASubscriptionPages.objSkipLink, "Skip Link");
			waitForElement(PWASubscriptionPages.objExistUserText, 20, "Are you a Zee5 Subscriber? - Text");
			verifyElementPresent(PWASubscriptionPages.objExistUserText, "Are you a Zee5 Subscriber? - Text");

			extent.HeaderChildNode(
					"Verify whether user navigated to subscription page when user clicks on \"Get premium\" CTA");
			verifyElementPresent(PWAHamburgerMenuPage.objSubscriptionButton, "Subscription Button");
			click(PWAHamburgerMenuPage.objSubscriptionButton, "Subscription Button");
			waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Navigated to Subscription page")) {
				logger.info("Navigate to Subscription page , expected behaviour");
				extent.extentLoggerPass("", "Navigate to Subscription page , expected behaviour");
			} else {
				logger.info("Not Navigate to Subscription page");
				extent.extentLoggerFail(" ", "Not Navigate to Subscription page");
			}

			extent.HeaderChildNode("Verify whether next available content start playing When user Click on SKIP");
			verifyElementPresent(PWASubscriptionPages.objSkipLink, "Skip Link");
			click(PWASubscriptionPages.objSkipLink, "Skip Link");
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("Navigated to Consumption Page");
				extent.extentLogger("Consumption Page", "User is navigated to Consumption Page");
			} else {
				logger.info("Not navigated to Consumption Page");
				extent.extentLogger("Consumption Page", "User is not navigated to Consumption Page");
			}

		}
	}

	public void ToolTipValidation(String userType) throws Exception {
		extent.HeaderChildNode("Verify whether tool tip displayed for play/pause, Forward &Rewind 10s");
		navigateToAnyScreenOnWeb("Movies");
		scrollToTheElementWEB(PWAHomePage.objFirstContentCardOfTray("Only On ZEE5"));
		checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Only On ZEE5"),
				"First Content Card Of Before TV Tray");
		click(PWAHomePage.objFirstContentCardOfTray("Only On ZEE5"), "First Content Card Of Before TV Tray");
		verifyElementPresent(PWAHamburgerMenuPage.objTooltipForWeb("Pause"), "Pause ToolTip");
		verifyElementPresent(PWAHamburgerMenuPage.objTooltipForWeb("Play"), "Play ToolTip");
		verifyElementPresent(PWAHamburgerMenuPage.objTooltipForWeb("Seek forward"), "Forword ToolTip");
		verifyElementPresent(PWAHamburgerMenuPage.objTooltipForWeb("Seek backwards"), "Backwards ToolTip");

		extent.HeaderChildNode(
				"Verify whether tool tip displayed for Volume, Subtitle, setting, Full screen, exit full screen,");
		verifyElementPresent(PWAHamburgerMenuPage.objTooltipForWeb("Mute"), "Play ToolTip");
		verifyElementPresent(PWAHamburgerMenuPage.objTooltipForWeb("Fullscreen"), "Fullscreen ToolTip");
		checkElementDisplayed(PWAPlayerPage.maximizeBtn, "Maximize icon");
		click(PWAPlayerPage.maximizeBtn, "Maximize icon");

		waitTime(5000);
		verifyElementPresent(PWAHamburgerMenuPage.objTooltipForWeb("Exit Fullscreen"), "Exit Fullscreen ToolTip");

	}

	public void AutoPlayNotHappen(String Tabname) {
		extent.HeaderChildNode(" Verify The carousels are not Auto play in " + Tabname + "landing pages.");
		boolean autoplayingItemsPresent = false;
		boolean autoPlayed = false;
		int autoplayItem = 0;
		// String languageSmallText = allSelectedLanguages();
		Response tabResponse = ResponseInstance.getResponseForPages(Tabname.toLowerCase(), "en,hi,kn");
		int carouselItemsCount = tabResponse.jsonPath().get("buckets[0].items.size()");
		System.out.println(carouselItemsCount);
		if (carouselItemsCount > 7)
			carouselItemsCount = 7;
		for (int i = 0; i < carouselItemsCount; i++) {
			try {
				System.out.println(tabResponse.jsonPath().get("buckets[0].items[" + i + "].tags[0]").toString()
						.equals("Autoplay"));
				if (tabResponse.jsonPath().get("buckets[0].items[" + i + "].tags[0]").toString().equals("Autoplay")) {
					System.out.println("hello");
					autoplayItem = i;
					autoplayingItemsPresent = true;
					break;
				}
			} catch (Exception e) {
			}
		}
		if (autoplayingItemsPresent == false) {
			logger.info(" Autoplaying is not happening in Carousel Items , expected result");
			extent.extentLoggerPass("Autoplay", "Autoplaying is not happening in Carousel Items , expected result");
		} else {
			logger.info("As per PWA2-7315 AutoPlaying Carousel removed");
			extent.extentLoggerWarning("", "As per PWA2-7315 AutoPlaying Carousel removed");
		}
	}

	public void searchActor(String title) throws Exception {
		HeaderChildNode("Validating that search result displayed when user search for episode");
		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		if (!checkElementDisplayed(PWASearchPage.objVoiceSearchButton, "Mic")) {
			logger.info("Voice search icon is not present while search result is present");
			extent.extentLogger("Mic", "Voice search icon is not present while search result is present");
		}
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Movies"), "Movies Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		clearField(PWASearchPage.objSearchEditBox, "Search field");
	}

	public void searchEDRContent(String title) throws Exception {
		HeaderChildNode("Validating that search result displayed when user search for episode");
		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
		if (!checkElementDisplayed(PWASearchPage.objVoiceSearchButton, "Mic")) {
			logger.info("Voice search icon is not present while search result is present");
			extent.extentLogger("Mic", "Voice search icon is not present while search result is present");
		}
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");

		clearField(PWASearchPage.objSearchEditBox, "Search field");
	}

	public void PWA2_8779_ParentalControlChanges(String userType) throws Exception {
		extent.HeaderChildNode("\"More Settings\" option in Hamburger menu should not be displayed");
		logger.info("\"More Settings\" option in Hamburger menu should not be displayed");
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		waitTime(2000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objMoreSettingInHamburger, "More Settings option")) {
			logger.error("Parental Control option is displayed for guest user unexpectedly");
			extent.extentLoggerFail("", "Parental Control option is displayed for guest user unexpectedly");
		} else {
			logger.info("More Settings option not displayed, Expected behavior");
			extent.extentLogger("", "More Settings option not displayed, Expected behavior");
		}
		verifyElementPresent(PWAHamburgerMenuPage.objResetToDefaultHamburgerMenu, "Reset settings to default");
		if (userType.equals("Guest")) {
			extent.HeaderChildNode("Parental Control option is not displayed to Guest users");
			logger.info("Parental Control option is not displayed to Guest users");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objParentalControl, "Parental Control option")) {
				logger.error("Parental Control option is displayed for guest user unexpectedly");
				extent.extentLoggerFail("", "Parental Control option is displayed for guest user unexpectedly");
			} else {
				logger.info("Parental Control option is not displayed for guest user, expected behavior");
				extent.extentLogger("", "Parental Control option is not displayed for guest user, expected behavior");
			}
		}
		if (!userType.equals("Guest")) {
			extent.HeaderChildNode("The Parental Control setting screen is displaying the options as per the list");
			logger.info("The Parental Control setting screen is displaying the options as per the list");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "Parental Control option");
			checkElementDisplayed(PWALoginPage.objPasswordField, "Password field");
			String password = "";
			if (userType.equals("NonSubscribedUser")) {
				password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
						.getParameter("NonsubscribedPassword");
			} else if (userType.equals("SubscribedUser")) {
				password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
						.getParameter("SubscribedPassword");
			}
			type(PWALoginPage.objPasswordField, password, "Password field");
			click(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
			waitTime(2000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page")) {
				verifyElementPresent(PWAHamburgerMenuPage.objParentalControlOption("No Restrictions"),
						"\"No Restrictions\" option");
				verifyElementPresent(PWAHamburgerMenuPage.objParentalControlOption("Restrict 18+ Content"),
						"\"Restrict 18+ Content\" option");
				verifyElementPresent(PWAHamburgerMenuPage.objParentalControlOption("Restrict 16+ Content"),
						"\"Restrict 16+ Content\" option");
				verifyElementPresent(PWAHamburgerMenuPage.objParentalControlOption("Restrict 13+ Content"),
						"\"Restrict 13+ Content\" option");
				verifyElementPresent(PWAHamburgerMenuPage.objParentalControlOption("Restrict 7+ Content"),
						"\"Restrict 7+ Content\" option");
				verifyElementPresent(PWAHamburgerMenuPage.objParentalControlOption("Restrict All Content"),
						"\"Restrict All Content\" option");
			} else {
				logger.error("Parent control page failed to display");
				extent.extentLoggerFail("", "Parent control page failed to display");
			}
			String contentU = "Aah";
			String contentUMeta = "1953";
			String contentUType = "Movies";
			String content7Plus = "Pareeksha";
			String content7PlusMeta = "Based on True Events";
			String content7PlusType = "Movies";
			String content13Plus = "Cheeni Kum";
			String content13PlusMeta = "Rom Com";
			String content13PlusType = "Movies";
			String content16Plus = "Soneya Ve - Hello Charlie | Aadar Jain & Shlokka Pandit | Kanika Kapoor, Jasbir Jassi & Kumaar";
			String content16PlusMeta = "Music";
			String content16PlusType = "Music";
			String content18Plus = "Duniya Gol Hai, Har Paap Ka Double Role Hai";
			String content18PlusMeta = "Hindi";
			String content18PlusType = "Episodes";

			extent.HeaderChildNode("Change to setting: Restrict All Content");
			logger.info("Change to setting: Restrict All Content");
			changeParentalControl("Restrict All Content");
			extent.HeaderChildNode("Restrict All Content setting: Test for U Content");
			logger.info("Restrict All Content setting: Test for U Content");
			verifyParentalControl(true, contentU, contentUMeta, contentUType);
			extent.HeaderChildNode("Restrict All Content setting: Test for 7+ Content");
			logger.info("Restrict All Content setting: Test for 7+ Content");
			verifyParentalControl(true, content7Plus, content7PlusMeta, content7PlusType);
			extent.HeaderChildNode("Restrict All Content setting: Test for 13+ Content");
			logger.info("Restrict All Content setting: Test for 13+ Content");
			verifyParentalControl(true, content13Plus, content13PlusMeta, content13PlusType);
			extent.HeaderChildNode("Restrict All Content setting: Test for 16+ Content");
			logger.info("Restrict All Content setting: Test for 16+ Content");
			verifyParentalControl(true, content16Plus, content16PlusMeta, content16PlusType);
			extent.HeaderChildNode("Restrict All Content setting: Test for 18+ Content");
			logger.info("Restrict All Content setting: Test for 18+ Content");
			verifyParentalControl(true, content18Plus, content18PlusMeta, content18PlusType);

			extent.HeaderChildNode("Change to setting: Restrict 7+ Content");
			logger.info("Change to setting: Restrict 7+ Content");
			changeParentalControl("Restrict 7+ Content");
			extent.HeaderChildNode("Restrict 7+ Content setting: Test for U Content");
			logger.info("Restrict 7+ Content setting: Test for U Content");
			verifyParentalControl(false, contentU, contentUMeta, contentUType);
			extent.HeaderChildNode("Restrict 7+ Content setting: Test for 7+ Content");
			logger.info("Restrict 7+ Content setting: Test for 7+ Content");
			verifyParentalControl(true, content7Plus, content7PlusMeta, content7PlusType);
			extent.HeaderChildNode("Restrict 7+ Content setting: Test for 13+ Content");
			logger.info("Restrict 7+ Content setting: Test for 13+ Content");
			verifyParentalControl(true, content13Plus, content13PlusMeta, content13PlusType);
			extent.HeaderChildNode("Restrict 7+ Content setting: Test for 16+ Content");
			logger.info("Restrict 7+ Content setting: Test for 16+ Content");
			verifyParentalControl(true, content16Plus, content16PlusMeta, content16PlusType);
			extent.HeaderChildNode("Restrict 7+ Content setting: Test for 18+ Content");
			logger.info("Restrict 7+ Content setting: Test for 18+ Content");
			verifyParentalControl(true, content18Plus, content18PlusMeta, content18PlusType);

			extent.HeaderChildNode("Change to setting: Restrict 13+ Content");
			logger.info("Change to setting: Restrict 13+ Content");
			changeParentalControl("Restrict 13+ Content");
			extent.HeaderChildNode("Restrict 13+ Content setting: Test for U Content");
			logger.info("Restrict 13+ Content setting: Test for U Content");
			verifyParentalControl(false, contentU, contentUMeta, contentUType);
			extent.HeaderChildNode("Restrict 13+ Content setting: Test for 7+ Content");
			logger.info("Restrict 13+ Content setting: Test for 7+ Content");
			verifyParentalControl(false, content7Plus, content7PlusMeta, content7PlusType);
			extent.HeaderChildNode("Restrict 13+ Content setting: Test for 13+ Content");
			logger.info("Restrict 13+ Content setting: Test for 13+ Content");
			verifyParentalControl(true, content13Plus, content13PlusMeta, content13PlusType);
			extent.HeaderChildNode("Restrict 13+ Content setting: Test for 16+ Content");
			logger.info("Restrict 13+ Content setting: Test for 16+ Content");
			verifyParentalControl(true, content16Plus, content16PlusMeta, content16PlusType);
			extent.HeaderChildNode("Restrict 13+ Content setting: Test for 18+ Content");
			logger.info("Restrict 13+ Content setting: Test for 18+ Content");
			verifyParentalControl(true, content18Plus, content18PlusMeta, content18PlusType);

			extent.HeaderChildNode("Change to setting: Restrict 16+ Content");
			logger.info("Change to setting: Restrict 16+ Content");
			changeParentalControl("Restrict 16+ Content");
			extent.HeaderChildNode("Restrict 16+ Content setting: Test for U Content");
			logger.info("Restrict 16+ Content setting: Test for U Content");
			verifyParentalControl(false, contentU, contentUMeta, contentUType);
			extent.HeaderChildNode("Restrict 16+ Content setting: Test for 7+ Content");
			logger.info("Restrict 16+ Content setting: Test for 7+ Content");
			verifyParentalControl(false, content7Plus, content7PlusMeta, content7PlusType);
			extent.HeaderChildNode("Restrict 16+ Content setting: Test for 13+ Content");
			logger.info("Restrict 16+ Content setting: Test for 13+ Content");
			verifyParentalControl(false, content13Plus, content13PlusMeta, content13PlusType);
			extent.HeaderChildNode("Restrict 16+ Content setting: Test for 16+ Content");
			logger.info("Restrict 16+ Content setting: Test for 16+ Content");
			verifyParentalControl(true, content16Plus, content16PlusMeta, content16PlusType);
			extent.HeaderChildNode("Restrict 16+ Content setting: Test for 18+ Content");
			logger.info("Restrict 16+ Content setting: Test for 18+ Content");
			verifyParentalControl(true, content18Plus, content18PlusMeta, content18PlusType);

			extent.HeaderChildNode("Change to setting: Restrict 18+ Content");
			logger.info("Change to setting: Restrict 18+ Content");
			changeParentalControl("Restrict 18+ Content");
			extent.HeaderChildNode("Restrict 18+ Content setting: Test for U Content");
			logger.info("Restrict 18+ Content setting: Test for U Content");
			verifyParentalControl(false, contentU, contentUMeta, contentUType);
			extent.HeaderChildNode("Restrict 18+ Content setting: Test for 7+ Content");
			logger.info("Restrict 18+ Content setting: Test for 7+ Content");
			verifyParentalControl(false, content7Plus, content7PlusMeta, content7PlusType);
			extent.HeaderChildNode("Restrict 18+ Content setting: Test for 13+ Content");
			logger.info("Restrict 18+ Content setting: Test for 13+ Content");
			verifyParentalControl(false, content13Plus, content13PlusMeta, content13PlusType);
			extent.HeaderChildNode("Restrict 18+ Content setting: Test for 16+ Content");
			logger.info("Restrict 18+ Content setting: Test for 16+ Content");
			verifyParentalControl(false, content16Plus, content16PlusMeta, content16PlusType);
			extent.HeaderChildNode("Restrict 18+ Content setting: Test for 18+ Content");
			logger.info("Restrict 18+ Content setting: Test for 18+ Content");
			verifyParentalControl(true, content18Plus, content18PlusMeta, content18PlusType);

			extent.HeaderChildNode("Change to setting: No Restrictions");
			logger.info("Change to setting: No Restrictions");
			changeParentalControl("No Restrictions");
			extent.HeaderChildNode("No Restrictions setting: Test for U Content");
			logger.info("No Restrictions setting: Test for U Content");
			verifyParentalControl(false, contentU, contentUMeta, contentUType);
			extent.HeaderChildNode("No Restrictions setting: Test for 7+ Content");
			logger.info("No Restrictions setting: Test for 7+ Content");
			verifyParentalControl(false, content7Plus, content7PlusMeta, content7PlusType);
			extent.HeaderChildNode("No Restrictions setting: Test for 13+ Content");
			logger.info("No Restrictions setting: Test for 13+ Content");
			verifyParentalControl(false, content13Plus, content13PlusMeta, content13PlusType);
			extent.HeaderChildNode("No Restrictions setting: Test for 16+ Content");
			logger.info("No Restrictions setting: Test for 16+ Content");
			verifyParentalControl(false, content16Plus, content16PlusMeta, content16PlusType);
			extent.HeaderChildNode("No Restrictions setting: Test for 18+ Content");
			logger.info("No Restrictions setting: Test for 18+ Content");
			verifyParentalControl(false, content18Plus, content18PlusMeta, content18PlusType);
		}
	}

	public void verifyParentalControl(boolean controlPopupMustDisplay, String keyword, String keywordMeta,
			String keywordType) throws Exception {
		click(PWAHomePage.objSearchBtn, "Search button");
		checkElementDisplayed(PWAHomePage.objSearchField, "Search field");
		type(PWAHomePage.objSearchField, keyword, "Search");
		waitTime(4000);
		click(PWASearchPage.objSearchNavigationTab(keywordType), keywordType + " tab");
		JSClick(PWASearchPage.objSearchResultTxt(keyword, keywordMeta), "Search content");
		waitTime(4000);
		if (controlPopupMustDisplay == true) {
			if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPopUpInPlayer, "Parent control Popup")) {
				type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
			}
		} else {
			try {
				getWebDriver().findElement(PWAHamburgerMenuPage.objParentalLockPopUpInPlayer);
				logger.error("Parent control pop up is displayed unexpectedly");
				extent.extentLoggerFail("", "Parent control pop up is displayed unexpectedly");
			} catch (Exception e) {
				logger.info("Parent control pop up is not displayed, expected behavior");
				extent.extentLogger("", "Parent control pop up is not displayed, expected behavior");
			}
		}
		waitTime(5000);
	}

	public void changeParentalControl(String option) throws Exception {
		navigateToHome();
		click(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		click(PWAHamburgerMenuPage.objParentalControl, "Parental Control option");
		checkElementDisplayed(PWALoginPage.objPasswordField, "Password field");
		String password = "";
		if (userType.equals("NonSubscribedUser")) {
			password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("NonsubscribedPassword");
		} else if (userType.equals("SubscribedUser")) {
			password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
					.getParameter("SubscribedPassword");
		}
		type(PWALoginPage.objPasswordField, password, "Password field");
		click(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
		click(PWAHamburgerMenuPage.objParentalControlOption(option), "\"" + option + "\" option");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objParentalLockPin1, "Set Lock Field")) {
			click(PWAHamburgerMenuPage.objRentForINRbutton, "Set Lock Field");
			type(PWAHamburgerMenuPage.objParentalLockPin1, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin2, "2", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin3, "3", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin4, "4", "ParentalLockPin");
			waitTime(4000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objSetParentalLockButton, "Set Parental lock button");
		} else
			click(PWAHamburgerMenuPage.objRentForINRbutton, "Continue button");
		waitTime(2000);
		checkElementDisplayed(PWAHomePage.objZeeLogo, "Zee Logo");
		waitTime(3000);
	}

	public void PWA2_9609_zeeplexTitle(String userType) throws Exception {
		extent.HeaderChildNode("PWA2_9609 - Hygiene Activity - ZEEPLEX Page Title Need Correction");
		logger.info("PWA2_9609 - Hygiene Activity - ZEEPLEX Page Title Need Correction");
		navigateToHome();
		navigateToAnyScreenOnWeb("ZEEPLEX");
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		logger.info("Navigated to url: " + url);
		extent.extentLogger("", "Navigated to url: " + url);
		waitTime(3000);
		String title = getElementPropertyToString("innerText", PWAHomePage.objTitle, "Title");
		title = title.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(title);
		if (title.equals("Rent Movie & Watch Before Theatre On ZEEPLEX A Premium Video On Demand Service")) {
			logger.info("Expected title: " + title);
			extent.extentLogger("", "Expected title: " + title);
		} else {
			logger.error("Incorrect title displayed: " + title);
			extent.extentLoggerFail("", "Incorrect title displayed: " + title);
		}
	}

	public void PWA2_10111_liveTVMeta(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-10111 Live TV Page - Title");
		logger.info("PWA2-10111 Live TV Page - Title");
		navigateToHome();
		navigateToAnyScreenOnWeb("Live TV");
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		logger.info("Navigated to url: " + url);
		extent.extentLogger("", "Navigated to url: " + url);
		waitTime(3000);
		String title = getElementPropertyToString("innerText", PWAHomePage.objTitle, "Title");
		title = title.replace("&amp;", "&").replace("&#x27;", "'");
		title = title.split("</title>")[0].split("<title")[1].split(">")[1];
		System.out.println(title);
		String expectedTitle = "Watch 90+ Live TV Channels Streaming Online in HD on ZEE5";
		logger.info("Expected Title: " + expectedTitle);
		extent.extentLogger("", "Expected Title: " + expectedTitle);
		logger.info("Actual Title: " + title);
		extent.extentLogger("", "Actual Title: " + title);
		if (title.equals(expectedTitle)) {
			logger.info("Expected and Actual title match");
			extent.extentLogger("", "Expected and Actual title match");
		} else {
			logger.error("Expected and Actual title mismatch");
			extent.extentLoggerFail("", "Expected and Actual title mismatch");
		}

		extent.HeaderChildNode("PWA2-10111 Live TV Page - Description");
		logger.info("PWA2-10111 Live TV Page - Description");
		String description = getElementPropertyToString("innerText", PWAHomePage.objSourceDescription, "Description");
		description = description.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(description);
		String expectedDescription = "Enjoy 90+ Live TV channels online only on ZEE5 in HD. With ZEE5, watch your favourite TV shows, news, movies & entertainment videos live in Hindi, English other regional languages.";
		logger.info("Expected Description: " + expectedDescription);
		extent.extentLogger("", "Expected Description: " + expectedDescription);
		logger.info("Actual Description: " + description);
		extent.extentLogger("", "Actual Description: " + description);
		if (description.equals(expectedDescription)) {
			logger.info("Expected and Actual description match");
			extent.extentLogger("", "Expected and Actual description match");
		} else {
			logger.error("Expected and Actual description mismatch");
			extent.extentLoggerFail("", "Expected and Actual description mismatch");
		}

		extent.HeaderChildNode("PWA2-10111 Live TV Page - OG Title");
		logger.info("PWA2-10111 Live TV Page - OG Title");
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objOgTitle, "OG Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogtitle);
		String expectedOgtitle = "Watch 90+ Live TV Channels Streaming Online in HD on ZEE5";
		logger.info("Expected OG Title: " + expectedOgtitle);
		extent.extentLogger("", "Expected OG Title: " + expectedOgtitle);
		logger.info("Actual OG Title: " + ogtitle);
		extent.extentLogger("", "Actual OG Title: " + ogtitle);
		if (ogtitle.equals(expectedOgtitle)) {
			logger.info("Expected and Actual OG Title match");
			extent.extentLogger("", "Expected and Actual OG Title match");
		} else {
			logger.error("Expected and Actual OG Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10111 Live TV Page - OG Description");
		logger.info("PWA2-10111 Live TV Page - OG Description");
		String ogdesc = getElementPropertyToString("innerText", PWAHomePage.objOgDesc, "OG Description");
		ogdesc = ogdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogdesc);
		String expectedOgdescription = "Enjoy 90+ Live TV channels online only on ZEE5 in HD. With ZEE5, watch your favourite TV shows, news, movies & entertainment videos live in Hindi, English other regional languages.";
		logger.info("Expected OG Description: " + expectedOgdescription);
		extent.extentLogger("", "Expected OG Description: " + expectedOgdescription);
		logger.info("Actual OG Description: " + ogdesc);
		extent.extentLogger("", "Actual OG Description: " + ogdesc);
		if (ogdesc.equals(expectedOgdescription)) {
			logger.info("Expected and Actual OG Description match");
			extent.extentLogger("", "Expected and Actual OG Description match");
		} else {
			logger.error("Expected and Actual OG Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Description mismatch");
		}

		extent.HeaderChildNode("PWA2-10111 Live TV Page - Twitter Title");
		logger.info("PWA2-10111 Live TV Page - Twitter Title");
		String twittertitle = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgTitle, "Twitter Title");
		twittertitle = twittertitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twittertitle);
		String expectedtwitterTitle = "Watch 90+ Live TV Channels Streaming Online in HD on ZEE5";
		logger.info("Expected Twitter Title: " + expectedtwitterTitle);
		extent.extentLogger("", "Expected Twitter Title: " + expectedtwitterTitle);
		logger.info("Actual Twitter Title: " + twittertitle);
		extent.extentLogger("", "Actual Twitter Title: " + twittertitle);
		if (twittertitle.equals(expectedtwitterTitle)) {
			logger.info("Expected and Actual Twitter Title match");
			extent.extentLogger("", "Expected and Actual Twitter Title match");
		} else {
			logger.error("Expected and Actual Twitter Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10111 Live TV Page - Twitter Description");
		logger.info("PWA2-10111 Live TV Page - Twitter Description");
		String twitterdesc = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgDesc, "Twitter Title");
		twitterdesc = twitterdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twitterdesc);
		String expectedtwitterDesc = "Enjoy 90+ Live TV channels online only on ZEE5 in HD. With ZEE5, watch your favourite TV shows, news, movies & entertainment videos live in Hindi, English other regional languages.";
		logger.info("Expected Twitter Description: " + expectedtwitterDesc);
		extent.extentLogger("", "Expected Twitter Description: " + expectedtwitterDesc);
		logger.info("Actual Twitter Description: " + twitterdesc);
		extent.extentLogger("", "Actual Twitter Description: " + twitterdesc);
		if (twitterdesc.equals(expectedtwitterDesc)) {
			logger.info("Expected and Actual Twitter Description match");
			extent.extentLogger("", "Expected and Actual Twitter Description match");
		} else {
			logger.error("Expected and Actual Twitter Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Description mismatch");
		}

	}

	public void PWA2_10111_channelsMeta(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-10111 Channels Page - Title");
		logger.info("PWA2-10111 Channels Page - Title");
		navigateToHome();
		String home = getParameterFromXML("url");
		String channelUrl = home + "channels/details/aaj-tak/0-9-aajtak";
		String channel = "Aaj Tak";
		getWebDriver().get(channelUrl);
		logger.info("Navigated to url: " + channelUrl);
		extent.extentLogger("", "Navigated to url: " + channelUrl);
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		logger.info("Navigated to url: " + url);
		extent.extentLogger("", "Navigated to url: " + url);
		waitTime(3000);
		String title = getElementPropertyToString("innerText", PWAHomePage.objTitle, "Title");
		title = title.replace("&amp;", "&").replace("&#x27;", "'");
		title = title.split("</title>")[0].split("<title")[1].split(">")[1];
		System.out.println(title);
		String expectedTitle = "Watch " + channel + " Live TV Channel Streaming Online in HD on ZEE5";
		logger.info("Expected Title: " + expectedTitle);
		extent.extentLogger("", "Expected Title: " + expectedTitle);
		logger.info("Actual Title: " + title);
		extent.extentLogger("", "Actual Title: " + title);
		if (title.equals(expectedTitle)) {
			logger.info("Expected and Actual title match");
			extent.extentLogger("", "Expected and Actual title match");
		} else {
			logger.error("Expected and Actual title mismatch");
			extent.extentLoggerFail("", "Expected and Actual title mismatch");
		}

		extent.HeaderChildNode("PWA2-10111 Channels Page - Description");
		logger.info("PWA2-10111 Channels Page - Description");
		String description = getElementPropertyToString("innerText", PWAHomePage.objSourceDescription, "Description");
		description = description.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(description);
		String expectedDescription = "Watch Live streaming of " + channel
				+ " channel in HD quality. Also explore other live channel streaming like News, Entertainment, Music and more only on ZEE5.";
		logger.info("Expected Description: " + expectedDescription);
		extent.extentLogger("", "Expected Description: " + expectedDescription);
		logger.info("Actual Description: " + description);
		extent.extentLogger("", "Actual Description: " + description);
		if (description.equals(expectedDescription)) {
			logger.info("Expected and Actual description match");
			extent.extentLogger("", "Expected and Actual description match");
		} else {
			logger.error("Expected and Actual description mismatch");
			extent.extentLoggerFail("", "Expected and Actual description mismatch");
		}

		extent.HeaderChildNode("PWA2-10111 Channels Page - OG Title");
		logger.info("PWA2-10111 Channels Page - OG Title");
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objOgTitle, "OG Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogtitle);
		String expectedOgtitle = "Watch " + channel + " Live TV Channel Streaming Online in HD on ZEE5";
		logger.info("Expected OG Title: " + expectedOgtitle);
		extent.extentLogger("", "Expected OG Title: " + expectedOgtitle);
		logger.info("Actual OG Title: " + ogtitle);
		extent.extentLogger("", "Actual OG Title: " + ogtitle);
		if (ogtitle.equals(expectedOgtitle)) {
			logger.info("Expected and Actual OG Title match");
			extent.extentLogger("", "Expected and Actual OG Title match");
		} else {
			logger.error("Expected and Actual OG Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10111 Channels Page - OG Description");
		logger.info("PWA2-10111 Channels Page - OG Description");
		String ogdesc = getElementPropertyToString("innerText", PWAHomePage.objOgDesc, "OG Description");
		ogdesc = ogdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogdesc);
		String expectedOgdescription = "Watch Live streaming of " + channel
				+ " channel in HD quality. Also explore other live channel streaming like News, Entertainment, Music and more only on ZEE5.";
		logger.info("Expected OG Description: " + expectedOgdescription);
		extent.extentLogger("", "Expected OG Description: " + expectedOgdescription);
		logger.info("Actual OG Description: " + ogdesc);
		extent.extentLogger("", "Actual OG Description: " + ogdesc);
		if (ogdesc.equals(expectedOgdescription)) {
			logger.info("Expected and Actual OG Description match");
			extent.extentLogger("", "Expected and Actual OG Description match");
		} else {
			logger.error("Expected and Actual OG Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Description mismatch");
		}

		extent.HeaderChildNode("PWA2-10111 Channels Page - Twitter Title");
		logger.info("PWA2-10111 Channels Page - Twitter Title");
		String twittertitle = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgTitle, "Twitter Title");
		twittertitle = twittertitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twittertitle);
		String expectedtwitterTitle = "Watch " + channel + " Live TV Channel Streaming Online in HD on ZEE5";
		logger.info("Expected Twitter Title: " + expectedtwitterTitle);
		extent.extentLogger("", "Expected Twitter Title: " + expectedtwitterTitle);
		logger.info("Actual Twitter Title: " + twittertitle);
		extent.extentLogger("", "Actual Twitter Title: " + twittertitle);
		if (twittertitle.equals(expectedtwitterTitle)) {
			logger.info("Expected and Actual Twitter Title match");
			extent.extentLogger("", "Expected and Actual Twitter Title match");
		} else {
			logger.error("Expected and Actual Twitter Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10111 Channels Page - Twitter Description");
		logger.info("PWA2-10111 Channels Page - Twitter Description");
		String twitterdesc = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgDesc, "Twitter Title");
		twitterdesc = twitterdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twitterdesc);
		String expectedtwitterDesc = "Watch Live streaming of " + channel
				+ " channel in HD quality. Also explore other live channel streaming like News, Entertainment, Music and more only on ZEE5.";
		logger.info("Expected Twitter Description: " + expectedtwitterDesc);
		extent.extentLogger("", "Expected Twitter Description: " + expectedtwitterDesc);
		logger.info("Actual Twitter Description: " + twitterdesc);
		extent.extentLogger("", "Actual Twitter Description: " + twitterdesc);
		if (twitterdesc.equals(expectedtwitterDesc)) {
			logger.info("Expected and Actual Twitter Description match");
			extent.extentLogger("", "Expected and Actual Twitter Description match");
		} else {
			logger.error("Expected and Actual Twitter Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Description mismatch");
		}
	}

	public void PWA2_10112_showDetailsMeta(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-10112 Show Details Page - Title");
		logger.info("PWA2-10112 Show Details Page - Title");
		navigateToHome();
		String home = getParameterFromXML("url");
		String showDeatilsUrl = home + "tvshows/details/kundali-bhagya/0-6-366";
		String show = "Kundali Bhagya";
		getWebDriver().get(showDeatilsUrl);
		logger.info("Navigated to url: " + showDeatilsUrl);
		extent.extentLogger("", "Navigated to url: " + showDeatilsUrl);
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		logger.info("Navigated to url: " + url);
		extent.extentLogger("", "Navigated to url: " + url);
		waitTime(3000);
		String title = getElementPropertyToString("innerText", PWAHomePage.objTitle, "Title");
		title = title.replace("&amp;", "&").replace("&#x27;", "'");
		title = title.split("</title>")[0].split("<title")[1].split(">")[1];
		System.out.println(title);
		String expectedTitle = show + " TV Serial Online - Watch Tomorrow's Episode Before TV on ZEE5";
		logger.info("Expected Title: " + expectedTitle);
		extent.extentLogger("", "Expected Title: " + expectedTitle);
		logger.info("Actual Title: " + title);
		extent.extentLogger("", "Actual Title: " + title);
		if (title.equals(expectedTitle)) {
			logger.info("Expected and Actual title match");
			extent.extentLogger("", "Expected and Actual title match");
		} else {
			logger.error("Expected and Actual title mismatch");
			extent.extentLoggerFail("", "Expected and Actual title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Show Details Page - Description");
		logger.info("PWA2-10112 Show Details Page - Description");
		String description = getElementPropertyToString("innerText", PWAHomePage.objSourceDescription, "Description");
		description = description.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(description);
		String expectedDescription = "Watch " + show + " Latest Episodes Online in full HD on ZEE5. Enjoy " + show
				+ " best trending moments, video clips, promos, best scenes, previews & more of " + show
				+ " in HD on ZEE5.";
		logger.info("Expected Description: " + expectedDescription);
		extent.extentLogger("", "Expected Description: " + expectedDescription);
		logger.info("Actual Description: " + description);
		extent.extentLogger("", "Actual Description: " + description);
		if (description.equals(expectedDescription)) {
			logger.info("Expected and Actual description match");
			extent.extentLogger("", "Expected and Actual description match");
		} else {
			logger.error("Expected and Actual description mismatch");
			extent.extentLoggerFail("", "Expected and Actual description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Show Details Page - OG Title");
		logger.info("PWA2-10112 Show Details Page - OG Title");
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objOgTitle, "OG Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogtitle);
		String expectedOgtitle = show + " TV Serial Online - Watch Tomorrow's Episode Before TV on ZEE5";
		logger.info("Expected OG Title: " + expectedOgtitle);
		extent.extentLogger("", "Expected OG Title: " + expectedOgtitle);
		logger.info("Actual OG Title: " + ogtitle);
		extent.extentLogger("", "Actual OG Title: " + ogtitle);
		if (ogtitle.equals(expectedOgtitle)) {
			logger.info("Expected and Actual OG Title match");
			extent.extentLogger("", "Expected and Actual OG Title match");
		} else {
			logger.error("Expected and Actual OG Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Show Details Page - OG Description");
		logger.info("PWA2-10112 Show Details Page - OG Description");
		String ogdesc = getElementPropertyToString("innerText", PWAHomePage.objOgDesc, "OG Description");
		ogdesc = ogdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogdesc);
		String expectedOgdescription = "Watch " + show + " Latest Episodes Online in full HD on ZEE5. Enjoy " + show
				+ " best trending moments, video clips, promos, best scenes, previews & more of " + show
				+ " in HD on ZEE5.";
		logger.info("Expected OG Description: " + expectedOgdescription);
		extent.extentLogger("", "Expected OG Description: " + expectedOgdescription);
		logger.info("Actual OG Description: " + ogdesc);
		extent.extentLogger("", "Actual OG Description: " + ogdesc);
		if (ogdesc.equals(expectedOgdescription)) {
			logger.info("Expected and Actual OG Description match");
			extent.extentLogger("", "Expected and Actual OG Description match");
		} else {
			logger.error("Expected and Actual OG Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Show Details Page - Twitter Title");
		logger.info("PWA2-10112 Show Details Page - Twitter Title");
		String twittertitle = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgTitle, "Twitter Title");
		twittertitle = twittertitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twittertitle);
		String expectedtwitterTitle = show + " TV Serial Online - Watch Tomorrow's Episode Before TV on ZEE5";
		logger.info("Expected Twitter Title: " + expectedtwitterTitle);
		extent.extentLogger("", "Expected Twitter Title: " + expectedtwitterTitle);
		logger.info("Actual Twitter Title: " + twittertitle);
		extent.extentLogger("", "Actual Twitter Title: " + twittertitle);
		if (twittertitle.equals(expectedtwitterTitle)) {
			logger.info("Expected and Actual Twitter Title match");
			extent.extentLogger("", "Expected and Actual Twitter Title match");
		} else {
			logger.error("Expected and Actual Twitter Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Show Details Page - Twitter Description");
		logger.info("PWA2-10112 Show Details Page - Twitter Description");
		String twitterdesc = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgDesc, "Twitter Title");
		twitterdesc = twitterdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twitterdesc);
		String expectedtwitterDesc = "Watch " + show + " Latest Episodes Online in full HD on ZEE5. Enjoy " + show
				+ " best trending moments, video clips, promos, best scenes, previews & more of " + show
				+ " in HD on ZEE5.";
		logger.info("Expected Twitter Description: " + expectedtwitterDesc);
		extent.extentLogger("", "Expected Twitter Description: " + expectedtwitterDesc);
		logger.info("Actual Twitter Description: " + twitterdesc);
		extent.extentLogger("", "Actual Twitter Description: " + twitterdesc);
		if (twitterdesc.equals(expectedtwitterDesc)) {
			logger.info("Expected and Actual Twitter Description match");
			extent.extentLogger("", "Expected and Actual Twitter Description match");
		} else {
			logger.error("Expected and Actual Twitter Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Description mismatch");
		}
	}

	public void PWA2_10112_episodeMeta(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-10112 Episode Page - Title");
		logger.info("PWA2-10112 Episode Page - Title");
		navigateToHome();
		String home = getParameterFromXML("url");

		String episodeUrl = home
				+ "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-june-07-2021/0-1-manual-7ngdbpm4ph50";
		String expectedTitle = "Watch Kundali Bhagya TV Serial 7th June 2021 Full Episode 976 Online on ZEE5";
		String expectedDescription = "Enjoy 7th June 2021's full episode 976 of Kundali Bhagya TV serial online. Watch Ruchika and Megha Outwit Prithvi full episode. View best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5";
		String expectedOgtitle = "Watch Kundali Bhagya TV Serial 7th June 2021 Full Episode 976 Online on ZEE5";
		String expectedOgdescription = "Enjoy 7th June 2021's full episode 976 of Kundali Bhagya TV serial online. Watch Ruchika and Megha Outwit Prithvi full episode. View best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5";
		String expectedtwitterTitle = "Watch Kundali Bhagya TV Serial 7th June 2021 Full Episode 976 Online on ZEE5";
		String expectedtwitterDesc = "Enjoy 7th June 2021's full episode 976 of Kundali Bhagya TV serial online. Watch Ruchika and Megha Outwit Prithvi full episode. View best scenes, clips, previews & more of Kundali Bhagya in HD on ZEE5";

		getWebDriver().get(episodeUrl);
		logger.info("Navigated to url: " + episodeUrl);
		extent.extentLogger("", "Navigated to url: " + episodeUrl);
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		logger.info("Navigated to url: " + url);
		extent.extentLogger("", "Navigated to url: " + url);
		waitTime(3000);
		String title = getElementPropertyToString("innerText", PWAHomePage.objTitle, "Title");
		title = title.replace("&amp;", "&").replace("&#x27;", "'");
		title = title.split("</title>")[0].split("<title")[1].split(">")[1];
		System.out.println(title);
		logger.info("Expected Title: " + expectedTitle);
		extent.extentLogger("", "Expected Title: " + expectedTitle);
		logger.info("Actual Title: " + title);
		extent.extentLogger("", "Actual Title: " + title);
		if (title.equals(expectedTitle)) {
			logger.info("Expected and Actual title match");
			extent.extentLogger("", "Expected and Actual title match");
		} else {
			logger.error("Expected and Actual title mismatch");
			extent.extentLoggerFail("", "Expected and Actual title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Episode Page - Description");
		logger.info("PWA2-10112 Episode Page - Description");
		String description = getElementPropertyToString("innerText", PWAHomePage.objSourceDescription, "Description");
		description = description.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(description);
		logger.info("Expected Description: " + expectedDescription);
		extent.extentLogger("", "Expected Description: " + expectedDescription);
		logger.info("Actual Description: " + description);
		extent.extentLogger("", "Actual Description: " + description);
		if (description.equals(expectedDescription)) {
			logger.info("Expected and Actual description match");
			extent.extentLogger("", "Expected and Actual description match");
		} else {
			logger.error("Expected and Actual description mismatch");
			extent.extentLoggerFail("", "Expected and Actual description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Episode Page - OG Title");
		logger.info("PWA2-10112 Episode Page - OG Title");
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objOgTitle, "OG Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogtitle);
		logger.info("Expected OG Title: " + expectedOgtitle);
		extent.extentLogger("", "Expected OG Title: " + expectedOgtitle);
		logger.info("Actual OG Title: " + ogtitle);
		extent.extentLogger("", "Actual OG Title: " + ogtitle);
		if (ogtitle.equals(expectedOgtitle)) {
			logger.info("Expected and Actual OG Title match");
			extent.extentLogger("", "Expected and Actual OG Title match");
		} else {
			logger.error("Expected and Actual OG Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Episode Page - OG Description");
		logger.info("PWA2-10112 Episode Page - OG Description");
		String ogdesc = getElementPropertyToString("innerText", PWAHomePage.objOgDesc, "OG Description");
		ogdesc = ogdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogdesc);
		logger.info("Expected OG Description: " + expectedOgdescription);
		extent.extentLogger("", "Expected OG Description: " + expectedOgdescription);
		logger.info("Actual OG Description: " + ogdesc);
		extent.extentLogger("", "Actual OG Description: " + ogdesc);
		if (ogdesc.equals(expectedOgdescription)) {
			logger.info("Expected and Actual OG Description match");
			extent.extentLogger("", "Expected and Actual OG Description match");
		} else {
			logger.error("Expected and Actual OG Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Episode Page - Twitter Title");
		logger.info("PWA2-10112 Episode Page - Twitter Title");
		String twittertitle = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgTitle, "Twitter Title");
		twittertitle = twittertitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twittertitle);
		logger.info("Expected Twitter Title: " + expectedtwitterTitle);
		extent.extentLogger("", "Expected Twitter Title: " + expectedtwitterTitle);
		logger.info("Actual Twitter Title: " + twittertitle);
		extent.extentLogger("", "Actual Twitter Title: " + twittertitle);
		if (twittertitle.equals(expectedtwitterTitle)) {
			logger.info("Expected and Actual Twitter Title match");
			extent.extentLogger("", "Expected and Actual Twitter Title match");
		} else {
			logger.error("Expected and Actual Twitter Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Episode Page - Twitter Description");
		logger.info("PWA2-10112 Episode Page - Twitter Description");
		String twitterdesc = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgDesc, "Twitter Title");
		twitterdesc = twitterdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twitterdesc);
		logger.info("Expected Twitter Description: " + expectedtwitterDesc);
		extent.extentLogger("", "Expected Twitter Description: " + expectedtwitterDesc);
		logger.info("Actual Twitter Description: " + twitterdesc);
		extent.extentLogger("", "Actual Twitter Description: " + twitterdesc);
		if (twitterdesc.equals(expectedtwitterDesc)) {
			logger.info("Expected and Actual Twitter Description match");
			extent.extentLogger("", "Expected and Actual Twitter Description match");
		} else {
			logger.error("Expected and Actual Twitter Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Description mismatch");
		}
	}

	public void PWA2_10112_episodeSpoilerMeta(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-10112 Episode Spoiler - Title");
		logger.info("PWA2-10112 Episode Spoiler - Title");
		navigateToHome();
		String home = getParameterFromXML("url");

		String episodeSpoilerUrl = home
				+ "tvshows/details/kumkum-bhagya/0-6-127/kumkum-bhagya-november-19-2020-episode-spoiler/0-1-manual_1h87duq16dco";
		String expectedTitle = "Watch Kumkum Bhagya TV Serial Spoiler of 19th November 2020 Online on ZEE5";
		String expectedDescription = "Enjoy 19th November 2020's spoiler of Kumkum Bhagya TV serial online, starring Shabir Ahluwalia, Sriti Jha, Reyhna Malhotra Shikha Singh. Watch best scenes, clips, previews & more of Kumkum Bhagya in HD on ZEE5";
		String expectedOgtitle = "Watch Kumkum Bhagya TV Serial Spoiler of 19th November 2020 Online on ZEE5";
		String expectedOgdescription = "Enjoy 19th November 2020's spoiler of Kumkum Bhagya TV serial online, starring Shabir Ahluwalia, Sriti Jha, Reyhna Malhotra Shikha Singh. Watch best scenes, clips, previews & more of Kumkum Bhagya in HD on ZEE5";
		String expectedtwitterTitle = "Watch Kumkum Bhagya TV Serial Spoiler of 19th November 2020 Online on ZEE5";
		String expectedtwitterDesc = "Enjoy 19th November 2020's spoiler of Kumkum Bhagya TV serial online, starring Shabir Ahluwalia, Sriti Jha, Reyhna Malhotra Shikha Singh. Watch best scenes, clips, previews & more of Kumkum Bhagya in HD on ZEE5";

		getWebDriver().get(episodeSpoilerUrl);
		logger.info("Navigated to url: " + episodeSpoilerUrl);
		extent.extentLogger("", "Navigated to url: " + episodeSpoilerUrl);
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		logger.info("Navigated to url: " + url);
		extent.extentLogger("", "Navigated to url: " + url);
		waitTime(3000);
		String title = getElementPropertyToString("innerText", PWAHomePage.objTitle, "Title");
		title = title.replace("&amp;", "&").replace("&#x27;", "'");
		title = title.split("</title>")[0].split("<title")[1].split(">")[1];
		System.out.println(title);
		logger.info("Expected Title: " + expectedTitle);
		extent.extentLogger("", "Expected Title: " + expectedTitle);
		logger.info("Actual Title: " + title);
		extent.extentLogger("", "Actual Title: " + title);
		if (title.equals(expectedTitle)) {
			logger.info("Expected and Actual title match");
			extent.extentLogger("", "Expected and Actual title match");
		} else {
			logger.error("Expected and Actual title mismatch");
			extent.extentLoggerFail("", "Expected and Actual title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Episode Spoiler - Description");
		logger.info("PWA2-10112 Episode Spoiler - Description");
		String description = getElementPropertyToString("innerText", PWAHomePage.objSourceDescription, "Description");
		description = description.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(description);
		logger.info("Expected Description: " + expectedDescription);
		extent.extentLogger("", "Expected Description: " + expectedDescription);
		logger.info("Actual Description: " + description);
		extent.extentLogger("", "Actual Description: " + description);
		if (description.equals(expectedDescription)) {
			logger.info("Expected and Actual description match");
			extent.extentLogger("", "Expected and Actual description match");
		} else {
			logger.error("Expected and Actual description mismatch");
			extent.extentLoggerFail("", "Expected and Actual description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Episode Spoiler - OG Title");
		logger.info("PWA2-10112 Episode Spoiler - OG Title");
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objOgTitle, "OG Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogtitle);
		logger.info("Expected OG Title: " + expectedOgtitle);
		extent.extentLogger("", "Expected OG Title: " + expectedOgtitle);
		logger.info("Actual OG Title: " + ogtitle);
		extent.extentLogger("", "Actual OG Title: " + ogtitle);
		if (ogtitle.equals(expectedOgtitle)) {
			logger.info("Expected and Actual OG Title match");
			extent.extentLogger("", "Expected and Actual OG Title match");
		} else {
			logger.error("Expected and Actual OG Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Episode Spoiler - OG Description");
		logger.info("PWA2-10112 Episode Spoiler - OG Description");
		String ogdesc = getElementPropertyToString("innerText", PWAHomePage.objOgDesc, "OG Description");
		ogdesc = ogdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogdesc);
		logger.info("Expected OG Description: " + expectedOgdescription);
		extent.extentLogger("", "Expected OG Description: " + expectedOgdescription);
		logger.info("Actual OG Description: " + ogdesc);
		extent.extentLogger("", "Actual OG Description: " + ogdesc);
		if (ogdesc.equals(expectedOgdescription)) {
			logger.info("Expected and Actual OG Description match");
			extent.extentLogger("", "Expected and Actual OG Description match");
		} else {
			logger.error("Expected and Actual OG Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Episode Spoiler - Twitter Title");
		logger.info("PWA2-10112 Episode Spoiler - Twitter Title");
		String twittertitle = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgTitle, "Twitter Title");
		twittertitle = twittertitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twittertitle);
		logger.info("Expected Twitter Title: " + expectedtwitterTitle);
		extent.extentLogger("", "Expected Twitter Title: " + expectedtwitterTitle);
		logger.info("Actual Twitter Title: " + twittertitle);
		extent.extentLogger("", "Actual Twitter Title: " + twittertitle);
		if (twittertitle.equals(expectedtwitterTitle)) {
			logger.info("Expected and Actual Twitter Title match");
			extent.extentLogger("", "Expected and Actual Twitter Title match");
		} else {
			logger.error("Expected and Actual Twitter Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Episode Spoiler - Twitter Description");
		logger.info("PWA2-10112 Episode Spoiler - Twitter Description");
		String twitterdesc = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgDesc, "Twitter Title");
		twitterdesc = twitterdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twitterdesc);
		logger.info("Expected Twitter Description: " + expectedtwitterDesc);
		extent.extentLogger("", "Expected Twitter Description: " + expectedtwitterDesc);
		logger.info("Actual Twitter Description: " + twitterdesc);
		extent.extentLogger("", "Actual Twitter Description: " + twitterdesc);
		if (twitterdesc.equals(expectedtwitterDesc)) {
			logger.info("Expected and Actual Twitter Description match");
			extent.extentLogger("", "Expected and Actual Twitter Description match");
		} else {
			logger.error("Expected and Actual Twitter Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Description mismatch");
		}
	}

	public void PWA2_10112_webisodeMeta(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-10112 Webisode - Title");
		logger.info("PWA2-10112 Webisode - Title");
		navigateToHome();
		String home = getParameterFromXML("url");

		String webisodeUrl = home
				+ "tvshows/details/kumkum-bhagya/0-6-127/kumkum-bhagya-november-17-2020-webisode/0-1-manual_4j4idh1pdc50";
		String expectedTitle = "Watch Kumkum Bhagya TV Serial Webisode of 17th November 2020 Online on ZEE5";
		String expectedDescription = "Enjoy 17th November 2020's webisode of Kumkum Bhagya TV serial online, starring Shabir Ahluwalia, Sriti Jha, Reyhna Malhotra Shikha Singh. Watch best scenes, clips, previews & more of Kumkum Bhagya in HD on ZEE5";
		String expectedOgtitle = "Watch Kumkum Bhagya TV Serial Webisode of 17th November 2020 Online on ZEE5";
		String expectedOgdescription = "Enjoy 17th November 2020's webisode of Kumkum Bhagya TV serial online, starring Shabir Ahluwalia, Sriti Jha, Reyhna Malhotra Shikha Singh. Watch best scenes, clips, previews & more of Kumkum Bhagya in HD on ZEE5";
		String expectedtwitterTitle = "Watch Kumkum Bhagya TV Serial Webisode of 17th November 2020 Online on ZEE5";
		String expectedtwitterDesc = "Enjoy 17th November 2020's webisode of Kumkum Bhagya TV serial online, starring Shabir Ahluwalia, Sriti Jha, Reyhna Malhotra Shikha Singh. Watch best scenes, clips, previews & more of Kumkum Bhagya in HD on ZEE5";

		getWebDriver().get(webisodeUrl);
		logger.info("Navigated to url: " + webisodeUrl);
		extent.extentLogger("", "Navigated to url: " + webisodeUrl);
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		logger.info("Navigated to url: " + url);
		extent.extentLogger("", "Navigated to url: " + url);
		waitTime(3000);
		String title = getElementPropertyToString("innerText", PWAHomePage.objTitle, "Title");
		title = title.replace("&amp;", "&").replace("&#x27;", "'");
		title = title.split("</title>")[0].split("<title")[1].split(">")[1];
		System.out.println(title);
		logger.info("Expected Title: " + expectedTitle);
		extent.extentLogger("", "Expected Title: " + expectedTitle);
		logger.info("Actual Title: " + title);
		extent.extentLogger("", "Actual Title: " + title);
		if (title.equals(expectedTitle)) {
			logger.info("Expected and Actual title match");
			extent.extentLogger("", "Expected and Actual title match");
		} else {
			logger.error("Expected and Actual title mismatch");
			extent.extentLoggerFail("", "Expected and Actual title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Webisode - Description");
		logger.info("PWA2-10112 Webisode - Description");
		String description = getElementPropertyToString("innerText", PWAHomePage.objSourceDescription, "Description");
		description = description.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(description);
		logger.info("Expected Description: " + expectedDescription);
		extent.extentLogger("", "Expected Description: " + expectedDescription);
		logger.info("Actual Description: " + description);
		extent.extentLogger("", "Actual Description: " + description);
		if (description.equals(expectedDescription)) {
			logger.info("Expected and Actual description match");
			extent.extentLogger("", "Expected and Actual description match");
		} else {
			logger.error("Expected and Actual description mismatch");
			extent.extentLoggerFail("", "Expected and Actual description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Webisode - OG Title");
		logger.info("PWA2-10112 Webisode - OG Title");
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objOgTitle, "OG Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogtitle);
		logger.info("Expected OG Title: " + expectedOgtitle);
		extent.extentLogger("", "Expected OG Title: " + expectedOgtitle);
		logger.info("Actual OG Title: " + ogtitle);
		extent.extentLogger("", "Actual OG Title: " + ogtitle);
		if (ogtitle.equals(expectedOgtitle)) {
			logger.info("Expected and Actual OG Title match");
			extent.extentLogger("", "Expected and Actual OG Title match");
		} else {
			logger.error("Expected and Actual OG Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Webisode - OG Description");
		logger.info("PWA2-10112 Webisode - OG Description");
		String ogdesc = getElementPropertyToString("innerText", PWAHomePage.objOgDesc, "OG Description");
		ogdesc = ogdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogdesc);
		logger.info("Expected OG Description: " + expectedOgdescription);
		extent.extentLogger("", "Expected OG Description: " + expectedOgdescription);
		logger.info("Actual OG Description: " + ogdesc);
		extent.extentLogger("", "Actual OG Description: " + ogdesc);
		if (ogdesc.equals(expectedOgdescription)) {
			logger.info("Expected and Actual OG Description match");
			extent.extentLogger("", "Expected and Actual OG Description match");
		} else {
			logger.error("Expected and Actual OG Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Webisode - Twitter Title");
		logger.info("PWA2-10112 Webisode - Twitter Title");
		String twittertitle = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgTitle, "Twitter Title");
		twittertitle = twittertitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twittertitle);
		logger.info("Expected Twitter Title: " + expectedtwitterTitle);
		extent.extentLogger("", "Expected Twitter Title: " + expectedtwitterTitle);
		logger.info("Actual Twitter Title: " + twittertitle);
		extent.extentLogger("", "Actual Twitter Title: " + twittertitle);
		if (twittertitle.equals(expectedtwitterTitle)) {
			logger.info("Expected and Actual Twitter Title match");
			extent.extentLogger("", "Expected and Actual Twitter Title match");
		} else {
			logger.error("Expected and Actual Twitter Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Webisode - Twitter Description");
		logger.info("PWA2-10112 Webisode - Twitter Description");
		String twitterdesc = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgDesc, "Twitter Title");
		twitterdesc = twitterdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twitterdesc);
		logger.info("Expected Twitter Description: " + expectedtwitterDesc);
		extent.extentLogger("", "Expected Twitter Description: " + expectedtwitterDesc);
		logger.info("Actual Twitter Description: " + twitterdesc);
		extent.extentLogger("", "Actual Twitter Description: " + twitterdesc);
		if (twitterdesc.equals(expectedtwitterDesc)) {
			logger.info("Expected and Actual Twitter Description match");
			extent.extentLogger("", "Expected and Actual Twitter Description match");
		} else {
			logger.error("Expected and Actual Twitter Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Description mismatch");
		}
	}

	public void PWA2_10112_bestSceneMeta(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-10112 Best Scene - Title");
		logger.info("PWA2-10112 Best Scene - Title");
		navigateToHome();
		String home = getParameterFromXML("url");

		String bestSceneUrl = home
				+ "tvshows/details/kumkum-bhagya/0-6-127/kumkum-bhagya-november-17-2020-best-scene/0-1-manual_1ne6v88r7b28";
		String expectedTitle = "Watch Pragya gets jealous Kumkum Bhagya TV Serial Best Scene of 17th November 2020 Online on ZEE5";
		String expectedDescription = "Watch Pragya gets jealous 17th November 2020's best scene of Kumkum Bhagya TV serial online, starring Shabir Ahluwalia, Sriti Jha, Reyhna Malhotra Shikha Singh. Watch best scenes, clips, previews & more of Kumkum Bhagya in HD on ZEE5";
		String expectedOgtitle = "Watch Pragya gets jealous Kumkum Bhagya TV Serial Best Scene of 17th November 2020 Online on ZEE5";
		String expectedOgdescription = "Watch Pragya gets jealous 17th November 2020's best scene of Kumkum Bhagya TV serial online, starring Shabir Ahluwalia, Sriti Jha, Reyhna Malhotra Shikha Singh. Watch best scenes, clips, previews & more of Kumkum Bhagya in HD on ZEE5";
		String expectedtwitterTitle = "Watch Pragya gets jealous Kumkum Bhagya TV Serial Best Scene of 17th November 2020 Online on ZEE5";
		String expectedtwitterDesc = "Watch Pragya gets jealous 17th November 2020's best scene of Kumkum Bhagya TV serial online, starring Shabir Ahluwalia, Sriti Jha, Reyhna Malhotra Shikha Singh. Watch best scenes, clips, previews & more of Kumkum Bhagya in HD on ZEE5";

		getWebDriver().get(bestSceneUrl);
		logger.info("Navigated to url: " + bestSceneUrl);
		extent.extentLogger("", "Navigated to url: " + bestSceneUrl);
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		logger.info("Navigated to url: " + url);
		extent.extentLogger("", "Navigated to url: " + url);
		waitTime(3000);
		String title = getElementPropertyToString("innerText", PWAHomePage.objTitle, "Title");
		title = title.replace("&amp;", "&").replace("&#x27;", "'");
		title = title.split("</title>")[0].split("<title")[1].split(">")[1];
		System.out.println(title);
		logger.info("Expected Title: " + expectedTitle);
		extent.extentLogger("", "Expected Title: " + expectedTitle);
		logger.info("Actual Title: " + title);
		extent.extentLogger("", "Actual Title: " + title);
		if (title.equals(expectedTitle)) {
			logger.info("Expected and Actual title match");
			extent.extentLogger("", "Expected and Actual title match");
		} else {
			logger.error("Expected and Actual title mismatch");
			extent.extentLoggerFail("", "Expected and Actual title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Best Scene - Description");
		logger.info("PWA2-10112 Best Scene - Description");
		String description = getElementPropertyToString("innerText", PWAHomePage.objSourceDescription, "Description");
		description = description.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(description);
		logger.info("Expected Description: " + expectedDescription);
		extent.extentLogger("", "Expected Description: " + expectedDescription);
		logger.info("Actual Description: " + description);
		extent.extentLogger("", "Actual Description: " + description);
		if (description.equals(expectedDescription)) {
			logger.info("Expected and Actual description match");
			extent.extentLogger("", "Expected and Actual description match");
		} else {
			logger.error("Expected and Actual description mismatch");
			extent.extentLoggerFail("", "Expected and Actual description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Best Scene - OG Title");
		logger.info("PWA2-10112 Best Scene - OG Title");
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objOgTitle, "OG Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogtitle);
		logger.info("Expected OG Title: " + expectedOgtitle);
		extent.extentLogger("", "Expected OG Title: " + expectedOgtitle);
		logger.info("Actual OG Title: " + ogtitle);
		extent.extentLogger("", "Actual OG Title: " + ogtitle);
		if (ogtitle.equals(expectedOgtitle)) {
			logger.info("Expected and Actual OG Title match");
			extent.extentLogger("", "Expected and Actual OG Title match");
		} else {
			logger.error("Expected and Actual OG Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Best Scene - OG Description");
		logger.info("PWA2-10112 Best Scene - OG Description");
		String ogdesc = getElementPropertyToString("innerText", PWAHomePage.objOgDesc, "OG Description");
		ogdesc = ogdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogdesc);
		logger.info("Expected OG Description: " + expectedOgdescription);
		extent.extentLogger("", "Expected OG Description: " + expectedOgdescription);
		logger.info("Actual OG Description: " + ogdesc);
		extent.extentLogger("", "Actual OG Description: " + ogdesc);
		if (ogdesc.equals(expectedOgdescription)) {
			logger.info("Expected and Actual OG Description match");
			extent.extentLogger("", "Expected and Actual OG Description match");
		} else {
			logger.error("Expected and Actual OG Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Best Scene - Twitter Title");
		logger.info("PWA2-10112 Best Scene - Twitter Title");
		String twittertitle = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgTitle, "Twitter Title");
		twittertitle = twittertitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twittertitle);
		logger.info("Expected Twitter Title: " + expectedtwitterTitle);
		extent.extentLogger("", "Expected Twitter Title: " + expectedtwitterTitle);
		logger.info("Actual Twitter Title: " + twittertitle);
		extent.extentLogger("", "Actual Twitter Title: " + twittertitle);
		if (twittertitle.equals(expectedtwitterTitle)) {
			logger.info("Expected and Actual Twitter Title match");
			extent.extentLogger("", "Expected and Actual Twitter Title match");
		} else {
			logger.error("Expected and Actual Twitter Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Best Scene - Twitter Description");
		logger.info("PWA2-10112 Best Scene - Twitter Description");
		String twitterdesc = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgDesc, "Twitter Title");
		twitterdesc = twitterdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twitterdesc);
		logger.info("Expected Twitter Description: " + expectedtwitterDesc);
		extent.extentLogger("", "Expected Twitter Description: " + expectedtwitterDesc);
		logger.info("Actual Twitter Description: " + twitterdesc);
		extent.extentLogger("", "Actual Twitter Description: " + twitterdesc);
		if (twitterdesc.equals(expectedtwitterDesc)) {
			logger.info("Expected and Actual Twitter Description match");
			extent.extentLogger("", "Expected and Actual Twitter Description match");
		} else {
			logger.error("Expected and Actual Twitter Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Description mismatch");
		}
	}

	public void PWA2_10112_mobisodeMeta(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-10112 Mobisode - Title");
		logger.info("PWA2-10112 Mobisode - Title");
		navigateToHome();
		String home = getParameterFromXML("url");

		String mobisodeUrl = home
				+ "tvshows/details/kumkum-bhagya/0-6-127/kumkum-bhagya-19-october-2020-to-01-november-2020-quick-recap/0-1-manual_10jpf6bm6tn0";
		String expectedTitle = "Watch Kumkum Bhagya TV Serial 2nd November 2020 Mobisode Online on ZEE5";
		String expectedDescription = "Enjoy 2nd November 2020's Mobisode of Kumkum Bhagya TV serial online, starring Shabir Ahluwalia, Sriti Jha, Reyhna Malhotra Shikha Singh. Watch Kumkum Bhagya - 19 October 2020 to 01 November 2020 - Quick Recap Mobisode. View best scenes, clips, previews & more of Kumkum Bhagya in HD on ZEE5";
		String expectedOgtitle = "Watch Kumkum Bhagya TV Serial 2nd November 2020 Mobisode Online on ZEE5";
		String expectedOgdescription = "Enjoy 2nd November 2020's Mobisode of Kumkum Bhagya TV serial online, starring Shabir Ahluwalia, Sriti Jha, Reyhna Malhotra Shikha Singh. Watch Kumkum Bhagya - 19 October 2020 to 01 November 2020 - Quick Recap Mobisode. View best scenes, clips, previews & more of Kumkum Bhagya in HD on ZEE5";
		String expectedtwitterTitle = "Watch Kumkum Bhagya TV Serial 2nd November 2020 Mobisode Online on ZEE5";
		String expectedtwitterDesc = "Enjoy 2nd November 2020's Mobisode of Kumkum Bhagya TV serial online, starring Shabir Ahluwalia, Sriti Jha, Reyhna Malhotra Shikha Singh. Watch Kumkum Bhagya - 19 October 2020 to 01 November 2020 - Quick Recap Mobisode. View best scenes, clips, previews & more of Kumkum Bhagya in HD on ZEE5";

		getWebDriver().get(mobisodeUrl);
		logger.info("Navigated to url: " + mobisodeUrl);
		extent.extentLogger("", "Navigated to url: " + mobisodeUrl);
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		logger.info("Navigated to url: " + url);
		extent.extentLogger("", "Navigated to url: " + url);
		waitTime(3000);
		String title = getElementPropertyToString("innerText", PWAHomePage.objTitle, "Title");
		title = title.replace("&amp;", "&").replace("&#x27;", "'");
		title = title.split("</title>")[0].split("<title")[1].split(">")[1];
		System.out.println(title);
		logger.info("Expected Title: " + expectedTitle);
		extent.extentLogger("", "Expected Title: " + expectedTitle);
		logger.info("Actual Title: " + title);
		extent.extentLogger("", "Actual Title: " + title);
		if (title.equals(expectedTitle)) {
			logger.info("Expected and Actual title match");
			extent.extentLogger("", "Expected and Actual title match");
		} else {
			logger.error("Expected and Actual title mismatch");
			extent.extentLoggerFail("", "Expected and Actual title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Mobisode - Description");
		logger.info("PWA2-10112 Mobisode - Description");
		String description = getElementPropertyToString("innerText", PWAHomePage.objSourceDescription, "Description");
		description = description.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(description);
		logger.info("Expected Description: " + expectedDescription);
		extent.extentLogger("", "Expected Description: " + expectedDescription);
		logger.info("Actual Description: " + description);
		extent.extentLogger("", "Actual Description: " + description);
		if (description.equals(expectedDescription)) {
			logger.info("Expected and Actual description match");
			extent.extentLogger("", "Expected and Actual description match");
		} else {
			logger.error("Expected and Actual description mismatch");
			extent.extentLoggerFail("", "Expected and Actual description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Mobisode - OG Title");
		logger.info("PWA2-10112 Mobisode - OG Title");
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objOgTitle, "OG Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogtitle);
		logger.info("Expected OG Title: " + expectedOgtitle);
		extent.extentLogger("", "Expected OG Title: " + expectedOgtitle);
		logger.info("Actual OG Title: " + ogtitle);
		extent.extentLogger("", "Actual OG Title: " + ogtitle);
		if (ogtitle.equals(expectedOgtitle)) {
			logger.info("Expected and Actual OG Title match");
			extent.extentLogger("", "Expected and Actual OG Title match");
		} else {
			logger.error("Expected and Actual OG Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Mobisode - OG Description");
		logger.info("PWA2-10112 Mobisode - OG Description");
		String ogdesc = getElementPropertyToString("innerText", PWAHomePage.objOgDesc, "OG Description");
		ogdesc = ogdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogdesc);
		logger.info("Expected OG Description: " + expectedOgdescription);
		extent.extentLogger("", "Expected OG Description: " + expectedOgdescription);
		logger.info("Actual OG Description: " + ogdesc);
		extent.extentLogger("", "Actual OG Description: " + ogdesc);
		if (ogdesc.equals(expectedOgdescription)) {
			logger.info("Expected and Actual OG Description match");
			extent.extentLogger("", "Expected and Actual OG Description match");
		} else {
			logger.error("Expected and Actual OG Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Mobisode - Twitter Title");
		logger.info("PWA2-10112 Mobisode - Twitter Title");
		String twittertitle = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgTitle, "Twitter Title");
		twittertitle = twittertitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twittertitle);
		logger.info("Expected Twitter Title: " + expectedtwitterTitle);
		extent.extentLogger("", "Expected Twitter Title: " + expectedtwitterTitle);
		logger.info("Actual Twitter Title: " + twittertitle);
		extent.extentLogger("", "Actual Twitter Title: " + twittertitle);
		if (twittertitle.equals(expectedtwitterTitle)) {
			logger.info("Expected and Actual Twitter Title match");
			extent.extentLogger("", "Expected and Actual Twitter Title match");
		} else {
			logger.error("Expected and Actual Twitter Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Mobisode - Twitter Description");
		logger.info("PWA2-10112 Mobisode - Twitter Description");
		String twitterdesc = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgDesc, "Twitter Title");
		twitterdesc = twitterdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twitterdesc);
		logger.info("Expected Twitter Description: " + expectedtwitterDesc);
		extent.extentLogger("", "Expected Twitter Description: " + expectedtwitterDesc);
		logger.info("Actual Twitter Description: " + twitterdesc);
		extent.extentLogger("", "Actual Twitter Description: " + twitterdesc);
		if (twitterdesc.equals(expectedtwitterDesc)) {
			logger.info("Expected and Actual Twitter Description match");
			extent.extentLogger("", "Expected and Actual Twitter Description match");
		} else {
			logger.error("Expected and Actual Twitter Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Description mismatch");
		}
	}

	public void PWA2_10112_weekInShortsMeta(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-10112 Week In Shorts - Title");
		logger.info("PWA2-10112 Week In Shorts - Title");
		navigateToHome();
		String home = getParameterFromXML("url");

		String weekInShortsUrl = home
				+ "tvshows/details/kundali-bhagya/0-6-366/week-in-short-kundali-bhagya-april-05-2021-to-april-09-2021/0-1-manual_7g67fl4hssb0";
		String expectedTitle = "Watch Kundali Bhagya TV Serial Week in Short episode of 10th April 2021 Online on ZEE5";
		String expectedDescription = "Enjoy 10th April 2021's Week in Short episode of Kundali Bhagya TV serial online, starring Sanjay Gagnani,Anjum Fakih,Shraddha Arya,Naveen Saini,Abhishek Kapur,Ruhi Chaturvedi,Anisha Hinduja,Dheeraj Dhoopar,Manit Joura,Supriya Shukla. Watch Week in Short | Kundali Bhagya - April 05, 2021 to April 09, 2021. ";
		String expectedOgtitle = "Watch Kundali Bhagya TV Serial Week in Short episode of 10th April 2021 Online on ZEE5";
		String expectedOgdescription = "Enjoy 10th April 2021's Week in Short episode of Kundali Bhagya TV serial online, starring Sanjay Gagnani,Anjum Fakih,Shraddha Arya,Naveen Saini,Abhishek Kapur,Ruhi Chaturvedi,Anisha Hinduja,Dheeraj Dhoopar,Manit Joura,Supriya Shukla. Watch Week in Short | Kundali Bhagya - April 05, 2021 to April 09, 2021. ";
		String expectedtwitterTitle = "Watch Kundali Bhagya TV Serial Week in Short episode of 10th April 2021 Online on ZEE5";
		String expectedtwitterDesc = "Enjoy 10th April 2021's Week in Short episode of Kundali Bhagya TV serial online, starring Sanjay Gagnani,Anjum Fakih,Shraddha Arya,Naveen Saini,Abhishek Kapur,Ruhi Chaturvedi,Anisha Hinduja,Dheeraj Dhoopar,Manit Joura,Supriya Shukla. Watch Week in Short | Kundali Bhagya - April 05, 2021 to April 09, 2021. ";

		getWebDriver().get(weekInShortsUrl);
		logger.info("Navigated to url: " + weekInShortsUrl);
		extent.extentLogger("", "Navigated to url: " + weekInShortsUrl);
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		logger.info("Navigated to url: " + url);
		extent.extentLogger("", "Navigated to url: " + url);
		waitTime(3000);
		String title = getElementPropertyToString("innerText", PWAHomePage.objTitle, "Title");
		title = title.replace("&amp;", "&").replace("&#x27;", "'");
		title = title.split("</title>")[0].split("<title")[1].split(">")[1];
		System.out.println(title);
		logger.info("Expected Title: " + expectedTitle);
		extent.extentLogger("", "Expected Title: " + expectedTitle);
		logger.info("Actual Title: " + title);
		extent.extentLogger("", "Actual Title: " + title);
		if (title.equals(expectedTitle)) {
			logger.info("Expected and Actual title match");
			extent.extentLogger("", "Expected and Actual title match");
		} else {
			logger.error("Expected and Actual title mismatch");
			extent.extentLoggerFail("", "Expected and Actual title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Week In Shorts - Description");
		logger.info("PWA2-10112 Week In Shorts - Description");
		String description = getElementPropertyToString("innerText", PWAHomePage.objSourceDescription, "Description");
		description = description.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(description);
		logger.info("Expected Description: " + expectedDescription);
		extent.extentLogger("", "Expected Description: " + expectedDescription);
		logger.info("Actual Description: " + description);
		extent.extentLogger("", "Actual Description: " + description);
		if (description.equals(expectedDescription)) {
			logger.info("Expected and Actual description match");
			extent.extentLogger("", "Expected and Actual description match");
		} else {
			logger.error("Expected and Actual description mismatch");
			extent.extentLoggerFail("", "Expected and Actual description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Week In Shorts - OG Title");
		logger.info("PWA2-10112 Week In Shorts - OG Title");
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objOgTitle, "OG Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogtitle);
		logger.info("Expected OG Title: " + expectedOgtitle);
		extent.extentLogger("", "Expected OG Title: " + expectedOgtitle);
		logger.info("Actual OG Title: " + ogtitle);
		extent.extentLogger("", "Actual OG Title: " + ogtitle);
		if (ogtitle.equals(expectedOgtitle)) {
			logger.info("Expected and Actual OG Title match");
			extent.extentLogger("", "Expected and Actual OG Title match");
		} else {
			logger.error("Expected and Actual OG Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Week In Shorts - OG Description");
		logger.info("PWA2-10112 Week In Shorts - OG Description");
		String ogdesc = getElementPropertyToString("innerText", PWAHomePage.objOgDesc, "OG Description");
		ogdesc = ogdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogdesc);
		logger.info("Expected OG Description: " + expectedOgdescription);
		extent.extentLogger("", "Expected OG Description: " + expectedOgdescription);
		logger.info("Actual OG Description: " + ogdesc);
		extent.extentLogger("", "Actual OG Description: " + ogdesc);
		if (ogdesc.equals(expectedOgdescription)) {
			logger.info("Expected and Actual OG Description match");
			extent.extentLogger("", "Expected and Actual OG Description match");
		} else {
			logger.error("Expected and Actual OG Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Week In Shorts - Twitter Title");
		logger.info("PWA2-10112 Week In Shorts - Twitter Title");
		String twittertitle = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgTitle, "Twitter Title");
		twittertitle = twittertitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twittertitle);
		logger.info("Expected Twitter Title: " + expectedtwitterTitle);
		extent.extentLogger("", "Expected Twitter Title: " + expectedtwitterTitle);
		logger.info("Actual Twitter Title: " + twittertitle);
		extent.extentLogger("", "Actual Twitter Title: " + twittertitle);
		if (twittertitle.equals(expectedtwitterTitle)) {
			logger.info("Expected and Actual Twitter Title match");
			extent.extentLogger("", "Expected and Actual Twitter Title match");
		} else {
			logger.error("Expected and Actual Twitter Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 Week In Shorts - Twitter Description");
		logger.info("PWA2-10112 Week In Shorts - Twitter Description");
		String twitterdesc = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgDesc, "Twitter Title");
		twitterdesc = twitterdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twitterdesc);
		logger.info("Expected Twitter Description: " + expectedtwitterDesc);
		extent.extentLogger("", "Expected Twitter Description: " + expectedtwitterDesc);
		logger.info("Actual Twitter Description: " + twitterdesc);
		extent.extentLogger("", "Actual Twitter Description: " + twitterdesc);
		if (twitterdesc.equals(expectedtwitterDesc)) {
			logger.info("Expected and Actual Twitter Description match");
			extent.extentLogger("", "Expected and Actual Twitter Description match");
		} else {
			logger.error("Expected and Actual Twitter Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Description mismatch");
		}
	}

	public void PWA2_10112_tvshowTrailerMeta(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-10112 TV Show Trailer - Title");
		logger.info("PWA2-10112 TV Show Trailer - Title");
		navigateToHome();
		String home = getParameterFromXML("url");

		String tvshowTrailerUrl = home + "tvshows/details/naagini-2/0-6-2498/naagini-2-june-04-2020-trailer/0-1-332919";
		String expectedTitle = "Watch Naagini - 2 TV Serial Trailer of 4th June 2020 Online on ZEE5";
		String expectedDescription = "Enjoy 4th June 2020's trailer of Naagini - 2 TV serial online, starring Laxman,Chandan & Chetan,Tejaswani,Trishool,Prithvi,Marina Tara,Mohan,Jayalakshmi - Kamalamma,Surya Kiran,Jennifer,Sharvari,Trivikram,Shivani,JK,Jeevan,Prakash,Harsha,Muni,Shashi,Namratha. Watch best scenes, clips, previews & more of Naagini - 2 in HD on ZEE5";
		String expectedOgtitle = "Watch Naagini - 2 TV Serial Trailer of 4th June 2020 Online on ZEE5";
		String expectedOgdescription = "Enjoy 4th June 2020's trailer of Naagini - 2 TV serial online, starring Laxman,Chandan & Chetan,Tejaswani,Trishool,Prithvi,Marina Tara,Mohan,Jayalakshmi - Kamalamma,Surya Kiran,Jennifer,Sharvari,Trivikram,Shivani,JK,Jeevan,Prakash,Harsha,Muni,Shashi,Namratha. Watch best scenes, clips, previews & more of Naagini - 2 in HD on ZEE5";
		String expectedtwitterTitle = "Watch Naagini - 2 TV Serial Trailer of 4th June 2020 Online on ZEE5";
		String expectedtwitterDesc = "Enjoy 4th June 2020's trailer of Naagini - 2 TV serial online, starring Laxman,Chandan & Chetan,Tejaswani,Trishool,Prithvi,Marina Tara,Mohan,Jayalakshmi - Kamalamma,Surya Kiran,Jennifer,Sharvari,Trivikram,Shivani,JK,Jeevan,Prakash,Harsha,Muni,Shashi,Namratha. Watch best scenes, clips, previews & more of Naagini - 2 in HD on ZEE5";

		getWebDriver().get(tvshowTrailerUrl);
		logger.info("Navigated to url: " + tvshowTrailerUrl);
		extent.extentLogger("", "Navigated to url: " + tvshowTrailerUrl);
		String url = getWebDriver().getCurrentUrl();
		url = "view-source:" + url;
		getWebDriver().get(url);
		logger.info("Navigated to url: " + url);
		extent.extentLogger("", "Navigated to url: " + url);
		waitTime(3000);
		String title = getElementPropertyToString("innerText", PWAHomePage.objTitle, "Title");
		title = title.replace("&amp;", "&").replace("&#x27;", "'");
		title = title.split("</title>")[0].split("<title")[1].split(">")[1];
		System.out.println(title);
		logger.info("Expected Title: " + expectedTitle);
		extent.extentLogger("", "Expected Title: " + expectedTitle);
		logger.info("Actual Title: " + title);
		extent.extentLogger("", "Actual Title: " + title);
		if (title.equals(expectedTitle)) {
			logger.info("Expected and Actual title match");
			extent.extentLogger("", "Expected and Actual title match");
		} else {
			logger.error("Expected and Actual title mismatch");
			extent.extentLoggerFail("", "Expected and Actual title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 TV Show Trailer - Description");
		logger.info("PWA2-10112 TV Show Trailer - Description");
		String description = getElementPropertyToString("innerText", PWAHomePage.objSourceDescription, "Description");
		description = description.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(description);
		logger.info("Expected Description: " + expectedDescription);
		extent.extentLogger("", "Expected Description: " + expectedDescription);
		logger.info("Actual Description: " + description);
		extent.extentLogger("", "Actual Description: " + description);
		if (description.equals(expectedDescription)) {
			logger.info("Expected and Actual description match");
			extent.extentLogger("", "Expected and Actual description match");
		} else {
			logger.error("Expected and Actual description mismatch");
			extent.extentLoggerFail("", "Expected and Actual description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 TV Show Trailer - OG Title");
		logger.info("PWA2-10112 TV Show Trailer - OG Title");
		String ogtitle = getElementPropertyToString("innerText", PWAHomePage.objOgTitle, "OG Title");
		ogtitle = ogtitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogtitle);
		logger.info("Expected OG Title: " + expectedOgtitle);
		extent.extentLogger("", "Expected OG Title: " + expectedOgtitle);
		logger.info("Actual OG Title: " + ogtitle);
		extent.extentLogger("", "Actual OG Title: " + ogtitle);
		if (ogtitle.equals(expectedOgtitle)) {
			logger.info("Expected and Actual OG Title match");
			extent.extentLogger("", "Expected and Actual OG Title match");
		} else {
			logger.error("Expected and Actual OG Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 TV Show Trailer - OG Description");
		logger.info("PWA2-10112 TV Show Trailer - OG Description");
		String ogdesc = getElementPropertyToString("innerText", PWAHomePage.objOgDesc, "OG Description");
		ogdesc = ogdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(ogdesc);
		logger.info("Expected OG Description: " + expectedOgdescription);
		extent.extentLogger("", "Expected OG Description: " + expectedOgdescription);
		logger.info("Actual OG Description: " + ogdesc);
		extent.extentLogger("", "Actual OG Description: " + ogdesc);
		if (ogdesc.equals(expectedOgdescription)) {
			logger.info("Expected and Actual OG Description match");
			extent.extentLogger("", "Expected and Actual OG Description match");
		} else {
			logger.error("Expected and Actual OG Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual OG Description mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 TV Show Trailer - Twitter Title");
		logger.info("PWA2-10112 TV Show Trailer - Twitter Title");
		String twittertitle = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgTitle, "Twitter Title");
		twittertitle = twittertitle.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twittertitle);
		logger.info("Expected Twitter Title: " + expectedtwitterTitle);
		extent.extentLogger("", "Expected Twitter Title: " + expectedtwitterTitle);
		logger.info("Actual Twitter Title: " + twittertitle);
		extent.extentLogger("", "Actual Twitter Title: " + twittertitle);
		if (twittertitle.equals(expectedtwitterTitle)) {
			logger.info("Expected and Actual Twitter Title match");
			extent.extentLogger("", "Expected and Actual Twitter Title match");
		} else {
			logger.error("Expected and Actual Twitter Title mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Title mismatch");
		}

		extent.HeaderChildNode("PWA2-10112 TV Show Trailer - Twitter Description");
		logger.info("PWA2-10112 TV Show Trailer - Twitter Description");
		String twitterdesc = getElementPropertyToString("innerText", PWAHomePage.objTwitterOgDesc, "Twitter Title");
		twitterdesc = twitterdesc.replace("&amp;", "&").replace("&#x27;", "'");
		System.out.println(twitterdesc);
		logger.info("Expected Twitter Description: " + expectedtwitterDesc);
		extent.extentLogger("", "Expected Twitter Description: " + expectedtwitterDesc);
		logger.info("Actual Twitter Description: " + twitterdesc);
		extent.extentLogger("", "Actual Twitter Description: " + twitterdesc);
		if (twitterdesc.equals(expectedtwitterDesc)) {
			logger.info("Expected and Actual Twitter Description match");
			extent.extentLogger("", "Expected and Actual Twitter Description match");
		} else {
			logger.error("Expected and Actual Twitter Description mismatch");
			extent.extentLoggerFail("", "Expected and Actual Twitter Description mismatch");
		}
	}

	public void PWA2_10143_headingOptforTabPageFromSource(String userType, String tabName, String page, String h1Tag)
			throws Exception {
		extent.HeaderChildNode("PWA2-10143 - H1 tag for the " + page);
		logger.info("PWA2-10143 - H1 tag for the " + page);
		navigateToHome();
		navigateToAnyScreenOnWeb(tabName);
		if (verifyElementPresent(PWAHomePage.objPageH1TitleSEO, "H1 tag")) {
			String actualH1Title = getElementPropertyToString("innerText", PWAHomePage.objPageH1TitleSEO, "");
			if (actualH1Title.equals(h1Tag)) {
				logger.info("Expected H1 tag displayed: " + h1Tag);
				extent.extentLogger("", "Expected H1 tag displayed: " + h1Tag);
			} else {
				logger.error(actualH1Title + " displayed as H1 tag instead of " + h1Tag);
				extent.extentLoggerFail("", actualH1Title + " displayed as H1 tag instead of " + h1Tag);
			}
		}
		extent.HeaderChildNode("PWA2-10143 - H2 tag for the " + page);
		logger.info("PWA2-10143 - H2 tag for the " + page);
		Response resp = ResponseInstance.getResponseForPages(tabName.toLowerCase(), "en,hi,kn");
		ArrayList<String> apitrays = new ArrayList<String>();
		int numberOfTrays = resp.jsonPath().get("buckets.size()");
		if (numberOfTrays > 2)
			numberOfTrays = 2;
		for (int i = 1; i < numberOfTrays; i++) {
			apitrays.add(resp.jsonPath().getString("buckets[" + i + "].title"));
		}
		logger.info("First tray title from API: " + apitrays);
		extent.extentLogger("", "First tray title from API: " + apitrays);
		String tray1 = apitrays.get(0).toString();
		String sourceurl = "view-source:" + getWebDriver().getCurrentUrl();
		getWebDriver().get(sourceurl);
		String h2FromSource = findElement(PWAHomePage.objTayH2TitleSEOFromSource).getAttribute("innerText").toString();
		h2FromSource = h2FromSource.split("<h2 class=\"legendTitle \">")[1].split("</h2>")[0];
		System.out.println(h2FromSource);
		logger.info("First Tray title from source with h2 tag: " + h2FromSource);
		extent.extentLogger("", "First Tray title from source with h2 tag: " + h2FromSource);
		if (h2FromSource.equals(tray1)) {
			logger.info("h2 verification for tray title passed");
			extent.extentLogger("", "h2 verification for tray title passed");
		} else {
			logger.error("h2 verification for tray title failed");
			extent.extentLoggerFail("", "h2 verification for tray title failed");
		}
	}

	public void PWA2_10143_headingOptforDetailsPageFromSource(String userType, String url, String page, String h1Tag)
			throws Exception {
		extent.HeaderChildNode("PWA2-10143 - H1 tag for the " + page);
		logger.info("PWA2-10143 - H1 tag for the " + page);
		navigateToHome();
		String home = getParameterFromXML("url");
		url = home + url;
		getWebDriver().get(url);
		logger.info("Navigated to URL: " + url);
		extent.extentLogger("", "Navigated to URL: " + url);
		waitTime(2000);
		if (verifyElementPresent(PWAHomePage.objPageH1TitleSEO2, "H1 tag")) {
			String actualH1Title = getElementPropertyToString("innerText", PWAHomePage.objPageH1TitleSEO2, "");
			if (actualH1Title.equals(h1Tag)) {
				logger.info("Expected H1 tag displayed: " + h1Tag);
				extent.extentLogger("", "Expected H1 tag displayed: " + h1Tag);
			} else {
				logger.error(actualH1Title + "displayed as H1 tag instead of " + h1Tag);
				extent.extentLoggerFail("", actualH1Title + "displayed as H1 tag instead of " + h1Tag);
			}
		}
		extent.HeaderChildNode("PWA2-10143 - H2 tag for the " + page);
		logger.info("PWA2-10143 - H2 tag for the " + page);
		String trayUI = findElement(PWAHomePage.objTrayH2TitleSEOElements).getText();
		logger.info("Tray fetched from UI: " + trayUI);
		extent.extentLogger("", "Tray fetched from UI: " + trayUI);
		String sourceurl = "view-source:" + getWebDriver().getCurrentUrl();
		getWebDriver().get(sourceurl);
		String h2FromSource = findElement(PWAHomePage.objTayH2TitleSEOFromSource).getAttribute("innerText").toString();
		try {
			h2FromSource = h2FromSource.split("<h2 class=\"legendTitle \">")[1].split("</h2>")[0];
			System.out.println(h2FromSource);
			logger.info("First Tray title from source with h2 tag: " + h2FromSource);
			extent.extentLogger("", "First Tray title from source with h2 tag: " + h2FromSource);
			if (h2FromSource.equals(trayUI)) {
				logger.info("h2 verification for tray title passed");
				extent.extentLogger("", "h2 verification for tray title passed");
			} else {
				logger.error("h2 verification for tray title failed");
				extent.extentLoggerFail("", "h2 verification for tray title failed");
			}
		} catch (Exception e) {
			logger.error("h2 for tray title is not present in source");
			extent.extentLoggerFail("", "h2 for tray title is not present in source");
		}

	}

	public void PWA2_10143_headingOptforPlayersPageFromSource(String userType, String page) throws Exception {
		extent.HeaderChildNode("PWA2-10143 - H1 tag for the " + page);
		logger.info("PWA2-10143 - H1 tag for the " + page);
		navigateToHome();
		String url = "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya/0-1-6z57435";
		String home = getParameterFromXML("url");
		url = home + url;
		getWebDriver().get(url);
		logger.info("Navigated to URL: " + url);
		extent.extentLogger("", "Navigated to URL: " + url);
		String contentID = "0-1-6z57435";
		String tvShowID = "0-6-366";
		String channelID = "";
		LocalStorage local = ((ChromeDriver) getWebDriver()).getLocalStorage();
		Response spapiResp = ResponseInstance.getSinglePlayBackDetails(contentID, tvShowID, "",
				local.getItem("guestToken"));
		String creativeTitle = spapiResp.jsonPath().get("assetDetails.extended_wh.creative_title").toString();
		logger.info("Creative Title fetched from API: " + creativeTitle);
		extent.extentLogger("", "Creative Title fetched from API: " + creativeTitle);
		String h1Tag = creativeTitle;
		if (verifyElementPresent(PWAHomePage.objPageH1TitleSEO2, "H1 tag")) {
			String actualH1Title = getElementPropertyToString("innerText", PWAHomePage.objPageH1TitleSEO2, "");
			if (actualH1Title.equals(h1Tag)) {
				logger.info("Expected H1 tag displayed: " + h1Tag);
				extent.extentLogger("", "Expected H1 tag displayed: " + h1Tag);
			} else {
				logger.error(actualH1Title + " is displayed as H1 tag instead of " + h1Tag);
				extent.extentLoggerFail("", actualH1Title + " is displayed as H1 tag instead of " + h1Tag);
			}
		}

		extent.HeaderChildNode("PWA2-10143 - Verify the TV Show Episode playback page title below the player");
		logger.info("PWA2-10143 - Verify the TV Show Episode playback page title below the player");
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle, "")
				.toString();
		logger.info("Player page title fetched: " + consumptionPageTitle);
		extent.extentLogger("", "Player page title fetched: " + consumptionPageTitle);
		if (consumptionPageTitle.equals(h1Tag)) {
			logger.info("Expected title below player displayed: " + h1Tag);
			extent.extentLogger("", "Expected title below player displayed: " + h1Tag);
		} else {
			logger.error(consumptionPageTitle + "displayed as title below player instead of " + h1Tag);
			extent.extentLoggerFail("", consumptionPageTitle + "displayed as title below player instead of " + h1Tag);
		}
		extent.HeaderChildNode("PWA2-10143 - H2 tag for the " + page);
		logger.info("PWA2-10143 - H2 tag for the " + page);
		for (int i = 0; i < 9; i++) {
			partialScroll();
			waitTime(2000);
		}
		waitTime(4000);
		String trayUI = findElement(PWAHomePage.objTrayH2TitleSEOElements).getText();
		logger.info("Tray fetched from UI: " + trayUI);
		extent.extentLogger("", "Tray fetched from UI: " + trayUI);
		String sourceurl = "view-source:" + getWebDriver().getCurrentUrl();
		getWebDriver().get(sourceurl);
		String h2FromSource = findElement(PWAHomePage.objTayH2TitleSEOFromSource).getAttribute("innerText").toString();
		try {
			h2FromSource = h2FromSource.split("<h2 class=\"legendTitle \">")[1].split("</h2>")[0];
			System.out.println(h2FromSource);
			logger.info("First Tray title from source with h2 tag: " + h2FromSource);
			extent.extentLogger("", "First Tray title from source with h2 tag: " + h2FromSource);
			if (h2FromSource.equals(trayUI)) {
				logger.info("h2 verification for tray title passed");
				extent.extentLogger("", "h2 verification for tray title passed");
			} else {
				logger.error("h2 verification for tray title failed");
				extent.extentLoggerFail("", "h2 verification for tray title failed");
			}
		} catch (Exception e) {
			logger.error("h2 for tray title is not present in source");
			extent.extentLoggerFail("", "h2 for tray title is not present in source");
		}
	}

	public void PWA2_10143_headingOptforSpoilerPageFromSource(String userType, String page) throws Exception {
		extent.HeaderChildNode("PWA2-10143 - H1 tag for the " + page);
		logger.info("PWA2-10143 - H1 tag for the " + page);
		navigateToHome();
		String url = "tvshows/details/kumkum-bhagya/0-6-127/kumkum-bhagya-november-19-2020-episode-spoiler/0-1-manual_1h87duq16dco";
		String home = getParameterFromXML("url");
		url = home + url;
		getWebDriver().get(url);
		logger.info("Navigated to URL: " + url);
		extent.extentLogger("", "Navigated to URL: " + url);
		String contentID = "0-1-manual_1h87duq16dco";
		String tvShowID = "0-6-127";
		String channelID = "";
		LocalStorage local = ((ChromeDriver) getWebDriver()).getLocalStorage();
		Response spapiResp = ResponseInstance.getSinglePlayBackDetails(contentID, tvShowID, "",
				local.getItem("guestToken"));
		String creativeTitle = "";
		try {
			creativeTitle = spapiResp.jsonPath().get("assetDetails.extended_wh.creative_title").toString();
			logger.info("Creative Title fetched from API: " + creativeTitle);
			extent.extentLogger("", "Creative Title fetched from API: " + creativeTitle);
			String h1Tag = creativeTitle;
			if (verifyElementPresent(PWAHomePage.objPageH1TitleSEO2, "H1 tag")) {
				String actualH1Title = getElementPropertyToString("innerText", PWAHomePage.objPageH1TitleSEO2, "");
				if (actualH1Title.equals(h1Tag)) {
					logger.info("Expected H1 tag displayed: " + h1Tag);
					extent.extentLogger("", "Expected H1 tag displayed: " + h1Tag);
				} else {
					logger.error(actualH1Title + "displayed as H1 tag instead of " + h1Tag);
					extent.extentLoggerFail("", actualH1Title + "displayed as H1 tag instead of " + h1Tag);
				}
			}

			extent.HeaderChildNode("PWA2-10143 - Verify the TV Show Episode playback page title below the player");
			logger.info("PWA2-10143 - Verify the TV Show Episode playback page title below the player");
			String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle, "")
					.toString();
			logger.info("Player page title fetched: " + consumptionPageTitle);
			extent.extentLogger("", "Player page title fetched: " + consumptionPageTitle);
			if (consumptionPageTitle.equals(h1Tag)) {
				logger.info("Expected title below player displayed: " + h1Tag);
				extent.extentLogger("", "Expected title below player displayed: " + h1Tag);
			} else {
				logger.error(consumptionPageTitle + "displayed as title below player instead of " + h1Tag);
				extent.extentLoggerFail("",
						consumptionPageTitle + "displayed as title below player instead of " + h1Tag);
			}
		} catch (Exception e) {
			logger.error("Creative Title fetch from API failed");
			extent.extentLoggerFail("", "Creative Title fetch from API failed");
		}
		extent.HeaderChildNode("PWA2-10143 - H2 tag for the " + page);
		logger.info("PWA2-10143 - H2 tag for the " + page);
		for (int i = 0; i < 9; i++) {
			partialScroll();
			waitTime(2000);
		}
		waitTime(4000);
		String trayUI = findElement(PWAHomePage.objTrayH2TitleSEOElements).getText();
		logger.info("Tray fetched from UI: " + trayUI);
		extent.extentLogger("", "Tray fetched from UI: " + trayUI);
		String sourceurl = "view-source:" + getWebDriver().getCurrentUrl();
		getWebDriver().get(sourceurl);
		String h2FromSource = findElement(PWAHomePage.objTayH2TitleSEOFromSource).getAttribute("innerText").toString();
		try {
			h2FromSource = h2FromSource.split("<h2 class=\"legendTitle \">")[1].split("</h2>")[0];
			System.out.println(h2FromSource);
			logger.info("First Tray title from source with h2 tag: " + h2FromSource);
			extent.extentLogger("", "First Tray title from source with h2 tag: " + h2FromSource);
			if (h2FromSource.equals(trayUI)) {
				logger.info("h2 verification for tray title passed");
				extent.extentLogger("", "h2 verification for tray title passed");
			} else {
				logger.error("h2 verification for tray title failed");
				extent.extentLoggerFail("", "h2 verification for tray title failed");
			}
		} catch (Exception e) {
			logger.error("h2 for tray title is not present in source");
			extent.extentLoggerFail("", "h2 for tray title is not present in source");
		}
	}

	public void PWA2_10143_headingOptforWebisodePageFromSource(String userType, String page) throws Exception {
		extent.HeaderChildNode("PWA2-10143 - H1 tag for the " + page);
		logger.info("PWA2-10143 - H1 tag for the " + page);
		navigateToHome();
		String url = "tvshows/details/kumkum-bhagya/0-6-127/kumkum-bhagya-november-17-2020-webisode/0-1-manual_4j4idh1pdc50";
		String home = getParameterFromXML("url");
		url = home + url;
		getWebDriver().get(url);
		logger.info("Navigated to URL: " + url);
		extent.extentLogger("", "Navigated to URL: " + url);
		String contentID = "0-1-manual_4j4idh1pdc50";
		String tvShowID = "0-6-127";
		String channelID = "";
		LocalStorage local = ((ChromeDriver) getWebDriver()).getLocalStorage();
		Response spapiResp = ResponseInstance.getSinglePlayBackDetails(contentID, tvShowID, "",
				local.getItem("guestToken"));
		String creativeTitle = "";
		try {
			creativeTitle = spapiResp.jsonPath().get("assetDetails.extended_wh.creative_title").toString();
			logger.info("Creative Title fetched from API: " + creativeTitle);
			extent.extentLogger("", "Creative Title fetched from API: " + creativeTitle);
			String h1Tag = creativeTitle;
			if (verifyElementPresent(PWAHomePage.objPageH1TitleSEO2, "H1 tag")) {
				String actualH1Title = getElementPropertyToString("innerText", PWAHomePage.objPageH1TitleSEO2, "");
				if (actualH1Title.equals(h1Tag)) {
					logger.info("Expected H1 tag displayed: " + h1Tag);
					extent.extentLogger("", "Expected H1 tag displayed: " + h1Tag);
				} else {
					logger.error(actualH1Title + "displayed as H1 tag instead of " + h1Tag);
					extent.extentLoggerFail("", actualH1Title + "displayed as H1 tag instead of " + h1Tag);
				}
			}

			extent.HeaderChildNode("PWA2-10143 - Verify the TV Show Episode playback page title below the player");
			logger.info("PWA2-10143 - Verify the TV Show Episode playback page title below the player");
			String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle, "")
					.toString();
			logger.info("Player page title fetched: " + consumptionPageTitle);
			extent.extentLogger("", "Player page title fetched: " + consumptionPageTitle);
			if (consumptionPageTitle.equals(h1Tag)) {
				logger.info("Expected title below player displayed: " + h1Tag);
				extent.extentLogger("", "Expected title below player displayed: " + h1Tag);
			} else {
				logger.error(consumptionPageTitle + "displayed as title below player instead of " + h1Tag);
				extent.extentLoggerFail("",
						consumptionPageTitle + "displayed as title below player instead of " + h1Tag);
			}
		} catch (Exception e) {
			logger.error("Creative Title fetch from API failed");
			extent.extentLoggerFail("", "Creative Title fetch from API failed");
		}
		extent.HeaderChildNode("PWA2-10143 - H2 tag for the " + page);
		logger.info("PWA2-10143 - H2 tag for the " + page);
		for (int i = 0; i < 9; i++) {
			partialScroll();
			waitTime(2000);
		}
		waitTime(4000);
		String trayUI = findElement(PWAHomePage.objTrayH2TitleSEOElements).getText();
		logger.info("Tray fetched from UI: " + trayUI);
		extent.extentLogger("", "Tray fetched from UI: " + trayUI);
		String sourceurl = "view-source:" + getWebDriver().getCurrentUrl();
		getWebDriver().get(sourceurl);
		String h2FromSource = findElement(PWAHomePage.objTayH2TitleSEOFromSource).getAttribute("innerText").toString();
		try {
			h2FromSource = h2FromSource.split("<h2 class=\"legendTitle \">")[1].split("</h2>")[0];
			System.out.println(h2FromSource);
			logger.info("First Tray title from source with h2 tag: " + h2FromSource);
			extent.extentLogger("", "First Tray title from source with h2 tag: " + h2FromSource);
			if (h2FromSource.equals(trayUI)) {
				logger.info("h2 verification for tray title passed");
				extent.extentLogger("", "h2 verification for tray title passed");
			} else {
				logger.error("h2 verification for tray title failed");
				extent.extentLoggerFail("", "h2 verification for tray title failed");
			}
		} catch (Exception e) {
			logger.error("h2 for tray title is not present in source");
			extent.extentLoggerFail("", "h2 for tray title is not present in source");
		}
	}

	public void PWA2_10143_headingOptforMobisodePageFromSource(String userType, String page) throws Exception {
		extent.HeaderChildNode("PWA2-10143 - H1 tag for the " + page);
		logger.info("PWA2-10143 - H1 tag for the " + page);
		navigateToHome();
		String url = "tvshows/details/kumkum-bhagya/0-6-127/kumkum-bhagya-19-october-2020-to-01-november-2020-quick-recap/0-1-manual_10jpf6bm6tn0";
		String home = getParameterFromXML("url");
		url = home + url;
		getWebDriver().get(url);
		logger.info("Navigated to URL: " + url);
		extent.extentLogger("", "Navigated to URL: " + url);
		String contentID = "0-1-manual_10jpf6bm6tn0";
		String tvShowID = "0-6-127";
		String channelID = "";
		LocalStorage local = ((ChromeDriver) getWebDriver()).getLocalStorage();
		Response spapiResp = ResponseInstance.getSinglePlayBackDetails(contentID, tvShowID, "",
				local.getItem("guestToken"));
		String creativeTitle = "";
		try {
			creativeTitle = spapiResp.jsonPath().get("assetDetails.extended_wh.creative_title").toString();
			logger.info("Creative Title fetched from API: " + creativeTitle);
			extent.extentLogger("", "Creative Title fetched from API: " + creativeTitle);
			String h1Tag = creativeTitle;
			if (verifyElementPresent(PWAHomePage.objPageH1TitleSEO2, "H1 tag")) {
				String actualH1Title = getElementPropertyToString("innerText", PWAHomePage.objPageH1TitleSEO2, "");
				if (actualH1Title.equals(h1Tag)) {
					logger.info("Expected H1 tag displayed: " + h1Tag);
					extent.extentLogger("", "Expected H1 tag displayed: " + h1Tag);
				} else {
					logger.error(actualH1Title + "displayed as H1 tag instead of " + h1Tag);
					extent.extentLoggerFail("", actualH1Title + "displayed as H1 tag instead of " + h1Tag);
				}
			}

			extent.HeaderChildNode("PWA2-10143 - Verify the TV Show Episode playback page title below the player");
			logger.info("PWA2-10143 - Verify the TV Show Episode playback page title below the player");
			String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle, "")
					.toString();
			logger.info("Player page title fetched: " + consumptionPageTitle);
			extent.extentLogger("", "Player page title fetched: " + consumptionPageTitle);
			if (consumptionPageTitle.equals(h1Tag)) {
				logger.info("Expected title below player displayed: " + h1Tag);
				extent.extentLogger("", "Expected title below player displayed: " + h1Tag);
			} else {
				logger.error(consumptionPageTitle + "displayed as title below player instead of " + h1Tag);
				extent.extentLoggerFail("",
						consumptionPageTitle + "displayed as title below player instead of " + h1Tag);
			}
		} catch (Exception e) {
			logger.error("Creative Title fetch from API failed");
			extent.extentLoggerFail("", "Creative Title fetch from API failed");
		}
		extent.HeaderChildNode("PWA2-10143 - H2 tag for the " + page);
		logger.info("PWA2-10143 - H2 tag for the " + page);
		for (int i = 0; i < 9; i++) {
			partialScroll();
			waitTime(2000);
		}
		waitTime(4000);
		String trayUI = findElement(PWAHomePage.objTrayH2TitleSEOElements).getText();
		logger.info("Tray fetched from UI: " + trayUI);
		extent.extentLogger("", "Tray fetched from UI: " + trayUI);
		String sourceurl = "view-source:" + getWebDriver().getCurrentUrl();
		getWebDriver().get(sourceurl);
		String h2FromSource = findElement(PWAHomePage.objTayH2TitleSEOFromSource).getAttribute("innerText").toString();
		try {
			h2FromSource = h2FromSource.split("<h2 class=\"legendTitle \">")[1].split("</h2>")[0];
			System.out.println(h2FromSource);
			logger.info("First Tray title from source with h2 tag: " + h2FromSource);
			extent.extentLogger("", "First Tray title from source with h2 tag: " + h2FromSource);
			if (h2FromSource.equals(trayUI)) {
				logger.info("h2 verification for tray title passed");
				extent.extentLogger("", "h2 verification for tray title passed");
			} else {
				logger.error("h2 verification for tray title failed");
				extent.extentLoggerFail("", "h2 verification for tray title failed");
			}
		} catch (Exception e) {
			logger.error("h2 for tray title is not present in source");
			extent.extentLoggerFail("", "h2 for tray title is not present in source");
		}
	}

	public void PWA2_10143_headingOptforWeekInShortPageFromSource(String userType, String page) throws Exception {
		extent.HeaderChildNode("PWA2-10143 - H1 tag for the " + page);
		logger.info("PWA2-10143 - H1 tag for the " + page);
		navigateToHome();
		String url = "tvshows/details/kundali-bhagya/0-6-366/week-in-short-kundali-bhagya-april-05-2021-to-april-09-2021/0-1-manual_7g67fl4hssb0";
		String home = getParameterFromXML("url");
		url = home + url;
		getWebDriver().get(url);
		logger.info("Navigated to URL: " + url);
		extent.extentLogger("", "Navigated to URL: " + url);
		String contentID = "0-1-manual_7g67fl4hssb0";
		String tvShowID = "0-6-366";
		String channelID = "";
		LocalStorage local = ((ChromeDriver) getWebDriver()).getLocalStorage();
		Response spapiResp = ResponseInstance.getSinglePlayBackDetails(contentID, tvShowID, "",
				local.getItem("guestToken"));
		String creativeTitle = "";
		try {
			creativeTitle = spapiResp.jsonPath().get("assetDetails.extended_wh.creative_title").toString();
			logger.info("Creative Title fetched from API: " + creativeTitle);
			extent.extentLogger("", "Creative Title fetched from API: " + creativeTitle);
			String h1Tag = creativeTitle;
			if (verifyElementPresent(PWAHomePage.objPageH1TitleSEO2, "H1 tag")) {
				String actualH1Title = getElementPropertyToString("innerText", PWAHomePage.objPageH1TitleSEO2, "");
				if (actualH1Title.equals(h1Tag)) {
					logger.info("Expected H1 tag displayed: " + h1Tag);
					extent.extentLogger("", "Expected H1 tag displayed: " + h1Tag);
				} else {
					logger.error(actualH1Title + "displayed as H1 tag instead of " + h1Tag);
					extent.extentLoggerFail("", actualH1Title + "displayed as H1 tag instead of " + h1Tag);
				}
			}

			extent.HeaderChildNode("PWA2-10143 - Verify the TV Show Episode playback page title below the player");
			logger.info("PWA2-10143 - Verify the TV Show Episode playback page title below the player");
			String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle, "")
					.toString();
			logger.info("Player page title fetched: " + consumptionPageTitle);
			extent.extentLogger("", "Player page title fetched: " + consumptionPageTitle);
			if (consumptionPageTitle.equals(h1Tag)) {
				logger.info("Expected title below player displayed: " + h1Tag);
				extent.extentLogger("", "Expected title below player displayed: " + h1Tag);
			} else {
				logger.error(consumptionPageTitle + "displayed as title below player instead of " + h1Tag);
				extent.extentLoggerFail("",
						consumptionPageTitle + "displayed as title below player instead of " + h1Tag);
			}
		} catch (Exception e) {
			logger.error("Creative Title fetch from API failed");
			extent.extentLoggerFail("", "Creative Title fetch from API failed");
		}
		extent.HeaderChildNode("PWA2-10143 - H2 tag for the " + page);
		logger.info("PWA2-10143 - H2 tag for the " + page);
		for (int i = 0; i < 9; i++) {
			partialScroll();
			waitTime(2000);
		}
		waitTime(4000);
		String trayUI = findElement(PWAHomePage.objTrayH2TitleSEOElements).getText();
		logger.info("Tray fetched from UI: " + trayUI);
		extent.extentLogger("", "Tray fetched from UI: " + trayUI);
		String sourceurl = "view-source:" + getWebDriver().getCurrentUrl();
		getWebDriver().get(sourceurl);
		String h2FromSource = findElement(PWAHomePage.objTayH2TitleSEOFromSource).getAttribute("innerText").toString();
		try {
			h2FromSource = h2FromSource.split("<h2 class=\"legendTitle \">")[1].split("</h2>")[0];
			System.out.println(h2FromSource);
			logger.info("First Tray title from source with h2 tag: " + h2FromSource);
			extent.extentLogger("", "First Tray title from source with h2 tag: " + h2FromSource);
			if (h2FromSource.equals(trayUI)) {
				logger.info("h2 verification for tray title passed");
				extent.extentLogger("", "h2 verification for tray title passed");
			} else {
				logger.error("h2 verification for tray title failed");
				extent.extentLoggerFail("", "h2 verification for tray title failed");
			}
		} catch (Exception e) {
			logger.error("h2 for tray title is not present in source");
			extent.extentLoggerFail("", "h2 for tray title is not present in source");
		}
	}

	public void PWA2_10143_headingOptforBestScenePageFromSource(String userType, String page) throws Exception {
		extent.HeaderChildNode("PWA2-10143 - H1 tag for the " + page);
		logger.info("PWA2-10143 - H1 tag for the " + page);
		navigateToHome();
		String url = "tvshows/details/kumkum-bhagya/0-6-127/kumkum-bhagya-november-17-2020-best-scene/0-1-manual_1ne6v88r7b28";
		String home = getParameterFromXML("url");
		url = home + url;
		getWebDriver().get(url);
		logger.info("Navigated to URL: " + url);
		extent.extentLogger("", "Navigated to URL: " + url);
		String contentID = "0-1-manual_1ne6v88r7b28";
		String tvShowID = "0-6-127";
		String channelID = "";
		LocalStorage local = ((ChromeDriver) getWebDriver()).getLocalStorage();
		Response spapiResp = ResponseInstance.getSinglePlayBackDetails(contentID, tvShowID, "",
				local.getItem("guestToken"));
		String creativeTitle = "";
		try {
			creativeTitle = spapiResp.jsonPath().get("assetDetails.extended_wh.creative_title").toString();
			logger.info("Creative Title fetched from API: " + creativeTitle);
			extent.extentLogger("", "Creative Title fetched from API: " + creativeTitle);
			String h1Tag = creativeTitle;
			if (verifyElementPresent(PWAHomePage.objPageH1TitleSEO2, "H1 tag")) {
				String actualH1Title = getElementPropertyToString("innerText", PWAHomePage.objPageH1TitleSEO2, "");
				if (actualH1Title.equals(h1Tag)) {
					logger.info("Expected H1 tag displayed: " + h1Tag);
					extent.extentLogger("", "Expected H1 tag displayed: " + h1Tag);
				} else {
					logger.error(actualH1Title + "displayed as H1 tag instead of " + h1Tag);
					extent.extentLoggerFail("", actualH1Title + "displayed as H1 tag instead of " + h1Tag);
				}
			}

			extent.HeaderChildNode("PWA2-10143 - Verify the TV Show Episode playback page title below the player");
			logger.info("PWA2-10143 - Verify the TV Show Episode playback page title below the player");
			String consumptionPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle, "")
					.toString();
			logger.info("Player page title fetched: " + consumptionPageTitle);
			extent.extentLogger("", "Player page title fetched: " + consumptionPageTitle);
			if (consumptionPageTitle.equals(h1Tag)) {
				logger.info("Expected title below player displayed: " + h1Tag);
				extent.extentLogger("", "Expected title below player displayed: " + h1Tag);
			} else {
				logger.error(consumptionPageTitle + "displayed as title below player instead of " + h1Tag);
				extent.extentLoggerFail("",
						consumptionPageTitle + "displayed as title below player instead of " + h1Tag);
			}
		} catch (Exception e) {
			logger.error("Creative Title fetch from API failed");
			extent.extentLoggerFail("", "Creative Title fetch from API failed");
		}
		extent.HeaderChildNode("PWA2-10143 - H2 tag for the " + page);
		logger.info("PWA2-10143 - H2 tag for the " + page);
		for (int i = 0; i < 9; i++) {
			partialScroll();
			waitTime(2000);
		}
		waitTime(4000);
		String trayUI = findElement(PWAHomePage.objTrayH2TitleSEOElements).getText();
		logger.info("Tray fetched from UI: " + trayUI);
		extent.extentLogger("", "Tray fetched from UI: " + trayUI);
		String sourceurl = "view-source:" + getWebDriver().getCurrentUrl();
		getWebDriver().get(sourceurl);
		String h2FromSource = findElement(PWAHomePage.objTayH2TitleSEOFromSource).getAttribute("innerText").toString();
		try {
			h2FromSource = h2FromSource.split("<h2 class=\"legendTitle \">")[1].split("</h2>")[0];
			System.out.println(h2FromSource);
			logger.info("First Tray title from source with h2 tag: " + h2FromSource);
			extent.extentLogger("", "First Tray title from source with h2 tag: " + h2FromSource);
			if (h2FromSource.equals(trayUI)) {
				logger.info("h2 verification for tray title passed");
				extent.extentLogger("", "h2 verification for tray title passed");
			} else {
				logger.error("h2 verification for tray title failed");
				extent.extentLoggerFail("", "h2 verification for tray title failed");
			}
		} catch (Exception e) {
			logger.error("h2 for tray title is not present in source");
			extent.extentLoggerFail("", "h2 for tray title is not present in source");
		}
	}

	public void PWA2_10057_ABTestingBannerSlider(String userType) throws Exception {
		extent.HeaderChildNode("PWA2-10057 A/B testing - Verify experimentStarted value in Session Storage");
		logger.info("PWA2-10057 A/B testing - Verify experimentStarted value in Session Storage");
		WebStorage webStorage = (WebStorage) new Augmenter().augment(getWebDriver());
		SessionStorage sessionStorage = webStorage.getSessionStorage();
		String experimentStartedValue = sessionStorage.getItem("experimentStarted");
		if (experimentStartedValue.equals("\"A\"") || experimentStartedValue.equals("\"B\"")) {
			logger.info("Expected value for experimentStarted in Session Storage: " + experimentStartedValue);
			extent.extentLogger("",
					"Expected value for experimentStarted in Session Storage: " + experimentStartedValue);
		} else {
			logger.error("Incorrect value for experimentStarted in Session Storage: " + experimentStartedValue
					+ ", instead of \"A\" or \"B\"");
			extent.extentLoggerFail("", "Incorrect value for experimentStarted in Session Storage: "
					+ experimentStartedValue + ", instead of \"A\" or \"B\"");
		}
		extent.HeaderChildNode(
				"PWA2-10057 A/B testing - Change experimentStarted value to A to verify Buy Plan CTA is displayed");
		logger.info("PWA2-10057 A/B testing - Change experimentStarted value to A to verify Buy Plan CTA is displayed");
		sessionStorage.setItem("experimentStarted", "\"A\"");
		navigateToHome();
		experimentStartedValue = sessionStorage.getItem("experimentStarted");
		if (experimentStartedValue.equals("\"A\"")) {
			logger.info("Set value for experimentStarted is present in Session Storage: " + experimentStartedValue);
			extent.extentLogger("",
					"Set value for experimentStarted is present in Session Storage: " + experimentStartedValue);
		} else {
			logger.error("Value for experimentStarted in Session Storage is: " + experimentStartedValue
					+ ", instead of set value \"A\"");
			extent.extentLoggerFail("", "Value for experimentStarted in Session Storage is: " + experimentStartedValue
					+ ", instead of set value \"A\"");
		}
		if (!userType.equals("SubscribedUser")) {
			verifyElementPresent(PWAHomePage.objGetPremiumWebList, "Buy Plan CTA in Carousel Banner");
		} else {
			if (checkElementDisplayed(PWAHomePage.objGetPremiumWebList, "Buy Plan CTA")) {
				logger.error("Buy Plan CTA in Carousel is displayed for Subscribed User");
				extent.extentLoggerFail("", "Buy Plan CTA in Carousel is displayed for Subscribed User");
			} else {
				logger.info("Buy Plan CTA in Carousel is not displayed for Subscribed user, Expected behavior");
				extent.extentLogger("",
						"Buy Plan CTA in Carousel is not displayed for Subscribed user, Expected behavior");
			}
		}
		extent.HeaderChildNode(
				"PWA2-10057 A/B testing - Change experimentStarted value to B to verify Buy Plan CTA is not displayed");
		logger.info(
				"PWA2-10057 A/B testing - Change experimentStarted value to B to verify Buy Plan CTA is not displayed");
		sessionStorage.setItem("experimentStarted", "\"B\"");
		navigateToHome();
		experimentStartedValue = sessionStorage.getItem("experimentStarted");
		if (experimentStartedValue.equals("\"B\"")) {
			logger.info("Set value for experimentStarted is present in Session Storage: " + experimentStartedValue);
			extent.extentLogger("",
					"Set value for experimentStarted is present in Session Storage: " + experimentStartedValue);
		} else {
			logger.error("Value for experimentStarted in Session Storage is: " + experimentStartedValue
					+ ", instead of set value \"B\"");
			extent.extentLoggerFail("", "Value for experimentStarted in Session Storage is: " + experimentStartedValue
					+ ", instead of set value \"B\"");
		}
		if (checkElementDisplayed(PWAHomePage.objGetPremiumWebList, "Buy Plan CTA")) {
			logger.error("Buy Plan CTA in Carousel is displayed even though experimentalStarted value is \"B\"");
			extent.extentLoggerFail("",
					"Buy Plan CTA in Carousel is displayed even though experimentalStarted value is \"B\"");
		} else {
			logger.info("Buy Plan CTA in Carousel is not displayed, Expected behavior");
			extent.extentLogger("", "Buy Plan CTA in Carousel is not displayed, Expected behavior");
		}
	}

	public void AddToWatchList(String userType) throws Exception {
		extent.HeaderChildNode("Verify 'Add to Watchlist' functionality in consumption or Detail page");
		checkElementDisplayed(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
		click(PWAHamburgerMenuPage.objFirstcontentCard, "1st content card");
		click(PWAPlayerPage.watchListBtn, "Add to Watch list");

		extent.HeaderChildNode("Content duration and Content playback elapsed time should be displayed on the player.");
		verifyElementPresent(PWAPlayerPage.totalDurationTime, "Total time");
		verifyElementPresent(PWAPlayerPage.objcurrenttime, "Total time");
	}

	public void Grievancevalidation(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify whether \"Grievance Redressal\" option is displayed or not below Help center in Hamburger menu under info section");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		partialScroll();
		partialScroll();

		waitTime(2000);
		verifyElementPresent(PWAHamburgerMenuPage.objGrievance, "Grievance option");
		JSClick(PWAHamburgerMenuPage.objGrievance, "Grievance option");
		switchToWindow(2);
		if (verifyElementPresent(PWAHamburgerMenuPage.objGrievanceHeader, "Grievance Header screen")) {
			logger.info("User is navigated to Grievance Header screen");
			extent.extentLoggerPass("Help Center", "User is navigated to Grievance Header screen");
		}

		extent.HeaderChildNode(
				"Verify whether user is redirects to respective new webview post click on \"Grievance Redressal\" option");

		System.out.println("Current URL is " + getWebDriver().getCurrentUrl());
		String GrievanceURL = getWebDriver().getCurrentUrl();
		if (GrievanceURL.contains("Grievance")) {
			logger.info("Grievance Footer screen is opened in webview");
			extent.extentLogger("Grievance Footer", "Grievance Footer screen is opened in webview");

		}
		Back(1);

		extent.HeaderChildNode("Verify \"Grievance Redressal\" option is displayed in Footer section");
		if (verifyElementPresent(PWAHamburgerMenuPage.objGrievanceFooter, "Grievance footer")) {
			logger.info("User is navigated to Grievance footer screen");
			extent.extentLoggerPass("Help Center", "User is navigated to Grievance footer screen");
		}
		getWebDriver().close();
		waitTime(2000);
		switchToWindow(2);
		getWebDriver().close();
		switchToParentWindow();

	}

	public void ChannelPageValidationAndChromeCast(String usserType, String tabName) throws Exception {
		extent.HeaderChildNode("Verify the \"TV Channel\" displayed on the Header menu Navigation");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode("Verify the \"TV Channel\" displayed on the hamburger menu options");
		verifyElementPresent(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		click(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		if (verifyElementPresent(PWAHamburgerMenuPage.objExploreBtn, "Explore option")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objExploreBtn, "Explore option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("Channels"), "Web Stories option");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		}

		extent.HeaderChildNode("Verify the right side bottom arrow ");
		scrollToElement(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn);
		if (verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow button")) {

			logger.info("Navigate back to the Top of Application");
			extent.extentLoggerPass("Back to top", "Navigate back to the Top of Application");
		} else {
			logger.info("Didn't Navigate back to the Top of Application");
			extent.extentLoggerFail("Back to top", "Didn't Navigate back to the Top of Application");
		}

		extent.HeaderChildNode(
				"Verify if the user can navigated to Channel details page post click on any TV Channels from the landing page");
		verifyElementPresent(PWAHamburgerMenuPage.objFirstChannelCard, "First channel card");
		click(PWAHamburgerMenuPage.objFirstChannelCard, "First channel card");
		if (verifyElementPresent(PWAHamburgerMenuPage.objListOfChannel, "List of Channel")) {
			logger.info("List of channels are displayed , expected result ");
			extent.extentLoggerPass("Channel Page", "List of channels are displayed , expected result");
		} else {
			logger.info("List of channels are not  displayed ");
			extent.extentLoggerFail("Channel Page", "List of channels are not displayed ");
		}
		extent.HeaderChildNode("Verify on Tap of 'Zee5' Logo user should navigate to homepage.");
		verifyElementPresent(PWAHamburgerMenuPage.objZeeLogo, "ZeeLogo");

		extent.HeaderChildNode(
				"Verify that on each content card after mousehovor, meta data like (Channel names/Shows name/episodes name) are display.");
		trayTitleAndContentValidationWithApiDataClub("Channels", "Channels");

		extent.HeaderChildNode("Verify if the channel page link is displaying in the footer section");
		verifyElementPresent(PWAHamburgerMenuPage.objFooterLinks("Channels"), "Channels Link");

		extent.HeaderChildNode(
				"Verify if list of channel names are displayed below the channel name title in the footer section");
		verifyElementPresent(PWAHamburgerMenuPage.objChannelsList, "Channels list");

		mandatoryRegistrationPopUp(usserType);
		extent.HeaderChildNode(
				"Verify \"Chromecast\" Button is displayed on consumption screen for non-live contents.");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 10);
		type(PWASearchPage.objSearchEditBox, "Dadi Questions Kareena's Intentions", "Search bar");
		waitTime(3000);
		click(PWASearchPage.objspecificSearch, "Search Result");
		waitForPlayerAdToComplete("Video Player");
		waitTime(5000);
		if (verifyElementPresent(PWAHamburgerMenuPage.objChromeCast, "Chrome Cast ")) {
			logger.info("Chrome cast are displayed , expected result ");
			extent.extentLoggerPass("Chrome cast", "Chrome cast are displayed , expected result");
		} else {
			logger.info("Chrome cast are not  displayed ");
			extent.extentLoggerFail("Chrome cast", "Chrome cast are not displayed ");
		}

		extent.HeaderChildNode("Verify \"Chromecast\" Button is displayed on consumption page for Live Tv contents.");
		navigateToAnyScreenOnWeb("Live TV");
		verifyElementPresent(PWALiveTVPage.objCardTitle, "Card title");
		click(PWALiveTVPage.objCardTitle, "Card title");
		waitForPlayerAdToComplete("Video Player");
		waitTime(5000);
		if (verifyElementPresent(PWAHamburgerMenuPage.objChromeCast, "Chrome Cast ")) {
			logger.info("Chrome cast are displayed , expected result ");
			extent.extentLoggerPass("Chrome cast", "Chrome cast are displayed , expected result");
		} else {
			logger.info("Chrome cast are not  displayed ");
			extent.extentLoggerFail("Chrome cast", "Chrome cast are not displayed ");
		}
		verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize window icon");
		click(PWAPlayerPage.maximizeBtn, "Maximize window icon");
		waitTime(5000);
		if (verifyElementPresent(PWAHamburgerMenuPage.objChromeCast, "Chrome Cast ")) {
			logger.info("Chrome cast are displayed , expected result ");
			extent.extentLoggerPass("Chrome cast", "Chrome cast are displayed , expected result");
		} else {
			logger.info("Chrome cast are not  displayed ");
			extent.extentLoggerFail("Chrome cast", "Chrome cast are not displayed ");
		}

		verifyElementPresent(PWAPlayerPage.minimizeBtn, "Minimize button");
		click(PWAPlayerPage.minimizeBtn, "Minimize button");

		if (getParameterFromXML("browserType").equalsIgnoreCase("Firefox")) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objChromeCast, "Chrome Cast ")) {
				logger.info("Chrome cast is  displayed in firefox browser  ");
				extent.extentLoggerFail("Chrome cast", "Chrome cast is  displayed in firefox browser ");

			} else {

				logger.info("Chrome cast are not displayed in firefox browser , expected result ");
				extent.extentLoggerPass("Chrome cast",
						"Chrome cast are not displayed in firefox browser , expected result");
			}
		}
	}

	public void WatchCTAvalidation(String userType, String screen) throws Exception {
		extent.HeaderChildNode(
				"Verify weather Watch cta Should be displayed on all slides of the carousel banner in all landing page");
		navigateToAnyScreenOnWeb("Movies");
		Response tabResponse = ResponseInstance.getResponseForPages(screen.toLowerCase(), "en,hi,kn");
		int carouselItemsCount = tabResponse.jsonPath().get("buckets[0].items.size()");
		System.out.println(carouselItemsCount);
		if (carouselItemsCount > 7)
			carouselItemsCount = 7;
		ArrayList<String> carouselCardTitlesFromAPI = new ArrayList<String>();
		for (int i = 0; i < carouselItemsCount; i++) {
			carouselCardTitlesFromAPI.add(tabResponse.jsonPath().get("buckets[0].items[" + i + "].title").toString());
		}
		System.out.println(carouselCardTitlesFromAPI);
	}

	public void CarouselSubscriptionPage(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
			extent.HeaderChildNode(
					"Verify when click on\"Buy Plan\" CTA from Premium Content of Carousel banner user should navigate to subscription pack selection page , Verify that user is navigated to Subscribe screen post tapping on Subscribe tag.");
			/*WebStorage webStorage = (WebStorage) new Augmenter().augment(getWebDriver());
			SessionStorage sessionStorage = webStorage.getSessionStorage();
			String experimentStartedValue = sessionStorage.getItem("experimentStarted");*/
//			if (experimentStartedValue.equals("A")) {
				if (checkElementDisplayed(PWAHomePage.objGetPremiumWeb, "Buy Plan")) {
					logger.info("Buy Plan is displayed on carousel , expected result");
					extent.extentLoggerPass("", " Buy Plan is displayed on carousel , expected result");
					click(PWAHomePage.objGetPremiumWeb, "Buy Plan");
					if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription Page")) {
						logger.info("Navigated to Subscription Page");
						extent.extentLogger("Subscription Page", "Navigated to Subscription Page");
					} else {
						logger.error("Not navigated to Subscription Page");
						extent.extentLoggerFail("Subscription Page", "Not navigated to Subscription Page");
					}
				}
			/*} else {
				logger.info(
						" experimentStarted value in session storage is not set to A, hence buy plan wont be displayed");
				extent.extentLoggerWarning("",
						"  experimentStarted value in session storage is not set to A, hence buy plan wont be displayed ");
			}*/
			navigateHome();
		}
	}

	public void HeaderMenu(String userType) throws Exception {
		navigateHome();
		extent.HeaderChildNode(
				"Verify Eight or Less than eight sections(eg:Home/premimum/shows) is displayed in header menu.");
		verifyElementPresent(PWAHamburgerMenuPage.objHeaderMenuTabs, "Header Menu Tabs");
		String HeaderMenuTabstext = getText(PWAHamburgerMenuPage.objHeaderMenuTabs);
		System.out.println(HeaderMenuTabstext);
		logger.info("Header Menu tabs :" + HeaderMenuTabstext);
		extent.extentLogger("Logged in", "Header Menu tabs :" + HeaderMenuTabstext);
		int HeaderMenuTabsCount = getCountweb(PWAHamburgerMenuPage.objHeaderMenuTabs);
		System.out.println(HeaderMenuTabsCount);
		logger.info("Header Menu Count :" + HeaderMenuTabsCount);
		extent.extentLogger("Logged in", "Header Menu Count :" + HeaderMenuTabsCount);
		if (HeaderMenuTabsCount <= 8) {
			logger.info(HeaderMenuTabsCount + "is Displayed , expected result");
			extent.extentLoggerPass("", HeaderMenuTabsCount + "is Displayed , expected result");

		} else {
			logger.info("More Than eight Sections are displayed");
			extent.extentLoggerFail("", "More Than eight Sections are displayed");
		}
		extent.HeaderChildNode(
				"Verify on hovering the mouse the overlay should be displayed, and other section should be displayed in the overlay");
		Actions action = new Actions(getWebDriver());
		WebElement player = getWebDriver().findElement(PWAHamburgerMenuPage.objHeaderMenuTabs);
		action.moveToElement(player).build().perform();
		if (verifyElementPresent(PWAHamburgerMenuPage.objTabOverLay, "Tab OverLay")) {
			logger.info("Tab overlay is Displayed , expected result");
			extent.extentLoggerPass("", " Tab overlay is Displayed , expected result");
		} else {
			logger.info("Tab overlay is not Displayed ");
			extent.extentLoggerFail("", "Tab overlay is not Displayed");

		}
	}

	public void defaultHomePage(String userType) throws Exception {
		String user = getParameterFromXML("userType");
		switch (user) {
		case "Guest":
			extent.HeaderChildNode("TC_PWA_GST_0001 : Verify user is landing on Homepage by default");
			By ele = PWALandingPages.objActiveHomeButton;
			String tab = getText(ele);
			System.out.println(tab);
			if(tab.contains("Home")) {
				logger.info("User is navigated to Homepage by default");
				extent.extentLoggerPass("", "User is navigated to Homepage by default");
			} else {
				logger.error("User is not navigated to Homepage by default");
				extent.extentLoggerFail("", "User is not navigated to Homepage by default");
			}

			extent.HeaderChildNode("Verify the Zee5 Logo on top header of the page");
			if (!verifyElementPresent(PWALandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo")) {
				logger.error("Zee5 Logo is not displayed");
				extent.extentLoggerFail("Zee5 Logo", "Zee5 Logo is not displayed");
			}

			extent.HeaderChildNode("Verify the options given at top header of the page, Search, Language Selection, Login, Buy Plan, and Hamburger Menu");
			// Search
			if (!verifyElementPresent(PWALandingPages.obj_Pwa_SearchBtn, "Search option")) {
				logger.error("Search option is not displayed");
				extent.extentLoggerFail("Search", "Search option is not displayed");
			}
			//Hamburger Menu
			if (!verifyElementPresent(PWALandingPages.obj_Pwa_HamburgerMenu, "Hamburger Menu option")) {
				logger.error("Hamburger Menu option is not displayed");
				extent.extentLoggerFail("", "Hamburger Menu option is not displayed");
			}
			//Language Selection
			if (!verifyElementPresent(PWALandingPages.objLanguageBtnWEB, "Language selection option")) {
				logger.error("Language selection option is not displayed");
				extent.extentLoggerFail("", "Language selection option is not displayed");
			}
			//Login
			if (!verifyElementPresent(PWALandingPages.objLoginIcon, "Login option")) {
				logger.error("Login option is not displayed");
				extent.extentLoggerFail("", "Login option is not displayed");
			}
			//Buy Plan
			if (!verifyElementPresent(PWALandingPages.objBuyPlanCTA, "Buy Plan option")) {
				logger.error("Buy Plan option is not displayed");
				extent.extentLoggerFail("", "Buy Plan option is not displayed");
			}

			break;

		case "NonSubscribedUser":
			extent.HeaderChildNode("TC_PWA_NS_0001 : Verify the Zee5 Logo on top header of the page");
			if (!verifyElementPresent(PWALandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo")) {
				logger.error("Zee5 Logo is not displayed");
				extent.extentLoggerFail("Zee5 Logo", "Zee5 Logo is not displayed");
			}

			extent.HeaderChildNode("Verify the options given at top header of the page, Search, Language Selection, User Profile, Buy Plan, and Hamburger Menu");
			// Search
			if (!verifyElementPresent(PWALandingPages.obj_Pwa_SearchBtn, "Search option")) {
				logger.error("Search option is not displayed");
				extent.extentLoggerFail("Search", "Search option is not displayed");
			}
			//Hamburger Menu
			if (!verifyElementPresent(PWALandingPages.obj_Pwa_HamburgerMenu, "Hamburger Menu option")) {
				logger.error("Hamburger Menu option is not displayed");
				extent.extentLoggerFail("", "Hamburger Menu option is not displayed");
			}
			//Language Selection
			if (!verifyElementPresent(PWALandingPages.objLanguageBtnWEB, "Language selection option")) {
				logger.error("Language selection option is not displayed");
				extent.extentLoggerFail("", "Language selection option is not displayed");
			}
			//User Profile
			if (!verifyElementPresent(PWALandingPages.objUserProfileIcon, "User Profile option")) {
				logger.error("User Profile option is not displayed");
				extent.extentLoggerFail("", "User Profile option is not displayed");
			}
			//Buy Plan
			if (!verifyElementPresent(PWALandingPages.objBuyPlanCTA, "Buy Plan option")) {
				logger.error("Buy Plan option is not displayed");
				extent.extentLoggerFail("", "Buy Plan option is not displayed");
			}

			break;

		case "SubscribedUser":
			extent.HeaderChildNode("TC_PWA_SUB_0001 : Verify the Zee5 Logo on top header of the page");
			if (!verifyElementPresent(PWALandingPages.obj_Pwa_Zee5Logo, "Zee5 Logo")) {
				logger.error("Zee5 Logo is not displayed");
				extent.extentLoggerFail("Zee5 Logo", "Zee5 Logo is not displayed");
			}

			extent.HeaderChildNode("Verify the options given at top header of the page, Search, Language Selection, User Profile, Buy Plan, and Hamburger Menu");
			// Search
			if (!verifyElementPresent(PWALandingPages.obj_Pwa_SearchBtn, "Search option")) {
				logger.error("Search option is not displayed");
				extent.extentLoggerFail("Search", "Search option is not displayed");
			}
			//Hamburger Menu
			if (!verifyElementPresent(PWALandingPages.obj_Pwa_HamburgerMenu, "Hamburger Menu option")) {
				logger.error("Hamburger Menu option is not displayed");
				extent.extentLoggerFail("", "Hamburger Menu option is not displayed");
			}
			//Language Selection
			if (!verifyElementPresent(PWALandingPages.objLanguageBtnWEB, "Language selection option")) {
				logger.error("Language selection option is not displayed");
				extent.extentLoggerFail("", "Language selection option is not displayed");
			}
			//User Profile
			if (!verifyElementPresent(PWALandingPages.objUserProfileIcon, "User Profile option")) {
				logger.error("User Profile option is not displayed");
				extent.extentLoggerFail("", "User Profile option is not displayed");
			}

			break;
		}
	}

	public void catchUp(String UserType) throws Exception {
		navigateToAnyScreenOnWeb("News");
		findElements(PWANewsPage.objLiveNewsCard).get(1).click();
		verifyElementPresent(PWANewsPage.objCatchUpContents, "catch Up content");
		verifyElementPresent(PWANewsPage.objLive, "Live tag");
		verifyElementPresent(PWANewsPage.objLiveIndicator, "Indicator");
		String date = getText(PWANewsPage.objTodayBtn);
		System.out.println(date);
		System.out.println("CurrentDate " + CurrentDate());
		if (date.equals(CurrentDate())) {
			System.out.println("Matched");
		} else {
			System.out.println("Not matched");
		}
		verifyElementPresentAndClick(PWANewsPage.objTodayBtn, "Date picker");
		verifyElementPresent(PWANewsPage.objDatePicker, "Date Picker");
		partialScroll();
		verifyElementPresentAndClick(PWANewsPage.objShareBtn, "Share");
	}

	public String CurrentDate() {
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd");
		LocalDateTime now = LocalDateTime.now();
		String CTCurrentTime = dtf.format(now);
		return "Today " + CTCurrentTime + "th";
	}

	/**
	 * Function to validate the Web Share functionality
	 */
	public void WebFacebookShareFunctionality() throws Exception {
		// click on share Option
		click(PWAPlayerPage.shareBtn, "Share Option");
		// Verify Facebook share option
		Thread.sleep(2000);
		verifyElementPresent(PWAPlayerPage.facebookShareBtn, "Facebook share option");
		Thread.sleep(2000);

		// Verify Twitter share option
		verifyElementPresent(PWAPlayerPage.twitterShareBtn, "Twitter share option");
		Thread.sleep(2000);
		// Verify Email Share option
		verifyElementPresent(PWAPlayerPage.emailShareBtn, "Email share option");
		Thread.sleep(2000);
		// Click on Facebook Share option
		click(PWAPlayerPage.facebookShareBtn, "Facebook share option");
		Thread.sleep(2000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}

		// Switch to window
		verifyAlert();
		switchToWindow(2);
		Thread.sleep(2000);
		// Verify user is navigate to Facebook page
		if (checkElementDisplayed(PWALiveTVPage.objFacebookEmailField, "Facebook Email field")) {
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookEmailField, "Facebook Email field");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
			}

			getWebDriver().findElement(PWALiveTVPage.objFacebookEmailField).sendKeys("helloigs6@gmail.com");
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookPasswordField, "Facebook Password field");
			getWebDriver().findElement(PWALiveTVPage.objFacebookPasswordField).sendKeys("hello@12345");
			verifyElementPresentAndClick(PWALiveTVPage.objFacebookLoginBtn, "Facebook Login button");
			waitTime(2000);
		}
		verifyAlert();
		waitTime(2000);
		verifyElementPresentAndClick(PWALiveTVPage.objPostToFacebookBtn, "Post to Facebook");
		waitTime(3000);
		verifyAlert();
		switchToWindow(1);
		waitTime(3000);
		Thread.sleep(2000);
		// Click on Share option
		click(PWAPlayerPage.shareBtn, "Share Option");
		Thread.sleep(2000);
		// Verify user is navigated to Twitter page
		switchToWindow(2);
		Thread.sleep(2000);
		verifyAlert();
		// Verify user is navigated to Twitter page
		checkElementDisplayed(WebSharePage.objTwitterLogo, "Twitter Share page");
		verifyAlert();
		getWebDriver().close();
		switchToParentWindow();
		Thread.sleep(2000);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		waitTime(5000);

	}

	public void SearchContent(String Keyword, String contentType) throws Exception {
		navigateHome();
		click(PWAHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(PWASearchPage.objSearchEditBox, "Search box");
		type(PWASearchPage.objSearchEditBox, Keyword, "Search box");
		hideKeyboard();
		waitTime(6000);
		click(PWASearchPage.objFirstSearchResult, "Search result");

	}

	public void AgeRatingAndContentDescription(String userType, String Keyword, String contentType) throws Exception {

		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
			changeParentalControl("Restrict 7+ Content");

		}
		SearchContent(Keyword, contentType);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objParentalLockPopUpInPlayer, "Parental Lock field")) {

			type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
			type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
			waitTime(4000);

		}
		verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button");
		click(PWAPlayerPage.pauseBtn, "Pause button");
		verifyElementPresent(PWAPlayerPage.playBtn, "Play icon");
		click(PWAPlayerPage.playBtn, "Play icon");
		waitTime(2000);
		if (verifyElementPresent(PWAHamburgerMenuPage.objAgeRating, "Age Rating")) {
			logger.info("Age rating and content descriptor is displayed  , expected Result");
			extent.extentLoggerPass("", "Age rating and content descriptor is displayed  , expected Result");
		} else {
			logger.info("Age rating and content descriptor is not displayed ");
			extent.extentLoggerFail("", "Age rating and content descriptor is not displayed ");

		}
	}

	public void AgeRatingAndContentDescriptionForDifferentcontents(String userType) throws Exception {
		extent.HeaderChildNode(
				"Age rating & Content descriptor text Should display for all type of consumption Page <br/> Age rating & Content descriptor text Should dispaly for all type of content");
		AgeRatingAndContentDescription(userType, "14 Phere", "Movie");
		AgeRatingAndContentDescription(userType, "Saand Ki Aankh", "Movie");
		AgeRatingAndContentDescription(userType, "Cabaret", "Movie");

	}

	public void ContentDescriptorDisplayValidation(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {

			extent.HeaderChildNode(
					"Validate that Content Descriptor is displayed for a period of 5 seconds on the player.");
			System.out
					.println("Validate that Content Descriptor is displayed for a period of 5 seconds on the player.");
			waitTime(6000);

			waitTime(4000);
			if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
				changeParentalControl("Restrict 7+ Content");
			}
			SearchContent("14 Phere", "Web Series");
			if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objParentalLockPopUpInPlayer, "Parental Lock field")) {

					type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
					waitTime(4000);

				}
			}

			logger.info("Content Description is displayed 1");
			checkElementDisplayed(PWAPlayerPage.objcurrenttime, "current time");
			String time1 = getText(PWAPlayerPage.objcurrenttime);
			int startTime1 = Integer.parseInt(time1);
			// int startTime = timeToSec(time1);
			System.out.println(startTime1 + " Start time");
			if (verifyElementDisplayed(PWAHamburgerMenuPage.objcontentRating)) {

				waitTime(2000);
				///// tapPlayerToGetControls("Potrait");
				waitTime(1000);
				logger.info("Content Description is not displayed");

				String time2 = getText(PWAPlayerPage.objcurrenttime);
				int startTime2 = Integer.parseInt(time2);
				// int startTime2 = timeToSec(time2);
				int startTime3 = (startTime2 - startTime1);
				System.out.println(startTime3);
				String s = Integer.toString(startTime3);
				System.out.println(s + " Content descriptor duration");

				if (s.equals("5")) {
					logger.info("Content Description is disappeared after displaying for a period of 5 seconds");
					extentLoggerPass("Content Descriptor ",
							"Content Description is disappeared after displaying a period of 5 seconds");
				} else {
					logger.error("Content Description is not disappeared after displaying for a period of 5 seconds");
					extentLoggerFail("Content Descriptor ",
							"Content Description is not disappeared after displaying for a period of 5 seconds");
					// }
				}
			}
			waitTime(3000);
			Back(2);
			waitTime(3000);
		}
	}

	public void ContentDescriptionNotDisplayed(String userType) throws Exception {
		extent.HeaderChildNode("Content descriptor text Should not displayed when user Pause the consumption Page");
		System.out.println("Validate that Content Descriptor is displayed for a period of 5 seconds on the player.");
		waitTime(6000);

		waitTime(4000);
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
			changeParentalControl("Restrict 7+ Content");
		}
		SearchContent("14 Phere", "Web Series");
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
			if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field")) {
				type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
				verifyElementPresent(PWAPlayerPage.objPlayerStartTime, "Timer is started on entering parental pin");
			}
		}
		verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button");
		click(PWAPlayerPage.pauseBtn, "Pause button");

		if (checkElementDisplayed(PWAHamburgerMenuPage.objAgeRating, "Age Rating")) {
			logger.info("Age rating and content descriptor is displayed ");
			extent.extentLoggerFail("", "Age rating and content descriptor is displayed ");
		} else {
			logger.info("Age rating and content descriptor is not displayed   , expected Result ");
			extent.extentLoggerPass("", "Age rating and content descriptor is not displayed  , expected Result");

		}

		extent.HeaderChildNode("Content descriptor text Should displayed when user reload the Player consumption Page");

		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
			changeParentalControl("Restrict 7+ Content");
		}
		SearchContent("14 Phere", "Web Series");
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
			if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field")) {
				type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
				verifyElementPresent(PWAPlayerPage.objPlayerStartTime, "Timer is started on entering parental pin");
			}
		}

		verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button");
		click(PWAPlayerPage.pauseBtn, "Pause button");
		getWebDriver().navigate().refresh();
		if (verifyElementPresent(PWAHamburgerMenuPage.objAgeRating, "Age Rating")) {
			logger.info("Age rating and content descriptor is displayed  , expected Result");
			extent.extentLoggerPass("", "Age rating and content descriptor is displayed  , expected Result");
		} else {
			logger.info("Age rating and content descriptor is not displayed ");
			extent.extentLoggerFail("", "Age rating and content descriptor is not displayed ");

		}

	}

	public void ContentDescriptorPostPlayerkill(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {

			extent.HeaderChildNode(
					" Validate that Content Descriptor will not reappear post completing its display duration. ");
			System.out.println(
					"Validate that Content Descriptor will not reappear post completing its display duration. ");

			if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
				changeParentalControl("Restrict 7+ Content");
			}
			SearchContent("14 Phere", "Web Series");
			if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
				if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field")) {
					type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
					verifyElementPresent(PWAPlayerPage.objPlayerStartTime, "Timer is started on entering parental pin");
				}
			}

			boolean value1 = verifyElementDisplayed(PWAHamburgerMenuPage.objAgeRating);
			if (value1 == true) {
				System.out.println("1");
				waitTime(20000);

				boolean value2 = verifyElementDisplayed(PWAHamburgerMenuPage.objAgeRating);
				if (value2 == false) {
					logger.info("Content Description is not reappeared after its entire display duration");
					extentLoggerPass("Content Descriptor ",
							"Content Description is not reappeared after its entire display duration");
				} else {
					logger.error("Content Description is reappeared after its playout session");
					extentLoggerFail("Content Descriptor ",
							"Content Description is reappeared after its entire display duration");

				}

			} else {
				logger.error("Content Description is not displayed");
				extentLoggerFail("Content Descriptor ", "Content Description is not displayed");
			}
			waitTime(3000);
			Back(2);
			waitTime(3000);

			SearchContent("14 Phere", "Movie");

			boolean value2 = verifyElementDisplayed(PWAHamburgerMenuPage.objAgeRating);
			if (value2 == true) {
				logger.info("Content Description is displayed post killing player and replaying it");
				extentLoggerPass("Content Descriptor ",
						"Content Description is displayed post killing player and replaying it");
			} else {
				logger.error("Content Description is not displayed post killing player and replaying it");
				extentLoggerFail("Content Descriptor ",
						"Content Description is not displayed post killing player and replaying it");
			}
			waitTime(3000);
			Back(2);
			waitTime(3000);
		}
	}

	public void ContentDescriptorLandscapeOrientatonValidation(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {

			extent.HeaderChildNode("Validate that Content Descriptor is displayed on both Portrait & Landscape mode. ");
			System.out.println("Validate that Content Descriptor is displayed on both Portrait & Landscape mode. ");
			if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
				changeParentalControl("Restrict 7+ Content");
			}
			SearchContent("14 Phere", "Web Series");
			if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
				if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field")) {
					type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
					verifyElementPresent(PWAPlayerPage.objPlayerStartTime, "Timer is started on entering parental pin");
				}
			}
			try {
				click(PWAHamburgerMenuPage.objAgeRating, "Content descriptor");
				verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize window icon");
				click(PWAPlayerPage.maximizeBtn, "Maximize window icon");
			} catch (Exception e) {
				// tapPlayerToGetControls("Potrait");
				click(PWAPlayerPage.maximizeBtn, "Maximize window icon");
			}

			// waitTime(5000);
			boolean value2 = verifyElementDisplayed(PWAHamburgerMenuPage.objAgeRating);
			if (value2 == true) {
				logger.info("Content Description is displayed in Landscape mode");
				extentLoggerPass("Content Descriptor ", "Content Description is displayed in Landscape mode");
			} else {
				logger.error("Content Description is not displayed in Landscape mode");
				extentLoggerFail("Content Descriptor ", " Content Description is not displayed in Landscape mode");
			}
			waitTime(3000);
			Back(2);
			waitTime(3000);
		}
	}

	public void ContentDescriptorForNewsAndLiveContent(String userType) throws Exception {
		extent.HeaderChildNode("Verify Content Descriptor for News and Live content");
		navigateToAnyScreenOnWeb("News");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHomePage.objPlayBtn, "Play button");
		boolean value = verifyElementNotPresentForWeb(PWAHamburgerMenuPage.objAgeRating, 20);
		if (value) {
			logger.info("Content Descriptor is NOT displayed for News content - Expected Behaviour");
			extentLoggerPass("", "Content Descriptor is NOT displayed for News content - Expected Behaviour");
		} else {
			logger.error("Content Descriptor is displayed for News content");
			extentLoggerFail("", "Content Descriptor is displayed for News content");
		}
		waitTime(3000);
		Back(1);
		verifyElementPresentAndClick(PWAHomePage.objPlayBtn, "Play button");
		boolean value1 = verifyElementNotPresentForWeb(PWAHamburgerMenuPage.objAgeRating, 20);
		if (value1) {
			logger.info("Age Rating on Player is NOT displayed for News content - Expected Behaviour");
			extentLoggerPass("", "Age Rating on Player is NOT displayed for News content - Expected Behaviour");
		} else {
			logger.error("Age Rating on Player is displayed for News content");
			extentLoggerFail("", "Age Rating on Player is displayed for News content");
		}
		waitTime(3000);
		navigateHome();
		navigateToAnyScreenOnWeb("News");
		click(PWALiveTVPage.objFirstfreeContentCard, "Live Tv content");

		boolean value2 = verifyElementNotPresentForWeb(PWAHamburgerMenuPage.objAgeRating, 20);
		if (value2) {
			logger.info("Content Descriptor is NOT displayed for Live content - Expected Behaviour");
			extentLoggerPass("", "Content Descriptor is NOT displayed for Live content - Expected Behaviour");
		} else {
			logger.error("Content Descriptor is displayed for Live content");
			extentLoggerFail("", "Content Descriptor is displayed for Live content");
		}
		waitTime(3000);
		navigateHome();
		navigateToAnyScreenOnWeb("News");
		click(PWALiveTVPage.objFirstfreeContentCard, "Live Tv content");

		boolean value3 = verifyElementNotPresentForWeb(PWAHamburgerMenuPage.objAgeRating, 20);
		if (value3) {
			logger.info("Age Rating on Player is NOT displayed for Live content - Expected Behaviour");
			extentLoggerPass("", "Age Rating on Player is NOT displayed for Live content - Expected Behaviour");
		} else {
			logger.error("Age Rating on Player is displayed for Live content");
			extentLoggerFail("", "Age Rating on Player is displayed for Live content");
		}
	}

	public void VerifyContentDescriptorAfterAdFinishes(String userType) throws Exception {
		extent.HeaderChildNode("Verify Content Descriptor After Ad completes");
		if (!userType.equals("SubscribedUser")) {
			SearchContent("14 Phere", "Web Series");
			if (verifyIsElementDisplayed(PWAPlayerPage.objAd)) {
				logger.info("Ad is playing");
				extentLogger("Ad", "Ad is playing");
				waitForPlayerAdToComplete1("Video Player");
				waitTime(5000);
				boolean value = verifyElementDisplayed(PWAHamburgerMenuPage.objAgeRating);
				System.out.println(value);
				if (value) {
					logger.info("Content Descriptor is displayed After Ad is completed");
					extentLoggerPass("", "Content Descriptor is displayed After Ad is completed");
				} else {
					logger.error("Content Descriptor is NOT displayed After Ad is completed");
					extentLoggerFail("", "Content Descriptor is NOT displayed After Ad is completed");
				}

			} else {
				logger.info("Ad is not played");
				extentLogger("Ad", "Ad is not played");
			}

		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}

	public void VerifyAgeRatedIfCDisEmpty(String userType) throws Exception {
		extent.HeaderChildNode("Verify AGE RATED when Content Descriptor is Empty");
		if ((userType.equalsIgnoreCase("Guest"))) {
			click(PWAHomePage.objSearchBtn, "Search button");
			waitTime(5000);
			click(PWASearchPage.objSearchEditBox, "Search box");
			type(PWASearchPage.objSearchEditBox, "Sundari - Hebbuli", "Search box");
			hideKeyboard();
			waitTime(6000);
			click(PWASearchPage.objFirstSearchResult, "Search result");
			checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player");
			waitForElement(PWAPlayerPage.pauseBtn, 20, "Pause button");
			if (verifyElementNotPresentForWeb(PWAHamburgerMenuPage.objAgeRating, 10)) {
				logger.info("Content Descriptor is Empty");
				extentLoggerPass("", "Content Descriptor is Empty");
				Back(1);

				boolean AgeRatevalue = verifyElementDisplayed(PWAHamburgerMenuPage.objAgeRating);
				System.out.println(AgeRatevalue);
				if (AgeRatevalue == true) {
					logger.info("Age Rated is displayed if Content descriptor is empty");
					extentLoggerPass("", "Age Rated is displayed if Content descriptor is empty");
				} else {
					logger.error("Age Rated is NOT displayed if Content descriptor is empty");
					extentLoggerFail("", "Age Rated is NOT displayed if Content descriptor is empty");
				}
			}
		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}

	public void verifyAgeRating_OnPlayer_And_BelowPlayer(String userType) throws Exception {
		extent.HeaderChildNode(
				"Verify that Age rating mentioned in Content descriptor is same as Age rating mentioned in meta data below the player");
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
			changeParentalControl("Restrict 7+ Content");
		}
		SearchContent("14 Phere", "Web Series");
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
			if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field")) {
				type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
				verifyElementPresent(PWAPlayerPage.objPlayerStartTime, "Timer is started on entering parental pin");
			}
		}
		verifyElementPresent(PWAHamburgerMenuPage.objAgeRating, "Age Rating in Content Descriptor");
		String Rating = findElement(PWAHamburgerMenuPage.objAgeRating).getText();
		String Rate[] = Rating.split(" ");
		String AgeRated = Rate[1].concat(" ");
		String AGE = AgeRated.concat(Rate[2]);
		logger.info("Age Rating in metadata below the player is: " + AGE);
		extentLoggerPass("", "Age Rating in Content Descriptor is: " + AGE);
		String metadata = findElement(PWAHamburgerMenuPage.objcontentRating).getText();
		String[] arrSplit = metadata.split(" . ");
		System.out.println(arrSplit.length);
		for (int i = 0; i < arrSplit.length; i++) {
			System.out.println("Value at " + i + ": " + arrSplit[i]);
		}
		String eGenre = arrSplit[arrSplit.length - 1];
		String Rate1[] = eGenre.split(" ");
		String AgeRated1 = Rate1[1].concat(" ");
		String AGE1 = AgeRated1.concat(Rate1[2]);
		logger.info("Age Rating in metadata below the player is: " + AGE1);
		extentLoggerPass("", "Age Rating in metadata below the player is: " + AGE1);
		if (AGE.contentEquals(AGE1)) {
			logger.info(
					"Age Rated in Content descriptor is SAME as Age rating displayed in meta data below the player");
			extentLoggerPass("",
					"Age Rated in Content descriptor is SAME as Age rating displayed in meta data below the player");
		} else {
			logger.error(
					"Age Rated in Content descriptor is NOT same as Age rating displayed in meta data below the player");
			extentLoggerFail("",
					"Age Rated in Content descriptor is NOT same as Age rating displayed in meta data below the player");
		}

	}

	public void ContentDescriptorPlayerinterruption(String userType) throws Exception {
		if (userType.equalsIgnoreCase("SubscribedUser") || userType.equalsIgnoreCase("NonSubscribedUser")
				|| userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(
					"Validate that Content Descriptor will disappear on player when elements like Player controls, hearder overlay, error messaged, etc., are displayed.");
			System.out.println(
					"Validate that Content Descriptor will disappear on player when elements like Player controls, hearder overlay, error messaged, etc., are displayed.");
			if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
				changeParentalControl("Restrict 7+ Content");
			}
			SearchContent("14 Phere", "Web Series");
			if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
				if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field")) {
					type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
					verifyElementPresent(PWAPlayerPage.objPlayerStartTime, "Timer is started on entering parental pin");
				}
			}
			boolean value = verifyElementDisplayed(PWAHamburgerMenuPage.objAgeRating);
			if (value == true) {
				System.out.println("1");
				verifyElementPresent(PWAPlayerPage.pauseBtn, "Pause button");
				boolean value2 = verifyElementDisplayed(PWAHamburgerMenuPage.objAgeRating);
				if (value2 == true) {
					logger.info("Content Description reappeared after overlay elements are invoked");
					extentLoggerPass("Content Descriptor ",
							"Content Description reappeared after overlay elements are invoked");

				} else {
					logger.error(
							"Content Description is not disappeared after displaying after player controls disappeared");
					extentLoggerFail("Content Descriptor ",
							"Content Description is not disappeared after displaying after player controls disappeared");
				}

			} else {
				logger.error("Content Description is not displayed");
				extentLoggerFail("Content Descriptor ", "Content Description is not displayed");
			}
			waitTime(3000);
			Back(2);
			waitTime(3000);
		}
	}

	public void VerifyContentDescriptorForAds(String userType) throws Exception {
		extent.HeaderChildNode("Verify Content Descriptor for Ads");
		if (!userType.equals("SubscribedUser")) {
			if (userType.equalsIgnoreCase("NonSubscribeduser")) {
				changeParentalControl("Restrict 7+ Content");
			}
			SearchContent("14 Phere", "Web Series");
			if (userType.equalsIgnoreCase("NonSubscribeduser")) {
				if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field")) {
					type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
					type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
					verifyElementPresent(PWAPlayerPage.objPlayerStartTime, "Timer is started on entering parental pin");
				}
			}

			if (verifyIsElementDisplayed(PWAPlayerPage.objAd)) {
				logger.info("Ad is playing");
				extentLogger("Ad", "Ad is playing");
				if (verifyElementNotPresentForWeb((PWAHamburgerMenuPage.objAgeRating), 20)) {
					logger.info("Content Descriptor is NOT displayed for Ads - Expected Behaviour");
					extentLoggerPass("", "Content Descriptor is NOT displayed for Ads - Expected Behaviour");
				} else {
					logger.error("Content Descriptor is displayed for Ads");
					extentLoggerFail("", "Content Descriptor is displayed for Ads");
				}
			} else {
				logger.info("The ads didnot display");
				extent.extentLogger("", "The ads didnot display");
			}

		} else {
			logger.info("This is not applicable for " + userType);
			extent.extentLogger("", "This is not applicable for " + userType);
		}
	}

	public void VerifyContentDescriptionNotDisplayedWhenMouseOver(String userType) throws Exception {
		extent.HeaderChildNode(
				"Content descriptor text Should not displayed when user mouse Hover on the consumption Page");

		waitTime(2000);

		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
			changeParentalControl("Restrict 7+ Content");
		}
		SearchContent("14 Phere", "Web Series");

		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Subscribeduser")) {
			if (verifyElementPresent(PWAHamburgerMenuPage.objParentalLockPin1player, "Set Lock Field")) {
				type(PWAHamburgerMenuPage.objParentalLockPin1player, "1", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin2player, "2", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin3player, "3", "ParentalLockPin");
				type(PWAHamburgerMenuPage.objParentalLockPin4player, "4", "ParentalLockPin");
				verifyElementPresent(PWAPlayerPage.objPlayerStartTime, "Timer is started on entering parental pin");
			}
		}
		waitTime(5000);
		mouseHover();
		mouseHover();
		if (checkElementDisplayed(PWAHamburgerMenuPage.objAgeRating, "Age Rating")) {
			logger.info("Age rating and content descriptor is displayed ");
			extent.extentLoggerFail("", "Age rating and content descriptor is displayed ");
		} else {
			logger.info("Age rating and content descriptor is not displayed   , expected Result ");
			extent.extentLoggerPass("", "Age rating and content descriptor is not displayed  , expected Result");

		}
	}

	public void MouseOverModule(String userType) throws Exception
	{
		String TCID = null;
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0752";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0862";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0785";
		extent.HeaderChildNode(TCID+ " : Verify whether user mouse hover on the content cards Watch , Share, Watchlist cta's are displayed within hover effect");
		trayTitleAndContentValidationWithApiDataHome(userType, "home");

		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0757";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0867";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0790";
		extent.HeaderChildNode(TCID+ " : Verify the hover effect on content cards is displayed in all page");
		trayTitleAndContentValidationWithApiDataHome(userType, "news");
		trayTitleAndContentValidationWithApiDataHome(userType, "movies");
		trayTitleAndContentValidationWithApiDataHome(userType, "premium");

		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0753";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0863";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0786";
		extent.HeaderChildNode(TCID+ " :Verify whether user mouse hover on the content cards title, language, Duration, genre are displayed within hover effect");
		trayTitleDurationGenreAndContentValidationWithApiDataHome(userType, "home");


		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0754";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0864";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0787";
		extent.HeaderChildNode(TCID+ " :Verify content is played post click on watch cta within hover effect content cards");
		WatchCTAValidation(userType, "home");

		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0756";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0865";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0789";
		extent.HeaderChildNode(TCID+ " : Verify user is able to share the contents post click on share icon within hover effect");
		WebShareFunctionality();

		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0759";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0869";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0792";
		extent.HeaderChildNode(TCID+ " : Verify the hover effect on content cards is displayed in search landing page");
		click(PWAHomePage.objSearchBtn, "Search button");
		waitTime(5000);
		click(PWASearchPage.objSearchEditBox, "Search box");
		type(PWASearchPage.objSearchEditBox, "parru", "Search box");
		hideKeyboard();
		waitTime(6000);
		Actions actions = new Actions(getWebDriver());
		WebElement contentCard = getWebDriver()
				.findElement(By.xpath("(//h3[contains(@class,'cardTitle')]//parent::div//preceding-sibling::figure)[1]"));
		actions.moveToElement(contentCard).build().perform();
		waitTime(1000);
		checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Button");


		if(userType.equalsIgnoreCase("Subscribeduser")|| (userType.equalsIgnoreCase("NonSubscribedUser"))) {
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0869";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0792";
		extent.HeaderChildNode(TCID+ "Verify the hover effect on content cards is displayed in \"Continue Watching\" rails in home page");
		navigateToAnyScreenOnWeb("Home");
		scrollToElement(PWAHomePage.objFirstContentCardOfTray("Continue"));
		if (checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Continue"),
				"Continue watching  Content Card Of Tray")) {
			Actions actions1 = new Actions(getWebDriver());
			WebElement contentCard1 = getWebDriver()
					.findElement(By.xpath("(//h3[contains(@class,'cardTitle')]//parent::div//preceding-sibling::figure)[1]"));
			actions1.moveToElement(contentCard1).build().perform();
			waitTime(1000);
			checkElementDisplayed(PWAPremiumPage.objContentCardPlayBtn, "Play Button");

		}
	}
	}


	public void trayTitleDurationGenreAndContentValidationWithApiDataHome(String tabName, String api) throws Exception {

		waitTime(2000);

		navigateToAnyScreenOnWeb(tabName);

		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);
		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
		partialScrollDown();
		// for (int i = 0; i < 5; i++) {
		String titles = resp.jsonPath().getString("buckets[1].items[1].title");
		// System.out.println("Api data " +titles);
		logger.info("Api data " + titles);
		extent.extentLogger("Api data ", "Api data " + titles);
		apiTitleList.add(titles);
		Actions actions = new Actions(getWebDriver());
		WebElement contentCard = getWebDriver()
				.findElement(By.xpath("(//div[@class='slick-list']//div[@class='content'])[1]"));
		actions.moveToElement(contentCard).build().perform();
		waitTime(1000);
		checkElementDisplayed(PWAHamburgerMenuPage.objTitleOnCard, "Title on card");
		waitTime(1000);
		checkElementDisplayed(PWAHamburgerMenuPage.objDuration, "Duration");
		waitTime(1000);
		checkElementDisplayed(PWAHamburgerMenuPage.objGenre, "Genre");
		waitTime(1000);
		checkElementDisplayed(PWAPremiumPage.objContentCardShareBtn, "Share Button");
		waitTime(1000);

		// }
	}

	public void WatchCTAValidation(String tabName, String api) throws Exception {

		waitTime(2000);

		navigateToAnyScreenOnWeb(tabName);

		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);
		Response resp = ResponseInstance.getResponseForPages(api, languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
		partialScrollDown();
		// for (int i = 0; i < 5; i++) {
		String titles = resp.jsonPath().getString("buckets[1].items[1].title");
		// System.out.println("Api data " +titles);
		logger.info("Api data " + titles);
		extent.extentLogger("Api data ", "Api data " + titles);
		apiTitleList.add(titles);
		Actions actions = new Actions(getWebDriver());
		WebElement contentCard = getWebDriver()
				.findElement(By.xpath("(//div[@class='slick-list']//div[@class='content'])[1]"));
		actions.moveToElement(contentCard).build().perform();
		waitTime(1000);

		waitTime(1000);
		click(PWAPremiumPage.objContentCardPlayBtn, "Play Button");
		waitTime(3000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}

		// }
	}

	public void RegistrationPage(String userType) throws Exception
	{
        if(!checkElementDisplayed(PWALoginPage.objWebLoginBtn,"Login Button"))
            logout();
		if(userType.equalsIgnoreCase("Guest")){
			extent.HeaderChildNode("TC_PWA_GST_0316 : Verify whether User is able to see registeration screen is displayed as per VD");
			logger.info("TC_PWA_GST_0316 : Verify whether User is able to see registeration screen is displayed as per VD");
			navigateToHome();
			verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button in Home screen");
			waitTime(2000);
			verifyElementPresentAndClick(PWALoginPage.objRegisterLink, "Register link");
			waitTime(2000);
			verifyElementPresent(PWASignupPage.objCreateNewAccountHeader, "\"Create Account\" header");
			verifyElementPresent(PWASignupPage.objCreateNewAccountText, "\"Login to continue enjoying uninterrupted video and personalised experience.\" text");
			extent.HeaderChildNode("TC_PWA_GST_0317 : Verify if user is able to see \"Social Sign-In via G+\" , \"Sign-in with Mobile No.\", \"Send OTP CTA\" , \"Already registered? Login\" link and \"Terms and privacy policy\" links on Native registration screen.");
			logger.info("TC_PWA_GST_0317 : Verify if user is able to see \"Social Sign-In via G+\" , \"Sign-in with Mobile No.\", \"Send OTP CTA\" , \"Already registered? Login\" link and \"Terms and privacy policy\" links on Native registration screen.");
			verifyElementPresent(PWASignupPage.objGoogleSignin, "Google Sign in button");
			verifyElementPresent(PWASignupPage.objOROption, "Or Option");
			verifyElementPresent(PWASignupPage.objMobileNumberFieldInReg, "Mobile Number field");
			verifyElementPresent(PWASignupPage.objsendotp, "Send OTP");
			String labelText=getElementPropertyToString("innerText",PWASignupPage.objLabel,"");
			if(labelText.equals("By proceeding you agree to our Terms of Services & Privacy Policy.")) {
				logger.info("Label \"By proceeding you agree to our Terms of Services & Privacy Policy.\" is displayed");
				extent.extentLogger("", "Label \"By proceeding you agree to our Terms of Services & Privacy Policy.\" is displayed");
			}
			else {
				logger.error("Label \"By proceeding you agree to our Terms of Services & Privacy Policy.\" is not displayed");
				extent.extentLoggerFail("", "Label \"By proceeding you agree to our Terms of Services & Privacy Policy.\" is not displayed");
			}
			verifyElementPresent(PWASignupPage.objAlreadyRegisteredWithLoginLinkInReg, "Already registered? text with Login Link");
		}
		extent.HeaderChildNode("TC_PWA_GST_0348 : Verify user is able to navigate to G+ screen to enter google+ credentials");
		logger.info("TC_PWA_GST_0348 : Verify user is able to navigate to G+ screen to enter google+ credentials");
		String zeeWindow=getWebDriver().getWindowHandle();
		click(PWASignupPage.objGoogleSigninButton,"Google Sign in button");
		Set<String> windows=getWebDriver().getWindowHandles();
		for (Iterator i = windows.iterator(); i.hasNext(); ) {
			String tempWin=i.next().toString();
			if(!tempWin.equals(zeeWindow)) {
				getWebDriver().switchTo().window(tempWin);
				if(verifyElementPresent(PWASignupPage.objGoogleSignInWindow,"Google Window")) {
					logger.info("User is able to navigate to G+ screen");
					extent.extentLogger("", "User is able to navigate to G+ screen");
				}
				else {
					logger.error("User has failed to navigate to G+ screen");
					extent.extentLoggerFail("", "User has failed to navigate to G+ screen");
				}
				Actions act=new Actions(getWebDriver());
				act.sendKeys(Keys.ESCAPE).build().perform();
				logger.info("Escaped the G+ screen");
				extent.extentLogger("", "Escaped the G+ screen");
				waitTime(10000);
				break;
			}
		}
		getWebDriver().switchTo().window(zeeWindow);
		logger.info("Switched to ZEE5 windows");
		extent.extentLogger("", "Switched to ZEE5 windows");
		extent.HeaderChildNode("TC_PWA_GST_0351 : Verify User can skip the journey be clicking on \"back\" from browser or device.");
		logger.info("TC_PWA_GST_0351 : Verify User can skip the journey be clicking on \"back\" from browser or device.");
		Back(1);
		if(verifyElementPresent(PWALoginPage.objWebLoginBtn, "Login button in Home screen")) {
			logger.info("User can skip the journey be clicking on “back” from browser");
			extent.extentLogger("", "User can skip the journey be clicking on “back” from browser");
		}
		else {
			logger.error("User failed to skip the journey be clicking on “back” from browser");
			extent.extentLoggerFail("", "User failed to skip the journey be clicking on “back” from browser");
		}
		click(PWALoginPage.objWebLoginBtn, "Login button in Home screen");
		waitTime(2000);
		click(PWALoginPage.objRegisterLink, "Register link");
		waitTime(2000);
		extent.HeaderChildNode("TC_PWA_GST_0320 : Verify Whether User able to see pre selection of country code(+91)");
		logger.info("TC_PWA_GST_0320 : Verify Whether User able to see pre selection of country code(+91)");
		verifyElementPresentAndClick(PWASignupPage.objMobileNumberFieldInReg, "Mobile Number field");
		type(PWASignupPage.objMobileNumberFieldInReg, "9", "Mobile Number field");
		String defaultCountryCode=getElementPropertyToString("innerText",PWASignupPage.objCountryPin,"");
		if(defaultCountryCode.equals("+ 91")) {
			logger.info("Country code \"+91\" is displayed");
			extent.extentLoggerPass("Default country code verification", "Country code \"+91\" is displayed");
		}
		else {
			logger.error("Country code \""+defaultCountryCode+"\" is displayed instead of \"+91\"");
			extent.extentLoggerFail("", "Country code \""+defaultCountryCode+"\" is displayed instead of \"+91\"");
		}
		extent.HeaderChildNode("TC_PWA_GST_0321 : Verify Whether User is able to change the country code");
		logger.info("TC_PWA_GST_0321 : Verify Whether User is able to change the country code");
		verifyElementPresentAndClick(PWASignupPage.objCountryPinDropDown, "Country code dropdown");
		click(PWASignupPage.objCountryPins, "Another Country code");
		String changedCountryCode=getElementPropertyToString("innerText",PWASignupPage.objCountryPin,"");
		if(changedCountryCode.equals("+ 91")) {
			logger.error("Failed to change country code");
			extent.extentLoggerFail("", "Failed to change country code");
		}
		else {
			logger.info("Successfully changed country code to "+changedCountryCode);
			extent.extentLogger("", "Successfully changed country code to "+changedCountryCode);
		}
		extent.HeaderChildNode("TC_PWA_GST_0322 : Verify whether user is able to enter valid number of digits on mobile number with respect to selected country code");
		logger.info("TC_PWA_GST_0322 : Verify whether user is able to enter valid number of digits on mobile number with respect to selected country code");
		click(PWASignupPage.objCountryPinDropDown, "Country code dropdown");
		click(PWASignupPage.objCountryPin("Bangladesh"), "Country code Bangladesh");
		getWebDriver().findElement(PWASignupPage.objMobileNumberFieldInReg).sendKeys(Keys.BACK_SPACE);
		waitTime(2000);
		logger.info("Cleared the Mobile Number field");
		extent.extentLogger("", "Cleared the Mobile Number field");
		type(PWASignupPage.objMobileNumberFieldInReg, "998877665544332211", "Mobile Number field (18 digits)");
		String banglaNumber=getElementPropertyToString("value",PWASignupPage.objMobileNumberFieldInReg,"");
		logger.info("Number that got typed: "+banglaNumber);
		extent.extentLogger("", "Number that got typed: "+banglaNumber);
		if(banglaNumber.equals("998877665544332")) {
			extent.extentLoggerPass("", "12 numbers got typed for Bangladesh, expected behavior");
			logger.info("12 numbers got typed for Bangladesh, expected behavior");
			logger.info("User is able to enter valid number of digits on mobile number with respect to selected country code");
			extent.extentLoggerPass("", "User is able to enter valid number of digits on mobile number with respect to selected country code");
		}
		else {
			logger.error(banglaNumber+" got typed instead of 12 numbers");
			extent.extentLoggerFail("", banglaNumber+" got typed instead of 12 numbers");
			logger.error("User is not able to enter valid number of digits on mobile number with respect to selected country code");
			extent.extentLoggerFail("", "User is not able to enter valid number of digits on mobile number with respect to selected country code");
		}
		extent.HeaderChildNode("TC_PWA_GST_0324 : Verify whether user is able click on \"Send OTP\", After entering all valid data");
		logger.info("TC_PWA_GST_0324 : Verify whether user is able click on \"Send OTP\", After entering all valid data");
		getWebDriver().navigate().refresh();
		logger.info("Reloaded Registration page");
		extent.extentLogger("", "Reloaded Registration page");
		type(PWASignupPage.objMobileNumberFieldInReg, "8792396107", "Mobile Number field");
		click(PWASignupPage.objsendotp, "Send OTP");
		extent.HeaderChildNode("TC_PWA_GST_0323 : Verify Whether User is able to see error toast message \"user already exist\", while entering the already registered number");
		logger.info("TC_PWA_GST_0323 : Verify Whether User is able to see error toast message \"user already exist\", while entering the already registered number");
		logger.info("Entered existing user phone number and clicked Send OTP");
		extent.extentLogger("", "Entered existing user phone number and clicked Send OTP");
		verifyElementPresent(PWASignupPage.objUserAlreadyExists,"Text \"An account already exists with provided mobile number. Verify mobile number to login.\"");
		extent.HeaderChildNode("TC_PWA_GST_0326 : Verify Whether user is able to navigate for verification page while click on \"Send OTP\" with all valid data");
		logger.info("TC_PWA_GST_0326 : Verify Whether user is able to navigate for verification page while click on \"Send OTP\" with all valid data");
		verifyElementPresent(PWASignupPage.objOTPfield,"OTP field");
		verifyElementPresent(PWASignupPage.objVerifyButtonDisabled,"Disabled Verify button");
		verifyElementPresent(PWASignupPage.objEnterPasswordButton,"Enter Password button");
		extent.HeaderChildNode("TC_PWA_GST_0328 : Verify After Enter the Valid OTP ,user is able to see \"Verify OTP\" CTA is hightlighted");
		logger.info("TC_PWA_GST_0328 : Verify After Enter the Valid OTP ,user is able to see \"Verify OTP\" CTA is hightlighted");
		type(PWASignupPage.objOTP1, "1", "OTP box1");
		type(PWASignupPage.objOTP2, "2", "OTP box2");
		type(PWASignupPage.objOTP3, "3", "OTP box3");
		type(PWASignupPage.objOTP4, "4", "OTP box4");
		verifyElementPresent(PWASignupPage.objVerifyButtonEnabled,"Enabled Verify button");
		extent.HeaderChildNode("TC_PWA_GST_0330 : Verify whether User is able to see the invalid OTP toast message if entered OTP is not same as provided OTP via registered mobile");
		logger.info("TC_PWA_GST_0330 : Verify whether User is able to see the invalid OTP toast message if entered OTP is not same as provided OTP via registered mobile");
		click(PWASignupPage.objVerifyButtonEnabled,"Enabled Verify button");
		try {
			Boolean Message = getWebDriver().findElement(By.xpath("//*[@class='toastMessage']")).isDisplayed();
			if (Message == true) {
				extent.extentLogger("Toast", "Toast message is displayed");
				logger.info("Toast message is displayed");
			} else {
                logger.info("Toast message is not displayed");
			}
		} catch (Exception e) {
			extent.extentLoggerWarning("Toast", "Failed to capture Toast message");
			logger.info("Failed to capture Toast message");
		}
		extent.HeaderChildNode("TC_PWA_GST_0332 : Verify whether User is able to see the reverse timer to Resend OTP if not received(Format-00:00)");
		logger.info("TC_PWA_GST_0332 : Verify whether User is able to see the reverse timer to Resend OTP if not received(Format-00:00)");
		verifyElementPresent(PWASignupPage.objOTPTimer,"Reverse Timer");
		String timerFormat=getElementPropertyToString("innerText",PWASignupPage.objOTPTimer,"");
		logger.info("Timer displayed: "+timerFormat);
		extent.extentLogger("", "Timer displayed: "+timerFormat);
		if(timerFormat.matches("\\d{2}\\:?\\d{2}")) {
			logger.info("Required format 00:00 is maintained");
			extent.extentLogger("", "Required format 00:00 is maintained");
		}
		else {
			logger.error("Required format 00:00 is not maintained");
			extent.extentLoggerFail("", "Required format 00:00 is not maintained");
		}
		extent.HeaderChildNode("TC_PWA_GST_0333 : Verify whether User is able to see ‘Did not get the OTP? Resend’ should only be enabled after the reverse timer has reached 00:00");
		logger.info("TC_PWA_GST_0333 : Verify whether User is able to see ‘Did not get the OTP? Resend’ should only be enabled after the reverse timer has reached 00:00");
		if(!timerFormat.equals("00:00")) {
			try {
				getWebDriver().findElement(PWASignupPage.objDisabledOTPResendButton);
				logger.info("Disabled Resend button is displayed because reverse timer has not reached 00:00, expected behavior");
				extent.extentLogger("", "Disabled Resend button is displayed because reverse timer has not reached 00:00, expected behavior");
			}
			catch(Exception e) {
				logger.error("Disabled Resend button is not displayed even though reverse timer has not reached 00:00");
				extent.extentLoggerFail("", "Disabled Resend button is not displayed even though reverse timer has not reached 00:00");
			}
		}
		verifyElementPresent(PWASignupPage.objDidNotGetOTPText,"\"Did not get the OTP?\" text");
		for(int i=0;i<60;i++) {
			try {
				getWebDriver().findElement(PWASignupPage.objOTPTimer("00:00"));
				logger.info("Timer has reached 00:00");
				extent.extentLogger("", "Timer has reached 00:00");
				break;
			}
			catch(Exception e) { waitTime(2000);}
		}
		waitForElementDisplayed(PWASignupPage.objOTPTimer("00:00"),30);
		verifyElementPresent(PWASignupPage.objEnabledOTPResendButton,"Enabled Resend button");
		extent.HeaderChildNode("TC_PWA_GST_0334 : Verify whether User able to get another OTP If user selects ‘Did not get the OTP? Resend’ with 60 seconds timer");
		logger.info("TC_PWA_GST_0334 : Verify whether User able to get another OTP If user selects ‘Did not get the OTP? Resend’ with 60 seconds timer");
		click(PWASignupPage.objEnabledOTPResendButton,"Resend button");
		waitTime(3000);
		timerFormat=getElementPropertyToString("innerText",PWASignupPage.objOTPTimer,"");
		logger.info("Timer displayed: "+timerFormat);
		extent.extentLogger("", "Timer displayed: "+timerFormat);
		if(timerFormat.equals("00:00")) {
			logger.error("Timer did not restart on clicking Resend link");
			extent.extentLoggerFail("", "Timer did not restart on clicking Resend link");
		}
		else {
			logger.info("Timer has restarted on clicking Resend link, expected behavior");
			extent.extentLoggerPass("", "Timer has restarted on clicking Resend link, expected behavior");
		}
		extent.HeaderChildNode("TC_PWA_GST_0327 : Verify on Verification page user is able to change the number on clicking on change number link");
		logger.info("TC_PWA_GST_0327 : Verify on Verification page user is able to change the number on clicking on change number link");
		verifyElementPresentAndClick(PWASignupPage.objChangeNumberLink,"Change Number link");
		if(verifyElementPresent(PWASignupPage.objLoginToZee5Header,"\"Login to ZEE5\" header")) {
			logger.info("Successfully navigated to Login page on clicking \"Change Number?\" link");
			extent.extentLogger("", "Successfully navigated to Login page on clicking \"Change Number?\" link");
		}
		else {
			logger.error("Failed to navigate to Login page on clicking \"Change Number?\" link");
			extent.extentLoggerFail("", "Failed to navigate to Login page on clicking \"Change Number?\" link");
		}
	}

    /**
     * Complete Profile Popup validation
     * @param userType
     * @throws Exception
     */

	public void CompleteProfile(String userType) throws Exception{
		if(userType.equalsIgnoreCase("Guest")){
			extent.HeaderChildNode("TC_PWA_GST_0380 : verify the disclimar text should be displayed in Account info page");
			logger.info("TC_PWA_GST_0380 : verify the disclimar text should be displayed in Account info page");
			navigateToHome();
			click(PWAHomePage.objWEBSubscribeBtn, "BUY PLAN cta in Home page");
//			click(PWASignupPage.objContinueButton, "Continue button");
            JSClick(PWASignupPage.objContinueButton,"Continue button");
			verifyElementPresent(PWASignupPage.objAccountInfoPage,"Account Info Page");
			verifyElementPresent(PWASignupPage.objDisclaimerTextNewRegistration,"Disclaimer text");
			String disclaimerText=getElementPropertyToString("innerText",PWASignupPage.objDisclaimerTextNewRegistration,"");
			String expectedDisclaimerText="By proceeding you agree to our Terms of Services & Privacy Policy.";
			logger.info("Disclaimer text displayed \""+disclaimerText+"\"");
			extent.extentLogger("", "Disclaimer text displayed \""+disclaimerText+"\"");
			if(disclaimerText.equals(expectedDisclaimerText)) {
				logger.info("Expected Disclaimer text is displayed");
				extent.extentLogger("", "Expected Disclaimer text is displayed");
			}
			else {
				logger.error("Incorrect disclaimer text is displayed instead of \""+expectedDisclaimerText+"\"");
				extent.extentLoggerFail("", "Incorrect disclaimer text is displayed instead of \""+expectedDisclaimerText+"\"");
			}
			extent.HeaderChildNode("TC_PWA_GST_0379 : Verify as a guest user is able to register through Account info page");
			logger.info("TC_PWA_GST_0379 : Verify as a guest user is able to register through Account info page");
			verifyElementPresent(PWASignupPage.objAccountInfoPage,"Account Info Page");
			type(PWALoginPage.objEmailField, RandomStringGenerator(9)+"@"+RandomStringGenerator(2)+".com", "Email ID");
			click(PWASignupPage.objContinueButton, "Continue button");
			type(PWALoginPage.objPasswordField, "igs@12345", "Password Button");
			click(PWALoginPage.objContinueBtn, "Continue Button");
			waitTime(15000);
			navigateToHome();
			if(verifyElementPresent(PWALandingPages.objWebProfileIcon, "Profile icon")) {
				logger.info("Email registration successful");
				extent.extentLogger("", "Email registration successful");
			}
			String episodeURL = "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-august-20-2021/0-1-manual-32ue2icsek10?t=1294";
			String home = getParameterFromXML("url");
			episodeURL = home + episodeURL;
			getWebDriver().get(episodeURL);
			logger.info("Navigated to URL: " + episodeURL);
			extent.extentLogger("", "Navigated to URL: " + episodeURL);
			js.executeScript("window.localStorage.setItem('mandatoryRegistrationVideoCount','3')");
			logger.info("mandatoryRegistrationVideoCount value in local Storage is set to 3");
			extent.extentLogger("", "mandatoryRegistrationVideoCount value in local Storage is set to 3");
			getLocatorPresence(PWASignupPage.objInlineCompleteYourProfileCTA, 300, "Complete your profile", false);
			extent.HeaderChildNode("TC_PWA_GST_0371 : Verify user should see complete profile in line message on player screen with skip option on playing forth free content");
			logger.info("TC_PWA_GST_0371 : Verify user should see complete profile in line message on player screen with skip option on playing forth free content");
			verifyElementPresent(PWASignupPage.objInlineCompleteYourProfileCTA,"Inline Complete your profile CTA");
			verifyElementPresent(PWASignupPage.objInlineSkipCTA,"Skip CTA");
			extent.HeaderChildNode("TC_PWA_GST_0373 : UI/UX Should be displayed as per VD");
			logger.info("TC_PWA_GST_0373 : UI/UX Should be displayed as per VD");
			verifyElementPresent(PWASignupPage.objInlineCompleteYourProfileText,"\"Please complete your profile to watch this content\" text");
			verifyElementPresent(PWASignupPage.objInlineCompleteYourProfileCTA,"Inline Complete your profile CTA");
			verifyElementPresent(PWASignupPage.objInlineSkipCTA,"Skip CTA");
			if(verifyElementPresent(PWASignupPage.objInlineCompleteYourProfileCTA,"Inline Complete your profile CTA")) {
				extent.HeaderChildNode("TC_PWA_GST_0340 : Verify Whether User should be able to enter valid details is displayed as per VD");
				logger.info("TC_PWA_GST_0340 : Verify Whether User should be able to enter valid details is displayed as per VD");
				click(PWASignupPage.objInlineCompleteYourProfileCTA,"Inline Complete your profile CTA");
				verifyElementPresent(CompleteYourProfilePopUp.objFullName,"Full Name field");
				verifyElementPresent(CompleteYourProfilePopUp.objAge,"Age field");
				verifyElementPresent(CompleteYourProfilePopUp.objGenderWithRadioButton,"Gender field selections");
				verifyElementPresent(CompleteYourProfilePopUp.objDisabledContinue,"Disabled Continue button");
				extent.HeaderChildNode("TC_PWA_GST_0341 : Verify user is able to see error message on entering less than 18 yrs age");
				logger.info("TC_PWA_GST_0341 : Verify user is able to see error message on entering less than 18 yrs age");
				type(CompleteYourProfilePopUp.objAge, "17", "Age 17");
				waitTime(2000);
				click(CompleteYourProfilePopUp.objPopUpWindow,"Pop Up");
				verifyElementPresent(CompleteYourProfilePopUp.objAgeError,"Error message \"Age should be between 18 and 103 years.\"");
				clearEditField(CompleteYourProfilePopUp.objAge,2, "Age field");
				screencapture();
				extent.HeaderChildNode("TC_PWA_GST_0344 : Verify the Mandatory fields</br>TC_PWA_GST_0345 : Verify Without filling the Mandatory fields user is not able to save the details");
				logger.info("TC_PWA_GST_0344 : Verify the Mandatory fields</br>TC_PWA_GST_0345 : Verify Without filling the Mandatory fields user is not able to save the details");
				extent.extentLogger("", "------------------- Gender not selected -----------------");
				logger.info("------------------- Gender not selected -----------------");
				type(CompleteYourProfilePopUp.objMobileNumber, "9876543210", "Mobile number");
				type(CompleteYourProfilePopUp.objFullName, "Test IGS", "Full Name");
				type(CompleteYourProfilePopUp.objAge, "18", "Age 18");
				verifyElementPresent(CompleteYourProfilePopUp.objDisabledContinue,"Disabled Continue button when Gender is not selected");
				waitTime(2000);
				extent.extentLogger("", "------------------- Mobile Number not entered -----------------");
				logger.info("------------------- Mobile Number not entered -----------------");
				clearEditField(CompleteYourProfilePopUp.objMobileNumber,10, "Mobile Number field");
				screencapture();
				click(CompleteYourProfilePopUp.objGenFemale,"Gender Female");
				verifyElementPresent(CompleteYourProfilePopUp.objDisabledContinue,"Disabled Continue button when Mobile is not entered");
				waitTime(2000);
				extent.extentLogger("", "------------------- Age not entered -----------------");
				logger.info("------------------- Age not entered -----------------");
				clearEditField(CompleteYourProfilePopUp.objAge,2, "Age field");
				screencapture();
				type(CompleteYourProfilePopUp.objMobileNumber, "9876543210", "Mobile number");
				verifyElementPresent(CompleteYourProfilePopUp.objDisabledContinue,"Disabled Continue button when Mobile is not entered");
				waitTime(2000);
				extent.extentLogger("", "------------------- Name not entered -----------------");
				logger.info("------------------- Name not entered -----------------");
				clearEditField(CompleteYourProfilePopUp.objFullName,8, "Full Name field");
				type(CompleteYourProfilePopUp.objAge, "18", "Age 18");
				verifyElementPresent(CompleteYourProfilePopUp.objDisabledContinue,"Disabled Continue button when Mobile is not entered");

				verifyElementPresentAndClick(PWASignupPage.objPopUpClose,"Close CTA");
			}
			extent.HeaderChildNode("TC_PWA_GST_0372 : Verify user should be able to skip the complete profile flow if user clicks on skip CTA.");
			logger.info("TC_PWA_GST_0372 : Verify user should be able to skip the complete profile flow if user clicks on skip CTA.");
			getWebDriver().get(episodeURL);
			logger.info("Navigated to URL: " + episodeURL);
			extent.extentLogger("", "Navigated to URL: " + episodeURL);
			js.executeScript("window.localStorage.setItem('mandatoryRegistrationVideoCount','3')");
			logger.info("mandatoryRegistrationVideoCount value in local Storage is set to 3");
			extent.extentLogger("", "mandatoryRegistrationVideoCount value in local Storage is set to 3");
			getLocatorPresence(PWASignupPage.objInlineCompleteYourProfileCTA, 300, "Complete your profile", false);
			verifyElementPresentAndClick(PWASignupPage.objInlineSkipCTA,"Skip CTA");
			if(checkElementDisplayed(PWASignupPage.objInlineCompleteYourProfileCTA,"Complete Your Profile")) {
				logger.error("Skip functionality failed");
				extent.extentLoggerFail("", "Skip functionality failed");
			}
			else {
				logger.info("Skip functionality passed");
				extent.extentLogger("", "Skip functionality passed");
			}

			extent.HeaderChildNode("TC_PWA_GST_0374 : Verify user should see complete profile in line message on player screen without skip option on playing 9th free content");
			logger.info("TC_PWA_GST_0374 : Verify user should see complete profile in line message on player screen without skip option on playing 9th free content");
			getWebDriver().get(episodeURL);
			logger.info("Navigated to URL: " + episodeURL);
			extent.extentLogger("", "Navigated to URL: " + episodeURL);
			js.executeScript("window.localStorage.setItem('mandatoryRegistrationVideoCount','9')");
			js.executeScript("window.localStorage.setItem('mandatoryRegistrationPopupCount','5')");
			logger.info("mandatoryRegistrationVideoCount value in local Storage is set to 9");
			extent.extentLogger("", "mandatoryRegistrationVideoCount value in local Storage is set to 9");
			getLocatorPresence(PWASignupPage.objInlineCompleteYourProfileCTA, 300, "Complete your profile", false);
			if(checkElementDisplayed(PWASignupPage.objInlineSkipCTA,"Skip CTA")) {
				logger.error("Skip CTA is displayed with Complete your profile for 9th free content");
				extent.extentLoggerFail("", "Skip CTA is displayed with Complete your profile for 9th free content");
			}
			else {
				logger.info("Skip CTA is not displayed with Complete your profile for 9th free content, expected behvaior");
				extent.extentLogger("", "Skip CTA is not displayed with Complete your profile for 9th free content, expected behavior");
			}

			extent.HeaderChildNode("TC_PWA_GST_0377 : Verify user is not able to watch any video before completion of the profile");
			logger.info("TC_PWA_GST_0377 : Verify user is not able to watch any video before completion of the profile");
			episodeURL = "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-august-23-2021/0-1-manual-6fu2j0ukj4j0";
			episodeURL = home + episodeURL;
			getWebDriver().get(episodeURL);
			logger.info("Navigated to URL: " + episodeURL);
			extent.extentLogger("", "Navigated to URL: " + episodeURL);
			waitForPlayerAdToComplete("Video");
			verifyElementPresent(PWASignupPage.objInlineCompleteYourProfileCTA,"Inline Complete your profile CTA");

			extent.HeaderChildNode("TC_PWA_GST_0381 : Verify If user navigate to OTP Screen if he tries to register with Already registered number");
			logger.info("TC_PWA_GST_0381 : Verify If user navigate to OTP Screen if he tries to register with Already registered number");
			click(PWASignupPage.objInlineCompleteYourProfileCTA,"Inline Complete your profile CTA");
			type(CompleteYourProfilePopUp.objMobileNumber, "8792396107", "Mobile number");
			type(CompleteYourProfilePopUp.objFullName, "Test IGS", "Full Name");
			type(CompleteYourProfilePopUp.objAge, "18", "Age 18");
			click(CompleteYourProfilePopUp.objGenFemale,"Gender Female");
//			verifyElementPresentAndClick(CompleteYourProfilePopUp.objEnabledContinue,"Enabled Continue button");
//			verifyElementPresent(CompleteYourProfilePopUp.objOTPScreen,"OTP Screen");

			extent.HeaderChildNode("TC_PWA_GST_0382 : Verify the message/Text \" An account already exists with provided mobile number. Verify mobile number to login.\" displayed on top of Verify OTP screen");
			logger.info("TC_PWA_GST_0382 : Verify the message/Text \" An account already exists with provided mobile number. Verify mobile number to login.\" displayed on top of Verify OTP screen");
			verifyElementPresent(CompleteYourProfilePopUp.objAlreadyRegisteredMobileNumberErrorMsg,"\"An account already exists with provided mobile number.\" error message");

            extent.HeaderChildNode("TC_PWA_GST_0381new : Verify If a new logged in user is able to complete profile");
            logger.info("TC_PWA_GST_0381new : Verify If a new logged in user is able to complete profile");
            getWebDriver().findElement(CompleteYourProfilePopUp.objMobileNumber).sendKeys(Keys.BACK_SPACE);
            type(CompleteYourProfilePopUp.objMobileNumber, "8", "Mobile number");
//            clearField(CompleteYourProfilePopUp.objFullName,"Full name");
            for(int i=0; i<"Test IGS".length(); i++)
                getWebDriver().findElement(CompleteYourProfilePopUp.objFullName).sendKeys(Keys.BACK_SPACE);
            type(CompleteYourProfilePopUp.objFullName, "Test IGS", "Full Name");
//            clearField(CompleteYourProfilePopUp.objAge,"Age");
            for(int i=0; i<2; i++)
                getWebDriver().findElement(CompleteYourProfilePopUp.objAge).sendKeys(Keys.BACK_SPACE);
            type(CompleteYourProfilePopUp.objAge, "18", "Age 18");
            click(CompleteYourProfilePopUp.objGenFemale,"Gender Female");
            click(CompleteYourProfilePopUp.whatsappConsentCheckBox,"Whatsapp Notification Consent Chcekbox");
            click(CompleteYourProfilePopUp.continueButton,"Continue Button");
            verifyElementPresent(CompleteYourProfilePopUp.verifyOTPscreenHeader,"OTP Screen");
            logger.info("complete profile is successful!");
//            extent.extentLoggerPass("Complete profile","Complete Profile successful!");


            navigateToHome();
			if(checkElementDisplayed(PWALandingPages.objWebProfileIcon,"User Profile")) logout();
		}
	}

    /**
     * Mandatory Registration validation
     * @param userType
     * @throws Exception
     */

	public void MandatoryRegistration(String userType) throws Exception {
		extent.HeaderChildNode("TC_PWA_GST_0361 : Verify the mandatory registration inline message is not displayed for first 3 videos");
		logger.info("TC_PWA_GST_0361 : Verify the mandatory registration inline message is not displayed for first 3 videos");
		js.executeScript("window.localStorage.setItem('mandatoryRegistrationVideoCount','2')");
		js.executeScript("window.localStorage.setItem('mandatoryRegistrationPopupCount','0')");
		String count1 = js.executeScript("return window.localStorage.getItem('mandatoryRegistrationVideoCount')").toString();
		logger.info("Mandatory registration video count is set to "+count1);
		extent.extentLogger("", "Mandatory registration video count is set to "+count1);
		String episodeURL = "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-august-20-2021/0-1-manual-32ue2icsek10?t=1294";
		String home = getParameterFromXML("url");
		episodeURL = home + episodeURL;
		getWebDriver().get(episodeURL);
		logger.info("Navigated to URL: " + episodeURL);
		extent.extentLogger("", "Navigated to URL: " + episodeURL);
		String title1=getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle, "").toString();
		logger.info("Player page title fetched: " + title1);
		extent.extentLogger("", "Player page title fetched: " + title1);
		waitForPlayerAdToComplete("Video");
		waitTime(10000);
		String title2=getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle, "").toString();
		logger.info("Player page title fetched: " + title2);
		extent.extentLogger("", "Player page title fetched: " + title2);
		String count2="";
		if(!title1.equals(title2)) {
			logger.info("Switched to next video");
			extent.extentLogger("", "Switched to next video");
			count2 = js.executeScript("return window.localStorage.getItem('mandatoryRegistrationVideoCount')").toString();
			logger.info("Mandatory registration video count is "+count2);
			extent.extentLogger("", "Mandatory registration video count is "+count2);
			logger.info("Mandatory registration inline message is not displayed, as expected");
			extent.extentLogger("", "Mandatory registration inline message is not displayed, as expected");
		}
		else {
			logger.error("Failed to switch to next video");
			extent.extentLoggerFail("", "Failed to switch to next video");
			if(checkElementDisplayed(PWASignupPage.objInlineRegisterCTA,"Inline Register CTA")) {
				logger.error("Inline Register CTA is displayed for Mandatory registration video count is "+count2);
				extent.extentLoggerFail("", "Inline Register CTA is displayed for Mandatory registration video count is "+count2);
			}
		}
		extent.HeaderChildNode("TC_PWA_GST_0365 : Verify content playback counts increases when user watched first part of content excluding ads<br/>TC_PWA_GST_0387 : Verify whether eligible content pieces will counted as video viewed if user has watched the first frame of video.");
		logger.info("TC_PWA_GST_0365 : Verify content playback counts increases when user watched first part of content excluding ads\nTC_PWA_GST_0387 : Verify whether eligible content pieces will counted as video viewed if user has watched the first frame of video.");
		logger.info("Mandatory registration video count previously was "+count1);
		extent.extentLogger("", "Mandatory registration video count previously was "+count1);
		logger.info("Mandatory registration video count currently is "+count2);
		extent.extentLogger("", "Mandatory registration video count currently is "+count2);
		if(Integer.valueOf(count2)>Integer.valueOf(count1)) {
			logger.info("Content playback count has increased to "+count2);
			extent.extentLogger("", "Content playback count has increased to "+count2);
		}
		else {
			logger.error("Content playback count has not increased after watching content");
			extent.extentLoggerFail("", "Content playback count has not increased after watching content");
		}

		extent.HeaderChildNode("TC_PWA_GST_0362 : Verify skippable mandatory registration inline message is displayed for 4th video");
		logger.info("TC_PWA_GST_0362 : Verify skippable mandatory registration inline message is displayed for 4th video");
		js.executeScript("window.localStorage.setItem('mandatoryRegistrationVideoCount','3')");
		getWebDriver().get(episodeURL);
		logger.info("Navigated to Timed Anchored URL: " + episodeURL);
		extent.extentLogger("", "Navigated to Timed Anchored URL: " + episodeURL);
		String title3=getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle, "").toString();
		logger.info("Player page title fetched: " + title3);
		extent.extentLogger("", "Player page title fetched: " + title3);
		waitForPlayerAdToComplete("Video");
		String count3 = js.executeScript("return window.localStorage.getItem('mandatoryRegistrationVideoCount')").toString();
		logger.info("Mandatory registration video count is "+count3);
		extent.extentLogger("", "Mandatory registration video count is "+count3);
		verifyElementPresent(PWASignupPage.objInlineRegisterCTA,"Inline Register CTA");
		verifyElementPresent(PWASignupPage.objInlineSkipCTA,"Skip CTA");

		extent.HeaderChildNode("TC_PWA_GST_0368 : Verify UI/UX Should be displayed as per VD");
		logger.info("TC_PWA_GST_0368 : Verify UI/UX Should be displayed as per VD");
		verifyElementPresent(PWASignupPage.objInlineRegisterText,"'Please register to watch this content' text");
		verifyElementPresent(PWASignupPage.objInlineRegisterCTA,"Inline Register CTA");
		verifyElementPresent(PWASignupPage.objInlineSkipCTA,"Skip CTA");
		verifyElementPresent(PWASignupPage.objInlineAlreadyRegisteredText, "'Already Registered?' text");
		verifyElementPresent(PWASignupPage.objInlineLoginCTA,"Login CTA");

		extent.HeaderChildNode("TC_PWA_GST_0369 : Verify \"Mandatory registration\" popup should be displayed when user clicks on \"Register\" CTA.");
		logger.info("TC_PWA_GST_0369 : Verify \"Mandatory registration\" popup should be displayed when user clicks on \"Register\" CTA.");
		verifyElementPresentAndClick(PWASignupPage.objInlineRegisterCTA,"Inline Register CTA");
		verifyElementPresent(PWASignupPage.objRegisterPopUp,"Register Pop Up");


		extent.HeaderChildNode("TC_PWA_GST_0402 : Verify that user is able to see Below Fields and Text in Skippable registration Pop-up");
		logger.info("TC_PWA_GST_0402 : Verify that user is able to see Below Fields and Text in Skippable registration Pop-up");
		verifyElementPresent(PWASignupPage.objRegisterPopUp,"Text \"Please sign up to personalize watching your experience\"");
		verifyElementPresent(PWASignupPage.objMobileNumberFieldInReg, "Mobile number field");
		verifyElementPresent(CompleteYourProfilePopUp.objGenFemale, "Gender Female field");
		verifyElementPresent(CompleteYourProfilePopUp.objGenMale, "Gender Male field");
		verifyElementPresent(CompleteYourProfilePopUp.objGenOther, "Gender Other field");
		verifyElementPresent(PWASignupPage.objWhyDoWeNeedThisText, "Tooltip \"Why do we need this?\"");
		verifyElementPresent(PWASignupPage.objWhatsappConsentText, "Whatsapp consent text \"I want to receive updates & notifications over WhatsApp\"");
		verifyElementPresent(CompleteYourProfilePopUp.objDisabledContinue,"Continue CTA");
		verifyElementPresent(PWASignupPage.objPopUpClose,"Pop Up Close button");
		try{getWebDriver().findElement(PWASignupPage.objRegisterPopUp).click();}catch(Exception e) {}
		String labelText=getElementPropertyToString("innerText",PWASignupPage.objLabelInRegisterPopUp,"");
		String expectedLabelText="By proceeding you agree to our Terms of Services & Privacy Policy";
		if(labelText.equals(expectedLabelText)) {
			logger.info("Label \""+expectedLabelText+"\" is displayed");
			extent.extentLogger("", "Label \""+expectedLabelText+"\" is displayed");
		}
		else {
			logger.error("Label \""+labelText+"\" is displayed instead of \""+expectedLabelText+"\".");
			extent.extentLoggerFail("","Label \""+labelText+"\" is displayed instead of \""+expectedLabelText+"\".");
		}
		verifyElementPresent(PWASignupPage.objAlreadyRegisteredWithLogin,"\"Already registered?\" with \"Login\" link");

		extent.HeaderChildNode("TC_PWA_GST_0400 : Verify email text field is not displaying in mandatory registration pop-up");
		logger.info("TC_PWA_GST_0400 : Verify email text field is not displaying in mandatory registration pop-up");
		if(checkElementDisplayed(CompleteYourProfilePopUp.objEmailField,"Email Field")) {
			logger.error("Email field is displayed in Mandatory Registration Popup");
			extent.extentLoggerFail("", "Email field is displayed in Mandatory Registration Popup");
		}
		else {
			logger.info("Email field is not displayed in Mandatory Registration Popup, expected behavior");
			extent.extentLogger("", "Email field is not displayed in Mandatory Registration Popup, expected behavior");
		}

		extent.HeaderChildNode("TC_PWA_GST_0393 : Verify proper error messages are displaying when user inputs the inappropriate or blank data for the required field");
		logger.info("TC_PWA_GST_0393 : Verify proper error messages are displaying when user inputs the inappropriate or blank data for the required field");
		extent.extentLogger("", "------------------- Incorrect Mobile -----------------");
		logger.info("------------------- Incorrect Mobile -----------------");
		click(PWASignupPage.objMobileNumberFieldInReg, "Mobile number");
		type(PWASignupPage.objMobileNumberFieldInReg, "98", "Mobile number");
		click(PWASignupPage.objRegisterPopUp,"Pop Up");
		verifyElementPresent(CompleteYourProfilePopUp.objMobileError,"Error message \"Invalid Mobile Number\"");
		clearEditField(PWASignupPage.objMobileNumberFieldInReg,2, "Mobile Number field");
		extent.extentLogger("", "------------------- Incorrect Age -----------------");
		logger.info("------------------- Incorrect Age -----------------");
		type(CompleteYourProfilePopUp.objAge, "17", "Age 17");
		waitTime(2000);
		click(PWASignupPage.objRegisterPopUp,"Pop Up");
		verifyElementPresent(CompleteYourProfilePopUp.objAgeError,"Error message \"Age should be between 18 and 103 years.\"");
		clearEditField(CompleteYourProfilePopUp.objAge,2, "Age field");
		extent.extentLogger("", "------------------- Gender not selected -----------------");
		logger.info("------------------- Gender not selected -----------------");
		type(PWASignupPage.objMobileNumberFieldInReg, "9876543210", "Mobile number");
		type(CompleteYourProfilePopUp.objFullName, "Test IGS", "Full Name");
		type(CompleteYourProfilePopUp.objAge, "18", "Age 18");
		verifyElementPresent(CompleteYourProfilePopUp.objDisabledContinue,"Disabled Continue button when Gender is not selected");
		waitTime(2000);
		extent.extentLogger("", "------------------- Mobile Number not entered -----------------");
		logger.info("------------------- Mobile Number not entered -----------------");
		clearEditField(PWASignupPage.objMobileNumberFieldInReg,10, "Mobile Number field");
		click(CompleteYourProfilePopUp.objGenFemale,"Gender Female");
		verifyElementPresent(CompleteYourProfilePopUp.objDisabledContinue,"Disabled Continue button when Mobile is not entered");
		waitTime(2000);
		extent.extentLogger("", "------------------- Age not entered -----------------");
		logger.info("------------------- Age not entered -----------------");
		clearEditField(CompleteYourProfilePopUp.objAge,2, "Age field");
		type(PWASignupPage.objMobileNumberFieldInReg, "9876543210", "Mobile number");
		verifyElementPresent(CompleteYourProfilePopUp.objDisabledContinue,"Disabled Continue button when Mobile is not entered");
		waitTime(2000);

		extent.HeaderChildNode("TC_PWA_GST_0394 : Verify whether user is navigating to respective page on click of any link(Terms of Services , Privacy Policy, Login) in Sign Up popup.");
		logger.info("TC_PWA_GST_0394 : Verify whether user is navigating to respective page on click of any link(Terms of Services , Privacy Policy, Login) in Sign Up popup.");
		String zeeTab=getWebDriver().getWindowHandle();
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objTermsOfServicesLink,"Terms of Services link");
		for (String winHandle : getWebDriver().getWindowHandles()) {
			if (!winHandle.equals(zeeTab)) {
				getWebDriver().switchTo().window(winHandle);
				verifyElementPresent(PWAHamburgerMenuPage.objTermsOfUseScreen,"Terms of Use screen");
				getWebDriver().close();
				getWebDriver().switchTo().window(zeeTab);
			}
		}
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objPrivacyPolicyLink,"Privacy Policy link");
		for (String winHandle : getWebDriver().getWindowHandles()) {
			if (!winHandle.equals(zeeTab)) {
				getWebDriver().switchTo().window(winHandle);
				verifyElementPresent(PWAHamburgerMenuPage.objPrivacyPolicyScreen,"Privacy Policy screen");
				getWebDriver().close();
				getWebDriver().switchTo().window(zeeTab);
			}
		}
		verifyElementPresentAndClick(CompleteYourProfilePopUp.objLoginLink,"Login link");
		verifyElementPresent(PWALoginPage.objLoginToZee5PageText, "Login to ZEE5 page");

		extent.HeaderChildNode("TC_PWA_GST_0370 : User should be able directed to the login page which user clicks on \"Login\" CTA.");
		logger.info("TC_PWA_GST_0370 : User should be able directed to the login page which user clicks on \"Login\" CTA.");
		js.executeScript("window.localStorage.setItem('mandatoryRegistrationVideoCount','3')");
		js.executeScript("window.localStorage.setItem('mandatoryRegistrationPopupCount','0')");
		getWebDriver().get(episodeURL);
		logger.info("Navigated to Timed Anchored URL: " + episodeURL);
		extent.extentLogger("", "Navigated to Timed Anchored URL: " + episodeURL);
		waitForPlayerAdToComplete("Video");
		verifyElementPresentAndClick(PWASignupPage.objInlineLoginCTA,"Login CTA");
		String currentUrl=getWebDriver().getCurrentUrl();
		if(currentUrl.contains("/signin")) {
			logger.info("Signin page is displayed : "+currentUrl);
			extent.extentLogger("", "Signin page is displayed : "+currentUrl);
		}
		else {
			logger.error("Signin page is not displayed. Current URL: "+currentUrl);
			extent.extentLoggerFail("", "Signin page is not displayed. Current URL: "+currentUrl);
		}

		extent.HeaderChildNode("TC_PWA_GST_0401 : Verify UI for Mandatory registration pop-up in all display language");
		logger.info("TC_PWA_GST_0401 : Verify UI for Mandatory registration pop-up in all display language");
		navigateToHome();
		click(PWAHamburgerMenuPage.objLanguageBtnWeb, "Language Button");
		click(PWALanguageSettingsPage.objNonSelectedHin, "Hindi Display Language");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		waitTime(2000);
		js.executeScript("window.localStorage.setItem('mandatoryRegistrationVideoCount','3')");
		js.executeScript("window.localStorage.setItem('mandatoryRegistrationPopupCount','0')");
		String hiEpisodeURL="hi/tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-august-20-2021/0-1-manual-32ue2icsek10?t=1294";
		hiEpisodeURL = home + hiEpisodeURL;
		getWebDriver().get(hiEpisodeURL);
		logger.info("Navigated to Timed Anchored URL: " + hiEpisodeURL);
		extent.extentLogger("", "Navigated to Timed Anchored URL: " + hiEpisodeURL);
		waitForPlayerAdToComplete("Video");
		verifyElementPresentAndClick(PWASignupPage.objInlineRegisterCTA,"Inline Register CTA");
		verifyElementPresent(CompleteYourProfilePopUp.objRegPopupInHindi,"Mobile Number Field in Hindi");
		extent.HeaderChildNode("TC_PWA_GST_0403 : Verify on Close icon Skippable registration Pop-Up should be closed");
		logger.info("TC_PWA_GST_0403 : Verify on Close icon Skippable registration Pop-Up should be closed");
		click(PWASignupPage.objPopUpClose,"Pop Up Close button");
		if(checkElementDisplayed(PWASignupPage.objRegisterPopUp,"Register Pop Up")) {
			logger.error("Register Popup is displayed even after clicking on Popup Close button");
			extent.extentLoggerFail("", "Register Popup is displayed even after clicking on Popup Close button");
		}
		else {
			logger.info("Register Popup is not displayed after clicking on Popup Close button, expected behavior");
			extent.extentLogger("", "Register Popup is displayed after clicking on Popup Close button, expected behavior");
		}
		click(PWAHamburgerMenuPage.objLanguageBtnWeb, "Language Button");
		click(PWALanguageSettingsPage.objNonSelectedEng, "English Display Language");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");

		extent.HeaderChildNode("TC_PWA_GST_0363 : Verify user should be able to skip the mandatory registration flow if user clicks on skip CTA.");
		logger.info("TC_PWA_GST_0363 : Verify user should be able to skip the mandatory registration flow if user clicks on skip CTA.");
		js.executeScript("window.localStorage.setItem('mandatoryRegistrationVideoCount','3')");
		getWebDriver().get(episodeURL);
		logger.info("Navigated to Timed Anchored URL: " + episodeURL);
		extent.extentLogger("", "Navigated to Timed Anchored URL: " + episodeURL);
		waitForPlayerAdToComplete("Video");
		verifyElementPresentAndClick(PWASignupPage.objInlineSkipCTA,"Skip CTA");
		waitTime(10000);
		if(checkElementDisplayed(PWASignupPage.objInlineRegisterCTA,"Inline Register CTA")) {
			logger.error("Skip functionality failed");
			extent.extentLoggerFail("", "Skip functionality failed");
		}
		else {
			logger.info("Click on Skip CTA has skipped mandatory registration, expected behavior");
			extent.extentLogger("", "Click on Skip CTA has skipped mandatory registration, expected behavior");
		}

		extent.HeaderChildNode("TC_PWA_GST_0366 : Verify content playback counts not consider when user watched only ads for switching different free contents<br/>TC_PWA_GST_0388 : Verify eligible content pieces should not be counted as video viewed when user watches only adds in consumption page");
		logger.info("TC_PWA_GST_0366 : Verify content playback counts not consider when user watched only ads for switching different free contents\nTC_PWA_GST_0388 : Verify eligible content pieces should not be counted as video viewed when user watches only adds in consumption page");
		navigateToHome();
		js.executeScript("window.localStorage.setItem('mandatoryRegistrationVideoCount','0')");
		logger.info("Mandatory video count is set to 0");
		extent.extentLogger("", "Mandatory video count is set to 0");
		episodeURL = "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya/0-1-6z518870";
		episodeURL = home + episodeURL;
		getWebDriver().get(episodeURL);
		logger.info("Navigated to URL: " + episodeURL);
		extent.extentLogger("", "Navigated to URL: " + episodeURL);
		waitTime(5000);
		try {
			getWebDriver().findElement(PWAPlayerPage.objAd);
			logger.info("Ad play in progress");
			extent.extentLogger("", "Ad play in progress");
			navigateToHome();
			String count5 = js.executeScript("return window.localStorage.getItem('mandatoryRegistrationVideoCount')").toString();
			logger.info("Mandatory registration video count is "+count5);
			extent.extentLogger("", "Mandatory registration video count is "+count5);
			if(count5.equals("0")) {
				logger.info("Playback counts not increased when user watched only ads, expected behavior");
				extent.extentLogger("", "Playback counts not increased when user watched only ads, expected behavior");
			}
			else {
				logger.error("Playback count changed when user watched only ads");
				extent.extentLoggerFail("", "Playback count changed when user watched only ads");
			}
		}
		catch(Exception e) {
			logger.info("Ad did not play, hence could not verify test case");
			extent.extentLoggerWarning("", "Ad did not play, hence could not verify test case");
		}

		extent.HeaderChildNode("TC_PWA_GST_0367 : Verify user should see mandatory registration inline message is displayed for 9th content without skip option");
		logger.info("TC_PWA_GST_0367 : Verify user should see mandatory registration inline message is displayed for 9th content without skip option");
		js.executeScript("window.localStorage.setItem('mandatoryRegistrationVideoCount','9')");
		js.executeScript("window.localStorage.setItem('mandatoryRegistrationPopupCount','5')");
		logger.info("Mandatory registration video count is set to 9");
		extent.extentLogger("", "Mandatory registration video count is set to 9");
		episodeURL = "tvshows/details/kundali-bhagya/0-6-366/kundali-bhagya-august-20-2021/0-1-manual-32ue2icsek10?t=1294";
		episodeURL = home + episodeURL;
		getWebDriver().get(episodeURL);
		logger.info("Navigated to Timed Anchored URL: " + episodeURL);
		extent.extentLogger("", "Navigated to Timed Anchored URL: " + episodeURL);
		String title4=getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle, "").toString();
		logger.info("Player page title fetched: " + title4);
		extent.extentLogger("", "Player page title fetched: " + title4);
		waitForPlayerAdToComplete("Video");
		verifyElementPresent(PWASignupPage.objInlineRegisterCTA,"Inline Register CTA");
		if(checkElementDisplayed(PWASignupPage.objInlineSkipCTA,"Skip CTA")) {
			logger.error("Skip CTA is displayed even after 9th content");
			extent.extentLoggerFail("", "Skip CTA is displayed even after 9th content");
		}
		else {
			logger.info("Skip CTA is not displayed after 9th content, expected behavior");
			extent.extentLogger("", "Skip CTA is not displayed after 9th content, expected behavior");
		}

		extent.HeaderChildNode("TC_PWA_GST_0404 : Verify Close icon Should not be displayed in Non-Skippable registration Pop-Up");
		logger.info("TC_PWA_GST_0404 : Verify Close icon Should not be displayed in Non-Skippable registration Pop-Up");
		verifyElementPresentAndClick(PWASignupPage.objInlineRegisterCTA,"Inline Register CTA");
		if(checkElementDisplayed(PWASignupPage.objPopUpClose,"Pop Up Close button")){
			logger.error("Pop Up Close button should not be displayed");
			extent.extentLoggerFail("", "Pop Up Close button should not be displayed");
		}
		else {
			logger.info("Pop Up Close button is not displayed, expected behavior");
			extent.extentLogger("", "Pop Up Close button is not displayed, expected behavior");
		}
		js.executeScript("window.localStorage.setItem('mandatoryRegistrationVideoCount','0')");
		js.executeScript("window.localStorage.setItem('mandatoryRegistrationPopupCount','0')");
	}

	public void clearEditField(By locator,int countOfBackspace, String field) {
		for(int i=0;i<countOfBackspace;i++) {
			getWebDriver().findElement(locator).sendKeys(Keys.BACK_SPACE);
			waitTime(1000);
		}
		logger.info("Cleared "+field);
		extent.extentLogger("", "Cleared "+field);
	}

	public void NativeLogin(String userType) throws Exception {
		navigateHome();
		if (checkElementDisplayed(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon")) {
			logout();
		}
		String phoneno="7892978363";
		String phonepasssword="igs1619";
		String phoneincorrectpassword="igs191919";
		logger.info("Currently executing as Guest user");
		extent.extentLogger("", "Currently executing as Guest user");
		extent.HeaderChildNode("TC_PWA_NS_0329 : Verify whether User native login screen");
		logger.info("TC_PWA_NS_0329 : Verify whether User native login screen");
		navigateToHome();
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button in Home screen");
		waitTime(2000);
		verifyElementPresent(PWALoginPage.objLoginToZee5PageText,"\"Login to ZEE5\" screen");
		extent.HeaderChildNode("TC_PWA_NS_0330 : Verify the user can navigate to OTP Verification screen when login via registered Mobile Num");
		logger.info("TC_PWA_NS_0330 : Verify the user can navigate to OTP Verification screen when login via registered Mobile Num");
		type(PWALoginPage.objEmailField, phoneno, "Mobile Number field");
		click(PWALoginPage.objWebLoginButton, "Login Button");
		verifyElementPresent(CompleteYourProfilePopUp.objOTPScreen,"OTP Screen");
		extent.HeaderChildNode("TC_PWA_NS_0332 : Verify user is able to see Enter Password Pop-up to enter password on clicking on Password CTA for Mobile Login");
		logger.info("TC_PWA_NS_0332 : Verify user is able to see Enter Password Pop-up to enter password on clicking on Password CTA for Mobile Login");
		verifyElementPresent(PWASignupPage.objEnterPasswordButton,"Enter Password button");
		extent.HeaderChildNode("TC_PWA_NS_0335 : Verify the Login with Invalid Credentials");
		logger.info("TC_PWA_NS_0335 : Verify the Login with Invalid Credentials");
		click(PWASignupPage.objEnterPasswordButton,"Enter Password button");
		click(PWALoginPage.objLoginPassword,"Password field");
		type(PWALoginPage.objLoginPassword, phoneincorrectpassword, "Password");
		click(PWALoginPage.objLoginProceed,"Password field");
		verifyElementPresent(PWALoginPage.objInvalidLoginError,"Error message \"The mobile number and password combination was wrong during login.\"");
		waitTime(5000);
		extent.HeaderChildNode("TC_PWA_NS_0333 : Verify user is able to login via entering password on clicking Password CTA for Mobile Login");
		logger.info("TC_PWA_NS_0333 : Verify user is able to login via entering password on clicking Password CTA for Mobile Login");
		waitTime(3000);
		clearEditField(PWALoginPage.objLoginPassword,phoneincorrectpassword.length(), "Mobile number password field");
		type(PWALoginPage.objLoginPassword, phonepasssword, "Password");
		click(PWALoginPage.objLoginProceed,"Password field");
		waitTime(5000);
		verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon after Successful Login");
		extent.HeaderChildNode("TC_PWA_NS_0334 : Verify the ‘Forgot Password’ functionality for Mobile User");
		logger.info("TC_PWA_NS_0334 : Verify the ‘Forgot Password’ functionality for Mobile User");
		logout();
		click(PWALoginPage.objWebLoginBtn, "Login button in Home screen");
		waitTime(5000);
		click(PWALoginPage.objForgotPasswordButton, "Forgot Password button");
		waitTime(3000);
		type(PWALoginPage.objEmailField, phoneno, "Mobile Number field");
		click(PWALoginPage.objContinueBtn,"Continue button");
		verifyElementPresent(PWALoginPage.objForgotPasswordPage,"Forgot Password page");
		type(PWALoginPage.objNewPasswordField, phonepasssword, "Password field");
		type(PWALoginPage.objConfirmNewPasswordField, phonepasssword, "Confirm Password field");
		click(PWALoginPage.objSetNewPasswordButton, "Set New Password button");
		if (checkElementDisplayed(PWALoginPage.objOTPVerifyPage, "OTP verification page")) {
			logger.info("User is redirected to Verify OTP page");
			extent.extentLogger("OTP", "User is redirected to Verify OTP page");
		}
		else {
			logger.error("User is not redirected to Verify otp page");
			extent.extentLoggerFail("", "User is not redirected to Verify OTP page");
		}
		navigateHome();
		String emailid=getParameterFromXML("NonsubscribedUserName");
		String emailpassword=getParameterFromXML("NonsubscribedPassword");
		String emailIncorrectpassword="123456789";
		extent.HeaderChildNode("TC_PWA_NS_0339 : Verify the Forgot Password Functionality for Email user");
		logger.info("TC_PWA_NS_0339 : Verify the Forgot Password Functionality for Email user");
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		click(PWALoginPage.objForgotPasswordButton, "Forgot Password button");
		waitTime(3000);
		type(PWALoginPage.objEmailField, emailid, "Email ID field");
		click(PWALoginPage.objContinueBtn,"Continue button");
		boolean toastMdisplayed=false;
		{
			getWebDriver().manage().timeouts().implicitlyWait(1, TimeUnit.MILLISECONDS);
			for(int i=0;i<20;i++) {
				try {
					getWebDriver().findElement(By.xpath("//*[@class='toastMessage']"));
					logger.info("Toast message is displayed");
					extent.extentLogger("", "Toast message is displayed");
					toastMdisplayed=true;
					break;
				}
				catch(Exception e) {}
			}
		}
		if(toastMdisplayed==false) {
			logger.info("Toast message failed to get displayed");
			extent.extentLoggerWarning("", "Toast message failed to get displayed");
		}
		if(verifyElementPresent(PWALoginPage.objActiveHome,"Home page")) {
			logger.info("Forgot Password redirected to Home page after entering email, expected behavior");
			extent.extentLogger("", "Forgot Password redirected to Home page after entering email, expected behavior");
		}
		else {
			logger.error("Forgot Password failed to redirect to Home page after entering email");
			extent.extentLoggerFail("", "Forgot Password failed to redirect to Home page after entering email");
		}
		extent.HeaderChildNode("TC_PWA_NS_0338 : Verify the Login via invalid Email user Crdentials");
		logger.info("TC_PWA_NS_0338 : Verify the Login via invalid Email user Crdentials");
		verifyElementPresentAndClick(PWALoginPage.objWebLoginBtn, "Login button");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
		type(PWALoginPage.objEmailField, "" + emailid, "Email Field");
		waitTime(3000);
		verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
		type(PWALoginPage.objPasswordField, "" + emailIncorrectpassword, "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		boolean toastdisplayed=false;
		{
			getWebDriver().manage().timeouts().implicitlyWait(1, TimeUnit.MILLISECONDS);
			for(int i=0;i<20;i++) {
				try {
					getWebDriver().findElement(By.xpath("//*[@class='toastMessage']"));
					logger.info("Error Toast message is displayed");
					extent.extentLogger("", "Error Toast message is displayed");
					toastdisplayed=true;
					break;
				}
				catch(Exception e) {}
			}
		}
		if(toastdisplayed==false) {
			logger.info("Error Toast message failed to get displayed");
			extent.extentLogger("", "Error Toast message failed to get displayed");
		}
		if(verifyElementPresent(PWALoginPage.objWebLoginButton,"Login button")) {
			logger.info("Login failed due to incorrect credentials, expected behavior");
			extent.extentLogger("", "Login failed due to incorrect credentials, expected behavior");
		}
		else {
			logger.error("Login has not failed on entering incorrect credentials");
			extent.extentLoggerFail("", "Login has not failed on entering incorrect credentials");
		}
		extent.HeaderChildNode("TC_PWA_NS_0337 : Verify the Login via Email user Crdentials");
		logger.info("TC_PWA_NS_0337 : Verify the Login via Email user Crdentials");
		clearEditField(PWALoginPage.objPasswordField,emailIncorrectpassword.length(), "Email password field");
		type(PWALoginPage.objPasswordField, "" + emailpassword, "Password field");
		waitTime(5000);
		click(PWALoginPage.objWebLoginButton, "Login Button");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon after Successful Login");

	}


	public void Hamburgermenu(String userType) throws Exception
	{
			String TCID = null;
			if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0405";
			if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0419";
			if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0406";
			extent.HeaderChildNode(TCID +"Validate the Explore option given in the Menu list with expansion arrow at right side");
			verificationsOfExploreOptions();
			if (userType.equals("Guest")) {
				if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0407";
				extent.HeaderChildNode(TCID+ "Validating Buy Plan and Have A Prepaid Code under Plans");
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Button");
				if (checkElementDisplayed(PWAHamburgerMenuPage.objPlans, "Plans")) {
					if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0405";
					extent.HeaderChildNode(TCID +"Validate the user can expand the Plan and can see below optons:Buy Plan , Have a Prepaid Code");
					checkElementDisplayed(PWAHamburgerMenuPage.objBuySubscription, "Buy Plan");
					checkElementDisplayed(PWAHamburgerMenuPage.objHaveAPrepaidCode, "Have a Prepaid Code");
				}
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objHomeInOpenMenuTab, "Home");
			}

			if(userType.equalsIgnoreCase("Guest")|| (userType.equalsIgnoreCase("NonSubscribedUser"))) {
				if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0412";
				if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0423";
				extent.HeaderChildNode(TCID+ "Validate that User settings resets to default post tapping on reset to default button.");
			resetToDefault();
			if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0409";
			if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0421";
			extent.HeaderChildNode(TCID+ "Validate that Setting option is displayed under more menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Button");
			verifyElementPresent(PWAHamburgerMenuPage.objSettingsOption, "Settings Button");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Button");

			}
			if(userType.equalsIgnoreCase("SubscribedUser")|| (userType.equalsIgnoreCase("NonSubscribedUser"))) {
			if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0424, TC_PWA_NS_0425 , TC_PWA_NS_0426 ,TC_PWA_NS_0427";
			if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0408 , TC_PWA_SUB_0409 , TC_PWA_SUB_0410 , TC_PWA_SUB_0411";
			extent.HeaderChildNode(TCID +"Validate the Explore option given in the Menu list with expansion arrow at right side");
			parentControlFunctionality(userType);
			}

			if (!userType.equals("Guest")) {

				if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_SUB_0428";
				if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0412";
				extent.HeaderChildNode(TCID + "The Parental Control setting screen is displaying the options as per the list");
				logger.info("The Parental Control setting screen is displaying the options as per the list");
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objParentalControl, "Parental Control option");
				checkElementDisplayed(PWALoginPage.objPasswordField, "Password field");
				String password = "";
				if (userType.equals("NonSubscribedUser")) {
					password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
							.getParameter("NonsubscribedPassword");
				} else if (userType.equals("SubscribedUser")) {
					password = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
							.getParameter("SubscribedPassword");
				}
				type(PWALoginPage.objPasswordField, password, "Password field");
				click(PWAHamburgerMenuPage.objContinueButtonInVerifyAccount, "Continue button");
				waitTime(2000);
				if (checkElementDisplayed(PWAHamburgerMenuPage.objParentControlPageTitle, "Parent control page")) {
					verifyElementPresent(PWAHamburgerMenuPage.objParentalControlOption("No Restrictions"),
							"\"No Restrictions\" option");
					verifyElementPresent(PWAHamburgerMenuPage.objParentalControlOption("Restrict 18+ Content"),
							"\"Restrict 18+ Content\" option");
					verifyElementPresent(PWAHamburgerMenuPage.objParentalControlOption("Restrict 16+ Content"),
							"\"Restrict 16+ Content\" option");
					verifyElementPresent(PWAHamburgerMenuPage.objParentalControlOption("Restrict 13+ Content"),
							"\"Restrict 13+ Content\" option");
					verifyElementPresent(PWAHamburgerMenuPage.objParentalControlOption("Restrict 7+ Content"),
							"\"Restrict 7+ Content\" option");
					verifyElementPresent(PWAHamburgerMenuPage.objParentalControlOption("Restrict All Content"),
							"\"Restrict All Content\" option");
				} else {
					logger.error("Parent control page failed to display");
					extent.extentLoggerFail("", "Parent control page failed to display");
				}

				if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0429";
				if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0413";
				extent.HeaderChildNode(TCID+ "Active Device Validation");
				activateFunctionality();
			}
	}

public void staticPagesForMenu(String UserType) throws Exception {

		if(userType.equalsIgnoreCase("Guest")) {

			extent.HeaderChildNode("TC_PWA_GST_0413: Verify About Us Screen UI and accessibility");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			partialScroll();
			verifyElementPresent(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
//			if (checkElementDisplayed(PWAHomePage.objWhatToWatchPopUp, "wondering what to watch pop up")) {
//				verifyElementPresentAndClick(PWAHomePage.objWhatToWatchCloseButton, "Pop up close button");
//			}

			extent.HeaderChildNode("TC_PWA_GST_0414: Check whether the user should be able to view the content of the  \"About Us \"  screen of the application.");
			JSClick(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objAboutUsTextInPage, "About Us Screen page")) {
				logger.info("User is navigated to About Us screen");
				extent.extentLogger("", "User is navigated to About Us screen");
			} else {
				logger.info("User is navigated to About Us screen");
				extent.extentLogger("", "User is navigated to About Us screen");
			}

			extent.HeaderChildNode("TC_PWA_GST_0415: Verify the content of the page should be according to the display language set by the user.");
			// Changing display language to Kannada
			verifyElementPresentAndClick(PWAHomePage.objLanguage, "Language button");
			verifyElementPresentAndClick(PWAHomePage.objKannadaWEB, "Kannada option");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
			// About Us
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			partialScroll();
			if (userType.contains("Guest")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objAboutUsinKannada, "About Us option in kannada");
			} else {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objAboutUsinKannada2, "About Us option in kannada");
			}
			String title1 = getText(PWAHamburgerMenuPage.objAboutUsTextInPage);
			System.out.println("Title " + title1);
			if (title1.contains("About Us")) {
				logger.error("Content of the About Us page is not according to the display language");
				extent.extentLoggerFail("",
						"Content of the page About Us is not according to the display language");
			}
			// Changing display language to English
			verifyElementPresentAndClick(PWAHomePage.objLanguage, "Language button");
			verifyElementPresentAndClick(PWAHomePage.objEnglishWEB, "English option");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
			verifyElementPresent(PWAHamburgerMenuPage.objAboutUsInfo, "Brief information of the application");

			extent.HeaderChildNode("TC_PWA_GST_0416: Verify the content of the page should be opened in webview.");
			String aboutUsURL = getWebDriver().getCurrentUrl();
			System.out.println(aboutUsURL);
			if (aboutUsURL.contains("aboutus")) {
				logger.info("About Us screen is opened in webview");
				extent.extentLoggerPass("", "About Us screen is opened in webview");
			} else {
				logger.error("About Us screen is not opened in webview");
				extent.extentLoggerFail("", "About Us screen is opened in webview");
			}

			extent.HeaderChildNode("TC_PWA_GST_0417: Verify the content of the page should show the brief information of the application.");
			verifyElementPresent(PWAHamburgerMenuPage.objAboutUsInfo, "Brief information of the application");
			Back(1);

			extent.HeaderChildNode("TC_PWA_GST_0418: Verify Privacy Policy Screen UI and accessibility");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
			partialScroll();
			verifyElementPresent(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");

			extent.HeaderChildNode("TC_PWA_GST_0419: Check whether the user should be able to view the \"Privacy Policy\" in WebView  of the application.");
			JSClick(PWAHamburgerMenuPage.objPrivacyPolicy, "Privacy Policy option");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objPrivacyPolicyScreen, "Privacy Policy screen")) {
				logger.info("User is navigated to Privacy Policy screen");
				extent.extentLoggerPass("", "User is navigated to Privacy Policy screen");
			} else {
				logger.error("User is not navigated to Privacy Policy screen");
				extent.extentLoggerFail("", "User is not navigated to Privacy Policy screen");
			}

			extent.HeaderChildNode("TC_PWA_GST_0420: Verify the content of the page should be according to the display language set by the user.");
			// Changing display language to Kannada
			verifyElementPresentAndClick(PWAHomePage.objLanguage, "Language button");
			verifyElementPresentAndClick(PWAHomePage.objKannadaWEB, "Kannada option");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
			// Privacy Policy
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPrivacyPolicyInKannadA,
					"Privacy Policy option in Kannada");
			String title3 = getText(PWAHamburgerMenuPage.objPrivacyPolicyScreen);
			System.out.println("Title " + title3);
			if (title3.contains("Privacy Policy")) {
				logger.info("Content of the Privacy Policy page is not according to the display language");
				extent.extentLoggerFail("",
						"Content of the Privacy Policy page is not according to the display language");
			}
			// Changing display language to English
			verifyElementPresentAndClick(PWAHomePage.objLanguage, "Language button");
			verifyElementPresentAndClick(PWAHomePage.objEnglishWEB, "English option");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");

			extent.HeaderChildNode("TC_PWA_GST_0421: Verify the content of the page should be opened in Webview.");
			String privacyPolicyURL = getWebDriver().getCurrentUrl();
			System.out.println(privacyPolicyURL);
			if (privacyPolicyURL.contains("privacypolicy")) {
				logger.info("Privacy Policy screen is opened in webview");
				extent.extentLoggerPass("", "Privacy Policy screen is opened in webview");
			} else {
				logger.error("Privacy Policy screen is not opened in webview");
				extent.extentLoggerFail("", "Privacy Policy screen is not opened in webview\"");
			}

			extent.HeaderChildNode("TC_PWA_GST_0422: Verify the user should be able to view the legal information of the application.");
			verifyElementPresent(PWAHamburgerMenuPage.objPrivacyPolicyInfo, "Legal information of the application");

			extent.HeaderChildNode("TC_PWA_GST_0423: Verify that the user should be able to scroll the page up and down.");
			scrolltillBackToArrowAppears();
			if (checkElementDisplayed(PWAHamburgerMenuPage.objPrivacyPolicyScreen, "Privacy Policy screen")) {
				System.out.println("Navigated to Top of the page");
				extent.extentLoggerPass("", "Navigated to Top of page");
				logger.info("Navigated to Top of the page");
			} else {
				extent.extentLoggerFail("", "Not Navigated to Top of page");
				logger.error("Not Navigated to Top of the page");
			}

			extent.HeaderChildNode("TC_PWA_GST_0424: Verify that the user should get the data content and security of the application.");
			partialScroll();
			verifyElementPresent(PWAHamburgerMenuPage.objSecurityInfo, "Security Information of the application");
			Back(1);

			extent.HeaderChildNode("TC_PWA_GST_0425: Verify Terms of Use UI and accesibility");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			partialScroll();
			verifyElementPresent(PWAHamburgerMenuPage.objTermsOfUseOption, "Terms of Use option");

			extent.HeaderChildNode("TC_PWA_GST_0426: Check whether the user should be able to view the \"Terms of Use \" in WebView  of the application.");
			JSClick(PWAHamburgerMenuPage.objTermsOfUseOption, "Terms of Use option");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objTermsOfUseScreen, "Terms of Use screen")) {
				logger.info("User is navigated to Terms of Use screen");
				extent.extentLoggerPass("Terms of Use", "User is navigated to Terms of Use screen");
			} else {
				logger.error("User is not navigated to Terms of Use screen");
				extent.extentLoggerFail("Terms of Use", "User is not navigated to Terms of Use screen");
			}

			extent.HeaderChildNode("TC_PWA_GST_0427: Verify the content of the page should be according to the display language set by the user.");
			// Changing display language to Kannada
			verifyElementPresentAndClick(PWAHomePage.objLanguage, "Language button");
			verifyElementPresentAndClick(PWAHomePage.objKannadaWEB, "Kannada option");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
			waitTime(3000);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");
			// Terms of Use
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			partialScroll();
			if (userType.contains("Guest")) {
				JSClick(PWAHamburgerMenuPage.objTermsInKannada, "Terms of Use option in Kannada");
			} else if (userType.contains("NonSubscribedUser") || userType.contains("SubscribedUser")) {
				waitTime(5000);
				verifyElementPresent(PWAHamburgerMenuPage.objTermsInKannada2, "Terms of Use option in Kannada");
				JSClick(PWAHamburgerMenuPage.objTermsInKannada2, "Terms of Use option in Kannada");
			}
			String title2 = getText(PWAHamburgerMenuPage.objTermsOfUseScreen);
			System.out.println("Title " + title2);
			if (title2.contains("Terms of Use")) {
				logger.info("Content of the Terms of Use page is not according to the display language");
				extent.extentLoggerFail("Terms of Use",
						"Content of the Terms of Use page is not according to the display language");
			}
			// Changing display language to English
			verifyElementPresentAndClick(PWAHomePage.objLanguage, "Language button");
			verifyElementPresentAndClick(PWAHomePage.objEnglishWEB, "English option");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApply, "Apply button on display langauge screen");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objApplybutton, "Apply button on content language screen");

			extent.HeaderChildNode("TC_PWA_GST_0428: Verify the content of the page should be opened in Webview.");
			String termsOfUseURL = getWebDriver().getCurrentUrl();
			System.out.println(termsOfUseURL);
			if (termsOfUseURL.contains("termsofuse")) {
				logger.info("Terms of Use screen is opened in webview");
				extent.extentLoggerPass("Terms of Use", "Terms of Use screen is opened in webview");
			} else {
				logger.error("Terms of Use screen is not opened in webview");
				extent.extentLoggerFail("Terms of Use", "Terms of Use screen is not opened in webview");
			}

			extent.HeaderChildNode("TC_PWA_GST_0429: User should be able to know the terms and conditions of the application.");
			verifyElementPresent(PWAHamburgerMenuPage.objTermsOfUseInfo, "Terms of Use, information of the appication");
			Back(1);

			extent.HeaderChildNode("TC_PWA_GST_0430: Verify that FAQs screen appears when user clicks on Help Centre” from the menu");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			partialScroll();
			verifyElementPresent(PWAHamburgerMenuPage.objHelpCenterOption, "Help Center option");
			JSClick(PWAHamburgerMenuPage.objHelpCenterOption, "Help Center option");
			switchToWindow(2);
			if (verifyElementPresent(PWAHamburgerMenuPage.objHelpUsHeader, "Help Center screen")) {
				logger.info("User is navigated to Help Center screen");
				extent.extentLoggerPass("Help Center", "User is navigated to Help Center screen");
			} else {
				logger.error("User is not navigated to Help Center screen");
				extent.extentLoggerFail("Help Center", "User is not navigated to Help Center screen");
			}

			extent.HeaderChildNode("TC_PWA_GST_0431: Verify the categories given in Help screen - Popular Topics, My Account, and Offers & Partnerships");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Popular Topics"), "Popular Topics tab");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("My Account"), "My Account tab");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Offers & Partnerships"),
					"Offers & Partnerships tab");

			extent.HeaderChildNode("TC_PWA_GST_0432: Verify the FAQs are given under each category");

			extent.HeaderChildNode("Popular Topics Tab");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Popular Topics"), "Popular Topics tab");
			verifyElementPresent(
					PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Where can I view my subscription information?"),
					"Where can I view my subscription information?");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Registering with ZEE5"),
					"Registering with ZEE5");
			verifyElementPresent(
					PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How do I watch ZEE5 on my television?"),
					"How do I watch ZEE5 on my telivision");

			extent.HeaderChildNode("My Account Tab");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("My Account"), "My Account tab");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Managing your subscription"),
					"Managing your subscription");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I can"),
					"I can't sign in to ZEE5");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How many devices can I watch on?"),
					"I want to update my profile information");

			extent.HeaderChildNode("Offers & Partnerships");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Offers & Partnerships"),
					"Offers & Partnerships tab");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("ZEE5 Offers"), "ZEE5 Offers");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("ZEE5 Partnerships"),
					"ZEE5 Partnerships");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Applying a code in ZEE5"),
					"Applying a code in ZEE5");

			extent.HeaderChildNode("TC_PWA_GST_0433: Verify the user is able to click on each FAQs");

			extent.HeaderChildNode("Popular Topics Tab");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Popular Topics"), "Popular Topics tab");
			verifyElementPresentAndClick(
					PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Where can I view my subscription information?"),
					"Where can I view my subscription information?");
			if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
				logger.info("User is navigated to Where can I view my subscription information? page");
				extent.extentLoggerPass("Article",
						"User is navigated to Where can I view my subscription information? page");
			}
			waitTime(5000);
			Back(1);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Registering with ZEE5"),
					"Registering with ZEE5");
			if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
				logger.info("User is navigated to Registeing with ZEE5 page");
				extent.extentLoggerPass("Article", "User is navigated to Registering with ZEE5 page");
			}
			waitTime(5000);
			Back(1);
			verifyElementPresentAndClick(
					PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How do I watch ZEE5 on my television?"),
					"How do I watch ZEE5 on my telivision");
			if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
				logger.info("User is navigated to How do I watch ZEE5 on my telivision page");
				extent.extentLoggerPass("Article", "User is navigated to How do I watch ZEE5 on my telivision page");
			}
			waitTime(5000);
			Back(1);

			extent.HeaderChildNode("My Account Tab");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("My Account"), "My Account tab");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Managing your subscription"),
					"Managing your subscription");
			if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
				logger.info("User is navigated to Managing your Subscription  page");
				extent.extentLoggerPass("Article", "User is navigated to Managing your Subscription  page");
			}
			waitTime(5000);
			Back(1);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("I can"),
					"I can't sign in to ZEE5");
			if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
				logger.info("User is navigated to I can't sign in to ZEE5 page");
				extent.extentLoggerPass("Article", "User is navigated to I can't sign in to ZEE5 page");
			}
			waitTime(5000);
			Back(1);
			verifyElementPresentAndClick(
					PWAHamburgerMenuPage.objHelpSectioOptionsHeading("How many devices can I watch on?"),
					"I want to update my profile information");
			if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
				logger.info("User is navigated to I want to update my profile information  page");
				extent.extentLoggerPass("Article", "User is navigated to I want to update my profile information page");
			}
			waitTime(5000);
			Back(1);

			extent.HeaderChildNode("Offers & Partnerships");
			verifyElementPresent(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Offers & Partnerships"),
					"Offers & Partnerships tab");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("ZEE5 Offers"), "ZEE5 Offers");
			if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
				logger.info("User is navigated to ZEE5 Offers page");
				extent.extentLoggerPass("Article", "User is navigated to ZEE5 Offers page");
			}
			waitTime(5000);
			Back(1);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("ZEE5 Partnerships"),
					"ZEE5 Partnerships");
			if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
				logger.info("User is navigated to ZEE5 Partnerships page");
				extent.extentLoggerPass("Article", "User is navigated to ZEE5 Partnerships page");
			}
			waitTime(5000);
			Back(1);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHelpSectioOptionsHeading("Applying a code in ZEE5"),
					"Applying a code in ZEE5");
			if (verifyElementPresent(PWAHamburgerMenuPage.objArticleTitle, "Article title") == true) {
				logger.info("User is navigated to Applying a code in ZEE5 page");
				extent.extentLoggerPass("Article", "User is navigated to Applying a code in ZEE5 page");
			}
			waitTime(5000);
			Back(1);

			extent.HeaderChildNode("TC_PWA_GST_0434: Verify the \"Write To Us\" CTA given at down the page");
			partialScroll();
			verifyElementPresent(PWAHamburgerMenuPage.objWritetous, "Write to us button");

			extent.HeaderChildNode("TC_PWA_GST_0435: Verify the new web page of \"Contact to US\" is opening after clicking on write to us CTA");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objWritetous, "Write to us button");
			switchToWindow(3);
			if (verifyElementPresent(PWAHamburgerMenuPage.objContactUs, "Contact Us page")) {
				logger.info("User is navigated to Contact Us page");
				extent.extentLoggerPass("Contact Us", "User is navigated to Contact Us page");
			}

			extent.HeaderChildNode("TC_PWA_GST_0436: Verify that 'Select your country' field is available on the screen.");
			verifyElementPresent(PWAHamburgerMenuPage.objSelectYourCountry, "Select your country field");

			extent.HeaderChildNode("TC_PWA_GST_0437: Verify that 'Select your country' field has autofilled user's country based on their locale.");
			verifyElementPresent(PWAHamburgerMenuPage.objAutofilledcountry, "Auto filled country name");

			extent.HeaderChildNode("TC_PWA_GST_0438: Verify that 'Select your country' field as an drop down menu for country selection.");
			verifyElementPresent(PWAHamburgerMenuPage.objDropDown, "Select your country drop down");

			extent.HeaderChildNode("TC_PWA_GST_0439: Verify that 'Registered Mobile Number' field is available beside the 'select your country' field on the screen.");
			verifyElementPresent(PWAHamburgerMenuPage.objRegisteredMobileNumber, "Registered mobile number field");

			extent.HeaderChildNode("TC_PWA_GST_0440: Verify that 'Registered Mobile Number' field has autofilled the countrycode based on the country selection.");
			verifyElementPresent(PWAHamburgerMenuPage.objCountryCode, "Auto filled country code");

			extent.HeaderChildNode("TC_PWA_GST_0441: Verify that 'Email ID' field is available on the screen as per the Webview.");
			verifyElementPresent(PWAHamburgerMenuPage.objEmailField, "Email ID field");

			extent.HeaderChildNode("TC_PWA_GST_0442: Verify that 'Email ID' field have ' * ' symbol on top of the field name denoting the mandatory field.");
			verifyElementPresent(PWAHamburgerMenuPage.objEmailIDAsterisk, "Email ID '*' symbol");

			extent.HeaderChildNode("TC_PWA_GST_0443: Verify that “Contact Us” page has 'Tell Us More about your Issue' field as per webview specification.");
			verifyElementPresent(PWAHamburgerMenuPage.objText, "Tell us more about you issue text message");

			extent.HeaderChildNode("TC_PWA_GST_0444: verify that 'Tell Us More about your Issue' field has Content, Product, Enquiry and Feedback options with Radio buttons for each to select.");
			verifyElementPresent(PWAHamburgerMenuPage.objContentOption, "Content radio button");
			verifyElementPresent(PWAHamburgerMenuPage.objProductOption, "Product radio button");
			verifyElementPresent(PWAHamburgerMenuPage.objEnquiryOption, "Enquiry radio button");
			verifyElementPresent(PWAHamburgerMenuPage.objFeedbackOption, "Feedback radio button");

			extent.HeaderChildNode("TC_PWA_GST_0445: verify that “Content” is selected as default option in the'Tell Us More about your Issue' field.");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objContentAsDefault, "Content radio button")) {
				logger.info("Content radio option is enabled by default");
				extent.extentLoggerPass("Content", "Content radio option is enabled by default");
			} else {
				logger.error("Content radio option is not enabled by default");
				extent.extentLoggerFail("Content", "Content radio option is not enabled by default");
			}

			extent.HeaderChildNode("TC_PWA_GST_0446: Verify the 'Select Category' field is present in the Contact Us page.");
			verifyElementPresent(PWAHamburgerMenuPage.objSelectCategory, "Select category field");

			extent.HeaderChildNode("TC_PWA_GST_0447: Verify that 'Select Category' field as an drop down menu for category selection.");
			verifyElementPresent(PWAHamburgerMenuPage.objSelectCategoryDropDownMenu, "Select category drop down menu");

			extent.HeaderChildNode("TC_PWA_GST_0448: Verify that “video not playing” option is selected by default in the “Select category” field.");
			verifyElementPresent(PWAHamburgerMenuPage.objVideoNotPlaying, "Video not palying option as default");

			extent.HeaderChildNode("TC_PWA_GST_0449: Verify that 'Error Message' is available as an last field present in the screen.");
			verifyElementPresent(PWAHamburgerMenuPage.objErrorMessage, "Error message text");

			extent.HeaderChildNode("TC_PWA_GST_0450: Verify that 'Error Message' have ' * ' symbol on top of the field name denoting the mandatory field.");
			verifyElementPresent(PWAHamburgerMenuPage.objErrorMessageAsterisk, "Error message '*' symbol");

			extent.HeaderChildNode("TC_PWA_GST_0451: Verify that “Contact Us” page has two buttons as “SUBMIT” & “RESET” in pink color at the bottom of the page.");
			verifyElementPresent(PWAHamburgerMenuPage.objSubmitButton, "SUBMIT button");
			verifyElementPresent(PWAHamburgerMenuPage.objResetButton, "RESET button");

			extent.HeaderChildNode("TC_PWA_GST_0452: Verify that “RESET” button is enabled and “SUBMIT” button is disabled by default.");
			if (getWebDriver().findElement(PWAHamburgerMenuPage.objSubmitButton).isEnabled() == false) {
				logger.info("Submit is disabled by default");
				extent.extentLoggerPass("Submit", "Submit is disabled by default");
			} else {
				logger.error("Submit is not disabled by default");
				extent.extentLoggerFail("Submit", "Submit is not disabled by default");
			}

			if (getWebDriver().findElement(PWAHamburgerMenuPage.objResetButton).isEnabled() == true) {
				logger.info("Reset is enabled by default");
				extent.extentLoggerPass("Reset", "Reset is enabled by default");
			} else {
				logger.error("Reset is not enabled by default");
				extent.extentLoggerFail("Reset", "Reset is not enabled by default");
			}

			extent.HeaderChildNode("TC_PWA_GST_0453: Verify that the mandatory filed is highlighted by ' * ' symbol beside the field name.");
			verifyElementPresent(PWAHamburgerMenuPage.objErrorMessageAsterisk, "Mandatory Email ID field is highlighted by '*' symbol");
			verifyElementPresent(PWAHamburgerMenuPage.objErrorMessageAsterisk, "Mandatory Error message field is highlighted by '*' symbol");
			verifyElementPresent(PWAHamburgerMenuPage.objPlatformAsterisk, "Mandatory Platform drop down is highlighted by '*' symbol");

			extent.HeaderChildNode("TC_PWA_GST_0454: Verify that “SUBMIT” button should be enabled only when the user has entered all the mandatory fields in the screen.");
			type(PWAHamburgerMenuPage.objEmailField, "bhavana9518@gmail.com", "Email Id");
			type(PWAHamburgerMenuPage.objErrorMessageField, "Video couldn't play", "Error message");
			if (getWebDriver().findElement(PWAHamburgerMenuPage.objSubmitButton).isEnabled() == true) {
				logger.info("Submit is enabled by giving mandatory inputs");
				extent.extentLoggerPass("Submit", "Submit is enabled by giving mandatory inputs");
			} else {
				logger.error("Submit is not enabled by giving mandatory inputs");
				extent.extentLoggerFail("Submit", "Submit is not enabled by giving mandatory inputs");
			}

			extent.HeaderChildNode("TC_PWA_GST_0455: Help Center(FAQ) page should be opened in new tab when user click on Help Cente button in hamburger menu.");
			getWebDriver().close();
			waitTime(2000);
			switchToWindow(2);
			getWebDriver().close();
			switchToParentWindow();
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			partialScroll();
			verifyElementPresent(PWAHamburgerMenuPage.objHelpCenterOption, "Help Center option");
			JSClick(PWAHamburgerMenuPage.objHelpCenterOption, "Help Center option");
			switchToWindow(2);
			if (verifyElementPresent(PWAHamburgerMenuPage.objHelpUsHeader, "Help Center screen")) {
				logger.info("User is navigated to Help Center screen");
				extent.extentLoggerPass("Help Center", "User is navigated to Help Center screen");
			} else {
				logger.error("User is not navigated to Help Center screen");
				extent.extentLoggerFail("Help Center", "User is not navigated to Help Center screen");
			}
			getWebDriver().close();
			switchToParentWindow();

			extent.HeaderChildNode("TC_PWA_GST_0456: Verify whether \"Grievance Redressal\" option is displayed or not below Help center in Hamburger menu under info section");

			extent.HeaderChildNode("");
		}

		else if (userType.equalsIgnoreCase("NonSubscribedUser")) {

		}

		else if (userType.equalsIgnoreCase("SubscribedUser")) {

		}
	}


	static boolean isAlphabaticOrder(String s) {
	    int n = s.length();

	    for (int i = 1; i < n; i++) {
	        if (s.charAt(i) < s.charAt(i - 1)) {
	            return false;
	        }
	    }

	    return true;
	}

	public void InAlphabeticalOrder() throws Exception
	{
		String TCID = null;
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_NS_0915";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0915";
		extent.HeaderChildNode(TCID+ "Verify Premium channels collection page is displayed as per selected sort option");
		navigateToAnyScreenOnWeb("Live TV");
		scrollToTheElementWEB(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("Premium TV Channels"));
		waitTime(5000);
		click(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("Premium TV Channels"), "Premium TV Channels");
		waitTime(3000);

			verifyElementPresentAndClick(PWALiveTVPage.objChannelGuideSortOption , "Channel Sort option ");
			verifyElementPresent(PWALiveTVPage.objSortByAZ, "Sort by A-Z Option");
			click(PWALiveTVPage.objSortByAZ, "Sort by A-Z Option");
			waitTime(5000);
		String	a=getText(PWAHamburgerMenuPage.objContentTitleInLiveTV);
		System.out.println(a);
		waitTime(2000);
			if (isAlphabaticOrder(a)) {
	            System.out.println("Yes");
	        } else {
	            System.out.println("No");
	        }
	}


	public void OnboardingModule(String userType) throws Exception {
		switch (userType) {
			case "Guest":
				RegistrationPage(userType);
				CompleteProfile(userType);
				MandatoryRegistration(userType);
				break;
			case "NonSubscribedUser":
				extent.HeaderChildNode("Non-Subscribed user ");
				//NativeLogin(userType);
				waitTime(3000);
				completeProfilePopupWeb();
				ZeeWEBPWALogin(userType);
				launchCheck(userType);
				myaccountOptionsVerification();
				NavigateToMyProfilePage();
				verificationsInMyProfilePage();
				editProfileFuncionality();
				subscribeCTAFuncionality();
				changePasswordFuncionality();
				break;
			case "SubscribedUser":
				extent.HeaderChildNode("Subscribed user ");
				waitTime(3000);
				launchCheck(userType);
				myaccountOptionsVerification();
				NavigateToMyProfilePage();
				verificationsInMyProfilePage();
				editProfileFuncionality();
				myPlanVerification();
				changePasswordFuncionality();
		}
	}

	/**
	 * Method for carousel content validation
	 * @param userType
	 * @throws Exception
	 */
	public void Carouselcontent(String userType) throws Exception {
		extent.HeaderChildNode("HLS_008 : Verify play content from the carousel");
		navigateToAnyScreenOnWeb("Home");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objplaybtncarousel, "Watch button");
		JSClick(PWAHamburgerMenuPage.objplaybtncarousel, "Watch button");
		waitTime(5000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
			Back(1);
		} else {
			logger.error("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}

		extent.HeaderChildNode("HLS_0011 : Verify play content from the collection page");
		String trayTitleUI = swipeTillTray(20, "Exclusive Movies on ZEE5", "Exclusive Movies on ZEE5 tray");
		click(PWALandingPages.objViewAllOfTray(trayTitleUI), "More button for tray " + trayTitleUI);
		waitTime(5000);
		JSClick(PWAHamburgerMenuPage.objFirstCard, "First card in More page");
		waitTime(5000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.error("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}
	}

	/**
	 * Method for movies page validation
	 * @param tabName
	 * @param userType
	 * @throws Exception
	 */
	public void movies(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_022: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode("HLS_023 : Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
//		new WebDriverWait(getWebDriver(), 25);
		waitTime(25000);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(6000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(6000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

		} catch (Exception e) {
			e.getMessage();
		}
		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + " second content title :"
				+ secondCarouselTitle + " and third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + " second content title :" + secondCarouselTitle
				+ " and third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}
		partialScroll();

		extent.HeaderChildNode("HLS_033 :Verify that Play, Share and Watchlist CTA");
		trayTitleAndContentValidationWithApiDataMovie(tabName, "movies");

		extent.HeaderChildNode(" HLS_024 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode("HLS_027 : Previous, Next button verification");
		verifyElementPresent(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		waitTime(3000);
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			waitTime(3000);
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.error("Tray is not rotated");
			extent.extentLoggerFail("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");

		extent.HeaderChildNode(" HLS_025 : Verify On click More/>");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "More Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.info("Navigated to More Page");
				extent.extentLogger("More", "Navigated to More Page");
			} else {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("More", "Not navigated to More Page");
			}
		}
		Back(1);

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(" HLS_026 : Verify the premium tag for all premium content card");
			scrollDownWEB();
			verifyElementPresent(PWAHamburgerMenuPage.objpremiumcard, "Premium Tag");
		}

		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_029 : Verify whether user is able to play Premium Movie Contents as a Guest/Non-Subscribed user");
			System.out.println(
					"HLS_029 : Verify whether user is able to play Premium Movie Contents as a Guest/Non-Subscribed user");
		}
		if (userType.equals("ClubUser")) {
			extent.HeaderChildNode(
					"HLS_031 : Verify weather user is able to play Premium Movie Contents as Club/RSVOD user");
			System.out
					.println("HLS_031 : Verify weather user is able to play Premium Movie Contents as Club/RSVOD user");
		}
		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_030 : Verify the User can play the Premium Movie Contents as a Premium all access user");
			System.out.println(
					"HLS_030 : Verify the User can play the Premium Movie Contents as a Premium all access user");
		}
		navigateToAnyScreenOnWeb("Movies");
		checkElementDisplayed(PWAMoviesPage.objPremiumContentCard, "Premium Content");
		mandatoryRegistrationPopUp(userType);
		JSClick(PWAMoviesPage.objPremiumContentCard, "Premium Content");
		waitForPlayerAdToComplete("Video Player");
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser") || userType.equals("ClubUser")) {
			if (!verifyIsElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
					"'You're watching a trailer' message on the player")) {
				verifyIsElementDisplayed(PWALiveTVPage.objPlayerInlineSubscriptionLink, "Inline Subscribe Link");
			}
		}
		String premiumMovieTitle = "";
		try {
			premiumMovieTitle = getElementPropertyToString("innerText", PWAMusicPage.objMovieConsumptionPageTitle,
					"Premium Movie Title in Consumptions Page").toString();
			logger.info("Premium Movie Title in Consumptions Page: " + premiumMovieTitle);
			extent.extentLogger("", "Premium Movie Title in Consumptions Page: " + premiumMovieTitle);
		} catch (Exception e) {
			logger.error("Failed to fetch Premium Movie Title in Consumptions Page");
			extent.extentLoggerFail("", "Failed to fetch Premium Movie Title in Consumptions Page");
		}

		extent.HeaderChildNode(
				"HLS_032 : Verify player Inline subscription link availability at the end of the play back");
		click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
			waitTime(10000);
			if (userType.equalsIgnoreCase("Guest")) {
				if (waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA")) {
					waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
					waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA");
					waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
					waitTime(2000);
					Back(1);
					String exp = getWebDriver().getCurrentUrl();
					waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
					String act = getWebDriver().getCurrentUrl();
					if (exp != act) {
						logger.info("User is navigated to next content");
						extent.extentLoggerPass("", "User is navigated to next content");
					} else {
						logger.info("User is not navigated to next content");
						extent.extentLoggerPass("", "User is not navigated to next content");
					}
					Back(1);
					waitForElement(PWASubscriptionPages.objExistUserText, 20, "Already have an account? - Text");
					waitForElementAndClick(PWASubscriptionPages.objLoginLink, 20, "Login Link");
					waitForElement(PWASubscriptionPages.objLoginPage, 20, "Navigated to Login page");
					waitTime(2000);
					Back(1);
				}
			} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				if (waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA")) {
					waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
					waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA");
					waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
					waitTime(2000);
					Back(1);
					String exp = getWebDriver().getCurrentUrl();
					waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
					String act = getWebDriver().getCurrentUrl();
					if (exp != act) {
						logger.info("User is navigated to next content");
						extent.extentLoggerPass("", "User is navigated to next content");
					} else {
						logger.info("User is not navigated to next content");
						extent.extentLoggerPass("", "User is not navigated to next content");
					}
					Back(1);
				}
			}
		}
		Back(2);

		extent.HeaderChildNode("HLS_034 :Verify the right side bottom arrow ");
		scrollToBottomOfPageWEB();
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			verifyElementPresentAndClick(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}
	}

	public void PaymentGateway(String userType) throws Exception {
		if (userType.equalsIgnoreCase("NonSubscribeduser")) {
//			extent.HeaderChildNode("Validate the payment gateway using Netbanking");
//			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");
//			verifyElementPresentAndClick(PWASubscriptionPages.objContinueWith499, "Continue Button");
//
			String contentURL = getWebDriver().getCurrentUrl();
//			PWAIframe();
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objnetbanking, "Net banking");
//			waitTime(3000);
//			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPaymentoption("CityUnion"),
//					"Payment option");
//			waitTime(3000);
//			waitTime(3000);
//			verifyElementPresent(PWAHamburgerMenuPage.objproceedtopayindex(1), "Procced to pay");
//			click(PWAHamburgerMenuPage.objproceedtopayindex(1), "Procced to pay");
//			waitTime(3000);
//			waitForElement(PWAHamburgerMenuPage.objtotalamount2, 20, "Total amount");
//			String totalamt2 = getText(PWAHamburgerMenuPage.objtotalamount2);
//			System.out.println(totalamt2);
//			extent.extentLogger("", "pack Amount in payment Process page : " + totalamt2);
//			waitTime(5000);
//			getWebDriver().get(contentURL);
			waitForElement(PWASubscriptionPages.objZEE5Logo, 20, "Zee5 Logo");
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueWith499, "Continue Button");
			extent.HeaderChildNode("Validate the payment gateway using UPI");
			PWAIframe();
			verifyElementPresent(PWAHamburgerMenuPage.objPaymentoption("UPI"), "Payment option");
			click(PWAHamburgerMenuPage.objPaymentoption("UPI"), "Payment option");
			waitTime(3000);
			checkElementDisplayed(PWAHamburgerMenuPage.objenterupiid, "Enter upi Details");
			click(PWAHamburgerMenuPage.objenterupiid, "Enter upi Details");
			type(PWAHamburgerMenuPage.objenterupiid, "866@upi", "Email Field");
			verifyElementPresent(PWAHamburgerMenuPage.objupiproceedtopay, "verify");
			click(PWAHamburgerMenuPage.objupiproceedtopay, "verify");
			getWebDriver().get(contentURL);
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueWith499, "Continue Button");
			extent.HeaderChildNode("Validate the payment gateway using Giftcard");
			scrollToBottomOfPageWEB();
			verifyElementPresent(PWAHamburgerMenuPage.objhaveagiftcard, "Have a gift card");
			JSClick(PWAHamburgerMenuPage.objhaveagiftcard, "Have a gift card");

			extent.HeaderChildNode("Verify that user is able to click on Generate QR CTA");
			PWAIframe();
			verifyElementPresent(PWAHamburgerMenuPage.objPaymentoption("UPI"), "Payment option");
			click(PWAHamburgerMenuPage.objPaymentoption("UPI"), "Payment option");
			waitTime(3000);
			click(PWAHamburgerMenuPage.objscanorcodetext("Generate QR Code"), "Generate QR Code");
			verifyElementPresent(PWAHamburgerMenuPage.objscanandpay, "Scan and pay OR code is generated");
			verifyElementPresent(PWAHamburgerMenuPage.objtimerinupi, "Timer upi");

			if (verifyElementPresent(PWAHamburgerMenuPage.objtimerinupi, "Timer upi")) {
				logger.info(
						"The Countdown should get started as soon as the QR Code is displayed on the screen of website, expected behaviour");
				extent.extentLoggerPass("",
						"The Countdown should get started as soon as the QR Code is displayed on the screen of website, expected behaviour");
			} else {
				logger.info(
						"The Countdown is not get started as soon as the QR Code is displayed on the screen of website");
				extent.extentLoggerFail(" ",
						"The Countdown is started as soon as the QR Code is displayed on the screen of website");

			}

			extent.HeaderChildNode(
					"Verify that user is able to land on UPI screen on clicking back arrow on the QR code screen");
			verifyElementPresent(PWAHamburgerMenuPage.objupiarrow, "Arrow button");
			JSClick(PWAHamburgerMenuPage.objupiarrow, "Arrow button");
			waitTime(5000);
			if (verifyElementPresent(PWAHamburgerMenuPage.objscanorcodetext("Generate QR Code"), "Generate QR Code")) {
				logger.info("User should be redirected to previous page i.e UPI payment page, expected behaviour");
				extent.extentLoggerPass("",
						"User should be redirected to previous page i.e UPI payment page, expected behaviour");
			} else {
				logger.info("User not redirected to previous page i.e UPI payment page");
				extent.extentLoggerFail(" ", "User not redirected to previous page i.e UPI payment page");

			}

			extent.HeaderChildNode("Verify that user is redirected to plan selection screen on clicking browser back");

			Back(1);
			if (verifyElementPresentAndClick(PWASubscriptionPages.objContinueBtn, "Continue Button")) {
				logger.info(
						"User should be redirected to previous page i.e  payment selection page, expected behaviour");
				extent.extentLoggerPass("",
						"User should be redirected to previous page i.e payment selection page, expected behaviour");
			} else {
				logger.info("User not redirected to previous page i.e payment selection page");
				extent.extentLoggerFail(" ", "User not redirected to previous page i.e payment selection page");

			}
		}
	}

	public void PlayPageValidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode("Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode(" Verify On click More/>");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "More Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.info("Navigated to More Page");
				extent.extentLogger("More", "Navigated to More Page");
			} else {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("More", "Not navigated to More Page");
			}
		}

		extent.HeaderChildNode("Verify the right side bottom arrow ");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			JSClick(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}

		extent.HeaderChildNode("Verify user is navigate to respective games screen");
		navigateToAnyScreenOnWeb(tabName);
		waitTime(5000);
		swipeTillTrayAndClickFirstAsset(userType, 20, "Top Played Game", "Top Played Game tray", tabName);
//		if (checkElementDisplayed(PWAPremiumPage.objWEBMastheadCarousel, "Carousel")) {
//			verifyElementPresentAndClick(PWAPlayPage.objPlayNowButton, "Play Now button of Carousel");
//		}
		switchToWindow(2);
		waitTime(2500);
		String currentUrl = getWebDriver().getCurrentUrl();
		logger.info("Current URL: " + currentUrl);
		extent.extentLogger("", "Current URL: " + currentUrl);
		if (currentUrl.contains("games")) {
			logger.info("Navigated to Games screen");
			extent.extentLoggerPass("", "Navigated to Games screen");
		} else {
			logger.info("Failed to navigate to Games screen");
			extent.extentLoggerFail("", "Failed to navigate to Games screen");
		}
		getWebDriver().close();
		switchToParentWindow();

		navigateHome();
		extent.HeaderChildNode("Verify the Game content should be available in the Search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Danger Dash ", "Search Field");
		verifyElementPresent(PWAMusicPage.objJoysticktagAtSearchedResultPage, "joystick icon");

		extent.HeaderChildNode("Verify whether user is able to navigate to Game content from the Search result");
		checkElementDisplayed(PWASearchPage.objFirstSearchedAssetTitle, "First search result");
		JSClick(PWASearchPage.objFirstSearchedAssetTitle, "First search result");
		switchToWindow(2);
		waitTime(2500);
		String aludigamesURL = getWebDriver().getCurrentUrl();
		if (aludigamesURL.contains("ludigames")) {
			logger.info("Game screen is opened in webview");
			extent.extentLoggerPass("Game", "Game screen is opened in webview");
		} else {
			logger.info(" Game screen is not opened in webview");
			extent.extentLoggerFail("Game", "Game screen is not opened in webview");
		}
		getWebDriver().close();
		switchToParentWindow();

		navigateHome();
		extent.HeaderChildNode(
				"Verify the user is able to search the games by specific name/description in search screen.");
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		type(PWASearchPage.objSearchEditBox, "Danger Dash ", "Search Field");
		checkElementDisplayed(PWASearchPage.objFirstSearchedAssetTitle, "First search result");
		String searchResult = getText(PWASearchPage.objFirstSearchedAssetTitle);
		if (searchResult.equals("Danger Dash")) {
			logger.info("specific name/description in search screen is displayed ,Expected result ");
			extent.extentLoggerPass("Game",
					"specific name/description in search screen is displayed ,Expected result ");
		} else {
			logger.info(" specific name/description in search screen is not displayed ");
			extent.extentLoggerFail("Game", "specific name/description in search screen is not displayed ");
		}

		extent.HeaderChildNode("Verify the games search result are appearing under All tab in search screen");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		verifyElementPresent(PWASearchPage.objSearchText, "Searched text");

		extent.HeaderChildNode("Play icon should be displayed on thumbnail for games search results.");
		verifyElementPresent(PWAHamburgerMenuPage.objJoyStickIcon, "JoyStick");
	}


	public void CardNumberAndPinNumberDigitValidation(String userTye) throws Exception {
		if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribeduser")) {
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscribe button");
			verifyElementPresentAndClick(PWASubscriptionPages.objContinueWith499, "Continue Button");
			extent.HeaderChildNode("Verify that Card number will take only 16 digits and Pin will take 6 digits");
			verifyElementPresent(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "Enter card details");
			JSClick(PWAHamburgerMenuPage.objentercarddetailstohaveagiftcard, "Enter card details");
			type(PWAHamburgerMenuPage.objinputnumbercard, "12345678912345678", "card number");
			String cardnumber = findElement(PWAHamburgerMenuPage.objgiftcardnumber).getAttribute("value");
			System.out.println(cardnumber);
			try {
				int a = Integer.parseInt(cardnumber);
				System.out.println(a);
				int b = cardnumber.length();
				extent.extentLogger("", " cardnumber  : " + b);
				if (b == 16) {
					logger.info("Card number should take only 16 digits.,expected behaviour.");
					extent.extentLoggerPass("", "Card number should take only 16 digits., expected behaviour.");
				} else {
					logger.info("Card number taking more or less than 16 digits");
					extent.extentLoggerFail(" ", "Card number taking more or less than 16 digits");

				}
			} catch (NumberFormatException ex) {

			}

			verifyElementPresent(PWAHamburgerMenuPage.objenterpintohaveagiftcard, "PIN details");

			type(PWAHamburgerMenuPage.objinputpincard, "123457", "PIN  number");
			String pinnumber = findElement(PWAHamburgerMenuPage.objpinnumber).getAttribute("value");
			//int pinnumber1 = Integer.parseInt(pinnumber);
			int c=pinnumber.length();
			//System.out.println(pinnumber1);
			extent.extentLogger("", " pinnumber  : " + c);
			if (c == 6) {
				logger.info("Pin number should take only 6 digits.,expected behaviour.");
				extent.extentLoggerPass("", "Pin number should take only 6 digits., expected behaviour.");
			} else {
				logger.info("Pin number taking more or less than 6 digits");
				extent.extentLoggerFail(" ", "Pin number taking more or less than 6 digits");
			}
		}
	}

	public void ClubMigiration(String userType) throws Exception {
		extent.HeaderChildNode("Verify the Club contents are migrated to Premium ");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, "Parru" + "\n", "Search Field");
		click(PWASearchPage.objSearchShowsTab, "Shows tab");
		verifyElementPresent(PWASearchPage.objfirstdata, "Searched result");
		click(PWASearchPage.objfirstdata, "Searched result");
		if (checkElementDisplayed(PWAHomePage.objClubIcon, "Club icon")) {
			logger.info(" Club icon is displayed ");
			extent.extentLoggerFail("", "Club icon is displayed ");

		} else {

			logger.info("Club Icon is Not Displayed , extected result ");
			extent.extentLoggerPass("", "Club Icon is Not Displayed , extected result");
		}
		navigateHome();
		if (userType.equalsIgnoreCase("NonSubscribeduser") || userType.equalsIgnoreCase("Guest")) {
			verifyElementPresentAndClick(PWAHomePage.objSubscribeBtn, "Subscription button");
			waitTime(3000);
			if (verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription page")) {
				logger.info("User is navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is navigated to Subscription page");

			} else {
				logger.info("User is not navigated to Subscription page");
				extent.extentLogger("Subscription page", "User is not navigated to Subscription page");
			}
			if (checkElementDisplayed(PWAHamburgerMenuPage.objClubAccess, "club access")) {
				logger.info(" Club pack is displayed ");
				extent.extentLoggerFail("", "Club pack is displayed ");

			} else {
				logger.info("Club pack is Not Displayed , extected result ");
				extent.extentLoggerPass("", "Club pack is Not Displayed , extected result");
			}
		}

		extent.HeaderChildNode("Verify the CLUB icon is not displayed in Zee5 site");
		navigateHome();
		if (checkElementDisplayed(PWAHamburgerMenuPage.objClubcontentcard, "Club Tag")) {
			logger.info(" Club icon is displayed ");
			extent.extentLoggerFail("", "Club icon is displayed ");

		} else {
			logger.info("Club icon is Not Displayed , extected result ");
			extent.extentLoggerPass("", "Club icon is Not Displayed , extected result");

		}
	}


	public void ShowsValidationWeb(String userType) throws Exception {
		HeaderChildNode("TV Shows page");
		String TCID = null;
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0088";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0095";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0095";
		extent.HeaderChildNode(TCID + "Verify whether user is able to navigate TV Shows landing page  and it is highlighted.");
		landingPagesValidationWeb("TV Shows");

		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0089";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0096";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0096";
		verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		JSClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		extent.version = getText(By.xpath(".//*[@class='versionText']"));
		String ver = getText(By.xpath(".//*[@class='versionText']"));
		extent.extentLogger("", ver);
		verifyElementPresent(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger Menu");
		JSClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");


		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0090";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0097";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0097";
		extent.HeaderChildNode(TCID+ "Verify on Tap of 'Zee5' Logo user should navigate to homepage.");
		verifyElementPresent(PWAHomePage.objZeelogo1, "Zee Logo");

		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0091";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0098";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0098";
		extent.HeaderChildNode(TCID+ "Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation("TV Shows");


		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0095 , TC_PWA_GST_0096";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0103 , TC_PWA_NS_0104";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0103 , TC_PWA_SUB_0105";
		extent.HeaderChildNode(TCID+ "Verify that on each content card after mouse hovor, play, share and add to watch list buttons are displayed");
		//trayTitleAndContentValidationWithApiData("TV Shows", "tvshows");
		trayTitleAndContentValidationWithApiDataMovie("TV Shows", "tvshows");



		if (userType.contentEquals("Guest")) {
			extent.HeaderChildNode("Guest user scenarios");
			logger.info("Accessing as Guest User");
			mandatoryRegistrationPopUp(userType);
			landingPagesTrailerAndPopUpValidationWeb("Guest", "TV Shows");
			if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0100";
			extent.HeaderChildNode(TCID+ "Verify Shows premium and free content in landscape or full screen mode");
			verifyLandscapeforFreeContentWeb();
			navigateToHome();
			navigateToAnyScreenOnWeb("TV Shows");
			if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0099";
			extent.HeaderChildNode(TCID+ "Validate the user is able to watch trailer/Teaser/promos of premium content if it is available with the video followed by sign in/registration and inline message");
			verifyLandscapeforPremiumContentWeb();
			navigateToHome();
			navigateToAnyScreenOnWeb("TV Shows");
			waitTime(5000);
			RotateTrayValidation();
			mandatoryRegistrationPopUp(userType);
			if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0101";
			extent.HeaderChildNode(TCID + "Verify user is able to click on external link \"Play&Win\" and user is taken to new web page");
			VerifyExternalLinkInShowsLandingPageWeb();
			BeforeTV("TV Shows" , userType);
		} else if (userType.contentEquals("NonSubscribedUser")) {
			extent.HeaderChildNode("Non subscribed scenarios");
			logger.info("Accessing as Non subscribed User");
			landingPagesTrailerAndPopUpValidationWeb("NonSubscribedUser", "TV Shows");
			if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0108";
			extent.HeaderChildNode(TCID+ "Verify Shows premium and free content in landscape or full screen mode");
			verifyLandscapeforFreeContentWeb();
			navigateToHome();
			navigateToAnyScreenOnWeb("TV Shows");
			if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0107";
			extent.HeaderChildNode(TCID+ "Validate the user is able to watch trailer/Teaser/promos of premium content if it is available with the video followed by sign in/registration and inline message");

			verifyLandscapeforPremiumContentWeb();
			navigateToHome();
			navigateToAnyScreenOnWeb("TV Shows");
			RotateTrayValidation();
			if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0109";
			extent.HeaderChildNode(TCID + "Verify user is able to click on external link \"Play&Win\" and user is taken to new web page");
			VerifyExternalLinkInShowsLandingPageWeb();
			mandatoryRegistrationPopUp(userType);
			BeforeTV("TV Shows" , userType);
		} else if (userType.contentEquals("SubscribedUser")) {
			extent.HeaderChildNode("Subscribed scenarios");
			logger.info("Accessing as Subscribed User");

			landingPagesTrailerAndPopUpValidationWeb("SubscribedUser", "TV Shows");
			if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0109";
			extent.HeaderChildNode(TCID+ "Verify Shows premium and free content in landscape or full screen mode");
			verifyLandscapeforFreeContentWeb();
			navigateToHome();
			navigateToAnyScreenOnWeb("TV Shows");
			verifyLandscapeforPremiumContentWeb();
			navigateToHome();
			navigateToAnyScreenOnWeb("TV Shows");
			RotateTrayValidation();
			if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0111";
			extent.HeaderChildNode(TCID + "Verify user is able to click on external link \"Play&Win\" and user is taken to new web page");
			VerifyExternalLinkInShowsLandingPageWeb();
			mandatoryRegistrationPopUp(userType);
		}
	}


	public void BeforeTV(String tabName , String userType) throws Exception {
		String TCID = null;
		extent.HeaderChildNode(
				"Verify whether user navigate to consumption page, when user click on before tv content.");
		navigateToAnyScreenOnWeb(tabName);
		scrollToElement(PWAHomePage.objFirstContentCardOfTray("Before"));
		checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray(" Before"), "First Content Card Of Before TV Tray");
		click(PWAHomePage.objFirstContentCardOfTray("Before"), "First Content Card Of Before TV Tray");

		waitTime(10000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}

		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0108";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0116";


		extent.HeaderChildNode(TCID+
				"Verify whether next available FREE content is playing, when user click on Skip on the player in consumption page.");
		waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
		waitForPlayerAdToComplete("Video Player");
		JSClick(PWAPlayerPage.pauseBtn, "Pause button");
		click(PWAPlayerPage.maximizeBtn, "Maximize button");
		waitTime(2000);
		mouseHover();
		click(PWAPlayerPage.minimizeBtn, "Minimize button");
		waitTime(3000);
		//pause();
		if (checkElementDisplayed(PWAPlayerPage.maximizeBtn, "Maximize button")) {
			logger.info("Navigated to free content , expected behaviour");
			extent.extentLogger("Consumption Page", "Navigated to free content , expected behaviour");
		} else {
			logger.info("Not Navigated to free content");
			extent.extentLoggerFail("Consumption Page", "Not Navigated to free content ");
		}

		extent.HeaderChildNode(
				"Verify whether subscription message is displaying in player section , when no free content are avaiable.");
		checkElementDisplayed(PWAHamburgerMenuPage.objsubscriptionlinkmessage, "Subscription Link ");


		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0102";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0110";

		extent.HeaderChildNode(TCID +
				"Verify user is able to play any preview content (\"Next episode spoiler\" rail content) from the Show detils page");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		String keyword = "Parru";
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(4000);
		// verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV
		// Shows"), "TV Shows Tab");
		waitTime(4000);
		click(PWASearchPage.objspecificSearch, "Searched content");
swipeTillTrayAndClickFirstAsset( userType , 20, "Next Episode Spoilers", "Spoiler" , tabName);
		//scrollToElement(PWAHomePage.objFirstContentCardOfTray("Spoiler"));

		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}
		// update
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0098";
		if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0106";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0107";
		navigateHome();
		navigateToAnyScreenOnWeb("News");
		extent.HeaderChildNode(TCID+
				"Verify whether user is navigate to consumption page with News autoplaying when user tap on content in Listed collection");
		scrollToElement(PWAHomePage.objFirstContentCardOfTray("News"));
		//checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("News"), "First Content Card Of news Tray");
		JSClick(PWAHomePage.objFirstContentCardOfTray("News"), "First Content Card Of news Tray");
		waitTime(3000);
		JSClick(PWAPlayerPage.pauseBtn, "Pause button");
		waitTime(5000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}
	}

	public void zee5originalstrayvalidation(String Tabname) throws Exception {
		extent.HeaderChildNode("Verifing the trays displayed in ZEE5 Originals Tab");

		// verifyElementPresentAndClick(PWAHomePage.objTabName(tabName), tabName);

		navigateToAnyScreenOnWeb(Tabname);
		String languageSmallText = allSelectedLanguagesWEB();
		System.out.println(languageSmallText);

		List<String> apiTitleList = new LinkedList<String>();

		int q = 1;
		for (int k = q; k <= 6; k++) {
			// System.out.println("q: "+q);
			Response resp = ResponseInstance.getResponseForPages2("zeeoriginals", languageSmallText, q);

			List<String> apitotaltrays = resp.jsonPath().getList("buckets");
			System.out.println(apitotaltrays.size());
			for (int i = 0; i < apitotaltrays.size(); i++) {
				String traytitle = resp.jsonPath().getString("buckets[" + i + "].title");
				System.out.println(traytitle);
				apiTitleList.add(traytitle);
			}
			q = q + 1;
		}
		System.out.println("api: " + apiTitleList);

		scrollToBottomOfPageWEB();
		// waitTime(6000);
		if (checkElementDisplayed(PWAZee5OriginalPage.objWhatWonderingPopUp, "Wondering popUp")) {
			waitTime(3000);
			click(PWAZee5OriginalPage.objWhatWonderingPopUpCloseIcon, "Close icon");
		}
		waitTime(3000);
		// checkElementDisplayed(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to
		// Top");
		click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");
		waitTime(5000);
		List<String> uiTitleList = new LinkedList<String>();
		List<WebElement> uitotaltrays = getWebDriver().findElements(By.xpath("//div[@class='trayHeader']"));
		System.out.println(uitotaltrays.size());

		int j = 0;
		for (j = 0; j < uitotaltrays.size() - 1; j++) {
			String trayTitle = findElement(By.xpath("(//div[@class='trayHeader'])[" + (j + 1) + "]/child::h2/child::*"))
					.getText();

			System.out.println(trayTitle);
			uiTitleList.add(trayTitle);
			// scrollDown();

			scrollToBottomOfPageWEB();
		}
		System.out.println("UI: " + uiTitleList);
		waitTime(5000);
		for (int l = 0; l < uitotaltrays.size() - 1; l++) {
			waitTime(5000);
			if (apiTitleList.get(l + 1).equalsIgnoreCase(uiTitleList.get(l))) {
				logger.info(
						"API title: " + apiTitleList.get(l + 1) + " is verified with UI title: " + uiTitleList.get(l));
				extent.extentLogger("Tray validation",
						"API title: " + apiTitleList.get(l + 1) + " is verified with UI title: " + uiTitleList.get(l));

			}
		}

		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

	}

	@SuppressWarnings("unused")
	public void Subscriptionpopup(String UserType, String tabName, String trayTitle) throws Exception {
		extent.HeaderChildNode("Validating Player Inline Subscription link after end of trailer playback");
		navigateToAnyScreenOnWeb(tabName);
		waitTime(20000);
		// handle mandatory pop up
		mandatoryRegistrationPopUp(UserType);
		boolean firstAssetClicked = swipeTillTrayAndClickFirstAsset(userType, 15, trayTitle,
				"\"" + trayTitle + "\" tray", tabName);
		waitTime(3000);
		String nextPageTitle = "";
		try {
			nextPageTitle = getText(PWAShowsPage.objShowsTitle);
			logger.info("Shows Details page is displayed " + nextPageTitle);
			extent.extentLogger("showDetails", "Shows Details page is displayed " + nextPageTitle);
			scrollDownByY(300);
			click(PWAShowsPage.objEpisodeCard2, "Episode Card");
		} catch (Exception e) {
			try {
				nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
				logger.info("Player screen is displayed " + nextPageTitle);
				extent.extentLogger("playerScreen", "Player screen is displayed " + nextPageTitle);
			} catch (Exception e1) {
				logger.error("Failed to fetch consumptions/details page titles");
				extent.extentLoggerFail("playerScreen", "Failed to fetch consumptions/details page titles");
			}
		}
		if (UserType.equals("Guest") || UserType.equals("NonSubscribedUser")) {
			if (waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Player Inline Subscription link")) {
				click(PWASubscriptionPages.objGetPremiumButton, "Player Inline Subscription link");
				verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Subscription Page");
			}
		} else {
			if (checkElementDisplayed(PWASubscriptionPages.objGetPremiumButton, "Player Inline Subscription link")) {
				logger.error("Player Inline Subscription link should not be displayed for Subscribed User");
				extent.extentLoggerFail("",
						"Player Inline Subscription link should not be displayed for Subscribed User");
			} else {
				logger.info("Player Inline Subscription link not displayed is expected behavior for Subscribed User");
				extent.extentLogger("",
						"Player Inline Subscription link not displayed is expected behavior for Subscribed User");
			}
		}
		navigateHome();
		// handle mandatory pop up
		//mandatoryRegistrationPopUp(UserType);
		navigateToAnyScreenOnWeb(tabName);
		extent.HeaderChildNode(
				"Verify whether user is navigate to consumption page with content autoplaying when user tap on content in Listed collection");
		//verifyElementPresent(PWAHamburgerMenuPage.objFirstcontentCard, "Content card");
		JSClick(PWAHamburgerMenuPage.objFirstcontentCard, "Content card");
		scrollDownByY(300);
		click(PWAShowsPage.objEpisodeCard2, "Episode Card");
		waitForPlayerAdToComplete("Video Player");
		playerScrubTillMidWeb();
		if (verifyElementPresent(PWAPlayerPage.objPlayerScrubber, "Scrubber")) {
			logger.info("Content is autoplaying , expected behaviour");
			extent.extentLogger("Consumption Page", "Content is autoplaying , expected behaviour");
		} else {
			logger.error("Content is not autoplaying");
			extent.extentLoggerFail("Consumption page", "Content is not autoplaying");
		}
	}

	public void SubscriptionPopupScenarios(String userType) throws Exception {

		if (userType.equalsIgnoreCase("Subscribeduser")) {
			zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objStripBelowPlayer, "Strip below Player")) {
				logger.info("Strip below Player is displayed ");
				extent.extentLoggerFail("Consumption  Page", "Strip below Player is displayed ");
			} else {
				logger.info("Strip below Player is not displayed , expected result ");
				extent.extentLoggerPass("Consumption Page", "Strip below Player is not displayed , expected result");
			}
			navigateHome();
			extent.HeaderChildNode(
					"Verify for premium user \"Play\" CTA should be there in the carousel banner of premium content .");
			verifyElementPresent(PWAHamburgerMenuPage.objWatchButton, "Watch button");

			extent.HeaderChildNode(
					"Verify for All access subscribe user \"Watch first episode\" CTA should be there in the show details banner of a premium content .");
			click(PWAHomePage.objSearchBtn, "Search button");
			type(PWASearchPage.objSearchEditBox, "Parru" + "\n", "Search Field");
			click(PWASearchPage.objSearchShowsTab, "Shows tab");
			click(PWASearchPage.objspecificSearch, "Searched content");
			//click(PWASearchPage.objSearchedResult("Parru"), "Searched content : " + "Parru");
			verifyElementPresent(PWAShowsPage.objWatchLatestCTA,
					"\"Watch Latest episode\" CTA on Club Show Details Page Banner");
		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			zeePWAVerifyNavigationToSubscriptionFlowFromSubscriptionPopupFullscreenPlayer(userType);
			zeePWAVerifySubscriptionPopupAfterTrailerPlaybackIsComplete(userType);
		}
	}

	public void zeePWAVerifyNavigationToSubscriptionFlowFromSubscriptionPopupFullscreenPlayer(String userType)
			throws Exception {
		HeaderChildNode("Navigate to Subscription Flow From Player Inline Subscription Link in full screen player");
		System.out.println("Navigate to Subscription Flow From Player Inline Subscription Link in full screen player");
		click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
			waitTime(10000);
			playerTap();
			verifyElementPresentAndClick(PWAPlayerPage.maximizeBtn, "Maximize window icon");
			verifyElementPresent(PWAPlayerPage.minimizeBtn, "Minimize window icon");
			if (userType.equalsIgnoreCase("Guest")) {
				if (waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA")) {
					waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA");
					waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
					waitForElementAndClick(PWASubscriptionPages.objContinueWith499, 20, "Continue Button");
					waitForElement(PWASubscriptionPages.objAccountInfoHighlighted, 20, "Account Info Page");
					waitForElement(PWALoginPage.objEmailField, 20, "Email Field");
					type(PWALoginPage.objEmailField, "zee5latest@gmail.com", "Email");
					waitForElementAndClick(PWASubscriptionPages.objProceedBtnInSubscriptionPage, 20, "Continue button");
					waitForElement(PWASubscriptionPages.objPasswordField, 20, "Password Field");
					type(PWASubscriptionPages.objPasswordField, "User@123", "Password");
					waitForElementAndClick(PWASubscriptionPages.objProceedButtonInPassword, 20, "Continue button");
					waitForElement(PWASubscriptionPages.objAccountDetailInSubscription, 20, "Payment Section");
					verifyElementPresentAndClick(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
					logout();
				}
			} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				if (waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA")) {
					waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA");
					waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
					waitForElementAndClick(PWASubscriptionPages.objContinueBtn, 20, "Continue Button");
					waitForElement(PWASubscriptionPages.objAccountDetailInSubscription, 20, "Payment Section");
				}
			}
		}
	}

	@SuppressWarnings("unused")
	public void zeePWAVerifySubscriptionPopupAfterTrailerPlaybackIsComplete(String userType) throws Exception {
		HeaderChildNode("Verify Player Inline Subscription Link After Completion Of Trailer Playback Is Complete");
		click(PWASubscriptionPages.objZEE5Logo, "Zee5 Logo");
		zeeSearchForContentAndClickOnFirstResult("Ondh Kathe Hella");
		waitTime(5000);
		playerTap();
		String totalDuration = findElement(PWAPlayerPage.objPlayerTotalDuration).getText();
		extent.extentLogger("", "Total duration of the trailer: " + totalDuration);
		logger.info("Total duration of the trailer is: " + totalDuration);
		playerTap();
		String currentTime = findElement(PWAPlayerPage.objPlayerCurrentDuration).getText();
		logger.info("Current duration of the trailer is: " + currentTime);
		extent.extentLogger("", "Current duration of the trailer is: " + currentTime);
		for (int i = 0; !(totalDuration.equals(currentTime)); i++) {
			waitTime(5000);
			playerTap();
			currentTime = findElement(PWAPlayerPage.objPlayerCurrentDuration).getAttribute("innerText");
			logger.info("Current duration of the trailer is: " + currentTime);
			extent.extentLogger("", "Current duration of the trailer is: " + currentTime);
			waitTime(10000);
		}
		if (userType.equalsIgnoreCase("Guest")) {
			if (waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA")) {
				waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
				waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA");
				waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
				Back(1);
				String exp = getWebDriver().getCurrentUrl();
				waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
				String act = getWebDriver().getCurrentUrl();
				if (exp != act) {
					logger.info("User is navigated to next content");
					extent.extentLoggerPass("", "User is navigated to next content");
				} else {
					logger.info("User is not navigated to next content");
					extent.extentLoggerPass("", "User is not navigated to next content");
				}
				Back(1);
				waitForElement(PWASubscriptionPages.objExistUserText, 20, "Are you a Zee5 Subscriber? - Text");
				waitForElementAndClick(PWASubscriptionPages.objLoginLink, 20, "Login Link");
				waitForElement(PWASubscriptionPages.objLoginPage, 20, "Navigated to Login page");
				Back(1);
			}

		} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
			if (waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA")) {
				waitForElement(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
				waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan CTA");
				waitForElement(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
				Back(1);
				String exp = getWebDriver().getCurrentUrl();
				waitForElementAndClick(PWASubscriptionPages.objSkipLink, 20, "Skip Link");
				String act = getWebDriver().getCurrentUrl();
				if (exp != act) {
					logger.info("User is navigated to next content");
					extent.extentLoggerPass("", "User is navigated to next content");
				} else {
					logger.info("User is not navigated to next content");
					extent.extentLoggerPass("", "User is not navigated to next content");
				}
				Back(1);
			}
		}
		Back(2);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
	}

	public void UserActionGuestUser(String userType) throws Exception {
		extent.HeaderChildNode("User Action module- Guest user Validations");
		// Validate Continue watching tray is not displayed for Guest user
		waitTime(3000);
		watchlistCheck(userType);
		Watchlistlogin("NonSubscribe", "Gooli");
		Watchlistlogin("Subscribe", "Gooli");
//		registerandCheckCW();
//		if (getPlatform().equalsIgnoreCase("Web")) {
//			extent.HeaderChildNode("Validating Add to Watchlist icon on tray content card");
//			scrollToTheElementWEB(PWAHomePage.objFirstContentCardOfTray("Trending on ZEE5"));
//			if (checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Trending on ZEE5"),
//					"First Content Card Of Trending on ZEE5 Tray")) {
//				// validateDisplayLanguagePopup();
//				Actions action = new Actions(getWebDriver());
//				action.moveToElement(findElement(PWAHomePage.objFirstContentCardOfTray("Trending on ZEE5")));
//				action.perform();
//
//				if (checkElementDisplayed(PWAHomePage.objAddToWatchlistButtonOnTrayContentCard("Trending on ZEE5"),
//						"Add To Watchlist icon on tray 1st content card")) {
//					extent.extentLogger("Verify Add To Watchlist icon on tray content card",
//							"Add To Watchlist icon on tray content card is displayed for guest user");
//					logger.info("Add To Watchlist icon on tray content card is displayed for guest user");
//				} else {
//					extent.extentLoggerFail("Verify Add To Watchlist icon on tray content card",
//							"Add To Watchlist icon on tray content card is not displaying for guest user");
//					logger.info("Add To Watchlist icon on tray content card is not displaying for guest user");
//				}
//
//				extent.HeaderChildNode(
//						"Validating Login popup after clicking on Add to Watchlist icon on tray content card");
//				click(PWAHomePage.objAddToWatchlistButtonOnTrayContentCard("Trending on ZEE5"),
//						"Add To Watchlist icon on tray 1st content card");
//				if (checkElementDisplayed(PWAHomePage.objLoginRequiredPopUpHeader, "Login Required PopUp Header")) {
//					extent.extentLogger(
//							"Login popup is displayed when clicked on 'Add to Watchlist' icon on tray content card",
//							"Login popup is displayed when clicked on 'Add to Watchlist' icon on tray content card for guest user");
//					logger.info(
//							"Login popup is displayed when clicked on 'Add to Watchlist' icon on tray content card for guest user");
//					click(PWAHomePage.objPopupCloseicon(), "Popup Close icon");
//				} else {
//					extent.extentLoggerFail(
//							"Login popup is not displayed when clicked on 'Add to Watchlist' icon on tray content card",
//							"Login popup is not displayed when clicked on 'Add to Watchlist' icon on tray content card");
//					logger.info(
//							"Login popup is not displayed when clicked on 'Add to Watchlist' icon on tray content card");
//				}
//			}
//			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee5 Logo");
//		}
		extent.HeaderChildNode("Validating Continue Watching Tray for Guest User");
		waitTime(3000);
		if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Continue Watching tray") == false) {
			extent.extentLogger("Verify Continue Watching tray",
					"Continue watching tray is not displayed for guest user");
			logger.info("Continue watching tray is not displayed for guest user");
		} else {
			softAssert.assertAll();
			extent.extentLoggerFail("Verify Continue Watching tray",
					"Continue watching tray is displaying for guest user");
			logger.info("Continue watching tray is displaying for guest user");
		}
//		validateDisplayLanguagePopup();
//		extent.HeaderChildNode("Validating Add to Reminder button for Guest User");
//		// Verify Add to Reminder is not displayed for guest user
//		// Click on live tv tab
//		if (getPlatform().equalsIgnoreCase("Android")) {
//			navigateToAnyScreen("Live TV");
//		} else if (getPlatform().equalsIgnoreCase("Web")) {
//			navigateToAnyScreenOnWeb("Live TV");
//		}
//		waitTime(5000);
//		// click on channel guide
//		click(PWALiveTVPage.objChannelGuideToggle, "Channel guide");
//		// Verify Reminder option is not available
//		// Click on date
//		click(PWALiveTVPage.objTomorrowDate, "Tomorrow date");
//		FilterLanguage();
//
//		// Verify Reminder option is available
//		click(PWALiveTVPage.objShowName, "Show detail");
//		if (checkElementDisplayed(PWALiveTVPage.objRemainderButton, "Reminder option for upcoming show ") == false) {
//			extent.extentLogger("Verify Reminder button for guest user ",
//					"Reminder button is not displayed for the Guest user");
//			logger.info("Reminder button is not displayed for the Guest user");
//		} else {
//			extent.extentLoggerFail("Verify Reminder button for guest user ",
//					"Reminder button is displayed for the Guest user");
//			logger.info("Reminder button is displayed for the Guest user");
//
//		}
	}

	public void Watchlistlogin(String userType, String searchText) throws Exception {
		extent.HeaderChildNode("Logging in as " + userType + " user on clicking Add to Watchlist icon");
		// click(PWAHomePage.objZeelogo1, "zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, searchText, "Search field");
		waitTime(5000);
		// click(PWASearchPage.objAssetTitleSearchNavigationTab, "Movie");
		click(PWASearchPage.objspecificSearch, "Searched content");
		waitTime(8000);
		if (checkElementDisplayed(PWASearchPage.objSubscribepopup, "Subscribepopup")) {
			click(PWASearchPage.objSubscribepopupCLoseButton, "close button");
		}
		if (checkElementDisplayed(PWAPlayerPage.watchListBtn, "Watchlist")) {
			logger.info("Watchlist button is displayed in movie consumption page");
			extent.extentLogger("Watchlist", "Watchlist button is displayed in movie consumption page");
			click(PWAPlayerPage.watchListBtn, "Watchlist");
			waitTime(5000);
			checkElementDisplayed(PWAPlayerPage.watchListLoginPopup,
					"When guest user tries to click on watchlist login popup");
			click(PWAPlayerPage.watchListLoginButton, "Login button");
			if (userType.equals("NonSubscribe")) {
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
				type(PWALoginPage.objEmailField, NonSubUsername, "Email Field");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, NonSubPassword, "Password field");

				waitTime(5000);
				click(PWALoginPage.objWebLoginButton, "Login Button");
				waitTime(5000);
				if (checkElementDisplayed(PWASearchPage.objSubscribepopup, "Subscribepopup")) {
					click(PWASearchPage.objSubscribepopupCLoseButton, "close button");
				}
				if (checkElementDisplayed(PWALoginPage.objCleverTapPopUp, "clever tap pop up")) {
					WebElement popup = getWebDriver().findElement(PWALoginPage.objCleverTapPopUp);
					popup.click();

				}
			} else if (userType.equals("Subscribe")) {
				verifyElementPresentAndClick(PWALoginPage.objEmailField, "Email field");
				type(PWALoginPage.objEmailField, SubUsername, "Email Field");
				waitTime(3000);
				verifyElementPresentAndClick(PWALoginPage.objPasswordField, "Password Field");
				type(PWALoginPage.objPasswordField, SubPassword, "Password field");

				waitTime(5000);
				click(PWALoginPage.objWebLoginButton, "Login Button");
				waitTime(5000);
				if (checkElementDisplayed(PWALoginPage.objCleverTapPopUp, "clever tap pop up")) {
					WebElement popup = getWebDriver().findElement(PWALoginPage.objCleverTapPopUp);
					popup.click();

				}
			}
			waitTime(10000);
			String contentName2 = getElementPropertyToString("innerText", PWAPlayerPage.objContentName, "Title");
			verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
			JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
			waitTime(3000);
			JSClick(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
			if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
				click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
			}
			waitTime(3000);
			JSClick(PWAAddToWatchListPage.objMoviesTab, "Movies tab");
			String ContentNameAddedToWatchlist = null;

			List<WebElement> contentsInWatchlist = findElements(
					By.xpath("(//h3[contains(@class,'cardTitle overflowEllipsis')]//a)"));
			ArrayList<String> ContentNameInWatchlist = new ArrayList<String>();
			for (int i = 0; i < contentsInWatchlist.size(); i++) {
				ContentNameInWatchlist.add(contentsInWatchlist.get(i).getText());
			}
			for (int i = 0; i < ContentNameInWatchlist.size(); i++) {

				if (contentName2.equals(ContentNameInWatchlist.get(i))) {
					ContentNameAddedToWatchlist = ContentNameInWatchlist.get(i);
				}
			}
			if (contentName2.equals(ContentNameAddedToWatchlist)) {
				extent.extentLogger("Verify Watchlist", "Added content is displayed in Watchlist screen");
				logger.info("Added content is displayed in Watchlist screen");
			} else {
				extent.extentLoggerFail("Verify Watchlist", "Added content is not displayed in Watchlist screen");
				logger.info("Added content is not displayed in Watchlist screen");
			}
		}
		// click(PWAHomePage.objZeelogo1, "zee logo");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, searchText, "Search field");
		waitTime(5000);
		// click(PWASearchPage.objAssetTitleSearchNavigationTab, "Movie");
		click(PWASearchPage.objspecificSearch, "Searched content");
		waitTime(5000);
		if (checkElementDisplayed(PWASearchPage.objSubscribepopup, "Subscribepopup")) {
			click(PWASearchPage.objSubscribepopupCLoseButton, "close button");
		}
		String contentName2 = getElementPropertyToString("innerText", PWAPlayerPage.objContentName, "Title");
		click(PWAPlayerPage.watchListBtn, "Watchlist");
		verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
		JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
		JSClick(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
		JSClick(PWAAddToWatchListPage.objMoviesTab, "Movies tab");
		if (!checkElementDisplayed(PWAAddToWatchListPage.objTooltip(contentName2), "Added movie")) {
			logger.info(
					"Content is removed from My Watchlist when user taps on highlighted watchlist button in consumption page");
			extent.extentLogger("Watchlist",
					"Content is removed from My Watchlist when user taps on highlighted watchlist button in consumption page");
		}
		// click(PWAHomePage.objZeelogo1, "Zee logo");
		logout();
	}

	public void ContinueWatching() throws Exception {
		extent.HeaderChildNode(
				"User Action module- Subscribed User Validations - Validating Continue Watching Tray Scenarios");
		partialScroll();
		partialScroll();
		waitTime(3000);
		// Verify Progress bar is displayed for continue watching tray
		verifyElementPresent(PWAContinueWatchingTrayPage.objProgressBar, "Progress bar");
		// Verify Progress bar is updated accordingly
		String beforePlayingContent = getElementPropertyToString("style",
				PWAContinueWatchingTrayPage.objProgressBarProgress(2), "Progress bar");
		System.out.println(beforePlayingContent);
		String[] originalRatio = beforePlayingContent.split(":");
		String progress = originalRatio[1];
		String[] exactRatio = progress.split("%");
		float progressedTime = Float.parseFloat(exactRatio[0]);

		System.out.println(progressedTime);

		// Left watch time before playing content
		String leftWatchTime = getElementPropertyToString("innerText", PWAContinueWatchingTrayPage.objTotalTimeLeft(2),
				"Left time before watching content");
		String[] leftTime = leftWatchTime.split("left");
		String timeBeforeWatchingContent = leftTime[0];
		System.out.println(timeBeforeWatchingContent);
		/*
		 * //Verify movie is added to continue watching tray after watching for X
		 * minutes //Click on search click(PWAHomePage.objSearchBtn,"Search box");
		 * //Enter movie name type(PWASearchPage.objSearchEditBox, "Ondh Kathe Hella",
		 * "Search edit"); waitTime(5000); //Click on the first episode
		 * click(PWASearchPage.objFirstContentCardNameAfterSearch1(1),"Movie");
		 * Thread.sleep(10000); //Tap on pause button //Tap on player pausePlayer();
		 * verifyElementPresent(PWAPlayerPage.progressBar, "Progress bar"); WebElement
		 * slider = getDriver().findElement(PWAPlayerPage.objScrubber); Actions move =
		 * new Actions(getDriver()); Action action = (Action) move.dragAndDropBy(slider,
		 * 30, 0).build(); action.perform();
		 */
		// Verify partially watched contents are added or updated
		// Play any content
		String playingContent = getElementPropertyToString("innerText", PWAContinueWatchingTrayPage.objCardTitle(2),
				"Content");
		// Click on the content
		click(PWAContinueWatchingTrayPage.objCardTitle(2), "Content");
		Thread.sleep(180000);
		// Navigate to home page
		if (getPlatform().equalsIgnoreCase("Android")) {
			navigateToAnyScreen("Home");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			navigateToAnyScreenOnWeb("Home");
		}

		Thread.sleep(4000);
		String updatedContent = getElementPropertyToString("innerText", PWAContinueWatchingTrayPage.objCardTitle(1),
				"Content");
		if (playingContent.equals(updatedContent)) {
			extent.extentLogger("Verify partially watched content",
					"Partially watched contents are added to Continue watching tray");
			logger.info("Partially watched contents are added to Continue watching tray");
		} else {
			extent.extentLoggerFail("Verify partially watched content",
					"Partially watched contents are not added to Continue watching tray");
			logger.info("Partially watched contents are not added to Continue watching tray");
		}


		partialScroll();
		partialScroll();
		waitTime(5000);
		// Verify Progress bar is updated after watching any content from CW tray
		String afterPlayingContent = getElementPropertyToString("style",
				PWAContinueWatchingTrayPage.objProgressBarProgress(2), "Progress bar");
		System.out.println(afterPlayingContent);
		String[] originalRatio1 = afterPlayingContent.split(":");
		String progress1 = originalRatio1[1];
		String[] exactRatio1 = progress1.split("%");
		float progressedTimeAfterWatching = Float.parseFloat(exactRatio1[0]);
		System.out.println(progressedTimeAfterWatching);
		if (progressedTime < progressedTimeAfterWatching) {
			extent.extentLogger("Verify progress bar", "Progress bar is updated from " + progress + " to " + progress1);
			logger.info("Progress bar is updated from " + progress + " to " + progress1);
		} else {
			extent.extentLoggerFail("Verify progress bar", "Progress bar is not updated after watching content");
			logger.info("Progress bar is not updated after watching content");
		}

		// Verify left watch time is updated accordingly

		// Left watch time after playing content
		String leftWatchTime1 = getElementPropertyToString("innerText", PWAContinueWatchingTrayPage.objTotalTimeLeft(1),
				"Left time before watching content");
		String[] leftTime1 = leftWatchTime1.split("left");
		String timeAfterWatchingContent = leftTime1[0];
		System.out.println(timeAfterWatchingContent);
		if (!timeBeforeWatchingContent.equals(timeAfterWatchingContent)) {
			extent.extentLogger("Verify left watch time", "The left time Before watching content is " + leftTime[0]
					+ "and the left time after watching content for some time is " + leftTime1[0]);
			logger.info("The left time Before watching content is " + leftTime[0]
					+ "and the left time after watching content for some time is " + leftTime1[0]);
		} else {
			extent.extentLoggerFail("Verify Left watch time",
					"Left Watch time is not getting updated after watching content from Continue watching tray");
			logger.info("Left Watch time is not getting updated after watching content from Continue watching tray");
		}

	}

	public void MyWatchlistSubscribedUser() throws Exception {
		extent.HeaderChildNode("MyWatchlist Scenarios Validations");
		String URL = "https://gwapi.zee5.com/user/v2/watchlist?country=IN&translation=en";
		String username = SubUsername;
		String pwd = SubPassword;
		//AddContentsToWatchList();
		if (getPlatform().equalsIgnoreCase("Android")) {
			// Click on Hamburger menu
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			// Click on My account
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyAccount, "My account");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			// Click on My account
			verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
			click(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
		}
		// Click on My Watchlist
		click(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
		// Verify My Watchlist header is displayed
		if (checkElementDisplayed(PWAAddToWatchListPage.objMyWatchlistHeader, "My Watchlist") == true) {
			extent.extentLogger("Verify My Watchlist header is displayed",
					getWebDriver().findElement(PWAAddToWatchListPage.objMyWatchlistHeader).getText()
							+ " text is displayed");
			logger.info(getWebDriver().findElement(PWAAddToWatchListPage.objMyWatchlistHeader).getText()
					+ " text is displayed");
		} else {
			softAssert.assertAll();
			extent.extentLoggerFail("Verify My Watchlist header is displayed", "My Watchlist text is not displayed");
			logger.info("My Watchlist text is not displayed");
		}

		// Verify remove all button is displayed
		verifyElementPresent(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all button");
		// Verify cancel button is displayed
		int size = getWebDriver().findElements(PWAAddToWatchListPage.objCancelBtn).size();
		for (int i = 1; i <= size; i++) {
			verifyElementPresent(PWAAddToWatchListPage.objCancelBtn(i), "Cancel button for item " + i);
		}
		// Verify if clicking shows will display only the episodes in that episodes
		// fragment
		if (getElementPropertyToString("class", PWAAddToWatchListPage.objEpisodeTab, "Episode tab")
				.contains("active")) {
			extent.extentLogger("Verify Episode tab", "User is in Episode tab");
			logger.info("User is in Episode tab");
			waitTime(5000);
			ArrayList<String> asset = new ArrayList<String>();
			boolean value = false;
			responseWatchlist.getRECOResponse(URL, username, pwd);
			asset = responseWatchlist.WatchlistValidationEpisodesTab();
			for (int i = 0; i < asset.size(); i++) {
				if (asset.get(i).equals("episode")) {
					value = true;
				} else {
					value = false;
					break;
				}
			}
			if (value == true) {
				extent.extentLogger("Verify Episode fragment",
						"The contents displayed in Episode fragment are all in Episode format");
				logger.info("Episodes are displayed in Episode tab");
			} else {
				extent.extentLoggerFail("Verify Episode fragment",
						"The contents displayed in Episode fragment are not in Episode format");
				logger.info("The contents displayed in Episode fragment are not in Episode format");
			}
		} else {
			extent.extentLoggerFail("Verify user tab", "User is not in Episode tab");
			logger.info("User is not in Episode tab");
		}
		// Verify if clicking Movies will display only the Movies in that Movies
		// fragment
		// Click on Movies tab
		click(PWAAddToWatchListPage.objMoviesTab, "Movies tab");
		if (getElementPropertyToString("class", PWAAddToWatchListPage.objMoviesTab, "Movies tab").contains("active")) {
			extent.extentLogger("Verify Movies tab", "User is in Movies tab");
			logger.info("User is in Movies tab");
			ArrayList<String> asset = new ArrayList<String>();
			boolean value = false;
			responseWatchlist.getRECOResponse(URL, username, pwd);
			asset = responseWatchlist.WatchlistValidationMoviesTab();
			for (int i = 0; i < asset.size(); i++) {
				if (asset.get(i).equals("movie")) {
					value = true;
				} else {
					value = false;
					break;
				}
			}
			if (value == true) {
				extent.extentLogger("Verify Movies fragment",
						"The contents displayed in Movies fragment" + " are all in Movies format");
				logger.info("Moives are displayed in Movies tab");
			} else {
				extent.extentLoggerFail("Verify Movies fragment",
						"The contents displayed in Movies fragment" + " are not in Movies format");
				logger.info("The contents displayed in Movies fragment are not in Movies format");
			}
		} else {
			extent.extentLoggerFail("Verify user tab", "User is not in Movies tab");
			logger.info("User is not in Movies tab");
		}

		// Verify if clicking Videos will display only the Videos in that Videos
		// fragment
		// Click on Videos tab
		click(PWAAddToWatchListPage.objVideoTab, "Video tab");
		if (getElementPropertyToString("class", PWAAddToWatchListPage.objVideoTab, "Video tab").contains("active")) {
			extent.extentLogger("Verify Video tab", "User is in Video tab");
			logger.info("User is in Video tab");
			ArrayList<String> asset = new ArrayList<String>();
			boolean value = false;
			responseWatchlist.getRECOResponse(URL, username, pwd);
			asset = responseWatchlist.WatchlistValidationVideoTab();
			System.out.println("Asset Size:" + asset.size());
			for (int i = 0; i < asset.size(); i++) {
				if (asset.get(i).equals("video")) {
					value = true;
				} else {
					value = false;
					break;
				}
			}
			if (value == true) {
				extent.extentLogger("Verify Video fragment",
						"The contents displayed in Video fragment" + " are all in Video format");
				logger.info("Videos are displayed in Videos tab");
			} else {
				extent.extentLoggerFail("Verify Videos fragment",
						"The contents displayed in Videos fragment" + " are not in Videos format");
				logger.info("The contents displayed in Videos fragment are not in Videos format");
			}
		} else {
			extent.extentLoggerFail("Verify user tab", "User is not in Video tab");
			logger.info("User is not in Videos tab");
		}

		// Verify user is navigated to respective show detail page
		String showName = getElementPropertyToString("innerText", PWAAddToWatchListPage.objFirstContentInWatchlist,
				"Show name");
		System.out.println(showName);
		click(PWAAddToWatchListPage.objFirstContentInWatchlist, "Show name");
		waitTime(5000);
		if (checkElementDisplayed(PWAAddToWatchListPage.objCompleteProfilePopUp, "Complete profile Popup") == true) {
			click(PWAAddToWatchListPage.objClosePopup, "Close button");
		}
		String showNameInShowdetailPage = getElementPropertyToString("innerText", PWAAddToWatchListPage.objContentName,
				"Content name");
		System.out.println(showNameInShowdetailPage);
		if (showName.equals(showNameInShowdetailPage)) {
			extent.extentLogger("Verify show name",
					"User is naviagted to respective show page and the show name is " + showNameInShowdetailPage);
			logger.info("User is navigated to respective show detail page from Watchlist screen");
		} else {
			extent.extentLoggerFail("Verify show name",
					"User did not naviagted to respective show page and the show name is " + showNameInShowdetailPage);
			logger.info("User did not navigated to respective show detail page from Watchlist screen");

		}
		if (getPlatform().equalsIgnoreCase("Android")) {
			// Click on Hamburger menu
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			// Click on My account
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objMyAccount, "My account");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			// Click on My account
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
		}
		// Click on My Watchlist
		click(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "wouldyouliketowatch popup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
		// Verify the Cancel button functionality
		int itemsBeforeClickingCancel = findElements(PWAAddToWatchListPage.objTotalContents).size();
		// Click on cancel button
		click(PWAAddToWatchListPage.objCancelBtn(1), "First content cancel button");
		int itemsAfterClickingCancel = findElements(PWAAddToWatchListPage.objTotalContents).size();
		if (itemsAfterClickingCancel < itemsBeforeClickingCancel) {
			extent.extentLogger("Verify cancel button", "The content is deleted successfully from the watch list");
			logger.info("The content is deleted successfully from the watch list");
		} else {
			softAssert.assertAll();
			extent.extentLoggerFail("Verify cancel button", "The content is not deleted from the watch list");
			logger.info("The content is not deleted from the watch list");
		}
		// click on remove all button
		click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all button");
		// Verify all the contents are deleted
		int contentsAfterRemovedShowsSection = findElements(PWAAddToWatchListPage.objTotalContents).size();
		if (contentsAfterRemovedShowsSection == 0) {
			extent.extentLogger("Verify Remove all functionality",
					"The contents are removed from the Watch list for Shows fragment");
			logger.info("The Contents are removed from the Watch list for shows fragment");
		} else {
			extent.extentLoggerFail("Verify Remove all functionality",
					"The contents are not removed from the Watch list after clicking on remove all button for shows fragment");
			logger.info(
					"The Contents are not removed from the Watch list after clicking on remove all button for shows fragment");
		}
		// Verify the functionality of Remove all button
		click(PWAAddToWatchListPage.objMoviesTab, " Movies tab");
		// Click on Remove all button
		click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all button");
		int contentsAfterRemovedMoviestab = findElements(PWAAddToWatchListPage.objTotalContents).size();
		if (contentsAfterRemovedMoviestab == 0) {
			extent.extentLogger("Verify Remove all functionality",
					"The contents are removed from the Watch list for Movies fragment");
			logger.info("The Contents are removed from the Watch list for Movies fragment");
		} else {
			extent.extentLoggerFail("Verify Remove all functionality",
					"The contents are not removed from the Watch list after clicking on remove all button for Movies fragment");
			logger.info(
					"The Contents are not removed from the Watch list after clicking on remove all button for Movies fragment");
		}

		click(PWAAddToWatchListPage.objVideoTab, "Video tab");
		// Click on Remove all button
		click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all button");
		int contentsAfterRemovedVideotab = findElements(PWAAddToWatchListPage.objTotalContents).size();
		if (contentsAfterRemovedVideotab == 0) {
			extent.extentLogger("Verify Remove all functionality",
					"The contents are removed from the Watch list for Video fragment");
			logger.info("The Contents are removed from the Watch list for Video fragment");
		} else {
			extent.extentLoggerFail("Verify Remove all functionality",
					"The contents are not removed from the Watch list after clicking on remove all button for Video fragment");
			logger.info(
					"The Contents are not removed from the Watch list after clicking on remove all button for Video fragment");
		}

		// Verify the device back button functionality
	}

	public void verifyCTAandMetaDataInDetailsAndConsumption(String contentTitle) throws Exception {
		extent.HeaderChildNode(
				"Verify Watch Latest Episode CTA and metadata comparison between Show Details and Consumption page");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, contentTitle + "\n", "Search Edit box: " + contentTitle);
		waitForElement(PWASearchPage.objSearchNavigationTab("TV Shows"), 30, "Shows tab");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV Shows"), "Shows tab");
		waitForElement(PWASearchPage.objSearchedResult(contentTitle), 30, "Search Result");
		verifyElementPresentAndClick(PWASearchPage.objSearchedResult(contentTitle), "Search Result");
		verifyElementPresent(PWAShowsPage.objShowsTitle, "Show title");
		String consumptionPageTitle = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
				"Content Title").toString();
		if (consumptionPageTitle.contains(contentTitle)) {
			extent.extentLogger("correctNavigation", "Successfully navigated to the correct Details page");
			logger.info("Successfully navigated to the correct Details page");
			verifyElementPresent(PWAShowsPage.objWatchLatestCTA, "Watch Latest CTA button");
			String watchLatestCTAText = getElementPropertyToString("innerText", PWAShowsPage.objWatchLatestCTA,
					"Watch Latest CTA button").toString();
			if (watchLatestCTAText.equals("WATCH LATEST EPISODE")) {
				extent.extentLogger("correctButtonText", "Correct button text displayed: " + watchLatestCTAText);
				logger.info("Correct button text displayed: " + watchLatestCTAText);
			} else {
				extent.extentLoggerFail("incorrectButtonText",
						"Incorrect button text displayed: " + watchLatestCTAText);
				logger.error("Incorrect button text displayed: " + watchLatestCTAText);
			}
			partialScroll();
			verifyElementPresentAndClick(PWAShowsPage.objThirdAssetImageFirstRail, "Third asset image from first rail");
			// Get API details
			String contentURL = getWebDriver().getCurrentUrl();
			String[] abc = contentURL.split("/");
			String contentID = abc[abc.length - 1].split("\\?")[0];
			System.out.println("contentID fetched from URL: " + contentID);
			Response resp = ResponseInstance.getContentDetails(contentID, "content");
			String titleAPI = resp.jsonPath().get("title").toString();
			extent.extentLogger("apidata", "Episode title fetched from API: " + titleAPI);
			logger.info("Episode title fetched from API: " + titleAPI);

			String showtitleAPI = resp.jsonPath().get("tvshow.title").toString();
			extent.extentLogger("apidata", "Show title fetched from API: " + showtitleAPI);
			logger.info("Show title fetched from API: " + showtitleAPI);

			String episodeNoAPI = resp.jsonPath().get("orderid").toString();
			extent.extentLogger("apidata", "Episode number fetched from API: " + episodeNoAPI);
			logger.info("Episode number fetched from API: " + episodeNoAPI);

			String durationAPI = resp.jsonPath().get("duration").toString();
			extent.extentLogger("apidata", "Duration fetched from API: " + durationAPI);
			logger.info("Duration fetched from API: " + durationAPI);

			String genreAPI = resp.jsonPath().get("genre[0].value").toString();
			extent.extentLogger("apidata", "Genre fetched from API: " + genreAPI);
			logger.info("Genre fetched from API: " + genreAPI);

			String ageRatingAPI = resp.jsonPath().get("age_rating").toString();
			extent.extentLogger("apidata", "Age Rating fetched from API: " + ageRatingAPI);
			logger.info("Age Rating fetched from API: " + ageRatingAPI);

			waitForElementAndClickIfPresent(PWASearchPage.objCloseRegisterDialog, 5, "Close in Register Pop Up");
			waitForPlayerAdToComplete("Video Player");
			waitTime(10000);
			String episode = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle,
					"Episode title in Consumption Page").toString();
			String show = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitle1,
					"Show title in Consumption Page").toString();
			System.out.println(show);
			String episodeNo = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaEpisode,
					"Episode Number in Consumption Page").toString();
			String duration = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaDuration,
					"Duration in Consumption Page").toString();
			String genre = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaGenre,
					"Genre in Consumption Page").toString();
			String ageRating = getElementPropertyToString("innerText", PWAPlayerPage.objContentMetaAgeRating,
					"Age Rating in Consumption Page").toString();

			if (titleAPI.equals(episode)) {
				extent.extentLogger("titleMatch", "Consumption page content Title matched with API");
				logger.info("Consumption page content Title matched with API");
			} else {
				extent.extentLoggerFail("titleMismatch", "Consumption page content Title mismatched with API");
				logger.error("Consumption page content Title mismatched with API");
			}

			if (showtitleAPI.equals(show)) {
				extent.extentLogger("showMatch", "Consumption page content Show matched with API");
				logger.info("Consumption page content Show matched with API");
			} else {
				extent.extentLoggerFail("showMismatch", "Consumption page content Show mismatched with API");
				logger.error("Consumption page content Show mismatched with API");
			}
			episodeNo = episodeNo.split("E ")[1];
			if (episodeNoAPI.equals(episodeNo)) {
				extent.extentLogger("episodeMatch", "Consumption page content Episode Number matched with API");
				logger.info("Consumption page content Episode Number matched with API");
			} else {
				extent.extentLoggerFail("episodeMismatch",
						"Consumption page content Episode Number mismatched with API");
				logger.error("Consumption page content Episode Number mismatched with API");
			}

			durationAPI = String.valueOf((Integer.parseInt(durationAPI) / 60));
			duration = duration.split("m")[0];
			if (durationAPI.equals(duration)) {
				extent.extentLogger("durationMatch", "Consumption page content Duration matched with API");
				logger.info("Consumption page content Duration matched with API");
			} else {
				extent.extentLoggerFail("durationMismatch", "Consumption page content Duration mismatched with API");
				logger.error("Consumption page content Duration mismatched with API");
			}

			if (genreAPI.equals(genre)) {
				extent.extentLogger("genreMatch", "Consumption page content Genre matched with API");
				logger.info("Consumption page content Genre matched with API");
			} else {
				extent.extentLoggerFail("genreMismatch", "Consumption page content Genre mismatched with API");
				logger.error("Consumption page content Genre mismatched with API");
			}

			if (ageRatingAPI.equals(ageRating)) {
				extent.extentLogger("ageRatingMatch", "Consumption page content Age Rating matched with API");
				logger.info("Consumption page content Age Rating matched with API");
			} else {
				extent.extentLoggerFail("ageRatingMismatch", "Consumption page content Age Rating mismatched with API");
				logger.error("Consumption page content Age Rating mismatched with API");
			}

		} else {
			extent.extentLoggerFail("incorrectNavigation",
					"Navigated to incorrect Details page: " + consumptionPageTitle);
			logger.error("Navigated to incorrect Details page: " + consumptionPageTitle);
		}
	}

	public boolean waitforLiveTabToLoad() throws Exception {
		for (int i = 0; i < 15; i++) {
			if (checkElementExist(PWAPlayerPage.objFirstCardFreeChnnelFromFirstTray)) {
				System.out.println("First Card of Free TV Channels Displayed");
				return true;
			} else {
				partialScroll();
				waitTime(10000);
			}
		}
		extent.extentLoggerFail("", "Live TV failed to load even after waiting for 2 minutes");
		logger.error("Live TV failed to load even after waiting for 2 minutes");
		return false;
	}

	/**
	 * Method for news page validation
	 * @param userType
	 * @param tabName
	 * @throws Exception
	 */
	public void newsValidation(String userType, String tabName) throws Exception {

		extent.HeaderChildNode("HLS_055: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode("HLS_062 :  Verify the Play, share and add to watch list CTA buttons");
		waitTime(3000);
		trayTitleAndContentValidationWithApiDataNews(tabName, "news");

		extent.HeaderChildNode(" HLS_056 : Verify The carousels are Auto scrolled in landing pages.");
		navigateToAnyScreenOnWeb(tabName);

		verifyAutoroatingOnCarousel(tabName);
		extent.HeaderChildNode(" HLS_057 : Verify the trays displayed in the News page.");
		PWAPagesNavigationAndTabHighlight(tabName);

//		extent.HeaderChildNode(
//				" HLS_058 : Verify the content which have Autoplay tag in news Carousel should Autoplay .");
//		boolean autoPlayed = verifyAutoPlay(tabName);
//		extent.HeaderChildNode("HLS_059 : Verify the player control Autoplay carousel content");
//
//		if (autoPlayed == true) {
//			verifyElementPresent(PWANewsPage.objLive, "LIVE badge on Autoplaying carousel");
//			verifyElementPresent(PWANewsPage.objVolume, "Volume Control on Autoplaying carousel");
//			if (verifyElementDisplayed(PWAPlayerPage.pauseBtn)) {
//				logger.error("Pause button on Autoplaying carousel should not be displayed");
//				extent.extentLoggerFail("Autoplay", "Pause button on Autoplaying carousel should not be displayed");
//			} else {
//				logger.info("Pause button on Autoplaying carousel is not be displayed, expected behavior");
//				extent.extentLogger("Autoplay",
//						"Pause button on Autoplaying carousel is not displayed, expected behavior");
//			}
//			if (verifyElementDisplayed(PWAPlayerPage.playBtn)) {
//				logger.error("Play button on Autoplaying carousel should not be displayed");
//				extent.extentLoggerFail("Autoplay", "Play button on Autoplaying carousel should not be displayed");
//			} else {
//				logger.info("Play button on Autoplaying carousel is not be displayed, expected behavior");
//				extent.extentLogger("Autoplay",
//						"Play button on Autoplaying carousel is not displayed, expected behavior");
//			}
//			if (verifyElementDisplayed(PWAPlayerPage.forward10SecBtn)) {
//				logger.error("Forward button on Autoplaying carousel should not be displayed");
//				extent.extentLoggerFail("Autoplay", "Forward button on Autoplaying carousel should not be displayed");
//			} else {
//				logger.info("Forward button on Autoplaying carousel is not be displayed, expected behavior");
//				extent.extentLogger("Autoplay",
//						"Forward button on Autoplaying carousel is not displayed, expected behavior");
//			}
//			if (verifyElementDisplayed(PWAPlayerPage.rewind10SecBtn)) {
//				logger.error("Rewind button on Autoplaying carousel should not be displayed");
//				extent.extentLoggerFail("Autoplay", "Rewind button on Autoplaying carousel should not be displayed");
//			} else {
//				logger.info("Rewind button on Autoplaying carousel is not be displayed, expected behavior");
//				extent.extentLogger("Autoplay",
//						"Rewind button on Autoplaying carousel is not displayed, expected behavior");
//			}
//			if (verifyElementDisplayed(PWAPlayerPage.minimizeBtn)) {
//				logger.error("Autoplaying carousel should not be in full screen mode");
//				extent.extentLoggerFail("Autoplay", "Autoplaying carousel should not be in full screen mode");
//			} else {
//				logger.info("Autoplaying carousel is not in full screen mode, expected behavior");
//				extent.extentLogger("Autoplay", "Autoplaying carousel is not in full screen mode, expected behavior");
//			}
//		} else {
//			logger.info("Carousel card did not autoplay");
//			extent.extentLogger("Autoplay", "Carousel card did not autoplay");
//			logger.info("Player controls on Autoplaying carousel content could not be verified");
//			extent.extentLoggerWarning("Autoplay",
//					"Player controls on Autoplaying carousel content could not be verified");
//		}
		extent.HeaderChildNode(" HLS_060 : Verify On click More/> ");

		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "More Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.info("Navigated to More Page");
				extent.extentLogger("More", "Navigated to More Page");
			} else {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("View All", "Not navigated to More Page");
			}
		}
		Back(1);
		extent.HeaderChildNode(" HLS_061 : Verify the button (>) rotate and functional");
		RotateTrayValidation();

		extent.HeaderChildNode("HLS_063 :Verify the right side bottom arrow ");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (checkElementDisplayed(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}

		extent.HeaderChildNode(
				"HLS_064 : Verify whether user is navigate to Playback page when user tap on any Live News content");
		waitTime(2000);
//		scrollDownByY(200);
//		swipeTillTray(20, "Live Channel", "Live Channel tray");
		swipeTillTrayAndClickFirstAsset(userType, 90, "All Channel", "All Channel tray", "News");
//		verifyElementPresent(PWALandingPages.trayCardImg("Live News"), "First Card under 'Live News' tray");
//		JSClick(PWALandingPages.trayCardImg("Live News"), "First Card under 'Live News' tray");
		String nextPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleLiveTVname,
				"Content Title").toString();
		logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
		extent.extentLogger("playerScreen", "Navigated to the consumption/details page: \"" + nextPageTitle + "\"");

//		extent.HeaderChildNode(
//				"HLS_65 : Verify whether user is navigate to Playback page when user tap on any News VOD content");
//		navigateToAnyScreenOnWeb(tabName);
//		swipeTillTrayAndVerifyPlayback(userType, "News", "Trending News");
	}

	/**
	 * Method for tvshows page validation
	 * @param tabName
	 * @param userType
	 * @throws Exception
	 */
	public void tvShowsValidation(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_041: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);

		extent.HeaderChildNode(" HLS_042 : Verify The carousels are Auto scrolled in landing pages.");
		waitTime(5000);
		String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
		new WebDriverWait(getWebDriver(), 15);
		try {
			firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
			waitTime(10000);
			thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

		} catch (Exception e) {
			e.getMessage();
		}
		extent.extentLogger("Autorotating", "First content title :" + firstCarouselTitle + ", Second content title :"
				+ secondCarouselTitle + " and Third content title :" + thirdCarouselTitle);
		logger.info("First content title :" + firstCarouselTitle + ", Second content title :" + secondCarouselTitle
				+ " and Third content title :" + thirdCarouselTitle);
		if (firstCarouselTitle.equals(secondCarouselTitle) == false
				&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
			softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
			logger.info("Content is auto rotated");
			extent.extentLogger("Autorotating", "Content is auto rotated");
		} else {
			logger.error("Content is not auto rotated");
			extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
		}

		extent.HeaderChildNode(" HLS_043 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);

		extent.HeaderChildNode("HLS_046,HLS_044 : Verify that user is able to rotate tray");
		verifyElementPresent(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		waitTime(5000);
		if (verifyElementPresent(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			waitTime(3000);
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.error("Tray is not rotated");
			extent.extentLoggerFail("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		if (verifyElementPresent(PWAPremiumPage.objViewAllBtn, "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "More Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.info("Navigated to More Page");
				extent.extentLogger("More", "Navigated to More Page");
			} else {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("View All", "Not navigated to More Page");
			}
		}
		Back(1);

		if (userType.equalsIgnoreCase("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
			extent.HeaderChildNode(" HLS_045 : Verify the premium tag for all premium content card");
			waitTime(3000);
			scrollToElement(PWAHomePage.objPremiumTag);
			if (checkElementDisplayed(PWAHomePage.objPremiumTag, "Premium Tag")) {
				logger.info("Premium tag is displayed");
				extent.extentLogger("Premium Tag", "Premium Tag is isplayed");
			} else {
				logger.error("Premium tag is not displayed");
				extent.extentLoggerFail("Premium Tag", "Premium Tag is not displayed");
			}
		}
		scrollToElement(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top");

//		extent.HeaderChildNode(" HLS_047 : Navigate to the TV show Details Screen");
//		mandatoryRegistrationPopUp(userType);
//		String nextPageTitle = "";
//		boolean firstAssetClicked = false;
//		firstAssetClicked = swipeTillTrayAndClickFirstAsset(userType, 15, "Trending Shows",
//				"Trending Shows tray", tabName);
//		if (firstAssetClicked) {
//			try {
//				nextPageTitle = getText(PWAShowsPage.objShowsTitle);
//				logger.info("TV Shows Details page is displayed: " + nextPageTitle);
//				extent.extentLogger("showDetails", "TV Shows Details page is displayed: " + nextPageTitle);
//			} catch (Exception e) {
//				try {
//					nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
//					logger.info("Player screen is displayed: " + nextPageTitle);
//					extent.extentLogger("playerScreen", "Player screen is displayed: " + nextPageTitle);
//				} catch (Exception e1) {
//					nextPageTitle = "";
//				}
//			}
//		}
//		if (!nextPageTitle.equals("")) {
//			logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
//			extent.extentLogger("playerScreen", "Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
//			screencapture();
//			if (!userType.equals("SubscribedUser"))
//				try {
//					getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
//				} catch (Exception e) {
//				}
//			try {
//				getWebDriver().findElement(By.xpath("//a[text()='Home']")).click();
//			} catch (Exception e) {
//			}
//		} else {
//			logger.error("Failed to navigate to Details page: \"" + nextPageTitle + "\"");
//			extent.extentLoggerFail("playerScreen", "Failed to navigate to Details page: \"" + nextPageTitle + "\"");
//		}

		extent.HeaderChildNode(" HLS_049 : Verify play Free content from the show page");
		mandatoryRegistrationPopUp(userType);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("consumptionsShow");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows Tab");
		waitTime(4000);
		JSClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(4000);
		partialScroll();
		verifyElementPresent(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		WebElement ele = getWebDriver().findElement(By.xpath("(//div[@class='AllEpisodesListDiv']//div[@class='allEpisodeSelect']//div)[4]"));
		Actions actions = new Actions(getWebDriver());
		actions.moveToElement(ele).build().perform();
//		verifyElementPresentAndClick(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		verifyElementPresentAndClick(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1),
				"Second Episode set");
		waitTime(2000);
		verifyElementPresentAndClick(PWAShowsPage.objEpisodeCardTwo, "Second Episode Card");
		// verifyElementPresentAndClick(PWAShowsPage.objEpisodeCard, "First Episode
		// Card");
		waitForPlayerAdToComplete("Video Player");
		pausePlayer();
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee Logo");

		extent.HeaderChildNode(" HLS_050 : Verify play Premium content from the show page");
		verifyLandscapeforPremiumContentWeb();
		verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "Zee Logo");
		navigateToAnyScreenOnWeb(tabName);

		extent.HeaderChildNode(" HLS_051 : Verify the Play, share and Watchlist CTA buttons ");
		trayTitleAndContentValidationWithApiDataMovie(tabName, "tvshows");

		extent.HeaderChildNode("HLS_052 :Verify the right side bottom arrow ");
		// scrollToBottomOfPageWEB();
		// logger.info("Scrolled Up the page");
		scrollToElement(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn);
		if (verifyElementPresent(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow icon")) {
			click(PWALandingPages.obj_Pwa_Back_to_Top_Arrow_btn, "Back to Top Arrow icon");
		} else {
			logger.error("Back to Top Arrow icon is not displayed");
			extent.extentLoggerFail("", "Back to Top Arrow icon is not displayed");
		}

		extent.HeaderChildNode(
				" HLS_053 :Verify the Before TV are available, HLS_054 :Verify the  Before TV content playback");
		waitTime(2000);
		// Before Zee TV
		mandatoryRegistrationPopUp(userType);
		String nextPageTitle = "";
		boolean firstAssetClicked = false;
		nextPageTitle = "";
		firstAssetClicked = swipeTillTrayAndClickFirstAssetType2(userType, 15, "Premiere Episodes | Before Zee TV",
				"Before Zee TV tray", tabName);
		if (firstAssetClicked) {
			try {
				nextPageTitle = getText(PWAPlayerPage.objContentTitleInConsumptionPage);
				logger.info("Player screen is displayed");
				extent.extentLogger("playerScreen", "Player screen is displayed");
			} catch (Exception e1) {
				nextPageTitle = "";
			}
		}
		if (!nextPageTitle.equals("")) {
			logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			extent.extentLogger("playerScreen", "Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
			if (!userType.equals("SubscribedUser"))
				try {
					getWebDriver().findElement(PWASearchPage.objClosePremiumDialog).click();
				} catch (Exception e) {
				}
			try {
				getWebDriver().findElement(By.xpath("//a[text()='Home']")).click();
			} catch (Exception e) {
			}
		} else {
			logger.error("Failed to navigate to Consumptions page: \"" + nextPageTitle + "\"");
			extent.extentLoggerFail("playerScreen",
					"Failed to navigate to Consumptions page: \"" + nextPageTitle + "\"");
		}
	}

	/**
	 * Method for music page validation
	 * @param tabName
	 * @param userType
	 * @throws Exception
	 */
	public void Musicvalidation(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_123: Verify user navigation " + tabName + "page");
		PWAPagesNavigationAndTabHighlight(tabName);
		extent.HeaderChildNode(" HLS_124 : Verify the rails name and content are loaded for first 2 scroll");
		pagesTrayValidation(tabName);
		extent.HeaderChildNode("HLS_126 : Verify Tray Rotation functionality");
		scrollDownWEB();
		verifyElementPresentAndClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		waitTime(5000);
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowMusicPageBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.error("Tray is not rotated");
			extent.extentLoggerFail("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAPremiumPage.objPreviousArrowMusicPageBtn, "Previous Arrow Button");

		extent.HeaderChildNode(" HLS_125: Verify On click More/>");
		swipeTillTray(10, "ZEE5 Top 20 - Kannada", "ZEE5 Top 20 - Kannada tray");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn1("ZEE5 Top 20 - Kannada"), "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn1("ZEE5 Top 20 - Kannada"), "More Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.info("Navigated to More Page");
				extent.extentLogger("More", "Navigated to More Page");
			} else {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("More", "Not navigated to More Page");
			}
		}

		extent.HeaderChildNode(" HLS_129 : Verify user is navigate to consumption page ");
		waitTime(5000);
		click(PWAHamburgerMenuPage.objFirstCard, "First card");
		waitTime(10000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
		}
		Back(1);
		extent.HeaderChildNode("HLS_127 :Verify that Play and Share CTA");
		// validateTrayTitleAndTrayCards(tabName, "music");
		scrollDownByY(150);
		trayTitleAndContentValidationWithApiDataZeeoriginals(tabName, "music");
		// musicPageTrayTitleAndContentValidationWithApiData(tabName, "videos",
		// userType);
		navigateToAnyScreenOnWeb("Music");
		extent.HeaderChildNode("HLS_128 :Verify the right side bottom arrow ");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (verifyElementPresent(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}
		extent.HeaderChildNode("HLS_130 : Verify that Recommended Songs Videos are displayed right side of the player");
		mandatoryRegistrationPopUp(userType);
		if (checkElementDisplayed(PWAPremiumPage.objWEBMastheadCarousel, "Carousel card")) {
			click(PWAHomePage.objContTitleOnCarousel, "Carousel card");
		} else if (checkElementDisplayed(PWAMusicPage.objBannerPlusTrayCard, "Banner Tray Card")) {
//			click(PWAMusicPage.objBannerPlusTrayCard, "Banner Tray card");
			JSClick(PWAMusicPage.objBannerPlusTrayCard, "Banner Tray card");
		}
//		if (checkElementDisplayed(PWASubscriptionPages.objGetPremiumPopupTitle, "Subscribe Pop Up")) {
//			verifyElementPresentAndClick(PWAPremiumPage.objClosePremiumPopup, "Premium PopUp Close icon");
//		}
		mandatoryRegistrationPopUp(userType);
		waitTime(5000);
		verifyElementPresent(PWAMusicPage.objRecommendedSongsVideosTray, "Recommended Songs Videos tray");
	}


	/**
	 * Method for live tv page validation
	 * @param userType
	 * @param tabName
	 * @throws Exception
	 */
	public void LiveTVValidation(String userType) throws Exception {
		extent.HeaderChildNode(" Verify user navigation Live TV page");
		String channel = getParameterFromXML("livechannel");
		navigateToAnyScreenOnWeb("Live TV");
		waitForElementPresence(PWALiveTVPage.objFirstfreeContentCard, 60, "First free content card");
		waitforLiveTabToLoad();
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
		String channelTitle = getWebDriver().findElement(PWALandingPages.objFirstAssetInTray(channel)).getText();
		System.out.println(channelTitle);
		extent.HeaderChildNode(
				"HLS_140 : Validating that user is navigated to respective Live Channel consumption screen post tapping on Live Channel Card");
		verifyElementPresent(PWALiveTVPage.objLiveChannelCardProgressBar, "Live Channel Card");
	//	JSClick(PWALiveTVPage.objLiveChannelCardProgressBar, "Live Channel Card");
		verifyElementPresentAndClick(PWALandingPages.objFirstAssetInTrayIndex(channel),"Live Channel Card");
		waitTime(5000);
		if (checkElementDisplayed(PWALiveTVPage.objGoHomeLink, "GO HOME ") == true) {
			BackButton(1);
			Thread.sleep(5000);
			channelTitle = getWebDriver().findElement(PWALiveTVPage.objLiveChannelCardTitle1).getText();
			System.out.println(channelTitle);
			verifyElementPresentAndClick(PWALiveTVPage.objLiveChannelCard1, "Live Channel Card");
		}
		waitTime(2000);
		String playerPageChannelTitle = getWebDriver().findElement(PWALiveTVPage.objLiveChannelConsumptionPageTitle)
				.getText();
		System.out.println(playerPageChannelTitle);
		if (channelTitle.equalsIgnoreCase(playerPageChannelTitle)) {
//			softAssert.assertEquals(channelTitle.equalsIgnoreCase(playerPageChannelTitle), false,
//					"Navigated to respective Live Channel Consumption screen");
			logger.info("Navigated to respective Live Channel Consumption screen");
			extent.extentLogger("Live Channel Page", "Navigated to respective Live Channel Consumption screen");
		} else {
//			softAssert.assertEquals(true, true, "Not navigated to respective Live Channel Consumption screen");
//			softAssert.assertAll();
			logger.error("Not navigated to respective Live Channel Consumption screen");
			extent.extentLoggerFail("Live Channel Page", "Not navigated to respective Live Channel Consumption screen");
		}
		waitTime(2000);
		BackButton(1);

		extent.HeaderChildNode("HLS_131 : Verifing whether user is able to navigate Live Tv landing page");
		if (verifyElementPresent(PWAHomePage.objActiveTab, "Live TV")) {
			logger.info("Live Tv tab is highlighted, user is able to navigate Live Tv landing page");
			extent.extentLogger("Live Tv landing page",
					"Live Tv tab is highlighted, user is able to navigate Live Tv landing page");
		}

		extent.HeaderChildNode("HLS_132 : Validating that user is navigated to channel guide screen");
		waitForElementPresence(PWALiveTVPage.objLiveChannelCardTitle, 60, "Live channel card title");
		verifyElementPresentAndClick(PWALiveTVPage.objNothighlightedChannelGuideToggle, "Channel guide toggle not highlighted");
		waitForElementPresence(PWALiveTVPage.objHighlightedChannelGuideToggle, 60, "Channel guide toggle highlighted");
		if (verifyElementPresent(PWALiveTVPage.objHighlightedChannelGuideToggle, "Channel guide toggle")) {
			logger.info("Channel guide toggle is highlighted, User is navigated to Channel guide screen");
			extent.extentLogger("Channel guide",
					"Channel guide toggle is highlighted, User is navigated to Channel guide screen");
		}
		navigateToAnyScreenOnWeb("Live TV");
		waitForElementPresence(PWALiveTVPage.objLiveChannelCardTitle, 60, "Live channel card title");

		extent.HeaderChildNode(" HLS_133 : Verify the rails name and content are loaded for first 2 scroll");
		for (int i = 1; i <= 2; i++) {
			if (checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray")) {
				System.out.println("Tray is loaded for " + i + " scroll");
				logger.info("Tray is loaded for " + i + " scroll");
				extent.extentLogger("Tray load", "Tray is loaded for " + i + " scroll");
			} else {
				ScrollToTheElement(PWAPremiumPage.objTrayTitle(i));
				checkElementDisplayed(PWAPremiumPage.objTrayTitle(i), "Tray");
			}
		}

		extent.HeaderChildNode(
				" HLS_134 :Verifing that on content card after mouse hovor, play, share buttons are displayed");
		Actions actions = new Actions(getWebDriver());
		WebElement contentcard = getWebDriver().findElement(PWALiveTVPage.objCardTitle);
		actions.moveToElement(contentcard).perform();
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objPlayiconAfterMouseHover, "Play icon");
		verifyElementPresent(PWAHomePage.objShareiconAfterMouseHover, "Share icon");

		extent.HeaderChildNode(
				"HLS_135 :Verifing that On tapping of 'Right side bottom arrow' user is navigated to top of screen");
		waitTime(2000);
		partialScroll();
		partialScroll();
		if (verifyElementPresent(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			logger.info("Back to Top arrow is displayed");
			extent.extentLoggerPass("", "Back to Top arrow is displayed");
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");

		} else {
			logger.error("Back to Top arrow is not displayed");
			extent.extentLoggerFail("", "Back to Top arrow is not displayed");
			navigateToHome();
			navigateToAnyScreenOnWeb("Live TV");
			waitTime(5000);
		}
		navigateToAnyScreenOnWeb("Live TV");
		Actions actions2 = new Actions(getWebDriver());
		WebElement ele2 = findElement(PWAHamburgerMenuPage.objZeeLogo1);
		actions2.moveToElement(contentcard).build().perform();
		waitTime(5000);

		extent.HeaderChildNode("HLS_136 :Verifying that multiple languages are given to select with apply and reset button");
		navigateToAnyScreenOnWeb("Live TV");
//		scrollToElement(PWALandingPages.objFirstAssetInTray("All TV Channels"));
		JSClick(PWAPremiumPage.objViewAllBtn1("All TV Channels"), "More Button");
		waitTime(10000);
		verifyElementPresent(PWAPremiumPage.objViewAllForLivePage, "More Page");
		verifyElementPresentAndClick(PWALiveTVPage.objLiveTvFilterOption, "Filter option");
		waitTime(2000);
		List<WebElement> languages = getWebDriver()
				.findElements(By.xpath("//div[contains(@class,'language noSelect')]"));
		languages.size();
		if (languages.size() > 1) {
			logger.info("Multiple languages are given for selection");
			extent.extentLogger("Multiple languages", "Multiple languages are given for selection");
		} else {
			logger.info("Multiple languages are not given for selection");
			extent.extentLogger("Multiple languages", "Multiple languages are not given for selection");
		}
		verifyElementPresent(PWALiveTVPage.objApplyBtn, "Apply button");
		verifyElementPresent(PWALiveTVPage.objResetBtn, "Reset button");
		verifyElementPresentAndClick(PWALiveTVPage.objCloseLanguagePopuUpBtn,
				"Close button of Filter language setting window");
		Back(1);
		waitTime(3000);

		extent.HeaderChildNode(" HLS_137 :Validating that user is navigated to channel guide screen");
		verifyElementPresentAndClick(PWALiveTVPage.objNothighlightedChannelGuideToggle, "Channel guide toggle");
		waitforchannelguideToLoad();
		waitForElementDisplayed(PWALiveTVPage.objHighlightedChannelGuideToggle, 5);
		if (verifyElementPresent(PWALiveTVPage.objHighlightedChannelGuideToggle, "Channel guide toggle")) {
			logger.info("Channel guide toggle is highlighted, User is navigated to Channel guide screen");
			extent.extentLogger("Channel guide",
					"Channel guide toggle is highlighted, User is navigated to Channel guide screen");
		}

		extent.HeaderChildNode(" HLS_139 : Validating UI of Channel Guide Screen");
		click(PWALiveTVPage.objChannelGuideToggle, "Channel Guide Toggle");
		checkElementDisplayed(PWALiveTVPage.objChannelDayStrip, "Channel/Day Strip");
		JSClick(PWALiveTVPage.objChannelDayStrip, "Channel/Day Strip");
		JSClick(PWALiveTVPage.objUpcomingLiveProgramDate, "Upcoming Live Program Date");

		extent.HeaderChildNode("HLS_138 : Validating Channel Guide Sort and Filter Otptions");
		verifyElementPresentAndClick(PWALiveTVPage.objChannelGuideSortOption, "Sort Option");
		verifyElementPresent(PWALiveTVPage.objSortByPopularity, "Sort By Popularity Option");
		verifyElementPresent(PWALiveTVPage.objSortByAZ, "Sort by A-Z Option");
//		extent.HeaderChildNode("HLS_140 :Validating Channel Guide Filter Option");
		verifyElementPresentAndClick(PWALiveTVPage.objChannelGuideFilterOption, "Filter Option");
		verifyElementPresentAndClick(PWALiveTVPage.objHindiFiltrOptn, "Language Filter");
		String selectedLang = getWebDriver().findElement(PWALiveTVPage.objNoOfLangSelectedText).getText();
		System.out.println(selectedLang);
		verifyElementPresentAndClick(PWALiveTVPage.objResetBtn, "Reset Button");
		String selectedLang1 = getWebDriver().findElement(PWALiveTVPage.objNoOfLangSelectedText).getText();
		System.out.println(selectedLang1);
		verifyElementPresentAndClick(PWALiveTVPage.objApplyBtn, "Apply Button");
		waitTime(10000);

		extent.HeaderChildNode("HLS_141 : Validating that On going live show cards are highlighted");
		waitForElementPresence(PWALiveTVPage.objFirstOngoingLiveTvShowCard, 60, "Ongoing Live Tv show card");
		String ongoingLiveTvcardClass = getAttributValue("class", PWALiveTVPage.objFirstOngoingLiveTvShowCard);
		if (ongoingLiveTvcardClass.contains("active")) {
			logger.info("On going live show cards are highlighted on channel guide screen");
			extent.extentLoggerPass("On going live show card",
					"On going live show cards are highlighted on channel guide screen");
		} else {
			logger.error("On going live show cards are not highlighted on channel guide screen");
			extent.extentLoggerFail("On going live show card",
					"On going live show cards are not highlighted on channel guide screen");
		}
		waitTime(2500);

		if (!userType.equals("SubscribedUser")) {
			Back(1);
			waitTime(3000);
			extent.HeaderChildNode(
					"HLS_142, HLS_143 : Verify that Player Inline Subsription Link available when user click on premium content");
			for (int scroll = 0; scroll <= 4; scroll++) {
				if (checkElementDisplayed(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content")) {
					break;
				} else
					scrollByWEB();
			}
			click(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content");
			if (userType.equalsIgnoreCase("Guest")) {
				if (waitForElementPresence(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan Button")) {
					waitForElementPresence(PWASubscriptionPages.objPremiumText, 20, "To Watch this Premium Content - Text");
					waitForElementAndClick(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan Button");
					waitForElementPresence(PWASubscriptionPages.objZEE5Subscription, 20, "Navigated to Subscription page");
					Back(1);
					waitForElementPresence(PWASubscriptionPages.objExistUserText, 20, "Are you a Zee5 Subscriber? - Text");
					waitForElementAndClick(PWASubscriptionPages.objLoginLink, 20, "Login Link");
					waitForElement(PWASubscriptionPages.objLoginPage, 20, "Navigated to Login page");
					Back(1);
				} else {
					logger.error("Guest user should not play premium live content");
					extent.extentLoggerFail("", "Guest user should not play premium live content");
				}
			} else if (userType.equalsIgnoreCase("NonSubscribedUser")) {
				if (waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Buy Plan Button")) {
					verifyElementPresent(PWASubscriptionPages.objPremiumText, "To Watch this Premium Content - Text");
					verifyElementPresentAndClick(PWASubscriptionPages.objGetPremiumButton, "Buy Plan Button");
					verifyElementPresent(PWASubscriptionPages.objZEE5Subscription, "Navigated to Subscription page");
					Back(1);
				} else {
					logger.error("NonSubscribed user should not play premium live content");
					extent.extentLoggerFail("", "NonSubscribed user should not play premium live content");
				}
			}

			if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode("Verifing that premium content videos in landscape mode");
				if (waitForElement(PWASubscriptionPages.objGetPremiumButton, 20, "Player inline Subscribtion link")) {
					logger.info(
							"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
					extent.extentLogger("Maximize icon",
							"Maximize icon is not displayed since user is getting Player inline Subscription link on Player screen");
				}
			}

			else {
				extent.HeaderChildNode("Verifing that premium content videos in landscape mode");
				waitForPlayerAdToComplete2("Video Player");
				waitForElementDisplayed(PWAPlayerPage.objPlayerscreen, 120);
				pause();

				verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize icon");
				click(PWAPlayerPage.maximizeBtn, "Maximize icon");
				for (int i = 0; i < 5; i++) {
					if (checkElementDisplayed(PWAPlayerPage.minimizeBtn, "Minimize icon")) {
						logger.info("User is able to watch Premium content in landscape mode");
						extent.extentLogger("Landscape mode",
								"User is able to watch Premium content in landscape mode");
						break;
					} else {
						click(PWAPlayerPage.objPlayer, "player screen");
					}
				}
			}
		}
		waitTime(3000);
		Back(1);
		waitTime(3000);
		waitForElementPresence(PWALiveTVPage.objLiveChannelCardTitle, 60, "Live channel card title");

		extent.HeaderChildNode("HLS_144 : Verifing that user is able to watch the free Content");
//		verifyElementPresentAndClick(PWALiveTVPage.objFilterOption("FREE Channels"), "Free Channels filter");
		waitForElementPresence(PWALiveTVPage.objFirstfreeContentCard, 60, "First free content card");
		JSClick(PWALiveTVPage.objFirstfreeContentCard, "First Free Content card");
		// waitForElementDisplayed(PWAPremiumPage.objPremiumPopUp, 5);
		if (!(checkElementDisplayed(PWAHamburgerMenuPage.objSubscriptionButton, "Subscription link"))) {
			logger.info("user is able to watch the free Content");
			extent.extentLogger("Free content", "user is able to watch the free Content");
		}
		Back(1);
	}
	/**
	 * Method for zeeplex page validation
	 * @param tabName
	 * @param userType
	 * @throws Exception
	 */
	public void zeeplexvalidation(String tabName, String userType) throws Exception {
		extent.HeaderChildNode("HLS_035: Verify user navigation " + tabName + "page");
		waitTime(15000);
		if (userType.equalsIgnoreCase("Guest")) {
			navigateToAnyScreenOnWeb(tabName);
		}
		if (userType.equals("NonSubscribedUser") || userType.equals("SubscribedUser")) {
			navigateToAnyScreenOnWeb(tabName);
		}

		extent.HeaderChildNode("HLS_036: Verify ZEEPLEX  contents are displayed in Zeeplex landing page");
		waitTime(5000);
		if (checkElementDisplayed(PWAHomePage.objComingSoonText, "Text - Coming Soon!")) {
			logger.info("Text - Coming Soon! observed, hence no Plex content available\"");
			extent.extentLoggerWarning("", "Text - Coming Soon! observed, hence no Plex content available");
		} else {
			verifyElementPresent(PWAHamburgerMenuPage.objZeeplexContent, "Zee plex content");
		}

		extent.HeaderChildNode(
				"HLS_037: Verify ZEEPLEX content trailer are played through clicking Trailer CTA of the Zeeplex contents");
		boolean trailerdisplayed = false;
		for (int i = 0; i < 3; i++) {
			if (checkElementDisplayed(PWAHamburgerMenuPage.objTrailer, "ZeePlex movie Trailer CTA")) {
				trailerdisplayed = true;
				break;
			} else {
				partialScroll();
				logger.info("Swiped page..");
				extent.extentLogger("", "Swiped page..");
			}
		}
		if (trailerdisplayed) {
			ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
			click(PWAHamburgerMenuPage.objTrailer, "Trailer CTA");
			waitTime(3000);
			if (userType.equals("SubscribedUser")) {
				if (checkElementDisplayed(PWAPlayerPage.objRentINRInlineCTA, "Player Inline Rent FOR INR CTA")) {
					logger.info("Navigated to consumption page but ZEEPLEX content have no trailer");
					extent.extentLoggerWarning("Consumption Page",
							"Navigated to consumption page but ZEEPLEX content have no trailer");
				} else if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
					logger.info("Navigated to Consumption Page and played trailer content");
					extent.extentLoggerPass("Consumption Page",
							"Navigated to Consumption Page and played trailer content");
				} else {
					logger.error("Not navigated to the Trailer Consumption playback screen");
					extent.extentLoggerFail("Consumption Page",
							"Not navigated to the Trailer Consumption playback screen");
				}
			} else if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				if (checkElementDisplayed(PWAPlayerPage.objRentNowInlineCTA, "Player Inline Rent Now CTA")) {
					logger.info("Navigated to consumption page but ZEEPLEX content have no trailer");
					extent.extentLoggerWarning("Consumption Page",
							"Navigated to consumption page but ZEEPLEX content have no trailer");
				} else if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
					logger.info("Navigated to Consumption Page and played trailer content");
					extent.extentLoggerPass("Consumption Page",
							"Navigated to Consumption Page and played trailer content");
				} else {
					logger.error("Not navigated to the Trailer Consumption playback screen");
					extent.extentLoggerFail("Consumption Page",
							"Not navigated to the Trailer Consumption playback screen");
				}
			}
			Back(1);
			if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "Would You Like Popup")) {
				JSClick(PWAPlayerPage.objWouldYouLikeClosePopup, "Close of Popup");
			}
			waitTime(3000);
			partialScroll();
			waitTime(2000);
			partialScroll();

			extent.HeaderChildNode(
					"HLS_038: Verify Rental popup displayed through clicking Rent for INR/Rent Now CTA of the Zeeplex contents");
			if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
				if (checkElementDisplayed(PWAPlayerPage.objRentNowCTA, "Rent Now")) {
					ScrollToTheElementWEB(PWAPlayerPage.objRentNowCTA);
					click(PWAPlayerPage.objRentNow, "Rent Now");
					if (verifyElementPresent(PWAPlayerPage.objRentalPage, "Rental Page")) {
						logger.info("Rental page is displayed");
						extent.extentLoggerPass("", "Rental page is displayed");
						// click(PWAHamburgerMenuPage.objrentalpopupclose, "Rental page");
					} else {
						logger.error("Failed to display rental page");
						extent.extentLoggerFail("", "Failed to display rental page");
					}
				} else {
					logger.info("Rent Now CTA for contents are not displayed");
					extent.extentLoggerWarning(" ", "Rent Now for contents are not displayed");
				}
			} else if (userType.equals("SubscribedUser")) {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objrentforINR, "Rent for INR")) {
					ScrollToTheElementWEB(PWAHamburgerMenuPage.objrentforINR);
					click(PWAHamburgerMenuPage.objrentforINR, "Rent for INR");
					if (verifyElementPresent(PWAHamburgerMenuPage.objrentforINRpopup, "Rental Pop Up")) {
						extent.extentLoggerPass("", "Rental pop Up is displayed");
						click(PWAHamburgerMenuPage.objrentalpopupclose, "Rental PopUp Close button");
					} else {
						logger.error("Failed to display rental popup");
						extent.extentLoggerFail("", "Failed to display rental popup");
					}
				} else {
					logger.info("Rent for INR movie contents are not displayed");
					extent.extentLoggerWarning(" ", "Rent for INR movie contents are not displayed");
				}
			}
		} else {
			logger.info(
					"Trailer click, Rent for INR/Rent Now features cannot be tested because trailer CTA unavailable");
			extent.extentLoggerWarning(" ",
					"Trailer click, Rent for INR/Rent Now features cannot be tested because trailer CTA unavailable");
		}
	}

	/**
	 *
	 * ZEEPLEX page validation
	 *
	 * */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void zeeplex(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("Verify user navigation " + tabName + "page");
		navigateToAnyScreenOnWeb(tabName);
		waitTime(3000);
		try{
			Actions actions = new Actions(getWebDriver());
			WebElement ele = getWebDriver().findElement(By.xpath("//*[contains(@class, 'moreMenuBtn iconInitialLoad-ic_Bento')]"));
			actions.moveToElement(ele).build().perform();
		}catch(Exception e) {
			System.out.println("Not hover mouse on element");
			extent.extentLoggerFail("", "Not hover mouse on element");
		}
		if (checkElementDisplayed(PWAHomePage.objActiveTab, "Active tab")) {
			String tab = getText(PWAHomePage.objActiveTab);
			System.out.println(tab);
			logger.info(tab + " tab is highlighted");
			extent.extentLogger("Tab", tab + " tab is highlighted");
		} else {
			logger.error(tabName + " tab is not highlighted");
			extent.extentLoggerFail("Tab", tabName + " tab is highlighted");
		}
		extent.HeaderChildNode("Verify content is loaded when user scroll the page");
		if (checkElementDisplayed(PWAHomePage.objComingSoonText, "Text - Coming Soon!")) {
			logger.info("Text - Coming Soon! observed, hence no Plex content available\"");
			extent.extentLoggerWarning("", "Text - Coming Soon! observed, hence no Plex content available");
		} else {
			scrollDownByY(300);
			logger.info("Scrolled the page UP");
			extent.extentLogger("Tab", "Scrolled the page UP");
			List<WebElement> titles = getWebDriver().findElements(PWAMoviesPage.objTVODTitles);
			ArrayList titlestext = new ArrayList<String>();
			if (titles.size() >= 1) {
				for (int i = 0; i < titles.size(); i++) {
					titlestext.add(titles.get(i).getText());
				}
				logger.info("TVOD Titles displayed: " + titlestext);
				extent.extentLogger("titles", "TVOD Titles displayed: " + titlestext);
				logger.info("TVOD contents are loaded when user scroll the page");
				extent.extentLoggerPass("Tab", "TVOD contents are loaded when user scroll the page");
			} else {
				logger.error("TVOD Titles failed to load after scrolling");
				extent.extentLoggerFail("Tab", "TVOD Titles failed to load after scrolling");
			}
		}

		extent.HeaderChildNode("Verify the Plex content trailer is available");
		if (checkElementDisplayed(PWAHomePage.objComingSoonText, "Text - Coming Soon!")) {
			logger.info("Text - Coming Soon! observed, hence no Plex content available\"");
			extent.extentLoggerWarning("", "Text - Coming Soon! observed, hence no Plex content available");
		} else {
			//ScrollToTheElementWEB(PWAHamburgerMenuPage.objTrailer);
			partialScroll();
			logger.info("Scrolled the page Down");
			extent.extentLogger("", "Scrolled the page Down");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objTrailer, "Trailer button");
			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				if (!checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
						"'You're watching a trailer' message on the player")) {
					extent.extentLoggerFail("", "Plex content trailer is unavailable");
					logger.error("Plex content trailer is unavailable");
				}
			} else {
				logger.error("Not navigated to the Trailer Consumption playback screen");
				extent.extentLoggerFail("Consumption Page", "Not navigated to the Trailer Consumption playback screen");
			}
			Back(1);
			waitTime(3000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objWouldYouLikeWatchMorePopup,
					"WOULD YOU LIKE WATCH MORE POPUP") == true) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objWouldYouLikeWatchMoreCloseButton,
						"POP-UP CLOSE BUTTON");
			}
		}

		extent.HeaderChildNode(
				"Verify Rental pop-up is displayed when User Click on Rent INR CTA");
		if (checkElementDisplayed(PWAHomePage.objComingSoonText, "Text - Coming Soon!")) {
			logger.info("Text - Coming Soon! observed, hence no Plex content available\"");
			extent.extentLoggerWarning("", "Text - Coming Soon! observed, hence no Plex content available");
		} else {
			partialScroll();
			logger.info("Scrolled the page Down");
			extent.extentLogger("", "Scrolled the page Down");
			//ScrollToTheElementWEB(PWAHamburgerMenuPage.objrentforINR);
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objrentforINR, "Rent for INR/Rent Now");
			if(userType.equalsIgnoreCase("SubscribedUser")) {
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objrentforINRpopupClose, "Rental Pop Up Close icon");
			}else if(userType.equalsIgnoreCase("NonSubscribedUser") || userType.equalsIgnoreCase("Guest")) {
				verifyElementPresent(PWAZee5OriginalPage.objOfferPage, "Offer Pop Up");
			}
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");

			if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
				extent.HeaderChildNode(
						"Verify Plex rented details are displayed in My Profile-> Zeeplex rentals");
				verifyElementPresentAndClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
				waitTime(3000);
				verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals");
				Thread.sleep(3000);
				verifyElementPresent(PWAHamburgerMenuPage.objzeeplex, "ZEEPLEX Rentals Page");
				Thread.sleep(5000);
				Back(1);
			}
		}

		extent.HeaderChildNode(
				"Verify Watch films before the theatre banner is displayed on Top of the page");
		navigateToAnyScreenOnWeb(tabName);
		verifyElementPresent(PWAHamburgerMenuPage.objZeeplexComesToYou, "Zee Plex 'Watch films before the theatre - Banner");

		extent.HeaderChildNode(
				"Verify 'How it works' pop-up is displayed when user taps on 'How it works' CTA");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplexHowitWorks, "How it Works button");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objzeeplexHowitWorkspopup, "Zeeplex How It Works Pop Up");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objzeeplexHowitworkspopupClose,
				"Close icon of How It Works Pop Up");

		extent.HeaderChildNode(
				"Verify not able to watch the Zee plex content once the Watch Time & Rental period expries");
		navigateToAnyScreenOnWeb(tabName);
		if (checkElementDisplayed(PWAHomePage.objComingSoonText, "Text - Coming Soon!")) {
			logger.info("Text - Coming Soon! observed, hence no Plex content available\"");
			extent.extentLoggerWarning("", "Text - Coming Soon! observed, hence no Plex content available");
		} else {
			if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
				logout();
			}
			waitTime(5000);
			TVODLogin();
			navigateToAnyScreenOnWeb(tabName);
			checkElementDisplayed(PWAHamburgerMenuPage.objzeeplexcontentcard, "ZEEPLEX content card");
			click(PWAHamburgerMenuPage.objzeeplexcontentcard, "ZEEPLEX content card");
			waitTime(5000);
			if (checkElementDisplayed(PWAHamburgerMenuPage.objrentforinrbelowtheplayer, "Rent for INR")) {
				if (checkElementDisplayed(PWAPlayerPage.objWatchingATrailerMessage,
						"'You're watching a trailer' message on the player")) {
					logger.info("Expired User is not able to play the zeeplex content, expected behavior");
					extent.extentLoggerPass("",
							"Expired User is not able to play the zeeplex content, expected behavior");
				} else {
					extent.extentLoggerFail("", "Trailer is not shown, Expired User can watch the zeeplex content");
					logger.error("Trailer is not shown, Expired User can watch the zeeplex content");
				}
			} else {
				logger.error("Expired User is not displayed with Rent for INR below the card");
				extent.extentLoggerFail("", "Expired User is not displayed with Rent for INR below the card");
			}
			navigateHome();
			if (userType.equalsIgnoreCase("Subscribeduser") || userType.equalsIgnoreCase("NonSubscribedUser")) {
				logout();
				ZeeWEBPWALogin(userType);
			}
		}
	}


	/**
	 * Method for search page validation
	 * @param title
	 * @throws Exception
	 */
	public void Search(String title) throws Exception {
		// handle mandatory pop up
		String user = getParameterFromXML("userType");
		mandatoryRegistrationPopUp(user);

		extent.HeaderChildNode("HLS_184: Validating that user lands on search landing screen");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		if (checkElementDisplayed(PWASearchPage.objSearchEditBox, "Search EditBox")) {
			logger.info("User landed on Search landing screen post tapping on search icon");
			extent.extentLogger("Search landingscreen",
					"User landed on Search landing screen post tapping on search icon");
		}

		extent.HeaderChildNode(
				"HLS_185: Validate the Trending Searches tray is available on the Search landing screen");
		verifyElementExist(PWASearchPage.objTrendingSearchesTray, "Trending Searches tray");

		extent.HeaderChildNode("HLS_186: Validate the Top Searches tray is available on the Search landing screen");
		verifyElementExist(PWASearchPage.objTopsearches, "Top Searches tray");

		extent.HeaderChildNode(
				"HLS_187: Validate user is navigated to respective consumption screen through Search result content");
		type(PWASearchPage.objSearchEditBox, title, "Search bar");
		waitForElementDisplayed(PWASearchPage.objSearchNavigationTab("All"), 5);
//		if (getPlatform().equals("Android")) {
//			getDriver().hideKeyboard();
//			logger.info("Hiding keyboard was Successfull");
//			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
//		}
		waitTime(2500);
		click(PWASearchPage.objFirstSearchResult, "Searched show");
		waitTime(2500);
		String contentPlayed = getText(PWAShowsPage.objShowsBannerTitle);
		logger.info("Show Details page displayed: " + contentPlayed);
		extent.extentLogger("showDetails", "Show Details page displayed: " + contentPlayed);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		type(PWASearchPage.objSearchEditBox, title, "Search bar");

		extent.HeaderChildNode("Validating that related search results are available under each tabs");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Episodes"), "Episodes Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Movies"), "Movies Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("News"), "News Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Music"), "Music Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("Videos"), "Videos Tab");
		checkElementDisplayed(PWASearchPage.objAssetTitleSearchNavigationTab, "related search result");
		verifyElementPresentAndClick(PWASearchPage.objSearchNavigationTab("All"), "All Tab");
		clearField(PWASearchPage.objSearchEditBox, "Search Bar");
//		if (getPlatform().equals("Android")) {
//			getDriver().hideKeyboard();
//			logger.info("Hiding keyboard was Successfull");
//			extent.extentLogger("hideKeyboard", "Hiding keyboard was Successfull");
//		}
		Back(1);

		extent.HeaderChildNode("HLS_188: Navigation to Consumption Screen through Trending Searches");
		waitTime(3000);
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
		waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
		if (verifyElementExist(PWASearchPage.objTrendingSearchesTray, "Trending Searches tray")) {
			verifyElementExist(PWASearchPage.objFirstAssetThumbnailTrendingSearch,
					"First asset thumbnail of Trending searches tray");
			verifyElementExist(PWASearchPage.objFirstAssetTitleTrendingSearch,
					"First asset title of Trending searches tray");
			String searchScreenTitle = getElementPropertyToString("innerText",
					PWASearchPage.objFirstAssetTitleTrendingSearch, "First Asset Title Trending Search");
			logger.info("First Asset Title in Trending Search : " + searchScreenTitle);
			extent.extentLogger("", "First Asset Title in Trending Search : " + searchScreenTitle);
			String zeeTab = getWebDriver().getWindowHandle();
			Set<String> handlesBeforeClick = getWebDriver().getWindowHandles();
			JSClick(PWASearchPage.objFirstAssetTitleTrendingSearch, "First card under Trending Searches Tray");
			waitTime(5000);
			Set<String> handlesAfterClick = getWebDriver().getWindowHandles();
			if (handlesAfterClick.size() > handlesBeforeClick.size()) {
				String externalTab = "";
				boolean extOpened = false;
				for (String winHandle : getWebDriver().getWindowHandles()) {
					System.out.println(winHandle);
					if (!winHandle.equals(zeeTab)) {
						externalTab = winHandle;
						getWebDriver().switchTo().window(externalTab);
						logger.info("Switched to External Tab");
						extent.extentLogger("", "Switched to External Tab");
						String extUrl = getWebDriver().getCurrentUrl();
						logger.info("Navigated to the External Tab : " + extUrl);
						extent.extentLogger("playerScreen", "Navigated to the External Tab : " + extUrl);
						screencapture();
						getWebDriver().close();
						logger.info("Closed External Tab");
						extent.extentLogger("playerScreen", "Closed External Tab");
						getWebDriver().switchTo().window(zeeTab);
						logger.info("Switched to Zee Tab");
						extent.extentLogger("", "Switched to Zee Tab");
						extOpened = true;
						break;
					}
				}
				if (extOpened == false) {
					logger.error("Failed to open External Tab");
					extent.extentLoggerFail("playerScreen", "Failed to open External Tab");
				}
			} else {
				waitTime(6000);
				waitTime(6000);
				partialScroll();
				mandatoryRegistrationPopUp(user);
				// if news
				String nextPageTitle = getElementPropertyToString("innerText", PWAPlayerPage.objContentTitleLiveTVname,
						"Content Title");
				// if consumptions
				if (nextPageTitle == null) {
					nextPageTitle = getElementPropertyToString("innerText",
							PWAPlayerPage.objContentTitleOfTVShowsInConsumptionPage, "Content Title");
				}
				// if show details
				if (nextPageTitle == null) {
					nextPageTitle = getElementPropertyToString("innerText", PWAShowsPage.objShowsTitle,
							"Content Title");
				}
				logger.info("Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
				extent.extentLogger("playerScreen",
						"Navigated to the consumption/details page: \"" + nextPageTitle + "\"");
				if (searchScreenTitle.contains(nextPageTitle) || nextPageTitle.contains(searchScreenTitle)) {
					logger.info("User is navigated to respective consumption screen");
					extent.extentLogger("Consumption Screen", "User is navigated to respective consumption screen");
				} else {
					logger.error("User is not navigated to respective consumption screen");
					extent.extentLoggerFail("Consumption Screen",
							"User is not navigated to respective consumption screen");
				}
				if (checkElementDisplayed(PWAHamburgerMenuPage.objPopupClose, "Pop Up") == true) {
					click(PWAHamburgerMenuPage.objPopupClose, "Pop Up Close button");
				}
				JSClick(PWAHomePage.objSearchBtn, "Search icon");
				waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);
			}
		}

		extent.HeaderChildNode("HLS_190 : Verify the Searched contents/Term is shown to the user as Recent searches");
		String keywordB = "Gattimela";
		type(PWASearchPage.objSearchEditBox, keywordB, "Search edit box");
		waitTime(4000);
		verifyElementPresentAndClick(PWASearchPage.objSearchShowsTab, "TV Shows tab");
		mandatoryRegistrationPopUp(user);
		JSClick(PWASearchPage.objSearchedResult(keywordB), "Search Result " + keywordB);
		waitTime(2000);
		JSClick(PWAHomePage.objSearchBtn, "Search icon");
		waitTime(3000);
		verifyElementPresent(PWASearchPage.recentSearchsLabel, "Recent Searches tray");
		verifyElementPresent(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text");
		if (checkElementDisplayed(PWASearchPage.recentSearchItem1, "First Recent Search Item")) {
			if (getText(PWASearchPage.recentSearchItem1).equals(keywordB)) {
				logger.info(keywordB + " is displayed under Recent Searches as expected");
				extent.extentLogger("", keywordB + " is displayed under Recent Searches as expected");
			} else {
				logger.error(keywordB + " is not the first item under Recent Searches");
				extent.extentLoggerFail("", keywordB + " is not the first item under Recent Searches");
			}
		} else {
			logger.error("There is no item under Recent Searches");
			extent.extentLoggerFail("", "There is no item under Recent Searches");
		}

		extent.HeaderChildNode(
				"HLS_191 : Verify after click on the \"Clear All\" button user is able to clear Recent Searches.");
		click(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text");
		waitTime(7000);
		if (checkElementDisplayed(PWASearchPage.recentSearchsLabel, "Recent Searches tray")) {
			logger.error("Recent Searches tray is displayed even after clicking Clear All text");
			extent.extentLoggerFail("", "Recent Searches tray is displayed even after clicking Clear All text");
		}
		if (checkElementDisplayed(PWASearchPage.objClearAllTextofRecentSearches, "Clear All text")) {
			logger.error("Clear All text is displayed even after clicking Clear All text");
			extent.extentLoggerFail("", "Clear All text is displayed even after clicking Clear All text");
		}
		List<WebElement> recentSearchItems = findElements(PWASearchPage.recentSearchItems);
		int size = recentSearchItems.size();
		if (size > 0) {
			logger.error(size + "keywords are found under Recent Searches even after Clear All tap");
			extent.extentLoggerFail("", size + "keywords are found under Recent Searches even after Clear All tap");
		} else {
			logger.info("Previous Recent searched Keywords are not displayed");
			extent.extentLogger("", "Previous Recent searched Keywords are not displayed");
		}
	}


	/**
	 * Method for kids page validation
	 * @param userType
	 * @param tabName
	 * @throws Exception
	 */
	public void kidsvalidation(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("HLS_109: Verify whether user is able to navigate Kids landing page ");
		PWAPagesNavigationAndTabHighlight(tabName);
		extent.HeaderChildNode("HLS_122 :Verify the right side bottom arrow ");
		waitTime(2000);
		partialScroll();
		partialScroll();
		waitTime(3000);
		if (verifyElementPresent(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {

			logger.info("Back to Top arrow is displayed");
			extent.extentLoggerPass("", "Back to Top arrow is displayed");
			JSClick(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");

		} else {
			logger.error("Back to Top arrow is not displayed");
			extent.extentLoggerFail("", "Back to Top arrow is not displayed");
		}
		extent.HeaderChildNode(" HLS_112 : Verify whether \"WATCH  text\" CTA is displaying on Kids feature carousel");
		checkElementDisplayed(PWAKidsPage.objWatchButton, "WATCH text on Carousel card");
		extent.HeaderChildNode(" HLS_110 : Verify Feature carousel banners should rotate at fixed interval of time");
		waitTime(5000);
		boolean autoplayingItemsPresent = false;
		// String languageSmallText = allSelectedLanguages();
		Response tabResponse = ResponseInstance.getResponseForPages(tabName.toLowerCase(), "en,hi,kn");
		int carouselItemsCount = tabResponse.jsonPath().get("buckets[0].items.size()");
		System.out.println(carouselItemsCount);
		if (carouselItemsCount > 7)
			carouselItemsCount = 7;
		for (int i = 0; i < carouselItemsCount; i++) {
			try {
				if (tabResponse.jsonPath().get("buckets[0].items[" + i + "].tags[0]").toString().equals("Autoplay")) {
					logger.info("Autorotation could not be verified because Carousel contains auto playing items");
					extent.extentLoggerWarning("",
							"Autorotation could not be verified because Carousel contains auto playing items");
					autoplayingItemsPresent = true;
					break;
				}
			} catch (Exception e) {
			}
		}
		if (autoplayingItemsPresent == false) {
			String firstCarouselTitle = "", secondCarouselTitle = "", thirdCarouselTitle = "";
			new WebDriverWait(getWebDriver(), 15);
			try {
				firstCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
				waitTime(10000);
				secondCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();
				waitTime(10000);
				thirdCarouselTitle = getWebDriver().findElement(PWAHomePage.objWEBCarouselTitle).getText();

			} catch (Exception e) {
				e.getMessage();
			}
			extent.extentLogger("Autorotating",
					"First content title :" + firstCarouselTitle + ", Second content title :" + secondCarouselTitle
							+ " and Third content title :" + thirdCarouselTitle);
			logger.info("First content title :" + firstCarouselTitle + ", Second content title :" + secondCarouselTitle
					+ " and Third content title :" + thirdCarouselTitle);
			if (firstCarouselTitle.equals(secondCarouselTitle) == false
					&& firstCarouselTitle.equals(thirdCarouselTitle) == false) {
				softAssert.assertFalse(firstCarouselTitle.equals(secondCarouselTitle));
				logger.info("Content is auto rotated");
				extent.extentLogger("Autorotating", "Content is auto rotated");
			} else {
				logger.error("Content is not auto rotated");
				extent.extentLoggerFail("Autorotating", "Content is not auto rotated");
			}
		}
		extent.HeaderChildNode(" HLS_111 : Verify the trays displayed in the Kids page.");
		pagesTrayValidation(tabName);
		extent.HeaderChildNode("HLS_114 : Verify that user is able to rotate tray");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		waitTime(5000);
		if (checkElementDisplayed(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button")) {
			logger.info("Tray is rotated");
			extent.extentLogger("Tray is rotated", "Tray is rotated");
		} else {
			logger.error("Tray is not rotated");
			extent.extentLoggerFail("Tray is not rotated", "Tray is not rotated");
		}
		JSClick(PWAPremiumPage.objPreviousArrowBtn, "Previous Arrow Button");
		JSClick(PWAMusicPage.objArrowToNavigateTop, "Back to Top Arrow icon");
		waitTime(2000);
		extent.HeaderChildNode(" HLS_113 : Verify More functionality");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "More Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.info("Navigated to More Page");
				extent.extentLogger("More", "Navigated to More Page");
			} else {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("More", "Not navigated to More Page");
			}
		}
		Back(1);

		extent.HeaderChildNode(" HLS_115 : Verify user can play any Kids content ");
		verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("freeMovie2");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		JSClick(PWASearchPage.objPremiumSearchResult(keyword), "Premium content");
		waitTime(10000);
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("User is able to watch the content");
			extent.extentLogger(" ", "User is able to watch the content");
		} else {
			logger.info("User is not able to watch the content");
			extent.extentLoggerFail("Consumption Page", "User is not able to watch the content");
		}
		Back(1);

		extent.HeaderChildNode(" HLS_116 : Verify the EDR contents available in the Kids Page.");
		navigateToAnyScreenOnWeb(tabName);
		// verifyElementPresentAndClick(PWAHamburgerMenuPage.Objnextarrowcarousel, "Next
		// arrow ");
		waitTime(3000);
		waitForElementPresence(PWAKidsPage.objHerocarouselPlayBtn("Learning"), 60, "Learning Card in Carousel");
		waitTime(3000);
		verifyElementPresent(PWAKidsPage.objHerocarouselPlayBtn("Learning"), "Learning Card in Carousel");
//		JSClick(PWAPremiumPage.objHerocarouselPlayBtn("Learning"), "Learning Card in Carousel");
		waitTime(3000);

		extent.HeaderChildNode(
				"HLS_117: Verify navigated to Consumption page taps on  EDR content and Buy Plan CTA is displayed below the player.");
		scrollToElement(PWAKidsPage.objSecondItemLearnWithEduauraaTray);
		waitTime(3000);
		verifyElementPresentAndClick(PWAKidsPage.objSecondItemLearnWithEduauraaTray,
				"Second card under Learn with Eduauraa tray");
		waitTime(3000);
		verifyElementPresentAndClick(PWALandingPages.objViewAllPageFirstContent, "First card in More page");
		String consumptionPageTitle = getText(PWAPlayerPage.objContentTitle2);
		System.out.println(consumptionPageTitle);
		extent.extentLogger("", "Navigated to the Consumption page: " + consumptionPageTitle);
		logger.info("Navigated to the Consumption page: " + consumptionPageTitle);
		pausePlayer();
		waitTime(3000);

		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			extent.HeaderChildNode(
					"HLS_118: Verify on tapping on Buy Plan CTA user should navigates to Select pack page.");
			navigateToAnyScreenOnWeb(tabName);
			waitTime(3000);
			waitForElementPresence(PWAKidsPage.objHerocarouselPlayBtn("Learning"), 60, "Learning Card in Carousel");
			waitTime(3000);
			verifyElementPresent(PWAKidsPage.objHerocarouselPlayBtn("Learning"), "Learning Card in Carousel");
			JSClick(PWAKidsPage.objHerocarouselPlayBtn("Learning"), "Learning Card in Carousel");
			verifyElementPresentAndClick(PWAKidsPage.objBuyPlanCTAOnCarousel, "Buy Plan CTA");
			if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription Page")) {
				logger.info("Navigated to select pack Page");
				extent.extentLogger("Subscription Page", "Navigated to select pack Page");
			} else {
				logger.info("Not navigated to select pack Page");
				extent.extentLoggerFail("Subscription Page", "Not navigated to select pack Page");
			}
		}

		if (userType.equals("SubscribedUser")) {
			extent.HeaderChildNode(
					"HLS_120: Verify on Tapping Keep Learning and Continue user should navigate to Eduauraa Sign Up page.");
			checkElementDisplayed(PWAKidsPage.objGoToEduauraa, "Keep Learning CTA");
			click(PWAKidsPage.objGoToEduauraa, "Keep Learning CTA");
			checkElementDisplayed(PWAPlayerPage.objContinue, "Continue offer");
			click(PWAPlayerPage.objContinue, "Continue offer");
			if (checkElementDisplayed(PWAPlayerPage.objHiGuest, "Hi Guest")) {
				logger.info("Hi Guest is displayed, offer is already claimed");
				extent.extentLogger("", "Hi Guest is displayed, offer is already claimed");
			} else {
				if (checkElementDisplayed(PWAHamburgerMenuPage.objEduauraaSignupPage, "Eduauraa Sign Up page")) {
					logger.info("User is navigated to Eduauraa Sign Up page");
					extent.extentLogger("Contact Us", "User is navigated to Eduauraa Sign Up page");
				} else {
					logger.info("Not navigated to Eduauraa Sign Up Page");
					extent.extentLoggerFail("Subscription Page", "Not navigated to Eduauraa Sign Up Page");
				}
			}
		}
		navigateToHome();
		waitTime(3000);

		extent.HeaderChildNode("HLS_121: Verify that Play and Share CTA and metadata like Movies names are displayed on each content card");
		trayTitleAndContentValidationWithApiDataZeeoriginals(tabName, "kids");
	}

	/**
	 * Method to verify the Kids page module for Sanity Suite
	 * @param UserType
	 * @param tabName
	 * @throws Exception
	 */
	public void KidsPageValidation(String UserType, String tabName) throws Exception {
		extent.HeaderChildNode("Verify whether Kids option is Available in header menu");
		navigateToAnyScreenOnWeb("Kids");
		extent.HeaderChildNode("Verify whether kids related videos movies tray are displaying in kids landing screen.");
		if (verifyElementPresent(PWAHamburgerMenuPage.objKidsMovies, "Kids Movie")) {
			logger.info("Kids related movies is displayed ");
			extent.extentLogger("Kids", "Kids related movies is displayed ");
		} else {
			logger.error("Kids related movies is not displayed ");
			extent.extentLoggerFail("Kids", "Kids related movies is not displayed ");
		}

		extent.HeaderChildNode(
				"Verify whether user navigate to respective consumption screen, on click of any content in kids landing screen.");
		if (checkElementDisplayed(PWAPremiumPage.objWEBMastheadCarousel, "Carousel card")) {
			String CarouselTitle = getText(PWAPremiumPage.objWEBMastheadCarousel);
			System.out.println(CarouselTitle);
			click(PWAHomePage.objContTitleOnCarousel, "Carousel card");
			verifyElementPresent(PWAHamburgerMenuPage.objShowName, "Show Title");
			String ShowTitle = getText(PWAHamburgerMenuPage.objShowName);
			System.out.println(ShowTitle);
			if (CarouselTitle.contains(ShowTitle)) {
				logger.info("Navigate to respective consumption screen ");
				extent.extentLogger("Consumption Page", "Navigate to respective consumption screen");
			} else {
				logger.error("Not Navigate to respective consumption screen");
				extent.extentLoggerFail("Consumption Page", "Not Navigate to respective consumption screen");
			}
		}

		collectionDescriptionShowArrowbutton("Kids");
		verifyElementPresent(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		click(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		click(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");

		extent.HeaderChildNode("Verify on Tap of 'Zee5' Logo user should navigate to homepage.");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objZeeLogo1, "Zee Logo");
		if (verifyElementPresent(PWAHomePage.objHomePage, "Home Page ")) {
			logger.info("Home Page is displayed ");
			extent.extentLogger("Home Page", "Home Page is displayed ");
		} else {
			logger.error("Home Page is not displayed ");
			extent.extentLoggerFail("Home Page", "Home Page is not displayed ");
		}

		extent.HeaderChildNode("Verify the Trays and data load for 2 scrolls vertically");
		navigateToAnyScreenOnWeb("Kids");
		pagesTrayValidation("Kids");

		extent.HeaderChildNode("Verify the \" More\" option given on tray right side top and functionality of More");
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "More Button")) {
			JSClick(PWAPremiumPage.objViewAllBtn, "More Button");
			waitTime(10000);
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "More Page")) {
				logger.info("Navigated to More Page");
				extent.extentLogger("More", "Navigated to More Page");
			} else {
				logger.error("Not navigated to More Page");
				extent.extentLoggerFail("More", "Not navigated to More Page");
			}
		}

		extent.HeaderChildNode(
				"Verify the button (>) given at the end of the each tray to rotate the tray and its functioal");
        navigateToAnyScreenOnWeb("Kids");
		RotateTrayValidation();

	    extent.HeaderChildNode(
			"Verify that on each content card after mouse hovor, play, share and add to watch list buttons are displayed");
     	trayTitleAndContentValidationWithApiDataMovie(tabName, "Kids");


		extent.HeaderChildNode("HLS_128 :Verify the right side bottom arrow ");
		waitTime(2000);
		scrollToBottomOfPageWEB();
		waitTime(5000);
		if (verifyElementPresent(PWAMusicPage.objArrowToNavigateTop, "Arrow icon")) {
			waitTime(2000);
			click(PWAMusicPage.objArrowToNavigateTop, "Arrow icon");
		}

		extent.HeaderChildNode(
				"Verify whether user is navigate to consumption page with content autoplaying when user tap on content in Listed collection");
		verifyElementPresent(PWAHamburgerMenuPage.objFreeContentCardFromTray, "Content card");
		JSClick(PWAHamburgerMenuPage.objFreeContentCardFromTray, "Content card");
		partialScroll();
		verifyElementPresent(PWAHamburgerMenuPage.objFirstCardFromContentDetailsPage , "First Content card");
		JSClick(PWAHamburgerMenuPage.objFirstCardFromContentDetailsPage , "First Content card");
		waitForPlayerAdToComplete("Video Player");
		playerScrubTillMidWeb();
		if (verifyElementPresent(PWAPlayerPage.objPlayerScrubber, "Subber")) {
			logger.info("Content is autoplaying , expected behaviour");
			extent.extentLogger("Consumption Page", "Content is autoplaying , expected behaviour");
		} else {
			logger.error("Content is not autoplaying");
			extent.extentLoggerFail("Consumption page", "Content is not autoplaying");
		}

		extent.HeaderChildNode("Verify the user is able to watch the free movies");
		navigateToAnyScreenOnWeb("Kids");
		verifyElementPresent(PWAHamburgerMenuPage.objKidsMovies, "Kids Movie");
		JSClick(PWAHamburgerMenuPage.objKidsMovies, "Kids Movie");
		verifyElementPresent(PWAHamburgerMenuPage.objFirstCardFromCollectionPage , "First card from collection page");
		JSClick(PWAHamburgerMenuPage.objFirstCardFromCollectionPage , "First card from collection page");
		if (verifyElementPresent(PWAPlayerPage.objPlaybackVideoOverlay, "Play back")) {
			logger.info("Navigated to consumption page , expected behaviour");
			extent.extentLogger("Consumption Page", "Navigated to consumption page  , expected behaviour");
		} else {
			logger.error("Not Navigated to consumption page ");
			extent.extentLoggerFail("Consumption page", "Not Navigated to consumption page ");
		}

		extent.HeaderChildNode("Verify  premium and free content videos in landscape or fullscreen mode");
		verifyElementPresent(PWAPlayerPage.maximizeBtn, "Maximize icon");
		JSClick(PWAPlayerPage.maximizeBtn, "Maximize icon");

		verifyElementPresent(PWAPlayerPage.minimizeBtn, "Minimize button");
		JSClick(PWAPlayerPage.minimizeBtn, "Minimize button");

		extent.HeaderChildNode("Verify on kids tab should show kids content only");
		navigateToAnyScreenOnWeb("Kids");
		swipeTillTrayAndClickFirstAsset(userType, 40, "Popular Kids Shows", "Popular Kids Shows Tray", tabName);
	//	scrollToElement(PWAHomePage.objFirstContentCardOfTray("Popular Kids Shows"));
	///	checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Popular Kids Shows"),
	//			"First Content Card Of Popular Kids Shows Tray");
	//	click(PWAHomePage.objFirstContentCardOfTray("Popular Kids Shows"),
	//			"First Content Card Of Popular Kids Shows Tray");
		String contentURL = getWebDriver().getCurrentUrl();

		System.out.println(contentURL);
		if (contentURL.contains("kids")) {
			logger.info("Kids Content is displayed in Kids Tab  , expected behaviour");
			extent.extentLogger("Consumption Page", "Kids Content is displayed in Kids Tab   , expected behaviour");
		} else {
			logger.error("Shows Content is displayed in Kids Tab  ");
			extent.extentLoggerFail("Consumption page", "Shows Content is displayed in Kids Tab  ");
		}

		navigateToAnyScreenOnWeb("Kids");
		swipeTillTrayAndClickFirstAsset(userType, 40, "Mythological Shows", "Mythological Shows Tray", tabName);
	//	scrollToElement(PWAHomePage.objFirstContentCardOfTray("Mythological Shows"));
	//	checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Mythological Shows"),
	//			"First Content Card Of Mythological Shows Tray");
	//	click(PWAHomePage.objFirstContentCardOfTray("Mythological Shows"),
	//			"First Content Card Of Popular Kids Shows Tray");
		String contentURL1 = getWebDriver().getCurrentUrl();

		System.out.println(contentURL1);
		if (contentURL1.contains("kids")) {
			logger.info("Kids Content is displayed in Kids Tab  , expected behaviour");
			extent.extentLogger("Consumption Page", "Kids Content is displayed in Kids Tab   , expected behaviour");
		} else {
			logger.error("Shows Content is displayed in Kids Tab  ");
			extent.extentLoggerFail("Consumption page", "Shows Content is displayed in Kids Tab  ");
		}

		navigateToAnyScreenOnWeb("Kids");
		swipeTillTrayAndClickFirstAsset(userType, 40, "Kids Zone", "Kids Zone Tray", tabName);
	//	scrollToElement(PWAHomePage.objFirstContentCardOfTray("Kids Zone"));
	//	checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Kids Zone"),
	//			"First Content Card Of  Kids Zone Tray");
	//	click(PWAHomePage.objFirstContentCardOfTray("Kids Zone"), "First Content Card Of  Kids Zone Tray");
		String contentURL11 = getWebDriver().getCurrentUrl();

		System.out.println(contentURL11);
		if (contentURL11.contains("kids")) {
			logger.info("Kids Content is displayed in Kids Tab  , expected behaviour");
			extent.extentLogger("Consumption Page", "Kids Content is displayed in Kids Tab   , expected behaviour");
		} else {
			logger.error("Shows Content is displayed in Kids Tab  ");
			extent.extentLoggerFail("Consumption page", "Shows Content is displayed in Kids Tab  ");
		}

		extent.HeaderChildNode("\"Verify user should be able to swipe the cards right to left and left to right and\r\n"
				+ "Next (Card) content should be displayed.\"");
		navigateToAnyScreenOnWeb("Kids");
	//	scrollToElement(PWAHomePage.objFirstContentCardOfTray("Best of Kids"));
		checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Best of Kids"),
				"First Content Card Of Popular Kids Shows Tray");
		// String ContentTitle=getText(PWAHomePage.objFirstContentCardOfTray("Popular
		// Kids Shows"));

		String ContentTitle = getWebDriver().findElement(PWAHomePage.objFirstContentCardOfTray("Best of Kids"))
				.getAttribute("data-minutelytitle").toString();
		System.out.println(ContentTitle);
		logger.info("Content ID fetched from URL: " + ContentTitle);
		extent.extentLogger("contentPlayed", "Content ID fetched from URL: " + ContentTitle);
		verifyElementPresent(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		JSClick(PWAPremiumPage.objNextArrowBtn, "Next Arrow Button");
		checkElementDisplayed(PWAHomePage.objNextArrowFirstContentCardOfTray("Best of Kids"),
				"First Content Card Of Popular Kids Shows Tray");
		String ContentTitle1 = getWebDriver()
				.findElement(PWAHomePage.objNextArrowFirstContentCardOfTray("Best of Kids"))
				.getAttribute("data-minutelytitle").toString();
		System.out.println(ContentTitle1);
		logger.info("Content ID fetched from URL: " + ContentTitle1);
		extent.extentLogger("contentPlayed", "Content ID fetched from URL: " + ContentTitle1);
		if (ContentTitle.equals(ContentTitle1)) {
			logger.info("Cards not able to swipe left to right and right to left ");
			extent.extentLoggerFail("Cards", "Cards not able to swipe left to right and right to left ");
		} else {
			logger.error("Cards able to swipe left to right and right to left , expecetd Result ");
			extent.extentLoggerPass("More", "Cards able to swipe left to right and right to left , expecetd Result ");
		}
	}

	/**
	 * Method to validate traytitle and content with API. Applicable to all pages,Based on parameter passed
	 * @param tab
	 * @param api
	 * @throws Exception
	 */
	public void trayTitleAndContentValidationWithApiDataMovie(String tab, String api) throws Exception {
		extent.HeaderChildNode(tab + " page tray asset validation");
		waitTime(5000);
//		getWebDriver().findElement(By.xpath("(//a[contains(@class,'noSelect')][contains(text(),'" + tab + "')])[1]"))
//				.click();
		// waitTime(7000);
		navigateToAnyScreenOnWeb(tab);
		waitForElementDisplayed(PWAMusicPage.objPremiumTag, 30);
		String languageSmallText = allSelectedLanguages();
		System.out.println(languageSmallText);
		Response resp = ResponseInstance.getResponseForPages(tab.toLowerCase(), languageSmallText);
		List<String> apiTitleList = new LinkedList<String>();
		String Tray_Title = resp.jsonPath().getString("buckets[1].title");
		System.out.println("The Title of the Tray is " + Tray_Title + "");
		List<String> contentList = resp.jsonPath().getList("buckets[1].items");
		System.out.println(contentList.size());
//		partialScrollDown();
		scrollByWEB();
		for (int i = 0; i < 5; i++) {
			String titles = resp.jsonPath().getString("buckets[1].items[" + i + "].title");
			// System.out.println("Api data " +titles);
			logger.info("Api data " + titles);
			extent.extentLogger("Api data ", "Api data " + titles);
			apiTitleList.add(titles);
			Actions actions = new Actions(getWebDriver());
			WebElement contentCard = getWebDriver().findElement(By.xpath(
					"(//div[@class='slick-list']//div[@class='content' or @class='clickWrapper'])[" + (i + 1) + "]"));
			actions.moveToElement(contentCard).build().perform();
			String trayTitle = apiTitleList.get(i);
			logger.info("UI data " + titles);
			extent.extentLogger("UI data ", "UI data " + titles);
			if (trayTitle.equalsIgnoreCase(apiTitleList.get(i))) {
				logger.info("Metadata on the content card is validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is validated with Api data");
			} else {
				logger.info("Metadata on the content card is not validated with Api data");
				extent.extentLogger("Metadata", "Metadata on the content card is not validated with Api data");
			}
			waitTime(2000);
			verifyElementPresent(PWAPremiumPage.objContentCardPlayBtn, "Play Button");
			waitTime(2000);
			verifyElementPresent(PWAPremiumPage.objContentCardShareBtn, "Share Button");
			waitTime(1000);
			verifyElementEnabled(PWAPremiumPage.objContentCardWatchlistBtn, "Add to Watchlist Button");
		}
	}


	/**
	 * Validating Eduauraa
		 * @param userType
		 * @param tabName
		 * @throws Exception
		 */
	public void validatingEduaraa(String userType, String tabName) throws Exception {
			extent.HeaderChildNode(tabName + " page validation ");
			navigateToAnyScreenOnWeb("Kids");
			waitTime(3000);
			waitForElementPresence(PWAKidsPage.objHerocarouselPlayBtn("Learning"), 60, "Learning Card in Carousel");
			waitTime(3000);
			verifyElementPresent(PWAKidsPage.objHerocarouselPlayBtn("Learning"), "Learning Card in Carousel");
//			swipeTillTray(20,  "Learn with Eduauraa", "kids");
//			scrollToTheElementWEB(PWAHomePage.objTrayName);
//			verifyElementExist(PWAHomePage.objTrayName, "EDR content ");

//			Actions actions = new Actions(getWebDriver());
//			WebElement menuOption = getWebDriver().findElement(PWAHomePage.objZeelogo1);
//			checkElementDisplayed(PWAPremiumPage.objTrayTitle(2), "Tray");
//			actions.moveToElement(menuOption).perform();

//			swipeTillTrayAndClickAsset(userType, 20, "Board-wise Tutorials | Eduauraa", "Board-wise Tutorials | Eduauraa tray", "Kids");

			String trayTitleUI = swipeTillTray(30, "Board-wise Tutorials | Eduauraa",
					"Board-wise Tutorials | Eduauraa tray");
			click(PWALandingPages.objViewAllOfTray(trayTitleUI), "More button for tray " + trayTitleUI);
			JSClick(PWAHamburgerMenuPage.objFirstCard, "First card in More page");
			JSClick(PWAHamburgerMenuPage.objFirstCard, "First card in More page");
//			click(PWAShowsPage.objEpisodeCard, "First  Card");
			waitTime(5000);
			if (userType.contains("Guest")) {
				mandatoryRegistrationPopUp(userType);
				if (checkElementDisplayed(PWASearchPage.objCloseRegisterDialog, "Why Register Pop Up")) {
					click(PWASearchPage.objCloseRegisterDialog, "Close Button");
				} else {
					logger.info("Why Register pop up is not displayed");
				}
			}
//			if (checkElementDisplayed(PWASubscriptionPages.objSubscribepopup, "Subscribe popup")) {
//				verifyElementPresentAndClick(PWAMusicPage.objGetPremiumCloseBtn, "Close Button");
//			}
			waitTime(5000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("Navigated to Consumption Page");
				extent.extentLoggerPass("Consumption Page", "Navigated to Consumption Page");
			} else {
				logger.info("Not navigated to Consumption Page");
				extent.extentLoggerFail("Consumption Page", "Not navigated to Consumption Page");
			}
		}



	/**
	 * Validating Buy Plan CTA in Eduauraa
	 * @param userType
	 * @param tabName
	 * @throws Exception
	 */
	public void validatingclaimCTA(String userType, String tabName) throws Exception {
		extent.HeaderChildNode("validation Buy Plan CTA below the player");
//		navigateToAnyScreenOnWeb("Kids");
//		waitForElementAndClick(PWAHomePage.objEduauraaCardCarousel, 20, "Eduauraa Card in Carousel");
//		verifyElementExist(PWAHomePage.objTrayName, "EDR content ");
////		checkElementDisplayed(PWAHomePage.objTrayName, "EDR content ");
//
//		waitTime(5000);
//		verifyElementPresentAndClick(PWAHomePage.objFirstItemLearnWithEduauraaTray,
//				"First card under Learn with Eduauraa tray");
//		verifyElementPresentAndClick(PWALandingPages.objViewAllPageFirstContent, "First card in View All page");
//		String consumptionPageTitle = getText(PWAPlayerPage.objContentTitle);
//		extent.extentLogger("", "Navigated to the Consumption page: " + consumptionPageTitle);
//		logger.info("Navigated to the Consumption page: " + consumptionPageTitle);
//		pausePlayer();
//		waitTime(3000);
		if (userType.equals("NonSubscribedUser") || userType.equals("Guest")) {
			checkElementDisplayed(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Buy Plan");
			extent.HeaderChildNode(
					"HLS_118: Verify on tapping on Buy Plan CTA user should navigates to Select pack page.");
			click(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Buy Plan");
			waitTime(3000);
			if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Subscription Page")) {
				logger.info("Navigated to select pack Page");
				extent.extentLogger("Zee5 Subscription Page", "Navigated to select pack Page");
			} else {
				logger.info("Not navigated to select pack Page");
				extent.extentLoggerFail("Zee5 Subscription Page", "Not navigated to select pack Page");
			}
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");

		if (userType.equalsIgnoreCase("Guest") || userType.equalsIgnoreCase("NonSubscribedUser")) {
			extent.HeaderChildNode("Back button navigation verification (PWA2-4161)");
			navigateToAnyScreenOnWeb("Kids");
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);

			type(PWASearchPage.objSearchEditBox, "The Properties Of Magnetic Field ", "Search bar");
			waitTime(3000);
			verifyElementPresent(PWASearchPage.objfirstdata, "Searched result");
			waitTime(3000);
			click(PWASearchPage.objfirstdata, "Searched result");
			waitTime(3000);
			checkElementDisplayed(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Buy Plan CTA");
			click(PWAPlayerPage.objclaimofferBelowPlayerScreen, "Buy Plan CTA");
			if (checkElementDisplayed(PWASubscriptionPages.objZEE5Subscription, "Zee5 Subscription Page Title")) {
				logger.info("Navigated to select pack Page");
				extent.extentLogger(" Zee5 Subscription Page", "Navigated to select pack Page");
			} else {
				logger.info("Not navigated to select pack Page");
				extent.extentLogger("Zee5 Subscription Page", "Not navigated to select pack Page");
			}
			Back(1);
		//	Back(1);
			waitTime(10000);
			if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
				logger.info("Navigated back to the Eduauraa consumption page.");
				extent.extentLogger("Consumption Page", "Navigated back to the Eduauraa consumption page.");
			} else {
				logger.info("Not navigated back to the Eduauraa consumption page.");
				extent.extentLoggerFail("Consumption Page", "Not navigated back to the Eduauraa consumption page.");// update
			}

		}

		// verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		if (userType.equals("SubscribedUser")) {
			navigateToAnyScreenOnWeb("Kids");
			extent.HeaderChildNode("Eduauraa site navigation verification (PWA2_4311) ");
			verifyElementPresentAndClick(PWAHomePage.objSearchBtn, "Search icon");
			waitForElementDisplayed(PWASearchPage.objSearchEditBox, 20);

			type(PWASearchPage.objSearchEditBox, "The Properties Of Magnetic Field ", "Search bar");
			waitTime(3000);
			verifyElementPresent(PWASearchPage.objfirstdata, "Searched result");
			waitTime(3000);
			click(PWASearchPage.objfirstdata, "Searched result");
			waitTime(3000);

			checkElementDisplayed(PWAKidsPage.objGoToEduauraa, "Go To Eduauraa");
			click(PWAKidsPage.objGoToEduauraa, "Go To Eduauraa");
			checkElementDisplayed(PWAPlayerPage.objContinue, "Continue offer ");
			click(PWAPlayerPage.objContinue, "Continue offer ");
			if (checkElementDisplayed(PWAHamburgerMenuPage.objEduauraaSignupPage, "EduauraaSign Up page")) {
				logger.info("User is navigated to EduauraaSign Up page");
				extent.extentLogger("Contact Us", "User is navigated to EduauraaSign Up page");
			} else {
				logger.info("Not navigated to EduauraaSign Up Page");
				extent.extentLoggerFail("Zee5 Subscription Page", "Not navigated to EduauraaSign Up Page");
			}
			Back(1);
			Back(1);
		}
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
		// Back(1);
		extent.HeaderChildNode("Play CTA validation on carousel (PWA2_4342)");
		navigateToAnyScreenOnWeb(tabName);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.Objnextarrowcarousel, "Next arrow ");
		waitTime(3000);
		verifyElementPresent(PWAHamburgerMenuPage.objWatchCTAOnCarousel, "Watch text on Carousel card");

	}

	/**
	 * News page validation
	 * @param tabName
	 * @throws Exception
	 */
	public void newsPageValidation(String tabName) throws Exception {
		extent.HeaderChildNode("News Page Validation");
		navigateToAnyScreenOnWeb(tabName);
		waitTime(3000);
		if (checkElementDisplayed(PWAHomePage.objActiveTab, "Active tab")) {
			String tab = getText(PWAHomePage.objActiveTab);
			System.out.println(tab);
			logger.info(tab + " tab is highlighted");
			extent.extentLogger("Tab", tab + " tab is highlighted");
		} else {
			logger.error(tabName + " tab is not highlighted");
			extent.extentLoggerFail("Tab", tabName + " tab is highlighted");
		}
		extent.HeaderChildNode("Verify Live News tray display below the Carousal");
		if (verifyElementPresent(PWAHamburgerMenuPage.objLiveChannelTray, "Live Channel Tray")) {
			logger.info("Live channel tray is displayed , expected result");
			extent.extentLogger("Live channel", "Live channel tray is displayed , expected result");
		} else {
			logger.info("Live channel tray is not displayed");
			extent.extentLogger("Live channel", "Live channel tray is not displayed");
		}
		waitTime(3000);
		click(PWAPremiumPage.objWEBMastheadCarousel, "Carousel");
		waitForElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, 10);
		waitForPlayerAdToComplete("Live Player");
		if (checkElementDisplayed(PWAPlayerPage.objPlaybackVideoOverlay, "Player")) {
			logger.info("Navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Navigated to Consumption Page");
		} else {
			logger.info("Not navigated to Consumption Page");
			extent.extentLogger("Consumption Page", "Not navigated to Consumption Page");
		}
		newsPlayerIconValidations();
		checkElementDisplayed(PWAPlayerPage.objLiveTag, "Live Tag");
		FullScreen();
		Back(1);
		if (checkElementDisplayed(PWAPremiumPage.objViewAllBtn, "View All Button")) {
			click(PWAPremiumPage.objViewAllBtn, "View All Button");
			if (checkElementDisplayed(PWAPremiumPage.objViewAllPage, "View All Page")) {
				logger.info("Navigated to View All Page");
				extent.extentLogger("View All", "Navigated to View All Page");
			} else {
				logger.info("Not navigated to View All Page");
				extent.extentLogger("View All", "Not navigated to View All Page");
			}
		}
		Back(1);
		RotateTrayValidation();
		waitTime(3000);
		newsTrayValidation();
		navigateHome();
		// update

		navigateToAnyScreenOnWeb("News");
		extent.HeaderChildNode("Verify the Live News tray & All Channels is displayed in the News landing page");
		if (verifyElementPresent(PWAHamburgerMenuPage.objLiveChannelTray, "Live Channel Tray")) {
			logger.info("Live channel tray is displayed , expected result");
			extent.extentLogger("Live channel", "Live channel tray is displayed , expected result");
		} else {
			logger.info("Live channel tray is not displayed");
			extent.extentLogger("Live channel", "Live channel tray is not displayed");
		}
		if (verifyElementPresent(PWAHomePage.objtrayname("All Channels"), "All Channel Tray")) {
			logger.info("All Channel Tray is displayed , expected result");
			extent.extentLogger("All Channel Tray", "All Channel Tray is displayed , expected result");
		} else {
			logger.info("All Channel Tray is not displayed");
			extent.extentLogger("All Channel Tray", "All Channel Tray is not displayed");
		}
		Kannadalanguageselection();
		extent.HeaderChildNode(
				"Verify 'live News' and 'All Channels' tray translations should be displayed according to the display language.");
		if (verifyElementPresent(PWAHamburgerMenuPage.objLiveNewsInKannada, "Live News Tray in Kannada")) {
			logger.info("Live News Tray in Kannada is displayed , expected result");
			extent.extentLogger("Live News", "Live News Tray in Kannada is displayed , expected result");
		} else {
			logger.info("Live News Tray in Kannada is not displayed ");
			extent.extentLogger("Live News", "Live News Tray in Kannada is not displayed ");
		}
		if (verifyElementPresent(PWAHomePage.objtrayname("ಎಲ್ಲಾ ಚಾನೆಲ್‌ಗಳು"), "Live News Tray in Kannada")) {
			logger.info("All Channels  Tray in Kannada is displayed , expected result");
			extent.extentLogger("All Channels", "All Channels Tray in Kannada is displayed , expected result");
		} else {
			logger.info("All Channels Tray in Kannada is not displayed ");
			extent.extentLogger("All Channels", "All Channels Tray in Kannada is not displayed ");
		}
		EnglishLanguageselection();
		// update
		AutoPlayNotHappen("News");
	}


	/**
	 * Collection page description
	 * @param tabname
	 * @throws Exception
	 */
	public void collectionDescriptionShowArrowbutton(String tabname) throws Exception {
		extent.HeaderChildNode("Collection page  Descripton Display");
		navigateToAnyScreenOnWeb(tabname);
		String trayTitleAPI = "", descAPI = "";
		boolean foundAPIDesc = false;
		waitTime(2500);
		Response tabresponse = ResponseInstance.getResponseForPages(tabname.toLowerCase(), "en,hi,kn");
		try {
			for (int i = 1; i < 9; i++) {

				descAPI = tabresponse.jsonPath().getString("buckets[" + i + "].description");
				if (!descAPI.equals("") && !descAPI.equals(null)) {
					trayTitleAPI = tabresponse.jsonPath().getString("buckets[" + i + "].title");
					logger.info("Description from API: " + descAPI);
					extent.extentLogger("", "Description from API: " + descAPI);
					logger.info("Tray title containing the Description: " + trayTitleAPI);
					extent.extentLogger("", "Tray title containing the Description: " + trayTitleAPI);
					foundAPIDesc = true;
					break;
				}
			}
		} catch (NullPointerException e) {
			System.out.print("NullPointerException caught ");

		}
		if (foundAPIDesc == true) {
			navigateToAnyScreenOnWeb(tabname);
			waitTime(3500);
			boolean t=trayTitleAPI.valueOf(foundAPIDesc) != null;
			if(t==true) {
				JSClick(PWAMusicPage.objViewAllIcon, "More");
			} else
			{
				swipeTillTray(300, trayTitleAPI, "Tray Title " + trayTitleAPI);
				JSClick(PWAMusicPage.objViewAllIcon, "More");
			}

			waitTime(3500);

			if(checkElementDisplayed(PWAMusicPage.objDescription, "Discription"))
			{
				String descUI = getWebDriver().findElement(PWAMusicPage.objDescription).getText();
				logger.info("Description from UI: " + descUI);
				extent.extentLogger("", "Description from UI: " + descUI);
			if (descAPI.equals(descUI)) {
				logger.info("The description of tray captured from API is same as descprition displayed in UI");
				extent.extentLoggerPass("Description",
						"The description of tray captured from API is same as descprition displayed in UI");
			} else {
				logger.error("The description of tray captured from API is mismatch with descprition displayed in UI");
				extent.extentLoggerFail("Description",
						"The description of tray captured from API is mismatch with descprition displayed in UI");
			}
		}
		else {
			logger.info("Description not present in API for first 10 trays");
			extent.extentLoggerWarning("Description", "Description not present in API for first 10 trays");
		}
		}
		navigateHome();
	}


	/**
	 * User Action validation
	 * @param userType
	 * @throws Exception
	 */
	public void UserActionLoggedInUser(String userType) throws Exception {
		extent.HeaderChildNode("User Action module- NonSubscribed user Validations");
		watchlistCheck(userType);
		// Verify Continue watching tray is displayed
		extent.HeaderChildNode("Verifying Continue watching tray for NonSubscribed user");
		navigateToAnyScreenOnWeb("Home");
		if (checkElementDisplayed(PWAHomePage.objContinueWatchingTray, "Coninue Watching tray") == true) {
			if (getPlatform().equalsIgnoreCase("Android")) {
				extent.extentLogger("Verify Continue watching tray ",
						getDriver().findElement(PWAHomePage.objContinueWatchingTray).getText()
								+ " tray is displayed for Non subscribed user");
				logger.info(getDriver().findElement(PWAHomePage.objContinueWatchingTray).getText()
						+ " tray is displayed for Non subscribed user");
			} else if (getPlatform().equalsIgnoreCase("Web")) {
				extent.extentLogger("Verify Continue watching tray ",
						getWebDriver().findElement(PWAHomePage.objContinueWatchingTray).getText()
								+ " tray is displayed for Non subscribed user");
				logger.info(getWebDriver().findElement(PWAHomePage.objContinueWatchingTray).getText()
						+ " tray is displayed for Non subscribed user");
			}

		} else {
			extent.extentLoggerFail("Verify continue watching tray",
					"Continue watching tray is not displayed for Non subscribed user");
			logger.info("Continue watching tray is not displayed for Non subscribed user");
		}
		// Verify Add to Watch list is displayed in Content consumption screen
		// Search any content
		extent.HeaderChildNode("Verifying Add to Watch list in Content consumption screen for NonSubscribed user");
		click(PWAHomePage.objSearchBtn, "Search button");
		type(PWASearchPage.objSearchEditBox, "Ondh Kathe Hella", "Search box");
		waitTime(6000);
		// Click on content
		click(PWASearchPage.objFirstContentCardNameAfterSearch1(1), "Content");
		String contentName = getElementPropertyToString("innerText", PWAPlayerPage.objContentName, "Title");
		verifyElementPresent(PWAPlayerPage.watchListBtn, "Add to Watchlist");
                JSClick(PWAPlayerPage.watchListBtn, "Add to Watchlist");
		/*if (getParameterFromXML("browserType").equalsIgnoreCase("Firefox")) {
			waitTime(100000);
		} else {
			waitTime(45000);
		}*/

		//if (verifyElementPresent(PWASubscriptionPages.objGetPremiumPopupTitle, "Get Premium Popup Title")) {
			//click(PWASubscriptionPages.objPopupCloseButton, "Popup close button");

		if (getPlatform().equalsIgnoreCase("Android")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
			click(PWAHamburgerMenuPage.objMyAccount, "My account");
			click(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
		} else if (getPlatform().equalsIgnoreCase("Web")) {
			verifyElementPresent(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
//			JSClick(PWAHamburgerMenuPage.objProfileIconWEB, "Profile icon");
            JSClick(PWALandingPages.objWebProfileIcon, "Profile Icon");
//			click(PWAHamburgerMenuPage.objMyAccountWeb,"My account");
			JSClick(PWAAddToWatchListPage.objMyWatchList, "My Watchlist");
		}

		JSClick(PWAAddToWatchListPage.objMoviesTab, "Movies tab");
		String ContentNameInWatchlist = getElementPropertyToString("innerText",
				PWAAddToWatchListPage.objFirstContentInWatchlist, "Content title");
		if (contentName.equals(ContentNameInWatchlist)) {
			extent.extentLogger("Verify Watchlist", "Added content is displayed in Watchlist screen");
			logger.info("Added content is displayed in Watchlist screen");
		} else {
			extent.extentLoggerFail("Verify Watchlist", "Added content is not displayed in Watchlist screen");
			logger.info("Added content is not displayed in Watchlist screen");
		}
		mouseHoverWatchlist();
		System.out.println(contentName);
		if (checkElementDisplayed(PWAAddToWatchListPage.objTooltip(contentName), "Tooltip")) {
			logger.info("Tooltip is verifed in watchlist page");
			extent.extentLogger("Tooltip", "Tooltip is verifed in watchlist page");
		}
		click(PWAAddToWatchListPage.objRemoveContentsInWatchList, "Remove all");
	}


	/**
	 * Live page validation
	 * @param userType
	 * @throws Exception
	 */
	public void liveLandingPage(String userType) throws Exception {
		extent.HeaderChildNode("Verifing whether user is able to navigate Live Tv landing page");
		waitTime(10000);
		navigateToAnyScreenOnWeb("Live TV");
		verifyElementPresent(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		//click(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		//click(PWALandingPages.obj_WEBPwa_HamburgerMenu1, "Hamburger Menu");
		// waitTime(20000);
		 waitForElementDisplayed(PWAHomePage.objHighlightedTab("Live TV"), 30);
		if (verifyElementPresent(PWAHomePage.objActiveTab, "Live TV")) {
			logger.info("Live Tv tab is highlighted, user is able to navigate Live Tv landing page");
			extent.extentLogger("Live Tv landing page",
					"Live Tv tab is highlighted, user is able to navigate Live Tv landing page");
		}
		extent.HeaderChildNode(
				"Verifing that On tapping of 'Right side bottom arrow' user is navigated to top of screen");
		waitTime(5000);
		Back_TO_TopArrow_Web(userType);
		waitForElementDisplayed(PWALiveTVPage.objLiveTvFilterOption, 5);
		if (checkElementDisplayed(PWALiveTVPage.objLiveTvFilterOption, "Filter option")) {
			logger.info("On tapping of 'Right side bottom arrow' user is navigated to top of screen without scrolling");
			extent.extentLogger("Right side bottom arrow",
					"On tapping of 'Right side bottom arrow' user is navigated to top of screen without scrolling");
		}
//			extent.HeaderChildNode("Verifing that Hamburger menu overlay is displayed on mouse hover on header menu option");
		Actions actions = new Actions(getWebDriver());
//			 WebElement hamburgerMenu = getWebDriver().findElement(PWAHomePage.objHamburgerMenu);
//			 actions.moveToElement(hamburgerMenu).perform();
//			 verifyElementPresent(PWAHamburgerMenuPage.objhamburgerMenuOverlayHomeBtnWeb, "hamburger menu overlay");
		extent.HeaderChildNode("Verifing that on content card after mouse hovor, play, share buttons are displayed");
		WebElement contentcard = getWebDriver().findElement(PWALiveTVPage.objCardTitle);
		actions.moveToElement(contentcard).perform();
		waitTime(5000);
		verifyElementPresent(PWAHomePage.objPlayiconAfterMouseHover, "Play icon");
		verifyElementPresent(PWAHomePage.objShareiconAfterMouseHover, "Share icon");

		// update
		extent.HeaderChildNode(
				"Verify if the user can see the similar channels and upnext rail on the Live TV consumtion page");
		//click(PWAHamburgerMenuPage.objLiveCard, "ContentTitle");
		waitforLiveTabToLoad();
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
		String channelTitle = getWebDriver().findElement(PWALandingPages.objFirstAssetInTray("Free TV Channels")).getText();
		System.out.println(channelTitle);
		verifyElementPresent(PWALiveTVPage.objLiveChannelCardProgressBar, "Live Channel Card");
		JSClick(PWALiveTVPage.objLiveChannelCardProgressBar, "Live Channel Card");
		waitTime(4000);
		verifyElementPresent(PWAHomePage.objFirstContentCardOfTray("Similar Channels"),
				"First Content Card Of Similar Channels Tray");
		verifyElementPresent(PWAHamburgerMenuPage.objUpnextRail, "Upnext rail");
		Back(1);
		}


	/**
	 * Validating filter option
	 * @throws Exception
	 */
	public void live() throws Exception {
                swipeTillTray(15, "All TV Channels", "All TV Channels");
                JSClick(PWAPremiumPage.objViewAllBtn1("All TV Channels"), "More Button");
		waitTime(10000);
		verifyElementPresent(PWAPremiumPage.objViewAllForLivePage, "More Page");
		verifyElementPresentAndClick(PWALiveTVPage.objLiveTvFilterOption, "Filter option");
		waitTime(2000);
		List<WebElement> languages = getWebDriver()
				.findElements(By.xpath("//div[contains(@class,'language noSelect')]"));
		languages.size();
		if (languages.size() > 1) {
			logger.info("Multiple languages are given for selection");
			extent.extentLogger("Multiple languages", "Multiple languages are given for selection");
		} else {
			logger.info("Multiple languages are not given for selection");
			extent.extentLogger("Multiple languages", "Multiple languages are not given for selection");
		}
		verifyElementPresent(PWALiveTVPage.objApplyBtn, "Apply button");
		verifyElementPresent(PWALiveTVPage.objResetBtn, "Reset button");
		verifyElementPresentAndClick(PWALiveTVPage.objCloseLanguagePopuUpBtn,
				"Close button of Filter language setting window");
		Back(1);
		waitTime(3000);
	}


	/**
	 * Validating Channel guide screen
	 * @param userType
	 * @throws Exception
	 */
	public void ChannelGuide(String userType) throws Exception {
		extent.HeaderChildNode("Validating that user is navigated to channel guide screen");
		navigateToAnyScreenOnWeb("Live TV");
		waitTime(3000);
		Actions actions = new Actions(getWebDriver());
		WebElement ele = getWebDriver().findElement(PWALandingPages.obj_Pwa_Zee5Logo);
		actions.moveToElement(ele).perform();
		verifyElementPresent(PWALiveTVPage.objNothighlightedChannelGuideToggle, "Channel guide toggle");
		JSClick(PWALiveTVPage.objNothighlightedChannelGuideToggle, "Channel guide toggle");
		waitForElementDisplayed(PWALiveTVPage.objHighlightedChannelGuideToggle, 5);
		if (verifyElementPresent(PWALiveTVPage.objHighlightedChannelGuideToggle, "Channel guide toggle")) {
			logger.info("Channel guide toggle is highlighted, User is navigated to Channel guide screen");
			extent.extentLogger("Channel guide",
					"Channel guide toggle is highlighted, User is navigated to Channel guide screen");
		}
		/*
		 * if (userType.equalsIgnoreCase("SubscribedUser")) { extent.
		 * HeaderChildNode("Validating that user is able to add to reminder the Upcoming Live Program"
		 * ); remainderOptionOnUpcomingShow();
		 * verifyElementPresentAndClick(PWALiveTVPage.objTodayDate, "Today's date"); }
		 */
		extent.HeaderChildNode("Validating that user is able to scroll trough the channel list");
		waitForElementDisplayed(PWALiveTVPage.objFirstOngoingLiveTvShowCard, 20);
		scrollDownWEB();
		scrollToTopOfPageWEB();
		logger.info("user is able to scroll through the channel list");
		extent.extentLogger("Scroll", "user is able to scroll through the channel list");
		extent.HeaderChildNode("Validating that On going live show cards are highlighted");
//		waitForElementDisplayed(PWALiveTVPage.objFirstOngoingLiveTvShowCard, 20);
		waitForElement(PWALiveTVPage.objFirstOngoingLiveTvShowCard, 60, "Ongoing Live Tv show card");
		String ongoingLiveTvcardClass = getAttributValue("class", PWALiveTVPage.objFirstOngoingLiveTvShowCard);
		if (ongoingLiveTvcardClass.contains("active")) {
			logger.info("On going live show cards are highlighted on channel guide screen");
			extent.extentLogger("On going live show card",
					"On going live show cards are highlighted on channel guide screen");
		} else {
			logger.info("On going live show cards are not highlighted on channel guide screen");
			extent.extentLogger("On going live show card",
					"On going live show cards are not highlighted on channel guide screen");
		}
		extent.HeaderChildNode("Validating that user is navigated to respective live TV consumption screen");
		String onGoingLiveTvShowCardTitle = getText(PWALiveTVPage.objOngoingLiveTvShowTitle);
		System.out.println(onGoingLiveTvShowCardTitle);
		verifyElementPresent(PWALiveTVPage.objOngoingLiveTvShowTitle, "Ongoing Live TV Show card");
		JSClick(PWALiveTVPage.objOngoingLiveTvShowTitle, "Ongoing Live TV Show card");
		waitForElementDisplayed(PWASearchPage.objShowTitleInconsumptionPage(onGoingLiveTvShowCardTitle), 5);

		String ConsumptionScreenShowTitle = getText(
				PWASearchPage.objShowTitleInconsumptionPage(onGoingLiveTvShowCardTitle));
		System.out.println(ConsumptionScreenShowTitle);
		if (ConsumptionScreenShowTitle.contains(onGoingLiveTvShowCardTitle)) {
			logger.info("user is navigated to respective consumption screen");
			extent.extentLogger("Consumption Screen", "user is navigated to respective consumption screen");
		} else {
			logger.info("user is not navigated to respective consumption screen");
			extent.extentLogger("Consumption Screen", "user is not navigated to respective consumption screen");
		}
		Back(2);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
	}


	/**
	 * Verify Live TV and Channel g]Guide screen
	 * @throws Exception
	 */
	public void verifyLiveTvAndChannelGuideScreen() throws Exception {
		extent.HeaderChildNode("Validation of UI of Live Tv and Channel Guide");
		waitTime(15000);
		System.out.println(getText(PWAHomePage.objActiveTab));

		partialScroll();
		waitTime(2000);
		if (checkElementDisplayed(PWAHomePage.objHomeBarText("Live TV"), "Live TV Tab")) {
			click(PWAHomePage.objHomeBarText("Live TV"), "Live TV Tab");
		} else if (checkElementDisplayed(PWAHomePage.objMoreMenuIcon, "More Menu Icon") == true) {
			verifyElementPresentAndClick(PWAHomePage.objMoreMenuIcon, "More Menu Icon");
			waitTime(5000);
			verifyElementPresent(PWAHomePage.objMoreMenuTabs("Live TV"), "Live TV Tab");
			click(PWAHomePage.objMoreMenuTabs("Live TV"), "Live TV Tab");
		} else {
			click(PWALiveTVPage.objLiveTVMenu, "Live TV Tab");
		}

		waitTime(10000);
		if (checkElementDisplayed(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup") == true) {
			click(PWAPlayerPage.objWouldYouLikeClosePopup, "WouldYouLikeClosePopup");
		}
		String channelTitle;
		channelTitle = getWebDriver().findElement(PWALiveTVPage.objLiveChannelCardTitle).getText();
		System.out.println(channelTitle);
		extent.HeaderChildNode(
				"Validating that user is navigated to respective Live Channel consumption screen post tapping on Live Channel Card");
		verifyElementPresent(PWALiveTVPage.objLiveChannelCardProgressBar, "Live Channel Card");
		JSClick(PWALiveTVPage.objLiveChannelCardProgressBar, "Live Channel Card");
		waitTime(5000);
		if (checkElementDisplayed(PWALiveTVPage.objGoHomeLink, "GO HOME ") == true) {
			BackButton(1);
			Thread.sleep(5000);
			channelTitle = getWebDriver().findElement(PWALiveTVPage.objLiveChannelCardTitle1).getText();
			System.out.println(channelTitle);
			verifyElementPresentAndClick(PWALiveTVPage.objLiveChannelCard1, "Live Channel Card");
		}
		String playerPageChannelTitle = getWebDriver().findElement(PWALiveTVPage.objLiveChannelConsumptionChannelTitle)
				.getText();
		System.out.println(playerPageChannelTitle);
		if (channelTitle.equalsIgnoreCase(playerPageChannelTitle)) {
			softAssert.assertEquals(channelTitle.equalsIgnoreCase(playerPageChannelTitle), false,
					"Navigated to respective Live Channel Consumption screen");
			logger.info("Navigated to respective Live Channel Consumption screen");
			extent.extentLogger("Live Channel Page", "Navigated to respective Live Channel Consumption screen");
		} else {
			softAssert.assertEquals(true, true, "Not navigated to respective Live Channel Consumption screen");
			softAssert.assertAll();
			logger.info("Not navigated to respective Live Channel Consumption screen");
			extent.extentLogger("Live Channel Page", "Not navigated to respective Live Channel Consumption screen");
		}
		waitTime(2000);
		BackButton(1);
		waitTime(5000);
		extent.HeaderChildNode("Validating Live Tv Language Filter Option");
	//	verifyElementPresentAndClick(PWALiveTVPage.objLiveTvFilterOption, "Live TV Language Filter");
	//	verifyElementPresentAndClick(PWALiveTVPage.objHindiFiltrOptn, "Language Filter");
	//	String selectedLanguage = getWebDriver().findElement(PWALiveTVPage.objNoOfLangSelectedText).getText();
	//	System.out.println(selectedLanguage);
	//	verifyElementPresentAndClick(PWALiveTVPage.objResetBtn, "Reset Button");
	//	String selectedLang2 = getWebDriver().findElement(PWALiveTVPage.objNoOfLangSelectedText).getText();
	//	System.out.println(selectedLang2);
	//	verifyElementPresentAndClick(PWALiveTVPage.objApplyBtn, "Apply Button");
		verifyElementPresentAndClick(PWALiveTVPage.objChannelGuideToggle, "Channel Guide Toggle");
		verifyElementPresentAndClick(PWALiveTVPage.objLiveTVToggleInactive, "Live TV Toggle");
		extent.HeaderChildNode("Validating UI of Channel Guide Screen");
		click(PWALiveTVPage.objChannelGuideToggle, "Channel Guide Toggle");
		checkElementDisplayed(PWALiveTVPage.objChannelDayStrip, "Channel/Day Strip");
		JSClick(PWALiveTVPage.objChannelDayStrip, "Channel/Day Strip");
		JSClick(PWALiveTVPage.objUpcomingLiveProgramDate, "Upcoming Live Program Date");
		extent.HeaderChildNode("Validating Channel Guide Sort Option");
		verifyElementPresentAndClick(PWALiveTVPage.objChannelGuideSortOption, "Sort Option");
		verifyElementPresent(PWALiveTVPage.objSortByPopularity, "Sort By Popularity Option");
		verifyElementPresent(PWALiveTVPage.objSortByAZ, "Sort by A-Z Option");
		extent.HeaderChildNode("Validating Channel Guide Filter Option");
		verifyElementPresentAndClick(PWALiveTVPage.objChannelGuideFilterOption, "Filter Option");
		verifyElementPresentAndClick(PWALiveTVPage.objHindiFiltrOptn, "Language Filter");
		String selectedLang = getWebDriver().findElement(PWALiveTVPage.objNoOfLangSelectedText).getText();
		System.out.println(selectedLang);
		verifyElementPresentAndClick(PWALiveTVPage.objResetBtn, "Reset Button");
		String selectedLang1 = getWebDriver().findElement(PWALiveTVPage.objNoOfLangSelectedText).getText();
		System.out.println(selectedLang1);
		verifyElementPresentAndClick(PWALiveTVPage.objApplyBtn, "Apply Button");
		waitTime(10000);
		extent.HeaderChildNode("Validating share functionality for Upcoming Live Program");

		verifyElementPresent(PWALiveTVPage.objUpcomingLiveProgram, "Upcoming Live Program");
		waitTime(3000);
		JSClick(PWALiveTVPage.objUpcomingLiveProgram, "Upcoming Live Program");
		waitTime(10000);
		verifyElementPresent(PWALiveTVPage.objUpcomingLiveProgramShareBtn, "Share button");
		waitTime(3000);

		if (checkElementDisplayed(PWALiveTVPage.objUpcomingLiveProgramCloseBtn, "Popup Close Button")) {
			verifyElementPresentAndClick(PWALiveTVPage.objUpcomingLiveProgramCloseBtn, "Popup Close Button");
		}
		waitTime(3000);
		verifyElementPresentAndClick(PWALandingPages.obj_Pwa_Zee5Logo, "ZeeLogo");
	}

	/**
	 * Live TV link validation
	 * @param userType
	 * @param tabName
	 * @throws Exception
	 */
	public void LiveTVLinkValidation(String userType , String tabName) throws Exception {
		String TCID = null;
		if(userType.equalsIgnoreCase("SubscribedUser")|| (userType.equalsIgnoreCase("Guest")))
		{
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0795";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0831";
		extent.HeaderChildNode(TCID+ "Verify whether right side of the rail more cta is displayed for free channels and also whether URL - live-tv/free-channels is displayed");
		navigateToAnyScreenOnWeb("Live TV");
		scrollToTheElementWEB(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("Free TV Channels"));
		if(verifyElementPresent(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("Free TV Channels"), "Free TV Channels"))

		{
			logger.info("More button is disp0layed for free channels , expected behaviour");
			extent.extentLoggerPass("Live TV Page", " More button is disp0layed for free channels , expected behaviour");
		} else
		{
			logger.error("More button is not disp0layed for free channels");
			extent.extentLoggerFail("Live TV Page", "More button is not disp0layed for free channels");
		}
		JSClick(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("Free TV Channels"), "Free TV Channels");
		waitTime(3000);
		String FreeChannelURL = getWebDriver().getCurrentUrl();
		System.out.println(FreeChannelURL);
		logger.info("Free Channel URL " + FreeChannelURL);
		if(FreeChannelURL.contains("free-channels"))
		{
			logger.info("The URL contains the free channel  , expected behaviour");
			extent.extentLoggerPass("Live TV Page", " The URL contains the free channel   , expected behaviour");
		} else
		{
			logger.error("The URL doesn't contains the free channel  ");
			extent.extentLoggerFail("Live TV Page", "The URL doesn't contains the free channel  ");
		}
		if(userType.equalsIgnoreCase("Guest"))
		{
			if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0799";
			extent.HeaderChildNode(TCID+ "Verify whether sort option is displayed on top right in free channels collection page");
			if(verifyElementPresent(PWALiveTVPage.objChannelGuideSortOption, "Sort Option"))
			{
				logger.info("Sort option is displayed  , expected behaviour");
				extent.extentLoggerPass("Live TV Page", " Sort option is displayed, expected behaviour");
			} else
			{
				logger.error("Sort option is not displayed ");
				extent.extentLoggerFail("Live TV Page", "Sort option is not displayed");
			}

			//if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0800";
			//extent.HeaderChildNode(TCID+ "Verify user is able to select any one of the option listed in sort in free channels collection page");
			//verifyElementPresent(PWALiveTVPage.objSortByPopularity, "Sort By Popularity Option");
			//click(PWALiveTVPage.objSortByAZ, "Sort by A-Z Option");


		}
		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0796";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0831";
		extent.HeaderChildNode(TCID+ "Verify whether right side of the rail more cta is displayed for All channels and also whether URL - /live-tv/all is displayed ");
		navigateToAnyScreenOnWeb("Live TV");
		scrollToTheElementWEB(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("All TV Channels"));
		verifyElementPresent(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("All TV Channels"), "All TV Channels");
		JSClick(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("All TV Channels"), "All TV Channels");
		waitTime(3000);
		String AllChannelURL = getWebDriver().getCurrentUrl();
		System.out.println(AllChannelURL);
		logger.info("All Channel URL " + AllChannelURL);
		if(AllChannelURL.contains("all"))
		{
			logger.info("The URL contains the All channel  , expected behaviour");
			extent.extentLoggerPass("Live TV Page", " The URL contains the All channel   , expected behaviour");
		} else
		{
			logger.error("The URL doesn't contains the All channel  ");
			extent.extentLoggerFail("Live TV Page", "The URL doesn't contains the All channel  ");
		}

		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0797";
		if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0831";
		extent.HeaderChildNode(TCID+ "Verify whether right side of the rail more cta is displayed for Premium channels and also whether URL - /live-tv/premium-channels is displayed");
		navigateToAnyScreenOnWeb("Live TV");
		scrollToTheElementWEB(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("Premium TV Channels"));
		verifyElementPresent(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("Premium TV Channels"), "Premium TV Channels");
		JSClick(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("Premium TV Channels"), "Premium TV Channels");
		waitTime(3000);
		String PremiumChannelURL = getWebDriver().getCurrentUrl();
		System.out.println(PremiumChannelURL);
		logger.info("All Channel URL " + PremiumChannelURL);
		if(PremiumChannelURL.contains("premium-channels"))
		{
			logger.info("The URL contains the Premium Channels  , expected behaviour");
			extent.extentLoggerPass("Live TV Page", " The URL contains the Premium Channels   , expected behaviour");
		} else
		{
			logger.error("The URL doesn't contains the Premium Channels  ");
			extent.extentLoggerFail("Live TV Page", "The URL doesn't contains the Premium Channels ");
		}

		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0797";
		extent.HeaderChildNode(TCID+ "Verify whether selected display Language is displayed in the Url just after zee5.com in any Landing /collection page");
		navigateHome();
		Kannadalanguageselection();
		waitTime(3000);
		String DisplayLanguage = getWebDriver().getCurrentUrl();
		System.out.println(DisplayLanguage);
		logger.info("All Channel URL " + DisplayLanguage);
		if(DisplayLanguage.contains("kn"))
		{
			logger.info("The URL contains the Display Language  , expected behaviour");
			extent.extentLoggerPass("Live TV Page", " The URL contains the Display Language   , expected behaviour");
		} else
		{
			logger.error("The URL doesn't contains the Display Language  ");
			extent.extentLoggerFail("Live TV Page", "The URL doesn't contains the Display Language ");
		}

		if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0803";
		extent.HeaderChildNode(TCID + "Verify user is able to navigate to respective language page post click on respective language Thumbnail");
		if(checkElementDisplayed(PWAHomePage.objTabName("Home"), "Home tab"))
		{
			logger.info("User is not able to navigate to respective language page ");
			extent.extentLoggerFail("Live TV Page", "User is not able to navigate to respective language page ");
		} else
		{
			logger.error("User is  able to navigate to respective language page , Expected behaviour ");
			extent.extentLoggerPass("Live TV Page", "User is  able to navigate to respective language page , Expected behaviour ");
		}
		EnglishLanguageselection();

		if(userType.equalsIgnoreCase("Guest"))
		{
			if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0805";

			navigateToAnyScreenOnWeb("Live TV");
			scrollToTheElementWEB(PWALiveTVPage.objFirstPremiumCardinTray);
			click(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content");
			waitForElement(PWAPlayerPage.objSubscribeNowLink, 20 ,  "Buy plan on player");
			verifyElementPresent(PWAPlayerPage.objSubscribeNowLink, "Buy plan on player");
			verifyElementPresent(PWASubscriptionPages.objLoginLinkInPlayer, "Login link");
			if(userType.equalsIgnoreCase("Guest")) TCID="TC_PWA_GST_0806";
			extent.HeaderChildNode(TCID+ "Verfiy weather User is able to Play the Premium content when User Login with Subscribe User iD By clicking On Login CTA in consumption page");
			if(verifyElementPresent(PWASubscriptionPages.objLoginLinkInPlayer, "Login link"))
			{
			click(PWASubscriptionPages.objLoginLinkInPlayer, "Login link");
			verifyElementPresent(PWALoginPage.objWebLoginBtn, "Login button");
			JSClick(PWALoginPage.objWebLoginBtn, "Login button");
			waitTime(3000);
			verifyElementPresent(PWALoginPage.objEmailField, "Email field");
			JSClick(PWALoginPage.objEmailField, "Email field");
			type(PWALoginPage.objEmailField, "akashzee5@mailnesia.com", "Email Field");
			waitTime(3000);
			verifyElementPresent(PWALoginPage.objPasswordField, "Password Field");
			JSClick(PWALoginPage.objPasswordField, "Password Field");
			type(PWALoginPage.objPasswordField, "123456", "Password field");
			waitTime(5000);
			click(PWALoginPage.objWebLoginButton, "Login Button");
			waitTime(3000);
			if (verifyElementPresent(PWAPlayerPage.objPlayerScrubber, "Subber")) {
				logger.info("Content is autoplaying , expected behaviour");
				extent.extentLogger("Consumption Page", "Content is autoplaying , expected behaviour");
			} else {
				logger.error("Content is not autoplaying");
				extent.extentLoggerFail("Consumption page", "Content is not autoplaying");
			}
			logout();
			}


		}

		}
		if(userType.equalsIgnoreCase("SubscribedUser")|| (userType.equalsIgnoreCase("NonSubscribeduser")))
		{
			navigateToAnyScreenOnWeb("Live TV");
			if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0905";
			if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0828";
			extent.HeaderChildNode(TCID+ "Verify whether URL - /live-tv/lang/<language name>/channels is displayed when user tap on content tray based on Language");
			scrollToTheElementWEB(PWAHomePage.objFirstContentCardOfTray("Browse by Language"));
			JSClick(PWAHomePage.objFirstContentCardOfTray("Browse by Language") , "Language card");
			String BrowserLanguage = getWebDriver().getCurrentUrl();
			System.out.println(BrowserLanguage);
			logger.info(" Browse by Language URL " + BrowserLanguage);
			if(BrowserLanguage.contains("/live-tv/lang/english-channels"))
			{
				logger.info("The URL contains the particular Language  , expected behaviour");
				extent.extentLoggerPass("Live TV Page", " The URL contains the particular Language   , expected behaviour");
			} else
			{
				logger.error("TThe URL doesn't contains the particular Language  ");
				extent.extentLoggerFail("Live TV Page", "The URL doesn't contains the particular Language ");
			}

			navigateToAnyScreenOnWeb("Live TV");
			if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0911";
			extent.HeaderChildNode(TCID+ "Verify whether Browse by genre rail is displayed in Live TV landing page");
			if(verifyElementPresent(PWAHomePage.objFirstContentCardOfTray("Browse by Genre") , "Language card"))
			{
				logger.info(" Browse by genre rail is displayed , expected behaviour");
				extent.extentLoggerPass("Live TV Page", " Browse by genre rail is displayed   , expected behaviour");
			} else
			{
				logger.error("Browse by genre rail is not displayed  ");
				extent.extentLoggerFail("Live TV Page", "Browse by genre rail is not displayed");
			}
			if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0907 , TC_PWA_NS_0914";
			if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0829";
			extent.HeaderChildNode(TCID+ "Verify whether URL - /live-tv/lang/<genre name>-channels is displayed when user tap on content tray based on Genre , Verify user is able to navigate to respective Genre page post click on respective Genre Thumbnail");
			scrollToTheElementWEB(PWAHomePage.objFirstContentCardOfTray("Browse by Genre"));
			JSClick(PWAHomePage.objFirstContentCardOfTray("Browse by Genre") , "Language card");
			String BrowsebyGenre = getWebDriver().getCurrentUrl();
			System.out.println(BrowsebyGenre);
			logger.info(" Browse by Language URL " + BrowsebyGenre);
			if(BrowsebyGenre.contains("/live-tv/genre/movie-channels"))
			{
				logger.info("The URL contains the particular genre  , expected behaviour");
				extent.extentLoggerPass("Live TV Page", " The URL contains the particular genre   , expected behaviour");
			} else
			{
				logger.error("TThe URL doesn't contains the particular genre  ");
				extent.extentLoggerFail("Live TV Page", "The URL doesn't contains the particular genre ");
			}

			if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0909";
			extent.HeaderChildNode(TCID+ "Verify user is able to select any one of the option listed in sort in premium channels collection page");
			navigateToAnyScreenOnWeb("Live TV");
			scrollToTheElementWEB(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("Premium TV Channels"));

			JSClick(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("Premium TV Channels"), "Premium TV Channels");
			waitTime(3000);
				if(verifyElementPresent(PWALiveTVPage.objChannelGuideSortOption, "Sort Option"))
				{
					logger.info("Sort option is displayed  , expected behaviour");
					extent.extentLoggerPass("Live TV Page", " Sort option is displayed, expected behaviour");
				} else
				{
					logger.error("Sort option is not displayed ");
					extent.extentLoggerFail("Live TV Page", "Sort option is not displayed");
				}


				verifyElementPresent(PWALiveTVPage.objChannelGuideSortOption, "Sort Option");
				JSClick(PWALiveTVPage.objChannelGuideSortOption, "Sort Option");
				verifyElementPresent(PWALiveTVPage.objSortByAZ, "Sort by A-Z Option");
				JSClick(PWALiveTVPage.objSortByAZ, "Sort by A-Z Option");

			if(userType.equalsIgnoreCase("NonSubscribeduser"))
			{
				if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0916";
				extent.HeaderChildNode(TCID+ "verify weather Buy Paln CTA will displayed in consumption page when User Play the Premium content");
				navigateToAnyScreenOnWeb("Live TV");
				scrollToTheElementWEB(PWALiveTVPage.objFirstPremiumCardinTray);
				JSClick(PWALiveTVPage.objFirstPremiumCardinTray, "Premium Content");
				waitForElement(PWAPlayerPage.objSubscribeNowLink, 20 ,  "Buy plan on player");
				if(verifyElementPresent(PWAPlayerPage.objSubscribeNowLink, "Buy plan on player"))
				{
					logger.info("Sort option is displayed  , expected behaviour");
					extent.extentLoggerPass("Live TV Page", " Sort option is displayed, expected behaviour");
				} else
				{
					logger.error("Sort option is not displayed ");
					extent.extentLoggerFail("Live TV Page", "Sort option is not displayed");
				}

				navigateToAnyScreenOnWeb("Live TV");
				if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0915";
				extent.HeaderChildNode(TCID+ "Verify Premium icon is displayed for Non-Subscribed user in Live Tv Page");
				if (findElements(PWAHamburgerMenuPage.objPremiumicon).size() > 0) {
					logger.info("Premium tag is displayed , expected behaviour");
					extent.extentLoggerPass("Premium Tag", "Premium Tag is displayed , expected behaviour");

				} else {
					logger.info("Premium tag is not displayed");
					extent.extentLoggerFail("Premium Tag", "Premium Tag is not displayed");

				}

				navigateHome();
				if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0912";
				extent.HeaderChildNode(TCID+ "Verify whether genres wise content is displayed under Browse by genre rail is displayed in Live TV landing page");
				navigateToAnyScreenOnWeb("Live TV");
				scrollToTheElementWEB(PWAHomePage.objFirstContentCardOfTray("Browse by Genre"));
				String CardTitle= getText(PWAHamburgerMenuPage.objFirstcardTitleofBrowseByGenre("Browse by Genre"));
				System.out.println(CardTitle);
				JSClick(PWAHamburgerMenuPage.objFirstcardTitleofBrowseByGenre("Browse by Genre") , "Card Title");
				String trayheader=getText(PWAHamburgerMenuPage.objTrayHeader);
				System.out.println(trayheader);
				if(CardTitle.contains(trayheader))
				{
					logger.info(" genres wise content is displayed, expected behaviour");
					extent.extentLoggerPass("Premium Tag", "genres wise content is displayed , expected behaviour");

				} else {
					logger.info("genres wise content is not displayed");
					extent.extentLoggerFail("Premium Tag", "genres wise content is not displayed");

				}
				navigateHome();
				if(userType.equalsIgnoreCase("NonSubscribeduser")) TCID="TC_PWA_NS_0913";
				extent.HeaderChildNode(TCID+ "Verify whether movies, news and entertainment is displayed first and rest in alphabetical order");
				navigateToAnyScreenOnWeb("Live TV");
				scrollToTheElementWEB(PWAHomePage.objFirstContentCardOfTray("Browse by Genre"));
				waitTime(5000);
				String CardTitle1= getText(PWAHamburgerMenuPage.objFirstcardTitleofBrowseByGenre("Browse by Genre"));
				System.out.println(CardTitle1);
				if((CardTitle1.contains("Movies"))||( CardTitle1.contains("News")) || (CardTitle1.contains("Entertainment")) )
				{
					logger.info("Movies or News or Entertainment is displayed First, expected behaviour");
					extent.extentLoggerPass("Premium Tag", "Movies or News or Entertainment is displayed First , expected behaviour");

				} else {
					logger.info("Movies or News or Entertainment is not displayed First");
					extent.extentLoggerFail("Premium Tag", "Movies or News or Entertainment is not displayed First");

				}
				waitTime(5000);
				String CardTitle2= getText(PWAHamburgerMenuPage.objSecondcardTitleofBrowseByGenre("Browse by Genre"));
				System.out.println(CardTitle2);
				if((CardTitle2.contains("Movies"))||( CardTitle2.contains("News")) || (CardTitle2.contains("Entertainment")) )
				{
					logger.info("Movies or News or Entertainment is displayed First, expected behaviour");
					extent.extentLoggerPass("Premium Tag", "Movies or News or Entertainment is displayed First , expected behaviour");

				} else {
					logger.info("Movies or News or Entertainment is not displayed First");
					extent.extentLoggerFail("Premium Tag", "Movies or News or Entertainment is not displayed First");

				}
				waitTime(5000);
				String CardTitle3= getText(PWAHamburgerMenuPage.objThirdcardTitleofBrowseByGenre("Browse by Genre"));
				System.out.println(CardTitle3);
				if((CardTitle3.contains("Movies"))||( CardTitle3.contains("News")) || (CardTitle3.contains("Entertainment")) )
				{
					logger.info("Movies or News or Entertainment is displayed First, expected behaviour");
					extent.extentLoggerPass("Premium Tag", "Movies or News or Entertainment is displayed First , expected behaviour");

				} else {
					logger.info("Movies or News or Entertainment is not displayed First");
					extent.extentLoggerFail("Premium Tag", "Movies or News or Entertainment is not displayed First");

				}
			}

			if(userType.equalsIgnoreCase("Subscribeduser"))
			{
				if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_SUB_0836";
				extent.HeaderChildNode(TCID+ "Verify whether Fliter option is displayed in collection page post click on more option on All Channel Tray");
				navigateToAnyScreenOnWeb("Live TV");
				scrollToTheElementWEB(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("All Channels"));
				verifyElementPresent(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("All Channels"), "All Channels");
				JSClick(PWAHamburgerMenuPage.objMoreButtonWithTrayTitle("All Channels"), "All Channels");
				waitTime(3000);
				if(verifyElementPresent(PWAHamburgerMenuPage.objAllChannelsFilterOption, "All Channels Filter Option"))
				{
					logger.info("Filter option is displayed  , expected behaviour");
					extent.extentLoggerPass("Live TV Page", " Filter option is displayed, expected behaviour");
				} else
				{
					logger.error("Filter option is not displayed ");
					extent.extentLoggerFail("Live TV Page", "Filter option is not displayed");
				}

				navigateToAnyScreenOnWeb("Live TV");
				if(userType.equalsIgnoreCase("Subscribeduser")) TCID="TC_PWA_NS_0915";
				extent.HeaderChildNode(TCID+ "Verify Premium icon is not displayed for Subscribed user in Live Tv Page");
				if (verifyElementDisplayed(PWAHamburgerMenuPage.objPremiumicon)) {
					logger.info("Premium tag is displayed");
					extent.extentLoggerFail("Premium Tag", "Premium Tag is displayed");

				} else {
					logger.info("Premium tag is not displayed , expected behaviour");
					extent.extentLoggerPass("Premium Tag", "Premium Tag is not displayed , expected behaviour");

				}

			}

		}

	}

	/**
	 * Content and Display language validation
	 * @param userType
	 * @throws Exception
	 */
	public void ContentAndDisplayLanguage(String userType) throws Exception {
		extent.HeaderChildNode("Validate that user is allowed to select desired display language");
		Kannadalanguageselection();
		waitTime(3000);
		if (checkElementDisplayed(PWAHomePage.objTabName("ಮುಖಪುಟ"), "Home tab")) {
			logger.info("Tab name is not Displayed based on display language");
			extent.extentLoggerFail("", " Tab name is not Displayed based on display language");
		} else {
			logger.info("Tab name is Displayed based on display language , expected Result ");
			extent.extentLoggerPass("", "Tab name is Displayed based on display language , expected Result ");

		}

		extent.HeaderChildNode(
				"Validate that complete metadata is displayed in selected display language across all the screens");
		String Tab1 = getText(PWAHamburgerMenuPage.objHeaderTabs(1));
		System.out.println(Tab1);
		logger.info(Tab1 + "Tab is Dispalyed");
		if (Tab1.contains("ಮುಖಪುಟ")) {
			logger.info("Tab name is Displayed based on display language , expected Result " + Tab1);
			extent.extentLoggerPass("", "Tab name is Displayed based on display language , expected Result " + Tab1);

		} else {
			logger.info("Tab name is not Displayed based on display language");
			extent.extentLoggerFail("", " Tab name is not Displayed based on display language");
		}

		String Tab2 = getText(PWAHamburgerMenuPage.objHeaderTabs(2));
		System.out.println(Tab2);
		logger.info(Tab2 + "Tab is Dispalyed");
		if (Tab2.contains("ಮುಖಪುಟ")) {
			logger.info("Tab name is Displayed based on display language , expected Result " + Tab2);
			extent.extentLoggerPass("", "Tab name is Displayed based on display language , expected Result " + Tab2);

		} else {
			logger.info("Tab name is not Displayed based on display language");
			extent.extentLoggerFail("", " Tab name is not Displayed based on display language");
		}

		String Tab3 = getText(PWAHamburgerMenuPage.objHeaderTabs(3));
		System.out.println(Tab3);
		logger.info(Tab3 + "Tab is Dispalyed");
		if (Tab3.contains("ಮುಖಪುಟ")) {
			logger.info("Tab name is Displayed based on display language , expected Result " + Tab3);
			extent.extentLoggerPass("", "Tab name is Displayed based on display language , expected Result " + Tab3);

		} else {
			logger.info("Tab name is not Displayed based on display language");
			extent.extentLoggerFail("", " Tab name is not Displayed based on display language");
		}

		extent.HeaderChildNode("Verify that the radio button is present for the selected display language");
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		waitTime(2000);
		if (checkElementDisplayed(PWAHamburgerMenuPage.objKannadaDisplayRadio, "Ridio Button")) {
			logger.info("Radio button is Displayed , expected result");
			extent.extentLoggerPass("", " Radio button is Displayed , expected result");
		} else {
			logger.info("Radio button is not Displayed ");
			extent.extentLoggerFail("", "Radio button is not Displayed");

		}

		navigateHome();
		EnglishLanguageselection();

		waitTime(3000);
		extent.HeaderChildNode(
				"Validate that content across the website are displayed as per the selected content language.");
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		checkElementDisplayed(PWAHamburgerMenuPage.objContentLanguageBtn, "Content Languages");
		JSClick(PWAHamburgerMenuPage.objContentLanguageBtn, "Content Languages");
		unselectAllContentLanguages();
		extent.extentLogger("", "Selected content language Kannada");
		clickElementWithWebLocator(PWAHamburgerMenuPage.objUnselectedHindiContentLanguage);
		logger.info("Selected content language Hindi");
		if (checkElementDisplayed(PWAHomePage.objFirstContentCardOfTray("Before"),
				"First Content Card Of Before TV Tray")) {
			logger.info("Contents are not displayed based on content language");
			extent.extentLoggerFail("", " Contents are not displayed based on content language");
		} else {
			logger.info("Contents are displayed based on content language , expected Result ");
			extent.extentLoggerPass("", "Contents are displayed based on content language , expected Result ");

		}

		navigateHome();
		extent.HeaderChildNode("Verify User able to select Only One option as \"Display Language\"");
		verifyElementPresent(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		JSClick(PWAHamburgerMenuPage.objLanguageBtn, "Language Button");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objEnglishActivevalidation, "English Active")) {
			logger.info("one display language is able to select , expected Result ");
			extent.extentLoggerPass("", "one display language is able to select , expected Result ");
         } else {
			logger.info("Multiple display language is able to select");
			extent.extentLoggerFail("", " Multiple display language is able to select");
			}
        }

	/**
	 * Check duration in live tv
	 * @param userType
	 * @throws Exception
	 */
	public void checkDurationInLivetv(String userType) throws Exception {
		extent.HeaderChildNode("checkDurationInLivetv");
		waitTime(2000);
		verifyElementPresentAndClick(PWASearchPage.objSearchBtn, "Search button");
		waitTime(2000);
		String keyword = getParameterFromXML("livetv");
		type(PWASearchPage.objSearchEditBox, keyword, "Search Field");
		waitTime(8000);
		mandatoryRegistrationPopUp(userType);
		// click(PWASearchPage.objSpecificFirstSearch(keyword), "Searched Show");
		//JSClick(PWASearchPage.objSpecificFirstSearch(keyword), "Searched Show");
		JSClick(PWASearchPage.objSearchContentFirstCard, "First card of Searched Show");
		waitTime(10000);
		waitForPlayerAdToComplete("Live Player");
		pausePlayer();
		if (checkElementDisplayed(PWAPlayerPage.objcurrenttime, "Current time")) {
			extent.extentLoggerFail("Current time is displayed", "Current time is displayed");
			logger.info("Current time is displayed");
		} else {
			extent.extentLogger("Current time is not displayed", "Current time is not displayed");
			logger.info("Current time is not displayed");
		}
		if (checkElementDisplayed(PWAPlayerPage.objtotaltime, "Total time")) {
			extent.extentLoggerFail("Total time is displayed", "Total time is displayed");
			logger.info("Total time is displayed");
		} else {
			extent.extentLogger("Total time is not displayed", "Total time is not displayed");
			logger.info("Total time is not displayed");
		}
	}


	/**
	 * Watch trailer validation
	 * @throws Exception
	 */
	public void WatchTrailer() throws Exception {
        extent.HeaderChildNode("WatchTrailer");
		// Click on Search icon
		click(PWAHomePage.objSearchBtn, "Search Button");
		// Enter text which contains Watch Trailer Option
		waitTime(3000);
		String keyword = Reporter.getCurrentTestResult().getTestContext().getCurrentXmlTest()
				.getParameter("premiumMovieWithTrailer");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box");
		Thread.sleep(2000);

		waitTime(4000);

		//JSClick(PWASearchPage.objSpecificFirstSearch(keyword), "Premium content");
		JSClick(PWASearchPage.objSearchContentFirstCard, "First card of Searched content");
		Thread.sleep(4000);
		// Verify the Pop up behavior

		if (checkElementDisplayed(PWAPlayerPage.objCloseBtnLoginPopup, "Login popup") == true) {
			click(PWAPlayerPage.objCloseBtnLoginPopup, "Closing Login  Popup");
		}

		Thread.sleep(4000);

		if (checkElementDisplayed(PWAHamburgerMenuPage.objGetPremiumPopup, "GET PREMIUM POPUP") == true) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objPopupClose, "POP-UP CLOSE BUTTON");
		}
		// Verify Watch trailer option is displayed
		checkElementDisplayed(PWASearchPage.objWEBWatchTrailerBtn, "Watch Trailer option");
	}


	/**
	 * Validation of Upnext rail
	 * @param userType
	 * @throws Exception
	 */
	public void upnext(String userType) throws Exception {
		mandatoryRegistrationPopUp(userType);
		navigateToHome();
		String keyword = "", totalDuration = "", currentDuration = "", currentUrl = "", contentURL = "",
				midRollUrl = "", postRollUrl = "";
		SimpleDateFormat formatter = new SimpleDateFormat("HH");
		Date date = new Date();
		System.out.println("date " + date);
		String hourString = formatter.format(date).toString();
		System.out.println("hourString " + hourString);
		int hour = Integer.parseInt(hourString);
		if (hour >= 0 && hour <= 2)
			keyword = "Kumkum Bhagya";
		else if (hour >= 3 && hour <= 5)
			keyword = "Paaru";
		else if (hour >= 6 && hour <= 8)
			keyword = "Jothe Jotheyali";
		else if (hour >= 9 && hour <= 11)
			keyword = "Kundali Bhagya";
		else if (hour >= 12 && hour <= 14)
			keyword = "Kamali";
		else if (hour >= 15 && hour <= 17)
			keyword = "Tujhse Hai Raabta";
		else if (hour >= 18 && hour <= 20)
			keyword = "Apna Time Bhi Aayega";
		else if (hour >= 21 && hour <= 23)
			keyword = "Sathya";
		else
			keyword = "Kamali";

		click(PWAHomePage.objSearchBtn, "Search icon");
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(2000);
		click(PWASearchPage.objSearchNavigationTab("TV Shows"), "TV Shows tab");
		mandatoryRegistrationPopUp(userType);
		JSClick(PWASearchPage.objSearchedResult(keyword), "Search Result");
		waitTime(4000);
		partialScroll();
		verifyElementPresent(PWAShowsPage.objShowDetailEpisodeDropdown, "Episode Dropdown");
		WebElement ele = getWebDriver().findElement(By.xpath("(//div[@class='AllEpisodesListDiv']//div[@class='allEpisodeSelect']//div)[4]"));
		Actions actions = new Actions(getWebDriver());
		actions.moveToElement(ele).build().perform();
		waitTime(3000);
		verifyElementPresent(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1),
				"Second Episode set");
	    JSClick(PWAShowsPage.objShowDetailNonSelectedEpisodeDropdownValues(1), "Second Episode set");
		waitTime(5000);
		JSClick(PWAShowsPage.objEpisodeCard, "First Episode Card");
		mandatoryRegistrationPopUp(userType);
        if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objWhyRegisterPopUp, "Create New Account Popup") == true) {
				click(PWAPlayerPage.objWEBCloseBtnLoginPopup, "Create New Account Popup close button");
			}

		}
		if (userType.equals("Guest") || userType.equals("NonSubscribedUser")) {
			mandatoryRegistrationPopUp(userType);
			waitForPlayerAdToComplete("Video");
			waitTime(2000);

		}
		if (userType.equals("SubscribedUser") || userType.equals("ClubUser")) {
			waitForPlayerAdToComplete("Video");
			waitTime(2000);
		}
		String sourceContent = "";
		try {
			sourceContent = getWebDriver().findElement(PWALandingPages.objPlayerTitle).getText();
			logger.info("Content playing :" + sourceContent);
			extent.extentLogger("", "Content playing :" + sourceContent);
		} catch (Exception e) {
		}

		String sourceContentURL = getWebDriver().getCurrentUrl();
		String[] abc = sourceContentURL.split("/");
		String sourceContentID = abc[abc.length - 1];
		ScrubToPlayerEnd();
		waitForPlayerAdToComplete("Video");
		waitTime(3000);
		if (userType.equals("Guest")) {
			if (checkElementDisplayed(PWAPlayerPage.objSkipButtonInEnglish, "skip")) {
				JSClick(PWAPlayerPage.objSkipButtonInEnglish, "skip");
				waitTime(4000);
			}
		}
		String upnextTitle = waitUntilUpNextCardPlays(sourceContent);
		contentURL = getWebDriver().getCurrentUrl();
		String[] abc1 = contentURL.split("/");
		String contentID = abc[abc.length - 1];
		if (!upnextTitle.equals("")) {
			logger.info("Up Next content play successful");
			extent.extentLogger("", "Up Next content play successful");
		} else {
			logger.info("Up Next content play failed");
			extent.extentLoggerFail("", "Up Next content play failed");
		}
		mandatoryRegistrationPopUp(userType);
		LocalStorage local = ((ChromeDriver) getWebDriver()).getLocalStorage();
		ResponseInstance.updateWatchHistory(contentID, 1, local.getItem("guestToken"));
		ResponseInstance.updateWatchHistory(sourceContentID, 1, local.getItem("guestToken"));
	}


	/**
	 * Static and Footer section validation
	 * @param userType
	 * @throws Exception
	 */
	public void staticPagesandFooterSectionValidation(String userType) throws Exception {
		if (userType.contentEquals("Guest") || userType.contentEquals("NonSubscribedUser")) {
			extent.HeaderChildNode(userType + " scenarios");
			extent.extentLogger("Accessing as " + userType, "Accessing as " + userType);
			logger.info("Accessing as " + userType);
			if (userType.contentEquals("NonSubscribedUser")) {
//				ZeeWEBPWALogin("NonSubscribedUser");
			}

//			if (userType.equalsIgnoreCase("Guest")) {
//				String url = getParameterFromXML("url");
//				// String currenturl = getWebDriver().getCurrentUrl();
//				String timedurl = url + "device";
//				getWebDriver().get(timedurl);
//				System.out.println("Hit URL : " + timedurl);
//				waitTime(5000);
//				if (verifyElementPresent(PWALoginPage.objLoginPage, "Login to ZEE5 page")) {
//					logger.info("Navigated to Login Page , expected behaviour");
//					extent.extentLogger("LoginL Page", "Navigated to Login Page , expected behaviour");
//				} else {
//					logger.info("Not navigated to Login Page");
//					extent.extentLoggerFail("Login Page", "Not navigated to Login Page");
//				}
//			}
			AboutUsScreenValidation();
		    HelpCenterScreenValidation();
			TermsOfUseValidation();
			PrivacyPolicyValidation();
			FooterSectionValidation();
//			contentLanguagewithDisplayLanguage(userType);

		} else if (userType.contentEquals("SubscribedUser")) {
			extent.HeaderChildNode("subscribed scenarios");
			logger.info("Subscribed User");
//			ZeeWEBPWALogin("SubscribedUser");
			SubscribedUserAboutUsScreenValidation();
			HelpCenterScreenValidation();
			SubscribedUserTermsOfUseValidation();
			SubscribedUserPrivacyPolicyValidation();
			BulidVersionValidation();
			FooterSectionValidation();
//			contentLanguagewithDisplayLanguage(userType);
		}
	}


	/**
	 * Method to verify the Footer Section of Home page
	 * @throws Exception
	 */
	public void FooterSectionValidation() throws Exception {
		HeaderChildNode("Footer Section");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		JSClick(PWAHamburgerMenuPage.objAboutUsOption, "About Us option");
		verifyElementPresent(PWAHomePage.objDownloadApps, "Download Apps text");
		verifyElementPresent(PWAHomePage.objAndroidPlayStoreIcon, "Android play store icon");
		// Instagram
		verifyElementPresent(PWAHomePage.objInstagramIcon, "Instagram icon");
		click(PWAHomePage.objInstagramIcon, "Instagram icon");
		switchToWindow(2);
		String instagram = getWebDriver().getCurrentUrl();
		if (instagram.contains("instagram")) {
			logger.info("User is navigated to Instagram page");
			extent.extentLoggerPass("Instagram", "User is redirected to Instagram page");
		}
		getWebDriver().close();
		switchToParentWindow();
		// Twitter
		verifyElementPresentAndClick(PWAHomePage.objTwitterIcon, "Twitter icon");
		switchToWindow(2);
		if (verifyElementPresent(PWAHomePage.objTwitterPage, "Twitter page follow button")) {
			logger.info("User is navigated to Twitter page");
			extent.extentLoggerPass("Twitter", "User is redirected to Twitter page");
		}
		getWebDriver().close();
		switchToParentWindow();
		// Facebook
		verifyElementPresentAndClick(PWAHomePage.objFacebookIcon, "Facebook icon");
		switchToWindow(2);
		String facebook = getWebDriver().getCurrentUrl();
		if (facebook.contains("facebook")) {
			logger.info("User is redirected to facebook page");
			extent.extentLoggerPass("Facebook", "User is redirected to facebook page");
		}
		getWebDriver().close();
		switchToParentWindow();
		verifyElementPresent(PWAHomePage.objCopyRightText, "Copyright text");
		// Contact Us screen
		verifyElementPresentAndClick(PWAHomePage.objHelp, "Help Center in footer section");
		switchToWindow(2);
		verifyElementPresentAndClick(PWAHomePage.objwritetous, "Write to us");
		switchToWindow(3);
		if (verifyElementPresent(PWAHomePage.objcontactus, "Contact Us page")) {
			logger.info("User is navigated to Contact Us page");
			extent.extentLoggerPass("Contact Us", "User is naviagted to Contact Us page");

		}
		getWebDriver().close();
		waitTime(5000);
		switchToWindow(2);
		getWebDriver().close();
		switchToParentWindow();
		waitTime(5000);
		// android play store
		verifyElementPresentAndClick(PWAHomePage.objAndroidPlayStoreIcon, "Google play store icon");
		switchToWindow(2);
		if (verifyElementPresent(PWAHomePage.objGooglePlayLogo, "Android Google Play icon") == true) {
			logger.info("User is navigated to Android Google Play store");
			extent.extentLoggerPass("Google play store", "User is redirected to Google paly store page");
		}
		getWebDriver().close();
		switchToParentWindow();
		waitTime(5000);
		// iOS app store
		verifyElementPresentAndClick(PWAHomePage.objIoSAppStoreIcon, "iOS app store icon");
		switchToWindow(2);
		String iOSURL = getWebDriver().getCurrentUrl();
		if (iOSURL.contains("apple")) {
			logger.info("User is redirected to iOS app store page");
			extent.extentLoggerPass("iOS app store", "User is redirected to iOS app store page");
		}
		getWebDriver().close();
		switchToParentWindow();

		// update
		extent.HeaderChildNode(
				"Verify the Footer Menu Links displayed for all the Category landing, details and Consumption page");
		navigateToAnyScreenOnWeb("Home");
		scrollToElement(PWAHamburgerMenuPage.objfooter);
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer");
		verifyElementPresent(PWAHamburgerMenuPage.objFreeContentCardFromTray, "Content card");
		click(PWAHamburgerMenuPage.objFreeContentCardFromTray, "Content card");
		waitTime(5000);
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer");
		String keyword = "Parru";
		type(PWASearchPage.objSearchEditBox, keyword + "\n", "Search Edit box: " + keyword);
		waitTime(4000);
		waitTime(4000);
		click(PWASearchPage.objspecificSearch, "Searched content");
		waitTime(5000);
		verifyElementPresent(PWAHamburgerMenuPage.objfooter, "Footer");

		extent.HeaderChildNode(
				"Verify the Footer Menu - \"Popular Movies\",\"Popular Tv Shows\", \"Popular Live TV\", \"Popular Web series\", \"Bollywood Top Celebrities\" avilable on the Footer sections.");
		verifyElementPresent(PWAHamburgerMenuPage.objFooterLinks("Popular TV Shows"), "Popular TV Shows");
		verifyElementPresent(PWAHamburgerMenuPage.objFooterLinks("Premium Movies"), "Premium Movies");
		verifyElementPresent(PWAHamburgerMenuPage.objFooterLinks("Popular LIVE TV Channels"),
				"Popular LIVE TV Channels");
		verifyElementPresent(PWAHamburgerMenuPage.objFooterLinks("Popular Web Series"), "Popular Web Series");
		verifyElementPresent(PWAHamburgerMenuPage.objFooterLinks("Bollywood Top Celebrities"),
				"Bollywood Top Celebrities");

		extent.HeaderChildNode("Verify the Footer Menu links navigate to respective Content page on the same tab.");
		verifyElementPresent(PWAHamburgerMenuPage.objFooterLinks("Popular TV Shows"), "Popular TV Shows");
		click(PWAHamburgerMenuPage.objFooterLinks("Popular TV Shows"), "Popular TV Shows");
		System.out.println("Current URL is " + getWebDriver().getCurrentUrl());
		String ShowsURL = getWebDriver().getCurrentUrl();
		if (ShowsURL.contains("Shows")) {
			logger.info("Navigated to Shows tab ");
			extent.extentLogger("Shows Tab", "Navigated to Shows tab");

		}
		scrollToElement(PWAHamburgerMenuPage.objfooter);
		verifyElementPresent(PWAHamburgerMenuPage.objFooterLinks("Premium Movies"), "Premium Movies");
		click(PWAHamburgerMenuPage.objFooterLinks("Premium Movies"), "Premium Movies");
		System.out.println("Current URL is " + getWebDriver().getCurrentUrl());
		String MoviesURL = getWebDriver().getCurrentUrl();
		if (MoviesURL.contains("Movies")) {
			logger.info("Navigated to Movies tab ");
			extent.extentLogger("Shows Tab", "Navigated to Movies tab");

		}

		verifyElementPresent(PWAHamburgerMenuPage.objFooterLinks("Popular LIVE TV Channels"),
				"Popular LIVE TV Channels");
		click(PWAHamburgerMenuPage.objFooterLinks("Popular LIVE TV Channels"), "Popular LIVE TV Channels");
		System.out.println("Current URL is " + getWebDriver().getCurrentUrl());
		String LiveTVURL = getWebDriver().getCurrentUrl();
		if (LiveTVURL.contains("Live")) {
			logger.info("Navigated to Live tab ");
			extent.extentLogger("Live Tab", "Navigated to Live tab");

		}

		verifyElementPresent(PWAHamburgerMenuPage.objFooterLinks("Popular Web Series"), "Popular Web Series");
		click(PWAHamburgerMenuPage.objFooterLinks("Popular Web Series"), "Popular Web Series");
		System.out.println("Current URL is " + getWebDriver().getCurrentUrl());
		String zee5originalsURL = getWebDriver().getCurrentUrl();
		if (zee5originalsURL.contains("zee5originals")) {
			logger.info("Navigated to zee5originals tab ");
			extent.extentLogger("Live Tab", "Navigated to zee5originals tab");

		}

		verifyElementPresent(PWAHamburgerMenuPage.objFooterLinks("Bollywood Top Celebrities"),
				"Bollywood Top Celebrities");
		click(PWAHamburgerMenuPage.objFooterLinks("Bollywood Top Celebrities"), "Bollywood Top Celebrities");
		System.out.println("Current URL is " + getWebDriver().getCurrentUrl());
		String BollyURL = getWebDriver().getCurrentUrl();
		if (BollyURL.contains("celebs")) {
			logger.info("Navigated to celebs tab ");
			extent.extentLogger("Live Tab", "Navigated to celebs tab");
		}
	}

	/**
	 * Verify explore option in hamburger menu
	 * @throws Exception
	 */
	public void verificationsOfExploreOptions() throws Exception {
		extent.HeaderChildNode("Verifications of Explore dropdown options in Hamburger Menu");
		waitTime(5000);
		scrollDownWEB();
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		if (verifyElementPresent(PWAHamburgerMenuPage.objExploreBtn, "Explore option")) {
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objExploreBtn, "Explore option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("Premium"), "Premium option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("TV Shows"), "TV Shows option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("Movies"), "Movies option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("Kids"), "Kids option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("News"), "News option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("Stories"), "Stories option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("Music"), "Music option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("ZEEPLEX"), "ZEEPLEX option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("Live TV"), "Live TV option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("Web Series"), "Web Series option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("Videos"), "Videos option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("Play"), "Play option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("Articles"), "Articles option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("Channels"), "Channels option");
			verifyElementPresent(PWAHamburgerMenuPage.objExploreOptions("Learning"), "Learning option");
			verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		}
	}


	/**
	 * Verify Reset setting in hamburger menu
	 * @throws Exception
	 */
	public void resetToDefault() throws Exception {
		extent.HeaderChildNode("Reset Settings to default Functionality");
		//verifyElementPresentAndClick(PWAHamburgerMenuPage.objMoreSettingInHamburger,"More settings in settings section");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtnWEB, "Language button");
		waitTime(2000);
		JSClick(PWAHamburgerMenuPage.objSelectLanguage, "Language icon");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objAfterSelectedLanguage, "Language")) {
			logger.info("clicked on hindi language in Display language popup");
			extent.extentLogger("Content language", "clicked on hindi language in Display language popup");
		}
		JSClick(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		JSClick(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objHamburgerBtn, "Hamburger menu");
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objResetSettingsToDefault, "Reset Settings to Default");
		waitTime(5000);
		verifyElementPresentAndClick(PWAHamburgerMenuPage.objLanguageBtnWEB, "Language button");
		if (checkElementDisplayed(PWAHamburgerMenuPage.objAfterSelectedLanguage, "Hindi Selected Language") == false) {
			logger.info("Reset to default is success");
			extent.extentLogger("Content language", "Reset to default is success");
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			click(PWAHamburgerMenuPage.objApplyButtonInContentLangugaePopup, "Apply button");
			verifyElementPresentAndClick(PWAHomePage.objZeeLogo, "zee logo");
		} else {
			logger.info("Reset to defualt was unsuccessful");
			extent.extentLogger("Reset to defualt", "Reset to defualt was unsuccessful");
		}
	}

}